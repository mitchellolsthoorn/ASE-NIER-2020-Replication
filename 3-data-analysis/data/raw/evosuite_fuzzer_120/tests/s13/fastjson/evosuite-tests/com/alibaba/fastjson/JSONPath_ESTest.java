/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 01:58:17 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.UUID;
import java.util.Vector;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("h3k'k`", "h3k'k`", 85);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("u", "h3k'k`", sQLTransactionRollbackException0);
      boolean boolean0 = JSONPath.containsValue((Object) hashMap0, "Svam", (Object) sQLNonTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("}gbT\"y)d[s^D", (-405L), jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig(47, true);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath(",QjnKOXKSmL", serializeConfig0, parserConfig0);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("util", "R^uf~6Q", false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RlikeSegement0);
      Long long0 = new Long((-751));
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, jSONPath_FilterSegment0, long0, hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long long0 = 0L;
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("L,jRQmQa9VA ");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-285), (-1189), 11);
      MockDate mockDate0 = new MockDate((-1933225947), 103, 264, (-1189), (-2205));
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, mockDate0, "%9}/H-g|Yk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -81
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("ZnyZP");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but 'Z'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<clinit>");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!b/+9s$");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("0001-01-01T00:00:00+08:00");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue((-2929));
      assertEquals((-2928.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("#S7=c#u[4");
      Long[] longArray0 = new Long[4];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("#S7=c#u[4", longArray0, true);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntObjInSegement0);
      assertSame(jSONPath_IntObjInSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int[] intArray0 = new int[5];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.alibaba.fastjson.JSONPath$MultiIndexSegment", ",QjnKOXKSmL", intArray0, sQLClientInfoException0);
      SQLWarning sQLWarning0 = new SQLWarning("com.alibaba.fastjson.JSONPath$MultiIndexSegment", "com.alibaba.fastjson.JSONPath$MultiIndexSegment", (-751), batchUpdateException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLWarning0);
      JSONPath.contains((Object) sQLTransientConnectionException0, ".']OuO:Uc>");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("^5 >RH_");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement(",");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("lmT;8", false);
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, jSONPath_PropertySegment0, jSONPath_PropertySegment0, "^5 >RH_");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$RangeSegment");
      String string0 = jSONPath_JSONPathParser0.readName();
      assertEquals("com", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=_");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("=_");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("true");
      jSONPath0.init();
      assertEquals("true", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("eeJh=|4,N]w");
      Short short0 = new Short((short)916);
      Stack<Object> stack0 = new Stack<Object>();
      jSONPath0.deepScan(short0, (String) null, stack0);
      assertTrue(stack0.empty());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("..");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "..";
      stringArray0[1] = "..";
      stringArray0[2] = "..";
      stringArray0[3] = "..";
      stringArray0[4] = "..";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, jSONPath_MultiPropertySegment0, "..");
      assertEquals(2, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("undefined");
      jSONPath_JSONPathParser0.next();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"getFieldType\":\"Apple\",\"size\":\"fieldDeserializer\",\"color\":\"Red\",\"value\":true,\"value2\":null,\"like\":\"1\",\"x\":-99}");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"/stackTrace/11\":\"hello\",\"between\":7,\"z\":true,\"a\":[],\"b\":null}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("{\"/stackTrace/11\":\"hello\",\"between\":7,\"z\":true,\"a\":[],\"b\":null}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"/stackTrace/11\":\"hello\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('u');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'u, but '{'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) "{\"x\":\"hello\",\"y\":7,\"z\":[],\"a\":[],\"b\":{}}");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("_Qc<0zg).4?", false);
      JSONPath jSONPath0 = JSONPath.compile("{\"x\":\"hello\",\"y\":7,\"z\":[],\"a\":[],\"b\":{}}");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(932);
      jSONPath_ArrayAccessSegment0.eval(jSONPath0, jSONPath_PropertySegment0, map0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("/asmFactory/classLoader/domains/0/classloader/classLoader/parent/parallelLockMap", serializeConfig0, (ParserConfig) null);
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object object0 = JSONPath.eval((Object) "{\"fruit\":\"Apple\",\"color\":\"Red\",\"/stackTrace/11\":99,\"like\":\"1\"}", "fastjson.parser.autoTypeSupport");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("UXk(B tq-%2CVYN#", serializeConfig0, (ParserConfig) null);
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      int int0 = jSONPath0.size((Object) "ZFvte_");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("ZFvte_");
      boolean boolean0 = jSONPath0.setPropertyValue(jSONPath_KeySetSegment0, "ZFvte_", 19L, jSONPath_KeySetSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = JSONPath.set((Object) "com.alibaba.fastjson.JSONPath$FilterGroup", "VrZK(", (Object) "{\"size\":\"Large\",\"color\":\"Red\",\"value\":99,\"com.alibaba.fastjson.asm.ClassWriter\":true}");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = JSONPath.set((Object) null, "=IN`_nhBXu|y`J)", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Object object0 = JSONPath.read("false", "false");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Map<String, Object> map0 = JSONPath.paths((Object) "{\"getFieldType\":\"Apple\",\"size\":\"Large\",\"color\":false,\"value\":99,\"value2\":null,\"like\":\"rlike\",\"x\":\"a string\"}", serializeConfig0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[] intArray0 = new int[9];
      Set<?> set0 = JSONPath.keySet((Object) intArray0[7], ">");
      assertFalse(set0.contains(">"));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("null", serializeConfig0, parserConfig0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.safeMode", "jsonpath can not be null", (Throwable) null);
      Collection<Object> collection0 = jSONPath0.getPropertyValues(sQLInvalidAuthorizationSpecException0);
      assertFalse(collection0.contains(false));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("min");
      Integer integer0 = new Integer(9);
      Object object0 = jSONPath0.getPropertyValue(integer0, "min", 9);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("in");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("fastjson.parser.deny", "IWHsYF]Rb}@[lV,_F!;", 46, hashMap0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1251, 1251, 1251);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, sQLClientInfoException0, "in");
      Object object1 = jSONPath0.getPropertyValue(object0, "(L", (-326L));
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("{\"getFieldType\":{},\"size\":true,\"color\":\"com.alibaba.fastjson.asm.TypeCollector\",\"value\":true,\"value2\":{},\"number\":99,\"x\":\"a string\"}", serializeConfig0, parserConfig0);
      Class<Date> class0 = Date.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("null", serializeConfig0, parserConfig0);
      Class<Double> class0 = Double.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("}!$?[");
      Class<SQLDataException> class0 = SQLDataException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[RF");
      Object object0 = jSONPath0.getArrayItem("[RF", 0);
      assertEquals("[RF", object0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("BbPj.8[?YGB]w");
      JSONPath jSONPath0 = new JSONPath("(Z)Ljava/lang/Boolean;");
      int int0 = jSONPath0.evalSize(jSONPath_JSONPathParser0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("^4u0ojSm+9\"dg\"v");
      int int0 = jSONPath0.evalSize("^4u0ojSm+9\"dg\"v");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("ZFvte_");
      int int0 = jSONPath0.evalSize(jSONPath0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("h3k'k`");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_Operator0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath jSONPath0 = new JSONPath("[RF");
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_MaxSegment0);
      assertFalse(set0.contains("[RF"));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("%wW.9kU1Vd");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("%wW.9kU1Vd", "%wW.9kU1Vd");
      Set<?> set0 = jSONPath0.evalKeySet(sQLTransactionRollbackException0);
      assertFalse(set0.contains("%wW.9kU1Vd"));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      ArrayList arrayList0 = (ArrayList)jSONPath0.eval((Object) "ZFvte_");
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) "h3k'k`", "'");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Integer integer0 = new Integer(99);
      int int0 = JSONPath.compare(integer0, integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = JSONPath.compare("CX8s-^b7<[YZhe%j", "");
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONPath.size((Object) "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":\"a string\"}", "uMZ(I>:wU");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[S");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "");
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("\"a string\"");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. \"a string\"
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("B,|fsfmn", 8963398325558730460L, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("h3k'k`");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntOpSegement0, jSONPath_IntOpSegement0, true);
      Class<SQLWarning> class0 = SQLWarning.class;
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(class0, "B,|fsfmn", 8963398325558730460L, jSONPath_FilterGroup0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("B^Q");
      Class<Float> class0 = Float.class;
      String[] stringArray0 = new String[3];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      // Undeclared exception!
      jSONPath0.setPropertyValue(javaBeanSerializer0, "B^Q", 1287L, class0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("deny");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      DataTruncation dataTruncation0 = new DataTruncation(42, false, true, (-3327), 65279);
      SQLTransientException sQLTransientException0 = new SQLTransientException("deny", "*", 1726, dataTruncation0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLTransientException0);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, (Object) null, 1535, sQLClientInfoException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      JSONPath.set((Object) bigInteger0, "fastjson.parser.deny.internal", (Object) parserConfig0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Long long0 = new Long((-3491));
      // Undeclared exception!
      try { 
        JSONPath.set((Object) long0, "com.alibaba.fastjson.serializer.BooleanCodec", (Object) long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      JSONPath jSONPath1 = new JSONPath("vOgd");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.runtime.testdata");
      // Undeclared exception!
      jSONPath1.set((Object) jSONPath0, (Object) sQLIntegrityConstraintViolationException0, true);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Pattern pattern0 = Pattern.compile(", name ", (-3485));
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("BbPj.8[?YGB]w", pattern0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath(", name ");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RegMatchSegement0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLTransientConnectionException0, (Object) jSONPath_FilterSegment0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. , name 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("}u**7N^$I2bGmjg");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("ZFvte_", "/WsmFactory/classLoad2r/parent/classLoader/parenc/packages");
      jSONPath0.set((Object) jSONPath0, (Object) sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(":", "h3k'k`");
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(sQLFeatureNotSupportedException0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "[RF";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath_SizeSegment0, stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("h3k'k`");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(jSONPath_WildCardSegment0, "@ ET)hR", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONPath jSONPath0 = new JSONPath("toJSON error");
      // Undeclared exception!
      jSONPath0.removePropertyValue(bigInteger0, "=%{!LjM j", false);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("create deserializeUsing ObjectDeserializer error");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, "]XX`ud%3H)", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("ZFvte_");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, (Object) null, (-283));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("..", false);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath_PropertySegment0, "..");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) "-99", "-99");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(":");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":true}");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":true}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":true}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("VZYp~", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) sQLRecoverableException0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("h3k'k`");
      Set<?> set0 = JSONPath.keySet((Object) jSONPath0, "h3k'k`");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("J-hO-");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("BQaycPi9M R>BQp=KYf");
      jSONPath0.keySet((Object) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(", line ");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. , line 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      SerializeConfig serializeConfig0 = new SerializeConfig(4);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/9", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(bigInteger0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("s{/p[MXO");
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanSerializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("can't create non-static inner class instance.", (SerializeConfig) null, parserConfig0);
      Class<Calendar> class0 = Calendar.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny");
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\"}", serializeConfig0, parserConfig0);
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, (ParserConfig) null);
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("h3k'k`");
      Long long0 = new Long(4389238039309364973L);
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem(long0, 3089);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        JSONPath.extract(")N", "%", parserConfig0, 1933, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2)N
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      Feature[] featureArray0 = new Feature[3];
      // Undeclared exception!
      try { 
        JSONPath.extract("d7c<G+Z?0~^Gp}+FiGx", "[,ZqH=>2Hfjx", parserConfig0, (-113), featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[5];
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, (String) null, parserConfig0, 122, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("h3k'k`", "Q");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("[]", "[]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONPath.extract("[99,null,false]", "[99,null,false]");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("[-99]", "[-99]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -99
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract(":", "h3k'k`");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // :
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("!b/+9s$");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. !b/+9s$
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(", name ");
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) "[99]", "[99]");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("\"a string\"");
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      // Undeclared exception!
      jSONPath0.deepSet(jSONPath0, "T", 6607618197526598121L, jSONPath_MultiIndexSegment0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(12, false);
      JSONPath jSONPath0 = new JSONPath("L", serializeConfig0, (ParserConfig) null);
      // Undeclared exception!
      try { 
        jSONPath0.deepSet("in", "L,jRQmQa9VA ", (-1215L), (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.JSONSerializableSerializer", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.deepSet("com.alibaba.fastjson.serializer.JSONSerializableSerializer", "fastjson.parser.autoTypeSupport", (-1088L), serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path com.alibaba.fastjson.serializer.JSONSerializableSerializer, segement fastjson.parser.autoTypeSupport
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("h3k'k`");
      Class<SQLWarning> class0 = SQLWarning.class;
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(class0, "nin", (List<Object>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("d");
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("d", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(87, true);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("parent", serializeConfig0, parserConfig0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(jSONPath0, linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("h3k'k`");
      String[] stringArray0 = new String[1];
      Class<BigDecimal> class0 = BigDecimal.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      List<Object> list0 = javaBeanSerializer0.getFieldValues("Q");
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues((Object) null, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("<kxi-u9Qhe@XKQT/G");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) bigDecimal0, (Object) jSONPath0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. <kxi-u9Qhe@XKQT/G
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<String> class0 = String.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) javaBeanSerializer0, "Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) jSONPath_Operator0, "1");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONPath.contains((Object) ",i_j", "file relative path not support.");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Integer integer0 = Integer.getInteger("lRqy7L6&X({", 122);
      JSONPath jSONPath0 = JSONPath.compile("lRqy7L6&X({");
      jSONPath0.contains((Object) integer0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compare("Q", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("45'2~5?kYGe)");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("IY$q!!uYzq-(Z*`", "/", 173, sQLTransactionRollbackException0);
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) sQLRecoverableException0, "/", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.sql.SQLRecoverableException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockDate mockDate0 = new MockDate(50, 50, 3);
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) mockDate0, "[-99,false]", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class org.evosuite.runtime.mock.java.util.MockDate
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null, serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = JSONPath.compile(", segement ");
      boolean boolean0 = jSONPath0.removePropertyValue(serializeConfig0, ", segement ", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("{\"getFieldType\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":null,\"like\":\"1\",\"x\":\"a string\"}", serializeConfig0, parserConfig0);
      Short short0 = new Short((short)2071);
      SQLWarning sQLWarning0 = new SQLWarning();
      jSONPath0.deepSet(short0, (String) null, (-1014497654951707614L), sQLWarning0);
      assertEquals("{\"getFieldType\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":null,\"like\":\"1\",\"x\":\"a string\"}", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("h3k'k`");
      jSONPath0.deepSet((Object) null, "h3k'k`", (-2403L), "Q");
      assertEquals("h3k'k`", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("L,jRQmQa9VA ", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, "L,jRQmQa9VA ", 53);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("eeJh=|4,N]w");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, fileSystemHandling0, (-359), sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class org.evosuite.runtime.testdata.FileSystemHandling
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("{\"getFieldType\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":{},\"number\":\"1\",\"x\":\"a string\"}", serializeConfig0, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.autoTypeAccept", false);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("{\"getFieldType\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":{},\"number\":\"1\",\"x\":\"a string\"}");
      jSONPath_PropertySegment0.setValue(jSONPath0, sQLInvalidAuthorizationSpecException0, serializeConfig0);
      assertEquals("{\"getFieldType\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":{},\"number\":\"1\",\"x\":\"a string\"}", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("_Qc<0zg).4?", false);
      JSONPath jSONPath0 = new JSONPath("true");
      Double double0 = new Double((-3.606165547336029));
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, double0, propertyNamingStrategy0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/cause/stackTrace/5");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(3, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[99]");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=gRyhP?<^]}");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("sD/1lqVtJ>gW/1*jstO");
      boolean boolean0 = jSONPath0.remove((Object) "sD/1lqVtJ>gW/1*jstO");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("5d", "5d", 85);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      Byte byte0 = new Byte((byte) (-15));
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLTransactionRollbackException0, (Object) byte0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("true");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.runtime.testdata");
      Byte byte0 = new Byte((byte)1);
      boolean boolean0 = jSONPath0.set((Object) sQLIntegrityConstraintViolationException0, (Object) byte0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("*");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_KeySetSegment0, (Object) null, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("true", serializeConfig0, parserConfig0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.deny.internal", "");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) sQLTransactionRollbackException0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" V(+O@<Ob'R-2[");
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("^5 >RH_");
      Object[] objectArray0 = new Object[3];
      jSONPath0.arrayAdd((Object) null, objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("<D$)o3.A@MPMjid", longArray0, true);
      JSONPath jSONPath0 = new JSONPath("B,|fsfmn");
      jSONPath0.arrayAdd((Object) jSONPath_IntObjInSegement0, (Object[]) longArray0);
      assertEquals("B,|fsfmn", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, (ParserConfig) null);
      boolean boolean0 = jSONPath0.containsValue((Object) jSONPath_KeySetSegment0, (Object) jSONPath_KeySetSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("h3k'k`");
      boolean boolean0 = jSONPath0.containsValue((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1056), (-1485), (-1056));
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1700, 1700);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONPath_RangeSegment0, jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      JSONPath jSONPath0 = new JSONPath("]", serializeConfig0, parserConfig0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("|D;q66H");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2|D;q66H
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      Object object0 = jSONPath0.eval((Object) serializeConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("h3k'k`");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) jSONPath_SizeSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : h3k'k`
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("ZFvte_");
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("ZFvte_");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "*";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject(jSONPath0, stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(11, 132, 132);
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToObject(jSONPath_RangeSegment0, stringArray0);
      assertSame(object0, jSONPath_RangeSegment0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Object object0 = JSONPath.reserveToObject((Object) null, (String[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "java.nio.eaByteBuffer";
      stringArray0[1] = "java.nio.eaByteBuffer";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath_SizeSegment0, stringArray0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      long long0 = 0L;
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(long0, stringArray0);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(mockDate0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath_WildCardSegment0, (String[]) null);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      Set<?> set0 = jSONPath0.keySet((Object) "ZFvte_");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      Long long0 = new Long(5614464919154503228L);
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, long0, hashMap0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = jSONPath0.size((Object) fileSystemHandling0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath(", field : ", serializeConfig0, parserConfig0);
      Byte byte0 = new Byte((byte) (-54));
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(byte0, ",)^RIx", false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("true");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("true", "true");
      boolean boolean0 = jSONPath0.removePropertyValue(sQLInvalidAuthorizationSpecException0, "+o=HzM", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("S!HaP '", "true");
      JSONPath jSONPath0 = new JSONPath("T];OF%P6P");
      boolean boolean0 = jSONPath0.removePropertyValue("true", ", segement ", true);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLFeatureNotSupportedException0);
      Short short0 = new Short((short)19);
      long long0 = JSONPath.SIZE;
      boolean boolean1 = JSONPath.eqNotNull(short0, short0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("h3k'k`");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("NOT_IN", false);
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("L,jRQmQa9VA ");
      JSONPath jSONPath0 = new JSONPath("t2XWP|A{4D3.?zQv?P@");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(jSONPath_Operator0, (String) null, 2964L, jSONPath_JSONPathParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath jSONPath0 = new JSONPath("-P}A>W[$");
      boolean boolean0 = jSONPath0.setPropertyValue(hashMap0, "R7DK9bF[=ig&ni", (-3851359326990528739L), ".q_%t8Quub");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[RF");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put((String) null, clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "{\"ZFvte_-W?\":\"hello\",\"y\":7,\"z\":true,a\":[],\"scanFieldBoolean\":true}", hashMap0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "", 0, sQLClientInfoException0);
      TreeSet<JSONPath.SizeSegment> treeSet0 = new TreeSet<JSONPath.SizeSegment>();
      Vector<Object> vector0 = new Vector<Object>(treeSet0);
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(sQLTransientConnectionException0, "/stackTrace/4", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path [RF, segement /stackTrace/4
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("L,jRQmQa9VA ");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
      
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = new JSONPath("[S");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath_SizeSegment0, jSONPath_Segment0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("@type", jSONPath_Segment0, true);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, jSONArray0, jSONPath0, jSONArray0);
      assertEquals(1, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Short short0 = new Short((short)46);
      Float float0 = new Float(1330.465087890625);
      boolean boolean0 = JSONPath.eqNotNull(short0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Double double0 = new Double(85);
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Double double0 = Double.valueOf(10000.0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = JSONPath.eqNotNull(double0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Double double0 = Double.valueOf(10000.0);
      boolean boolean0 = JSONPath.eqNotNull(double0, double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Short short0 = new Short((short)916);
      Float float0 = new Float((double) (short)916);
      boolean boolean0 = JSONPath.eqNotNull(float0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Short short0 = new Short((short)44);
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Long long0 = new Long((-634L));
      Long long1 = new Long((-3235027470545870510L));
      boolean boolean0 = JSONPath.eqNotNull(long1, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(5614464919154503228L, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-3.606165547336029));
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, (-1580386065683472715L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((double) 5614464919154503228L);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Integer integer0 = new Integer((-2529));
      boolean boolean0 = JSONPath.eqNotNull(integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = JSONPath.eq("%9}/H-g|Yk", "h3k'k`");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Double double0 = new Double((-2386.335118306451));
      boolean boolean0 = JSONPath.containsValue((Object) double0, "*", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.runtime.testdata", "mIp7AD");
      boolean boolean0 = JSONPath.eq((Object) null, sQLInvalidAuthorizationSpecException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = JSONPath.eq("h3k'k`", "h3k'k`");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("/stackTrace", serializeConfig0, parserConfig0);
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, "/stackTrace", parserConfig0);
      assertEquals(7, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) "{\"x\":\"hello\",\"y\":7,\"z\":[],\"a\":[],\"b\":{}}");
      JSONPath jSONPath0 = JSONPath.compile("{\"x\":\"hello\",\"y\":7,\"z\":[],\"a\":[],\"b\":{}}");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(932);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath_ArrayAccessSegment0, map0);
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("N*uu!");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "p}'^`", 46, hashMap0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(46, 46, 1251);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, "N*uu!");
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, sQLClientInfoException0, object0);
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("_Qc<0zg).4?", false);
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) jSONPath_PropertySegment0, "2");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fastjson.parser.safeMode", (String) null);
      StackTraceElement stackTraceElement0 = (StackTraceElement)JSONPath.eval((Object) sQLIntegrityConstraintViolationException0, "/stackTrace/0");
      assertNotNull(stackTraceElement0);
      assertTrue(stackTraceElement0.isNativeMethod());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("{\"fruit\":\"Apple\",\"size\":99,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", "{\"fruit\":\"Apple\",\"size\":99,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", false);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("~Q", "in", hashMap0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.alibaba.fastjson.JSONObject", "eaLF~|1hsw`", (-3169), sQLClientInfoException0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("0001-01-01T00:00+08:00", 7442624256860549330L, jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_ValueSegment0, jSONPath_IntOpSegement0, false);
      JSONPath jSONPath0 = new JSONPath(")Y", serializeConfig0, (ParserConfig) null);
      BigDecimal bigDecimal0 = new BigDecimal((double) (-2929));
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, sQLTransientConnectionException0, "eaLF~|1hsw`", bigDecimal0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("saR", (-3491));
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("BbPj.8[?YGB]w", pattern0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("saR");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RegMatchSegement0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("x77ew", "\\-", (-3491));
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, propertyNamingStrategy0, sQLSyntaxErrorException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("L,jRQmQa9VA ");
      Pattern pattern0 = Pattern.compile("WriteEnumUsingToString", (-3491));
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("L,jRQmQa9VA ", pattern0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RegMatchSegement0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, "?b", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("{\"/stackTrace/11\":\"Apple\",\"com.alibaba.fastjson.JSONPath$DoubleOpSegement\":[],\"color\":-99,\"value\":true,\"value2\":{},\"number\":[],\"x\":\"a string\"}", serializeConfig0, parserConfig0);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("^C)\"+IA4Q", "fastjson.parser.autoTypeAccept", false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RlikeSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, jSONPath0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Double double0 = new Double(85);
      JSONPath jSONPath0 = JSONPath.compile("u_'.PaH\"~|}K*F^F");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("u_'.PaH\"~|}K*F^F", double0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("O}b$YDFZK0os", "oracle.sql.DATE");
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, sQLRecoverableException0);
      assertNotNull(jSONArray0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      long[] longArray0 = new long[3];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("in", longArray0, false);
      JSONPath jSONPath0 = new JSONPath("L,jRQmQa9VA ");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntInSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("h3kR'k`", "h3kR'k`", jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig(85, true);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("parent", serializeConfig0, parserConfig0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("531br;");
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, serializeConfig0, "h3kR'k`", sQLInvalidAuthorizationSpecException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("L,jRQmQa9VA ");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("xiKQ9");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("in", "xiKQ9", jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringOpSegement0, jSONPath_StringOpSegement0, false);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment(")Z", false);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_JSONPathParser0, jSONPath_PropertySegment0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("/cause/stackTrace/9", "/cause/stackTrace/9", true);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("#$oQXz]3zfD^`:jP", serializeConfig0, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, jSONPath_SizeSegment0, parserConfig0, bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.autoTypeAccept", "fastjson.parser.autoTypeSupport", "fastjson.parser.autoTypeSupport", (String[]) null, true);
      JSONPath jSONPath0 = JSONPath.compile("^TpRp Ek&:\"GR+s}&'");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "fastjson.parser.autoTypeSupport", 3);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(" >^Bl*_rmM2mTjIL{aD", sQLRecoverableException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.autoTypeAccept");
      Class<UUID> class0 = UUID.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null);
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, sQLInvalidAuthorizationSpecException0, sQLTransientConnectionException0, javaBeanDeserializer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "3|<1}Shr55> _";
      stringArray0[1] = "3|<1}Shr55> _";
      stringArray0[2] = "3|<1}Shr55> _";
      stringArray0[3] = "3|<1}Shr55> _";
      stringArray0[4] = "3|<1}Shr55> _";
      stringArray0[5] = "3|<1}Shr55> _";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("3|<1}Shr55> _", "3|<1}Shr55> _", "3|<1}Shr55> _", stringArray0, true);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("f4vU", (String) null, "%9}/H-g|Yk", stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("J9`QH'.2%82Mv");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("fastjson.parser.autoTypeAccept", (-1759511109484434299L), jSONPath_Operator0);
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, parserConfig0, parserConfig0.propertyNamingStrategy, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("ZFvte_");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("RLIKE");
      String[] stringArray0 = new String[3];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("/cause/stackTrace/10", stringArray0, true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, jSONPath_JSONPathParser0, mockGregorianCalendar0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("true", stringArray0, false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      JSONPath jSONPath0 = JSONPath.compile("true");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, sQLSyntaxErrorException0, mockGregorianCalendar0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("EvZ2i(Vjp");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("EvZ2i(Vjp");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "GlZ_w";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("EvZ2i(Vjp", stringArray0, true);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "GlZ_w", jSONPath_JSONPathParser0, "GlZ_w");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      long long0 = 0L;
      Long long1 = new Long(0L);
      longArray0[0] = long1;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("ZFvte_-W?", longArray0, true);
      JSONPath jSONPath0 = new JSONPath("ZFvte_-W?");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1568, 0, 0);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, long0, "ZFvte_-W?", jSONPath_RangeSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"x\":null,\"\"a string\"\":{},\"z\":[],\"(Ljava/lang/Object;Ljava/lang/String;)V\":[],\"b\":{}}");
      Double double0 = new Double((-1.0));
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(67, (short)0, 0);
      Long[] longArray0 = new Long[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("_Qc<0zg).4?", longArray0, false);
      Byte byte0 = new Byte((byte)93);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, byte0, jSONPath_RangeSegment0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(99);
      JSONPath jSONPath0 = JSONPath.compile("{\"size\":\"Large\",\"color\":\"Red\",\"value\":99,\"com.alibaba.fastjson.asm.ClassWriter\":true}");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.alibaba.fastjson.JSONPath$FilterGroup", "");
      Long[] longArray0 = new Long[2];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("t", longArray0, false);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLNonTransientConnectionException0);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, jSONPath_ArrayAccessSegment0, jSONPath_ArrayAccessSegment0, batchUpdateException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("L,jRQmQa9VA ");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
      
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("L,jRQmQa9VA ", (-1638L), (-1638L), false);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("L,jRQmQa9VA ", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, parserConfig0, jSONPath_Segment0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("/asmFactory/classLoader/domains/0/classloader/classLoader/packages/org.evosuite.shaded.org.mockito.creation.instance", (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("true");
      JSONPath jSONPath0 = JSONPath.compile("true");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "true", "{\"=8aP1-g");
      assertNotNull(object0);
      assertEquals("{\"=8aP1-g", object0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      JSONPath jSONPath0 = JSONPath.compile("/cause/stackTrace/6");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("size");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, sQLRecoverableException0, jSONPath_Operator0, mockGregorianCalendar0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("ZFvte_");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, (-905), (-2117657483));
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      SQLDataException sQLDataException0 = new SQLDataException("*");
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, javaBeanSerializer0, sQLDataException0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("illeal jsonpath syntax. ");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(989, (-1043), 989);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "k#n1Pc+B=cig";
      stringArray0[1] = "illeal jsonpath syntax. ";
      stringArray0[2] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[3] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[4] = "yyyy-MM-dd HH:mm:ss";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_MultiPropertySegment0, jSONPath0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("L,jRQmQa9VA ");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = new JSONPath("[S");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath_SizeSegment0, jSONPath_Segment0);
      jSONPath0.deepGetPropertyValues(jSONArray0, jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, parserConfig0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("N8rsmZ,EDXq", parserConfig0, (-243));
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 6, line 1, column 7N8rsmZ,EDXq
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":true,\"color\":\"Red\",\"/stackTrace/11\":\"1\"}");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$FilterGroup";
      stringArray0[1] = "t";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      SQLException sQLException0 = new SQLException("=o|`W^-2hmfMVwn(l\"", "/cause/stackTrace/11");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("jJ\"9c3AsCI=E+", "nin", 18, sQLException0);
      SQLWarning sQLWarning0 = new SQLWarning("xV'u!g`P;/", "", 989, sQLSyntaxErrorException0);
      SQLDataException sQLDataException0 = new SQLDataException("com.alibaba.fastjson.JSONPath$RlikeSegement", "t", sQLWarning0);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, sQLDataException0, sQLSyntaxErrorException0);
      jSONPath0.getArrayItem(arrayList0, 18);
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("{\"/stackTrace/11\":\"Apple\",\"com.alibaba.fastjson.JSONPath$DoubleOpSegement\":[],\"color\":-99,\"value\":true,\"value2\":{},\"number\":[],\"x\":\"a string\"}", serializeConfig0, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.autoTypeAccept", true);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("{\"/stackTrace/11\":\"Apple\",\"com.alibaba.fastjson.JSONPath$DoubleOpSegement\":[],\"color\":-99,\"value\":true,\"value2\":{},\"number\":[],\"x\":\"a string\"}");
      jSONPath_PropertySegment0.setValue(jSONPath0, sQLInvalidAuthorizationSpecException0, serializeConfig0);
      assertEquals("{\"/stackTrace/11\":\"Apple\",\"com.alibaba.fastjson.JSONPath$DoubleOpSegement\":[],\"color\":-99,\"value\":true,\"value2\":{},\"number\":[],\"x\":\"a string\"}", sQLInvalidAuthorizationSpecException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Object object0 = JSONPath.extract("[\"a string\"]", "[\"a string\"]");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("[99[]", "[99[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json : pos 4, line 1, column 5[99[]
         //
         verifyException("com.alibaba.fastjson.JSONPath$PropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("_Qc<0zg).4?", true);
      JSONPath jSONPath0 = new JSONPath("true");
      Double double0 = new Double((-3.606165547336029));
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, double0, propertyNamingStrategy0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        JSONPath.compare(bigInteger0, "_Qc<0zg).4?");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.math.BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/7");
      Long long0 = new Long(7267793227937552092L);
      // Undeclared exception!
      try { 
        JSONPath.compare(long0, jSONPath0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath cannot be cast to java.lang.Long
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Float float0 = new Float(0.0);
      // Undeclared exception!
      try { 
        JSONPath.compare(float0, "h3k'k`");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Float
         //
         verifyException("java.lang.Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(":OLqwHH3w^");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"OLqwHH3w^\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"w*r");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string\"");
      jSONPath_JSONPathParser0.parseArrayAccess(false);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(0L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.asm.MethodCollector");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("om.alibaba.fastjson.asm.MethodColle", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("z,");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("z,");
      boolean boolean0 = jSONPath0.set((Object) sQLIntegrityConstraintViolationException0, (Object) "%");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("in");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("RLIKE");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not support jsonpath : ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(">");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!b/+9s$");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but 'b'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('+');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not support : ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support : 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'Q7u,f`_!`n-_");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '', but '_'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string\"");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals("a string\"", object0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9wU#K:4>@\"");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(9L, object0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":99,\"like\":\"1\"}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-99");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(119);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=_");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-1759511109484434299L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(")N");
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement(")N", (Long[]) null, false);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntObjInSegement0);
      assertSame(jSONPath_Filter0, jSONPath_IntObjInSegement0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(".q_%t8Quub");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("_Qc<0zg).4?");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("_fJ,+QXO6;!_yS^");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. _fJ,+QXO6;!_yS^
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("@qf[X^l<~.V");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '., but 'q'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("?-W;yr");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '(, but '-'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" ,#`f]C$sT`}");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax.  ,#`f]C$sT`}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = ".NSfn(@Lz+";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(".NSfn(@Lz+", stringArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$e8QI+A):.");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("j");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) "{\"x\":null,\"\"a string\"\":{},\"z\":[],\"(Ljava/lang/Object;Ljava/lang/String;)V\":[],\"b\":{}}");
      Map<String, Object> map1 = JSONPath.paths((Object) map0);
      assertEquals(2, map1.size());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializeConfig serializeConfig1 = new SerializeConfig(true);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) serializeConfig0, serializeConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLIntegrityConstraintViolationException0);
      Map<String, Object> map0 = JSONPath.paths((Object) sQLInvalidAuthorizationSpecException0);
      //  // Unstable assertion: assertEquals(176, map0.size());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "in");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) "*", "GE");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("\"a string\"");
      JSONPath jSONPath1 = JSONPath.compile("?");
      boolean boolean0 = jSONPath1.set((Object) jSONPath0, (Object) "*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("*");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "*", (Object) jSONPath_KeySetSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "/asmFactory/classLoader/domains/0/classloader/classLoader/parent/package2certs");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      boolean boolean0 = JSONPath.remove((Object) null, "NzXQ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("%");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("*^XKB;fc@K^&6", "*^XKB;fc@K^&6", 0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) sQLTransientConnectionException0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.sql.SQLTransientConnectionException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      BigInteger bigInteger0 = BigInteger.ONE;
      Object[] objectArray0 = new Object[7];
      jSONPath0.arrayAdd((Object) bigInteger0, objectArray0);
      assertEquals((short)1, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$ArrayAccessSegment");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$ArrayAccessSegment";
      Object object0 = JSONPath.reserveToObject("com.alibaba.fastjson.JSONPath$ArrayAccessSegment", stringArray0);
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd(object0, (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path com.alibaba.fastjson.JSONPath$ArrayAccessSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(932);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) jSONPath_ArrayAccessSegment0, "true", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path true
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      JSONPath.arrayAdd((Object) null, "/cause/stackTrace/1", objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("ZFvte_");
      jSONPath0.arrayAdd((Object) jSONPath0, (Object[]) null);
      assertEquals("ZFvte_", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("ZFvte_");
      Set<?> set0 = jSONPath0.keySet((Object) "ZFvte_");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("true");
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("%");
      Set<?> set0 = jSONPath0.keySet((Object) "%");
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("VrZK");
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("ZFvte_");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = jSONPath0.size((Object) fileSystemHandling0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(468.581409543);
      boolean boolean0 = JSONPath.containsValue((Object) "*", "*", (Object) bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Double double0 = new Double((-2386.335118306451));
      boolean boolean0 = JSONPath.containsValue((Object) double0, "U", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("_N");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-2582), 4, (-5377));
      boolean boolean0 = jSONPath0.contains((Object) jSONPath_RangeSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("ZFvte_");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Object object0 = JSONPath.extract("{\"/stackTrace/11\":[],\"com.alibaba.fastjson.JSONPath$DoubleOpSegement\":[],\"color\":-99,\"com.alibaba.fastjson.JSONPath$WildCardSegment\":\"a string\",\"(Ljava/lang/Class;)Ljava/util/Collection;\":false,\"/cause/stackTrace/8\":true,\"/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.instrumentation.testability\":false}", "fastjson.parser.safeMode");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/10");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!b/+9s$");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Object object0 = JSONPath.extract("[99]", "[99]");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      JSONPath jSONPath0 = new JSONPath("getInstance", (SerializeConfig) null, parserConfig0);
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("{\"=8aP1-g");
      boolean boolean0 = jSONPath0.containsValue((Object) null, (Object) sQLInvalidAuthorizationSpecException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      boolean boolean0 = jSONPath0.isRef();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      boolean boolean0 = jSONPath0.contains((Object) "*");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath jSONPath0 = new JSONPath("[RF");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("v", jSONPath_MaxSegment0, jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_RefOpSegement0, jSONPath_RefOpSegement0, true);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("v", "v", 0, (Throwable) null);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, sQLTransientConnectionException0, jSONPath_Operator0, jSONPath_MaxSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("com.alibaba.fastjson.JSONPath$RefOpSegement", "com.alibaba.fastjson.JSONPath$RefOpSegement", jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$RefOpSegement");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.alibaba.fastjson.JSONPath$RefOpSegement", "531br;", 115);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("length", "in", (-319), sQLNonTransientException0);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath0, jSONPath0, sQLRecoverableException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("{\"fruit\":\"Apple\",\"size\":99,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", "{\"fruit\":\"Apple\",\"size\":99,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":99,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath0, "{\"fruit\":\"Apple\",\"size\":99,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Pattern pattern0 = Pattern.compile(", name ", (-3485));
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("BbPj.8[?YGB]w", pattern0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath(", name ");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RegMatchSegement0);
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, "saR", jSONPath_FilterSegment0, "BbPj.8[?YGB]w");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSONPath.extract(",eg_fc}:m/18:>-a", "akt`", parserConfig0, (-2319), featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Nl}q[|gw!7S&p>t3L");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('l', char0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("45'2~5?kYGe)", "45'2~5?kYGe)");
      JSONPath jSONPath0 = JSONPath.compile("n'Xi+] s");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "n'Xi+] s", 173);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1474));
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, sQLTransactionRollbackException0, sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLTransactionRollbackException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(99);
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\"\"size\":\"Large\",\"color\":\"Red\",\"value\":tre,\"number\":\"1\"}");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.alibaba.fastjson.JSONPath$FilterGroup", "");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLNonTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("{\"fruit\":\"Apple\"\"size\":\"Large\",\"color\":\"Red\",\"value\":tre,\"number\":\"1\"}", "com.alibaba.fastjson.JSONPath$FilterGroup", 99, sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLRecoverableException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      boolean boolean0 = JSONPath.containsValue((Object) "{\"=8aP1-g", "/cause/cause/stackTrace/11", (Object) "/cause/cause/stackTrace/11");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, "fastjson.parser.autoTypeAccept", jSONPath_SizeSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(119);
      JSONPath jSONPath0 = JSONPath.compile("-99");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-2205), 1251, 8);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_ArrayAccessSegment0, hashMap0);
      assertNotNull(arrayList0);
      assertEquals(276, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval((JSONPath) null, (Object) null, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("*", "*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2*
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.alibaba.fastjson.util.TypeUtils", "syntax error, expect :, actual ");
      int int0 = JSONPath.size((Object) sQLSyntaxErrorException0, "com.alibaba.fastjson.util.TypeUtils");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*QHO'tF#e");
      String string0 = jSONPath0.getPath();
      assertEquals("*QHO'tF#e", string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("^5 >RH_");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=_");
      JSONPath.Operator jSONPath_Operator0 = jSONPath_JSONPathParser0.readOp();
      boolean boolean0 = JSONPath.remove((Object) jSONPath_Operator0, "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("wlVuD@UkcRqoUX[", "H=rD", (-147));
      Set<?> set0 = JSONPath.keySet((Object) sQLFeatureNotSupportedException0, "cb");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.shaded.org.mockito.verification");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "ZFvte_", (Object) "ZFvte_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Byte byte0 = new Byte((byte)4);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) byte0, (String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      long[] longArray0 = new long[3];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("write clob error", longArray0, true);
      JSONPath jSONPath0 = new JSONPath("scanStringArray");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, sQLTimeoutException0, "write clob error", "L,jRQmQa9VA ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("ZFvte_");
      boolean boolean0 = jSONPath0.remove((Object) "*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("vTd)-R`lUc1G=yoBo'", jSONPath_MaxSegment0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("bE+J");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("vTd)-R`lUc1G=yoBo'", sQLClientInfoException0);
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, sQLIntegrityConstraintViolationException0, "bE+J", jSONPath_MaxSegment0);
      assertFalse(boolean0);
  }
}
