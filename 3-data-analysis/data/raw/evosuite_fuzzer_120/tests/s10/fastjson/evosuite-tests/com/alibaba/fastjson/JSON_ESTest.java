/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 00:52:00 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.JSONValidator;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ParseProcess;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.GenericArrayTypeImpl;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSON_ESTest extends JSON_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray(":bGS@\"LX{bL1>%r6");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("[{\"toJSON error\":true,\"\":\"a string\"}]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = JSON.isValid("1.2.68");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Feature[] featureArray0 = new Feature[3];
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 9, (byte)18);
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSON jSON0 = JSON.parseObject((InputStream) byteArrayInputStream0, charset0, (Type) null, parserConfig0, featureArray0);
      assertNull(jSON0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      JSON.writeJSONString((Writer) null, (Object) null, 14, serializerFeatureArray0);
      assertEquals(3, serializerFeatureArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      StringWriter stringWriter0 = new StringWriter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      JSON.writeJSONStringTo(pascalNameFilter0, stringWriter0, serializerFeatureArray0);
      assertEquals("{\"@type\":\"com.alibaba.fastjson.serializer.PascalNameFilter\"}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("fastjson.parser.safeMode");
      JSONObject jSONObject0 = new JSONObject(615);
      jSONObject0.writeJSONString((Appendable) stringBuffer0);
      assertEquals(26, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Feature feature0 = Feature.AllowArbitraryCommas;
      char[] charArray0 = new char[4];
      charArray0[0] = '7';
      Feature[] featureArray0 = new Feature[7];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      featureArray0[4] = feature0;
      featureArray0[5] = feature0;
      featureArray0[6] = feature0;
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseObject("\"java.io.StringWriter@0000000005\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to JSONObject.
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      byte[] byteArray0 = new byte[2];
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.AllowSingleQuotes;
      featureArray0[0] = feature0;
      Object object0 = JSON.parse(byteArray0, (int) (byte)0, (int) (byte)0, (CharsetDecoder) uTF8Decoder0, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("fWa");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("fastjson.parser.deny");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = JSON.isValid("{\"\":-99,\"dd/MM/yyyy HH:mm:ss\":null,\"x\":[]}");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      int int0 = JSON.writeJSONString((OutputStream) pipedOutputStream0, (Object) pipedInputStream0, serializerFeatureArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      String string0 = jSONArray0.toString(serializerFeatureArray0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(7);
      Class<Object> class0 = Object.class;
      JSONObject jSONObject1 = (JSONObject)jSONObject0.toJavaObject(class0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = JSON.toJavaObject((JSON) null, class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      Class<JSONPObject> class0 = JSONPObject.class;
      JSONPObject jSONPObject0 = JSON.toJavaObject((JSON) jSONObject0, class0);
      assertNull(jSONPObject0.getFunction());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(65536);
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      String string0 = JSON.toJSONStringZ(pascalNameFilter0, serializeConfig0, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Feature feature0 = Feature.AllowArbitraryCommas;
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      String string0 = JSON.toJSONStringWithDateFormat(feature0, "fastjson.serializerFeatures.MapSortField", serializerFeatureArray0);
      assertEquals("\"AllowArbitraryCommas\"", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(989);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeatureArray0[3];
      String string0 = JSON.toJSONString((Object) jSONObject0, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedHashMap<GenericArrayTypeImpl, JSONPath.Operator> linkedHashMap0 = new LinkedHashMap<GenericArrayTypeImpl, JSONPath.Operator>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      String string0 = JSON.toJSONString((Object) linkedHashMap0, (SerializeFilter[]) null, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      String string0 = JSON.toJSONString((Object) null, (SerializeFilter) null, serializerFeatureArray0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[2];
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      String string0 = JSON.toJSONString((Object) null, serializeConfig0, serializerFeatureArray0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      String string0 = JSON.toJSONString((Object) null, serializeConfig0, (SerializeFilter[]) null, serializerFeatureArray0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(48);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      String[] stringArray0 = new String[8];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeature0;
      serializerFeatureArray0[7] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) jSONObject0, serializeConfig0, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1112);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) jSONObject0, 11, serializerFeatureArray0);
      assertEquals("{'@type':'com.alibaba.fastjson.JSONObject'}", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSON.toJSONString((Object) jSONArray0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes((Object) null, serializeFilterArray0, serializerFeatureArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Feature[] featureArray0 = new Feature[5];
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      byte[] byteArray0 = JSON.toJSONBytes((Object) featureArray0[0], serializeConfig0, serializerFeatureArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl((Type) null);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[5] = serializerFeature1;
      serializerFeatureArray0[6] = serializerFeature0;
      serializerFeatureArray0[7] = serializerFeature0;
      serializerFeatureArray0[8] = serializerFeatureArray0[5];
      byte[] byteArray0 = JSON.toJSONBytes((Object) genericArrayTypeImpl0, serializeConfig0, serializeFilterArray0, 3089, serializerFeatureArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.MapSortField;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      byte[] byteArray0 = JSON.toJSONBytes((Object) jSONArray0, serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)91, (byte)93}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeatureArray0[1];
      serializerFeatureArray0[5] = serializerFeatureArray0[2];
      serializerFeatureArray0[6] = serializerFeatureArray0[0];
      serializerFeatureArray0[7] = serializerFeature0;
      serializerFeatureArray0[8] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes((Object) null, serializeConfig0, 3089, serializerFeatureArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[2];
      serializerFeatureArray0[4] = serializerFeatureArray0[1];
      byte[] byteArray0 = JSON.toJSONBytes((Object) null, 989, serializerFeatureArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Object object0 = JSON.toJSON((Object) null, parserConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Object object0 = JSON.toJSON((Object) jSONArray0, parserConfig0);
      assertSame(object0, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object object0 = JSON.toJSON((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(104);
      Object object0 = JSON.toJSON((Object) jSONObject0);
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-119);
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[1];
      JSON.parseObject(byteArray0, charset0, (Type) class0, parserConfig0, (ParseProcess) null, (-3454), featureArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-3);
      JSON jSON0 = JSON.parseObject(byteArray0, (Type) null, (Feature[]) null);
      assertNull(jSON0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-24);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Feature[] featureArray0 = new Feature[5];
      PascalNameFilter pascalNameFilter0 = JSON.parseObject(byteArray0, (int) 0, (int) 81, charset0, (Type) null, featureArray0);
      assertNull(pascalNameFilter0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.SafeMode;
      featureArray0[0] = feature0;
      featureArray0[1] = featureArray0[0];
      featureArray0[2] = featureArray0[0];
      featureArray0[3] = feature0;
      featureArray0[4] = featureArray0[2];
      featureArray0[5] = featureArray0[4];
      featureArray0[6] = featureArray0[3];
      featureArray0[7] = featureArray0[0];
      featureArray0[8] = feature0;
      JSONObject jSONObject0 = JSON.parseObject("{\"fruit\":\"Apple\",\"size\":[],\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", featureArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Feature[] featureArray0 = new Feature[6];
      PascalNameFilter pascalNameFilter0 = JSON.parseObject("", (Type) null, featureArray0);
      assertNull(pascalNameFilter0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[8];
      JSONPObject jSONPObject0 = JSON.parseObject("", (Type) null, parserConfig0, featureArray0);
      assertNull(jSONPObject0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      featureArray0[0] = feature0;
      Object object0 = JSON.parseObject("\"java.io.StringWriter@0000000005\"", (Type) null, 45, featureArray0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      Feature[] featureArray0 = new Feature[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = JSON.parseObject((String) null, class0, featureArray0);
      assertNull(simplePropertyPreFilter0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Feature[] featureArray0 = new Feature[5];
      Integer integer0 = JSON.parseObject("", class0, (ParseProcess) null, featureArray0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      List<JSONObject> list0 = JSON.parseArray("[{\"toJSON error\":true,\"\":\"a string\"}]", class0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = JSON.parseArray("[{\"toJSON error\":true,\"\":{}},99]");
      assertEquals(2, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.DisableFieldSmartMatch;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      featureArray0[4] = feature0;
      featureArray0[5] = featureArray0[0];
      featureArray0[6] = featureArray0[0];
      featureArray0[7] = feature0;
      featureArray0[8] = featureArray0[3];
      Object object0 = JSON.parse((String) null, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.AllowSingleQuotes;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = featureArray0[2];
      featureArray0[4] = feature0;
      featureArray0[5] = feature0;
      JSONObject jSONObject0 = (JSONObject)JSON.parse("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}", featureArray0);
      assertEquals(5, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      Feature feature0 = Feature.AutoCloseSource;
      Feature[] featureArray0 = new Feature[1];
      featureArray0[0] = feature0;
      Object object0 = JSON.parse("", parserConfig0, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.AllowArbitraryCommas;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      JSONObject jSONObject0 = (JSONObject)JSON.parse("{\"x\":\"hello\",\"y\":7,\"z\":[],\"a\":[],\"b\":{}}", parserConfig0, featureArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Object object0 = JSON.parse("\"java.io.StringWriter@0000000004\"", parserConfig0, 2088);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = JSON.parse("", (-387));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = (JSONObject)JSON.parse("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":99}", (-138));
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object object0 = JSON.parse("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = (JSONObject)JSON.parse("{}");
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Type type0 = JSON.getMixInAnnotations((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      SerializeWriter serializeWriter0 = new SerializeWriter(28);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[2];
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeatureArray0[0];
      serializerFeatureArray0[6] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.writeJSONStringTo(class0, serializeWriter0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(25);
      // Undeclared exception!
      try { 
        jSONObject0.writeJSONString((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("writeBefore");
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      String[] stringArray0 = new String[1];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeatureArray0[1];
      serializerFeatureArray0[6] = serializerFeatureArray0[3];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) mockFileOutputStream0, (Object) simplePropertyPreFilter0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      serializerFeatureArray0[4] = serializerFeatureArray0[2];
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeatureArray0[4];
      serializerFeatureArray0[7] = serializerFeatureArray0[2];
      serializerFeatureArray0[8] = serializerFeature0;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      try { 
        JSON.writeJSONString((OutputStream) filterOutputStream0, (Object) pipedOutputStream0, serializerFeatureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockFile mockFile0 = new MockFile("}iy+[gz");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) mockFileOutputStream0, (Object) "}iy+[gz", 167, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) pipedOutputStream0, (Object) pipedInputStream0, (-2831), (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[2];
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      serializerFeatureArray0[5] = serializerFeatureArray0[1];
      serializerFeatureArray0[6] = serializerFeatureArray0[5];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) null, (Object) null, 6194, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONStringZ(pascalNameFilter0, (SerializeConfig) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONStringWithDateFormat(uTF8Decoder0, "", serializerFeatureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeatureArray0[1];
      serializerFeatureArray0[5] = serializerFeatureArray0[4];
      serializerFeatureArray0[6] = serializerFeatureArray0[3];
      serializerFeatureArray0[7] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) class0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[7];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) serializeConfig0, serializeFilterArray0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class java.lang.String, create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "IH nB'w)Ve(0iA%agw", (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(989);
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) ":true", serializeConfig0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) parameterizedTypeImpl0, serializeConfig0, (SerializeFilter[]) null, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class com.alibaba.fastjson.util.ParameterizedTypeImpl, create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object object0 = new Object();
      SerializeConfig serializeConfig0 = new SerializeConfig(1054, true);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      // Undeclared exception!
      try { 
        JSON.toJSONString(object0, serializeConfig0, serializeFilterArray0, (String) null, (-802), (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl(class0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      serializerFeatureArray0[5] = serializerFeatureArray0[3];
      serializerFeatureArray0[6] = serializerFeature0;
      serializerFeatureArray0[7] = serializerFeatureArray0[4];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) genericArrayTypeImpl0, (SerializeConfig) null, (SerializeFilter) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "(khJZbh", 3365, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("fastjson.parser.features.ErrorOnEnumNotMatch", (Object) "fastjson.parser.features.ErrorOnEnumNotMatch");
      // Undeclared exception!
      try { 
        jSONObject0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(28);
      Charset charset0 = Charset.defaultCharset();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes(charset0, (Object) jSONObject0.DEFAULT_GENERATE_FEATURE, serializeConfig0, serializeFilterArray0, "kdrwCAmN;/9\"mm-R!b", (-5), (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(28, false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) jSONObject0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      String[] stringArray0 = new String[6];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) javaBeanSerializer0, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "^/1Ps><sLSC5dT$", serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "", (SerializeConfig) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(65536);
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[6];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) javaBeanSerializer0, serializeConfig0, serializeFilterArray0, "com.alibaba.fastjson.serializer.SerializeBeanInfo", 814, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      SerializeConfig serializeConfig0 = new SerializeConfig(2);
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) jSONObject0, serializeConfig0, (SerializeFilter[]) null, "@g?qDx?K\"500$IW", 3089, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreNonFieldGetter;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) serializerFeature0, (SerializeConfig) null, serializeFilterArray0, "*:<", 20, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[6];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) simplePropertyPreFilter0, serializeConfig0, serializeFilterArray0, (-3568), serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class com.alibaba.fastjson.serializer.SimplePropertyPreFilter, create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeatureArray0[4];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) jSONArray0, (SerializeConfig) null, serializeFilterArray0, 3089, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      serializerFeatureArray0[4] = serializerFeatureArray0[1];
      serializerFeatureArray0[5] = serializerFeatureArray0[0];
      serializerFeatureArray0[6] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "+", serializeConfig0, 42, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "4kgUaLM", (SerializeConfig) null, 989, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) serializeConfig0, serializeConfig0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      String[] stringArray0 = new String[6];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) simplePropertyPreFilter0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.setDefaultTypeKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      Feature feature0 = Feature.AllowArbitraryCommas;
      char[] charArray0 = new char[1];
      Feature[] featureArray0 = new Feature[2];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, 1, (Type) class0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 1, line 1, column 2\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      byte[] byteArray0 = new byte[1];
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.CustomMapDeserializer;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = featureArray0[0];
      featureArray0[3] = featureArray0[1];
      featureArray0[4] = feature0;
      featureArray0[5] = feature0;
      featureArray0[6] = featureArray0[0];
      featureArray0[7] = featureArray0[1];
      featureArray0[8] = featureArray0[4];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (Type) class0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 1, line 1, column 2\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Feature[] featureArray0 = new Feature[6];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (-1090), 989, (CharsetDecoder) uTF8Decoder0, (Type) null, featureArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("(khJZbh", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2(khJZbh
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("true", featureArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.ErrorOnEnumNotMatch;
      featureArray0[0] = feature0;
      featureArray0[1] = featureArray0[0];
      featureArray0[2] = featureArray0[0];
      featureArray0[3] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("QIw", (Type) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2QIw
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.DisableASM;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = featureArray0[1];
      featureArray0[3] = featureArray0[1];
      featureArray0[4] = featureArray0[1];
      featureArray0[5] = feature0;
      featureArray0[6] = feature0;
      // Undeclared exception!
      JSON.parseObject("@type", (Type) class0, featureArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.AllowISO8601DateFormat;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = featureArray0[0];
      featureArray0[3] = featureArray0[1];
      featureArray0[4] = feature0;
      featureArray0[5] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("1.2.68", (Type) class0, parserConfig0, 14, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual float, pos 3, line 1, column 41.2.68
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Feature[] featureArray0 = new Feature[2];
      Class<JSONObject> class0 = JSONObject.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSON.parseObject("yyyy-MM-dd HH:mm:ss", (Type) class0, parserConfig0, 1387, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("1.2.68", class0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Feature[] featureArray0 = new Feature[19];
      // Undeclared exception!
      try { 
        JSON.parseObject("h:B#", class0, (ParseProcess) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseObject("-|m>?#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Feature[] featureArray0 = new Feature[1];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        JSON.parseObject((InputStream) pipedInputStream0, (Charset) null, (Type) class0, (ParserConfig) null, featureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      Class<JSON> class0 = JSON.class;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.DisableASM;
      featureArray0[0] = feature0;
      featureArray0[1] = featureArray0[0];
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) byteArrayInputStream0, charset0, (Type) class0, parserConfig0, (ParseProcess) null, 180, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Class<Annotation> class0 = Annotation.class;
      Type type0 = FieldInfo.getFieldType((Class<?>) class0, (Type) class0, (Type) class0);
      Feature[] featureArray0 = new Feature[6];
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) byteArrayInputStream0, type0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2151), (byte)42);
      Feature[] featureArray0 = new Feature[7];
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) byteArrayInputStream0, (Type) class0, featureArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2742);
      Feature[] featureArray0 = new Feature[9];
      try { 
        JSON.parseObject((InputStream) bufferedInputStream0, (Type) null, featureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 1, line 1, column 2\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      byte[] byteArray0 = new byte[9];
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.SortFeidFastMatch;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, (int) (byte)1, (int) (byte)1, (CharsetDecoder) uTF8Decoder0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 1, line 1, column 2\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, (-160), (-160), (CharsetDecoder) uTF8Decoder0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse((String) null, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        JSON.parse("-J7 YtOIe+5-Ph9", parserConfig0, 4207);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        JSON.parse("fastjson.parser.deny.internal", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse("fastjson.parser.autoTypeAccept", (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(65536);
      LinkedHashMap<JSONValidator.Type, PascalNameFilter> linkedHashMap0 = new LinkedHashMap<JSONValidator.Type, PascalNameFilter>();
      Feature feature0 = Feature.NonStringKeyAsString;
      Feature[] featureArray0 = new Feature[3];
      featureArray0[0] = feature0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 9, (byte)18);
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSON.parseObject((InputStream) byteArrayInputStream0, charset0, (Type) null, parserConfig0, featureArray0);
      // Undeclared exception!
      try { 
        JSON.toJSONStringWithDateFormat((Object) null, "1.2.68", (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      Object object0 = JSON.toJSON((Object) "", serializeConfig0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Object object0 = JSON.toJSON((Object) null, serializeConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      byte[] byteArray0 = JSON.toJSONBytes(charset0, (Object) null, serializeConfig0, (SerializeFilter[]) null, "", 264, serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)110, (byte)117, (byte)108, (byte)108}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeatureArray0[2];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeConfig serializeConfig0 = new SerializeConfig(241, true);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[9];
      byte[] byteArray0 = JSON.toJSONBytes(charset0, (Object) pascalNameFilter0, serializeConfig0, serializeFilterArray0, "k74_9'tbV3;rhi7", 3089, serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte)125}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Charset charset0 = Charset.defaultCharset();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes(charset0, (Object) class0, serializeConfig0, serializeFilterArray0, (String) null, 1052, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeConfig serializeConfig0 = new SerializeConfig(989, true);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[4];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      String string0 = JSON.toJSONString((Object) pascalNameFilter0, serializeConfig0, serializeFilterArray0, "java.nio.file.Paths", 44, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeConfig serializeConfig0 = new SerializeConfig(989, true);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[4];
      String[] stringArray0 = new String[3];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      serializerFeatureArray0[4] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) pascalNameFilter0, serializeConfig0, serializeFilterArray0, stringArray0[2], 44, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeConfig serializeConfig0 = new SerializeConfig(14, true);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[6];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) pascalNameFilter0, serializeConfig0, serializeFilterArray0, "", 14, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      Class<JSON> class0 = JSON.class;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Feature[] featureArray0 = new Feature[2];
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) byteArrayInputStream0, charset0, (Type) class0, parserConfig0, (ParseProcess) null, 180, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      File file0 = MockFile.createTempFile("1.2.68", "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      Feature[] featureArray0 = new Feature[0];
      HashMap<JSONArray, InputStream> hashMap0 = JSON.parseObject((InputStream) mockFileInputStream0, charset0, (Type) class0, parserConfig0, (ParseProcess) null, 0, featureArray0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      Class<Integer> class0 = Integer.class;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1482);
      Feature[] featureArray0 = new Feature[1];
      try { 
        JSON.parseObject((InputStream) pushbackInputStream0, charset0, (Type) class0, parserConfig0, (ParseProcess) null, 85, featureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.DisableFieldSmartMatch;
      featureArray0[0] = feature0;
      featureArray0[1] = featureArray0[0];
      featureArray0[2] = featureArray0[1];
      featureArray0[3] = featureArray0[2];
      // Undeclared exception!
      try { 
        JSON.parseObject("false", (Type) class0, parserConfig0, (ParseProcess) null, 1, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual false, pos 5, line 1, column 6false
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      Feature[] featureArray0 = new Feature[1];
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSON.parseObject("@type", (Type) class0, parserConfig0, (ParseProcess) null, 989, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[9];
      HashMap<String, PascalNameFilter> hashMap0 = JSON.parseObject("", (Type) null, parserConfig0, (ParseProcess) null, 989, featureArray0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      HashMap<String, PascalNameFilter> hashMap0 = JSON.parseObject((String) null, (Type) class0, parserConfig0, (ParseProcess) null, 989, (Feature[]) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.SupportArrayToBean;
      featureArray0[0] = feature0;
      featureArray0[1] = featureArray0[0];
      // Undeclared exception!
      try { 
        JSON.parse("h", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2h
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        JSON.parse("\">B", parserConfig0, (-2005));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Object object0 = JSON.parse((String) null, parserConfig0, 4);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse("can no castBto JSONObject", 65536);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2can no castBto JSONObject
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      serializerFeatureArray0[5] = serializerFeatureArray0[2];
      serializerFeatureArray0[6] = serializerFeatureArray0[1];
      serializerFeatureArray0[7] = serializerFeatureArray0[0];
      serializerFeatureArray0[8] = serializerFeatureArray0[6];
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      JSON.writeJSONString((Writer) serializeWriter0, (Object) serializerFeature0, serializerFeatureArray0);
      assertEquals((-1), serializeWriter0.getMaxBufSize());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "", (SerializeFilter[]) null, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse("fastjson.parser.deny");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig(989, false);
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) jSONArray0, serializeConfig0, 578, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "(khJZbh", 3365, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("um,3m~zs^,1-P", class0, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ident, pos 0, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Feature[] featureArray0 = new Feature[5];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (int) 0, (int) 81, charset0, (Type) null, featureArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[6];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) simplePropertyPreFilter0, serializeConfig0, serializeFilterArray0, (-3568), serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.toJSONString();
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) pascalNameFilter0, serializeConfig0, (SerializeFilter) pascalNameFilter0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      String[] stringArray0 = new String[6];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      JSON.removeMixInAnnotations(class1);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSON.removeMixInAnnotations((Type) null);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      Class<?> class1 = javaBeanSerializer0.getType();
      JSON.addMixInAnnotations(class1, class1);
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      JSON.addMixInAnnotations(class0, (Type) null);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSON.addMixInAnnotations((Type) null, (Type) null);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("[{\"toJSON error\":[],\"\":\"a string\"},99,null]");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("EMPTY");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("{\"\":-99,\"dd/MM/yyyy HH:mm:ss\":null,\"x\":[]}");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("parser.features.NonStringKeyAsString");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = JSON.isValid("C");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = JSON.isValid("[\"a string\",[]]");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = JSON.isValid("}3mJjc.u(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = JSON.isValid("{bx -bp yJZ'y>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = JSON.isValid(")");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = JSON.isValid("false");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = JSON.isValid("true");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = JSON.isValid("5FZOp=&@YViB&!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      boolean boolean0 = JSON.isValid("5qT)u5!1Ghb2=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = JSON.isValid("(khJZbh");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = JSON.isValid("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean boolean0 = JSON.isValid((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      Feature[] featureArray0 = new Feature[1];
      ParserConfig parserConfig0 = new ParserConfig(true);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) null, charset0, (Type) class0, parserConfig0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) class0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONObject jSONObject0 = (JSONObject)JSON.toJSON((Object) serializeConfig0, serializeConfig0);
      assertEquals(3, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      Type[] typeArray0 = new Type[7];
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl(typeArray0[0]);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, genericArrayTypeImpl0, genericArrayTypeImpl0);
      JSONObject jSONObject0 = (JSONObject)JSON.toJSON((Object) parameterizedTypeImpl0, serializeConfig0);
      assertEquals(3, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeConfig serializeConfig0 = new SerializeConfig(3089);
      Object object0 = JSON.toJSON((Object) propertyNamingStrategy0, serializeConfig0);
      assertEquals("SnakeCase", object0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONPObject jSONPObject0 = new JSONPObject("");
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) jSONPObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2()
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      LinkedHashMap<JSONValidator.Type, PascalNameFilter> linkedHashMap0 = new LinkedHashMap<JSONValidator.Type, PascalNameFilter>();
      JSONValidator.Type jSONValidator_Type0 = JSONValidator.Type.Object;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      linkedHashMap0.put(jSONValidator_Type0, pascalNameFilter0);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSON.toJSON((Object) linkedHashMap0, serializeConfig0);
      assertEquals(1, linkedHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      Object object0 = JSON.toJSON((Object) jSONArray0, serializeConfig0);
      assertSame(object0, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreNonFieldGetter;
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) null, charset0, (Object) class0, serializeConfig0, serializeFilterArray0, "(khJZbh", 1141048066, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONArray jSONArray0 = new JSONArray();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) null, charset0, (Object) jSONArray0, serializeConfig0, (SerializeFilter[]) null, "yyyy-MM-dd HH:mm:ss", 183, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      int int0 = JSON.writeJSONString((OutputStream) byteArrayOutputStream0, (Object) byteArrayOutputStream0, (-13), serializerFeatureArray0);
      assertEquals("[]", byteArrayOutputStream0.toString());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = JSON.toJSONString((Object) null, false);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes((Object) null, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)110, (byte)117, (byte)108, (byte)108}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      LinkedHashMap<PascalNameFilter, PascalNameFilter> linkedHashMap0 = new LinkedHashMap<PascalNameFilter, PascalNameFilter>();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes((Object) linkedHashMap0, serializeConfig0, (SerializeFilter[]) null, "yyyy-MM-dd HH:mm:ss", 3089, serializerFeatureArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      SerializeConfig serializeConfig0 = new SerializeConfig(2);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Charset) null, (Object) jSONObject0, serializeConfig0, serializeFilterArray0, "", 3089, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONStringWithDateFormat("", "", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        JSON.parseArray("", typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("an not cast to JSONObject.", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but error, pos 1, line 1, column 2an not cast to JSONObject.
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      List<JSONObject> list0 = JSON.parseArray("null", class0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      List<JSONObject> list0 = JSON.parseArray((String) null, class0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      List<JSONObject> list0 = JSON.parseArray("", class0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONArray jSONArray0 = JSON.parseArray("");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONArray jSONArray0 = JSON.parseArray("null");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONArray jSONArray0 = JSON.parseArray((String) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[8];
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) null, (Charset) null, (Type) class0, parserConfig0, (ParseProcess) null, (-2132), featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      Feature feature0 = Feature.AllowArbitraryCommas;
      char[] charArray0 = new char[4];
      Feature[] featureArray0 = new Feature[1];
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, (-686), (Type) class0, featureArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Feature[] featureArray0 = new Feature[2];
      Class<JSONObject> class0 = JSONObject.class;
      char[] charArray0 = new char[0];
      JSONArray jSONArray0 = JSON.parseObject(charArray0, 57344, (Type) class0, featureArray0);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, 2, (Type) class0, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      JSONArray jSONArray0 = JSON.parseObject((char[]) null, 57344, (Type) class0, (Feature[]) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-6);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Class<Annotation> class0 = Annotation.class;
      Type type0 = FieldInfo.getFieldType((Class<?>) class0, (Type) class0, (Type) class0);
      JSON jSON0 = JSON.parseObject((InputStream) byteArrayInputStream0, type0, (Feature[]) null);
      assertNull(jSON0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<StringWriter> class0 = StringWriter.class;
      StringWriter stringWriter0 = JSON.parseObject((String) null, class0);
      assertNull(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Feature[] featureArray0 = new Feature[5];
      // Undeclared exception!
      try { 
        JSON.parseObject("can no castBto JSONObject", (Type) null, 65569, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      Object object0 = JSON.parseObject((String) null, (Type) null, (-10), featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("can no castBto JSONObject", (Type) null, 65536, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2can no castBto JSONObject
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject("{\"\":{\"com.alibaba.fastjson.JSON\":false},\"a\":[false],\"1.2.68\":-99}");
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Feature[] featureArray0 = new Feature[2];
      // Undeclared exception!
      try { 
        JSON.parseObject("IgnoreAutoType", featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 1004, 3089, (CharsetDecoder) uTF8Decoder0, featureArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 16, 536870912, (CharsetDecoder) uTF8Decoder0, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      byte[] byteArray0 = new byte[0];
      Object object0 = JSON.parse(byteArray0, 0, 0, (CharsetDecoder) uTF8Decoder0, (Feature[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Object object0 = JSON.parse((byte[]) null, 0, 0, (CharsetDecoder) uTF8Decoder0, (Feature[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-29);
      Object object0 = JSON.parse(byteArray0, (Feature[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Feature[] featureArray0 = new Feature[5];
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSON.parse("MtkIql1lTc", parserConfig0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parse("fastjson.parser.deny.internal", parserConfig0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseObject((String) null, (TypeReference<JSON>) null, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Class<JSONPObject> class0 = JSONPObject.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("yyyy-MM-dd HH:mm:ss", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 88);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      JSON.handleResovleTask(defaultJSONParser0, pascalNameFilter0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      // Undeclared exception!
      try { 
        jSONArray0.toString(serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      Class<JSONValidator.Type> class1 = JSONValidator.Type.class;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      FieldInfo fieldInfo0 = new FieldInfo("R>AFQ(}B?+EB{mmo", class0, class1, parameterizedTypeImpl0, (Field) null, 2254, 1005, 29);
      // Undeclared exception!
      try { 
        jSONArray0.toJavaObject((Type) fieldInfo0.fieldClass);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONValidator$Type
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      // Undeclared exception!
      try { 
        JSON.toJavaObject((JSON) jSONArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.serializer.SimplePropertyPreFilter
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.parser.deny", class0, (ParseProcess) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(615);
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        jSONObject0.writeJSONString((Appendable) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSON.clearMixInAnnotations();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSON.setDefaultTypeKey("");
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) pipedOutputStream0, (Object) pipedInputStream0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) javaBeanSerializer0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Feature[] featureArray0 = new Feature[4];
      // Undeclared exception!
      try { 
        JSON.parseObject("QIw", (Type) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        JSON.parseObject((byte[]) null, 764, 16, (CharsetDecoder) uTF8Decoder0, (Type) null, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("error parse false", (Type) parameterizedTypeImpl0, (ParseProcess) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but error, pos 1, line 1, column 2error parse false
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        JSON.parse((byte[]) null, 3089, 1041, (CharsetDecoder) uTF8Decoder0, 1041);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) jSONArray0, serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONPObject jSONPObject0 = new JSONPObject();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      byte[] byteArray0 = JSON.toJSONBytes((Object) jSONPObject0, serializerFeatureArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) null, serializeFilterArray0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSON.parseObject("^0Kr", (Type) null, parserConfig0, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2^0Kr
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "^/1Ps><sLSC5dT$", serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Class<JSON> class0 = JSON.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, linkedHashMap0);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) javaBeanSerializer0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray("9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual int, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<?> class1 = javaBeanSerializer0.getType();
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl(class1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      HashMap<String, GenericArrayTypeImpl> hashMap0 = JSON.parseObject("", (Type) genericArrayTypeImpl0, parserConfig0, 8, (Feature[]) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Object object0 = JSON.parse((String) null, (ParserConfig) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject("");
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) null, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      JSONObject jSONObject0 = JSON.parseObject("", featureArray0);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      StringWriter stringWriter0 = new StringWriter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      // Undeclared exception!
      try { 
        JSON.writeJSONStringTo(pascalNameFilter0, stringWriter0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) null, serializeConfig0, (SerializeFilter[]) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Class<Annotation> class0 = Annotation.class;
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) byteArrayInputStream0, (Type) class0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      MockFile mockFile0 = new MockFile("yyyy-MM-dd HH:mm:ss");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Charset charset0 = Charset.defaultCharset();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) mockPrintStream0, charset0, (Object) bufferedInputStream0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) null, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "yyyy-MM-dd HH:mm:ss", (SerializeConfig) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Class<Field> class0 = Field.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      Feature[] featureArray0 = new Feature[2];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (Type) class1, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }
}
