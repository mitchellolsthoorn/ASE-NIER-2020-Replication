/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 00:47:56 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.JSONValidator;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.Clock;
import java.time.ZoneId;
import java.time.chrono.MinguoDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;
import java.util.UUID;
import java.util.Vector;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"number\":\"1\"}";
      stringArray0[1] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"number\":\"1\"}";
      stringArray0[2] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"number\":\"1\"}";
      stringArray0[3] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"number\":\"1\"}";
      stringArray0[4] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"number\":\"1\"}";
      stringArray0[5] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"number\":\"1\"}";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath(":", serializeConfig0, parserConfig0);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"number\":\"1\"}", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"number\":\"1\"}");
      assertEquals(6, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      Object object0 = JSONPath.reserveToArray(jSONPath_MultiPropertySegment0, stringArray0);
      boolean boolean0 = JSONPath.remove(object0, "/0/cause/stackTrace/7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "!a2=}";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("(@|ec2:/yThEt", "r7 ~@/4Jx`P!3", "!a2=}", stringArray0, true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (Throwable) null);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 46, 46);
      JSONPath jSONPath0 = new JSONPath("l%kW]t<");
      int[] intArray0 = new int[9];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, sQLInvalidAuthorizationSpecException0, jSONPath_MultiIndexSegment0);
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$ValueSegment");
      Float float0 = new Float(0.0F);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(4820, 963, 24);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("IgnoreNonFieldGetter", hashMap0, batchUpdateException0);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, sQLClientInfoException0, float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -159
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" Jd7h^");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=8$jY)v|=");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("M)/=;w503mvC<deC");
      SQLWarning sQLWarning0 = new SQLWarning("()Ljava/lang/String;", "/f*d[-zsk{ytc*[>!", sQLTransientConnectionException0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "/stackTrace/0";
      stringArray0[1] = "/f*d[-zsk{ytc*[>!";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(sQLWarning0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("~K\"pbL,~");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("T!`?H.o=Pd");
      jSONPath_JSONPathParser0.readName();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/0/stackTrace/5");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(2403468754648211274L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*PB(");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("size");
      long[] longArray0 = new long[2];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("GQ5e0!:k", longArray0, false);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntInSegement0);
      assertSame(jSONPath_IntInSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$fv|");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. $fv|
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[_Cox`81{w,>e}Dn*");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, jSONPath0, sQLSyntaxErrorException0);
      assertEquals(2, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("3m7BPkFQ-axsS#a");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(":");
      jSONPath0.init();
      assertEquals(":", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("'s*,s*'", true);
      // Undeclared exception!
      try { 
        jSONPath_SizeSegment0.eval((JSONPath) null, jSONPath_PropertySegment0, "'s*,s*'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$SizeSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("between", serializeConfig0, parserConfig0);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("fastjson.parser.deny.internal", "ull", false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(762, 27, (-717), 762, 27, 27);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("rlike", sQLIntegrityConstraintViolationException0);
      DataTruncation dataTruncation0 = new DataTruncation((-717), true, true, 32, 17, sQLTimeoutException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLIntegrityConstraintViolationException0);
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, mockGregorianCalendar0, dataTruncation0, sQLTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("/cause/stackTrace/5");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/5");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("YvW-gr(5[", "/cause/stackTrace/5", 12);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientConnectionException0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("/cause/stackTrace/5", jSONPath_FilterSegment0, jSONPath_Operator0);
      Double double0 = new Double((-3013.2));
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, jSONPath_NullSegement0, double0, sQLIntegrityConstraintViolationException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("xY[f\"&Y,_FNk/o,f O|");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("1&v=5w:Cnw+Ru}^ym");
      Long long0 = new Long((-1109L));
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-531));
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, long0, jSONPath_ArrayAccessSegment0, jSONPath_ArrayAccessSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/9");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("rlike");
      jSONPath_JSONPathParser0.next();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/nextException/stackTrace/11");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('.');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("writeClassName");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("writeClassName");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("J");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('m');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'm, but 'J'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.asmEnable");
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      long[] longArray0 = new long[9];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("fastjson.asmEnable", longArray0, false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, "fastjson.asmEnable", mockGregorianCalendar0, javaBeanDeserializer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("(@|ec2:/yThEt", 0.0, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("Zw6xu6Y7r]");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com.alibaba.fastjson.JSON", true);
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, (Object) null, jSONPath0, jSONPath_PropertySegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":false,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      Object object0 = jSONPath_ArrayAccessSegment0.eval(jSONPath0, jSONPath_Operator0, "{\"fruit\":\"Apple\",\"size\":false,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      assertEquals("{\"fruit\":\"Apple\",\"size\":false,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", object0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"a string\",\"com.alibaba.fastjson.JSONPath$MultiPropertySegment\":\"Large\",\"color\":\"Red\",\"value\":-99,\"value2\":false,\"number\":\"1\",\"x\":false}");
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, (Object) null, parserConfig0);
      assertEquals(7, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("0&skhzYLx_M~66a");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue(2923L);
      assertEquals(2923.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<Byte> class0 = Byte.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) throwableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("l%kW]t<", "/stackTrace/1", hashMap0);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "password", sQLClientInfoException0);
      Map<String, Object> map0 = JSONPath.paths((Object) sQLNonTransientConnectionException0, serializeConfig0);
      assertEquals(145, map0.size());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = JSONPath.size((Object) "!]C B|xW&~", "fastjson.parser.autoTypeSupport");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(".000000");
      Short short0 = new Short((short)7);
      int int0 = jSONPath0.size((Object) short0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("/cause/stackTrace/5");
      JSONPath jSONPath0 = JSONPath.compile("/cause/stackTrace/5");
      boolean boolean0 = jSONPath0.setPropertyValue(jSONPath_NullSegement0, "qs", 0L, jSONPath_NullSegement0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = JSONPath.set((Object) null, ",u[[", (Object) ",u[[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("l%kW]t<");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) "l%kW]t<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToObject((Object) null, stringArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Object object0 = JSONPath.read((String) null, "3ZHpg&m*SWxh,!<");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Short short0 = new Short((short) (-7936));
      Set<?> set0 = JSONPath.keySet((Object) short0, "\"");
      assertFalse(set0.contains("\""));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("fastjson.parser.deny", "between", 12, hashMap0);
      Set<?> set0 = JSONPath.keySet((Object) sQLClientInfoException0, "/stackTrace/5");
      assertEquals(5, set0.size());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("org.springframework.security.core.userdetails.User", serializeConfig0, (ParserConfig) null);
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/5", serializeConfig0, (ParserConfig) null);
      Collection<Object> collection0 = jSONPath0.getPropertyValues(serializeConfig0);
      assertFalse(collection0.contains("/cause/stackTrace/5"));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/9");
      Object object0 = jSONPath0.getPropertyValue((Object) null, "^A_d6:*DcRC", 8376649587902032607L);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/7");
      Class<Calendar> class0 = Calendar.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("mark_context");
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("l%kW]t<");
      Object object0 = jSONPath0.getArrayItem((Object) null, 120);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"b\":{}}");
      Short short0 = new Short((short)72);
      int int0 = jSONPath0.evalSize(short0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("VshKh5 (w)");
      int int0 = jSONPath0.evalSize("VshKh5 (w)");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/0");
      int int0 = jSONPath0.evalSize((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("gH`9>4\"2{1;~M0", serializeConfig0, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("zL!xNc", false);
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_PropertySegment0);
      assertFalse(set0.contains("gH`9>4\"2{1;~M0"));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(".000000");
      Pattern pattern0 = Pattern.compile("fastjson.parser.autoTypeSupport");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("fastjson.parser.deny.internal", pattern0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RegMatchSegement0);
      Object object0 = jSONPath0.eval((Object) jSONPath_FilterSegment0);
      assertSame(jSONPath_FilterSegment0, object0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Float float0 = new Float(2603.845F);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(5687);
      boolean boolean0 = JSONPath.containsValue((Object) jSONPath_ArrayAccessSegment0, "fastjson.parser.autoTypeSupport", (Object) float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) "create instance error, class ", "*");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(".000000");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<JSONPath.SizeSegment> class0 = JSONPath.SizeSegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(classLoader0, "fastjson.parser.autoTypeAccept", (-1L), class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("l%kW]t<");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      DataTruncation dataTruncation0 = new DataTruncation(517, false, false, 517, 517, (Throwable) null);
      // Undeclared exception!
      jSONPath0.setPropertyValue(bigDecimal0, "/f*d[-zsk{ytc*[>!", 2923L, dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("gH`9>4\"2{1;~M0", serializeConfig0, parserConfig0);
      Object object0 = JSONPath.reserveToArray(parserConfig0, (String[]) null);
      Float float0 = new Float((-1.0));
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(float0, "fastjson.parser.autoTypeSupport", 989, object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("wgGWcul^7u?mk#");
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, "&@Pa2c", (-1289L), "&@Pa2c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/6", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, (Object) null, (-1881262653), jSONPath0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<JSONPath> class0 = JSONPath.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) classLoader0, "fastjson.parser.safeMode", (Object) javaBeanDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-221), (-221), (-221));
      // Undeclared exception!
      try { 
        JSONPath.set((Object) "mark_context", "3", (Object) mockGregorianCalendar0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("/cause/cause/stackTrace/10", "/cause/cause/stackTrace/10");
      // Undeclared exception!
      try { 
        JSONPath.set((Object) "/stackTrace/13", "fastjson.parser.autoTypeSupport", (Object) sQLTransientException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      JSONPath.set((Object) mockGregorianCalendar0, "JVN`Y>Cc6%'", (Object) zoneId0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(74, false, true, 74, (-513));
      JSONPath jSONPath0 = new JSONPath("/stackTrace/12");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("+)zp?t6>#gMZP{1", "+)zp?t6>#gMZP{1", (-1270), dataTruncation0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLInvalidAuthorizationSpecException0, (Object) "/stackTrace/12", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":null,\"size\":\"unsupported array put operation. \",\"color\":99,\"IgnoreNonFieldGetter\":null,\"/cause/stackTrace/5\":true,\"number\":\"1\",\"LE\":[],\"x\":{}}");
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "{\"fruit\":null,\"size\":\"unsupported array put operation. \",\"color\":99,\"IgnoreNonFieldGetter\":null,\"/cause/stackTrace/5\":true,\"number\":\"1\",\"LE\":[],\"x\":{}}", (Object) parserConfig0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"fruit\":null,\"size\":\"unsupported array put operation. \",\"color\":99,\"IgnoreNonFieldGetter\":null,\"/cause/stackTrace/5\":true,\"number\":\"1\",\"LE\":[],\"x\":{}}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/5", serializeConfig0, (ParserConfig) null);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "/cause/stackTrace/5", (Object) serializeConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/1");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("fastjson.parser.safeMode", (Throwable) null);
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.safeMode", sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLRecoverableException0, (Object) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Object object0 = JSONPath.reserveToArray(parserConfig0, (String[]) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/nextException/stackTrace/11", "gH`9>4\"2{1;~M\"", 989);
      JSONPath jSONPath0 = JSONPath.compile("()Ljava/lang/String;");
      jSONPath0.set(object0, (Object) sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ":";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject((Object) null, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "REG_MATCH";
      stringArray0[1] = "REG_MATCH";
      stringArray0[2] = "/cause/cause/stackTrace/10";
      stringArray0[3] = "B";
      stringArray0[4] = "B";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray("REG_MATCH", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "mark_context";
      stringArray0[1] = "3";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray("mark_context", stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$ValueSegment");
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$ValueSegment");
      Clock clock0 = MockClock.systemUTC();
      MinguoDate minguoDate0 = MockMinguoDate.now(clock0);
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(minguoDate0, "ull", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.time.chrono.MinguoDate
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1436, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      JSONPath jSONPath0 = new JSONPath("/", serializeConfig0, parserConfig0);
      UUID uUID0 = MockUUID.fromString("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(uUID0, "fastjson.parser.safeMode", false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONPath.Operator.values();
      String string0 = "/stackTrace/12";
      SerializeConfig serializeConfig0 = new SerializeConfig(12, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/12", serializeConfig0, parserConfig0);
      ParserConfig.global = parserConfig0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.parser.deny.internal");
      jSONPath0.removePropertyValue(parserConfig0, "b.7{):K", false);
      Type[] typeArray0 = new Type[2];
      Class<Double> class0 = Double.TYPE;
      typeArray0[0] = (Type) class0;
      Class<Integer> class1 = Integer.TYPE;
      typeArray0[1] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, typeArray0[0]);
      ParserConfig.global.get(parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(ParserConfig.global, "fastjson.parser.autoTypeAccept", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path /stackTrace/12
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SerializeConfig serializeConfig0 = new SerializeConfig(47, true);
      JSONPath jSONPath0 = new JSONPath("J>FF", serializeConfig0, (ParserConfig) null);
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(sQLIntegrityConstraintViolationException0, "J>FF", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"/cause/stackTrace/5\":true,\"number\":\"1\",\"x\":[]}");
      Feature[] featureArray0 = new Feature[6];
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, featureArray0[1], 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      JSONPath.remove((Object) bigInteger0, "yyyy\uB144M\uC6D4d\uC77C");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) "rlFAike", "");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("$", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_Operator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("3", "3");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("3)# QSQ@]f^1W<", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : )
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("#tTv33/k\"Tp|+' QJ1M");
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) sQLNonTransientConnectionException0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("null");
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) "null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("C*)O_m*lO6Wu=,oF!", serializeConfig0, parserConfig0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("false");
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : C*)O_m*lO6Wu=,oF!
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("\":");
      jSONPath0.isRef();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("!O", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. !O
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("EQ", (SerializeConfig) null, parserConfig0);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue(throwableDeserializer0, ",AafS3z(", (-302));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("mark_context");
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanSerializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("(@|ec2:/yThEt");
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.reflect.Field
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$StringInSegement", serializeConfig0, parserConfig0);
      Class<BigDecimal> class0 = BigDecimal.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/5", serializeConfig0, (ParserConfig) null);
      Class<Long> class0 = Long.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("GcHKE", serializeConfig0, parserConfig0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem(sQLClientInfoException0, 91);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.parser.deny.internal", "){", parserConfig0, 487, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "fastjson.parser.autoTypeSupport", parserConfig0, 36, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        JSONPath.extract("&ab1H8S^", "&ab1H8S^", parserConfig0, (int) (byte)41, (Feature[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.parser.autoTypeAccept", "(@|ec2:/yThEt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(41, true);
      JSONPath jSONPath0 = new JSONPath("YFn|sj1Vj(D%b", serializeConfig0, (ParserConfig) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".,DXD<");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : YFn|sj1Vj(D%b
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("zQ:*EC'*LaS]GfMk3_o", 2035L, 2035L, false);
      JSONPath jSONPath0 = new JSONPath("zQ:*EC'*LaS]GfMk3_o", (SerializeConfig) null, (ParserConfig) null);
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(jSONPath_IntBetweenSegement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      JSONPath jSONPath0 = new JSONPath("Ble'F~5{|MNf");
      // Undeclared exception!
      try { 
        jSONPath0.evalKeySet(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("F:,$i:>Q[)d+ljn", "?ob}9}]:U[B|`ta)/");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("F:,$i:>Q[)d+ljn", sQLTransientException0);
      JSONPath.eval((Object) sQLIntegrityConstraintViolationException0, "?ob}9}]:U[B|`ta)/");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("parser");
      Class<String> class0 = String.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig0 = new SerializeConfig(1901);
      JSONPath jSONPath0 = new JSONPath("z_r_RxQ4[i_", serializeConfig0, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException("P}>QF", "fastjson.parser.safeMode");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLDataException0);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) sQLTransientConnectionException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("mark_context");
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) "null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Yx0<w5SH,%kgO!|,4");
      Class<String> class0 = String.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : Yx0<w5SH,%kgO!|,4
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("'");
      BigInteger bigInteger0 = BigInteger.TEN;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("q7}%Mv", (String) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(":{hK;^AYNQ^dXLd", sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      jSONPath0.deepSet(bigInteger0, "'", 318, sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Vector<Object> vector0 = new Vector<Object>();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("IR*6ZTC*FyFg+i,", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(class0, "s]Rx;7arQx", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("15L^)vC$0)-");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONPath0.deepGetPropertyValues(bigInteger0, arrayList0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) class0, "p", (Object) "fastjson.asmEnable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      Class<JSONPath.FilterSegment> class0 = JSONPath.FilterSegment.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Byte byte0 = new Byte((byte)2);
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) javaBeanSerializer0, (Object) byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath jSONPath0 = JSONPath.compile("wy@9+08'rN9kstw6V");
      jSONPath0.containsValue((Object) jSONPath_Operator0, (Object) "wy@9+08'rN9kstw6V");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<JSONPath.SizeSegment> class0 = JSONPath.SizeSegment.class;
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) class0, "fastjson.parser.autoTypeSupport");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/3");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        JSONPath.compare((Object) null, bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("keySet");
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(867, (-588), (-751));
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) jSONPath_RangeSegment0, "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"b\":{}}", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"b\":{}}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(8, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("JSONPath$RefOpSegement", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      jSONPath0.deepSet(jSONPath_Operator0, "java.util.concurrent.atomic.DoubleAdder", 1784L, jSONPath_MultiIndexSegment0);
      assertEquals("JSONPath$RefOpSegement", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("6_&Z.duFA*t%DqD.", serializeConfig0, parserConfig0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(sQLSyntaxErrorException0, "java.util.Collection", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path 6_&Z.duFA*t%DqD., segement java.util.Collection
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("w!D$jwl@kg");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("w!D$jwl@kg", arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, sQLClientInfoException0, 34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLClientInfoException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("EQ");
      int[] intArray0 = new int[9];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("gm", intArray0, (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fg", "gm", 184, batchUpdateException0);
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((-2491L));
      longArray0[0] = long0;
      longArray0[1] = longArray0[0];
      longArray0[2] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("ce", longArray0, false);
      Object object0 = new Object();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLSyntaxErrorException0);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, "gm", object0, sQLNonTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("l%kW]t<", 2923L, 2923L, false);
      JSONPath jSONPath0 = new JSONPath("l%kW]t<");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, (Object) null, sQLTransientConnectionException0, "l%kW]t<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com.alibaba.fastjson.JSONPath$ValueSegment", false);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$ValueSegment");
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, batchUpdateException0);
      jSONPath_PropertySegment0.setValue(jSONPath0, sQLClientInfoException0, "com.alibaba.fastjson.JSONPath$ValueSegment");
      assertEquals("java.sql.SQLClientInfoException: java.sql.BatchUpdateException", sQLClientInfoException0.toString());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("{\"/stackTrace/6\":\"Apple\",\"size\":true,\"value\":\"a string\",\"in\":false,\"number\":\"1\",\"x\":-99}", false);
      JSONPath jSONPath0 = JSONPath.compile("{\"/stackTrace/6\":\"Apple\",\"size\":true,\"value\":\"a string\",\"in\":false,\"number\":\"1\",\"x\":-99}");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("{\"/stackTrace/6\":\"Apple\",\"size\":true,\"value\":\"a string\",\"in\":false,\"number\":\"1\",\"x\":-99}", "{\"/stackTrace/6\":\"Apple\",\"size\":true,\"value\":\"a string\",\"in\":false,\"number\":\"1\",\"x\":-99}", 1229);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, sQLTransactionRollbackException0, sQLTransactionRollbackException0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/7");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(2, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".94qA}z&+:e(7\"< }a";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject("com.alibaba.fastjson.JSONPath$MatchSegement", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("#Kt8){SAnw/=Gk");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" -> ");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("^cQW6o#4B", serializeConfig0, parserConfig0);
      JSONPath jSONPath1 = JSONPath.compile("^cQW6o#4B");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      jSONPath1.deepGetPropertyValues(arrayList0, arrayList0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(797);
      JSONPath jSONPath0 = JSONPath.compile("c7F");
      boolean boolean0 = jSONPath0.set((Object) jSONPath_ArrayAccessSegment0, (Object) null, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("EQ", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_Operator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.remove((Object) serializeConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Qw 8cSdRbf]O7");
      jSONPath0.arrayAdd((Object) "Qw 8cSdRbf]O7", (Object[]) null);
      assertEquals("Qw 8cSdRbf]O7", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("GuavaCodec");
      boolean boolean0 = jSONPath0.containsValue((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Zw6xu6Y7r]");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}");
      Object object0 = jSONPath0.extract(defaultJSONParser0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("<nF\"}4]8}>/6Cb3");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/nextException/stackTrace/11");
      JSONPath jSONPath0 = new JSONPath("/nextException/stackTrace/11");
      Object object0 = jSONPath0.eval((Object) jSONPath_JSONPathParser0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(797);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("\"a string\"", serializeConfig0, (ParserConfig) null);
      int[] intArray0 = new int[6];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, "\"a string\"", jSONPath_MultiIndexSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        JSONPath.extract("getLastResolveTask", "getLastResolveTask", parserConfig0, (-2312), (Feature[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "mark_context";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(jSONPath_WildCardSegment0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/0/stackTrace/5", false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "/0/stackTrace/5";
      stringArray0[1] = "/0/stackTrace/5";
      stringArray0[2] = "/0/stackTrace/5";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject(jSONPath_PropertySegment0, stringArray0);
      assertEquals(0, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Double double0 = new Double((-1096.40674));
      Object object0 = JSONPath.reserveToObject(double0, (String[]) null);
      assertEquals((-1096.40674), object0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("^d3(d?~d)dV3`");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Class<MockCalendar> class0 = MockCalendar.class;
      jSONPath0.getJavaBeanDeserializer(class0);
      Set<?> set0 = jSONPath0.evalKeySet("^d3(d?~d)dV3`");
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/6", serializeConfig0, parserConfig0);
      Object object0 = JSONPath.reserveToArray(parserConfig0, (String[]) null);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(115, 989, 989);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, object0);
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"/0/stackTrace/7\":\"a string\",\"float\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":false,\"com.alibaba.fastjson.JSONPath$MaxSegment\":false}");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("{\"/0/stackTrace/7\":\"a string\",\"float\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":false,\"com.alibaba.fastjson.JSONPath$MaxSegment\":false}", true);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(2121);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("no~ support jsonpath : ", "-99", (-2028601593), hashMap0, (Throwable) null);
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, sQLClientInfoException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("gH`9>4\"2{1;~M0", serializeConfig0, parserConfig0);
      Object object0 = JSONPath.reserveToArray(parserConfig0, (String[]) null);
      boolean boolean0 = jSONPath0.setPropertyValue(object0, "&/*j.}~Q<d!_l", 1L, serializeConfig0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) "/stackTrace/9");
      boolean boolean0 = JSONPath.set((Object) map0, "/stackTrace/9", (Object) map0);
      assertEquals(2, map0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      ParserConfig parserConfig0 = ParserConfig.global;
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSONPath jSONPath0 = new JSONPath("()Ljava/lang/String;", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(parserConfig0, "fastjson.parser.autoTypeAccept", 329L, jSONPath_Operator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path ()Ljava/lang/String;, segement fastjson.parser.autoTypeAccept
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("/nextException/cause/stackTrace/13", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(76, 76, 76);
      jSONPath0.deepSet(serializeConfig0, "/nextException/cause/stackTrace/13", 3277L, jSONPath_RangeSegment0);
      assertTrue(serializeConfig0.isAsmEnable());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("T!`?H.o=Pd");
      jSONPath0.deepSet((Object) null, ":Rb'dBm3Ao\"s", (-650378586184600901L), (Object) null);
      assertEquals("T!`?H.o=Pd", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("mark_context");
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) "3");
      jSONPath0.deepScan(vector0, "Uh!Qt=+HHZx8e", vector0);
      assertTrue(vector0.contains("3"));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("6_&Z.duFA3t%-qD.", serializeConfig0, parserConfig0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("uSg{K5YPwgMo");
      jSONPath0.deepScan(sQLSyntaxErrorException0, "wgGWcul^7u?mk#", vector0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      Set<?> set0 = JSONPath.keySet((Object) calendar0, "writeFieldValueStringWithDoubleQuoteCheck");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath jSONPath0 = JSONPath.compile("wy@9+08'rN9kstw6V");
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("{\"WriteNonStringValueAsString\":\"expect string\",\"com.alibaba.fastjson.util.ASMUtils\":\"Large\",\"color\":null,\"value\":false,\"value2\":true,\"number\":\"a string\"}", (Pattern) null, jSONPath_Operator0);
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, jSONPath0, jSONPath_Operator0, "{\"WriteNonStringValueAsString\":\"expect string\",\"com.alibaba.fastjson.util.ASMUtils\":\"Large\",\"color\":null,\"value\":false,\"value2\":true,\"number\":\"a string\"}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Float float0 = new Float(0.0F);
      boolean boolean0 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Float float0 = new Float((float) 2923L);
      boolean boolean0 = JSONPath.eqNotNull(float0, (-1580386065683472715L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((-1580386065683472715L), bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Short short0 = new Short((short)7);
      Short short1 = new Short((short)3264);
      boolean boolean0 = JSONPath.eqNotNull(short0, short1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Byte byte0 = new Byte((byte)106);
      boolean boolean0 = JSONPath.eqNotNull(byte0, byte0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(25);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Double double0 = new Double((-1096.40674));
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"number\":\"1\"}", serializeConfig0, parserConfig0);
      Class<SQLException> class0 = SQLException.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      boolean boolean0 = JSONPath.eq(double0, javaBeanSerializer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Short short0 = new Short((short)7);
      Float float0 = new Float((float) 0);
      boolean boolean0 = JSONPath.eq(short0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      boolean boolean0 = JSONPath.eq("no~ support jsonpath : ", "{\"scanFieldInt\":\"Apple\",\"size\":\"Large\",\"color\":99,\"value2\":false,\"number\":\"1\"}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Float float0 = new Float(137.19F);
      boolean boolean0 = JSONPath.eq(float0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("toJSON error", "=yC9wX$[(f^^", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("fastjson.parser.deny.internal", "fastjson.parser.deny.internal", 29, sQLDataException0);
      boolean boolean0 = JSONPath.eq((Object) null, sQLRecoverableException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Short short0 = new Short((short)7);
      boolean boolean0 = JSONPath.eq(short0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("mark_context");
      Vector<Object> vector0 = new Vector<Object>();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("=D!:IbMNFOrO", "mark_context", 0, hashMap0);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLClientInfoException0, vector0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      Object object0 = JSONPath.reserveToArray(mockGregorianCalendar0, (String[]) null);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("EF.m5[j,", serializeConfig0, parserConfig0);
      HashSet hashSet0 = (HashSet)jSONPath_WildCardSegment0.eval(jSONPath0, object0, set0);
      assertEquals(599, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"true\":\"Apple\",\"/stackTrace/4\":\"Large\",\"color\":null,\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\"}");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, sQLClientInfoException0, hashMap0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("false");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath0, jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, "3m7BPkFQ-axsS#a", 0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("\"a string\"", serializeConfig0, (ParserConfig) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"a string\"";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("\"a string\"", stringArray0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringInSegement0, jSONPath_StringInSegement0, false);
      Object object0 = new Object();
      JSONPath.FilterGroup jSONPath_FilterGroup1 = new JSONPath.FilterGroup(jSONPath_FilterGroup0, jSONPath_StringInSegement0, true);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("\"a string\"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("i(.)+%56+uH@");
      boolean boolean0 = jSONPath_FilterGroup1.apply(jSONPath0, sQLNonTransientException0, sQLRecoverableException0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("\"a string\"", serializeConfig0, (ParserConfig) null);
      String[] stringArray0 = new String[6];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("\"a string\"", stringArray0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringInSegement0, jSONPath_StringInSegement0, true);
      Object object0 = new Object();
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, "\"a string\"", object0, stringArray0[4]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"/0/stackTrace/7\":\"a string\",\"float\":-99,\"color\":\"Red\",\"value\":99,\"between\":false,\"number\":false,\"com.alibaba.fastjson.JSONPath$MaxSegment\":false}");
      String[] stringArray0 = new String[1];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("/0/stackTrace/11", stringArray0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringInSegement0, jSONPath_StringInSegement0, false);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_StringInSegement0, jSONPath0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("P}>QF");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig0 = new SerializeConfig(1901);
      JSONPath jSONPath0 = new JSONPath("z_r_RxQ4[i_", serializeConfig0, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException("P}>QF", "fastjson.parser.safeMode");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLDataException0);
      DataTruncation dataTruncation0 = new DataTruncation(9, false, false, 803, 16, sQLDataException0);
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.remove(jSONPath0, sQLTransientConnectionException0, dataTruncation0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.SQLException$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("7OM4<R+OlU[HBq4:", (-1025.532174455252), jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      JSONPath jSONPath0 = new JSONPath("7OM4<R+OlU[HBq4:");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_FilterSegment0, jSONPath_FilterSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/1");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("xzq)I:P5", (String[]) null, false);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("fastjson.parser.deny", "fastjson.parser.autoTypeSupport", sQLTransientConnectionException0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, sQLRecoverableException0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("/cause/stackTrace/5");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/5");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("/cause/stackTrace/5", "YvW-gr(5[", (-331));
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, sQLInvalidAuthorizationSpecException0, jSONPath_NullSegement0);
      assertSame(jSONPath_NullSegement0, object0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("float", "float", jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("float");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(497);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath0, jSONPath_ArrayAccessSegment0, jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("fastjson.parser.autoTypeAccept", ".", true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RlikeSegement0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("|vJF$ZF3$E}", (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(sQLRecoverableException0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, "|vJF$ZF3$E}", sQLWarning0);
      assertNotNull(jSONArray0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("wgGWcul^7u?mk#");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("d*#YPu=]U(", "wgGWcul^7u?mk#", "mL`wQ)8.l3", (String[]) null, true);
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, "com", parserConfig0, "com.alibaba.fastjson.asm.MethodWriter");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("nin", "d*#YPu=]U(", (String) null, (String[]) null, true);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("yyyy-MM-dd HH:mm:ss", (String) null, "Bu,,2o", stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("tU_c4;-ikLtG0Nxw", jSONPath_KeySetSegment0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      SerializeConfig serializeConfig0 = new SerializeConfig(18);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      Locale locale0 = Locale.ITALIAN;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, calendar0, batchUpdateException0);
      assertNotNull(jSONArray0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("7OM4<R+OlU[HBq4:", (-1025.532174455252), jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      JSONPath jSONPath0 = new JSONPath("7OM4<R+OlU[HBq4:");
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath0, "7OM4<R+OlU[HBq4:");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ohn\"M 8g>,+O&";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("/stackTrace/4", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath("D=?ai;g<n=fBwl)");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Z$V.)Ej69y vT");
      SQLWarning sQLWarning0 = new SQLWarning("null", "/stackTrace/4", 128, sQLInvalidAuthorizationSpecException0);
      Double double0 = new Double((-66.72660962968835));
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, sQLInvalidAuthorizationSpecException0, sQLWarning0, double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("w!D$jwl@kg");
      Long[] longArray0 = new Long[1];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("w!D$jwl@kg", longArray0, true);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, "w!D$jwl@kg", jSONPath0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 0, 46);
      JSONPath jSONPath0 = new JSONPath("gH`9>4\"2{1;~M0");
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, "/stackTrace/4", sQLIntegrityConstraintViolationException0);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("z_r_RxQ4[i_", 0, 0, true);
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, (Object) null, "r", arrayList0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.asmEnable");
      long[] longArray0 = new long[9];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("fastjson.asmEnable", longArray0, false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("illeal jsonpath syntax. ");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntInSegement0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1252, (-3320), 1252);
      SQLDataException sQLDataException0 = new SQLDataException("]", "/nextException/stackTrace/7", sQLFeatureNotSupportedException0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_RangeSegment0, sQLDataException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("gH`9>4\"2{1;~M0", serializeConfig0, parserConfig0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("fastjson.parser.deny.internal", serializeConfig0, true);
      Short short0 = new Short((short)93);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, short0, jSONPath0, serializeConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("/cause/stackTrace/9", (Object) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("1&v=5w:Cnw+Ru}^ym", "1&v=5w:Cnw+Ru}^ym", false);
      JSONPath jSONPath0 = JSONPath.compile("~K\"pbL,~");
      DataTruncation dataTruncation0 = new DataTruncation(252, false, false, 252, 252);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, jSONPath0, "~K\"pbL,~", dataTruncation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(664, (-1137), 664);
      JSONPath jSONPath0 = JSONPath.compile("{\"Y8@}yNX\":true,\"y\":{},\"z\":null,\"/cause/cause/stackTrace/3\":[]}");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, propertyNamingStrategy0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-81402810), 866, (-2147483647));
      JSONPath jSONPath0 = new JSONPath("/stackTrace/4");
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, sQLIntegrityConstraintViolationException0, jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = new JSONPath("cImy\"");
      Integer integer0 = new Integer(73);
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, integer0, jSONPath0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("4&J@O-qAirvqm$V", true);
      JSONPath jSONPath0 = new JSONPath("DH7b5l");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3084), (-3084), 106, (-3084), 106, (-3084));
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.setValue(jSONPath0, mockGregorianCalendar0, mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path DH7b5l, segement 4&J@O-qAirvqm$V
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("u#0cOV%:Z", true);
      JSONPath jSONPath0 = JSONPath.compile("g.^\"s<qGv");
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, "u#0cOV%:Z", (Object) null);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Float float0 = new Float((-204.376112789));
      // Undeclared exception!
      try { 
        JSONPath.compare(float0, bigDecimal0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.math.BigDecimal cannot be cast to java.lang.Float
         //
         verifyException("java.lang.Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("haAnG/{,z&o", 41);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        JSONPath.compare(jSONReaderScanner0.matchStat, sQLTransactionRollbackException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLTransactionRollbackException cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Long long0 = new Long(2337L);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        JSONPath.compare(long0, jSONPath0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath cannot be cast to java.lang.Long
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      UUID uUID0 = MockUUID.fromString("/cause/stackTrace/5");
      // Undeclared exception!
      try { 
        JSONPath.compare(jSONPath_MultiPropertySegment0, uUID0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath$MultiPropertySegment cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      int int0 = JSONPath.compare("(@|ec2:/yThEt", "(@|ec2:/yThEt");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        JSONPath.compare(bigDecimal0, "mark_context");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.math.BigDecimal
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("T!`?H.o=Pd");
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0);
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, "uh", map0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.asmEnable");
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, (Object) null, class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(":");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("j_\"WWOiedY>r2`");
      jSONPath_JSONPathParser0.readName();
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("_asm_list_item_ser_");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("asm", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{6nKV");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '{, but 'V'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("rlike");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("like");
      jSONPath_JSONPathParser0.readOp();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(6742705432718011780L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("safeMode not support autoType : ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=VN32");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not support jsonpath : ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\":\"");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(":\"", object0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{6nKV");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(2403468754648211274L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("G-AEUriKT");
      jSONPath_JSONPathParser0.readName();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/9");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("+7 a>L[K**~$]zWN.|");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(7L, object0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("fastjson.parser.deny.internal", (-1528.0), jSONPath_Operator0);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_DoubleOpSegement0);
      assertSame(jSONPath_Filter0, jSONPath_DoubleOpSegement0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.asm.MethodWriter");
      jSONPath_JSONPathParser0.readName();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":\"UseISO8601DateFormat\",\"size\":99,\"color\":\"Red\",\"value\":[],\"value2\":false,\"number\":\"1\",\"x\":99}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"fruit\":\"UseISO8601DateFormat\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Yx0<w5SH,%kgO!|,4");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("Cv)6f+8pB]9Wa|O*'?{", "HPXs[LiQQp>$K");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2Cv)6f+8pB]9Wa|O*'?{
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("@type");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '., but 't'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("w!D$jwl@kg");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but 'D'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("?oi>2-");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '(, but 'o'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/6", serializeConfig0, parserConfig0);
      JSONPath.reserveToArray(parserConfig0, (String[]) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/nextException/stackTrace/11", "fastjson.parser.autoTypeAccept", 989);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("/nextException/stackTrace/11", "yyyy-MM-dd HH:mm:ss");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("5");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(989);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("gP&!j;*3m@cG#`N", "{+p]z^82/O9?", 3089, hashMap0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment1 = new JSONPath.ArrayAccessSegment(3089);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer(3089);
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) integer0, "-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 0, 46);
      JSONPath jSONPath0 = new JSONPath("gH`9>4\"2{1;~M0");
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, "/stackTrace/4", sQLIntegrityConstraintViolationException0);
      Map<String, Object> map0 = JSONPath.paths(object0);
      //  // Unstable assertion: assertEquals(81, map0.size());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "com.alibaba.fastjson.JSONPath$IntBetweenSegement");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "*", (Object) null, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("EQ", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.set((Object) parserConfig0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$RefOpSegement");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) propertyNamingStrategy0, (Object) "/stackTrace/5", true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/1");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      boolean boolean0 = jSONPath0.set((Object) "rlFAike", (Object) jSONPath_WildCardSegment0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/cause/cause/stackTrace/10");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "rlFAike", (Object) "rlFAike", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("l%kW]t<");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) jSONPath0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/9");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/stackTrace/9";
      stringArray0[1] = "com.alibaba.fastjson.serializer.BeforeFilter";
      stringArray0[2] = "UseSingleQuotes";
      stringArray0[3] = "/stackTrace/9";
      Object object0 = JSONPath.reserveToArray(jSONPath_JSONPathParser0, stringArray0);
      // Undeclared exception!
      try { 
        JSONPath.remove(object0, "fastjson.parser.deny.internal");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(".000000");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) ".000000");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.asmEnable");
      Short short0 = new Short((short) (-2962));
      boolean boolean0 = jSONPath0.remove((Object) short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("mark_context");
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("'");
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "'", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      String[] stringArray0 = new String[4];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("*", "java.util.ArrayList", hashMap0);
      jSONPath0.arrayAdd((Object) sQLClientInfoException0, (Object[]) stringArray0);
      assertEquals("*", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.asmEnable");
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "C!e().)GB?&", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path fastjson.asmEnable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("mark_context");
      Object[] objectArray0 = new Object[1];
      jSONPath0.arrayAdd((Object) null, objectArray0);
      assertEquals("mark_context", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath jSONPath0 = new JSONPath("@type");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("YvW-gr(5[", "J", 12);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("1.2.68", "/stackTrace/0", 44, hashMap0, sQLTransientConnectionException0);
      jSONPath0.arrayAdd((Object) sQLClientInfoException0, (Object[]) stringArray0);
      assertEquals("java.sql.SQLClientInfoException: 1.2.68", sQLClientInfoException0.toString());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(":");
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.asm.Item", serializeConfig0, parserConfig0);
      Set<?> set0 = jSONPath0.keySet((Object) "com.alibaba.fastjson.asm.Item");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("(@|ec2:/yThEt");
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(".000000");
      Pattern pattern0 = Pattern.compile("fastjson.parser.autoTypeSupport");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("fastjson.parser.deny.internal", pattern0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RegMatchSegement0);
      SQLException sQLException0 = new SQLException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fastjson.parser.autoTypeAccept", sQLException0);
      SQLWarning sQLWarning0 = new SQLWarning("/stackTrace", sQLSyntaxErrorException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("%Jgl<k", ",bIGt$&a?]ovdF", 1, sQLWarning0);
      boolean boolean0 = jSONPath0.containsValue((Object) sQLTransactionRollbackException0, (Object) jSONPath_FilterSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      boolean boolean0 = JSONPath.containsValue((Object) null, "NULL", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/nextException/stackTrace/11", "gH`9>4\"2{1;~M\"", 989);
      JSONPath jSONPath0 = new JSONPath("/nextException/stackTrace/11");
      boolean boolean0 = jSONPath0.containsValue((Object) "gH`9>4\"2{1;~M\"", (Object) sQLTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/0/cause/stackTrace/1");
      SQLWarning sQLWarning0 = new SQLWarning("/0/cause/stackTrace/1", "/0/cause/stackTrace/1");
      boolean boolean0 = jSONPath0.contains((Object) sQLWarning0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(".000000");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      boolean boolean0 = jSONPath0.contains((Object) classLoader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/cause/cause/stackTrace/10");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":-99,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) "{\"fruit\":-99,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"fruit\":-99,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("~OFxA@(H5@p", "/0/stackTrace/3");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Object object0 = JSONPath.extract("{\"NOT_RLIKE\":\"a string\",\"size\":\"unsupported array put operation. \",\"color\":99,\"value\":true,\"/cause/stackTrace/5\":true,\"number\":[],\"LE\":[]}", "fastjson.parser.deny");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("GT", "/stackTrace/2");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1436, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      JSONPath jSONPath0 = new JSONPath("/", serializeConfig0, parserConfig0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("<nF\"}4]8}>/6Cb3");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2<nF\"}4]8}>/6Cb3
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(".000000");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$MultiIndexSegment");
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      boolean boolean0 = jSONPath0.isRef();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$ValueSegment");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(".000000");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Set<?> set0 = JSONPath.keySet((Object) "*", "*");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null, serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("w!D$jwl@kg");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, arrayList0, arrayList0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("wRMpF4%;~M[");
      JSONPath jSONPath0 = new JSONPath("wRMpF4%;~M[");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(609);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, jSONPath_ArrayAccessSegment0, jSONPath_ArrayAccessSegment0, sQLClientInfoException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":false}");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('\"', char0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Map<String, Object> map0 = JSONPath.paths((Object) sQLIntegrityConstraintViolationException0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(1);
      SerializeConfig serializeConfig0 = new SerializeConfig(1);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("getLastResolveTask", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, map0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.util.HashMap
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("/cause/stackTrace/10", 3547627781654598988L, 3547627781654598988L, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      JSONPath jSONPath0 = JSONPath.compile("/cause/stackTrace/10");
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "/cause/stackTrace/10", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("b", "y|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2b
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" not found");
      String string0 = jSONPath0.getPath();
      assertEquals(" not found", string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("like");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("/cause/cause/stackTrace/10", "/cause/cause/stackTrace/10");
      StackTraceElement stackTraceElement0 = (StackTraceElement)JSONPath.eval((Object) sQLTransientException0, "/stackTrace/13");
      //  // Unstable assertion: assertNotNull(stackTraceElement0);
      //  // Unstable assertion: assertEquals("run", stackTraceElement0.getMethodName());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      int[] intArray0 = new int[9];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.arrayAdd((Object) jSONPath_MultiIndexSegment0, "setContext", (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("qo", "qo");
      boolean boolean0 = JSONPath.set((Object) sQLTimeoutException0, "/stackTrace/10", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("/", (-800L), jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("/");
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, jSONPath0, "/0/cause/stackTrace/10", jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      boolean boolean0 = JSONPath.remove((Object) jSONPath_MultiPropertySegment0, "_asm");
      assertFalse(boolean0);
  }
}
