/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 03:05:33 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Desktop;
import java.awt.Dialog;
import java.awt.TrayIcon;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.net.Proxy;
import java.net.StandardProtocolFamily;
import java.security.CryptoPrimitive;
import java.time.Month;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.annotation.Resource;
import javax.swing.SortOrder;
import jdk.net.SocketFlow;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("'");
      assertEquals("'", object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"readChar\":0}");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-4521.35041015");
      assertEquals((-4521.35041015), number0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("!UtcHm\"{sA*B");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [!UtcHm\"{sA*B] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("9");
      assertEquals(9, number0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"] not found.\":null,\"xofa4\"k&\f?>sv8@n\":\"a string\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 30 [character 31 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("}");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E0$[B6.L g{@&T{", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      JSONObject.indent(mockPrintWriter0, 445);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(123);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "pY._,]_+Z>DWM");
      MockFile mockFile0 = new MockFile("pY._,]_+Z>DWM", "x~RoE(MXDn_Zq}tx");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      try { 
        jSONObject0.write((Writer) mockPrintWriter0, 2, 2172);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<CryptoPrimitive, PushbackInputStream> hashMap0 = new HashMap<CryptoPrimitive, PushbackInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("/{e4Vr~@", 0.0);
      try { 
        jSONObject1.getBigInteger("/{e4Vr~@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Month, BufferedInputStream> hashMap0 = new HashMap<Month, BufferedInputStream>();
      jSONObject0.put("ho/UJ", (Map<?, ?>) hashMap0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ho/UJ";
      stringArray0[1] = "ho/UJ";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("1105.5956451518498");
      assertEquals((short)1105, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-2296.39730450681");
      assertEquals((short) (-2296), number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@0000000003.", (Collection<?>) linkedList0);
      JSONArray jSONArray0 = (JSONArray)jSONObject1.remove("java.lang.Long@0000000003.");
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Integer integer0 = new Integer(863);
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("org.json.JSONPointer");
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Integer integer0 = new Integer(44);
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      Object object0 = jSONObject0.optQuery("/[u!bNJ;korDK");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Number number0 = jSONObject0.optNumber("Vw'f*,", (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Number number0 = jSONObject0.optNumber("35.00", (Number) bigDecimal0);
      assertSame(bigDecimal0, number0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      BigDecimal bigDecimal0 = new BigDecimal(2147483645);
      jSONObject0.optNumber("Unable to increment [", (Number) bigDecimal0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject0.put("ho/UJ", (Object) bigDecimal0);
      Number number0 = jSONObject0.optNumber("ho/UJ");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("zWjbrAwJ!8s00sn", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("4%\"");
      long long0 = jSONObject1.optLong("4%\"");
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<DataInputStream, PipedReader> hashMap0 = new HashMap<DataInputStream, PipedReader>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      PipedReader pipedReader0 = new PipedReader();
      hashMap0.put(dataInputStream0, pipedReader0);
      jSONObject0.put("~1", (Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("~1");
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat("xlQO'U9@(u~8yZ", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getreadLong", (-303));
      float float0 = jSONObject0.optFloat("getreadLong", (float) 2385);
      assertEquals((-303.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)2);
      jSONObject0.accumulate("76..", short0);
      float float0 = jSONObject0.optFloat("76..");
      assertEquals(1, jSONObject0.length());
      assertEquals(2.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      JSONObject jSONObject0 = new JSONObject(locale0);
      jSONObject0.optDouble("yS7r", (-937.6904187997));
      assertEquals(14, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1000000);
      jSONObject0.put("{\"x\":\"hello\",\"y\":72\"z\":true,\"a\"-[],\"b\":{\"x\":{}}}", 2371);
      double double0 = jSONObject0.optDouble("{\"x\":\"hello\",\"y\":72\"z\":true,\"a\"-[],\"b\":{\"x\":{}}}");
      assertEquals(2371.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = jSONObject0.optBigInteger("", (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONObject0.optBigInteger("isE", bigInteger0);
      assertEquals((short) (-256), bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      String string0 = "I(pm-H:W\\uvdln<h7";
      BigInteger bigInteger1 = jSONObject0.optBigInteger(string0, bigInteger0);
      assertEquals((byte) (-1), bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal("11", (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal((-1453));
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("zi[", bigDecimal0);
      assertEquals((byte)83, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1000000);
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte) (-25);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("z*e&Pha%}X|", bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("java.", "P");
      jSONObject0.opt("java.");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<DataInputStream, PipedReader> hashMap0 = new HashMap<DataInputStream, PipedReader>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("+Yg8,kz", (Map<?, ?>) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("O`I=~?TbWSO");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<TrayIcon.MessageType, Resource.AuthenticationType> hashMap0 = new HashMap<TrayIcon.MessageType, Resource.AuthenticationType>();
      jSONObject0.put("ho/UJ", (Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.get("ho/UJ");
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(34);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 34, (-1348));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedList<SortOrder> linkedList0 = new LinkedList<SortOrder>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "java.io.StringWriter@0000000001");
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Desktop.Action, InputStreamReader> hashMap0 = new HashMap<Desktop.Action, InputStreamReader>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (double) 2385);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 3427);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("] could not convert to BigDecimal.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("org.json.JSONPointer$Builder");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, "-833.1709685170543");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-11), (byte)32);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("P", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name P, locale zh
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("`p_|zd:?wPhs7", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(linkedList0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-1804));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1804
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ".");
      MockFile mockFile0 = new MockFile("' and instead saw ''", "' and instead saw ''");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      jSONObject0.write((Writer) mockPrintWriter0, (-2162), (-2162));
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockFile mockFile0 = new MockFile("96)9.]%VJa}~", "] is not a JSONObject.");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0, (-397), 858);
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1000000);
      JSONObject jSONObject1 = jSONObject0.put("{\"x\":\"hello\",\"y\":72\"z\":true,\"a\"-[],\"b\":{\"x\":{}}}", 2371);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{\"x\":\"hello\",\"y\":72\"z\":true,\"a\"-[],\"b\":{\"x\":{}}}", true);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      Writer writer0 = jSONObject1.write((Writer) outputStreamWriter0, 34, 34);
      assertSame(writer0, outputStreamWriter0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(44);
      JSONObject jSONObject0 = new JSONObject("{\"] not found.\":\"a string\",\"Illegal escape.\":-99,\"] is not a Boolean.\":null,\"getDeclaringClass\":true}");
      Writer writer0 = jSONObject0.write((Writer) stringWriter0, 44, 44);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\f", true);
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockFileOutputStream0);
      assertNotNull(jSONObject0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Object object0 = JSONObject.wrap(locale0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Integer integer0 = new Integer(48);
      Object object0 = JSONObject.wrap(integer0);
      assertEquals(48, object0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Byte byte0 = new Byte((byte)41);
      Object object0 = JSONObject.wrap(byte0);
      assertEquals((byte)41, object0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = JSONObject.wrap("] is not an int.");
      assertEquals("] is not an int.", object0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      Object object0 = JSONObject.wrap(roundingMode0);
      assertSame(roundingMode0, object0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Double double0 = new Double(79);
      JSONObject.testValidity(double0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-99");
      assertEquals((-99), object0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("null");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("false");
      Object object1 = JSONObject.wrap(object0);
      assertEquals(false, object1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("true");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "java.lang.Long@00000000050");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Writer writer0 = JSONObject.quote("F:54tmv__/?6b%Z", (Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockFile mockFile0 = new MockFile("kc>f");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      String string0 = "\\u";
      Writer writer0 = JSONObject.quote(string0, (Writer) mockFileWriter0);
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Bad value from toJSONString: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Writer writer0 = JSONObject.quote("{\"x\":\"hello\",\"y\":72\"z\":true,\"a\"-[],\"b\":{\"x\":{}}}", (Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{\"x\":\"hello\",\"y\":72\"z\":true,\"a\"-[],\"b\":{\"x\":{}}}", true);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      Writer writer0 = JSONObject.quote((String) null, (Writer) outputStreamWriter0);
      assertSame(outputStreamWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("IeAKZ*]JC4VS[a{$", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"Expected a ',' or ']'\":[],\"] not found.\":\"a string\",\"Illegal escape.\":99,\"] is not a Boolean.\":99}");
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) "{\"Expected a ',' or ']'\":[],\"] not found.\":\"a string\",\"Illegal escape.\":99,\"] is not a Boolean.\":99}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("java.io.StringWriter@0000000003", (-1020));
      String string0 = jSONObject0.optString("java.io.StringWriter@0000000003", "java.io.StringWriter@0000000003");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Proxy.Type, Authenticator.RequestorType> hashMap0 = new HashMap<Proxy.Type, Authenticator.RequestorType>(1557);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = jSONObject0.optString("org.json.JSONObject", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(34);
      long long0 = jSONObject0.optLong(";EeWNAj1/8i}njZaYG?", (long) 34);
      assertEquals(34L, long0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("1", "1");
      int int0 = jSONObject0.optInt("1", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("{\"islength\":null,\"] not found.\":null}", (-1568));
      assertEquals((-1568), int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("P?!pU=o&0uCWQC", 2371);
      JSONObject jSONObject1 = jSONObject0.accumulate("P?!pU=o&0uCWQC", "'");
      float float0 = jSONObject1.optFloat("P?!pU=o&0uCWQC", (float) 857L);
      assertEquals(857.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<DataInputStream, PipedReader> hashMap0 = new HashMap<DataInputStream, PipedReader>();
      JSONObject jSONObject1 = jSONObject0.put("i>HLK@vjZ2T{j", (Map<?, ?>) hashMap0);
      double double0 = jSONObject1.optDouble("i>HLK@vjZ2T{j", Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("islongValue", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Integer integer0 = new Integer((-2162));
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      boolean boolean0 = jSONObject0.optBoolean("Lqjka", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<DataInputStream, PipedReader> hashMap0 = new HashMap<DataInputStream, PipedReader>();
      JSONObject jSONObject1 = jSONObject0.put("i>HLK@vjZ2T{j", (Map<?, ?>) hashMap0);
      Class<Proxy.Type> class0 = Proxy.Type.class;
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      Proxy.Type proxy_Type1 = jSONObject1.optEnum(class0, "i>HLK@vjZ2T{j", proxy_Type0);
      assertSame(proxy_Type0, proxy_Type1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Proxy.Type, Authenticator.RequestorType> hashMap0 = new HashMap<Proxy.Type, Authenticator.RequestorType>();
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Class<Proxy.Type> class0 = Proxy.Type.class;
      Proxy.Type proxy_Type1 = jSONObject0.optEnum(class0, "bIZ58~8:?Iq\".N<&", proxy_Type0);
      assertEquals(Proxy.Type.DIRECT, proxy_Type1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("java.");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      String string0 = JSONObject.numberToString(bigInteger0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<StandardProtocolFamily, MockFileOutputStream> hashMap0 = new HashMap<StandardProtocolFamily, MockFileOutputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("\r", false);
      Object object0 = jSONObject0.get("\r");
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<StandardProtocolFamily, MockFileOutputStream> hashMap0 = new HashMap<StandardProtocolFamily, MockFileOutputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.get("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Proxy.Type, Authenticator.RequestorType> hashMap0 = new HashMap<Proxy.Type, Authenticator.RequestorType>();
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      hashMap0.put(proxy_Type0, (Authenticator.RequestorType) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<StringReader, PushbackReader> hashMap0 = new HashMap<StringReader, PushbackReader>();
      hashMap0.put((StringReader) null, (PushbackReader) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Month> class0 = Month.class;
      jSONObject0.optEnum(class0, (String) null);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query(jSONPointer0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Byte byte0 = new Byte((byte)57);
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      Set<String> set0 = jSONObject0.keySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Integer integer0 = new Integer(2);
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("java.lang.Float@0000000001", integer0);
      Map<String, Object> map0 = jSONObject1.toMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1000000);
      JSONObject jSONObject1 = jSONObject0.put("{\"x\":\"hello\",\"y\":72\"z\":true,\"a\"-[],\"b\":{\"x\":{}}}", 2371);
      Map<String, Object> map0 = jSONObject1.toMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject(34);
      JSONObject jSONObject1 = jSONObject0.put("null", (Map<?, ?>) hashMap0);
      Map<String, Object> map0 = jSONObject1.toMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOnce("0", "0");
      jSONObject0.toString(48);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<DataInputStream, PipedReader> hashMap0 = new HashMap<DataInputStream, PipedReader>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("+Yg8,kz", (Map<?, ?>) hashMap0);
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MockFile mockFile0 = new MockFile("] could not be converted to BigInteger.", "] could not be converted to BigInteger.");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Writer writer0 = JSONObject.writeValue(mockPrintWriter0, (Object) null, (-1020), 48);
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MathContext mathContext0 = new MathContext(2936);
      BigDecimal bigDecimal0 = new BigDecimal((-99L), mathContext0);
      BigDecimal bigDecimal1 = (BigDecimal)JSONObject.wrap(bigDecimal0);
      assertEquals((short) (-99), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = (BigInteger)JSONObject.wrap(bigInteger0);
      assertEquals((byte)1, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Double double0 = new Double(199.77952);
      Object object0 = JSONObject.wrap(double0);
      assertEquals(199.77952, object0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Float float0 = new Float((float) 10);
      Object object0 = JSONObject.wrap(float0);
      assertEquals(10.0F, object0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Long long0 = new Long((-1L));
      Object object0 = JSONObject.wrap(long0);
      assertEquals((-1L), object0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0, 103, 103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Short short0 = new Short((short)37);
      Object object0 = JSONObject.wrap(short0);
      assertEquals((short)37, object0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(92);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("35.0", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("48.0");
      assertEquals(48.0, object0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("XoFa4\"K&F?>sV8@n");
      assertEquals("XoFa4\"K&F?>sV8@n", object0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"islength\":null,\"] not found.\":false,\"Illegal escape.\":-99}");
      boolean boolean0 = jSONObject0.isEmpty();
      assertFalse(boolean0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("0");
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("0.47587043761880776");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-2203.6873061");
      assertEquals((-2203.6873061), number0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      try { 
        JSONObject.stringToNumber(".");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [.] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("r< E");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("6ebnaX6");
      assertEquals("6ebnaX6", object0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<DataInputStream, PipedReader> hashMap0 = new HashMap<DataInputStream, PipedReader>();
      jSONObject0.put("i>HLK@vjZ2T{j", (Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.put("i>HLK@vjZ2T{j", true);
      boolean boolean0 = jSONObject1.similar(jSONObject0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(92);
      JSONObject jSONObject1 = jSONObject0.put("b:%|", false);
      boolean boolean0 = jSONObject1.similar(jSONObject0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(pipedOutputStream0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.putOpt("ho/UJ", bigDecimal0);
      boolean boolean0 = jSONObject1.similar(jSONObject0);
      assertEquals(1, jSONObject1.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(14);
      boolean boolean0 = jSONObject0.similar("3a");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getFloat("EAjP5\u0004DxT^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("sh", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("XoFa4\"K&F?>sV8@n", (-2353.3777));
      try { 
        jSONObject1.putOnce("XoFa4\"K&F?>sV8@n", "XoFa4\"K&F?>sV8@n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"XoFa4\"K&F?>sV8@n\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HashMap<DataInputStream, PipedReader> hashMap0 = new HashMap<DataInputStream, PipedReader>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOnce("to", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Mq,uR`Y-9+OC", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("] not a string.");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      jSONObject1.write((Writer) mockPrintWriter0, (-650), 10);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("i>HLK@vjZf2T{j", (Object) "i>HLK@vjZf2T{j");
      Number number0 = jSONObject0.optNumber("i>HLK@vjZf2T{j");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(48);
      jSONObject0.put("java.io.StringWriter@0000000002", (-1020));
      Number number0 = jSONObject0.optNumber("java.io.StringWriter@0000000002", (Number) integer0);
      assertEquals((-1020), number0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Unable to increment [", false);
      BigDecimal bigDecimal0 = new BigDecimal(852);
      Number number0 = jSONObject0.optNumber("Unable to increment [", (Number) bigDecimal0);
      assertEquals((short)852, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2385);
      JSONObject jSONObject1 = jSONObject0.put("42", 2385);
      long long0 = jSONObject1.optLong("42", (-3101L));
      assertEquals(2385L, long0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Unable to increment [", false);
      long long0 = jSONObject0.optLong("Unable to increment [", (-3086L));
      assertEquals((-3086L), long0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(34);
      HashMap<DataInputStream, PipedReader> hashMap0 = new HashMap<DataInputStream, PipedReader>();
      jSONObject0.put("?QciUv5", (Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("?QciUv5");
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("Uommoulq+D");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("i>HLK@vjZ2T{j", (Object) "i>HLK@vjZ2T{j");
      int int0 = jSONObject1.optInt("i>HLK@vjZ2T{j");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((int) (byte)0);
      JSONObject jSONObject1 = jSONObject0.increment("0,X");
      int int0 = jSONObject1.optInt("0,X", (int) (byte)0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("P?!pU=o&0uCWQC", "'");
      float float0 = jSONObject1.optFloat("P?!pU=o&0uCWQC", (float) 857L);
      assertEquals(1, jSONObject0.length());
      assertEquals(857.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("java.", 149);
      double double0 = jSONObject1.optDouble("java.", (double) 149);
      assertEquals(149.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("35.0", bigInteger0);
      assertEquals((short)1, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<DataInputStream, PipedReader> hashMap0 = new HashMap<DataInputStream, PipedReader>();
      jSONObject0.put("i>HLK@vjZ2T{j", (Map<?, ?>) hashMap0);
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONObject0.optBigInteger("i>HLK@vjZ2T{j", bigInteger0);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject0.increment("ho/UJ");
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("ho/UJ", bigDecimal0);
      assertEquals((byte)1, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal(57);
      jSONObject0.put("!y", 99L);
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("!y", bigDecimal0);
      assertEquals((short)99, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("nUm,a|zbra?", bigDecimal0);
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      HashMap<Month, BufferedInputStream> hashMap0 = new HashMap<Month, BufferedInputStream>();
      jSONObject0.put("ho/UJ", (Map<?, ?>) hashMap0);
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("ho/UJ", bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1000000);
      jSONObject0.put("{\"x\":\"hello\",\"y\":72\"z\":true,\"a\"-[],\"b\":{\"x\":{}}}", true);
      boolean boolean0 = jSONObject0.optBoolean("{\"x\":\"hello\",\"y\":72\"z\":true,\"a\"-[],\"b\":{\"x\":{}}}");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(1204);
      JSONObject jSONObject1 = new JSONObject((Object) "] could not convert to BigDecimal.");
      Float float0 = new Float(116.44F);
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      JSONObject jSONObject0 = new JSONObject(locale0);
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(14, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(14, jSONObject0.length());
      assertNotNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1000000);
      JSONObject jSONObject1 = jSONObject0.put("{\"x\":\"hello\",\"y\":72\"z\":true,\"a\"-[],\"b\":{\"x\":{}}}", 2371);
      JSONObject jSONObject2 = jSONObject1.increment("{\"x\":\"hello\",\"y\":72\"z\":true,\"a\"-[],\"b\":{\"x\":{}}}");
      assertEquals(1, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("ho/UJ");
      String string0 = jSONObject1.optString("ho/UJ");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HashMap<DataInputStream, PipedReader> hashMap0 = new HashMap<DataInputStream, PipedReader>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("+Yg8,kz", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.increment("+Yg8,kz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000008].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("isEmpty", (Object) "isEmpty");
      boolean boolean0 = jSONObject0.has("isEmpty");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3590);
      boolean boolean0 = jSONObject0.has("null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("i>HLK@vjZf2T{j", (Object) "i>HLK@vjZf2T{j");
      String string0 = jSONObject0.getString("i>HLK@vjZf2T{j");
      assertEquals("i>HLK@vjZf2T{j", string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("na", 153);
      try { 
        jSONObject1.getString("na");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(34);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Integer integer0 = new Integer(160);
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray1);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"null\":null,\"] not found.\":\"a string\",\"Illegal escape.\":-99,\"] is not a Boolean.\":null}");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      JSONObject jSONObject0 = new JSONObject(locale0);
      jSONObject0.put("K6[Yc6k[n3Pt+-A9yn", 128);
      long long0 = jSONObject0.getLong("K6[Yc6k[n3Pt+-A9yn");
      assertEquals(15, jSONObject0.length());
      assertEquals(128L, long0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      HashMap<DataInputStream, PipedReader> hashMap0 = new HashMap<DataInputStream, PipedReader>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("O!6M7/irJG0SA", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.getJSONArray("O!6M7/irJG0SA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      HashMap<SocketFlow.Status, PipedReader> hashMap0 = new HashMap<SocketFlow.Status, PipedReader>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("K[Yc6k[n3Pt+-A9yn", 34);
      int int0 = jSONObject1.getInt("K[Yc6k[n3Pt+-A9yn");
      assertEquals(34, int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getreadLong", 2371);
      Number number0 = jSONObject0.getNumber("getreadLong");
      assertEquals(2371, number0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      HashMap<StandardProtocolFamily, MockFileOutputStream> hashMap0 = new HashMap<StandardProtocolFamily, MockFileOutputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("\r", false);
      try { 
        jSONObject0.getNumber("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getreadLong", 2385);
      float float0 = jSONObject1.getFloat("getreadLong");
      assertEquals(2385.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      HashMap<DataInputStream, PipedReader> hashMap0 = new HashMap<DataInputStream, PipedReader>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("+Yg8,kz", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getFloat("+Yg8,kz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", 1334.7);
      assertEquals(1, jSONObject0.length());
      
      double double0 = jSONObject0.getDouble("");
      assertEquals(1334.7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<TrayIcon.MessageType, Resource.AuthenticationType> hashMap0 = new HashMap<TrayIcon.MessageType, Resource.AuthenticationType>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      HashMap<DataInputStream, PipedReader> hashMap0 = new HashMap<DataInputStream, PipedReader>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("+Yg8,kz", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getBigDecimal("+Yg8,kz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("\"}@]n", "getUnicodeLocaleKeys");
      boolean boolean0 = jSONObject0.optBoolean("\"}@]n", true);
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<DataInputStream, PipedReader> hashMap0 = new HashMap<DataInputStream, PipedReader>();
      jSONObject0.put("i>HLK@vjZ2T{j", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getBoolean("i>HLK@vjZ2T{j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-2203.6873061));
      assertEquals("-2203.6873061", string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      HashMap<DataInputStream, PipedReader> hashMap0 = new HashMap<DataInputStream, PipedReader>();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      hashMap0.put((DataInputStream) null, pipedReader0);
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put("O!6M7/irJG0SA", (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.SERVER;
      HashMap<Proxy.Type, Authenticator.RequestorType> hashMap0 = new HashMap<Proxy.Type, Authenticator.RequestorType>();
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      hashMap0.put(proxy_Type0, authenticator_RequestorType0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"x\":\"hello\",\"y\":72\"z\":true,\"a\"-[],\"b\":{\"x\":{}}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at 20 [character 21 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"fruit\":\"Apple\",\"\"\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":[{}],\"number\":\"1\"}");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 20 [character 21 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("Gs6e4/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":[],\"number\":\"1\"}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      jSONObject0.remove("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":[],\"number\":\"1\"}");
      assertEquals(6, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(44);
      JSONObject jSONObject0 = new JSONObject("{\"] not found.\":\"a string\",\"Illegal escape.\":-99,\"] is not a Boolean.\":null}");
      jSONObject0.write((Writer) stringWriter0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(11);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("readByt9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("isbyteValue");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<DataInputStream, PipedReader> hashMap0 = new HashMap<DataInputStream, PipedReader>();
      JSONObject jSONObject1 = jSONObject0.put("i>HLK@vjZ2T{j", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.append("i>HLK@vjZ2T{j", hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[i>HLK@vjZ2T{j] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("+Yg8,kz", (Collection<?>) null);
      try { 
        jSONObject1.getLong("+Yg8,kz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      try { 
        jSONObject0.getEnum(class0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((int) (byte)41);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query("");
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"Expected a ',' or ']'\":[null],\"] not found.\":\"a string\",\"Illegal escape.\":99,\"] is not a Boolean.\":null}");
      // Undeclared exception!
      try { 
        jSONObject0.query("{\"Expected a ',' or ']'\":[null],\"] not found.\":\"a string\",\"Illegal escape.\":99,\"] is not a Boolean.\":null}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 29L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("/kAUSz&", 596.03143F);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Integer integer0 = new Integer(164);
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      boolean boolean0 = jSONObject0.isNull("8FR$.hJ+#c");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] not found.\":\"a string\",\"Illegal escape.\":-99,\"] is not a Boolean.\":null,\"getDeclaringClass\":true}");
      long long0 = jSONObject0.optLong("java.io.StringWriter@0000000028");
      assertEquals(4, jSONObject0.length());
      assertEquals(0L, long0);
  }
}
