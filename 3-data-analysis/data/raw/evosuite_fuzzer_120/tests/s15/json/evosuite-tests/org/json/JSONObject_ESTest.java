/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 02:33:34 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.MultipleGradientPaint;
import java.awt.TrayIcon;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.security.CryptoPrimitive;
import java.security.KeyRep;
import java.sql.RowIdLifetime;
import java.util.Collection;
import java.util.Formatter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.annotation.Resource;
import javax.swing.JTable;
import javax.swing.LayoutStyle;
import javax.tools.DocumentationTool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("&}8%g|N,d|Eyh7iQ)");
      assertEquals("&}8%g|N,d|Eyh7iQ)", object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"getCountry\":99,\"getreadUnsignedShort\":{},\"-661..\":{\"getCountry\":null}}");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"x:\"h8llo,\"y\":7,\"z\":true,\"a\"~{},\"b\":{}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 6 [character 7 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.indent(charArrayWriter0, 0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1682);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      JSONObject jSONObject0 = new JSONObject(charBuffer0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("shortValueExact");
      JSONObject jSONObject1 = jSONObject0.putOpt("shortValueExact", mockFileOutputStream0);
      try { 
        jSONObject1.getBigInteger("shortValueExact");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<LayoutStyle.ComponentPlacement, MultipleGradientPaint.ColorSpaceType> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, MultipleGradientPaint.ColorSpaceType>();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("false");
      Writer writer0 = JSONObject.writeValue(mockPrintWriter0, hashMap0, 78, 78);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}");
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(4610.881276828031);
      JSONObject jSONObject1 = jSONObject0.append("javax.", double0);
      JSONArray jSONArray0 = (JSONArray)jSONObject1.remove("javax.");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = jSONObject0.query("");
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1682);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      JSONObject jSONObject0 = new JSONObject(charBuffer0);
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("toU", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(10);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Stepping back two steps is not supported", "7Sq-GWQ,Md~L*rl81K", "7Sq-GWQ,Md~L*rl81K");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<DocumentationTool.Location, Dialog.ModalExclusionType> hashMap0 = new HashMap<DocumentationTool.Location, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Number number0 = jSONObject0.optNumber("Tmuwn}=E.Ky4v_Dl", (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Number number0 = jSONObject0.optNumber((String) null, (Number) bigDecimal0);
      assertSame(bigDecimal0, number0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("", (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<LayoutStyle.ComponentPlacement, MultipleGradientPaint.ColorSpaceType> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, MultipleGradientPaint.ColorSpaceType>();
      LayoutStyle.ComponentPlacement layoutStyle_ComponentPlacement0 = LayoutStyle.ComponentPlacement.UNRELATED;
      MultipleGradientPaint.ColorSpaceType multipleGradientPaint_ColorSpaceType0 = MultipleGradientPaint.ColorSpaceType.SRGB;
      hashMap0.put(layoutStyle_ComponentPlacement0, multipleGradientPaint_ColorSpaceType0);
      jSONObject0.put("false", (Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("false");
      assertNotNull(jSONObject1);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt(">kM=SjIjY54", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      int int0 = jSONObject0.optInt("B/", (-1070));
      assertEquals((-1070), int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      float float0 = jSONObject0.optFloat((String) null, 10.0F);
      assertEquals(1, jSONObject0.length());
      assertEquals(10.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(locale0, stringArray0);
      float float0 = jSONObject0.optFloat("S8H%F'0^8G", (float) (-3230));
      assertEquals((-3230.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      Class<Thread.State> class0 = Thread.State.class;
      jSONObject0.optEnum(class0, (String) null, (Thread.State) null);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("iterator", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1682);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      JSONObject jSONObject0 = new JSONObject(charBuffer0);
      jSONObject0.put("&@Qv l=1h=7V", (float) 1682);
      double double0 = jSONObject0.optDouble("&@Qv l=1h=7V");
      assertEquals(1682.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = jSONObject0.optBigInteger("B.('W8<f gcEW", (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte) (-58);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONObject0.optBigInteger((String) null, bigInteger0);
      assertEquals((short) (-14848), bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte) (-128);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONObject0.optBigInteger((String) null, bigInteger0);
      assertEquals((short)128, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal("/iEM", (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal((-4146.0));
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("{\"value2\":\"a string\",\"size\":\"Large\",\"color\":\"str\",\"fruit\":\"getDeclaringClass\",\"number\":\"1\"}", bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal(713.3649758601);
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("2nwU}m,rAj.", bigDecimal0);
      assertEquals((short)713, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      Byte byte0 = new Byte((byte)106);
      jSONObject0.append("false", byte0);
      jSONObject0.opt("false");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1682);
      JSONObject jSONObject0 = new JSONObject(byteArrayOutputStream0);
      JSONObject jSONObject1 = jSONObject0.put("&whl'SR}{^OiHp", 0.0F);
      int int0 = jSONObject1.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<LayoutStyle.ComponentPlacement, MultipleGradientPaint.ColorSpaceType> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, MultipleGradientPaint.ColorSpaceType>();
      JSONObject jSONObject1 = jSONObject0.put("{\"A JSONObject text must end with '}'\":-99,\"JSON does not allow non-finite numbers.\":7,\"]\":\"a string\",\"index %d is out of bounds - the array has %d elements\":[false],\"] not found.\":{\"A JSONObject text must end with '}'\":null},\"getabs\":\"a string\",\"sh\":99}", (Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject1.isNull("{\"A JSONObject text must end with '}'\":-99,\"JSON does not allow non-finite numbers.\":7,\"]\":\"a string\",\"index %d is out of bounds - the array has %d elements\":[false],\"] not found.\":{\"A JSONObject text must end with '}'\":null},\"getabs\":\"a string\",\"sh\":99}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("Null pointer");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("istoString");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<LayoutStyle.ComponentPlacement, MultipleGradientPaint.ColorSpaceType> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, MultipleGradientPaint.ColorSpaceType>();
      LayoutStyle.ComponentPlacement layoutStyle_ComponentPlacement0 = LayoutStyle.ComponentPlacement.UNRELATED;
      MultipleGradientPaint.ColorSpaceType multipleGradientPaint_ColorSpaceType0 = MultipleGradientPaint.ColorSpaceType.SRGB;
      hashMap0.put(layoutStyle_ComponentPlacement0, multipleGradientPaint_ColorSpaceType0);
      JSONObject jSONObject1 = jSONObject0.put("{\"A JSONObject text must end with '}'\":-99,\"JSON does not allow non-finite numbers.\":7,\"]\":\"a string\",\"index %d is out of bounds - the array has %d elements\":[false],\"] not found.\":{\"A JSONObject text must end with '}'\":null},\"getabs\":\"a string\",\"sh\":99}", (Map<?, ?>) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("{\"A JSONObject text must end with '}'\":-99,\"JSON does not allow non-finite numbers.\":7,\"]\":\"a string\",\"index %d is out of bounds - the array has %d elements\":[false],\"] not found.\":{\"A JSONObject text must end with '}'\":null},\"getabs\":\"a string\",\"sh\":99}");
      assertEquals(1, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{\"value2\":\"a string\",\"size\":\"Large\",\"color\":\"str\",\"fruit\":\"getDeclaringClass\",\"number\":\"1\"}", 1628.6104910209351);
      double double0 = jSONObject1.getDouble("{\"value2\":\"a string\",\"size\":\"Large\",\"color\":\"str\",\"fruit\":\"getDeclaringClass\",\"number\":\"1\"}");
      assertEquals(1628.6104910209351, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("{\"value2\":\"a string\",\"'\":[-99],\"color\":\"iscompact\",\"pointer cannot be null\":-99,\"number\":\",:]}/\"[{;=#\"}", (-4331.0F));
      double double0 = jSONObject1.getDouble("{\"value2\":\"a string\",\"'\":[-99],\"color\":\"iscompact\",\"pointer cannot be null\":-99,\"number\":\",:]}/\"[{;=#\"}");
      assertEquals((-4331.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<LayoutStyle.ComponentPlacement, MultipleGradientPaint.ColorSpaceType> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, MultipleGradientPaint.ColorSpaceType>();
      JSONObject jSONObject1 = jSONObject0.put("{\"A JSONObject text must end with '}'\":-99,\"JSON does not allow non-finite numbers.\":7,\"]\":\"a string\",\"index %d is out of bounds - the array has %d elements\":[false],\"] not found.\":{},\"getget\":\"a string\",\"sh\":99}", (Map<?, ?>) hashMap0);
      Object object0 = jSONObject1.get("{\"A JSONObject text must end with '}'\":-99,\"JSON does not allow non-finite numbers.\":7,\"]\":\"a string\",\"index %d is out of bounds - the array has %d elements\":[false],\"] not found.\":{},\"getget\":\"a string\",\"sh\":99}");
      assertNotSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(10);
      JSONObject jSONObject1 = jSONObject0.accumulate("Stepping back two steps is not supported", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, jSONObject0, 8, (-1044));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "0.00");
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0, 65, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"isintValue\",\"' and instead saw '\":7,\"z\":true,\"a\":{},\"b\":{\"x\":{}}}");
      File file0 = MockFile.createTempFile("{\"x\":\"isintValue\",\"' and instead saw '\":7,\"z\":true,\"a\":{},\"b\":{\"x\":{}}}", "{\"x\":\"isintValue\",\"' and instead saw '\":7,\"z\":true,\"a\":{},\"b\":{\"x\":{}}}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      jSONObject0.write((Writer) mockPrintWriter0, 3447, 2425);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"isintValue\",\"' and instead saw '\":7,\"z\":true,\"a\":{},\"b\":{\"x\":{}}}");
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, (-2183), (-2183));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("Null pointer", "Null pointer");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      jSONObject1.append("org.json.JSONObject", dataOutputStream0);
      // Undeclared exception!
      jSONObject0.toString(5337);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote("s~u@1*S|N),N", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<LayoutStyle.ComponentPlacement, MultipleGradientPaint.ColorSpaceType> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, MultipleGradientPaint.ColorSpaceType>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 368L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-957.832F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 3186);
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0);
      JSONObject jSONObject0 = new JSONObject(pushbackReader0);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 105);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.indent(pipedWriter0, 1839);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<JTable.PrintMode, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<JTable.PrintMode, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getDouble("r'NFZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, jSONObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("!),>%n");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-787), (byte)98);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":{},\"b\":{}}");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Locale locale0 = Locale.US;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("index %d is out of bounds - the array has %d elements", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name index %d is out of bounds - the array has %d elements, locale en_US
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("z?e=a<1H", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-556));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -556
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1682);
      JSONObject jSONObject0 = new JSONObject(byteArrayOutputStream0);
      JSONObject jSONObject1 = jSONObject0.put("&whl'SR}{^OiHp", (double) 1682);
      jSONObject0.put("&@Qv l=1h=7V", 0.0F);
      jSONObject1.write((Writer) stringWriter0, (-108916131), 1682);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ha");
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0, 43, 43);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1682);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      JSONObject jSONObject0 = new JSONObject(charBuffer0);
      JSONObject jSONObject1 = jSONObject0.put("&whl'SR}{^OiHp", (-75.8918));
      MockFile mockFile0 = new MockFile("&@Qv l=1h=7V");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      Writer writer0 = jSONObject1.write((Writer) mockFileWriter0, 102, 1682);
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Charset charset0 = Charset.defaultCharset();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1682);
      jSONObject0.put("IR", (-75.8918));
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charsetEncoder0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0);
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0, (-2251), 102);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)111, 232);
      Object object0 = JSONObject.wrap(byteArrayInputStream0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<Double, StringWriter> hashMap0 = new HashMap<Double, StringWriter>();
      Collection<StringWriter> collection0 = hashMap0.values();
      Object object0 = JSONObject.wrap(collection0);
      JSONObject jSONObject0 = new JSONObject(object0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Character character0 = Character.valueOf('!');
      Object object0 = JSONObject.wrap(character0);
      assertEquals('!', object0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Byte byte0 = new Byte((byte)88);
      Object object0 = JSONObject.wrap(byte0);
      assertEquals((byte)88, object0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Object object0 = JSONObject.wrap("a");
      assertEquals("a", object0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Object object0 = JSONObject.wrap(locale_Category0);
      assertEquals(Locale.Category.FORMAT, object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Float float0 = new Float(319.8F);
      Object object0 = JSONObject.wrap(float0);
      assertEquals(319.8F, object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedList<BigInteger> linkedList0 = new LinkedList<BigInteger>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.put(60, Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"' and instead saw '\":7,\" line \":false,\"iskeySet\":{},\"b\":false}");
      JSONArray jSONArray0 = jSONObject0.names();
      jSONArray0.put(865L);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[4] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject.testValidity(float0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0");
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0[D00");
      assertEquals("0[D00", object0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0.00");
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("has");
      assertEquals("has", object0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("false");
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("true");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote(":J!V/rYC6p{Gz$", (Writer) stringWriter0);
      assertEquals("\":J!V/rYC6p{Gz$\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("M3R2$LY3|");
      Writer writer0 = JSONObject.quote("\"", (Writer) mockPrintWriter0);
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote("", (Writer) stringWriter0);
      assertEquals("\"\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("sX<UK&.t6) jW.7f~3P", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.quote((String) null, (Writer) charArrayWriter0);
      assertEquals(2, charArrayWriter0.size());
      assertEquals("\"\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(927);
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      JSONObject jSONObject1 = jSONObject0.put("getCountry", (Collection<?>) linkedList0);
      try { 
        jSONObject1.putOnce("getCountry", "getCountry");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"getCountry\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOnce("toString", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("hXr", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1682);
      JSONObject jSONObject0 = new JSONObject(byteArrayOutputStream0);
      JSONObject jSONObject1 = jSONObject0.put("&whl'SR}{^OiHp", (double) 1682);
      jSONObject1.optString("&whl'SR}{^OiHp", "#");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("qwTEMs%x", "{\"] is not an int.\":true,\"getshortValue\":[],\"b\":[],\"] is not a Boolean.\":true,\"\r\":\"a string\",\"java.lang.Float@0000000009.\":99}");
      Byte byte0 = new Byte((byte)9);
      Number number0 = jSONObject0.optNumber("qwTEMs%x", (Number) byte0);
      assertEquals((byte)9, number0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal((-99L));
      Number number0 = jSONObject0.optNumber("a JSON pointer should start with '/' or '#/'", (Number) bigDecimal0);
      assertEquals((short) (-99), number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1682);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      JSONObject jSONObject0 = new JSONObject(charBuffer0);
      jSONObject0.put("&@Qv l=1h=7V", (float) 1682);
      long long0 = jSONObject0.optLong("&@Qv l=1h=7V", 1835L);
      assertEquals(1682L, long0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("org.json.JSONException", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"isintValue\",\"' and instead saw '\":7,\"z\":true,\"a\":{},\"b\":{\"x\":{}}}");
      int int0 = jSONObject0.optInt("{\"x\":\"isintValue\",\"' and instead saw '\":7,\"z\":true,\"a\":{},\"b\":{\"x\":{}}}", 4);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "0.00");
      float float0 = jSONObject0.optFloat("0.00", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Locale locale0 = Locale.US;
      JSONObject jSONObject0 = new JSONObject(locale0);
      double double0 = jSONObject0.optDouble("\u82F1\u6587 (\u7F8E\u56FD)", 447.397599866737);
      assertEquals(447.397599866737, double0, 0.01);
      assertEquals(14, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "0.00");
      boolean boolean0 = jSONObject0.optBoolean("0.00", false);
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("M3R2$LY3|");
      JSONObject jSONObject1 = jSONObject0.append("{\"x\":{},\"to\":7,\"z\":true,\"a\":[],\"b\":{},\"getabs\":\"a string\"}", mockPrintWriter0);
      Class<RowIdLifetime> class0 = RowIdLifetime.class;
      RowIdLifetime rowIdLifetime0 = RowIdLifetime.ROWID_UNSUPPORTED;
      RowIdLifetime rowIdLifetime1 = jSONObject1.optEnum(class0, "{\"x\":{},\"to\":7,\"z\":true,\"a\":[],\"b\":{},\"getabs\":\"a string\"}", rowIdLifetime0);
      assertEquals(RowIdLifetime.ROWID_UNSUPPORTED, rowIdLifetime1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("cqEl&p{Cz&57*)1");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, Byte> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Integer integer0 = new Integer(44);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"' and instead saw '\":7,\" line \":false,\"] is not a number.\":{\"x\":{}},\"b\":false}");
      boolean boolean0 = jSONObject0.isEmpty();
      assertEquals(4, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<Double, StringWriter> hashMap0 = new HashMap<Double, StringWriter>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Class<MultipleGradientPaint.CycleMethod> class0 = MultipleGradientPaint.CycleMethod.class;
      jSONObject0.optEnum(class0, ";jx47");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "4Hl}#T+Jn");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query(jSONPointer0);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1682);
      JSONObject jSONObject0 = new JSONObject(byteArrayOutputStream0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("Hl2key=Nt!Q!&");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"isintValue\",\"' and instead saw '\":7,\" line \":true,\"a\":{},\"toU\":false}");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(5, map0.size());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "0.00");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("a(6", "a(6");
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<CharArrayReader, BigInteger> hashMap0 = new HashMap<CharArrayReader, BigInteger>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      JSONObject jSONObject1 = jSONObject0.putOpt("getBytes", locale_Category0);
      jSONObject1.toString(5337);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.writeValue(pipedWriter0, object0, (-781), 1825);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Object object0 = JSONObject.wrap(charset0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(791L);
      BigDecimal bigDecimal1 = (BigDecimal)JSONObject.wrap(bigDecimal0);
      assertEquals((short)791, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Object object0 = JSONObject.wrap(bigInteger0);
      assertSame(object0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(3900.0);
      linkedList0.add(double0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Long long0 = new Long(57);
      Object object0 = JSONObject.wrap(long0);
      assertEquals(57L, object0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Short short0 = new Short((short) (-255));
      Object object0 = JSONObject.wrap(short0);
      assertEquals((short) (-255), object0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "m3r2$ly:|");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      JSONObject.wrap(jSONArray0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<RoundingMode> linkedList0 = new LinkedList<RoundingMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"' and instead saw '\":7,\" line \":false,\"iskeySet\":{},\"b\":false}");
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(4, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      try { 
        jSONObject0.put("-0", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("0.00");
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-99");
      assertEquals((-99), number0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      try { 
        JSONObject.stringToNumber(" line ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [ line ] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-0");
      assertEquals(-0.0, object0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("1GkSrgFp='P>~e/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("Null pointer", "Null pointer");
      boolean boolean0 = jSONObject0.similar(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Character character0 = Character.valueOf('b');
      jSONObject0.putOpt("k*/*59*gVP;q0", character0);
      JSONObject jSONObject1 = new JSONObject(98);
      boolean boolean0 = jSONObject1.similar(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "0.00");
      boolean boolean0 = jSONObject0.similar("0.00");
      assertFalse(boolean0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Locale locale0 = Locale.US;
      JSONObject jSONObject0 = new JSONObject(locale0);
      try { 
        jSONObject0.getLong("\u82F1\u6587 (\u7F8E\u56FD)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":{},\"b\":{}}");
      try { 
        jSONObject0.get(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000033] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1682);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      JSONObject jSONObject0 = new JSONObject(charBuffer0);
      try { 
        jSONObject0.getBoolean("\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{\"size\":\"a string\",\"val [\":\"Red\",\"value2\":false,\"gettoByteArray\":\"1\",\"x\":99,\"xx\":false}");
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockPrintWriter0);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("signum", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-39));
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, byte0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append(" \r9U`Z^Cv']o", " \r9U`Z^Cv']o");
      String[] stringArray0 = new String[3];
      stringArray0[0] = " \r9U`Z^Cv']o";
      stringArray0[2] = " \r9U`Z^Cv']o";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      assertEquals(1, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      JSONObject jSONObject0 = new JSONObject(charset0);
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, charset0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(34);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("^:m", true);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "]U9u`/xK{^");
      jSONObject0.put("]U9u`/xK{^", false);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("/iEM", (Object) hashMap0);
      String string0 = jSONObject0.optString("/iEM");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject jSONObject1 = jSONObject0.putOnce("R+!7E?v4Ou~EK Q99", "R+!7E?v4Ou~EK Q99");
      jSONObject1.optNumber("R+!7E?v4Ou~EK Q99", (Number) bigInteger0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("qwTEMs%x", 828.1889F);
      Byte byte0 = new Byte((byte)9);
      Number number0 = jSONObject0.optNumber("qwTEMs%x", (Number) byte0);
      assertEquals(828.1889F, number0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<LayoutStyle.ComponentPlacement, MultipleGradientPaint.ColorSpaceType> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, MultipleGradientPaint.ColorSpaceType>();
      jSONObject0.put("{\"A JSONObject text must end with '}'\":99,\"cle\":7,\"]\":\"a string\",\"index %d is out of bounds - the array has %d elements\":[false],\"] not found.\":{\"A JSONObject text must end with '}'\":null},\"getabs\":\"a string\",\"sh\":99}", (Map<?, ?>) hashMap0);
      Number number0 = jSONObject0.optNumber("{\"A JSONObject text must end with '}'\":99,\"cle\":7,\"]\":\"a string\",\"index %d is out of bounds - the array has %d elements\":[false],\"] not found.\":{\"A JSONObject text must end with '}'\":null},\"getabs\":\"a string\",\"sh\":99}");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("Null pointer", "Null pointer");
      long long0 = jSONObject1.optLong("Null pointer", 99L);
      assertEquals(1, jSONObject0.length());
      assertEquals(99L, long0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1682);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      JSONObject jSONObject0 = new JSONObject(charBuffer0);
      JSONObject jSONObject1 = jSONObject0.put("&whl'SR}{^OiHp", (-75.8918));
      long long0 = jSONObject1.optLong("&whl'SR}{^OiHp");
      assertEquals((-75L), long0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("^:m", "^:m");
      long long0 = jSONObject0.optLong("^:m", 1166L);
      assertEquals(1166L, long0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<LayoutStyle.ComponentPlacement, MultipleGradientPaint.ColorSpaceType> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, MultipleGradientPaint.ColorSpaceType>();
      jSONObject0.put("false", (Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("false");
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Float float0 = new Float((-5.01884969995583));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optJSONObject("99");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HashMap<KeyRep.Type, Float> hashMap0 = new HashMap<KeyRep.Type, Float>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("rea", fileSystemHandling0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("rea");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Locale locale0 = Locale.US;
      JSONObject jSONObject0 = new JSONObject(locale0);
      jSONObject0.optJSONArray("by");
      assertEquals(14, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("gz1vys=LOYl^~B1", "/iE\"");
      int int0 = jSONObject0.optInt("gz1vys=LOYl^~B1", 34);
      assertEquals(1, jSONObject0.length());
      assertEquals(34, int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1682);
      JSONObject jSONObject0 = new JSONObject(byteArrayOutputStream0);
      jSONObject0.put("&whl'SR}{^OiHp", (double) 1682);
      int int0 = jSONObject0.optInt("&whl'SR}{^OiHp", 88);
      assertEquals(1, jSONObject0.length());
      assertEquals(1682, int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HashMap<CharArrayReader, BigInteger> hashMap0 = new HashMap<CharArrayReader, BigInteger>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      JSONObject jSONObject1 = jSONObject0.putOpt("getBytes", locale_Category0);
      int int0 = jSONObject1.optInt("getBytes", 3824);
      assertEquals(1, jSONObject0.length());
      assertEquals(3824, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<LayoutStyle.ComponentPlacement, MultipleGradientPaint.ColorSpaceType> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, MultipleGradientPaint.ColorSpaceType>();
      jSONObject0.put("{\"] is not an int.\":true,\"z\":null,\"a\":[],\"false\":\"a string\",\"\r\":\"a string\",\"org.json.JSONException\":null}", (Map<?, ?>) hashMap0);
      float float0 = jSONObject0.optFloat("{\"] is not an int.\":true,\"z\":null,\"a\":[],\"false\":\"a string\",\"\r\":\"a string\",\"org.json.JSONException\":null}", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{\"x\":false,\"org.json.JSONObject\":\"a string\"}", (double) '#');
      float float0 = jSONObject1.optFloat("{\"x\":false,\"org.json.JSONObject\":\"a string\"}");
      assertEquals(35.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"isintValue\",\"' and instead saw '\":7,\" line \":true,\"a\":{},\"b\":false}");
      JSONObject jSONObject1 = jSONObject0.accumulate("{\"x\":\"isintValue\",\"' and instead saw '\":7,\" line \":true,\"a\":{},\"b\":false}", "{\"x\":\"isintValue\",\"' and instead saw '\":7,\" line \":true,\"a\":{},\"b\":false}");
      float float0 = jSONObject1.optFloat("{\"x\":\"isintValue\",\"' and instead saw '\":7,\" line \":true,\"a\":{},\"b\":false}", 0.0F);
      assertEquals(6, jSONObject0.length());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Locale locale0 = Locale.US;
      JSONObject jSONObject0 = new JSONObject(locale0);
      jSONObject0.put("\u82F1\u6587 (\u7F8E\u56FD)", (-657.0F));
      double double0 = jSONObject0.optDouble("\u82F1\u6587 (\u7F8E\u56FD)", 447.397599866737);
      assertEquals(15, jSONObject0.length());
      assertEquals((-657.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("/iE\"", (Object) hashMap0);
      double double0 = jSONObject0.optDouble("/iE\"", (-1893.228513238184));
      assertEquals((-1893.228513238184), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(1.0);
      JSONObject jSONObject1 = jSONObject0.put("/iE\"", (Object) float0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject1.optBigInteger("/iE\"", bigInteger0);
      assertEquals((short)1, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("{\"value2\":\"a string\",\"gettoByteArray\":\"Large\",\"color\":\"str\",\"fruit\":\"getDeclaringClass\",\"number\":{}}", 1628.6104910209351);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("{\"value2\":\"a string\",\"gettoByteArray\":\"Large\",\"color\":\"str\",\"fruit\":\"getDeclaringClass\",\"number\":{}}", bigInteger0);
      assertEquals((byte)92, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("/iE\"", (Object) hashMap0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject1.optBigInteger("/iE\"", bigInteger0);
      assertEquals((short)0, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HashMap<CharArrayReader, BigInteger> hashMap0 = new HashMap<CharArrayReader, BigInteger>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("Dgtw", (float) 96);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("Dgtw", bigDecimal0);
      assertEquals((byte)96, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{\"fruit\":\"Apple\",\"size\":\"a string\",\"color\":\"Red\",\"value2\":false,\"number\":\"\"}");
      JSONObject jSONObject0 = new JSONObject(mockPrintWriter0);
      jSONObject0.put("str", (double) 0);
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      jSONObject0.optBigDecimal("str", bigDecimal0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      HashMap<KeyRep.Type, Float> hashMap0 = new HashMap<KeyRep.Type, Float>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("rea", fileSystemHandling0);
      BigDecimal bigDecimal0 = new BigDecimal(7L);
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("rea", bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("/iE\"", (Object) hashMap0);
      Class<JTable.PrintMode> class0 = JTable.PrintMode.class;
      try { 
        jSONObject1.getEnum(class0, "/iE\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000006] is not an enum of type java.io.StringWriter@0000000007.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      Charset charset0 = Charset.defaultCharset();
      JSONObject jSONObject1 = new JSONObject(charset0);
      jSONObject0.put("] is not a Boolean.", (-75.8918));
      jSONObject0.put("&@Qv l=1h=7V", (float) 3998);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0, 1682, 102);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("{\"value2\":\"a string\",\"'\":null,\"isNaN\":\"iscompact\",\"pointer cannot be null\":-99,\"number\":\",:]}/\"[{;=#\",\"isdescendingIterator\":\"a string\"}", (-0.15273178153764502));
      JSONObject jSONObject2 = jSONObject1.increment("{\"value2\":\"a string\",\"'\":null,\"isNaN\":\"iscompact\",\"pointer cannot be null\":-99,\"number\":\",:]}/\"[{;=#\",\"isdescendingIterator\":\"a string\"}");
      assertSame(jSONObject0, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("/iE\"", (Object) hashMap0);
      try { 
        jSONObject0.increment("/iE\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000005].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("/iE\"", (Object) hashMap0);
      boolean boolean0 = jSONObject0.has("/iE\"");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has(">%Jw}4;T@B+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<LayoutStyle.ComponentPlacement, MultipleGradientPaint.ColorSpaceType> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, MultipleGradientPaint.ColorSpaceType>();
      jSONObject0.put("false", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getString("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("] is not a JSONObject.");
      String[] stringArray0 = JSONObject.getNames((Object) mockFileOutputStream0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7.<NaA0}`o;I5HS");
      JSONObject jSONObject0 = new JSONObject(stringReader0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Float float0 = new Float((-5.01884969995583));
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("token cannot be null", 1013.68F);
      long long0 = jSONObject0.getLong("token cannot be null");
      assertEquals(1013L, long0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append(" \r9U`Z^Cv'F]o", " \r9U`Z^Cv'F]o");
      try { 
        jSONObject1.getLong(" \r9U`Z^Cv'F]o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<LayoutStyle.ComponentPlacement, MultipleGradientPaint.ColorSpaceType> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, MultipleGradientPaint.ColorSpaceType>();
      JSONObject jSONObject1 = jSONObject0.put("{\"A JSONObject text must end with '}'\":99,\"cle\":7,\"]\":\"a string\",\"index %d is out of bounds - the array has %d elements\":[false],\"] not found.\":{\"A JSONObject text must end with '}'\":null},\"getabs\":\"a string\",\"sh\":99}", (Map<?, ?>) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("{\"A JSONObject text must end with '}'\":99,\"cle\":7,\"]\":\"a string\",\"index %d is out of bounds - the array has %d elements\":[false],\"] not found.\":{\"A JSONObject text must end with '}'\":null},\"getabs\":\"a string\",\"sh\":99}");
      assertFalse(jSONObject2.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4Hl}#T+Jn");
      JSONObject jSONObject1 = jSONObject0.append("4Hl}#T+Jn", mockPrintWriter0);
      try { 
        jSONObject1.getJSONObject("4Hl}#T+Jn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      HashMap<KeyRep.Type, Float> hashMap0 = new HashMap<KeyRep.Type, Float>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("rea", hashMap0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("rea");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      HashMap<CharArrayReader, BigInteger> hashMap0 = new HashMap<CharArrayReader, BigInteger>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      JSONObject jSONObject1 = jSONObject0.putOpt("usxzr<at@e$I?'ZZ#", locale_Category0);
      try { 
        jSONObject1.getJSONArray("usxzr<at@e$I?'ZZ#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4Hl}#T+Jn");
      jSONObject0.append("4Hl}#T+Jn", mockPrintWriter0);
      try { 
        jSONObject0.getInt("4Hl}#T+Jn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("IR", (-75.8918));
      Number number0 = jSONObject0.getNumber("IR");
      assertEquals((-75.8918), number0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("/iE\"", (Object) hashMap0);
      try { 
        jSONObject1.getNumber("/iE\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000006] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("{\"value2\":\"a string\",\"'\":[-99],\"color\":\"iscompact\",\"pointer cannot be null\":-99,\"number\":\",:]}/\"[{;=#\"}", 0.0);
      assertEquals(1, jSONObject0.length());
      
      double double0 = jSONObject1.getDouble("{\"value2\":\"a string\",\"'\":[-99],\"color\":\"iscompact\",\"pointer cannot be null\":-99,\"number\":\",:]}/\"[{;=#\"}");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("1GkSrgFp='P>~e/", (Object) "1GkSrgFp='P>~e/");
      try { 
        jSONObject0.getBigDecimal("1GkSrgFp='P>~e/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<LayoutStyle.ComponentPlacement, MultipleGradientPaint.ColorSpaceType> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, MultipleGradientPaint.ColorSpaceType>();
      JSONObject jSONObject1 = jSONObject0.put("Null pointer", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.getBoolean("Null pointer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("Null pointer", "Null pointer");
      boolean boolean0 = jSONObject1.optBoolean("Null pointer", true);
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      HashMap<KeyRep.Type, Float> hashMap0 = new HashMap<KeyRep.Type, Float>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("rea", hashMap0);
      try { 
        jSONObject0.getFloat("rea");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getNumber((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1543.4361);
      assertEquals("1543.4361", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-22654515));
      assertEquals("-2.2654515E7", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4Hl}#T+Jn");
      jSONObject0.append("4Hl}#T+Jn", mockPrintWriter0);
      jSONObject0.append("4Hl}#T+Jn", "4Hl}#T+Jn");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<LayoutStyle.ComponentPlacement, MultipleGradientPaint.ColorSpaceType> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, MultipleGradientPaint.ColorSpaceType>();
      jSONObject0.put("{\"] is not an int.\":true,\"z\":true,\"a\":[],\"b\":{\"] is not an int.\":99},\"getabs\":\"a string\",\"\r\":\"a string\",\"x\":99}", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.append("{\"] is not an int.\":true,\"z\":true,\"a\":[],\"b\":{\"] is not an int.\":99},\"getabs\":\"a string\",\"\r\":\"a string\",\"x\":99}", "M3R2$LY3|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[{\"] is not an int.\":true,\"z\":true,\"a\":[],\"b\":{\"] is not an int.\":99},\"getabs\":\"a string\",\"\r\":\"a string\",\"x\":99}] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4Hl}#T+Jn");
      jSONObject0.append("4Hl}#T+Jn", mockPrintWriter0);
      MockFile mockFile0 = new MockFile("getClass");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      jSONObject0.accumulate("4Hl}#T+Jn", mockFileOutputStream0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("/iE\"", (Object) hashMap0);
      jSONObject1.accumulate("/iE\"", "eyet");
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      HashMap<Component.BaselineResizeBehavior, TrayIcon.MessageType> hashMap0 = new HashMap<Component.BaselineResizeBehavior, TrayIcon.MessageType>();
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = Component.BaselineResizeBehavior.CONSTANT_ASCENT;
      hashMap0.put(component_BaselineResizeBehavior0, (TrayIcon.MessageType) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>(1431);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      hashMap0.put((String) null, locale_FilteringMode0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      hashMap0.put("\"", locale_FilteringMode0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"x\":\"isintValuem,\"' and instead saw '\":7,\"z\":true,\"a\":{},\"b\":{\"x\":{}}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at 20 [character 21 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{N\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 3 [character 4 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"compact\":0.0}");
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.wrap(object0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "0.00");
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"Bad value from toJSONString: \":\"hello\",\"y\":7,\"z\":true,\"a\":{}}");
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("{\"Bad value from toJSONString: \":\"hello\",\"y\":7,\"z\":true,\"a\":{}}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.query("/iE\"");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":false}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"getUnicodeLocaleKeys\":45,\"x\":false}");
      jSONObject0.put("{\"getUnicodeLocaleKeys\":45,\"x\":false}", (-790L));
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("java.io.StringWriter@0000000002");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      HashMap<Resource.AuthenticationType, Object> hashMap0 = new HashMap<Resource.AuthenticationType, Object>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.put("{ry9})h+,VR", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "getBytes");
      boolean boolean0 = jSONObject0.isNull("getBytes");
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Locale locale0 = Locale.US;
      JSONObject jSONObject0 = new JSONObject(locale0);
      Set<String> set0 = jSONObject0.keySet();
      assertEquals(14, set0.size());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("wXRb<xd<t1");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Unable to write JSONArray value at index: ", (-10));
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "0.00");
      String string0 = jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
      assertNotNull(string0);
  }
}
