/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 02:43:08 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Dialog;
import java.awt.GraphicsDevice;
import java.awt.MultipleGradientPaint;
import java.awt.TrayIcon;
import java.awt.Window;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.Proxy;
import java.net.StandardProtocolFamily;
import java.sql.JDBCType;
import java.sql.RowIdLifetime;
import java.text.Normalizer;
import java.time.Month;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.jws.WebParam;
import javax.smartcardio.CardTerminals;
import javax.swing.DropMode;
import javax.swing.JTable;
import javax.tools.DocumentationTool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1175, 1175);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      jSONArray1.put((long) 1175);
      try { 
        jSONArray0.toJSONObject(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray1.put(2, (long) (byte) (-1));
      boolean boolean0 = jSONArray0.similar(jSONArray2);
      assertEquals(3, jSONArray1.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<Normalizer.Form> linkedList0 = new LinkedList<Normalizer.Form>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Object object0 = jSONArray0.remove(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put((Object) linkedList0);
      try { 
        jSONArray1.getBigInteger(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] could not convert to BigInteger.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1175, 1175);
      try { 
        jSONArray1.getBigDecimal(1150);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1150] could not convert to BigDecimal.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      jSONArray0.write((Writer) stringWriter0);
      assertEquals("[]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<Object> list0 = jSONArray0.toList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1175, 1175);
      jSONArray0.remove(1042);
      assertEquals(1175, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<DocumentationTool.Location> linkedList0 = new LinkedList<DocumentationTool.Location>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList1);
      JSONArray jSONArray1 = (JSONArray)jSONArray0.query(jSONPointer0);
      assertEquals(0, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      String string0 = jSONArray0.optString(1290, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Dialog.ModalityType, Float> hashMap0 = new HashMap<Dialog.ModalityType, Float>();
      jSONArray0.put(1966, (Map<?, ?>) hashMap0);
      String string0 = jSONArray0.optString(1966);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONPointer jSONPointer0 = new JSONPointer("");
      Object object0 = jSONArray0.optQuery(jSONPointer0);
      assertSame(object0, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal((-1633));
      Number number0 = jSONArray0.optNumber((-1633), (Number) bigDecimal0);
      assertEquals((byte) (-97), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Number number0 = jSONArray0.optNumber(0, (Number) bigDecimal0);
      assertEquals((short)1, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(1120, (-313L));
      long long0 = jSONArray0.optLong(1120, (long) 1120);
      assertEquals(1121, jSONArray0.length());
      assertEquals((-313L), long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1175, 1175);
      long long0 = jSONArray0.optLong(1175);
      assertEquals(1175L, long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0, (-2706L));
      long long0 = jSONArray0.optLong(0);
      assertEquals(1, jSONArray0.length());
      assertEquals((-2706L), long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.MODELESS;
      linkedList0.add(dialog_ModalityType0);
      jSONArray0.put(44, (Collection<?>) linkedList0);
      jSONArray0.optJSONArray(44);
      assertEquals(45, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1175, 1175);
      int int0 = jSONArray0.optInt(1175);
      assertEquals(1175, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      float float0 = jSONArray0.optFloat(91, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1175, 1175);
      float float0 = jSONArray0.optFloat(1175);
      assertEquals(1175.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0, (-2706L));
      float float0 = jSONArray0.optFloat(0);
      assertEquals(1, jSONArray0.length());
      assertEquals((-2706.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1175, 1175);
      double double0 = jSONArray1.optDouble(1175);
      assertEquals(1175.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = new Long((-2349L));
      JSONArray jSONArray1 = jSONArray0.put(0, (Object) long0);
      double double0 = jSONArray1.optDouble(0);
      assertEquals((-2349.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.optBoolean((-1633), true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONArray0.optBigInteger(0, bigInteger0);
      assertEquals((byte)0, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-122);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONArray0.optBigInteger(0, bigInteger0);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = jSONArray0.optBigDecimal(9977, (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(1875, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1, 1);
      int int0 = jSONArray1.length();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1175, 1175);
      boolean boolean0 = jSONArray0.isNull(1175);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(905L);
      long long0 = jSONArray0.getLong(0);
      assertEquals(905L, long0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1, 1);
      int int0 = jSONArray0.getInt(1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1139, (double) 0L);
      assertEquals(1140, jSONArray0.length());
      
      float float0 = jSONArray0.getFloat(1139);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      double double0 = jSONArray1.getDouble(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Long, Desktop.Action> hashMap0 = new HashMap<Long, Desktop.Action>();
      JSONArray jSONArray1 = jSONArray0.put(1875, (Map<?, ?>) hashMap0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Oq}a8dqJ< c2L~xV*!");
      // Undeclared exception!
      jSONArray1.write((Writer) mockPrintWriter0, 1875, (-460));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null, 1851, 1851);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1175, 1175);
      // Undeclared exception!
      jSONArray0.toString(1175);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2661, 91);
      // Undeclared exception!
      jSONArray1.toList();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query("java.io.StringWriter@0000000002");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-463), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-463] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      jSONArray0.put(1000000, false);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Object, MultipleGradientPaint.ColorSpaceType> hashMap0 = new HashMap<Object, MultipleGradientPaint.ColorSpaceType>();
      LinkedList<DropMode> linkedList0 = new LinkedList<DropMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      // Undeclared exception!
      jSONArray0.put(1000000, (Map<?, ?>) hashMap0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, MultipleGradientPaint.ColorSpaceType> hashMap0 = new HashMap<Object, MultipleGradientPaint.ColorSpaceType>();
      MultipleGradientPaint.ColorSpaceType multipleGradientPaint_ColorSpaceType0 = MultipleGradientPaint.ColorSpaceType.SRGB;
      hashMap0.put((Object) null, multipleGradientPaint_ColorSpaceType0);
      // Undeclared exception!
      try { 
        jSONArray0.put(9, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      // Undeclared exception!
      jSONArray0.put(1000000, (Object) locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-3), (-3));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-3] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      jSONArray0.put(1000000, 1000000);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-1986), (float) (-1986));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1986] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-278), 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-278] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put(Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedList<BigDecimal> linkedList0 = new LinkedList<BigDecimal>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.put(Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery("wcQ3H1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(5371, 5371);
      // Undeclared exception!
      jSONArray1.join("Error reading value at index position ");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONArray0.put((Collection<?>) linkedList0);
      boolean boolean0 = jSONArray0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Dialog.ModalityType, Float> hashMap0 = new HashMap<Dialog.ModalityType, Float>();
      jSONArray0.put(30, (Map<?, ?>) hashMap0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4");
      Writer writer0 = JSONObject.writeValue(mockPrintWriter0, jSONArray0, 244, (-1));
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Dialog.ModalityType, Float> hashMap0 = new HashMap<Dialog.ModalityType, Float>();
      jSONArray0.put(58, (Map<?, ?>) hashMap0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~0");
      Writer writer0 = JSONObject.writeValue(mockPrintWriter0, jSONArray0, (-2458), 1118);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray1 = jSONArray0.put((Collection<?>) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      jSONArray1.write((Writer) mockPrintWriter0, (-3072), 810);
      assertEquals("[[]]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~0");
      Writer writer0 = JSONObject.writeValue(mockPrintWriter0, jSONArray0, (-2458), 1118);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1148, 640);
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      JSONArray jSONArray1 = jSONArray0.put(1148, (Object) roundingMode0);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      try { 
        jSONArray0.put((-625), (Object) locale_Category0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-625] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.optString(39, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      jSONArray0.put(10, (Object) locale_Category0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = jSONArray0.optNumber(10, (Number) bigInteger0);
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1175, 1175);
      BigInteger bigInteger0 = BigInteger.ONE;
      Number number0 = jSONArray0.optNumber(1175, (Number) bigInteger0);
      assertEquals(1175, number0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Number number0 = jSONArray0.optNumber(2606, (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(1120, 135.605368);
      long long0 = jSONArray0.optLong(1120, (long) 1120);
      assertEquals(1121, jSONArray0.length());
      assertEquals(135L, long0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      long long0 = jSONArray0.optLong(1455, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      JSONArray jSONArray1 = jSONArray0.put(35, (Object) locale_Category0);
      long long0 = jSONArray1.optLong(35, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JTable.PrintMode jTable_PrintMode0 = JTable.PrintMode.FIT_WIDTH;
      Class<JTable.PrintMode> class0 = JTable.PrintMode.class;
      JTable.PrintMode jTable_PrintMode1 = jSONArray0.optEnum(class0, (-378), jTable_PrintMode0);
      assertEquals(JTable.PrintMode.FIT_WIDTH, jTable_PrintMode1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      Class<Proxy.Type> class0 = Proxy.Type.class;
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      Proxy.Type proxy_Type1 = jSONArray1.optEnum(class0, 0, proxy_Type0);
      assertEquals(Proxy.Type.HTTP, proxy_Type1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Long, Desktop.Action> hashMap0 = new HashMap<Long, Desktop.Action>();
      jSONArray0.put(1866, (Map<?, ?>) hashMap0);
      int int0 = jSONArray0.optInt(1866, 1866);
      assertEquals(1866, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.optInt((-2568), (-2568));
      assertEquals((-2568), int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray1 = jSONArray0.put((Collection<?>) linkedList0);
      float float0 = jSONArray1.optFloat((int) (byte)0, (-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) bigDecimal0);
      float float0 = jSONArray0.optFloat(0, (float) 0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedList<Normalizer.Form> linkedList0 = new LinkedList<Normalizer.Form>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      JSONArray jSONArray1 = jSONArray0.put(0, (Object) locale_FilteringMode0);
      double double0 = jSONArray1.optDouble(0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = jSONArray0.optDouble((-292), 1742.4614397654514);
      assertEquals(1742.4614397654514, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-1216));
      JSONArray jSONArray1 = jSONArray0.put(35, (Object) integer0);
      double double0 = jSONArray1.optDouble(35, (double) 35);
      assertEquals((-1216.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1175, 1175);
      Object object0 = jSONArray0.opt(91);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.opt(93);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.opt((-1743));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedList<Normalizer.Form> linkedList0 = new LinkedList<Normalizer.Form>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      JSONArray jSONArray1 = jSONArray0.put(0, (Object) locale_FilteringMode0);
      try { 
        jSONArray1.getString(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.get(91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[91] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONArray0.put(1904, (Object) jSONObject0);
      JSONObject jSONObject1 = (JSONObject)jSONArray0.get(1904);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<Character.UnicodeScript> linkedList0 = new LinkedList<Character.UnicodeScript>();
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.DEVANAGARI;
      linkedList0.add(character_UnicodeScript0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedList<Month> linkedList0 = new LinkedList<Month>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONPointer jSONPointer0 = new JSONPointer("/");
      // Undeclared exception!
      try { 
        jSONArray0.query(jSONPointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         //  is not an array index
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.optBoolean(31, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<MultipleGradientPaint.CycleMethod> class0 = MultipleGradientPaint.CycleMethod.class;
      jSONArray0.optEnum(class0, (-2568));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Dialog.ModalityType, Float> hashMap0 = new HashMap<Dialog.ModalityType, Float>();
      JSONArray jSONArray1 = jSONArray0.put(1966, (Map<?, ?>) hashMap0);
      List<Object> list0 = jSONArray1.toList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Thread.State> linkedList0 = new LinkedList<Thread.State>();
      jSONArray0.put((Collection<?>) linkedList0);
      List<Object> list0 = jSONArray0.toList();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1875, 1875);
      List<Object> list0 = jSONArray1.toList();
      assertTrue(list0.contains(1875));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Integer, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Integer, GraphicsDevice.WindowTranslucency>();
      JSONArray jSONArray1 = jSONArray0.put(2, (Map<?, ?>) hashMap0);
      String string0 = jSONArray1.toString(2);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1875, 1875);
      String string0 = jSONArray0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Dialog.ModalExclusionType, Character.UnicodeScript> hashMap0 = new HashMap<Dialog.ModalExclusionType, Character.UnicodeScript>();
      JSONArray jSONArray1 = new JSONArray();
      assertTrue(jSONArray1.isEmpty());
      
      JSONArray jSONArray2 = jSONArray1.put(1124, (Map<?, ?>) hashMap0);
      jSONArray0.toJSONObject(jSONArray2);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      assertNull(jSONObject0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.toJSONObject((JSONArray) null);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      boolean boolean0 = jSONArray0.similar(jSONArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1175, 1175);
      JSONArray jSONArray2 = new JSONArray();
      boolean boolean0 = jSONArray1.similar(jSONArray2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      boolean boolean0 = jSONArray0.similar(locale_FilteringMode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.remove(79);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.remove((-1737));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1175, false);
      assertEquals(1176, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(true);
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(false);
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1, 1);
      String string0 = jSONArray0.optString(1, "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (Object) "lLe");
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = jSONArray1.optNumber(0, (Number) bigInteger0);
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Long, Desktop.Action> hashMap0 = new HashMap<Long, Desktop.Action>();
      JSONArray jSONArray1 = jSONArray0.put(1875, (Map<?, ?>) hashMap0);
      Number number0 = jSONArray1.optNumber(1875);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray1 = jSONArray0.put((Collection<?>) linkedList0);
      long long0 = jSONArray1.optLong(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Integer, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Integer, GraphicsDevice.WindowTranslucency>();
      JSONArray jSONArray1 = jSONArray0.put(1336, (Map<?, ?>) hashMap0);
      JSONObject jSONObject0 = jSONArray1.optJSONObject(1336);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.optJSONObject(10);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray1 = jSONArray0.put((Collection<?>) linkedList0);
      JSONArray jSONArray2 = jSONArray0.optJSONArray(0);
      assertNotSame(jSONArray2, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.optJSONArray(109);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<StandardProtocolFamily, JDBCType> hashMap0 = new HashMap<StandardProtocolFamily, JDBCType>();
      jSONArray0.put(0, (Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(0, bigDecimal0);
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(1120, (-313L));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONArray0.optBigDecimal(1120, bigDecimal0);
      assertEquals(1121, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0, 0);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(0, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Integer, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Integer, GraphicsDevice.WindowTranslucency>();
      JSONArray jSONArray1 = jSONArray0.put(2, (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = jSONArray1.optBigInteger(2, (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<CardTerminals.State> linkedList0 = new LinkedList<CardTerminals.State>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(193, 0L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONArray1.optBigInteger(193, bigInteger0);
      assertEquals(194, jSONArray0.length());
      assertNotSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      jSONArray0.put((Collection<?>) linkedList0);
      jSONArray0.put(0.0);
      BigInteger bigInteger0 = jSONArray0.optBigInteger(1, (BigInteger) null);
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONArray0.optBigInteger(0, bigInteger0);
      assertEquals((byte)10, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0, 0);
      BigInteger bigInteger0 = jSONArray0.optBigInteger(0, (BigInteger) null);
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0, 0);
      Class<RowIdLifetime> class0 = RowIdLifetime.class;
      try { 
        jSONArray0.getEnum(class0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not an enum of type java.io.StringWriter@0000000006.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      jSONArray0.put(35, (Object) locale_Category0);
      int int0 = jSONArray0.optInt(35);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0, 0);
      int int0 = jSONArray0.optInt(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(885, (Object) "");
      int int0 = jSONArray1.optInt(885);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0, 0);
      float float0 = jSONArray0.optFloat(0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      double double0 = jSONArray1.optDouble(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1810, 1810);
      String string0 = jSONArray1.join("JSONArray initial value should be a string or collection or array.");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.join("T!4Zi8");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      long long0 = jSONArray1.getLong(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Long, Desktop.Action> hashMap0 = new HashMap<Long, Desktop.Action>();
      JSONArray jSONArray1 = jSONArray0.put(1875, (Map<?, ?>) hashMap0);
      try { 
        jSONArray1.getLong(1875);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1875] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Long, Desktop.Action> hashMap0 = new HashMap<Long, Desktop.Action>();
      jSONArray0.put(1875, (Map<?, ?>) hashMap0);
      JSONObject jSONObject0 = jSONArray0.getJSONObject(1875);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      try { 
        jSONArray1.getJSONObject(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Dialog.ModalityType, Float> hashMap0 = new HashMap<Dialog.ModalityType, Float>();
      JSONArray jSONArray1 = jSONArray0.put(1143, (Map<?, ?>) hashMap0);
      try { 
        jSONArray1.getJSONArray(1143);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1143] is not a JSONArray.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      int int0 = jSONArray1.getInt(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<TrayIcon.MessageType, RowIdLifetime> hashMap0 = new HashMap<TrayIcon.MessageType, RowIdLifetime>();
      JSONArray jSONArray1 = jSONArray0.put(2930, (Map<?, ?>) hashMap0);
      try { 
        jSONArray1.getInt(2930);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2930] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(93, (-2547));
      Number number0 = jSONArray0.getNumber(93);
      assertEquals((-2547), number0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Thread.State> linkedList0 = new LinkedList<Thread.State>();
      jSONArray0.put((Collection<?>) linkedList0);
      try { 
        jSONArray0.getNumber(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1793, 1875);
      assertEquals(1794, jSONArray0.length());
      
      float float0 = jSONArray0.getFloat(1793);
      assertEquals(1875.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Long, Desktop.Action> hashMap0 = new HashMap<Long, Desktop.Action>();
      JSONArray jSONArray1 = jSONArray0.put(1866, (Map<?, ?>) hashMap0);
      try { 
        jSONArray1.getFloat(1866);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1866] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) bigDecimal0);
      double double0 = jSONArray0.getDouble(0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Locale.Category, WebParam.Mode> hashMap0 = new HashMap<Locale.Category, WebParam.Mode>();
      JSONArray jSONArray1 = jSONArray0.put(0, (Map<?, ?>) hashMap0);
      try { 
        jSONArray1.getDouble(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(93, true);
      boolean boolean0 = jSONArray0.optBoolean(93);
      assertEquals(94, jSONArray0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      try { 
        jSONArray1.getBoolean(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a boolean.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "null");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Object object0 = new Object();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[O]v");
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(" [chahacter ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 12 [character 13 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[]4d|qz:");
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("[FJKm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 5 [character 6 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((-2757.0F));
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.optQuery("");
      assertSame(jSONArray0, object0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Dialog.ModalityType, Float> hashMap0 = new HashMap<Dialog.ModalityType, Float>();
      try { 
        jSONArray0.put((-1321), (Map<?, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1321] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isNull(961);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONArray0.put((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.getJSONArray(0);
      assertNotSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Float, Window.Type> hashMap0 = new HashMap<Float, Window.Type>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.optInt(35);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((-1123));
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-1423), 1L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1423] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.query("");
      assertSame(jSONArray0, object0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.put((-2630), (Collection<?>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2630] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2580, (float) 2580);
      jSONArray0.toString();
      assertEquals(2581, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.optBoolean(93);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.optString(1143);
      assertEquals("", string0);
  }
}
