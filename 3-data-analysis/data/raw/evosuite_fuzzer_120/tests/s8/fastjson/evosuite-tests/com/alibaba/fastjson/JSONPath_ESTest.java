/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 23:59:04 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.JSONValidator;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.AtomicCodec;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.ObjectSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Array;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ThaiBuddhistDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.TimeZone;
import java.util.UUID;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      Byte byte0 = new Byte((byte)0);
      JSONPath jSONPath1 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Object object0 = new Object();
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      jSONPath0.deepSet(bigInteger0, "F2k", (-1968L), jSONPath_NotNullSegement0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Float float0 = new Float((-2187.844F));
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig0 = new SerializeConfig(789);
      JSONPath jSONPath0 = new JSONPath("^", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) float0, "[Z", (Object) "^");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(45);
      MockDate mockDate0 = new MockDate(45, 60, 60);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment1 = new JSONPath.ArrayAccessSegment(60);
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java/lang/Byte");
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("{", serializeConfig0, parserConfig0);
      SQLWarning sQLWarning0 = new SQLWarning();
      JSONPath.MinSegment jSONPath_MinSegment1 = new JSONPath.MinSegment();
      jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      JSONPath.reserveToArray(jSONPath_MinSegment0, (String[]) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      ParserConfig parserConfig1 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{", parserConfig1, 45);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONPath jSONPath0 = new JSONPath("^");
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JSONPath.isDouble(class0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "^";
      stringArray0[3] = "_X,$@mw2]md{)3n4Wq";
      stringArray0[4] = "^";
      stringArray0[5] = "^";
      stringArray0[6] = "^";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) "", "fastjson.parser.autoTypeAccept");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Long long0 = new Long((-582L));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("|h+'KgN<io", serializeConfig0, parserConfig0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.autoTypeSupport", "fastjson.parser.autoTypeAccept");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLNonTransientConnectionException0);
      MockThrowable mockThrowable0 = new MockThrowable("|h+'KgN<io", sQLTimeoutException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(mockThrowable0);
      JSONPath.eq(long0, sQLTransientConnectionException0);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.parser.safeMode", (-2439930098895578154L), (-582L), false);
      Double double0 = new Double((-2439930098895578154L));
      jSONPath_IntBetweenSegement0.apply(jSONPath0, double0, (Object) null, long0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("f;\")`zT1?l/V.>Y!pk");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : f;\")`zT1?l/V.>Y!pk
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Long long0 = new Long((-582L));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("|h+'KgN<io", serializeConfig0, parserConfig0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.autoTypeSupport", "fastjson.parser.autoTypeAccept");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLNonTransientConnectionException0);
      MockThrowable mockThrowable0 = new MockThrowable("|h+'KgN<io", sQLTimeoutException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(mockThrowable0);
      JSONPath.eq(long0, sQLTransientConnectionException0);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.parser.safeMode", (-2439930098895578154L), (-582L), false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("_Uyr?SSD41n.>g5$|Fm");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. _Uyr?SSD41n.>g5$|Fm
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Class<Short> class0 = Short.class;
      JSONPath.isDouble(class0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("like");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("P^qc.C:Ip4Bwyq");
      jSONPath_JSONPathParser0.readOp();
      jSONPath_JSONPathParser1.readSegement();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("TT", hashMap0, (Throwable) null);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("TT", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("TT", map0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLClientInfoException1);
      JSONPath.paths((Object) sQLClientInfoException0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "TT";
      JSONPath.reserveToArray(propertyNamingStrategy0, stringArray0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("TT", true);
      // Undeclared exception!
      try { 
        JSONPath.compare(jSONPath_PropertySegment0, clientInfoStatus0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath$PropertySegment cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("TT", hashMap0, (Throwable) null);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("TT", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("TT", hashMap0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLClientInfoException1);
      JSONPath.paths((Object) sQLClientInfoException0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "TT";
      JSONPath.reserveToArray(propertyNamingStrategy0, stringArray0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("TT", true);
      // Undeclared exception!
      try { 
        JSONPath.compare(jSONPath_PropertySegment0, clientInfoStatus0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath$PropertySegment cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Long long0 = new Long(39L);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Integer integer0 = new Integer((byte)0);
      JSONPath.eqNotNull(integer0, integer0);
      int int0 = 16384;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(16384, (-1101), 31);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "[Z";
      stringArray0[1] = "decimal";
      stringArray0[2] = "[Z";
      stringArray0[3] = "decimal";
      stringArray0[4] = "[Z";
      stringArray0[5] = "[Z";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(date0, stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "[/:z4>an>h;,FY";
      JSONPath jSONPath0 = new JSONPath("[/:z4>an>h;,FY");
      String string1 = "$k;#sRWt.ZF8";
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Long long0 = new Long(39L);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Integer integer0 = new Integer((byte)0);
      JSONPath.eqNotNull(integer0, integer0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("cima", "cima");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.alibaba.fastjson.JSONPath$KeySetSegment", sQLRecoverableException0);
      JSONPath jSONPath0 = new JSONPath("cima");
      // Undeclared exception!
      jSONPath0.removePropertyValue(bigInteger0, "deny", true);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig.getGlobalInstance();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      JSONPath.compile("fastjson.parser.autoTypeSupport");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("n", (-583.8146906574725), jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_DoubleOpSegement0, jSONPath_DoubleOpSegement0, false);
      JSONPath.compile("fastjson.parser.autoTypeAccept");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "fastjson.parser.autoTypeSupport";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Y<#b]M1");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath jSONPath0 = new JSONPath("^");
      JSONPath jSONPath1 = new JSONPath("^");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("^", "^");
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("^", "^", sQLSyntaxErrorException0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(timeZone0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("^", "com.alibaba.fastjson.serializer.SerializeBeanInfo", jSONPath_Operator0);
      JSONPath jSONPath2 = new JSONPath("getFieldValue error.");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "com.alibaba.fastjson.serializer.SerializeBeanInfo";
      objectArray0[1] = (Object) "getFieldValue error.";
      objectArray0[2] = (Object) mockGregorianCalendar0;
      objectArray0[3] = (Object) "^";
      objectArray0[4] = (Object) jSONPath0;
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToArray(timeZone0, stringArray0);
      objectArray0[5] = object0;
      objectArray0[6] = (Object) timeZone0;
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath_Operator0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class com.alibaba.fastjson.JSONPath$Operator
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONPath jSONPath0 = new JSONPath("^");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("^", "^");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) sQLTimeoutException0;
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) sQLTimeoutException0;
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      jSONPath0.getPropertyValue(jSONPath_WildCardSegment0, "^", 2158L);
      objectArray0[4] = null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) sQLTimeoutException0;
      objectArray0[8] = (Object) "^";
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) sQLTimeoutException0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.sql.SQLTimeoutException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(45);
      MockDate mockDate0 = new MockDate(45, 60, 60);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment1 = new JSONPath.ArrayAccessSegment(60);
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializeConfig serializeConfig1 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath(">1#xWp,tC)5onM_@R", serializeConfig0, parserConfig0);
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.deny");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "fastjson.parser.autoTypeSupport";
      stringArray0[1] = "{";
      Object object0 = JSONPath.reserveToArray(mockGregorianCalendar0, stringArray0);
      jSONPath0.removeArrayItem(jSONPath1, object0, 4141);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("X<@]+LXb`H<e", 1534439610567445754L, jSONPath_Operator0);
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.GE;
      jSONPath_IntOpSegement0.apply(jSONPath0, mockDate0, jSONPath_Operator1, jSONPath_ArrayAccessSegment0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("fastjson.parser.safeMode");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
      jSONPath_FilterSegment0.remove(jSONPath0, jSONPath1, jSONPath1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(45);
      MockDate mockDate0 = new MockDate(45, 60, 60);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment1 = new JSONPath.ArrayAccessSegment(60);
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializeConfig serializeConfig1 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath(">1#xWp,tC)5onM_@R", serializeConfig0, parserConfig0);
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.deny");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "fastjson.parser.autoTypeSupport";
      stringArray0[1] = "{";
      Object object0 = JSONPath.reserveToArray(mockGregorianCalendar0, stringArray0);
      jSONPath0.removeArrayItem(jSONPath1, object0, 4141);
      JSONPath.paths((Object) parserConfig0, serializeConfig0);
      jSONPath1.evalSize((Object) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte byte0 = (byte)47;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)47;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("mK", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "mK", (Object) null, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig.getGlobalInstance();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      JSONPath.compile("fastjson.parser.autoTypeSupport");
      Float float0 = new Float(405.00279323);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      JSONPath.eqNotNull(float0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Long long0 = new Long((-582L));
      long long1 = JSONPath.LENGTH;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("Mh^t", serializeConfig0, parserConfig0);
      JSON.DEFAULT_GENERATE_FEATURE = 110;
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues(jSONPath0);
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(javaBeanSerializer0, "fastjson.parser.autoTypeAccept", list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Float float0 = new Float((-2187.844F));
      int[] intArray0 = new int[6];
      intArray0[1] = 1132;
      intArray0[3] = 1132;
      intArray0[4] = 1132;
      intArray0[5] = 1132;
      JSONPath.isDouble((Class<?>) null);
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.remove((Object) jSONPath_MultiPropertySegment0, "parser");
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("parser", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "^3(<B_XYR'.  D%:HY";
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("^3(<B_XYR'.  D%:HY", serializeConfig0, parserConfig0);
      JSONPath.containsValue((Object) serializeConfig0, "fastjson.parser.deny.internal", (Object) serializeConfig0);
      jSONPath0.arrayAdd((Object) serializeConfig0, (Object[]) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny.internal");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement(":!G}5dT5NzC=|`GP");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"!G}5dT5NzC=|`GP\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("^3(<B_XYR'.  D%:HY", serializeConfig0, parserConfig0);
      JSONPath.containsValue((Object) serializeConfig0, "fastjson.parser.deny.internal", (Object) serializeConfig0);
      jSONPath0.arrayAdd((Object) serializeConfig0, (Object[]) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny.internal");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement(":!G}5dT5NzC=|`GP");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"!G}5dT5NzC=|`GP\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath jSONPath0 = new JSONPath(")>Tm:");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(387);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath1 = new JSONPath("/cause/stackTrace/6", serializeConfig0, parserConfig0);
      Class<SQLWarning> class0 = SQLWarning.class;
      parserConfig0.register("*~,nac_s?E", class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      JSONPath.containsValue((Object) sQLNonTransientConnectionException0, "/cause/stackTrace/6", (Object) null);
      char[] charArray0 = new char[3];
      charArray0[0] = '6';
      charArray0[1] = 't';
      charArray0[2] = 'S';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 29);
      jSONReaderScanner0.getCalendar();
      jSONPath0.arrayAdd((Object) null, (Object[]) null);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement(">{BJ7aMm'", (String) null, "*~,nac_s?E", (String[]) null, false);
      JSONPath.isDouble(class0);
      String string0 = "yyyy/MM/dd";
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath_ArrayAccessSegment0, "illegal json creator");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : illegal json creator
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Float float0 = new Float((float) 39L);
      Class<JSONPath.ArrayAccessSegment> class0 = JSONPath.ArrayAccessSegment.class;
      JSONPath.isDouble(class0);
      String[] stringArray0 = new String[4];
      String string0 = "/stackTrace/9";
      stringArray0[0] = "/stackTrace/9";
      stringArray0[1] = "4iQbi:w-$jT%MS3<VR(";
      String string1 = "t@-{nWgO74R[\\@Y%Fnd";
      stringArray0[2] = "t@-{nWgO74R[@Y%Fnd";
      String string2 = "l8*oTv4s";
      stringArray0[3] = "t@-{nWgO74R[@Y%Fnd";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("t@-{nWgO74R[@Y%Fnd");
      sQLInvalidAuthorizationSpecException0.spliterator();
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) sQLInvalidAuthorizationSpecException0, "/stackTrace/9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "\"a string\"";
      Long long0 = new Long(6007332606592876711L);
      JSONPath jSONPath0 = new JSONPath("\"a string\"");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1437, 1437, 1437);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"a string\"", "\"a string\"");
      Double double0 = new Double((-1663.20300856839));
      JSONPath.eqNotNull(long0, double0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. -
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "\"a string\"";
      long long0 = 6007332606592876711L;
      Long long1 = new Long(6007332606592876711L);
      JSONPath jSONPath0 = new JSONPath("\"a string\"");
      int int0 = 1437;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1437, 1437, 1437);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"a string\"", "\"a string\"");
      Double double0 = new Double((-1663.20300856839));
      JSONPath.eqNotNull(long1, double0);
      String string1 = "\\-";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. -
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)47;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"gUfZpnoHMf+[");
      jSONPath_JSONPathParser0.parseArrayAccess(false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("G");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      String string0 = "px5KWHl_Bs7 ~";
      SerializeConfig serializeConfig0 = new SerializeConfig(127, false);
      JSONPath jSONPath0 = new JSONPath("px5KWHl_Bs7 ~", serializeConfig0, parserConfig0);
      SQLWarning sQLWarning0 = new SQLWarning();
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      SQLDataException sQLDataException0 = new SQLDataException();
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      Class<SQLException> class0 = SQLException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      // Undeclared exception!
      try { 
        jSONPath1.containsValue((Object) javaBeanSerializer0, (Object) sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      Float float0 = new Float(0.0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath.compile("99");
      JSONPath jSONPath0 = new JSONPath("99");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1, 1, 1437);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeAccept");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("+6]`BgL')<Wh$E&w");
      JSONPath.JSONPathParser jSONPath_JSONPathParser2 = new JSONPath.JSONPathParser("+6]`BgL')<Wh$E&w");
      jSONPath_JSONPathParser2.readValue();
      JSONPath.JSONPathParser jSONPath_JSONPathParser3 = new JSONPath.JSONPathParser("&N");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("*");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nin");
      jSONPath_JSONPathParser0.readOp();
      SQLDataException sQLDataException0 = new SQLDataException(sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("h5Fbfj", "net.sf.json.JSONNull", 60, sQLDataException0);
      Short short0 = new Short((short) (-1469));
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) short0, "/'E $S3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. /'E $S3
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-2176));
      DataTruncation dataTruncation0 = new DataTruncation((-862), true, false, Integer.MAX_VALUE, (-2176));
      Float float0 = new Float((double) Integer.MAX_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((-7028101888173689980L));
      JSONPath.eqNotNull(bigDecimal0, float0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((byte)0);
      ParserConfig parserConfig0 = new ParserConfig();
      Float float0 = new Float((double) (byte)0);
      BigDecimal bigDecimal0 = new BigDecimal(1114L);
      JSONPath.eqNotNull(bigDecimal0, float0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONPath.JSONPathParser.isDigitFirst('<');
      JSONPath.compile("D+NvYj");
      JSONPath.compile("D+NvYj");
      String[] stringArray0 = new String[0];
      JSONPath.reserveToObject("D+NvYj", stringArray0);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath.MaxSegment jSONPath_MaxSegment1 = JSONPath.MaxSegment.instance;
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) jSONPath_MaxSegment0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath jSONPath0 = new JSONPath(")>Tm:");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(387);
      String string0 = "JSONPath$PropertySegment";
      JSONPath.containsValue((Object) null, "JSONPath$PropertySegment", (Object) jSONPath_Operator0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = null;
      objectArray0[1] = (Object) jSONPath_ArrayAccessSegment0;
      objectArray0[2] = (Object) jSONPath_ArrayAccessSegment0;
      objectArray0[3] = (Object) jSONPath0;
      objectArray0[4] = (Object) "JSONPath$PropertySegment";
      objectArray0[5] = (Object) jSONPath_ArrayAccessSegment0;
      objectArray0[6] = (Object) "JSONPath$PropertySegment";
      jSONPath0.arrayAdd((Object) null, objectArray0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "JSONPath$PropertySegment";
      stringArray0[1] = "com.alibaba.fastjson.serializer.LongCodec";
      stringArray0[2] = ">{BJ7aMm'";
      stringArray0[3] = "com.alibaba.fastjson.serializer.LongCodec";
      stringArray0[4] = ">{BJ7aMm'";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("com.alibaba.fastjson.serializer.LongCodec", "com.alibaba.fastjson.serializer.LongCodec", "com.alibaba.fastjson.serializer.LongCodec", stringArray0, true);
      Class<JSONPath.ArrayAccessSegment> class0 = JSONPath.ArrayAccessSegment.class;
      JSONPath.isDouble(class0);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath_MatchSegement0, "*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath jSONPath0 = new JSONPath(")>Tm:");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(387);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = null;
      objectArray0[1] = (Object) jSONPath_ArrayAccessSegment0;
      objectArray0[2] = (Object) jSONPath_ArrayAccessSegment0;
      objectArray0[3] = (Object) jSONPath0;
      objectArray0[4] = (Object) "JSONPath$PropertySegment";
      objectArray0[5] = (Object) jSONPath_ArrayAccessSegment0;
      objectArray0[6] = (Object) "JSONPath$PropertySegment";
      jSONPath0.arrayAdd((Object) null, objectArray0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "JSONPath$PropertySegment";
      stringArray0[1] = "com.alibaba.fastjson.serializer.LongCodec";
      stringArray0[2] = ">{BJ7aMm'";
      stringArray0[3] = "com.alibaba.fastjson.serializer.LongCodec";
      stringArray0[4] = ">{BJ7aMm'";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("com.alibaba.fastjson.serializer.LongCodec", "com.alibaba.fastjson.serializer.LongCodec", "com.alibaba.fastjson.serializer.LongCodec", stringArray0, true);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath_MatchSegement0, "*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONPath jSONPath0 = new JSONPath("^");
      int int0 = 16384;
      int int1 = 3085;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3085, 16384, 16384);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      mockGregorianCalendar1.getGregorianChange();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "^";
      stringArray0[1] = "^";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(mockGregorianCalendar0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = null;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("java.beans.Transient", serializeConfig0, parserConfig0);
      Class<JSONPath.SizeSegment> class0 = JSONPath.SizeSegment.class;
      serializeConfig0.createJavaBeanSerializer(class0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue("java.beans.Transient", "fastjson.parser.autoTypeAccept", 2609L, jSONPath_SizeSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Long long0 = new Long(6007332606592876711L);
      JSONPath jSONPath0 = new JSONPath("\"a string\"");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1437, 1437, 1437);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string\"");
      jSONPath_JSONPathParser0.skipWhitespace();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(36);
      char[] charArray0 = new char[9];
      charArray0[0] = '@';
      charArray0[1] = '^';
      charArray0[2] = '{';
      charArray0[3] = ')';
      charArray0[4] = 'L';
      charArray0[5] = 'Q';
      charArray0[6] = '}';
      charArray0[7] = '`';
      charArray0[8] = ')';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1437);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONPath_ArrayAccessSegment0.eval(jSONPath0, jSONPath_RangeSegment0, (Object) null);
      Float float0 = new Float((-1.0));
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "()V";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("()V");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(";dtFn5]w:C'~o$I");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/11");
      jSONPath_JSONPathParser0.explain();
      jSONPath_JSONPathParser0.isEOF();
      jSONPath_JSONPathParser0.isEOF();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";dtFn5]w:C'~o$I");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ;dtFn5]w:C'~o$I
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Float float0 = new Float((-2187.844F));
      int[] intArray0 = new int[6];
      intArray0[1] = 1132;
      intArray0[3] = 1132;
      intArray0[4] = 1132;
      intArray0[5] = 1132;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/", "PT5mLe", sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException();
      JSONPath.keySet((Object) "PT5mLe", "/");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "^";
      JSONPath jSONPath0 = new JSONPath("^");
      String string1 = "q2/{N\\U*7#yh";
      String string2 = "length";
      int int0 = (-1668);
      SQLWarning sQLWarning0 = new SQLWarning("q2/{NU*7#yh", "length", (-1668));
      SQLWarning sQLWarning1 = new SQLWarning();
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      SQLDataException sQLDataException0 = new SQLDataException();
      JSONPath jSONPath1 = new JSONPath("false");
      // Undeclared exception!
      try { 
        jSONPath1.containsValue((Object) "", (Object) "q2/{NU*7#yh");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Float float0 = new Float((-2187.844F));
      int[] intArray0 = new int[6];
      intArray0[1] = 1132;
      intArray0[3] = 1132;
      intArray0[4] = 1132;
      intArray0[5] = 1132;
      Class<JSONPath.ArrayAccessSegment> class0 = JSONPath.ArrayAccessSegment.class;
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      JSONPath.isDouble(class1);
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.remove((Object) jSONPath_MultiPropertySegment0, "parser");
      Object object0 = JSONPath.reserveToArray(class0, stringArray0);
      JSONPath.paths(object0, (SerializeConfig) null);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("[]", longArray0, true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[]";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath_IntObjInSegement0, stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Long long0 = new Long((-582L));
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte) (-125);
      byteArray0[6] = (byte) (-125);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Nqzq`5zc-vB");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("!z:=ONSyu|x-UWN>");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONPath jSONPath0 = new JSONPath("^");
      Integer integer0 = new Integer(2540);
      // Undeclared exception!
      try { 
        JSONPath.extract("uIs0_wLP_~cm\"H2", "^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 4, line 1, column 5uIs0_wLP_~cm\"H2
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Long long0 = new Long((-582L));
      long long1 = JSONPath.LENGTH;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      Random.setNextRandom(56);
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("wW[({]x'N66|", "wW[({]x'N66|", jSONPath_Operator1);
      JSONPath jSONPath0 = new JSONPath("wW[({]x'N66|");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("wW[({]x'N66|", "wW[({]x'N66|");
      TimeZone timeZone0 = TimeZone.getDefault();
      JSONPath.eq((Object) null, jSONPath_Operator0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("wW[({]x'N66|", "wW[({]x'N66|", sQLSyntaxErrorException0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(55);
      jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath_ArrayAccessSegment0, (Object) null, (Object) null);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(timeZone0);
      jSONPath_StringOpSegement0.apply(jSONPath0, mockGregorianCalendar0, sQLTransientConnectionException0, mockGregorianCalendar1);
      JSONPath.compile("*");
      String string0 = ".AfPD*jD\\/3G";
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) "*", ".AfPD*jD/3G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : .AfPD*jD/3G
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      String string0 = "'T'";
      JSONPath jSONPath0 = new JSONPath("'T'");
      UUID uUID0 = MockUUID.fromString(";dtFn5]w:C'~o$I");
      JSONPath.eq((Object) null, uUID0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/1");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. /stackTrace/1
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONPath.JSONPathParser.isDigitFirst('<');
      Integer integer0 = new Integer(2540);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("minutes", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1132;
      intArray0[1] = 1132;
      JSONPath jSONPath0 = JSONPath.compile("alibaba");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$PropertySegment");
      jSONPath_JSONPathParser0.explain();
      jSONPath_JSONPathParser0.isEOF();
      jSONPath_JSONPathParser0.isEOF();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}bL0=Ctf.czb,Bm");
      jSONPath0.extract(defaultJSONParser0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Long long0 = new Long((-1580386065683472715L));
      Random.setNextRandom(56);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("com.alibaba.fastjson.JSONPath$NotNullSegement", "1U]", jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$NotNullSegement");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("1U]", "com.alibaba.fastjson.JSONPath$NotNullSegement");
      JSONPath.remove((Object) jSONPath_Operator0, "/stackTrace/0");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("must > ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("autoTypeAccept", serializeConfig0, (ParserConfig) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath jSONPath1 = JSONPath.compile("4{of5-_kgE;nWOO@xz`");
      SerializeConfig serializeConfig1 = new SerializeConfig(57);
      JSONPath jSONPath2 = new JSONPath("autoTypeAccept", serializeConfig1, (ParserConfig) null);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("sY9hhtf", (-569.0), jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_DoubleOpSegement0, jSONPath_DoubleOpSegement0, false);
      JSONPath.compile("9D+j");
      Long long0 = new Long(5614464919154503228L);
      JSONPath.reserveToObject(long0, (String[]) null);
      jSONPath1.toJSONString();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONPath jSONPath0 = new JSONPath("^");
      Integer integer0 = new Integer(2540);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(2540);
      JSONPath.containsValue((Object) "^", "^", (Object) jSONPath_ArrayAccessSegment0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) jSONPath_ArrayAccessSegment0;
      objectArray0[4] = (Object) "^";
      objectArray0[5] = (Object) jSONPath_ArrayAccessSegment0;
      objectArray0[6] = (Object) "^";
      objectArray0[7] = (Object) jSONPath0;
      objectArray0[8] = (Object) "^";
      jSONPath0.arrayAdd((Object) null, objectArray0);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("^", "G*S!O^;J_80cC_w", "^", (String[]) null, false);
      Class<JSONPath.ArrayAccessSegment> class0 = JSONPath.ArrayAccessSegment.class;
      JSONPath.isDouble(class0);
      JSONPath.remove(objectArray0[1], "/stackTrace/4");
      // Undeclared exception!
      try { 
        JSONPath.read("cF;Nw", "^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2cF;Nw
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("^");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "^");
      jSONPath0.containsValue((Object) "^", (Object) sQLTransactionRollbackException0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 2392, 11);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, ".", (-5808549176572512143L), mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("parser.features.NonStringKeyAsString");
      Set<?> set0 = jSONPath0.evalKeySet("parser.features.NonStringKeyAsString");
      String string0 = "v";
      String string1 = "%tY7a~]l>rnpWA Qkx";
      int int0 = (-2176);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-2176));
      jSONPath_ArrayAccessSegment0.eval(jSONPath0, set0, set0);
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) set0, "%tY7a~]l>rnpWA Qkx", (Object) jSONPath_ArrayAccessSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. %tY7a~]l>rnpWA Qkx
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "mK)E8pd6,]s^q";
      String string1 = "~nCi";
      long[] longArray0 = new long[0];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("mK)E8pd6,]s^q", longArray0, false);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(62);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      String string2 = "/cause/stackTrace/5";
      // Undeclared exception!
      try { 
        JSONPath.extract("]VN", "/cause/stackTrace/5");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("^3(<B_XYR'.  D%:HY", serializeConfig0, parserConfig0);
      JSONPath.containsValue((Object) serializeConfig0, "fastjson.parser.deny.internal", (Object) serializeConfig0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("fastjson.parser.autoTypeAccept", "^3(<B_XYR'.  D%:HY", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0, (Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("%", "8xO", sQLClientInfoException1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1590);
      intArray0[1] = 40;
      intArray0[2] = 40;
      intArray0[3] = 40;
      intArray0[4] = 40;
      intArray0[5] = 40;
      intArray0[6] = 40;
      intArray0[7] = (-619);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("%", "#r4di}b-t<'#*", 40, intArray0, (Throwable) null);
      JSONPath.compare("8xO", "%");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      SQLWarning sQLWarning0 = new SQLWarning("ib\"<xs_");
      Pattern pattern0 = Pattern.compile("org.joda.time.LocalDate", 683);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("R#ni*:J4h", pattern0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/1");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("/cause/stackTrace/0");
      SQLDataException sQLDataException0 = new SQLDataException(sQLWarning0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLNonTransientException0);
      Short short0 = new Short((short)218);
      LocalDate localDate0 = MockLocalDate.now();
      Calendar calendar0 = MockCalendar.getInstance();
      jSONPath_RegMatchSegement0.apply(jSONPath0, "/stackTrace/1", localDate0, calendar0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.safeMode", sQLDataException0);
      JSONPath.eq((Object) null, sQLTransientConnectionException0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RegMatchSegement0);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      jSONPath0.set((Object) jSONPath_FilterSegment0, (Object) jSONPath_MultiIndexSegment0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("fastjson.parser.safeMode", "fastjson.parser.deny.internal");
      try { 
        Short.valueOf("org.joda.time.LocalDate", (int) (short)218);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 218 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Long long0 = new Long((-582L));
      long long1 = JSONPath.LENGTH;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("country");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTimeoutException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("OV;xRM7xN", "OV;xRM7xN", batchUpdateException0);
      SQLDataException sQLDataException0 = new SQLDataException("country", "illega str", (-101), sQLTimeoutException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("(I)Ljava/lang/Enum;", "fastjson", sQLDataException0);
      Double double0 = new Double((-1.0));
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1024, (-101), 1024);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/12", serializeConfig0, parserConfig0);
      Short short0 = new Short((short)0);
      jSONPath_RangeSegment0.eval(jSONPath0, short0, serializeConfig0);
      JSONPath jSONPath1 = JSONPath.compile("/cause/stackTrace");
      jSONPath1.getPropertyValues(sQLTimeoutException0);
      Byte byte0 = new Byte((byte)5);
      jSONPath0.set((Object) byte0, (Object) sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)47;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      JSONPath.eqNotNull((byte) (-125), (byte)47);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)47;
      JSONPath.eqNotNull((byte) (-125), (byte)47);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Long long0 = new Long(8488266005336625107L);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("java/lang/Boolean");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("java/lang/Boolean", "%0~Q;;4Q> xZUQLQ^");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.autoTypeSupport", "yyyy-MM-dd'T'HH:mm:ss.SSSXXX", 7, sQLInvalidAuthorizationSpecException0);
      UUID uUID0 = MockUUID.randomUUID();
      JSONPath.paths((Object) uUID0);
      JSONPath jSONPath1 = new JSONPath("/cause/cause/stackTrace/4");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("1 vm\"ZzOF+^6");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      SQLWarning sQLWarning0 = new SQLWarning("ib\"<xs_");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "fastjson.parser.autoTypeAccept";
      stringArray0[1] = "%";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("JOa&dmCUZv&=I5CcLe", stringArray0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      JSONPath jSONPath0 = new JSONPath("%");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("fastjson.parser.autoTypeAccept", "ib\"<xs_", 68, (Map<String, ClientInfoStatus>) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Float float0 = new Float((float) 68);
      jSONPath_FilterSegment0.eval(jSONPath0, sQLNonTransientConnectionException0, float0);
      JSONPath jSONPath1 = JSONPath.compile("%");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      jSONPath1.contains((Object) jSONPath0);
      Integer integer0 = new Integer(68);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) integer0, "%");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Long long0 = new Long((-1580386065683472715L));
      Random.setNextRandom(56);
      String string0 = "com.alibaba.fastjson.JSONPath$NotNullSegement";
      String string1 = "1U]";
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("com.alibaba.fastjson.JSONPath$NotNullSegement", "1U]", jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$NotNullSegement");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem((JSONPath) null, (Object) null, (-1419), "com.alibaba.fastjson.JSONPath$NotNullSegement");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Long long0 = new Long(6007332606592876726L);
      JSONPath jSONPath0 = new JSONPath("{\"com.alibaba.fastjson.JSONPath$MultiIndexSegment\":\"hello\",\"y\":\"a string\",\"z\":true,\"/cause/cause/stackTrace/5\":[\"a string\"],\"syntax error, expect \":{\"com.alibaba.fastjson.JSONPath$MultiIndexSegment\":{\"com.alibaba.fastjson.JSONPath$MultiIndexSegment\":\"a string\"},\"x\":\"a string\"}}");
      JSONPath jSONPath1 = JSONPath.compile("{\"com.alibaba.fastjson.JSONPath$MultiIndexSegment\":\"hello\",\"y\":\"a string\",\"z\":true,\"/cause/cause/stackTrace/5\":[\"a string\"],\"syntax error, expect \":{\"com.alibaba.fastjson.JSONPath$MultiIndexSegment\":{\"com.alibaba.fastjson.JSONPath$MultiIndexSegment\":\"a string\"},\"x\":\"a string\"}}");
      JSONPath.extract("{\"com.alibaba.fastjson.JSONPath$MultiIndexSegment\":\"hello\",\"y\":\"a string\",\"z\":true,\"/cause/cause/stackTrace/5\":[\"a string\"],\"syntax error, expect \":{\"com.alibaba.fastjson.JSONPath$MultiIndexSegment\":{\"com.alibaba.fastjson.JSONPath$MultiIndexSegment\":\"a string\"},\"x\":\"a string\"}}", "Lhk7MY7l");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Double double0 = new Double(6007332606592876726L);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath1, jSONPath_WildCardSegment0, 115, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(45);
      MockDate mockDate0 = new MockDate(45, 60, 60);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment1 = new JSONPath.ArrayAccessSegment(60);
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath.extract("{", "C");
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("com.alibaba.fastjson.JSONPath$RangeSegment", (long[]) null, false);
      JSONPath jSONPath0 = new JSONPath("{");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{", (String) null, 1399);
      jSONPath_IntInSegement0.apply(jSONPath0, sQLTransientConnectionException0, jSONPath0, jSONPath_ArrayAccessSegment0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONPath.compare("b Icz&4", "b Icz&4");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(106, 91, 1926);
      JSONPath jSONPath0 = JSONPath.compile("\u0000");
      char[] charArray0 = new char[4];
      charArray0[0] = 'N';
      charArray0[1] = 'r';
      charArray0[2] = ']';
      charArray0[3] = 'Q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1926);
      jSONReaderScanner0.scanUUID('i');
      Short short0 = new Short((short)8233);
      jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, short0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      SQLWarning sQLWarning0 = new SQLWarning("ib\"<xs_");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "fastjson.parser.autoTypeAccept";
      stringArray0[1] = "%";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("JOa&dmCUZv&=I5CcLe", stringArray0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      JSONPath jSONPath0 = new JSONPath("%");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("fastjson.parser.autoTypeAccept", "ib\"<xs_", 68, (Map<String, ClientInfoStatus>) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Float float0 = new Float((float) 68);
      jSONPath_FilterSegment0.eval(jSONPath0, sQLNonTransientConnectionException0, float0);
      JSONPath jSONPath1 = JSONPath.compile("%");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      jSONPath1.contains((Object) jSONPath0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("parser.features.NonStringKeyAsString");
      Set<?> set0 = jSONPath0.evalKeySet("parser.features.NonStringKeyAsString");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-2176));
      jSONPath_ArrayAccessSegment0.eval(jSONPath0, set0, set0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath1 = new JSONPath("parser.features.NonStringKeyAsString", serializeConfig0, parserConfig0);
      jSONPath1.contains((Object) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeAccept");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Long long0 = Long.valueOf((-582L));
      long long1 = JSONPath.LENGTH;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[*tL");
      jSONPath_JSONPathParser0.parseArrayAccess(false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeSupport");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.deny.internal");
      jSONPath0.arrayAdd((Object) sQLTransactionRollbackException0, (Object[]) null);
      JSONPath.JSONPathParser.isDigitFirst('@');
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(long0, "/stackTrace/11", false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, (ParserConfig) null);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.parser.autoTypeSupport", 0L, 0L, false);
      JSONPath.compile("fastjson.parser.autoTypeSupport");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeSupport");
      jSONPath_JSONPathParser0.readName();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$IntOpSegement", serializeConfig0, parserConfig0);
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "fastjson.parser.autoTypeAccept", (-2036), sQLSyntaxErrorException0);
      JSONPath.paths((Object) null);
      JSONPath jSONPath1 = new JSONPath("F?MBob96JR");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.alibaba.fastjson.JSONPath$IntOpSegement", "com.alibaba.fastjson.JSONPath$IntOpSegement", sQLTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTimeoutException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("L)gcV7*", "/stackTrace/9");
      jSONPath_KeySetSegment0.eval(jSONPath0, sQLFeatureNotSupportedException0, sQLNonTransientConnectionException0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("(Ljava/util/Collection;");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "NOT_RLIKE";
      stringArray0[1] = "nin";
      stringArray0[2] = "(Ljava/util/Collection;";
      stringArray0[3] = "(Ljava/util/Collection;";
      stringArray0[4] = "nin";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("(Ljava/util/Collection;", stringArray0, true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("(Ljava/util/Collection;");
      jSONPath_JSONPathParser0.filterRest(jSONPath_NullSegement0);
      jSONPath_JSONPathParser0.skipWhitespace();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath jSONPath0 = JSONPath.compile("_LbIQ~wYe]d");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      jSONPath_StringInSegement0.apply(jSONPath0, jSONPath_NullSegement0, jSONPath_WildCardSegment0, jSONPath_Operator0);
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NE;
      JSONPath.Operator.valueOf("NOT_RLIKE");
      JSONPath.WildCardSegment jSONPath_WildCardSegment1 = JSONPath.WildCardSegment.instance_deep;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("NOT_RLIKE");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("com.alibaba.fastjson.JSONPath$RangeSegment", sQLTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.alibaba.fastjson.JSONPath$KeySetSegment");
      String[] stringArray1 = new String[1];
      stringArray1[0] = "[>{B7aMm'*7";
      Object object0 = JSONPath.reserveToArray("nin", stringArray1);
      jSONPath_WildCardSegment1.eval(jSONPath0, sQLIntegrityConstraintViolationException0, object0);
      jSONPath0.remove((Object) null);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("dZ0/+;x}BE&T,}`");
      String[] stringArray0 = new String[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[0] = "onRLL";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("yHn");
      SQLDataException sQLDataException0 = new SQLDataException("P", "JSONPath$PropertySegment", 0, sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("yHn", "onRLL", sQLDataException0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(114, 0, 114);
      jSONPath_RangeSegment0.eval(jSONPath0, "JSONPath$PropertySegment", "onRLL");
      jSONPath0.getPropertyValue("onRLL", "y", 114);
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray((Object) null, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1, 1, 1224736769);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("a'", serializeConfig0, parserConfig0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("v");
      SQLTransientException sQLTransientException0 = new SQLTransientException("JSONPathRPropertySegment", "a'", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.autoTypeAccept", "REG_MATC", 1, sQLTransientException0);
      SQLTransientException sQLTransientException1 = new SQLTransientException("fastjson.parser.deny", "", (-1840870702));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "a'", sQLTransientException1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)55;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONPath_RangeSegment0.eval(jSONPath0, "v", bigInteger0);
      jSONPath0.getPropertyValues(parserConfig0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Long long0 = new Long((-582L));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig.getGlobalInstance();
      Long long1 = new Long(6007332606592876737L);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9");
      jSONPath_JSONPathParser0.skipWhitespace();
      jSONPath_JSONPathParser0.isEOF();
      JSONPath.reserveToObject((Object) null, (String[]) null);
      jSONPath_JSONPathParser0.parseArrayAccess(false);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "between";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("between");
      jSONPath_JSONPathParser0.skipWhitespace();
      jSONPath_JSONPathParser0.next();
      jSONPath_JSONPathParser0.next();
      jSONPath_JSONPathParser0.readSegement();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "99");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // between
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "between";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("between");
      jSONPath_JSONPathParser0.skipWhitespace();
      jSONPath_JSONPathParser0.next();
      jSONPath_JSONPathParser0.readSegement();
      String string1 = "99";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "99");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // between
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("^3(<B_XYR'.  D%:HY");
      Class<Long> class0 = Long.class;
      parserConfig0.register("^3(<B_XYR'.  D%:HY", class0);
      JSONPath.containsValue((Object) serializeConfig0, "fastjson.parser.deny.internal", (Object) serializeConfig0);
      jSONPath0.arrayAdd((Object) null, (Object[]) null);
      Class<JSONPath.ArrayAccessSegment> class1 = JSONPath.ArrayAccessSegment.class;
      JSONPath.isDouble(class1);
      JSONPath.paths((Object) parserConfig0, serializeConfig0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"syntax error, expect \":{\"x\":{}}}";
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(6007332606592876726L);
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"syntax error, expect \":{\"x\":{}}}", longArray0, true);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(116, 4401, (-1321));
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1321));
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntObjInSegement0);
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"syntax error, expect \":{\"x\":{}}}");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"syntax error, expect \":{\"x\":{}}}");
      jSONPath_JSONPathParser0.readString();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"syntax error, expect \":{\"x\":{}}}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" v%zUt");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jSONPath0.getPath();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" v%zUt");
      jSONPath_JSONPathParser0.buildArraySegement(" v%zUt");
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("Y#jm]zDS6f", jSONPath_MaxSegment0, jSONPath_Operator0);
      jSONPath_JSONPathParser0.filterRest(jSONPath_RefOpSegement0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("REG_MATC", serializeConfig0, parserConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("6|C`hN}A/&%ZCeqXs<x");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("'Lkft/7yb");
      jSONPath_JSONPathParser1.skipWhitespace();
      Short short0 = new Short((short) (-1668));
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("6|C`hN}A/&%ZCeqXs<x", "Q;qfkOJ}{0|>sYv_$$]", (-445));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLIntegrityConstraintViolationException0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("(Ljava/lang/Class;", hashMap0, sQLIntegrityConstraintViolationException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0, sQLTimeoutException0);
      Short short1 = new Short((short)1879);
      Pattern pattern0 = Pattern.compile("fastjson.parser.deny");
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.BETWEEN;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("web", pattern0, jSONPath_Operator1);
      DataTruncation dataTruncation0 = new DataTruncation((-445), false, true, 3093, (-492));
      jSONPath_RegMatchSegement0.apply(jSONPath0, map0, jSONPath_JSONPathParser1, dataTruncation0);
      Stack<Object> stack0 = new Stack<Object>();
      jSONPath0.deepGetPropertyValues(pattern0, stack0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Long long0 = new Long(8488266005336625107L);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("java/lang/Boolean");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("java/lang/Boolean");
      JSONPath.JSONPathParser jSONPath_JSONPathParser2 = new JSONPath.JSONPathParser("&N");
      JSONPath.JSONPathParser jSONPath_JSONPathParser3 = new JSONPath.JSONPathParser("&N");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser3.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("dZ0/+;x}BE&T,}`", (Long[]) null, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte)47;
      byteArray0[8] = (byte)47;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((byte)47, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("autoTypeAccept", serializeConfig0, (ParserConfig) null);
      JSONPath jSONPath1 = new JSONPath("autoTypeAccept");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Class<SQLException> class0 = SQLException.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) sQLTransactionRollbackException0;
      objectArray0[1] = (Object) sQLTransactionRollbackException0;
      objectArray0[2] = (Object) jSONPath0;
      objectArray0[3] = (Object) jSONPath0;
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) javaBeanSerializer0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("K@I", serializeConfig0, parserConfig0);
      String string0 = null;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(")~6h.`X");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(")~6h.`X", (String) null, hashMap0, sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(sQLClientInfoException0, "fastjson.parser.deny", true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(1534);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string\"");
      jSONPath_JSONPathParser0.parseArrayAccess(false);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      int int0 = 387;
      JSONPath jSONPath0 = new JSONPath(")>Tm:");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(387);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string\"");
      jSONPath_JSONPathParser0.parseArrayAccess(false);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "alibaba";
      JSONPath.compile("alibaba");
      int[] intArray0 = new int[3];
      int int0 = 9999989;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) propertyNamingStrategy0, "alibaba");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("a");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "a";
      String string0 = "EONBxQu91X&<W";
      stringArray0[2] = "a";
      stringArray0[3] = "a";
      jSONPath0.containsValue((Object) "a", (Object) stringArray0[1]);
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(jSONPath0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = JSONPath.compile("autoTypeAccept");
      JSONPath.compile("1h6UVG<w7UtJ6?N%[O");
      MockDate mockDate0 = new MockDate(2699, 2699, 1);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(42);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("autoTypeAccept", (-2227L), 1, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement1 = new JSONPath.IntBetweenSegement("[q&FKt*h.qk*1]GpG", 1, 1057, true);
      JSONPath.FilterSegment jSONPath_FilterSegment1 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement1);
      Byte byte0 = new Byte((byte)12);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment1 = new JSONPath.ArrayAccessSegment(1978);
      jSONPath_FilterSegment1.eval(jSONPath0, jSONPath_ArrayAccessSegment1, (Object) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("error");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("in");
      JSONPath.Operator jSONPath_Operator0 = jSONPath_JSONPathParser1.readOp();
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("dd", (-2439930098895578154L), jSONPath_Operator0);
      DataTruncation dataTruncation0 = new DataTruncation(2521, false, false, 1136, (-869));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(dataTruncation0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("t", "1h6UVG<w7UtJ6?N%[O", 97, sQLIntegrityConstraintViolationException0);
      DataTruncation dataTruncation1 = new DataTruncation((-1948), true, true, 2162, 72, sQLInvalidAuthorizationSpecException0);
      SQLDataException sQLDataException0 = new SQLDataException("hcn,g-ok", dataTruncation0);
      jSONPath_IntOpSegement0.apply(jSONPath0, dataTruncation1, sQLDataException0, jSONPath_JSONPathParser1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Long long0 = new Long((-1580386065683472715L));
      Random.setNextRandom(56);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("com.alibaba.fastjson.JSONPath$NotNullSegement", "1U]", jSONPath_Operator0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(397);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      JSONPath jSONPath0 = new JSONPath("^'az~Cf");
      jSONPath_FilterSegment0.eval(jSONPath0, "^'az~Cf", (Object) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("^'az~Cf");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("^'az~Cf");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.readSegement();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ^'az~Cf
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("a");
      JSONPath.size((Object) jSONPath0, "fastjson.parser.safeMode");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "a";
      String string0 = "EONBxQu91X&<W";
      stringArray0[1] = "EONBxQu91X&<W";
      stringArray0[2] = "a";
      stringArray0[3] = "a";
      jSONPath0.containsValue((Object) "a", (Object) "EONBxQu91X&<W");
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(jSONPath0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : EONBxQu91X&<W
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)45;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Short short0 = new Short((byte)45);
      JSONPath.eqNotNull((byte)45, short0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("decimal");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("parser.features.NonStringKeyAsString");
      jSONPath0.removePropertyValue("parser.features.NonStringKeyAsString", "parser.features.NonStringKeyAsString", true);
      jSONPath0.evalKeySet("parser.features.NonStringKeyAsString");
      JSONPath.compile("v");
      String string0 = "H~z";
      JSONPath jSONPath1 = new JSONPath("H~z");
      String string1 = "nVTPd";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("H~z", "nVTPd");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(":!", (String) null, 1415);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("H~z");
      sQLNonTransientConnectionException1.getSuppressed();
      PropertyNamingStrategy propertyNamingStrategy0 = serializeConfig0.propertyNamingStrategy;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement(";Y", "l{<Y!l/*%", jSONPath_Operator0);
      MockDate mockDate0 = new MockDate(1415, 39, 1415, 1415, 1415);
      jSONPath_StringOpSegement0.apply(jSONPath1, sQLSyntaxErrorException0, mockDate0, (Object) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("n");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_StringOpSegement0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_Filter0, jSONPath_Filter0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath1, sQLSyntaxErrorException0, ":!");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.util.Map");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("java.util.Map", "AZJ", jSONPath_Operator0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("=ywDeQ[x", serializeConfig0, (ParserConfig) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLException sQLException0 = new SQLException("end must greater than or equals start. start ", sQLTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(batchUpdateException0);
      jSONPath_StringOpSegement0.apply(jSONPath0, sQLTimeoutException0, "java.util.Map", jSONPath_Operator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1132;
      intArray0[2] = 1132;
      JSONPath.compile("alibaba");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      jSONPath_JSONPathParser0.isEOF();
      jSONPath_JSONPathParser0.isEOF();
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) "}bL0=Ctf.czb,Bm", "com.alibaba.fastjson.JSONPath$PropertySegment", (Object[]) jSONPath_SegmentArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path com.alibaba.fastjson.JSONPath$PropertySegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("decimal");
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      jSONPath0.keySet((Object) jSONPath_MaxSegment0);
      JSONPath jSONPath1 = new JSONPath("decimal");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-80);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      jSONPath0.remove((Object) bigInteger0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("REG_MATC", serializeConfig0, parserConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("6|C`hN}A/&%ZCeqXs<x");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("'Lkft/7yb");
      jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      jSONPath0.getJavaBeanDeserializer(class0);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 6|C`hN}A/&%ZCeqXs<x
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(387, (-1518), (-1518));
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("REG_MATC", serializeConfig0, parserConfig0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("7");
      SQLTransientException sQLTransientException0 = new SQLTransientException("7", "JSONPath$PropertySegment", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException("v", "fastjson.parser.deny", 54, sQLTransientException0);
      BigDecimal bigDecimal0 = new BigDecimal((long) 54);
      jSONPath0.eval((Object) bigDecimal0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("YU=w~5]#", false);
      Float float0 = new Float((double) (-1518));
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.setValue(jSONPath0, float0, "YU=w~5]#");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      JSONPath.isDouble(class0);
      String string0 = "lengr]";
      String string1 = "in";
      SQLWarning sQLWarning0 = new SQLWarning("lengr]", "in", 102);
      JSONPath jSONPath0 = new JSONPath("e");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) propertyNamingStrategy0, (Object) "e");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Float float0 = new Float((-2187.844F));
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 1132;
      intArray0[2] = 1132;
      intArray0[3] = 1132;
      intArray0[4] = 1132;
      intArray0[5] = 1132;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/", "PT5mLe", sQLIntegrityConstraintViolationException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTimeoutException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("/", "PT5mLe", 1132, intArray0, batchUpdateException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("PT5mLe", "/", 1132, batchUpdateException1);
      // Undeclared exception!
      try { 
        JSONPath.compare(float0, sQLIntegrityConstraintViolationException1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException cannot be cast to java.lang.Float
         //
         verifyException("java.lang.Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Float float0 = new Float((-2187.844F));
      int[] intArray0 = new int[6];
      intArray0[1] = 1132;
      intArray0[3] = 1132;
      intArray0[4] = 1132;
      intArray0[5] = 1132;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/", "PT5mLe", sQLIntegrityConstraintViolationException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTimeoutException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("/", "PT5mLe", 1132, intArray0, batchUpdateException0);
      // Undeclared exception!
      try { 
        JSONPath.compare(float0, sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException cannot be cast to java.lang.Float
         //
         verifyException("java.lang.Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Long long0 = new Long((-582L));
      long long1 = JSONPath.LENGTH;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("Mh^t", "fastjson.parser.autoTypeAccept", jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Z%kdj.", "X,D*yL");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig1 = new ParserConfig(aSMClassLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("savedrequest", parserConfig1, 4381);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      String string0 = "#H~ER@t uo*;}";
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("#H~ER@t uo*;}", serializeConfig0, parserConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$&}yp,`$FayFF{2c`'u");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("#H~ER@t uo*;}");
      jSONPath_JSONPathParser0.skipWhitespace();
      jSONPath_JSONPathParser1.isEOF();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.autoTypeSupport", "fastjson.parser.autoTypeSupport");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. $&}yp,`$FayFF{2c`'u
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Long long0 = new Long((-582L));
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath jSONPath0 = JSONPath.compile("D+NvYj");
      SerializeConfig serializeConfig0 = new SerializeConfig(57);
      JSONPath jSONPath1 = new JSONPath("sY9hhtf", serializeConfig0, (ParserConfig) null);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("BrowserCompatible", 57, (-2491L), false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("zb=ZyGh_", "not", (-366));
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("BrowserCompatible", hashMap0, sQLTimeoutException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("sY9hhtf", "", 65, map0);
      SQLWarning sQLWarning0 = new SQLWarning("zb=ZyGh_", "BrowserCompatible", 1429, sQLClientInfoException1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "");
      jSONPath_IntBetweenSegement0.apply(jSONPath0, serializeConfig0, sQLTransactionRollbackException0, jSONPath_MaxSegment0);
      JSONPath.keySet((Object) hashMap0, "NJ0");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9^'az~Cf");
      jSONPath_JSONPathParser0.readDoubleValue(2638L);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 9^'az~Cf
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Long long0 = new Long(6007332606592876711L);
      JSONPath jSONPath0 = new JSONPath("\"a string\"");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1437, 1437, 1437);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"a string\"", "\"a string\"");
      Double double0 = new Double((-1663.20300856839));
      JSONPath.eqNotNull(long0, double0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. -
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      Byte byte0 = new Byte((byte)0);
      jSONPath_NotNullSegement0.apply(jSONPath0, "com.alibaba.fastjson.JSONPath$PropertySegment", byte0, byte0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(1534);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":99,\"number\":\"1\"}");
      jSONPath_JSONPathParser0.isEOF();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(")V", "(Ljava/lang/String;)", (byte)0);
      JSONPath jSONPath1 = new JSONPath("]E1L18uK&'[");
      Class<Integer> class0 = Integer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Double double0 = new Double(1534);
      jSONPath1.evalKeySet(double0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "]E1L18uK&'[";
      stringArray0[1] = "(Ljava/lang/String;)";
      stringArray0[2] = "com.alibaba.fastjson.JSONPath$PropertySegment";
      stringArray0[3] = "$mvmgCe_KP\"cpfy(M";
      stringArray0[4] = "zb=ZyGh_";
      JavaBeanSerializer javaBeanSerializer1 = new JavaBeanSerializer(class0, stringArray0);
      // Undeclared exception!
      try { 
        jSONPath1.getPropertyValue(javaBeanSerializer1, ".j>9AjR", (-1040L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "{\"x\":false,\"Map\":7,\"deny\":true,\"a\":[true],\"b\":{}}";
      JSONPath jSONPath0 = JSONPath.compile("{\"x\":false,\"Map\":7,\"deny\":true,\"a\":[true],\"b\":{}}");
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) "{\"x\":false,\"Map\":7,\"deny\":true,\"a\":[true],\"b\":{}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"x\":false,\"Map\":7,\"deny\":true,\"a\":[true],\"b\":{}}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "\"a string\"";
      Long long0 = new Long(6007332606592876682L);
      JSONPath jSONPath0 = new JSONPath("\"a string\"");
      // Undeclared exception!
      try { 
        JSONPath.read("?77v4:pxu'H{", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("bi", serializeConfig0, parserConfig0);
      jSONPath0.remove((Object) parserConfig0);
      jSONPath0.containsValue((Object) null, (Object) null);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JSONPath jSONPath0 = new JSONPath("^");
      JSONPath.containsValue((Object) null, "lM\"R8}g]NO-EB1d", (Object) null);
      Integer integer0 = new Integer(2540);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte) (-125);
      byteArray0[7] = (byte) (-125);
      byteArray0[8] = (byte)73;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      JSONPath.eqNotNull((byte) (-125), (byte) (-125));
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("^");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ^
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONPath.compile(";dtFn5]w:C'~o$I");
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath jSONPath0 = new JSONPath(";dtFn5]w:C'~o$I");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Object[] objectArray0 = new Object[0];
      jSONPath0.arrayAdd((Object) "D+NvYj", objectArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("(Ljava/util/Collection;");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("`K*#JH< AF?3M~", "cDe?", false);
      JSONPath.compile("t");
      JSONPath.compile("`K*#JH< AF?3M~");
      MockDate mockDate0 = new MockDate((-64), 1057, 505);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(1978);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RlikeSegement0);
      JSONPath.FilterSegment jSONPath_FilterSegment1 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      Byte byte0 = new Byte((byte)86);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath(";dtFn5]w:C'~o$I", serializeConfig0, parserConfig0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(Ljava/util/Collection;");
      jSONPath_FilterSegment1.eval(jSONPath0, byte0, propertyNamingStrategy0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("LIKE");
      jSONPath_JSONPathParser0.readSegement();
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("SuWpYa");
      jSONPath_JSONPathParser1.readName();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONPath.compile("alibaba");
      int[] intArray0 = new int[3];
      intArray0[1] = 9999989;
      JSONPath jSONPath0 = JSONPath.compile("|],(RO,");
      MockDate mockDate0 = new MockDate(9999989, 15, 15);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(15);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("=16");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      JSONPath.FilterSegment jSONPath_FilterSegment1 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      JSONPath.FilterSegment jSONPath_FilterSegment2 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      SQLWarning sQLWarning0 = new SQLWarning("write", "java/lang/Boolean", 9999989);
      jSONPath_FilterSegment2.eval(jSONPath0, jSONPath_FilterSegment1, sQLWarning0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("|],(RO,");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readSegement();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. |],(RO,
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Long long0 = new Long((-582L));
      JSONPath.eqNotNull(long0, long0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(45);
      MockDate mockDate0 = new MockDate((-2680), 60, 8);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment1 = new JSONPath.ArrayAccessSegment(8);
      SQLWarning sQLWarning0 = new SQLWarning("REG_MATC");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{";
      stringArray0[1] = "ib\"<xs_";
      stringArray0[2] = "%";
      stringArray0[3] = "REG_MATC";
      stringArray0[4] = "REG_MATC";
      stringArray0[5] = "-7e";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("%", stringArray0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      JSONPath jSONPath0 = new JSONPath("-7e");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("X8", "REG_MATC", 68, (Map<String, ClientInfoStatus>) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      jSONPath_FilterSegment0.eval(jSONPath0, sQLClientInfoException1, sQLNonTransientConnectionException0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("%");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath.compile(",=E*TG");
      JSONPath jSONPath0 = JSONPath.compile(";dtFn5]w:C'~o$I");
      MockDate mockDate0 = new MockDate(90, 90, 487);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(7);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      JSONPath.FilterSegment jSONPath_FilterSegment1 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      Byte byte0 = new Byte((byte)102);
      JSONPath.FilterSegment jSONPath_FilterSegment2 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("/stackTrace/7");
      jSONPath_FilterSegment2.eval(jSONPath0, jSONPath_FilterSegment1, sQLFeatureNotSupportedException0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(";dtFn5]w:C'~o$I");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ;dtFn5]w:C'~o$I
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("G XZq~lzo2{ML", (SerializeConfig) null, parserConfig0);
      JSONPath jSONPath1 = JSONPath.compile("n[:ny");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("org.springframework.security.web.savedrequest.DefaultSavedRequest$Builder");
      jSONPath_JSONPathParser0.skipWhitespace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.springframework.security.web.savedrequest.DefaultSavedRequest$Builder", "fastjson.parser.deny.internal");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("in", "}v<,hU=(w'h//(tJ", sQLTransientConnectionException0);
      JSONPath jSONPath2 = new JSONPath("i6gtgk/.<");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("FXC", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"syntax error, expect \":{\"x\":{}}}", sQLTransientConnectionException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransactionRollbackException0);
      jSONPath2.deepSet(sQLInvalidAuthorizationSpecException0, "4", (-1580386065683472715L), sQLDataException0);
      jSONPath1.size((Object) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("LIKE");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'L, but 'E'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializeConfig serializeConfig0 = new SerializeConfig(38, true);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("WriteSlashAsSpecial", serializeConfig0, parserConfig0);
      JSONPath.contains((Object) "WriteSlashAsSpecial", "WriteSlashAsSpecial");
      DataTruncation dataTruncation0 = new DataTruncation(255, false, false, 255, 1);
      dataTruncation0.fillInStackTrace();
      dataTruncation0.getNextWarning();
      jSONPath0.size((Object) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.serializer.CollectionCodec");
      jSONPath_JSONPathParser0.explain();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("\"a string\"");
      jSONPath0.removePropertyValue("\"a string\"", "\"a string\"", true);
      Set<?> set0 = jSONPath0.evalKeySet("\"a string\"");
      JSONPath jSONPath1 = JSONPath.compile("\"a string\"");
      jSONPath1.evalSize(set0);
      Short short0 = new Short((short) (-1446));
      try { 
        Double.valueOf("\"a string\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("saedreq[bt", "saedreq[bt");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLInvalidAuthorizationSpecException0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.safeMode");
      jSONPath_JSONPathParser0.isEOF();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.autoTypeAccept", "bxZkqC4fI?\"bhSm", 3042);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fastjson.parser.deny.internal", "RLIKE", sQLNonTransientConnectionException0);
      Object object0 = JSONPath.reserveToArray("bxZkqC4fI?\"bhSm", (String[]) null);
      JSONPath.size(object0, "fastjson.parser.deny");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("autoTypeAccept", "autoTypeAccept", false);
      JSONPath.compile(";dtFn5]w:C'~o$I");
      JSONPath.compile("autoTypeAccept");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-125);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      JSONPath.eqNotNull(bigInteger0, (byte) (-125));
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!}9R^MCCS");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but '}'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Long long0 = new Long((-582L));
      long long1 = JSONPath.LENGTH;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      Random.setNextRandom(56);
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("com.alibaba.fastjson.JSONPath$NotNullSegement", "com.alibaba.fastjson.JSONPath$NotNullSegement", jSONPath_Operator1);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$NotNullSegement");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.alibaba.fastjson.JSONPath$NotNullSegement", "1U]");
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("1U]", "com.alibaba.fastjson.JSONPath$NotNullSegement", sQLSyntaxErrorException0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(timeZone0);
      jSONPath_StringOpSegement0.apply(jSONPath0, mockGregorianCalendar0, sQLTransientConnectionException0, mockGregorianCalendar1);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringOpSegement0, jSONPath_StringOpSegement0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      int[] intArray0 = new int[2];
      intArray0[0] = 56;
      intArray0[1] = 56;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      // Undeclared exception!
      try { 
        jSONPath_MultiIndexSegment0.eval(jSONPath0, long0, sQLRecoverableException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Long long0 = new Long((-582L));
      long long1 = JSONPath.LENGTH;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      Random.setNextRandom(56);
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("com.alibaba.fastjson.JSONPath$NotNullSegement", "com.alibaba.fastjson.JSONPath$NotNullSegement", jSONPath_Operator1);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$NotNullSegement");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.alibaba.fastjson.JSONPath$NotNullSegement", "com.alibaba.fastjson.JSONPath$NotNullSegement", 56);
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.alibaba.fastjson.JSONPath$NotNullSegement", "com.alibaba.fastjson.JSONPath$NotNullSegement", sQLSyntaxErrorException0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(timeZone0);
      jSONPath_StringOpSegement0.apply(jSONPath0, mockGregorianCalendar0, sQLTransientConnectionException0, mockGregorianCalendar1);
      JSONPath.compile("token");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      Byte byte0 = new Byte((byte)0);
      JSONPath jSONPath1 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.JSONPath$PropertySegment", parserConfig0, (byte)0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(387, 387, 387);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("REG_MATC", serializeConfig0, parserConfig0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("fastjson.parser.safeMode", "fastjson.parser.deny");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.deny", "\"J+jKpq[,@-sMR", sQLTransientException0);
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("wy", "MOc[If.APlGcb", jSONPath_Operator1);
      JSONPath jSONPath1 = new JSONPath("WriteClassName");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "/");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("savedrequest", parserConfig0, 4381);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      jSONPath_NotNullSegement0.apply(jSONPath0, "com.alibaba.fastjson.JSONPath$PropertySegment", byte1, byte1);
      SQLDataException sQLDataException0 = new SQLDataException("com.alibaba.fastjson.JSONPath$PropertySegment", "com.alibaba.fastjson.JSONPath$PropertySegment", (byte)0);
      String string0 = "*";
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("*", false);
      int int0 = 0;
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("create instance error, class ", 5100336081510080343L, (byte)0, false);
      JSONPath.compile("*");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$PropertySegment");
      jSONPath_JSONPathParser0.explain();
      jSONPath0.isRef();
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("5g6&g8H)IZ$LGz:]<oX");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.parseArrayAccess(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"5g6&g8H)IZ$LGz\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "[]";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[]";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("[]", "[]", "[]", stringArray0, true);
      // Undeclared exception!
      try { 
        JSONPath.extract("between", "[]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(387, (-1518), (-1518));
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("REG_MATC", serializeConfig0, parserConfig0);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("dZ0/+;x}BE&T,}`", "REG_MATC", "g&O)!`.cM=$yf", (String[]) null, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      SQLException sQLException0 = new SQLException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLException0);
      JSONPath.RangeSegment jSONPath_RangeSegment1 = new JSONPath.RangeSegment((-1518), (-1518), 10000000);
      jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_RangeSegment1, (Object) null);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9^'az~Cf");
      JSONPath.JSONPathParser.isDigitFirst('1');
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(11, (-1650), (-1650));
      JSONPath.compile("com.alibaba.fastjson.JSONPath$RegMatchSegement");
      JSONPath jSONPath0 = new JSONPath("IY>6=Re;sTov");
      Class<JSONPath.FilterSegment> class0 = JSONPath.FilterSegment.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Locale locale0 = Locale.CHINA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      jSONPath0.evalKeySet(mockGregorianCalendar0);
      Pattern pattern0 = Pattern.compile("XNKa");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("XNKa", pattern0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RegMatchSegement0);
      JSONPath jSONPath1 = JSONPath.compile("B");
      jSONPath_FilterSegment0.remove(jSONPath1, jSONPath_Operator0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{\"NOT_IN\":\"Apple\",\"size\":\"Large\",\"color\":\"a string\",\"value2\":false}";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("{\"NOT_IN\":\"Apple\",\"size\":\"Large\",\"color\":\"a string\",\"value2\":false}", "{\"NOT_IN\":\"Apple\",\"size\":\"Large\",\"color\":\"a string\",\"value2\":false}", "{\"NOT_IN\":\"Apple\",\"size\":\"Large\",\"color\":\"a string\",\"value2\":false}", stringArray0, true);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      ParserConfig.global = parserConfig0;
      JSONPath jSONPath0 = new JSONPath("{\"NOT_IN\":\"Apple\",\"size\":\"Large\",\"color\":\"a string\",\"value2\":false}", serializeConfig0, parserConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"NOT_IN\":\"Apple\",\"size\":\"Large\",\"color\":\"a string\",\"value2\":false}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"NOT_IN\":\"Apple\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath jSONPath0 = new JSONPath("^");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^";
      JSONPath.reserveToArray((Object) null, stringArray0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("^");
      jSONPath_JSONPathParser0.isEOF();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(11, (-1), (-280));
      JSONPath.compile("com.alibaba.fastjson.JSONPath$RegMatchSegement");
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$RegMatchSegement");
      Class<Integer> class0 = Integer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.evalKeySet(javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String[] stringArray0 = new String[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[0] = "dZ0/+;x}BE&T,}`";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      JSONPath jSONPath0 = new JSONPath("'T'");
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      jSONPath0.deepSet("dZ0/+;x}BE&T,}`", "e4U|5.", 898L, javaBeanDeserializer0);
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("/stackTrace/3", stringArray0, true);
      jSONPath_StringInSegement0.apply(jSONPath0, sQLFeatureNotSupportedException0, jSONPath_KeySetSegment0, javaBeanDeserializer0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("M}<u");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("Xi)n2RDYl'?t}FN=Sx", stringArray0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      JSONPath jSONPath0 = new JSONPath("Xi)n2RDYl'?t}FN=Sx");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((String) null, "mK)E8pd6,]s^q", (-279), (Map<String, ClientInfoStatus>) null);
      Float float0 = new Float((float) (-279));
      jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, float0);
      JSONPath.compile("79;IIIJ:*i}$M;zK&P");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) "Xi)n2RDYl'?t}FN=Sx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : Xi)n2RDYl'?t}FN=Sx
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      Byte byte0 = new Byte((byte)0);
      jSONPath_NotNullSegement0.apply(jSONPath0, "com.alibaba.fastjson.JSONPath$PropertySegment", byte0, byte0);
      SQLDataException sQLDataException0 = new SQLDataException("com.alibaba.fastjson.JSONPath$PropertySegment", "com.alibaba.fastjson.JSONPath$PropertySegment", (byte)0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("*", false);
      Integer integer0 = new Integer((-96));
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      SQLWarning sQLWarning0 = new SQLWarning("Bxq$GN`y+G+*~foa~");
      JSONPath.containsValue((Object) jSONPath_FilterSegment0, "max", (Object) sQLWarning0);
      jSONPath0.getPath();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("pkf>zoe/P)dz^6 pV!", "getSuppressed", 0);
      jSONPath0.keySet((Object) jSONPath_NotNullSegement0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$PropertySegment";
      stringArray0[1] = "getSuppressed";
      stringArray0[2] = "pkf>zoe/P)dz^6 pV!";
      stringArray0[3] = "com.alibaba.fastjson.JSONPath$PropertySegment";
      stringArray0[4] = "B";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("B", stringArray0, false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("B", "pkf>zoe/P)dz^6 pV!", sQLNonTransientConnectionException0);
      DataTruncation dataTruncation0 = new DataTruncation(60, false, true, (-4386), 1115, sQLTimeoutException0);
      jSONPath_StringInSegement0.apply(jSONPath0, (Object) null, sQLTimeoutException0, dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SQLWarning sQLWarning0 = new SQLWarning();
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("vDC1SNR?q~!M_$;=U^", jSONPath_MinSegment0, jSONPath_Operator0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "vDC1SNR?q~!M_$;=U^";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("*b<B?xM", "vDC1SNR?q~!M_$;=U^");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-125);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      JSONPath.eqNotNull((byte) (-125), (byte)47);
      JSONPath jSONPath0 = new JSONPath("writeDouble");
      JavaBeanSerializer javaBeanSerializer0 = null;
      try {
        javaBeanSerializer0 = new JavaBeanSerializer((SerializeBeanInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "dZ0/+;x}BE&T\\,}`";
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("dZ0/+;x}BE&T,}`", (Long[]) null, false);
      JSONPath jSONPath0 = new JSONPath("dZ0/+;x}BE&T,}`");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "onRLL";
      stringArray0[1] = "dZ0/+;x}BE&T,}`";
      stringArray0[2] = "dZ0/+;x}BE&T,}`";
      stringArray0[3] = "dZ0/+;x}BE&T,}`";
      stringArray0[4] = "dZ0/+;x}BE&T,}`";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject((Object) null, stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"+;x}BE&T\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1372), (-1372), 113);
      Float float0 = new Float((-1.0));
      JSONPath.eqNotNull(float0, float0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "not";
      JSONPath.reserveToObject((Object) null, stringArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Long long0 = new Long((-582L));
      long long1 = JSONPath.LENGTH;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("Mh^t", serializeConfig0, parserConfig0);
      JSON.DEFAULT_GENERATE_FEATURE = 110;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!Ye");
      jSONPath_JSONPathParser0.parseArrayAccess(false);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(110);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("pJm@Kg7RoSokw=!n", (long[]) null, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntInSegement0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=ZuEvS`/|H");
      jSONPath_JSONPathParser0.readOp();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      parserConfig0.setAutoTypeSupport(true);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("M%5Mc&=b']x!6o", (String) null, 669, hashMap0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("unsupported array put operation. ", "fastjson.parser.safeMode", 62, sQLClientInfoException0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(62);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      JSONPath jSONPath1 = JSONPath.compile("(I)C");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com", "(I)C", sQLClientInfoException0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath1, (Object) null, sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      SerializeConfig serializeConfig0 = new SerializeConfig(52);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      JSONPath jSONPath0 = new JSONPath("reflect", serializeConfig0, parserConfig0);
      jSONPath0.keySet((Object) null);
      JSONPath jSONPath1 = new JSONPath("^3(<B_XYR'.  D%:HY");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransactionRollbackException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson", "zLRd)[RrEaUMSpr&;G");
      jSONPath_WildCardSegment0.eval(jSONPath1, jSONPath0, sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Short short0 = new Short((short)45);
      JSONPath.paths((Object) short0);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)45;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("BUh?", intArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.autoTypeSupport", "fastjson.parser.autoTypeSupport", batchUpdateException0);
      JSONPath.size((Object) sQLNonTransientConnectionException0, "fastjson.parser.autoTypeSupport");
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONPath jSONPath0 = JSONPath.compile("f<ca-U#C%UF6`c\"Lv");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "f<ca-U#C%UF6`c\"Lv";
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) javaBeanSerializer0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath jSONPath0 = new JSONPath("xA$/j/Zo");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "xA$/j/Zo";
      objectArray0[3] = (Object) sQLTransactionRollbackException0;
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) sQLTransactionRollbackException0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path xA$/j/Zo
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      JSONPath jSONPath0 = JSONPath.compile("decimal");
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath jSONPath1 = new JSONPath("getFieldValue error.");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath_MaxSegment0, (Object[]) longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path decimal
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "com.alibaba.fastjson.JSONPath$PropertySegment";
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      Byte byte0 = new Byte((byte)0);
      jSONPath_NotNullSegement0.apply(jSONPath0, "com.alibaba.fastjson.JSONPath$PropertySegment", byte0, byte0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(1534);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":99,\"number\":\"1\"}");
      jSONPath_JSONPathParser0.isEOF();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(")V", "(Ljava/lang/String;)", (byte)0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment1 = new JSONPath.ArrayAccessSegment(1046);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jSONPath_NotNullSegement0;
      objectArray0[1] = (Object) sQLNonTransientConnectionException0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) jSONPath_NotNullSegement0;
      objectArray0[4] = (Object) "s=_averequest";
      objectArray0[5] = (Object) ")V";
      objectArray0[6] = (Object) jSONPath_JSONPathParser0;
      objectArray0[7] = (Object) jSONPath_ArrayAccessSegment0;
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) sQLTransientException0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path com.alibaba.fastjson.JSONPath$PropertySegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(6007332606592876726L);
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("99", longArray0, true);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("99", serializeConfig0, parserConfig0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2980), (-2980), 40);
      jSONPath_IntObjInSegement0.apply(jSONPath0, jSONPath0, mockGregorianCalendar0, (Object) null);
      JSONPath jSONPath1 = new JSONPath("99");
      int int0 = 3781;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(3781, 4401, (-296));
      String string0 = null;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", (String) null);
      Double double0 = new Double(0.0);
      Long long1 = new Long(4548L);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      jSONPath_RangeSegment0.eval(jSONPath1, long1, sQLTransactionRollbackException0);
      String string1 = "TC=";
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("TC=");
      // Undeclared exception!
      try { 
        jSONPath_IntObjInSegement0.apply(jSONPath1, (Object) null, sQLTransactionRollbackException1, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "rlike";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("rlike");
      jSONPath_JSONPathParser0.readOp();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      JSONPath.isDouble(class0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("Sl={/4E*\"Jr", (-7025218572040030405L), jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = JSONPath.compile("<init>");
      SQLTransientException sQLTransientException0 = new SQLTransientException("Sl={/4E*\"Jr", ";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;");
      SQLWarning sQLWarning0 = new SQLWarning("|#fS^@|JD", sQLTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(88, false, true, 88, (-392), sQLWarning0);
      DataTruncation dataTruncation1 = new DataTruncation(2600, false, false, 2600, 88);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Sl={/4E*\"Jr", "1dgjfcwtAHEo,?3>", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, dataTruncation1);
      jSONPath_IntOpSegement0.apply(jSONPath0, dataTruncation0, dataTruncation1, sQLClientInfoException1);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath1 = new JSONPath("Sl={/4E*\"Jr", serializeConfig0, parserConfig0);
      jSONPath_IntOpSegement0.apply(jSONPath1, classLoader0, "Sl={/4E*\"Jr", jSONPath_Operator0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.safeMode");
      jSONPath_JSONPathParser0.isEOF();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte)110;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      JSONPath.eqNotNull(bigInteger0, (byte)110);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONPath.compile(";dtFn5]w:C'~o$I");
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)47;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      JSONPath.eqNotNull(bigInteger0, (byte)47);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!}9R^MCCS");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but '}'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Long long0 = new Long((-582L));
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath.compile("D+NvYj");
      SerializeConfig serializeConfig0 = new SerializeConfig(57);
      JSONPath jSONPath0 = new JSONPath("sY9hhtf", serializeConfig0, (ParserConfig) null);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("D+NvYj", 6.0073326065928765E18, jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_DoubleOpSegement0, jSONPath_DoubleOpSegement0, true);
      JSONPath jSONPath1 = JSONPath.compile("D+NvYj");
      BigInteger bigInteger0 = BigInteger.ONE;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      jSONPath_FilterGroup0.apply(jSONPath1, jSONPath1, bigInteger0, sQLFeatureNotSupportedException0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("rlike");
      jSONPath_JSONPathParser0.readOp();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1351, 3312, 1351);
      jSONPath0.evalSize(long0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)47;
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      JSONPath.eqNotNull((byte) (-125), (byte) (-125));
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("rlike");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      Byte byte0 = new Byte((byte)0);
      jSONPath_NotNullSegement0.apply(jSONPath0, "com.alibaba.fastjson.JSONPath$PropertySegment", byte0, byte0);
      SQLDataException sQLDataException0 = new SQLDataException("com.alibaba.fastjson.JSONPath$PropertySegment", "com.alibaba.fastjson.JSONPath$PropertySegment", (byte)0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("max", "max", 116, sQLDataException0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("*", true);
      Integer integer0 = new Integer((-96));
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(850, 8, 15);
      jSONPath_PropertySegment0.eval(jSONPath0, sQLDataException0, jSONPath0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("~:qYG7njd6a/9H", sQLDataException0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(116, 64, 0, 0, (-1894));
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("GgNQ%akZ`smY,DT(Z");
      jSONPath_JSONPathParser0.isEOF();
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("EQ", "*", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("max", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      jSONPath_FilterSegment0.remove(jSONPath0, sQLClientInfoException1, "EQ");
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "dZ0/+;x}BE&T\\,}`";
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("dZ0/+;x}BE&T,}`", (Long[]) null, true);
      JSONPath jSONPath0 = new JSONPath("dZ0/+;x}BE&T,}`");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) jSONPath_IntObjInSegement0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"+;x}BE&T\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("99", serializeConfig0, parserConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("99");
      jSONPath_JSONPathParser0.parseArrayAccess(false);
      JSONPath jSONPath1 = new JSONPath("99");
      JSONPath.compile("f");
      jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("xqy$rbt", hashMap0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("~_", "xZP6#> OUx{hfYm", sQLClientInfoException0);
      jSONPath_WildCardSegment0.eval(jSONPath0, (Object) null, sQLTransactionRollbackException0);
      SerializeConfig serializeConfig1 = new SerializeConfig();
      ParserConfig parserConfig1 = ParserConfig.global;
      JSONPath jSONPath2 = new JSONPath("R", serializeConfig1, parserConfig1);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 99
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<JSONPath.SizeSegment> class0 = JSONPath.SizeSegment.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "au>toTypeAccet";
      stringArray0[1] = "|JW1AnZG@kY";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) javaBeanSerializer0, "*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      Byte byte0 = new Byte((byte)0);
      jSONPath_NotNullSegement0.apply(jSONPath0, "com.alibaba.fastjson.JSONPath$PropertySegment", byte0, byte0);
      SQLDataException sQLDataException0 = new SQLDataException("com.alibaba.fastjson.JSONPath$PropertySegment", "com.alibaba.fastjson.JSONPath$PropertySegment", (byte)0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("max", "max", 116, sQLDataException0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("*", true);
      Integer integer0 = new Integer((-96));
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(850, 8, 15);
      jSONPath_PropertySegment0.eval(jSONPath0, sQLDataException0, jSONPath0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      String string0 = "~:qYG7njd6a/9H";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("~:qYG7njd6a/9H", sQLDataException0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(116, 64, 0, 0, (-1894));
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, mockGregorianCalendar0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      Byte byte0 = new Byte((byte)0);
      jSONPath_NotNullSegement0.apply(jSONPath0, "com.alibaba.fastjson.JSONPath$PropertySegment", byte0, byte0);
      SQLDataException sQLDataException0 = new SQLDataException("com.alibaba.fastjson.JSONPath$PropertySegment", "com.alibaba.fastjson.JSONPath$PropertySegment", (byte)0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("*", true);
      Integer integer0 = new Integer((-96));
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((byte)0, 8, 15);
      jSONPath_PropertySegment0.eval(jSONPath0, sQLDataException0, jSONPath0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("~:qYG7njd6a/9H");
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      Byte byte0 = new Byte((byte)0);
      JSONPath jSONPath1 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(128, (byte)0, 128);
      String string0 = "p'EX!%mKg]t7";
      JSONPath jSONPath2 = JSONPath.compile("p'EX!%mKg]t7");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment(" ", false);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(14);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.autoTypeAccept", "V", sQLRecoverableException0);
      jSONPath_PropertySegment0.eval(jSONPath2, jSONPath_ArrayAccessSegment0, sQLInvalidAuthorizationSpecException0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Object object0 = new Object();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now((ZoneId) zoneOffset0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      // Undeclared exception!
      try { 
        jSONPath2.deepSet(thaiBuddhistDate0, "fastjson.parser.deny.internal", 128, jSONPath_SizeSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.time.chrono.ThaiBuddhistDate
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      Pattern pattern0 = Pattern.compile("com.alibaba.fastjson.JSONPath$IntOpSegement");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.alibaba.fastjson.JSONPath$IntOpSegement");
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement(".vW^sweaApzn/", pattern0, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile(".vW^sweaApzn/");
      ParserConfig parserConfig0 = ParserConfig.global;
      ParserConfig.global = parserConfig0;
      pattern0.asPredicate();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("java.util.Collections$Unmodifiable");
      jSONPath_RegMatchSegement0.apply(jSONPath0, pattern0, sQLTimeoutException0, "java.util.Collections$Unmodifiable");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.eq(sQLTimeoutException0, jSONPath_WildCardSegment0);
      JSONPath.reserveToArray(parserConfig0, (String[]) null);
      jSONPath0.evalSize(sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("tzwuz", sQLTimeoutException0);
      Vector<Object> vector0 = new Vector<Object>(4, 93);
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(sQLIntegrityConstraintViolationException0, "fastjson.parser.autoTypeSupport", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path .vW^sweaApzn/, segement fastjson.parser.autoTypeSupport
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("com.alibaba.fastjson.JSONPath$PropertySegment", 4647432019745535567L, (-1823L), true);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      AtomicCodec atomicCodec0 = AtomicCodec.instance;
      serializeConfig0.put((Type) null, (ObjectSerializer) atomicCodec0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("-99", serializeConfig0, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException("-99", "fastjson.parser.deny", (-1922));
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.deny", true);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      jSONPath_PropertySegment0.eval(jSONPath0, sQLDataException0, (Object) null);
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("fastjson.parser.deny", 2555L, jSONPath_Operator0);
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NOT_LIKE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("tzwuz", jSONPath_PropertySegment0, jSONPath_Operator1);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_RefOpSegement0, jSONPath_IntOpSegement0, false);
      long long0 = JSONPath.SIZE;
      Float float0 = new Float(0.0);
      JSONPath.eqNotNull(5614464919154503228L, float0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("-99", "com.alibaba.fastjson.JSONPath$JSONPathParser", (-1894));
      Float float1 = new Float(1.0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("com.alibaba.fastjson.JSONPath$JSONPathParser", jSONPath_IntOpSegement0, false);
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator2 = JSONPath.Operator.GT;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fastjson.parser.safeMode", "fastjson.parser.autoTypeAccept", (-1922));
      jSONPath_ValueSegment0.apply(jSONPath0, jSONPath1, jSONPath_Operator2, sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("wE:@9e", "wE:@9e", false);
      JSONPath jSONPath0 = new JSONPath("wE:@9e");
      MockDate mockDate0 = new MockDate(7, 7, (-1091), 100, 7);
      jSONPath_ValueSegment0.apply(jSONPath0, jSONPath0, jSONPath0, mockDate0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      String string1 = "^";
      JSONPath jSONPath0 = JSONPath.compile("^");
      int int0 = 2540;
      Integer integer0 = new Integer(2540);
      jSONPath0.size((Object) integer0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "^");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("com.alibaba.fastjson.JSONPath$PropertySegment", 4647432019745535567L, (-1823L), true);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      AtomicCodec atomicCodec0 = AtomicCodec.instance;
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("-99", serializeConfig0, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException("-99", "fastjson.parser.deny", (-1922));
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.deny", true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("|JfzKj(ZfP?NyxA");
      jSONPath_JSONPathParser0.buildArraySegement("&qY}]V -m<");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. |JfzKj(ZfP?NyxA
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Long long0 = new Long((-582L));
      long long1 = JSONPath.LENGTH;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("Mh^t", serializeConfig0, parserConfig0);
      String string0 = "[*tL";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[*tL");
      jSONPath_JSONPathParser0.parseArrayAccess(false);
      Class<SQLWarning> class0 = SQLWarning.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. java.sql.SQLWarning
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      String string0 = ")>Tm:";
      JSONPath jSONPath0 = new JSONPath(")>Tm:");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(387);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string\"");
      jSONPath_JSONPathParser0.readValue();
      jSONPath_JSONPathParser0.isEOF();
      Long long0 = new Long(387);
      // Undeclared exception!
      try { 
        JSONPath.size((Object) jSONPath_ArrayAccessSegment0, "t5:/t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : t5:/t
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("pJm@Kg7RoSokw=!n", (long[]) null, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntInSegement0);
      JSONPath jSONPath0 = JSONPath.compile("E");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan("h", "rlike", arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path E, segement rlike
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("autoTypeAccept", serializeConfig0, (ParserConfig) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "autoTypeAccept";
      stringArray0[1] = "autoTypeAccept";
      stringArray0[2] = "autoTypeAccept";
      stringArray0[3] = "autoTypeAccept";
      stringArray0[4] = "autoTypeAccept";
      JSONPath.reserveToArray((Object) null, stringArray0);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("autoTypeAccept", 5614464919154503228L, (-5380336008289393578L), false);
      JSONPath jSONPath1 = JSONPath.compile(".WU=S<C$nm]u");
      jSONPath1.extract((DefaultJSONParser) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}", stringArray0, true);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("ErX9}", serializeConfig0, parserConfig0);
      Class<JSONPath.ArrayAccessSegment> class0 = JSONPath.ArrayAccessSegment.class;
      jSONPath0.getJavaBeanSerializer(class0);
      SQLWarning sQLWarning0 = new SQLWarning();
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      SQLDataException sQLDataException0 = new SQLDataException("can not cast to byte, value : ", sQLWarning0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      JSONPath.contains((Object) jSONPath_FilterSegment0, "f");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(31);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("+ywKDnI1p+Al5TFvj<h", "fastjson.parser.safeMode", 2421);
      jSONPath0.extract((DefaultJSONParser) null);
      JSONPath.size((Object) null, "can not cast to byte, value : ");
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)36;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'Lkft/7yb");
      jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      String[] stringArray0 = new String[0];
      JSONPath.reserveToArray(jSONPath_JSONPathParser0, stringArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Long long0 = new Long((-582L));
      String string0 = "9";
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fieldDeserializer", serializeConfig0, parserConfig0);
      jSONPath0.contains((Object) parserConfig0);
      Long long1 = new Long(6007332606592876737L);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9");
      jSONPath_JSONPathParser0.skipWhitespace();
      int int0 = 3;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.deny");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("PX&SF2qf:JR:SOt", (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("9{5_AilG", "fastjson.parser.deny", (int[]) null, (Throwable) null);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      jSONPath0.set((Object) javaBeanDeserializer0, (Object) sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Long long0 = new Long((-582L));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fieldDeserializer", serializeConfig0, parserConfig0);
      JSONPath.reserveToObject(jSONPath0, (String[]) null);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.parser.deny", (-582L), (-3719L), true);
      JSONPath jSONPath1 = JSONPath.compile("in");
      JSONPath.set((Object) "com", "in", (Object) "fieldDeserializer");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("B+CT\"vq59;.#S.O!v");
      jSONPath1.containsValue((Object) serializeConfig0, (Object) long0);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('C');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'C, but 'B'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Long long0 = new Long((-582L));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fieldDeserializer");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("^a<D", (int[]) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("JY377wCEfI<Nj%+iG");
      JSONPath.eq("JY377wCEfI<Nj%+iG", "fieldDeserializer");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("JY377wCEfI<Nj%+iG");
      jSONPath_JSONPathParser0.readName();
      JSONPath jSONPath0 = JSONPath.compile("JY377wCEfI<Nj%+iG");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("JY377wCEfI", batchUpdateException0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : JY377wCEfI<Nj%+iG
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      Byte byte0 = new Byte((byte)0);
      jSONPath_NotNullSegement0.apply(jSONPath0, "com.alibaba.fastjson.JSONPath$PropertySegment", byte0, byte0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(1534);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("s=_averequest", 1534, jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NotNullSegement0, jSONPath_NotNullSegement0, false);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("_+7{y[qy", "s=_averequest");
      jSONPath_NotNullSegement0.apply(jSONPath0, jSONPath0, sQLRecoverableException0, jSONPath0);
      JSONPath.eqNotNull(byte0, byte0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("6cAn>afGn*9Tf+=p9~");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 6cAn>afGn*9Tf+=p9~
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = "z;Cf\\gh\\KMH";
      JSONPath jSONPath0 = new JSONPath("z;CfghKMH");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "z;CfghKMH", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. z;CfghKMH
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\"}", 2164696723069287854L, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
      JSONPath jSONPath0 = new JSONPath("getName");
      Long long0 = new Long((byte)102);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)102;
      intArray0[3] = (int) (byte)102;
      intArray0[2] = (int) (byte)102;
      jSONPath_IntOpSegement0.apply(jSONPath0, jSONPath0, "getName", "enum");
      ParserConfig parserConfig0 = new ParserConfig(false);
      SerializeConfig.getGlobalInstance();
      Double double0 = new Double(2164696723069287854L);
      JSONPath.IntOpSegement jSONPath_IntOpSegement1 = new JSONPath.IntOpSegement("b,%pq`", (-1356L), jSONPath_Operator0);
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement(".1D3t{IBQBC(K:=}3*$", (-1356L), jSONPath_Operator0);
      JSONPath.eqNotNull(102, double0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("enum");
      jSONPath_JSONPathParser0.readName();
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      jSONPath0.remove((Object) jSONPath_MultiIndexSegment0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Integer integer0 = new Integer(91);
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(integer0, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(";dtFn5]w:C'~o$I");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("M92(tn3pmO/");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement(";dtFn5]w:C'~o$I");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \";dtFn5]w\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("REG_MATC", serializeConfig0, parserConfig0);
      Integer integer0 = new Integer((-1309));
      BigDecimal bigDecimal0 = new BigDecimal((-1309));
      JSONPath.eqNotNull(bigDecimal0, integer0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Long long0 = new Long((-582L));
      JSONPath.eqNotNull(long0, long0);
      String string0 = "{";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{");
      SQLException sQLException0 = new SQLException("JY377wCEfI<Nj%+iG");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{", "{", sQLException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("JY377wCEfI<Nj%+iG", "JY377wCEfI<Nj%+iG", 944, sQLTransientConnectionException0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      long long1 = JSONPath.LENGTH;
      BigDecimal bigDecimal0 = new BigDecimal((long) 944);
      JSONPath.eqNotNull(bigDecimal0, long0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("JY377wCEfI<Nj%+iG");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Long long0 = new Long((-560L));
      JSONPath.eqNotNull(long0, long0);
      SQLException sQLException0 = new SQLException("JY377wCEfI<Nj%+iG");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{", "{", sQLException0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      long long1 = JSONPath.LENGTH;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONPath.eqNotNull(bigDecimal0, long0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("JY377wCEfI<Nj%+iG");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Float float0 = new Float((-2187.844F));
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      JSONPath.isDouble(class0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("like");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("=kPhl|K");
      jSONPath_JSONPathParser1.readOp();
      jSONPath_JSONPathParser0.readSegement();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)45;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      MockRandom mockRandom0 = new MockRandom(3256258368248066264L);
      BigInteger.probablePrime((byte)45, mockRandom0);
      bigInteger0.nextProbablePrime();
      String[] stringArray0 = new String[1];
      String string0 = "%/(]Zr\"3~";
      stringArray0[0] = "%/(]Zr\"3~";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(bigInteger0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. %/(]Zr\"3~
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONPath.JSONPathParser.isDigitFirst('<');
      JSONPath.compile("D+NvYj");
      JSONPath jSONPath0 = JSONPath.compile("D+NvYj");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("D+NvYj", false);
      String[] stringArray0 = new String[0];
      JSONPath.reserveToObject("D+NvYj", stringArray0);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath.MaxSegment jSONPath_MaxSegment1 = JSONPath.MaxSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment1.eval(jSONPath0, jSONPath_MaxSegment0, jSONPath_PropertySegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("{:=Zp#cS(5? EY0", 1.0, jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_DoubleOpSegement0, jSONPath_DoubleOpSegement0, false);
      JSONPath jSONPath0 = JSONPath.compile("U <");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "U <";
      stringArray0[2] = "org";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(jSONPath0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : U <
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(387, (-1518), (-1518));
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("REG_MATCH", serializeConfig0, parserConfig0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.autoTypeSupport", "~");
      SQLWarning sQLWarning0 = new SQLWarning("fastjson.parser.deny");
      sQLNonTransientConnectionException0.initCause(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.autoTypeSupport", "p", sQLWarning0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("p", "[]");
      sQLInvalidAuthorizationSpecException1.getStackTrace();
      jSONPath0.getPropertyValues("~");
      Integer integer0 = new Integer(387);
      jSONPath0.eval((Object) integer0);
      jSONPath0.contains((Object) "REG_MATCH");
      JSONPath.read("[]", "fastjson.parser.deny");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SQLWarning sQLWarning0 = new SQLWarning();
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("A", jSONPath_MinSegment0, jSONPath_Operator0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = JSONPath.compile("vDC1SNR?q~!M_$;=U^");
      SQLWarning sQLWarning1 = new SQLWarning(sQLWarning0);
      jSONPath_MultiPropertySegment0.eval(jSONPath0, jSONPath_RefOpSegement0, sQLWarning1);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath1 = new JSONPath("*b<B?xM", serializeConfig0, parserConfig0);
      jSONPath1.getPath();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath2 = new JSONPath("*b<B?xM", serializeConfig0, parserConfig1);
      jSONPath_RefOpSegement0.apply(jSONPath2, sQLWarning0, "*b<B?xM", parserConfig1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("com.alibaba.fastjson.JSONPath$PropertySegment", jSONPath_Segment0, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("false");
      Byte byte0 = new Byte((byte)68);
      jSONPath_RefOpSegement0.apply(jSONPath0, jSONPath_Segment0, jSONPath0, byte0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = "lexer";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("lexer", "hSg1rjD_H");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("lexer", sQLNonTransientConnectionException0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("com.alibaba.fastjson.JSONPath$SizeSegment", sQLFeatureNotSupportedException0, true);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$WildCardSegment");
      DataTruncation dataTruncation0 = new DataTruncation(569, true, true, 569, 52429, sQLNonTransientConnectionException0);
      jSONPath0.remove((Object) dataTruncation0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("wb(", (-1014497654951707614L), jSONPath_Operator0);
      SerializeConfig serializeConfig0 = null;
      try {
        serializeConfig0 = new SerializeConfig((-1963));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IdentityHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.parser.autoTypeSupport", 0L, 0L, false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("wOSc6ixdr[*b<B?xMg");
      jSONPath_JSONPathParser0.explain();
      Float float0 = new Float((-1615.9588262985405));
      JSONPath.eqNotNull(float0, float0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Long long0 = new Long((-582L));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fieldDeserializer", serializeConfig0, parserConfig0);
      jSONPath0.contains((Object) parserConfig0);
      Long long1 = new Long(6007332606592876737L);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("99");
      jSONPath_JSONPathParser0.skipWhitespace();
      jSONPath_JSONPathParser0.isEOF();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("can't create non-static inner class instance.", "\u0003eCPqH", 64);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLNonTransientException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JSONPath.size((Object) parserConfig0, "NOT_RLIKE");
      Pattern pattern0 = Pattern.compile("ciU!' $!51.", 111);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("fastjson.parser.autoTypeSupport", pattern0, jSONPath_Operator0);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_RegMatchSegement0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_Filter0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = 64;
      intArray0[2] = (-1);
      intArray0[3] = 111;
      intArray0[4] = 111;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      jSONPath_FilterSegment0.eval(jSONPath0, sQLTransientConnectionException0, jSONPath_MultiIndexSegment0);
      jSONPath0.getPropertyValues((Object) null);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      JSONPath jSONPath0 = JSONPath.compile("&7s^J7Z&\"");
      jSONPath0.getPropertyValues((Object) null);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("ib\"<xs_", (-223));
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("org.joda.time.Period", pattern0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("ib\"<xs_");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("ib\"<xs_");
      SQLDataException sQLDataException0 = new SQLDataException(sQLNonTransientException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLDataException0);
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeAccept");
      jSONPath_JSONPathParser0.isEOF();
      jSONPath_JSONPathParser0.buildArraySegement("fastjson.parser.deny.internal");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("B+yT\"vq59;.#S.O!v", propertyNamingStrategy0, true);
      jSONPath_ValueSegment0.apply(jSONPath0, serializeConfig0, serializeConfig0, jSONPath0);
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, (Object) null, serializeConfig0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("lexer", "hSg1rjD_H");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("lexer", sQLNonTransientConnectionException0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("com.alibaba.fastjson.JSONPath$SizeSegment", sQLFeatureNotSupportedException0, true);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$WildCardSegment");
      double double0 = 1490.8534326715462;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      String string0 = "WriteNullNumberAsZero";
      JSONPath.containsValue((Object) "com.alibaba.fastjson.JSONPath$SizeSegment", "WriteNullNumberAsZero", (Object) jSONPath_ValueSegment0);
      jSONPath_ValueSegment0.apply(jSONPath0, sQLNonTransientConnectionException0, sQLFeatureNotSupportedException0, mockGregorianCalendar0);
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("{\"javax.xml.datatype.XMLGregorianCalendar\":99,\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\":false,\"z\":true,\"b\":{}}", longArray0, true);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$Context");
      Integer integer0 = new Integer(2540);
      // Undeclared exception!
      try { 
        JSONPath.extract("SkipTransientField", "\\-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ident
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "PW9";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("UseSingleQuotes", "UseSingleQuotes", "PW9", stringArray0, false);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      String string0 = "REG_MATCH";
      JSONPath jSONPath0 = new JSONPath("REG_MATCH", serializeConfig0, parserConfig0);
      Class<JSONPath.ArrayAccessSegment> class0 = JSONPath.ArrayAccessSegment.class;
      jSONPath0.getJavaBeanSerializer(class0);
      SQLWarning sQLWarning0 = new SQLWarning();
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      SQLDataException sQLDataException0 = new SQLDataException("REG_MATCH", sQLWarning0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      JSONPath.MatchSegement jSONPath_MatchSegement1 = new JSONPath.MatchSegement("I", "I", "fastjson.parser.safeMode", stringArray0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement1);
      JSONPath.contains((Object) "I", "I");
      int int0 = 31;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(31);
      int int1 = 66;
      // Undeclared exception!
      try { 
        MockThaiBuddhistDate.of(66, 91, 91);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 91
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = "{\"fruit\":\"Apple\",\"resolveTask\":false,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":[]}";
      long long0 = (-1621L);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath jSONPath0 = JSONPath.compile("'");
      int int0 = 34;
      jSONPath0.eval((Object) jSONPath_Operator0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(34, 34, (-884));
      jSONPath0.keySet((Object) jSONPath_RangeSegment0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_Operator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(6007332606592876737L);
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[-99],\"ZDi*4H `D&Y)OW.>\":{}}", longArray0, true);
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[-99],\"ZDi*4H `D&Y)OW.>\":{}}");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1437, 1437, 1437);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[-99],\"ZDi*4H `D&Y)OW.>\":{}}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[-99],\"ZDi*4H `D&Y)OW.>\":{}}");
      Double double0 = new Double((-1663.20300856839));
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntObjInSegement0, jSONPath_IntObjInSegement0, false);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.IN;
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("sE%+", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException1.setNextException(sQLTransientConnectionException0);
      sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[-99],\"ZDi*4H `D&Y)OW.>\":{}}", "sE%+", 1437, (Map<String, ClientInfoStatus>) null, sQLClientInfoException1);
      jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_Operator1, jSONPath_SizeSegment0, sQLClientInfoException2);
      JSONPath.RangeSegment jSONPath_RangeSegment1 = new JSONPath.RangeSegment(1437, 1437, 61);
      Byte byte0 = new Byte((byte)110);
      Class<String> class0 = String.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 4647432019745535567L;
      longArray0[1] = 4647432019745535567L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("pJm@Kg7RoSokw=!n", longArray0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntInSegement0);
      JSONPath.compile("com.alibaba.fastjson.JSONPath$PropertySegment");
      Feature feature0 = Feature.ErrorOnEnumNotMatch;
      Feature[] featureArray0 = new Feature[7];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      Feature feature1 = Feature.UseBigDecimal;
      featureArray0[3] = feature1;
      featureArray0[4] = feature0;
      featureArray0[5] = feature0;
      featureArray0[6] = feature0;
      // Undeclared exception!
      try { 
        JSONPath.extract("com.alibaba.fastjson.JSONPath$PropertySegment", (String) null, (ParserConfig) null, 3392903, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("like", true);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("+@A&Jf", serializeConfig0, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment1 = new JSONPath.PropertySegment("PW9", false);
      jSONPath_PropertySegment0.remove(jSONPath0, jSONPath_PropertySegment1);
      JSONPath jSONPath1 = JSONPath.compile("ErX9}");
      jSONPath_PropertySegment0.setValue(jSONPath1, "like", "like");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONPath.containsValue((Object) null, "com.alibaba.fastjson.asm.FieldWriter", (Object) "like");
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("com.alibaba.fastjson.JSONPath$PropertySegment", 4647432019745535567L, (-1823L), true);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      AtomicCodec atomicCodec0 = AtomicCodec.instance;
      serializeConfig0.put((Type) null, (ObjectSerializer) atomicCodec0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("-99", serializeConfig0, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException("-99", "fastjson.parser.deny", (-1922));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("R>IU3UDA%h{zdjHK[F!", "fastjson.parser.safeMode", (-1894), sQLDataException0);
      jSONPath_IntBetweenSegement0.apply(jSONPath0, jSONPath0, sQLDataException0, sQLSyntaxErrorException0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.deny", true);
      Integer integer0 = new Integer(0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1894), (-1894), 0);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, integer0, jSONPath_RangeSegment0);
      sQLSyntaxErrorException0.setNextException(sQLDataException0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("D=p%c)pnukDJsaA", sQLSyntaxErrorException0);
      jSONPath_PropertySegment0.remove(jSONPath0, sQLSyntaxErrorException0);
      Object object1 = new Object();
      jSONPath0.deepSet(object0, "fastjson.parser.deny", 1813L, integer0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) atomicCodec0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. -99
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("yyyy/MM/dd HH:mm:ss");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("yyyy/MM/dd HH:mm:ss", 8963398325558730460L, 902L, true);
      jSONPath_JSONPathParser0.filterRest(jSONPath_IntBetweenSegement0);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/11");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("yyyy/MM/dd HH:mm:ss", "m");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/stackTrace/11", sQLRecoverableException0);
      jSONPath0.removePropertyValue(sQLTimeoutException0, "m", true);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Long long0 = new Long((-582L));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fieldDeserializer", serializeConfig0, parserConfig0);
      jSONPath0.contains((Object) parserConfig0);
      Long long1 = new Long(6007332606592876737L);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.deny.internal");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(43, 8, 40);
      jSONPath0.evalSize(jSONPath_RangeSegment0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("7", "fastjson.parser.autoTypeSupport", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException("saedreq[bt", "99", (-1441), sQLTimeoutException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.deny", "yVS`2%LF,F\"dL}y", sQLDataException0);
      JSONPath.RangeSegment jSONPath_RangeSegment1 = new JSONPath.RangeSegment((-1441), (-201), (-2387));
      // Undeclared exception!
      jSONPath_RangeSegment1.eval(jSONPath0, jSONPath0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      Float float0 = new Float(0.0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath.compile("99");
      JSONPath jSONPath0 = new JSONPath("99");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1, 1, 1437);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeAccept");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("+6]`BgL')<Wh$E&w");
      JSONPath.JSONPathParser jSONPath_JSONPathParser2 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeSupport");
      JSONPath.JSONPathParser jSONPath_JSONPathParser3 = new JSONPath.JSONPathParser("+6]`BgL')<Wh$E&w");
      jSONPath_JSONPathParser3.readValue();
      JSONPath.JSONPathParser jSONPath_JSONPathParser4 = new JSONPath.JSONPathParser("&N");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser2.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONPath.JSONPathParser.isDigitFirst('1');
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(11, (-1650), (-1650));
      JSONPath jSONPath0 = new JSONPath("IY>6=Re;sTov");
      Locale locale0 = Locale.CHINA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, '1', '1');
      jSONPath0.evalKeySet(mockGregorianCalendar0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("IY>6=Re;sTov");
      jSONPath_JSONPathParser0.parseArrayAccess(false);
      jSONPath_JSONPathParser0.buildArraySegement("XNKa");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. IY>6=Re;sTov
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("YM}nYYwy`'");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Long long0 = new Long((-582L));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fieldDeserializer", serializeConfig0, parserConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("99");
      jSONPath_JSONPathParser0.parseArrayAccess(false);
      JSONPath jSONPath1 = new JSONPath("fieldDeserializer");
      boolean boolean0 = false;
      jSONPath1.removePropertyValue(parserConfig0, "n", false);
      String string0 = "f";
      JSONPath.compile("f");
      short short0 = (short)160;
      ParserConfig.global = parserConfig0;
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("mK)E8pd6,]s^q");
      JSONPath jSONPath0 = new JSONPath("mK)E8pd6,]s^q");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(" {rC=", "%", 124, hashMap0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Float float0 = new Float((-1.0F));
      JSONPath jSONPath1 = JSONPath.compile("%");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.alibaba.fastjson.serializer.LongCodec", "Xs ?");
      jSONPath1.contains((Object) sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Long long0 = new Long((-582L));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fieldDeserializer", serializeConfig0, parserConfig0);
      jSONPath0.contains((Object) parserConfig0);
      Long long1 = new Long(6007332606592876737L);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9");
      jSONPath_JSONPathParser0.skipWhitespace();
      jSONPath_JSONPathParser0.isEOF();
      JSONPath.reserveToObject((Object) null, (String[]) null);
      MockDate mockDate0 = new MockDate(196, 196, (-477), 0, 6048, 1584);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("set", sQLClientInfoException0);
      sQLRecoverableException0.addSuppressed(sQLClientInfoException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLRecoverableException0);
      Object object0 = new Object();
      SQLDataException sQLDataException0 = new SQLDataException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      Byte byte0 = new Byte((byte) (-68));
      JSONPath.contains((Object) byte0, ",");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1801));
      jSONPath0.arrayAdd((Object) mockDate0, (Object[]) null);
      jSONPath0.setPropertyValue(jSONPath_JSONPathParser0, "nin", (-7025218572040030405L), object0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Long long0 = new Long((-582L));
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath jSONPath0 = JSONPath.compile("D+NvYj");
      SerializeConfig serializeConfig0 = new SerializeConfig(57);
      JSONPath jSONPath1 = new JSONPath("sY9hhtf", serializeConfig0, (ParserConfig) null);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("D+NvYj", 6.0073326065928765E18, jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_DoubleOpSegement0, jSONPath_DoubleOpSegement0, true);
      JSONPath jSONPath2 = JSONPath.compile("D+NvYj");
      BigInteger bigInteger0 = BigInteger.ONE;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      jSONPath_FilterGroup0.apply(jSONPath2, jSONPath2, bigInteger0, sQLFeatureNotSupportedException0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("rlike");
      jSONPath_JSONPathParser0.readOp();
      JSONPath.keySet((Object) jSONPath0, "writeDouble");
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Long long0 = new Long((-582L));
      long long1 = JSONPath.LENGTH;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.IN;
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("n;O+}0}mW]0|4Qa", "sE%+", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException2.setNextException(sQLClientInfoException1);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("parser", "ea+E*nq{h?O", 12, (Map<String, ClientInfoStatus>) null, sQLClientInfoException2);
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("ea+E*nq{h?O", (-582L), jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_DoubleOpSegement0, jSONPath_DoubleOpSegement0, true);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      JSONPath jSONPath0 = new JSONPath(", !K,a_JF", (SerializeConfig) null, parserConfig0);
      jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_Operator1, (Object) null, (Object) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(", !K,a_JF");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. , !K,a_JF
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("mK)E8pd6,]s^q");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, true);
      JSONPath jSONPath0 = JSONPath.compile("R7k\"oxbeNoV,o");
      BigInteger bigInteger0 = BigInteger.ONE;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Byte byte0 = new Byte((byte)13);
      jSONPath_FilterGroup0.apply(jSONPath0, byte0, (Object) null, bigInteger0);
      String string0 = null;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = null;
      try {
        jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(6007332606592876737L);
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("\"a string\"", longArray0, true);
      JSONPath jSONPath0 = new JSONPath("\"a string\"");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1437, 1437, 1437);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"a string\"", "\"a string\"");
      Double double0 = new Double((-1663.20300856839));
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntObjInSegement0, jSONPath_IntObjInSegement0, false);
      JSONPath.eqNotNull(long0, double0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. -
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      Double double0 = new Double((-1663.20300856839));
      JSONPath.eqNotNull(double0, double0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("D+NvYj");
      jSONPath_JSONPathParser0.readName();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = "";
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(6007332606592876726L);
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"syntax error, expect \":{\"x\":{}}}", longArray0, true);
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"syntax error, expect \":{\"x\":{}}}");
      int int0 = 116;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(116, 4401, (-1321));
      String string1 = null;
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        JSONPath.compare(long0, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.math.BigInteger cannot be cast to java.lang.Long
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      Byte byte0 = new Byte((byte)0);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("REG_MATC", (-648L), 1796L, true);
      JSONPath jSONPath1 = JSONPath.compile("S8!$5Hw");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("REG_MATC");
      jSONPath_JSONPathParser0.explain();
      jSONPath_JSONPathParser0.isEOF();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("B+CT\"vq59;.#S.O!v", "com.alibaba.fastjson.JSONPath$PropertySegment", 25);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("]E1L18uK&'[", (String) null, sQLNonTransientConnectionException0);
      JSONPath.size((Object) sQLNonTransientConnectionException0, "wce");
      SQLException sQLException0 = new SQLException();
      sQLException0.addSuppressed(sQLSyntaxErrorException0);
      sQLNonTransientConnectionException0.setNextException(sQLException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("(X", "LIKE", 25, sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath1, "com.alibaba.fastjson.JSONPath$PropertySegment", 3747, sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9^'az~Cf");
      Long long0 = new Long((-1580386065683472715L));
      Random.setNextRandom(56);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("com.alibaba.fastjson.JSONPath$NotNullSegement", "1U]", jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("9^'az~Cf");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("1U]", "com.alibaba.fastjson.JSONPath$NotNullSegement");
      jSONPath_StringOpSegement0.apply(jSONPath0, "9^'az~Cf", "1U]", sQLSyntaxErrorException0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringOpSegement0, jSONPath_StringOpSegement0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      Pattern pattern0 = Pattern.compile("9^'az~Cf");
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.IN;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("", pattern0, jSONPath_Operator1);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("1U]", "`b4[GifM9N;-7X");
      jSONPath_RegMatchSegement0.apply(jSONPath0, (Object) null, jSONPath_JSONPathParser0, sQLSyntaxErrorException1);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("ib\"<xs_", (-223));
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("org.joda.time.Period", pattern0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("ib\"<xs_");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("ib\"<xs_");
      SQLDataException sQLDataException0 = new SQLDataException(sQLNonTransientException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLDataException0);
      Short short0 = new Short((short)1879);
      jSONPath_RegMatchSegement0.apply(jSONPath0, "ib\"<xs_", sQLClientInfoException0, short0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}", stringArray0, true);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("ErX9}", serializeConfig0, parserConfig0);
      Class<JSONPath.ArrayAccessSegment> class0 = JSONPath.ArrayAccessSegment.class;
      jSONPath0.getJavaBeanSerializer(class0);
      SQLWarning sQLWarning0 = new SQLWarning();
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath jSONPath1 = JSONPath.compile("ErX9}");
      jSONPath1.evalSize((Object) null);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-2508);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("ErX9}", "fastjson.parser.deny.internal");
      JSONPath jSONPath2 = new JSONPath("fastjson.parser.deny");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLWarning0);
      Long long0 = new Long((-1));
      jSONPath1.set((Object) null, (Object) long0, true);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("FH$B7o", 1.0E9, jSONPath_Operator0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(100, (-790), (-1));
      jSONPath_DoubleOpSegement0.apply(jSONPath0, "ErX9}", jSONPath_RangeSegment0, jSONPath2);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(387, (-1518), (-1518));
      SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(false);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "com.alibaba.fastjson.JSONPath$StringOpSegement", 1449);
      JSONPath.eq(sQLDataException0, (Object) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("sE", "fastjson.parser.autoTypeSupport", 3579);
      SQLWarning sQLWarning0 = new SQLWarning("]mladz)@~}E", sQLTimeoutException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fastjson.parser.safeMode", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":false,\"b\":{}}");
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("decimal");
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      jSONPath0.keySet((Object) jSONPath_MaxSegment0);
      JSONPath jSONPath1 = new JSONPath("getFieldValue error.");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<SQLTransientException> class0 = SQLTransientException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      JSONPath.eq(throwableDeserializer0, (Object) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny.internal");
      jSONPath_JSONPathParser0.readName();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("*P7G\"xEl;Bf", (-3169.236949064712), jSONPath_Operator0);
      JSONPath.compile("*P7G\"xEl;Bf");
      ParserConfig parserConfig0 = new ParserConfig(false);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("!4^4^CvP<?", serializeConfig0, parserConfig0);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      jSONPath0.getJavaBeanSerializer(class0);
      SQLWarning sQLWarning0 = new SQLWarning();
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      SQLDataException sQLDataException0 = new SQLDataException("'[Qd<,DT)f", sQLWarning0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JSONPath.contains((Object) propertyNamingStrategy0, "com.alibaba.fastjson.JSONPath$ValueSegment");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(31);
      // Undeclared exception!
      try { 
        MockThaiBuddhistDate.of(17, 17, 1016);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 17
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("Sl={/4E*\"Jr", (-7025218572040030405L), jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("Sl={/4E*\"Jr", serializeConfig0, parserConfig0);
      jSONPath_IntOpSegement0.apply(jSONPath0, classLoader0, "Sl={/4E*\"Jr", jSONPath_Operator0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.safeMode");
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("autoTypeAccept", "autoTypeAccept", false);
      JSONPath jSONPath0 = JSONPath.compile(";dtFn5]w:C'~o$I");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("illeal jsonpath syntax. ", true);
      jSONPath_RlikeSegement0.apply(jSONPath0, "illeal jsonpath syntax. ", jSONPath_PropertySegment0, jSONPath_PropertySegment0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("autoTypeAccept", "illeal jsonpath syntax. ", 1864, (Throwable) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      long long0 = JSONPath.LENGTH;
      BigDecimal bigDecimal0 = new BigDecimal((long) 1864);
      JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONPath.compile(";dtFn5]w:C'~o$I");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("(FZ)V");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. (FZ)V
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}", stringArray0, true);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("ErX9}", serializeConfig0, parserConfig0);
      Class<JSONPath.ArrayAccessSegment> class0 = JSONPath.ArrayAccessSegment.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      SQLWarning sQLWarning0 = new SQLWarning();
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      SQLDataException sQLDataException0 = new SQLDataException("can not cast to byte, value : ", sQLWarning0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      JSONPath.contains((Object) jSONPath_FilterSegment0, "f");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}", (-541), hashMap0, sQLWarning0);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues(hashMap0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("!$8WA!Y/wi", sQLDataException0);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("!$8WA!Y/wi", list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("TT", hashMap0, (Throwable) null);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("TT", map0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLClientInfoException1);
      JSONPath.paths((Object) sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("^3(<B_XYR'.  D%:HY", serializeConfig0, parserConfig0);
      Class<Long> class0 = Long.class;
      parserConfig0.register("^3(<B_XYR'.  D%:HY", class0);
      JSONPath.containsValue((Object) serializeConfig0, "fastjson.parser.deny.internal", (Object) serializeConfig0);
      jSONPath0.arrayAdd((Object) null, (Object[]) null);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("G*S!O^;J_80cC_w", ">{BJ7aMm'", "fastjson.parser.deny.internal", (String[]) null, false);
      Class<JSONPath.ArrayAccessSegment> class1 = JSONPath.ArrayAccessSegment.class;
      JSONPath.isDouble(class1);
      JSONPath.remove((Object) jSONPath0, "yyyy/MM/dd");
      JSONPath.paths((Object) parserConfig0, serializeConfig0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = "ojWB(MWFhlMPJ{g";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ojWB(MWFhlMPJ{g", (String) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "keySet", "", 1090);
      sQLNonTransientConnectionException0.fillInStackTrace();
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLNonTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath.paths((Object) sQLNonTransientConnectionException0, serializeConfig0);
      // Undeclared exception!
      try { 
        JSONPath.compare(serializeConfig0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLSyntaxErrorException0);
      JSONPath.paths((Object) sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("between");
      jSONPath_JSONPathParser0.skipWhitespace();
      // Undeclared exception!
      try { 
        JSONPath.extract("d]EA]*", "$!Sg)/eld!+)1#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. $!Sg)/eld!+)1#
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("com.alibaba.fastjson.JSONPath$PropertySegment", 4647432019745535567L, (-1823L), true);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      AtomicCodec atomicCodec0 = AtomicCodec.instance;
      serializeConfig0.put((Type) null, (ObjectSerializer) atomicCodec0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("{\"b\":{},\"DisableCircularReferenceDetect\":\"hello\",\"z\":[],\"y\":7,\"a\":[null]}", serializeConfig0, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException("{\"b\":{},\"DisableCircularReferenceDetect\":\"hello\",\"z\":[],\"y\":7,\"a\":[null]}", "fastjson.parser.deny", (-1922));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("R>IU3UDA%h{zdjHK[F!", "fastjson.parser.safeMode", (-1894), sQLDataException0);
      jSONPath_IntBetweenSegement0.apply(jSONPath0, jSONPath0, sQLDataException0, sQLSyntaxErrorException0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.deny", true);
      Integer integer0 = new Integer(0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1894), (-1894), 0);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, integer0, jSONPath_RangeSegment0);
      sQLSyntaxErrorException0.setNextException(sQLDataException0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("D=p%c)pnukDJsaA", sQLSyntaxErrorException0);
      Object object1 = new Object();
      jSONPath0.deepSet(object0, "fastjson.parser.deny", 1813L, integer0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) atomicCodec0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"b\":{},\"DisableCircularReferenceDetect\":\"hello\",\"z\":[],\"y\":7,\"a\":[null]}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Long long0 = new Long(8488266005336625107L);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      ParserConfig parserConfig1 = new ParserConfig(true);
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig1);
      JSONPath jSONPath2 = new JSONPath("min", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2285, 2285, 977);
      // Undeclared exception!
      try { 
        jSONPath2.removeArrayItem(jSONPath1, (Object) null, 2285);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Long long0 = new Long((-582L));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fieldDeserializer", serializeConfig0, parserConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("99");
      jSONPath_JSONPathParser0.parseArrayAccess(false);
      JSONPath jSONPath1 = new JSONPath("fieldDeserializer");
      jSONPath1.removePropertyValue(parserConfig0, "n", false);
      JSONPath.compile("f");
      Short short0 = new Short((short)160);
      jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("GgNQ%akZ`smY,DT(Z", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V");
      sQLTimeoutException0.printStackTrace();
      jSONPath0.evalKeySet(sQLTimeoutException0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("f");
      JSONPath.JSONPathParser jSONPath_JSONPathParser2 = new JSONPath.JSONPathParser("fastjson.parser.safeMode");
      jSONPath_JSONPathParser2.isEOF();
      DataTruncation dataTruncation0 = new DataTruncation((-1089288762), false, false, (short)160, (-2422), sQLTimeoutException0);
      dataTruncation0.getNextWarning();
      // Undeclared exception!
      try { 
        jSONPath1.removeArrayItem(jSONPath0, (Object) null, (short)160);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = "";
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(6007332606592876726L);
      longArray0[2] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"syntax error, expect \":{\"x\":{}}}", longArray0, false);
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"syntax error, expect \":{\"x\":{}}}");
      int int0 = 116;
      jSONPath_IntObjInSegement0.apply(jSONPath0, jSONPath0, "", (Object) null);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(116, 4391, (-1300));
      String string1 = null;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", (String) null);
      Double double0 = new Double(0.0);
      Long long1 = new Long(4548L);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, long1, sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONPath.compile(";dtFn5]w:C'~o$I");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      Float float0 = new Float((double) (byte)47);
      JSONPath.eqNotNull((byte)47, float0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(387, (-1518), (-1518));
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("REG_MATC", serializeConfig0, parserConfig0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("fastjson.parser.safeMode", "fastjson.parser.deny");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.deny", "iA}ly", sQLTransientException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/", "\"J+jKpq[,@-sMR", sQLTimeoutException0);
      DataTruncation dataTruncation0 = new DataTruncation(3294, false, false, 115, 5515, sQLTimeoutException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("fastjson.parser.deny");
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("fastjson.parser.deny.internal", "fastjson.parser.deny", 2434);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("a4`\"kGVVMfUECZi%//", "fastjson.parser.safeMode", 2434, sQLTimeoutException0);
      jSONPath_NullSegement0.apply(jSONPath0, sQLTimeoutException1, (Object) null, sQLTransactionRollbackException0);
      sQLTransientConnectionException0.getLocalizedMessage();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      jSONPath_NullSegement0.apply(jSONPath0, sQLFeatureNotSupportedException1, serializeConfig0, (Object) null);
      JSONPath.remove((Object) sQLTimeoutException0, "fastjson.parser.safeMode");
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      jSONPath0.size((Object) sQLTransientException0);
      jSONPath0.remove((Object) serializeConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeAccept");
      JSONPath.compile("fastjson.parser.autoTypeSupport");
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig.getGlobalInstance();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      JSONPath.compile("fastjson.parser.autoTypeSupport");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("n", (-583.8146906574725), jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_DoubleOpSegement0, jSONPath_DoubleOpSegement0, false);
      JSONPath.compile("fastjson.parser.autoTypeAccept");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "fastjson.parser.autoTypeSupport";
      stringArray0[1] = "*";
      stringArray0[2] = "fastjson.parser.deny.internal";
      stringArray0[3] = "fastjson.parser.deny.internal";
      JSONPath.reserveToObject(jSONPath_FilterGroup0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      int int0 = 65;
      Random.setNextRandom(65);
      BigInteger bigInteger0 = BigInteger.ONE;
      String[] stringArray0 = new String[0];
      JSONPath.reserveToObject(bigInteger0, stringArray0);
      String string0 = "json-path can not be null or empty";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("json-path can not be null or empty");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig.getGlobalInstance();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(">*\"cTsI>t~0i*{!qf");
      JSONPath.reserveToObject(jSONPath_JSONPathParser0, (String[]) null);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Long long0 = new Long((-582L));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fieldDeserializer", serializeConfig0, parserConfig0);
      jSONPath0.contains((Object) parserConfig0);
      Long long1 = new Long(6007332606592876737L);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("99");
      jSONPath_JSONPathParser0.skipWhitespace();
      jSONPath_JSONPathParser0.isEOF();
      JSONPath.reserveToObject((Object) null, (String[]) null);
      MockDate mockDate0 = new MockDate(196, 196, (-477), 0, 6048, 1584);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("set", sQLClientInfoException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLRecoverableException0);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("K;-_t", (-3851359326990528739L), 410L, false);
      Float float0 = Float.valueOf((float) (-582L));
      jSONPath_IntBetweenSegement0.apply(jSONPath0, "set", jSONPath0, float0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$&}yp,`$FayFF{2c`'u");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("fastjson.parser.deny.internal");
      MockDate mockDate0 = new MockDate(3, (-1955), (-1955));
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.deny.internal", "fastjson.parser.autoTypeSupport", (String) null, (String[]) null, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      JSONPath jSONPath1 = new JSONPath("country", serializeConfig0, parserConfig0);
      jSONPath_JSONPathParser1.readSegement();
      jSONPath_JSONPathParser0.readName();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fieldDeserializer", serializeConfig0, parserConfig0);
      jSONPath0.contains((Object) parserConfig0);
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(6007332606592876737L);
      longArray0[2] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("99", longArray0, true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("99");
      jSONPath_JSONPathParser0.isEOF();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{\"x\":\"a string\",\"y\":7,\", class \":true,\"a\":[-99],\"ZDi*4H `D&Y)OW.>\":{}}", "99");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fieldDeserializer", "fastjson.parser.autoTypeSupport", sQLTransientConnectionException0);
      jSONPath0.deepSet(longArray0[1], "fastjson.parser.safeMode", (long) longArray0[2], sQLTransactionRollbackException0);
      jSONPath0.getPath();
      Class<SQLWarning> class0 = SQLWarning.class;
      JSONPath.isInt(class0);
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("yHn!IHoiM4`", hashMap0, sQLTransactionRollbackException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("fieldDeserializer", "fieldDeserializer", map0, sQLClientInfoException0);
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, (Object) null, sQLClientInfoException1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONPath.JSONPathParser.isDigitFirst('d');
      String string0 = "o|:c&U+\"*d";
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("o|:c&U+\"*d", serializeConfig0, parserConfig0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("m");
      jSONReaderScanner0.scanNumber();
      char char0 = 'O';
      String string1 = "%02d";
      jSONPath0.evalKeySet("m");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      parserConfig0.setDefaultClassLoader(classLoader1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("%02d", (Throwable) null);
      sQLTransientConnectionException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - m, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONPath.JSONPathParser.isDigitFirst('1');
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(11, (-1650), (-1650));
      JSONPath jSONPath0 = new JSONPath("IY>6=Re;sTov");
      Locale locale0 = Locale.CHINA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, '1', '1');
      jSONPath0.evalKeySet(mockGregorianCalendar0);
      Pattern.compile("XNKa");
      JSONPath.RangeSegment jSONPath_RangeSegment1 = new JSONPath.RangeSegment((-1650), 11, 2285);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = "evalKeySet error : ";
      JSONPath jSONPath0 = new JSONPath("evalKeySet error : ");
      String string1 = "yHn!IHoiM4`";
      int int0 = 0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("yHn!IHoiM4`", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":[]}", 0);
      SQLWarning sQLWarning0 = new SQLWarning("yHn!IHoiM4`", sQLTimeoutException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLWarning0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) "{\"fruit\":\"Apple\",\"size\":-99,\"color\":\"B]&CV1A]Jygs~w\",\"value\":true,\"value2\":false,\"number\":\"a string\"}", "yHn!IHoiM4`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : yHn!IHoiM4`
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = "like";
      JSONPath jSONPath0 = JSONPath.compile("rlike");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "like";
      stringArray0[1] = "like";
      stringArray0[2] = "like";
      stringArray0[3] = "rlike";
      stringArray0[4] = "like";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      jSONPath0.setPropertyValue("rlike", "rlike", (-1730L), jSONPath_MultiPropertySegment0);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. java.sql.SQLTransientException
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (int[]) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      JSONPath.eq(batchUpdateException0, sQLTransientConnectionException0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("C");
      jSONPath_JSONPathParser0.readName();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath.reserveToArray(serializeConfig0, (String[]) null);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("WI`>%7Ca*U&3%yA");
      jSONPath_JSONPathParser0.readName();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      Float float0 = new Float(0.0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath jSONPath0 = JSONPath.compile("99");
      JSONPath jSONPath1 = new JSONPath("99");
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      jSONPath1.getPropertyValue(mockGregorianCalendar0, ":A@ZFVo", 8963398325558730460L);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1, 1, 1437);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.safeMode", "fastjson.parser.autoTypeAccept");
      Double double0 = new Double(0.0);
      jSONPath_RangeSegment0.eval(jSONPath1, "99", jSONPath0);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) "99", "99");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 99
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = "";
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(6007332606592876726L);
      longArray0[2] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("true", longArray0, true);
      JSONPath jSONPath0 = new JSONPath("true");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(116, 4391, (-1300));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", (String) null);
      Byte byte0 = new Byte((byte)44);
      Object object0 = null;
      jSONPath0.getPropertyValue(long0, (String) null, 4391);
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      Class<Double> class0 = Double.class;
      jSONPath0.getJavaBeanSerializer(class0);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      UUID uUID0 = MockUUID.fromString("REG_MATCH");
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, uUID0, bigInteger0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = ";dtFn5]w:C'~o$I";
      JSONPath.compile(";dtFn5]w:C'~o$I");
      JSONPath jSONPath0 = new JSONPath(";dtFn5]w:C'~o$I");
      Double double0 = new Double((byte)47);
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ;dtFn5]w:C'~o$I
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "D+Zl^7s>", 973);
      sQLTransactionRollbackException0.getSuppressed();
      sQLTransactionRollbackException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) sQLTransactionRollbackException0, "@[U!9{z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. @[U!9{z
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.gcd(bigInteger1);
      MockDate mockDate0 = new MockDate();
      JSONPath.eval((Object) mockDate0, "deny");
      bigInteger0.not();
      JSONPath.eqNotNull(bigInteger0, bigInteger0);
      Locale locale0 = Locale.FRENCH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("60A$@", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 60A$@
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(663);
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      JSONPath jSONPath0 = new JSONPath("alibaba", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, "O.iXq[e!_5`\"`mHMB", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Long long0 = new Long(8488266005336625107L);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("^&'G!");
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.alibaba.fastjson.JSONPath$RegMatchSegement", "com.alibaba.fastjson.JSONPath$RegMatchSegement", sQLDataException0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("^&'G!");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ^&'G!
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = "";
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(6007332606592876726L);
      longArray0[2] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"syntax error, expect \":{\"x\":{}}}", longArray0, true);
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"syntax error, expect \":{\"x\":{}}}");
      int int0 = 116;
      int int1 = 4391;
      int int2 = (-1300);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"syntax error, expect \":{\"x\":{}}}");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"syntax error, expect \":{\"x\":{}}}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONPath.compile("decimal");
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONPath.eqNotNull(bigInteger0, bigInteger0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("decimal");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("{\"x\":99,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", (-3294L), (-1770L), true);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("hasPropertyFilters", "{\"x\":99,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", 2525);
      SQLWarning sQLWarning0 = new SQLWarning("UNkl~G#5og", "UNkl~G#5og", 21, sQLTimeoutException0);
      JSONPath jSONPath0 = new JSONPath("hasPropertyFilters");
      Short short0 = new Short((short)2);
      Integer integer0 = new Integer((-143));
      JSONPath.keySet((Object) integer0, "hasPropertyFilters");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("p$sppzt-|EJl", false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.alibaba.fastjson.JSONPath$JSONPathParser", sQLTimeoutException0);
      jSONPath_PropertySegment0.setValue(jSONPath0, sQLIntegrityConstraintViolationException0, "com.alibaba.fastjson.JSONPath$JSONPathParser");
      Long long0 = new Long(21);
      jSONPath_PropertySegment0.setValue(jSONPath0, long0, "{\"x\":99,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONPath.JSONPathParser.isDigitFirst('=');
      int int0 = (-1858);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(61, (-1858), (-363));
      JSONPath jSONPath0 = JSONPath.compile("z4T%@<|");
      jSONPath0.remove((Object) null);
      JSONPath jSONPath1 = new JSONPath("{\"$ref\":\"@\"}");
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      JSONPath jSONPath2 = new JSONPath("sWyv");
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = '=';
      BigDecimal bigDecimal0 = null;
      try {
        bigDecimal0 = new BigDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializeConfig serializeConfig1 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig1, parserConfig0);
      jSONPath0.remove((Object) null);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("alibaba");
      jSONPath0.getPropertyValues("alibaba");
      int[] intArray0 = new int[3];
      intArray0[1] = 9999999;
      intArray0[2] = 34;
      String string0 = "f";
      JSONPath jSONPath1 = JSONPath.compile("parser");
      jSONPath0.evalSize("parser");
      Short short0 = new Short((short) (-1771));
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("pVS7:]SpNK;8Ia");
      jSONPath1.init();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. pVS7:]SpNK;8Ia
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 4647432019745535567L;
      longArray0[1] = 4647432019745535567L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("pJm@Kg7RoSokw=!n", longArray0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntInSegement0);
      String string0 = ")Ljava/lang/Object;";
      JSONPath jSONPath0 = new JSONPath("p");
      short short0 = (short)26852;
      Short short1 = new Short((short)26852);
      jSONPath0.evalKeySet(short1);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("pJm@Kg7RoSokw=!n");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("C8IT&UCq<l%X{");
      jSONPath_JSONPathParser1.isEOF();
      Locale locale0 = Locale.ITALY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.GE;
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) "com.alibaba.fastjson.JSONPath$PropertySegment", "+,aS\".E2<At@=L@5~", (Object) jSONPath_Operator1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. +,aS\".E2<At@=L@5~
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONPath.eq((Object) null, (Object) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "a.";
      stringArray0[1] = "99";
      stringArray0[2] = "99";
      stringArray0[3] = "99";
      stringArray0[4] = "99";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("99", "99", "99", stringArray0, true);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.global;
      short short0 = (short) (-264);
      Short.valueOf((short) (-264));
      parserConfig0.addDeny("Fk}S1p1/{");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("a.");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Long long0 = new Long((-1580386065683472715L));
      Random.setNextRandom(56);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("com.alibaba.fastjson.JSONPath$NotNullSegement", "1U]", jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$NotNullSegement");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("1U]", "com.alibaba.fastjson.JSONPath$NotNullSegement");
      jSONPath_StringOpSegement0.apply(jSONPath0, "^'az~Cf", "1U]", sQLSyntaxErrorException0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringOpSegement0, jSONPath_StringOpSegement0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("^'az~Cf");
      double double0 = new Long((-1580386065683472715L));
      Random.setNextRandom(56);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("com.alibaba.fastjson.JSONPath$NotNullSegement", "1U]", jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$NotNullSegement");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("1U]", "com.alibaba.fastjson.JSONPath$NotNullSegement");
      jSONPath_StringOpSegement0.apply(jSONPath0, "^'az~Cf", "1U]", sQLSyntaxErrorException0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringOpSegement0, jSONPath_StringOpSegement0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", (SerializeConfig) null, (ParserConfig) null);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.parser.autoTypeSupport", 0L, 0L, false);
      JSONPath.compile("fastjson.parser.autoTypeSupport");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("wOSc6ixdr[*b<B?xMg");
      jSONPath_JSONPathParser0.explain();
      jSONPath_JSONPathParser0.isEOF();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.deny", "1Qm_|D9", 1);
      JSONPath.size((Object) "wOSc6ixdr[*b<B?xMg", "max");
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      boolean boolean0 = false;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("dZ0/+;x}BE&T,}`", (Long[]) null, false);
      JSONPath jSONPath0 = new JSONPath("dZ0/+;x}BE&T,}`");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "dZ0/+;x}BE&T,}`";
      stringArray0[1] = "dZ0/+;x}BE&T,}`";
      stringArray0[2] = "dZ0/+;x}BE&T,}`";
      stringArray0[3] = "dZ0/+;x}BE&T,}`";
      stringArray0[4] = "dZ0/+;x}BE&T,}`";
      stringArray0[5] = "dZ0/+;x}BE&T,}`";
      stringArray0[6] = "dZ0/+;x}BE&T,}`";
      stringArray0[7] = "dZ0/+;x}BE&T,}`";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath_IntObjInSegement0, stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"+;x}BE&T\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("REG_MATC", serializeConfig0, parserConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("6|C`hN}A/&%ZCeqXs<x");
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeAccept");
      JSONPath.compile("fastjson.parser.autoTypeSupport");
      Short short0 = new Short((short)160);
      jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      jSONPath_JSONPathParser0.isEOF();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.deny", "6|C`hN}A/&%ZCeqXs<x", 1896);
      Float float0 = new Float((double) (short)160);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      AtomicCodec atomicCodec0 = AtomicCodec.instance;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(63, 63, 63);
      JSONPath jSONPath0 = new JSONPath(")(_S.O)#{]");
      Locale locale0 = Locale.CHINA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2622, 63, 63);
      jSONPath0.evalKeySet(locale0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(".AfPD*jD/3G");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Long long0 = new Long((-582L));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fieldDeserializer", serializeConfig0, parserConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("99");
      jSONPath_JSONPathParser0.parseArrayAccess(false);
      JSONPath jSONPath1 = new JSONPath("UM");
      jSONPath1.removePropertyValue(parserConfig0, "n", false);
      String string0 = "f";
      JSONPath.compile("f");
      short short0 = (short)160;
      Short short1 = new Short((short)160);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but '9'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("autoTypeAccept", serializeConfig0, (ParserConfig) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "autoTypeAccept";
      stringArray0[1] = "autoTypeAccept";
      stringArray0[2] = "autoTypeAccept";
      stringArray0[3] = "autoTypeAccept";
      stringArray0[4] = "autoTypeAccept";
      JSONPath.reserveToArray((Object) null, stringArray0);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("autoTypeAccept", 5614464919154503228L, (-5380336008289393578L), false);
      JSONPath.compile(".WU=S<C$nm]u");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ipn", "autoTypeAccept", 1708);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(387, (-1518), (-1518));
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 3);
      Class<Long> class0 = Long.class;
      classArray0[0] = class0;
      Class<Long> class1 = Long.class;
      classArray0[1] = class1;
      parserConfig0.addAccept("REG_MATC");
      Class<Long> class2 = Long.class;
      classArray0[2] = class2;
      parserConfig0.initJavaBeanDeserializers(classArray0);
      JSONPath.reserveToArray("v", (String[]) null);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = "";
      String string1 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"syntax error, expect \":{\"x\":{}}}";
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(6007332606592876726L);
      longArray0[2] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"syntax error, expect \":{\"x\":{}}}", longArray0, true);
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"syntax error, expect \":{\"x\":{}}}");
      Double double0 = new Double((-150.321939579686));
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntObjInSegement0, jSONPath_IntObjInSegement0, false);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.IN;
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException1.setNextException(sQLClientInfoException0);
      sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("BjLJvp~gs,sUYuv", "", (-1), (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "sE%+";
      stringArray0[1] = "";
      stringArray0[2] = "sE%+";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"syntax error, expect \":{\"x\":{}}}", sQLClientInfoException0);
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(sQLSyntaxErrorException0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : sE%+
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray((Object) null, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("com.alibaba.fastjson.JSONPath$PropertySegment", 4647432019745535567L, (-1804L), true);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"b\":{}}", serializeConfig0, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"b\":{}}", "fastjson.parser.deny", (-1922));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("R>IU3UDA%h{zdjHK[F!", "fastjson.parser.safeMode", (-1894), sQLDataException0);
      sQLSyntaxErrorException0.getSuppressed();
      jSONPath_IntBetweenSegement0.apply(jSONPath0, jSONPath0, sQLDataException0, sQLSyntaxErrorException0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.deny", true);
      Integer integer0 = new Integer(0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1894), (-1894), 0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("end must greater than or equals start. start ", "com.alibaba.fastjson.JSONPath$PropertySegment", 679);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, sQLInvalidAuthorizationSpecException0, bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.alibaba.fastjson.JSONPath$RangeSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.CalendarCodec", serializeConfig0, parserConfig0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONPath0.deepScan((Object) null, (String) null, linkedList0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(387, (-1518), (-1518));
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("REG_MATCH", serializeConfig0, parserConfig0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("7");
      SQLTransientException sQLTransientException0 = new SQLTransientException("7", "JSONPath$PropertySegment", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException("v", "fastjson.parser.deny", 54, sQLTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.autoTypeSupport", "REG_MATCH", sQLDataException0);
      sQLFeatureNotSupportedException0.getSuppressed();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      sQLDataException0.fillInStackTrace();
      jSONPath0.deepScan((Object) null, "94w $WV|]", arrayList0);
      jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(jSONPath_Operator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("alibaba");
      jSONPath0.getPropertyValues("alibaba");
      int[] intArray0 = new int[3];
      intArray0[1] = 9999999;
      intArray0[2] = 34;
      String string0 = "f";
      JSONPath.compile("parser");
      Short short0 = new Short((short) (-1771));
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("pVS7:]SpNK;8Ia");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. pVS7:]SpNK;8Ia
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("Tr*YN", serializeConfig0, parserConfig0);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("fastjson.parser.autoTypeSupport", "illegal getter", false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RlikeSegement0);
      ParserConfig parserConfig1 = new ParserConfig(false);
      JSONPath jSONPath1 = new JSONPath("+@U{'^[", serializeConfig0, parserConfig1);
      jSONPath_FilterSegment0.eval(jSONPath1, parserConfig0, "Tr*YN");
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = null;
      try {
        jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MultiPropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = "autoTypeAccept";
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("autoTypeAccept", "autoTypeAccept", false);
      String string1 = ";dtFn5]w:C'~o$I";
      JSONPath jSONPath0 = JSONPath.compile(";dtFn5]w:C'~o$I");
      Object object0 = null;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("illeal jsonpath syntax. ", false);
      jSONPath_RlikeSegement0.apply(jSONPath0, "illeal jsonpath syntax. ", jSONPath_PropertySegment0, jSONPath_PropertySegment0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("autoTypeAccept", "illeal jsonpath syntax. ", 1864, (Throwable) null);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("l7b_%@w{]x", ";dtFn5]w:C'~o$I");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ;dtFn5]w:C'~o$I
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      String string0 = "D+NvYj";
      JSONPath jSONPath0 = new JSONPath(";dtFn5]w:C'~o$I");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem("D+NvYj", 4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Long long0 = new Long(690L);
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("features", longArray0, true);
      JSONPath jSONPath0 = new JSONPath("x(Ot");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1437, 1437, 1437);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("yyyy-MM-dd'T'HH:mm:ss", "nin");
      Double double0 = new Double((-1989.586834183));
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntObjInSegement0, jSONPath_IntObjInSegement0, false);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.IN;
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("sE%+", "fastjson.parser.autoTypeAccept", (-211), (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException1.setNextException(sQLTransientConnectionException0);
      sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("x(Ot", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[-99],\"ZDi*4H `D&Y)OW.>\":{}}", (-211), (Map<String, ClientInfoStatus>) null, sQLTransientConnectionException0);
      JSONPath.Operator jSONPath_Operator2 = JSONPath.Operator.And;
      jSONPath_FilterGroup0.apply(jSONPath0, jSONPath0, jSONPath_Operator2, sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      serializeConfig0.clearSerializers();
      JSONPath.paths((Object) null, serializeConfig0);
      JSONPath jSONPath0 = JSONPath.compile("<qwqBF<RsQYO+?o#b(z");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("<qwqBF<RsQYO+?o#b(z");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("V9");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('0');
      sQLInvalidAuthorizationSpecException0.printStackTrace(printWriter0);
      Collection<Object> collection0 = jSONPath0.getPropertyValues(sQLInvalidAuthorizationSpecException0);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("pGZ9;qcu`");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("7", sQLInvalidAuthorizationSpecException0);
      jSONPath_NullSegement0.apply(jSONPath0, collection0, sQLTransactionRollbackException0, "<qwqBF<RsQYO+?o#b(z");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, false);
      Long long0 = Long.valueOf("7");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("+&9>8 ;wnxa8$:?H", sQLInvalidAuthorizationSpecException0);
      jSONPath_FilterGroup0.apply(jSONPath0, long0, sQLTransactionRollbackException0, sQLTransactionRollbackException1);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(387, (-1518), (-1518));
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("REG_MATCH", serializeConfig0, parserConfig0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.autoTypeSupport", "~");
      SQLWarning sQLWarning0 = new SQLWarning("fastjson.parser.deny");
      sQLNonTransientConnectionException0.initCause(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.autoTypeSupport", "p", sQLWarning0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("p", "{\"not support : \":99,\"y\":7,\"z\":true,\"a\":[99],\"Xjj\":[]}");
      sQLInvalidAuthorizationSpecException1.getStackTrace();
      jSONPath0.getPropertyValues("~");
      Integer integer0 = new Integer(387);
      jSONPath0.eval((Object) integer0);
      jSONPath0.contains((Object) "REG_MATCH");
      JSONPath.read("{\"not support : \":99,\"y\":7,\"z\":true,\"a\":[99],\"Xjj\":[]}", "fastjson.parser.deny");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("autoTypeAccept", "autoTypeAccept", false);
      JSONPath.compile(";dtFn5]w:C'~o$I");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("illeal jsonpath syntax. ", true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("autoTypeAccept");
      jSONPath_JSONPathParser0.buildArraySegement("scanFieldStringArray");
      jSONPath_JSONPathParser0.getNextChar();
      JSONPath.compile("ErX9");
      Byte byte0 = new Byte((byte) (-83));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("&", "ErX9", 101);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("scanFieldStringArray", sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("ErX9", sQLInvalidAuthorizationSpecException0);
      BigDecimal bigDecimal0 = new BigDecimal(8963398325558730460L);
      JSONPath.eqNotNull(byte0, bigDecimal0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("$8vv$");
      jSONPath_JSONPathParser0.readName();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = "parser.features.NonStringKeyAsString";
      JSONPath.compile("parser.features.NonStringKeyAsString");
      String string1 = "mm<";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("mm<");
      jSONPath_JSONPathParser0.buildArraySegement("autoTypeSupport");
      jSONPath_JSONPathParser0.getNextChar();
      JSONPath.compile("PT ");
      Byte byte0 = new Byte((byte) (-1));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.autoTypeSupport", "fastjson.parser.autoTypeSupport", (byte) (-1));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.autoTypeSupport", sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("mm<", sQLNonTransientConnectionException0);
      sQLInvalidAuthorizationSpecException1.getStackTrace();
      // Undeclared exception!
      try { 
        sQLNonTransientConnectionException0.initCause(sQLInvalidAuthorizationSpecException1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLInvalidAuthorizationSpecException: mm<
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = "IN";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("IN");
      jSONPath_JSONPathParser0.readOp();
      jSONPath_JSONPathParser0.explain();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONPath.JSONPathParser.isDigitFirst('<');
      JSONPath jSONPath0 = JSONPath.compile("D+NvYj");
      Byte byte0 = new Byte((byte)39);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("D+NvYj");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      Long long0 = new Long((-3928183487890302916L));
      jSONPath_FilterSegment0.eval(jSONPath0, byte0, long0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("m");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = "K12dB]q0>?Th&sM@gFJ";
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("K12dB]q0>?Th&sM@gFJ");
      String string1 = "org.springframework.security.web.savedrequest.DefaultSavedRequest$Builder";
      JSONPath jSONPath0 = new JSONPath("org.springframework.security.web.savedrequest.DefaultSavedRequest$Builder");
      jSONPath_NullSegement0.apply(jSONPath0, jSONPath0, "org.springframework.security.web.savedrequest.DefaultSavedRequest$Builder", jSONPath0);
      SerializeConfig serializeConfig0 = null;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      int[] intArray0 = new int[4];
      intArray0[0] = 48;
      intArray0[1] = 12;
      intArray0[2] = 2699;
      intArray0[3] = 124;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      jSONPath_NullSegement0.apply(jSONPath0, batchUpdateException0, jSONPath_MultiIndexSegment0, jSONPath_MultiIndexSegment0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath1 = new JSONPath("org.springframework.security.web.savedrequest.DefaultSavedRequest$Builder", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath1.evalSize(aSMDeserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(387, (-1518), (-1518));
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("REG_MATC", serializeConfig0, parserConfig0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.autoTypeSupport");
      SQLTransientException sQLTransientException0 = new SQLTransientException("fastjson.parser.deny", "JSONPath$PropertySegment", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException("v", "fastjson.parser.deny", 54, sQLTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.autoTypeSupport", "REG_MATC", sQLDataException0);
      jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(jSONPath_Operator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = "decimal";
      JSONPath jSONPath0 = JSONPath.compile("decimal");
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      jSONPath0.keySet((Object) jSONPath_MaxSegment0);
      JSONPath jSONPath1 = new JSONPath("getFieldValue error.");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath1, batchUpdateException0, jSONPath1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "can not cast to JSONObject.");
      JSONPath jSONPath0 = JSONPath.compile("parser.features.NonStringKeyAsString");
      jSONPath0.evalKeySet("parser.features.NonStringKeyAsString");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-2176));
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, "parser.features.NonStringKeyAsString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("com.alibaba.fastjson.JSONPath$PropertySegment", 4647432019745535567L, (-1804L), true);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.autoTypeSupport", "{\"x\":\"hello\",\"unsupported set operation.\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":99}", (-1922));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fastjson.parser.deny.internal", "evalKeySeterror", 10, sQLDataException0);
      jSONPath_IntBetweenSegement0.apply(jSONPath0, "evalKeySeterror", serializeConfig0, "R>IU3UDA%h{zdjHK[F!");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("autoTypeAccept", false);
      Integer integer0 = new Integer(0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-3573), (-3573), (-1052));
      Locale locale0 = Locale.KOREA;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      SQLDataException sQLDataException1 = new SQLDataException();
      jSONPath_PropertySegment0.eval(jSONPath0, calendar0, sQLDataException1);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("evalKeySeterror", (-3573), jSONPath_Operator0);
      Long long0 = new Long(3214L);
      jSONPath_DoubleOpSegement0.apply(jSONPath0, serializeConfig0, long0, "evalKeySeterror");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(10);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, "com.alibaba.fastjson.JSONPath$PropertySegment");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("B]&CV1A]Jygs~w", serializeConfig0, parserConfig0);
      Class<SQLException> class0 = SQLException.class;
      jSONPath0.getJavaBeanSerializer(class0);
      SQLWarning sQLWarning0 = new SQLWarning();
      JSONPath.MinSegment jSONPath_MinSegment1 = new JSONPath.MinSegment();
      SQLDataException sQLDataException0 = new SQLDataException("B]&CV1A]Jygs~w", sQLWarning0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      JSONPath.contains((Object) null, "FIELD");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(31);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSONPath_MinSegment1;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) "FIELD";
      objectArray0[3] = (Object) "FIELD";
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath_ArrayAccessSegment0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : B]&CV1A]Jygs~w
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("Tr*YN", serializeConfig0, parserConfig0);
      JSONPath.contains((Object) null, "Tr*YN");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("fastjson.parser.autoTypeSupport", "illegal getter", false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RlikeSegement0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = null;
      try {
        jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Long long0 = new Long(8488266005336625107L);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("D+NvYj");
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, "D+NvYj", (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = "";
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(6007332606592876726L);
      longArray0[2] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"syntax error, expect \":{\"x\":{}}}", longArray0, true);
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"syntax error, expect \":{\"x\":{}}}");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(116, 4391, (-1300));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", (String) null);
      Byte byte0 = new Byte((byte)44);
      Object object0 = null;
      jSONPath0.getArrayItem((Object) null, 122);
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      Class<Double> class0 = Double.class;
      jSONPath0.getJavaBeanSerializer(class0);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      UUID uUID0 = MockUUID.fromString("g%c`@#Pz'v");
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, uUID0, bigInteger0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-868L);
      longArray0[1] = (-811277319855450459L);
      longArray0[2] = 5614464919154503228L;
      longArray0[3] = 4552L;
      longArray0[4] = (-773L);
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("evalKeySet error : ", longArray0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntInSegement0);
      JSONPath jSONPath0 = JSONPath.compile("evalKeySet error : ");
      jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_IntInSegement0, "evalKeySet error : ");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("evalKeySet error : ");
      jSONPath_JSONPathParser0.readSegement();
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = null;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("l5%Pbdp E~3-eG", (String) null, 91);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("l5%Pbdp E~3-eG", "l5%Pbdp E~3-eG", 124, sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) sQLNonTransientConnectionException0, "b,%pq`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : b,%pq`
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      JSONPath.compile("w,tgo4.9IT]c5WGgL_");
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath jSONPath0 = new JSONPath("4tE^q[UECALG=^>m>g?");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      jSONPath0.arrayAdd((Object) null, (Object[]) longArray0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Long long0 = new Long(8488266005336625107L);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath jSONPath0 = new JSONPath("D+NvYj");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "D+NvYj";
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath_MaxSegment0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : D+NvYj
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      jSONPath0.eval((Object) jSONPath_ArrayAccessSegment0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("unsupported set operation.", "(I)", 0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      MockDate mockDate0 = new MockDate();
      Object object0 = jSONPath_MultiIndexSegment0.eval(jSONPath0, mockDate0, sQLRecoverableException0);
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeAccept");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      jSONPath1.arrayAdd((Object) sQLNonTransientConnectionException0, (Object[]) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONPath_MultiIndexSegment0.eval(jSONPath1, "evalSize error : ", bigInteger0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(((JSON) object0).defaultLocale);
      jSONPath1.set((Object) null, (Object) null);
      JSONPath jSONPath2 = new JSONPath("_asm_flag_");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLRecoverableException0);
      Object object1 = jSONPath_ArrayAccessSegment0.eval(jSONPath1, sQLNonTransientConnectionException0, sQLSyntaxErrorException0);
      jSONPath2.size(object1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "(I)";
      objectArray0[1] = (Object) mockDate0;
      objectArray0[2] = (Object) "unsupported set operation.";
      objectArray0[3] = object1;
      jSONPath1.arrayAdd((Object) null, objectArray0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("true");
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      int int0 = jSONPath0.size((Object) mockGregorianCalendar0);
      assertEquals((-1), int0);
      
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      Float float0 = new Float(0.0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath jSONPath0 = JSONPath.compile("99");
      Long[] longArray0 = new Long[0];
      JSONPath jSONPath1 = new JSONPath("99");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1, 1, 1437);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.safeMode", "fastjson.parser.autoTypeAccept");
      Double double0 = new Double(0.0);
      jSONPath_RangeSegment0.eval(jSONPath1, "99", jSONPath0);
      DataTruncation dataTruncation0 = new DataTruncation(1437, false, false, (-1641), 1437, sQLTransientConnectionException0);
      Long long0 = new Long((-1390L));
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("99", longArray0, false);
      jSONPath_IntObjInSegement0.apply(jSONPath1, sQLTransientConnectionException0, jSONPath0, "99");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntObjInSegement0);
      jSONPath_FilterSegment0.remove(jSONPath1, double0, sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Long.valueOf((-570L));
      long long0 = JSONPath.LENGTH;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[*tL");
      jSONPath_JSONPathParser0.parseArrayAccess(false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fastjson.parser.deny", "fastjson.parser.deny", 122);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_JSONPathParser0, sQLTimeoutException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$FilterSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(387, (-1518), (-1518));
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("REG_MATCH", serializeConfig0, parserConfig0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.autoTypeSupport", "~");
      SQLWarning sQLWarning0 = new SQLWarning("fastjson.parser.deny");
      sQLNonTransientConnectionException0.initCause(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.autoTypeSupport", "p", sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("p", "{\"not support : \":99,\"y\":7,\"z\":true,\"a\":[99],\"Xjj\":[]}");
      sQLInvalidAuthorizationSpecException1.getStackTrace();
      jSONPath0.getPropertyValues("~");
      Integer integer0 = new Integer(387);
      jSONPath0.eval((Object) integer0);
      jSONPath0.contains((Object) "REG_MATCH");
      JSONPath.read("{\"not support : \":99,\"y\":7,\"z\":true,\"a\":[99],\"Xjj\":[]}", "fastjson.parser.deny");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      Float float0 = new Float(0.0);
      JSONPath.eqNotNull(float0, float0);
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"a string\",\"size\":-99,\"color\":\"Red\",\"evalKeySet\":null,\"[C\":\"1\",\"x\":null}");
      Long[] longArray0 = new Long[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("fastjson.parser.autoTypeSupport", longArray0, false);
      JSONPath jSONPath1 = new JSONPath("{\"fruit\":\"a string\",\"size\":-99,\"color\":\"Red\",\"evalKeySet\":null,\"[C\":\"1\",\"x\":null}");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1, 1, 1437);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.safeMode", "fastjson.parser.autoTypeAccept");
      Double double0 = new Double(0.0);
      jSONPath_RangeSegment0.eval(jSONPath1, "{\"fruit\":\"a string\",\"size\":-99,\"color\":\"Red\",\"evalKeySet\":null,\"[C\":\"1\",\"x\":null}", jSONPath0);
      DataTruncation dataTruncation0 = new DataTruncation(52429, false, false, (-1641), 74, sQLTransientConnectionException0);
      jSONPath_IntObjInSegement0.apply(jSONPath0, dataTruncation0, (Object) null, "]yfw3h!");
      Long long0 = new Long((-1390L));
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement1 = new JSONPath.IntObjInSegement("{\"fruit\":\"a string\",\"size\":-99,\"color\":\"Red\",\"evalKeySet\":null,\"[C\":\"1\",\"x\":null}", longArray0, false);
      jSONPath_IntObjInSegement1.apply(jSONPath1, sQLTransientConnectionException0, jSONPath0, "{\"fruit\":\"a string\",\"size\":-99,\"color\":\"Red\",\"evalKeySet\":null,\"[C\":\"1\",\"x\":null}");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntObjInSegement1);
      jSONPath_FilterSegment0.remove(jSONPath1, double0, sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(387, (-1518), (-1518));
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("REG_MATCH", serializeConfig0, parserConfig0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("7");
      SQLTransientException sQLTransientException0 = new SQLTransientException("7", "JSONPath$PropertySegment", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException("v", "fastjson.parser.deny", 54, sQLTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.autoTypeSupport", "REG_MATCH", sQLDataException0);
      jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(jSONPath_Operator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(387, (-1518), (-1518));
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("REG_MATCH", serializeConfig0, parserConfig0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("7", "JSONPath$PropertySegment", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException("oYha:", "REG_MATCH", (-1518));
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("parser.features.NonStringKeyAsString", "com.alibaba.fastjson.JSONPath$NotNullSegement", 387);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("{\"y\":99,\"z\":true,\"a\":[],\"b\":{\"com.alibaba.fastjson.JSONPath$RlikeSegement\":\"a string\"}}", "Z", sQLTimeoutException1);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, "7", jSONPath_Operator0);
      jSONPath0.getPropertyValues(object0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      JSONPath.compile("decimal");
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath.compile("fastjson.parser.deny.internal");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Jv9r.");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. Jv9r.
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = "alibaba";
      JSONPath jSONPath0 = JSONPath.compile("alibaba");
      jSONPath0.getPropertyValues("alibaba");
      int[] intArray0 = new int[3];
      intArray0[0] = 99999;
      int int0 = 9999999;
      intArray0[1] = 9999999;
      intArray0[2] = 34;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("alibaba", (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("alibaba", "alibaba", intArray0, sQLNonTransientConnectionException0);
      batchUpdateException0.printStackTrace();
      jSONPath0.set((Object) batchUpdateException0, (Object) "alibaba");
      String string1 = "a.";
      JSONPath.containsValue((Object) sQLNonTransientConnectionException0, "a.", (Object) "alibaba");
      // Undeclared exception!
      try { 
        ZoneOffset.of("a.");
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid ID for ZoneOffset, non numeric characters found: a0.
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(45);
      MockDate mockDate0 = new MockDate(45, 45, 45);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment1 = new JSONPath.ArrayAccessSegment(45);
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("{", serializeConfig0, parserConfig0);
      SQLWarning sQLWarning0 = new SQLWarning();
      JSONPath.MinSegment jSONPath_MinSegment1 = new JSONPath.MinSegment();
      SQLDataException sQLDataException0 = new SQLDataException();
      jSONPath0.containsValue((Object) sQLDataException0, (Object) mockDate0);
      // Undeclared exception!
      try { 
        jSONPath_MinSegment1.eval(jSONPath0, serializeConfig0, jSONPath_JSONPathParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONPath jSONPath0 = new JSONPath("^");
      SQLWarning sQLWarning0 = new SQLWarning("q2/{NU*7#yh", "q2/{NU*7#yh");
      jSONPath0.set((Object) "", (Object) null, false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "^", sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":[]}";
      long long0 = (-1621L);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath jSONPath0 = JSONPath.compile("~");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_Operator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Long long0 = new Long(8488266005336625107L);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("`O]", false);
      Integer integer0 = new Integer(0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(14, 2, 2);
      JSONPath jSONPath0 = JSONPath.compile("getFieldValue error.");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONPath_PropertySegment0.eval(jSONPath0, "AZJl", bigDecimal0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Object object0 = new Object();
      SQLTransientException sQLTransientException0 = new SQLTransientException("8~yD\"|)", "8~yD\"|)", 14);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransientException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("`O]", sQLDataException0);
      jSONPath0.deepSet("`O]", "^", 0, sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      jSONPath0.eval((Object) jSONPath_ArrayAccessSegment0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("@type", "(I)", 0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      MockDate mockDate0 = new MockDate();
      Object object0 = jSONPath_MultiIndexSegment0.eval(jSONPath0, mockDate0, sQLRecoverableException0);
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeAccept");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("#*k`BVO~H");
      jSONPath_JSONPathParser0.isEOF();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.autoTypeSupport", "@type", 989);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(">{MzQ]/lfbPT)qL~Yy", "evalSize error : ", sQLTransientConnectionException0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(((JSON) object0).defaultTimeZone, ((JSON) object0).defaultLocale);
      Long long0 = new Long(4647432019745535567L);
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(mockGregorianCalendar0, ">{MzQ]/lfbPT)qL~Yy", (-3235027470545870510L), long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path fastjson.parser.autoTypeSupport, segement >{MzQ]/lfbPT)qL~Yy
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.parser.autoTypeSupport", 0L, 0L, false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("wOSc6ixdr[*b<B?xMg");
      jSONPath_JSONPathParser0.explain();
      Float float0 = new Float((-1615.9588262985405));
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      jSONPath0.getPath();
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Long long0 = new Long((-582L));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fieldDeserializer", serializeConfig0, parserConfig0);
      jSONPath0.contains((Object) parserConfig0);
      Long[] longArray0 = new Long[3];
      longArray0[0] = long0;
      longArray0[1] = long0;
      Long long1 = new Long(6007332606592876737L);
      longArray0[2] = long1;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("99", longArray0, true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("99");
      jSONPath_JSONPathParser0.isEOF();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{\"x\":\"a string\",\"y\":7,\", class \":true,\"a\":[-99],\"ZDi*4H `D&Y)OW.>\":{}}", "99");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fieldDeserializer", "fastjson.parser.autoTypeSupport", sQLTransientConnectionException0);
      jSONPath0.deepSet(longArray0[1], "fastjson.parser.safeMode", (long) longArray0[2], sQLTransactionRollbackException0);
      jSONPath0.getPath();
      Class<SQLWarning> class0 = SQLWarning.class;
      JSONPath.isInt(class0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      JSONPath.JSONPathParser.isDigitFirst('<');
      String string0 = "D+NvYj";
      JSONPath.compile("D+NvYj");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("D+NvYj");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. D+NvYj
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      SQLWarning sQLWarning0 = new SQLWarning("fastjson.parser.deny.internal", "fastjson.parser.autoTypeAccept");
      JSONPath.MinSegment jSONPath_MinSegment1 = new JSONPath.MinSegment();
      Object object0 = new Object();
      JSONPath.arrayAdd(object0, "vDC1SNR?q~!M_$;=U^", (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<V");
      jSONPath_JSONPathParser0.parseArrayAccess(false);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(46);
      JSONPath jSONPath0 = new JSONPath("safeMode");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, (Object) null, sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      jSONPath0.eval((Object) jSONPath_ArrayAccessSegment0);
      String string0 = "unsupported set operation.";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("unsupported set operation.", "(I)", 0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      MockDate mockDate0 = new MockDate();
      jSONPath_MultiIndexSegment0.eval(jSONPath0, mockDate0, sQLRecoverableException0);
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeAccept");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      jSONPath1.arrayAdd((Object) sQLNonTransientConnectionException0, (Object[]) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONPath_MultiIndexSegment0.eval(jSONPath1, "evalSize error : ", bigInteger0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.deny.internal", "fastjson.parser.autoTypeAccept", sQLRecoverableException0);
      JSONPath.arrayAdd((Object) jSONPath_WildCardSegment0, "Xjj", (Object[]) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("IN");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      JSONPath.isDouble(class0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("Sl={/4E*\"Jr", (-7025218572040030405L), jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("Sl={/4E*\"Jr", serializeConfig0, parserConfig0);
      jSONPath_IntOpSegement0.apply(jSONPath0, classLoader0, "Sl={/4E*\"Jr", jSONPath_Operator0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.safeMode");
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.parser.safeMode", "xqy$rbt", parserConfig0, 42, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      JSONPath.eq((Object) null, (Object) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":[]}", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":[]}", 1039);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null, sQLClientInfoException0);
      Long long0 = new Long(6007332606592876737L);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$PropertySegment");
      jSONPath_JSONPathParser0.isEOF();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("C$3F2*Klw|hDz<k", "{\"x\":\"fastjson\",\"y\":7,\"z\":true,\"a\":[-99],\"ZDi*4H `D&Y)OW.>\":{},\"xx\":\"a string\"}");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.alibaba.fastjson.JSONPath$PropertySegment", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":[]}", sQLTimeoutException0);
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":[]}");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("evalKeySet");
      jSONPath0.deepSet(sQLSyntaxErrorException0, "com.alibaba.fastjson.JSONPath$PropertySegment", 906L, sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Integer integer0 = new Integer(0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-3302), 1325, 0);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.safeMode", false);
      jSONPath_PropertySegment0.eval(jSONPath0, "l", jSONPath_RangeSegment0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Object object0 = new Object();
      Integer integer1 = new Integer((-278));
      jSONPath0.deepSet((Object) null, "fastjson.parser.safeMode", (-3302), integer1);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      long long0 = (-582L);
      Long long1 = new Long((-582L));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fieldDeserializer", serializeConfig0, parserConfig0);
      JSONPath.containsValue((Object) long1, "fastjson.parser.autoTypeAccept", (Object) "fieldDeserializer");
      jSONPath0.contains((Object) parserConfig0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      SQLWarning sQLWarning1 = new SQLWarning("fastjson.parser.safeMode", sQLWarning0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLWarning1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLWarning1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fastjson.parser.safeMode", "fastjson.parser.deny");
      String string0 = "com.alibaba.fastjson.JSONPath$NotNullSegement";
      JSONPath jSONPath1 = JSONPath.compile("com.alibaba.fastjson.JSONPath$NotNullSegement");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(61);
      // Undeclared exception!
      try { 
        jSONPath1.set((Object) "vu(>vud5x\"", (Object) jSONPath_ArrayAccessSegment0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(45);
      MockDate mockDate0 = new MockDate((-2680), 60, 8);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment1 = new JSONPath.ArrayAccessSegment(8);
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializeConfig serializeConfig1 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("{", serializeConfig1, parserConfig0);
      SQLWarning sQLWarning0 = new SQLWarning();
      JSONPath.MinSegment jSONPath_MinSegment1 = new JSONPath.MinSegment();
      SQLDataException sQLDataException0 = new SQLDataException();
      jSONPath0.containsValue((Object) sQLDataException0, (Object) mockDate0);
      // Undeclared exception!
      try { 
        jSONPath_MinSegment1.eval(jSONPath0, serializeConfig0, jSONPath_JSONPathParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Long long0 = new Long(8488266005336625107L);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SQLWarning sQLWarning0 = new SQLWarning("", "", 1476);
      JSONPath jSONPath0 = new JSONPath("lengr]");
      jSONPath0.set((Object) long0, (Object) serializeConfig0);
      jSONPath0.set((Object) sQLWarning0, (Object) long0, true);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("{\"fruit\":\"Apple\",\"size\":false,\"color\":\"Red\",\"value\":true,\"java/lang/Boolean\":true,\"number\":\"1\"}", true);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("{\"fruit\":\"Apple\",\"size\":false,\"color\":\"Red\",\"value\":true,\"java/lang/Boolean\":true,\"number\":\"1\"}");
      SQLWarning sQLWarning0 = new SQLWarning("*", sQLIntegrityConstraintViolationException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLWarning0);
      DataTruncation dataTruncation0 = new DataTruncation((-419), true, true, (-419), 205, sQLWarning0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(dataTruncation0);
      String string0 = "IN";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("D=gVBqXQ<W.<e-", "{\"fruit\":\"Apple\",\"size\":false,\"color\":\"Red\",\"value\":true,\"java/lang/Boolean\":true,\"number\":\"1\"}");
      JSONPath.compile("vu(>vud5x\"");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(268435455);
      SerializeConfig serializeConfig0 = new SerializeConfig(268435455);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath(string0, serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.set((Object) string0, (Object) parserConfig0, parserConfig0.compatibleWithJavaBean);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Long long0 = new Long((-582L));
      Long long1 = new Long(2045L);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath jSONPath0 = new JSONPath("D+NvYj");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Object[] objectArray0 = new Object[0];
      jSONPath0.arrayAdd((Object) sQLTransactionRollbackException0, objectArray0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      Object object0 = jSONPath0.eval((Object) jSONPath_ArrayAccessSegment0);
      assertNull(object0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("unsupported set operation.", "(I)", 0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      MockDate mockDate0 = new MockDate();
      jSONPath_MultiIndexSegment0.eval(jSONPath0, mockDate0, sQLRecoverableException0);
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeAccept");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      jSONPath1.arrayAdd((Object) sQLNonTransientConnectionException0, (Object[]) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONPath_MultiIndexSegment0.eval(jSONPath1, "evalSize error : ", bigInteger0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.deny.internal", "fastjson.parser.autoTypeAccept", sQLRecoverableException0);
      MockDate mockDate1 = new MockDate();
      boolean boolean0 = JSONPath.containsValue((Object) sQLTimeoutException0, "fastjson.parser.autoTypeSupport", (Object) mockDate1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("getFieldValue error.");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Byte byte0 = new Byte((byte)0);
      jSONPath0.arrayAdd((Object) byte0, (Object[]) null);
      assertEquals("getFieldValue error.", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath jSONPath0 = JSONPath.compile("'");
      int int0 = 34;
      jSONPath0.eval((Object) null);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(34, 34, (-884));
      jSONPath0.keySet((Object) jSONPath_RangeSegment0);
      JSONPath.containsValue((Object) null, "'", (Object) "{\"fruit\":\"Apple\",\"resolveTask\":false,\"color\":\"fastjson\",\"value\":true,\"value2\":false,\"number\":99}");
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("{\"fruit\":\"Apple\",\"resolveTask\":false,\"color\":\"fastjson\",\"value\":true,\"value2\":false,\"number\":99}", (-1621L), jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig(37);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath1 = null;
      try {
        jSONPath1 = new JSONPath((String) null, serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("{\"fruit\":\"Apple\",\"size\":false,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", true);
      int[] intArray0 = new int[1];
      JSONPath jSONPath0 = new JSONPath("X1*^lN)p");
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, "{\"fruit\":\"Apple\",\"size\":false,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      assertFalse(boolean0);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath1 = new JSONPath("org.joda.time.DateTime");
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath1, jSONPath1, jSONPath_PropertySegment0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("k7*4A_X&6<fe=8x#D");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : k7*4A_X&6<fe=8x#D
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = "autoTypeAccept";
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("autoTypeAccept", serializeConfig0, (ParserConfig) null);
      String string1 = "q2/{N\\U*7#yh";
      SQLWarning sQLWarning0 = new SQLWarning("autoTypeAccept", "autoTypeAccept", 37);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "", (Object) "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      JSONPath jSONPath0 = JSONPath.compile("decimal");
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      String string0 = "getFieldValue error.";
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_WildCardSegment0, (Object) "getFieldValue error.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(6007332606592876726L);
      longArray0[2] = long0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"syntax error, expect \":{\"x\":{}}}", "", 1004);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLWarning sQLWarning0 = new SQLWarning("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"syntax error, expect \":{\"x\":{}}}", sQLClientInfoException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTimeoutException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLFeatureNotSupportedException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("IN", "evalKeySeterror :");
      JSONPath.compile("i~<T");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(1004);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("IN", serializeConfig0, (ParserConfig) null);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLSyntaxErrorException0, (Object) sQLTimeoutException1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("PT5mLe", "PT5mLe", sQLIntegrityConstraintViolationException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLIntegrityConstraintViolationException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("/", "/", 1132, (int[]) null, sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("PT5mLe", "/", 63, (Throwable) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("alibaba", "PT5mLe");
      // Undeclared exception!
      try { 
        JSONPath.compare((Object) null, sQLTransientException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      JSONPath.Operator.values();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("x1$}0Dq^&", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "x1$}0Dq^&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : x1$}0Dq^&
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      JSONPath.Operator.values();
      String string0 = "XH{#@oswjxPp";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("XH{#@oswjxPp");
      String string1 = "nin";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "XH{#@oswjxPp";
      stringArray0[1] = "XH{#@oswjxPp";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("nin", stringArray0, true);
      jSONPath_JSONPathParser0.filterRest(jSONPath_StringInSegement0);
      jSONPath_JSONPathParser0.skipWhitespace();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      // Undeclared exception!
      try { 
        JSONPath.Operator.valueOf("nin");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.alibaba.fastjson.JSONPath.Operator.nin
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Long long0 = new Long((-582L));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fieldDeserializer", serializeConfig0, parserConfig0);
      jSONPath0.contains((Object) parserConfig0);
      Long[] longArray0 = new Long[3];
      longArray0[0] = long0;
      longArray0[1] = long0;
      Long long1 = new Long(6007332606592876737L);
      longArray0[2] = long1;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("99", longArray0, true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("99");
      jSONPath_JSONPathParser0.isEOF();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[-99],\"ZDi*4H `D&Y)OW.>\":{}}", "99");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fieldDeserializer", "fastjson.parser.autoTypeSupport", sQLTransientConnectionException0);
      jSONPath0.deepSet(longArray0[1], "fastjson.parser.safeMode", (long) longArray0[2], sQLTransactionRollbackException0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fieldDeserializer", serializeConfig0, parserConfig0);
      JSONPath jSONPath1 = JSONPath.compile("in");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny");
      jSONPath_JSONPathParser0.skipWhitespace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.safeMode", "fastjson.parser.deny");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fieldDeserializer", "xqy$rbt]*_", sQLTransientConnectionException0);
      jSONPath1.deepSet(")Ljava/lang/Enum;", "fastjson.parser.autoTypeAccept", 612L, jSONPath_JSONPathParser0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      jSONPath0.size((Object) sQLClientInfoException0);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'f, but 'y'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Long long0 = new Long(39L);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      Double double0 = new Double(Double.NaN);
      Class<JSONPath> class0 = JSONPath.class;
      jSONPath0.getJavaBeanDeserializer(class0);
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Double double0 = new Double(0.0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      boolean boolean0 = JSONPath.containsValue((Object) double0, "$*mRbp|RmXIQ", (Object) double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String string0 = "^c4>3";
      JSONPath jSONPath0 = new JSONPath("^c4>3");
      String string1 = null;
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) null, (String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      Float float0 = new Float(0.0);
      JSONPath.eqNotNull(float0, float0);
      JSONPath jSONPath0 = JSONPath.compile("{\"LE\":\"a string\",\"size\":\"Large\",\"color\":\"Red\",\"evalKeySet\":null,\"number\":\"1\"}");
      Long[] longArray0 = new Long[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("fastjson.parser.autoTypeSupport", longArray0, false);
      JSONPath jSONPath1 = new JSONPath("{\"LE\":\"a string\",\"size\":\"Large\",\"color\":\"Red\",\"evalKeySet\":null,\"number\":\"1\"}");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1, 1, 1437);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.safeMode", "fastjson.parser.autoTypeAccept");
      Double double0 = new Double(0.0);
      ArrayList arrayList0 = new ArrayList<JSONValidator.Type>();
      Class<JSONPath> class0 = JSONPath.class;
      jSONPath1.getJavaBeanSerializer(class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.autoTypeSupport", "", sQLTransientConnectionException0);
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("fastjson.parser.deny", "Qnl?wMFj&!4Fv", 74, sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, sQLTransactionRollbackException1, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("k7*4A_X&6<fe=8x#D");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(5614464919154503228L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("com.alibaba.fastjson.JSONPath$PropertySegment", 4647432019745535567L, (-1804L), true);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      serializeConfig0.setAsmEnable(true);
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"end must greater than or equals start. start \":7,\"z\":true,\"a\":[[]],\"b\":{}}", serializeConfig0, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException("{\"x\":\"hello\",\"end must greater than or equals start. start \":7,\"z\":true,\"a\":[[]],\"b\":{}}", "fastjson.parser.deny", (-1922));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("R>IU3UDA%h{zdjHK[F!", "fastjson.parser.safeMode", (-1912), sQLDataException0);
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, jSONPath0, sQLDataException0, sQLSyntaxErrorException0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.deny", false);
      Integer integer0 = new Integer(0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1912), (-1912), 0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1922));
      DataTruncation dataTruncation0 = new DataTruncation(368, true, false, (-1922), 512);
      boolean boolean1 = jSONPath0.set((Object) null, (Object) serializeConfig0, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONPath jSONPath0 = new JSONPath("^");
      SQLWarning sQLWarning0 = new SQLWarning("q2/{NU*7#yh", "length", (-1668));
      jSONPath0.set((Object) "", (Object) null, false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "^", sQLWarning0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLTimeoutException0);
      jSONPath0.set((Object) sQLTimeoutException0, (Object) sQLTransientConnectionException0, true);
      // Undeclared exception!
      try { 
        JSONPath.extract("^", "^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2^
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("parser.features.NonStringKeyAsString");
      jSONPath0.evalKeySet("parser.features.NonStringKeyAsString");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-2176));
      // Undeclared exception!
      try { 
        JSONPath.extract("parser.features.NonStringKeyAsString", "parser.features.NonStringKeyAsString");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      long[] longArray0 = new long[0];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("mK)E8pd6,]s^q", longArray0, false);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(72);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
      try { 
        JSONPath.extract("]VN", "/cause/stackTrace/5");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("com.alibaba.fastjson.JSONPath$PropertySegment", 4647432019745535567L, (-1804L), true);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"com.alibaba.fastjson.JSONPath$RlikeSegement\",\"z\":true,\"a\":[null],\"b\":{}}", serializeConfig0, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException("{\"x\":\"com.alibaba.fastjson.JSONPath$RlikeSegement\",\"z\":true,\"a\":[null],\"b\":{}}", "fastjson.parser.deny", (-1922));
      int int0 = (-1894);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("R>IU3UDA%h{zdjHK[F!", "fastjson.parser.safeMode", (-1894), sQLDataException0);
      long[] longArray0 = new long[2];
      longArray0[0] = 4647432019745535567L;
      longArray0[1] = (long) (-1894);
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("~nCi", longArray0, false);
      int int1 = 62;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1894));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
      try { 
        JSONPath.extract("]VN", "com.alibaba.fastjson.JSONPath$PropertySegment");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "like";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("like");
      jSONPath_JSONPathParser0.readOp();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}", stringArray0, true);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.global;
      Short.valueOf((short)2727);
      parserConfig0.addDeny("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny.internal");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SQLWarning sQLWarning0 = new SQLWarning();
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      // Undeclared exception!
      try { 
        JSONPath.extract("C", "$<&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2C
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      SQLWarning sQLWarning0 = new SQLWarning();
      JSONPath.MinSegment jSONPath_MinSegment1 = new JSONPath.MinSegment();
      // Undeclared exception!
      try { 
        jSONPath_MinSegment1.eval(jSONPath0, jSONPath0, jSONPath_MinSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("B]&CV1A]Jygs~w", serializeConfig0, parserConfig0);
      Class<SQLException> class0 = SQLException.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      SQLWarning sQLWarning0 = new SQLWarning();
      JSONPath.MinSegment jSONPath_MinSegment1 = new JSONPath.MinSegment();
      // Undeclared exception!
      try { 
        jSONPath_MinSegment1.eval(jSONPath0, javaBeanSerializer0, "5nE,~5");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      JSONPath.eq((Object) null, (Object) null);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("{\"x\":\"currency\",\"y\":7,\"z\":true,\"a\":99,\"b\":{},\"xx\":null}", (-3719L), (-3386L), true);
      JSONPath jSONPath0 = JSONPath.compile("{\"x\":\"currency\",\"y\":7,\"z\":true,\"a\":99,\"b\":{},\"xx\":null}");
      assertEquals("{\"x\":\"currency\",\"y\":7,\"z\":true,\"a\":99,\"b\":{},\"xx\":null}", jSONPath0.getPath());
      
      Feature feature0 = Feature.AllowISO8601DateFormat;
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[8];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      featureArray0[4] = feature0;
      featureArray0[5] = feature0;
      featureArray0[6] = feature0;
      featureArray0[7] = feature0;
      // Undeclared exception!
      try { 
        JSONPath.extract("p'[)%5qL", "p'[)%5qL", parserConfig0, (-2147), featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2p'[)%5qL
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("com.alibaba.fastjson.JSONPath$PropertySegment", 4647432019745535567L, (-1804L), true);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      AtomicCodec atomicCodec0 = AtomicCodec.instance;
      serializeConfig0.put((Type) null, (ObjectSerializer) atomicCodec0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"b\":{}}", serializeConfig0, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"b\":{}}", "fastjson.parser.deny", (-1922));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("R>IU3UDA%h{zdjHK[F!", "fastjson.parser.safeMode", (-1894), sQLDataException0);
      jSONPath_IntBetweenSegement0.apply(jSONPath0, jSONPath0, sQLDataException0, sQLSyntaxErrorException0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.deny", true);
      Integer integer0 = new Integer(0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1894), (-1894), 0);
      jSONPath_PropertySegment0.eval(jSONPath0, integer0, jSONPath_RangeSegment0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("D=p%c)pnukDJsaA", sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath_RangeSegment0, sQLTransientConnectionException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = "ZDi*4H `D&Y)OW.>";
      JSONPath jSONPath0 = JSONPath.compile("ZDi*4H `D&Y)OW.>");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string1 = "FsS";
      String string2 = "/";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("HM)<$hS^&", "/", (-3091));
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("FsS", sQLFeatureNotSupportedException0);
      linkedList0.add((Object) sQLTimeoutException0);
      linkedList0.add((Object) jSONPath0);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("ZDi*4H `D&Y)OW.>", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Long long0 = new Long((-600L));
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.serializer.CharArrayCodec");
      jSONPath_JSONPathParser0.readString();
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("SafeMode", (-1640L), jSONPath_Operator0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 37;
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.next();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("ZDi*4H `D&Y)OW.>");
      jSONPath_JSONPathParser0.buildArraySegement("ZDi*4H `D&Y)OW.>");
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":[]}";
      long long0 = (-1621L);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'Z, but '>'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = "k7*4A_X&6<fe=8x#D";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("k7*4A_X&6<fe=8x#D");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'k, but 'D'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Long long0 = new Long(8963398325558730460L);
      JSONPath jSONPath0 = new JSONPath("{\"com.alibaba.fastjson.JSONPath$MultiIndexSegment\":\"hello\",\"y\":\"a string\",\"z\":true,\"/cause/cause/stackTrace/5\":[\"a string\"],\"syntax error, expect \":{\"com.alibaba.fastjson.JSONPath$MultiIndexSegment\":{\"com.alibaba.fastjson.JSONPath$MultiIndexSegment\":\"a string\"},\"x\":\"a string\"}}");
      Double double0 = new Double(0.0);
      jSONPath0.deepSet(double0, "short", 8963398325558730460L, "{\"com.alibaba.fastjson.JSONPath$MultiIndexSegment\":\"hello\",\"y\":\"a string\",\"z\":true,\"/cause/cause/stackTrace/5\":[\"a string\"],\"syntax error, expect \":{\"com.alibaba.fastjson.JSONPath$MultiIndexSegment\":{\"com.alibaba.fastjson.JSONPath$MultiIndexSegment\":\"a string\"},\"x\":\"a string\"}}");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$*mRbp|RmXIQ");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("7$5cB#P0!fOm6q=R");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Long long0 = new Long((-582L));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fieldDeserializer", serializeConfig0, parserConfig0);
      jSONPath0.contains((Object) parserConfig0);
      Long[] longArray0 = new Long[3];
      longArray0[0] = long0;
      longArray0[1] = long0;
      Long long1 = new Long(6007332606592876737L);
      longArray0[2] = long1;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("99", longArray0, true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("99");
      jSONPath_JSONPathParser0.isEOF();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[-99],\"ZDi*4H `D&Y)OW.>\":{}}", "99");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fieldDeserializer", "fastjson.parser.autoTypeSupport", sQLTransientConnectionException0);
      jSONPath0.deepSet(longArray0[1], "fastjson.parser.safeMode", (long) longArray0[2], sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String string0 = "{\"fruit\":\"Apple\",\"size\":false,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}";
      boolean boolean0 = true;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("{\"fruit\":\"Apple\",\"size\":false,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", true);
      int int0 = 1597;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1300), 1597, 1597);
      String string1 = null;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null);
      Double double0 = new Double(1597);
      Long long0 = new Long((-582L));
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransactionRollbackException0.getLocalizedMessage();
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":false,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, sQLTransientConnectionException0, long0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Long long0 = new Long((-582L));
      JSONPath.eqNotNull(long0, long0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("V!0.E", "Gj;_^Yy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2V!0.E
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("99", serializeConfig0, parserConfig0);
      Short short0 = new Short((short)0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.autoTypeAccept", false);
      // Undeclared exception!
      try { 
        JSONPath.read("fastjson.parser.autoTypeAccept", "fastjson.parser.safeMode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSONPath.extract("org", "org", parserConfig0, 1166, featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.AllowISO8601DateFormat;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSONPath.extract("5nE,~5", "getConstructors", parserConfig0, 61, featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // int
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}";
      boolean boolean0 = true;
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}", stringArray0, true);
      boolean boolean1 = true;
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.global;
      Short.valueOf((short)2727);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny.internal");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("mK)E8pd6,]s^q", "h");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath jSONPath0 = new JSONPath("UM");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_Operator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":[]}";
      long long0 = (-1667L);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath jSONPath0 = new JSONPath("v");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_Operator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("]t$*4:2_m,<V *");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      jSONPath0.deepSet("]t$*4:2_m,<V *", "autoTypeAccept", 9999989, sQLSyntaxErrorException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLNonTransientException0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("autoTypeAccept", "]t$*4:2_m,<V *", intArray0, sQLNonTransientException0);
      jSONPath0.set((Object) null, (Object) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("ckHNDe", "");
      JSONPath.containsValue((Object) sQLRecoverableException0, "a.", (Object) "a.");
      jSONPath0.getPath();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("in", "getParameters", 9999989);
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      int int0 = (-1518);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(387, (-1518), (-1518));
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("REG_MATC", serializeConfig0, parserConfig0);
      JSONPath jSONPath1 = JSONPath.compile("v");
      JSONPath jSONPath2 = new JSONPath("fastjson.parser.autoTypeAccept");
      jSONPath1.eval((Object) jSONPath2);
      Class<Double> class0 = Double.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, false, true);
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      jSONPath0.keySet((Object) javaBeanDeserializer0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("U2JnXJY2xi_ZD");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but 'U'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":[]}";
      long long0 = (-1621L);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath jSONPath0 = JSONPath.compile("'");
      jSONPath0.eval((Object) null);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(34, 34, (-884));
      jSONPath0.keySet((Object) jSONPath_RangeSegment0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_Operator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{>*4A_X&6<fe=8x#D");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(5614464919154503228L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String string0 = "JSONPath$Context";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("JSONPath$Context");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(5614464919154503228L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = "k7*4A_X&6<fe=8x#D";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("k7*4A_X&6<fe=8x#D");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(5614464919154503228L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("parser.features.NonStringKeyAsString");
      boolean boolean0 = jSONPath0.removePropertyValue("parser.features.NonStringKeyAsString", "parser.features.NonStringKeyAsString", true);
      Set<?> set0 = jSONPath0.evalKeySet("parser.features.NonStringKeyAsString");
      assertNotNull(set0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"not support : \":99,\"y\":7,\"z\":true,\"a\":[99],\"Xjj\":[]}");
      boolean boolean1 = jSONPath_JSONPathParser0.isEOF();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Long long0 = new Long((-582L));
      JSONPath.remove((Object) long0, "Xjj");
      Long[] longArray0 = new Long[3];
      longArray0[0] = long0;
      longArray0[1] = long0;
      Long long1 = new Long(6007332606592876737L);
      longArray0[2] = long1;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("{\"x\":\"charAt\",\"y\":7,\"z\":true,\"a\":true,\"b\":{}}", longArray0, true);
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"charAt\",\"y\":7,\"z\":true,\"a\":true,\"b\":{}}");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1437, 1437, 1437);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{\"x\":\"charAt\",\"y\":7,\"z\":true,\"a\":true,\"b\":{}}", "{\"x\":\"charAt\",\"y\":7,\"z\":true,\"a\":true,\"b\":{}}");
      Double double0 = new Double((-1663.20300856839));
      jSONPath_RangeSegment0.eval(jSONPath0, sQLTransientConnectionException0, double0);
      jSONPath_IntObjInSegement0.apply(jSONPath0, jSONPath_RangeSegment0, jSONPath0, long0);
      JSONPath.compile("{\"x\":\"charAt\",\"y\":7,\"z\":true,\"a\":true,\"b\":{}}");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      int int0 = 0;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\"}";
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      String string1 = "(I)";
      jSONPath0.eval((Object) jSONPath_ArrayAccessSegment0);
      String string2 = "unsupported set operation.";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("unsupported set operation.", "(I)", 0);
      String string3 = "]yfw3h!";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("(I)", "]yfw3h!", 0, sQLRecoverableException0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, sQLRecoverableException0, sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLRecoverableException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("f");
      JSONPath jSONPath1 = new JSONPath(")Ljava/lang/String;");
      Class<JSONPath.MultiPropertySegment> class0 = JSONPath.MultiPropertySegment.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath1, javaBeanSerializer0, (-3360));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String string0 = "^c4>3";
      JSONPath jSONPath0 = new JSONPath("^c4>3");
      JSONPath jSONPath1 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem((JSONPath) null, "^c4>3", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Class<Short> class0 = Short.class;
      JSONPath.isInt(class0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("!W+pPc;u*`^x}o", "!W+pPc;u*`^x}o", jSONPath_Operator0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      JSONPath jSONPath0 = new JSONPath("!W+pPc;u*`^x}o");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("java", hashMap0);
      jSONPath0.setPropertyValue(sQLClientInfoException0, "fastjson", 270L, "fastjson");
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson", (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Long long0 = new Long((-582L));
      long long1 = JSONPath.LENGTH;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("Mh^t", serializeConfig0, parserConfig0);
      Double double0 = new Double(100000.0);
      JSONPath.eqNotNull(double0, long0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[*tL");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. [*tL
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}", stringArray0, true);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("ErX9}", serializeConfig0, parserConfig0);
      Class<JSONPath.ArrayAccessSegment> class0 = JSONPath.ArrayAccessSegment.class;
      jSONPath0.getJavaBeanSerializer(class0);
      SQLWarning sQLWarning0 = new SQLWarning();
      long long0 = JSONPath.LENGTH;
      BigDecimal bigDecimal0 = new BigDecimal((-1580386065683472715L));
      boolean boolean0 = JSONPath.eqNotNull((-1580386065683472715L), bigDecimal0);
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.safeMode");
      String string0 = jSONPath_JSONPathParser0.readName();
      assertEquals("fastjson", string0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("txrue");
      Locale locale0 = Locale.FRANCE;
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, bigInteger0);
      assertFalse(boolean0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      int int0 = jSONPath0.size((Object) mockGregorianCalendar0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      Float float0 = new Float(0.0);
      JSONPath.eqNotNull(float0, float0);
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"a string\",\"size\":\"Large\",\"color\":\"Red\",\"evalKeySet\":null,\"number\":\"1\"}");
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = locale0.stripExtensions();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale1);
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Long long0 = new Long((-582L));
      JSONPath.eqNotNull(long0, long0);
      JSONPath jSONPath0 = JSONPath.compile("scanFieldFloatArray");
      Locale locale0 = Locale.CHINESE;
      locale0.stripExtensions();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String string0 = "^3(<B_XYR'.  D%:HY";
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("^3(<B_XYR'.  D%:HY", serializeConfig0, parserConfig0);
      JSONPath.containsValue((Object) serializeConfig0, "fastjson.parser.deny.internal", (Object) serializeConfig0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("^3(<B_XYR'.  D%:HY", (Throwable) null);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, "G*S!O^;J_80cC_w", sQLTransientConnectionException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("decimal");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("decimal", arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String string0 = "\\\"/p(\"/Iu'{:S}F";
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = null;
      try {
        jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("\"/p(\"/Iu'{:S}F", "\"/p(\"/Iu'{:S}F", true);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 9
         // \"/p(\"/Iu'{:S}F
         //          ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Long long0 = new Long(6007332606592876726L);
      JSONPath jSONPath0 = new JSONPath("{\"com.alibaba.fastjson.JSONPath$MultiIndexSegment\":\"hello\",\"y\":\"a string\",\"z\":true,\"/cause/cause/stackTrace/5\":[\"a string\"],\"syntax error, expect \":{\"com.alibaba.fastjson.JSONPath$MultiIndexSegment\":{\"com.alibaba.fastjson.JSONPath$MultiIndexSegment\":\"a string\"},\"x\":\"a string\"}}");
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        JSONPath.compare(long0, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.math.BigInteger cannot be cast to java.lang.Long
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(81);
      ParserConfig.getGlobalInstance();
      String string0 = "com.alibaba.fastjson.JSONPath$DoubleOpSegement";
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("fastjson.parser.deny", "com.alibaba.fastjson.JSONPath$DoubleOpSegement", false);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      JSONPath.WildCardSegment jSONPath_WildCardSegment1 = JSONPath.WildCardSegment.instance;
      jSONPath_WildCardSegment0.eval(jSONPath0, "com.alibaba.fastjson.JSONPath$DoubleOpSegement", jSONPath_WildCardSegment1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("pjkTg1O7rgZ2DvMx", "fastjson.parser.autoTypeSupport", 1141048066);
      // Undeclared exception!
      try { 
        JSONPath.compare(sQLSyntaxErrorException0, "com.alibaba.fastjson.JSONPath$DoubleOpSegement");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLSyntaxErrorException cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("^'az~Cf");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-1580386065683472715L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("C", (-2551988546877734201L), jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("C");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, propertyNamingStrategy0, (Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      long long0 = 2164696723069287854L;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\"}", 2164696723069287854L, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
      String string0 = "getName";
      JSONPath jSONPath0 = new JSONPath("getName");
      byte byte0 = (byte)102;
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      Long long1 = new Long((byte)102);
      String string1 = "enum";
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)102;
      intArray0[1] = (int) (byte)102;
      intArray0[2] = (int) (byte)102;
      intArray0[3] = (int) (byte)102;
      jSONPath_IntOpSegement0.apply(jSONPath0, jSONPath0, "getName", "enum");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("enum", intArray0);
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = ")7Cx7}";
      stringArray0[3] = "@H-<=_V(U/[Mt";
      stringArray0[4] = "";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = new JSONPath("@H-<=_V(U/[Mt");
      int[] intArray0 = new int[4];
      intArray0[0] = 3;
      intArray0[1] = 2545;
      intArray0[2] = 3;
      intArray0[3] = 2545;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.alibaba.fastjson.JSONPath$ValueSegment", "@H-<=_V(U/[Mt", 2545, intArray0, (Throwable) null);
      Object object0 = jSONPath_MultiPropertySegment0.eval(jSONPath0, jSONPath0, batchUpdateException0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Long[] longArray0 = new Long[4];
      Long long0 = new Long(2545);
      longArray0[0] = long0;
      Long long1 = new Long((-1L));
      longArray0[1] = long1;
      Long long2 = new Long((-1L));
      longArray0[2] = long2;
      Long long3 = new Long((-740L));
      longArray0[3] = long3;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("fastjson.parser.safeMode", longArray0, false);
      JSONPath jSONPath1 = new JSONPath(")7Cx7}");
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.deny.internal", "", 10);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(2545);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath1, sQLDataException0, jSONPath_ArrayAccessSegment0);
      boolean boolean1 = jSONPath_IntObjInSegement0.apply(jSONPath0, parserConfig0, (Object) null, arrayList0);
      assertEquals(5, arrayList0.size());
      assertTrue(arrayList0.equals((Object)object0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = ")7Cx7}";
      stringArray0[3] = "@H-<=_V(U/[Mt";
      stringArray0[4] = "";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = new JSONPath("@H-<=_V(U/[Mt");
      int[] intArray0 = new int[4];
      intArray0[1] = 2545;
      intArray0[3] = 2545;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.alibaba.fastjson.JSONPath$ValueSegment", "@H-<=_V(U/[Mt", 2545, intArray0, (Throwable) null);
      Object object0 = jSONPath_MultiPropertySegment0.eval(jSONPath0, jSONPath0, batchUpdateException0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Long[] longArray0 = new Long[4];
      Long long0 = new Long(2545);
      longArray0[0] = long0;
      Long long1 = new Long((-1L));
      longArray0[1] = long1;
      Long long2 = new Long((-1L));
      longArray0[2] = long2;
      Long long3 = new Long((-740L));
      longArray0[3] = long3;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("fastjson.parser.safeMode", longArray0, false);
      JSONPath jSONPath1 = new JSONPath(")7Cx7}");
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.deny.internal", "", 10);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(2545);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath1, sQLDataException0, jSONPath_ArrayAccessSegment0);
      boolean boolean1 = jSONPath_IntObjInSegement0.apply(jSONPath0, parserConfig0, (Object) null, arrayList0);
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.equals((Object)object0));
      assertEquals(5, arrayList0.size());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig.getGlobalInstance();
      JSONPath.containsValue((Object) serializeConfig0, "fastjson.parser.deny.internal", (Object) serializeConfig0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      SQLWarning sQLWarning0 = new SQLWarning();
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      SQLDataException sQLDataException0 = new SQLDataException();
      Object object0 = JSONPath.reserveToArray("mK)E8pd6,]s^q", (String[]) null);
      jSONPath0.containsValue(object0, (Object) jSONPath_MinSegment0);
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, sQLWarning0, "mK)E8pd6,]s^q");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String string0 = "";
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(6007332606592876737L);
      longArray0[2] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"b\":{}}", longArray0, true);
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"b\":{}}");
      int int0 = 116;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(116, 4391, (-1300));
      String string1 = null;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", (String) null);
      Double double0 = new Double(0.0);
      Long long1 = new Long(4548L);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, long1, sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"unsupported set operation.\",\"color\":\"Red\",\"value\":99,\"value2\":false,\"number\":\"1\",\"x\":false}", serializeConfig0, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      jSONPath_SizeSegment0.eval(jSONPath0, (Object) null, parserConfig0);
      Short short0 = new Short((short)0);
      jSONPath_SizeSegment0.eval(jSONPath0, short0, short0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.autoTypeAccept", false);
      jSONPath_PropertySegment0.eval(jSONPath0, parserConfig0, parserConfig0);
      Short short1 = Short.valueOf((short)2727);
      jSONPath_SizeSegment0.eval(jSONPath0, short1, jSONPath_PropertySegment0);
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath1 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"unsupported set operation.\",\"color\":\"Red\",\"value\":99,\"value2\":false,\"number\":\"1\",\"x\":false}");
      JSONPath.PropertySegment jSONPath_PropertySegment1 = new JSONPath.PropertySegment("nin", true);
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath1, jSONPath_SizeSegment0, jSONPath_PropertySegment1);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      Float float0 = new Float(0.0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath jSONPath0 = JSONPath.compile("99");
      JSONPath jSONPath1 = new JSONPath("99");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1, 1, 1437);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.safeMode", "fastjson.parser.autoTypeAccept");
      Double double0 = new Double(0.0);
      jSONPath_RangeSegment0.eval(jSONPath1, "99", jSONPath0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
      try { 
        JSONPath.extract("npy-ts'J<", "8_I)}V6iWlLYN^<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String string0 = "parser.features.NonStringKeyAsString";
      JSONPath jSONPath0 = JSONPath.compile("parser.features.NonStringKeyAsString");
      jSONPath0.removePropertyValue("parser.features.NonStringKeyAsString", "parser.features.NonStringKeyAsString", true);
      jSONPath0.evalKeySet("parser.features.NonStringKeyAsString");
      JSONPath jSONPath1 = new JSONPath("parser.features.NonStringKeyAsString");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1437, (-2077), (-2077));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("parser.features.NonStringKeyAsString", "parser.features.NonStringKeyAsString");
      Double double0 = new Double((-2077));
      MockDate mockDate0 = new MockDate(1437, 224, 1437, 1437, 265, 2720);
      jSONPath_RangeSegment0.eval(jSONPath0, mockDate0, sQLTransientConnectionException0);
      String string1 = null;
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(2720);
      longArray0[0] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = null;
      try {
        jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement((String) null, longArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$NullSegement");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Long long0 = new Long((-582L));
      JSONPath jSONPath0 = JSONPath.compile("AZJ");
      SQLDataException sQLDataException0 = new SQLDataException("AZJ", "AZJ", 367);
      boolean boolean0 = jSONPath0.contains((Object) sQLDataException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Long.valueOf((-582L));
      long long0 = JSONPath.LENGTH;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[*tL");
      jSONPath_JSONPathParser0.parseArrayAccess(false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeSupport");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.deny.internal");
      jSONPath0.arrayAdd((Object) sQLTransactionRollbackException0, (Object[]) null);
      jSONPath0.contains((Object) null);
      System.setCurrentTimeMillis(8963398325558730460L);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Long long0 = new Long((-582L));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fieldDeserializer", serializeConfig0, parserConfig0);
      jSONPath0.contains((Object) parserConfig0);
      Long[] longArray0 = new Long[3];
      longArray0[0] = long0;
      longArray0[1] = long0;
      Long long1 = new Long(6007332606592876737L);
      longArray0[2] = long1;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("99", longArray0, true);
      JSONPath jSONPath1 = new JSONPath("99");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1437, 1437, 1437);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("99", "99");
      Double double0 = new Double((-1663.20300856839));
      jSONPath_RangeSegment0.eval(jSONPath1, sQLTransientConnectionException0, double0);
      jSONPath_IntObjInSegement0.apply(jSONPath1, jSONPath_RangeSegment0, jSONPath1, long0);
      JSONPath.compile("99");
      // Undeclared exception!
      try { 
        jSONPath1.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("java/lang/Boolean");
      jSONPath0.isRef();
      int[] intArray0 = new int[3];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. java.sql.SQLIntegrityConstraintViolationException
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      String string0 = "java/lang/Boolean";
      JSONPath jSONPath0 = new JSONPath("java/lang/Boolean");
      String string1 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[\"a string\"],\"b\":{}}";
      int int0 = 0;
      Throwable throwable0 = null;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("java/lang/Boolean", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[\"a string\"],\"b\":{}}", 0, (Throwable) null);
      jSONPath0.isRef();
      // Undeclared exception!
      try { 
        sQLTimeoutException0.initCause((Throwable) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with a null
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      String string0 = "{\"autoTypeAccept\":\"hello\",\"y\":7,\"z\":true,\"a\":[\"a string\"],\"syntax error, expect \":{\"autoTypeAccept\":{\"autoTypeAccept\":\"a string\"}}}";
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(6007332606592876726L);
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("{\"autoTypeAccept\":\"hello\",\"y\":7,\"z\":true,\"a\":[\"a string\"],\"syntax error, expect \":{\"autoTypeAccept\":{\"autoTypeAccept\":\"a string\"}}}", longArray0, true);
      JSONPath jSONPath0 = new JSONPath("{\"autoTypeAccept\":\"hello\",\"y\":7,\"z\":true,\"a\":[\"a string\"],\"syntax error, expect \":{\"autoTypeAccept\":{\"autoTypeAccept\":\"a string\"}}}");
      jSONPath_IntObjInSegement0.apply(jSONPath0, jSONPath0, jSONPath0, long0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(116, 4401, 4401);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        JSONPath.compare(long0, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.math.BigInteger cannot be cast to java.lang.Long
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[");
      Long[] longArray0 = new Long[2];
      Long long0 = new Long(5695987590363189151L);
      longArray0[0] = long0;
      Long long1 = new Long((long) longArray0[0]);
      longArray0[1] = long1;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("[", longArray0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntObjInSegement0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, sQLTransientConnectionException0, long1);
      boolean boolean1 = jSONPath_IntObjInSegement0.apply(jSONPath0, jSONPath_FilterSegment0, long1, longArray0[1]);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParserConfig parserConfig1 = new ParserConfig(true);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      jSONPath0.remove((Object) jSONPath_WildCardSegment0);
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("fastjson.parser.autoTypeSupport", (Long[]) null, false);
      // Undeclared exception!
      try { 
        jSONPath_IntObjInSegement0.apply(jSONPath0, parserConfig0, parserConfig0, jSONPath0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$IntObjInSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Long long0 = new Long(971457898041861551L);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("java/lang/Boolean");
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(91);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.parser.autoTypeAccept", (-3714900953609113456L), 971457898041861551L, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntBetweenSegement0, jSONPath_IntBetweenSegement0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, jSONPath_JSONPathParser0);
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.deny.internal", "fastjson.parser.deny.internal", sQLWarning0);
      Set<?> set0 = JSONPath.keySet((Object) sQLTransientConnectionException0, "fastjson.parser.safeMode");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("dZ0/+;x}BE&T,}`", (Long[]) null, false);
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(6007332606592876737L);
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[-99],\"ZDi*4H `D&Y)OW.>\":{}}", longArray0, true);
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[-99],\"ZDi*4H `D&Y)OW.>\":{}}");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1437, 1437, 1437);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[-99],\"ZDi*4H `D&Y)OW.>\":{}}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[-99],\"ZDi*4H `D&Y)OW.>\":{}}");
      Double double0 = new Double((-1663.20300856839));
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntObjInSegement0, jSONPath_IntObjInSegement0, false);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.IN;
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "sE%+", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException1.setNextException(sQLTransientConnectionException0);
      sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[-99],\"ZDi*4H `D&Y)OW.>\":{}}", "sE%+", (-1), (Map<String, ClientInfoStatus>) null, sQLClientInfoException1);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_Operator1, jSONPath_SizeSegment0, sQLClientInfoException2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "^";
      JSONPath jSONPath0 = new JSONPath("^");
      Integer integer0 = new Integer(2540);
      jSONPath0.size((Object) integer0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "^");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Long long0 = new Long(39L);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Integer integer0 = new Integer((byte)0);
      JSONPath.eqNotNull(integer0, integer0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(16384, (-1101), 31);
      mockGregorianCalendar0.getGregorianChange();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ")";
      stringArray0[1] = "decimal";
      stringArray0[2] = ")";
      stringArray0[3] = "decimal";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(")", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-125);
      String string0 = "&N'^xT>ep0q";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("&N'^xT>ep0q");
      jSONPath_JSONPathParser0.buildArraySegement("/");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("bi", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.remove((Object) parserConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":[]}";
      long long0 = (-1621L);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath jSONPath0 = JSONPath.compile("'");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_Operator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("*P7G\"xEl;Bf", (-3169.236949064712), jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("*P7G\"xEl;Bf");
      JSON.DEFAULT_PARSER_FEATURE = 40;
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      JSONPath jSONPath1 = JSONPath.compile("*P7G\"xEl;Bf");
      jSONPath_DoubleOpSegement0.apply(jSONPath0, "*P7G\"xEl;Bf", javaBeanSerializer0, jSONPath1);
      String string0 = "-`wVwx~";
      // Undeclared exception!
      try { 
        JSONPath.Operator.valueOf("-`wVwx~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.alibaba.fastjson.JSONPath.Operator.-`wVwx~
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fastjson.parser.safeMode");
      Set<?> set0 = JSONPath.keySet((Object) "getFieldValue error.", "fastjson.parser.autoTypeSupport");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("^", "^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2^
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      String string0 = "true";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("true");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but 't'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("evalKeySet error : ");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (int[]) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      JSONPath.eq(batchUpdateException0, sQLTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("yHn!IHoiM4`", "yHn!IHoiM4`", 0);
      SQLWarning sQLWarning0 = new SQLWarning("yHn!IHoiM4`", sQLTimeoutException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("{\"fruit\":\"Apple\",\"size\":-99,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":false,\"b\":{}}");
      assertEquals("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":false,\"b\":{}}", sQLSyntaxErrorException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      JSONPath.eq((Object) null, (Object) null);
      String string0 = null;
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment((String) null, (Object) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      String string0 = "AZJl";
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      String string0 = "^c4>3";
      JSONPath jSONPath0 = new JSONPath("^c4>3");
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      String string0 = "{\"x\":\"hello\",\"y\":true,\"z\":true,\"a\":[],\"b\":{}}";
      JSONPath jSONPath0 = JSONPath.compile("{\"x\":\"hello\",\"y\":true,\"z\":true,\"a\":[],\"b\":{}}");
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{\"x\":\"hello\",\"y\":true,\"z\":true,\"a\":[],\"b\":{}}";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues(class0);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues((Object) null, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("0kF'");
      JSONPath jSONPath1 = JSONPath.compile(",  end ");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("saedreq");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (int[]) null, sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath1, "", 2348, batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      Byte byte0 = new Byte((byte)0);
      jSONPath_NotNullSegement0.apply(jSONPath0, "com.alibaba.fastjson.JSONPath$PropertySegment", byte0, byte0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(1534);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("5^tpEY*&O", "com.alibaba.fastjson.JSONPath$PropertySegment", (-1703), hashMap0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":99,\"number\":\"1\"}", 0, sQLClientInfoException0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, byte0, sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.Byte
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("decimal");
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      jSONPath0.keySet((Object) jSONPath_MaxSegment0);
      JSONPath jSONPath1 = new JSONPath("getFieldValue error.");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        JSONPath.extract("getFieldValue error.", "getFieldValue error.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2getFieldValue error.
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("evalKeySet error : ");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("yHn!IHoiM4`", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":[]}", 0);
      SQLWarning sQLWarning0 = new SQLWarning("yHn!IHoiM4`", sQLTimeoutException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLWarning0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLFeatureNotSupportedException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("{\"fruit\":\"Apple\",\"size\":-99,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":false,\"b\":{}}");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLTransientConnectionException0, (Object) sQLSyntaxErrorException0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : evalKeySet error : 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[]";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("[]", "[]", "[]", stringArray0, true);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[]", "[]");
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLInvalidAuthorizationSpecException0);
      JSONPath.size((Object) "[]", "expect '");
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("^3(<B_XYR'.  D%:HY", serializeConfig0, parserConfig0);
      boolean boolean0 = JSONPath.containsValue((Object) serializeConfig0, "fastjson.parser.deny.internal", (Object) serializeConfig0);
      jSONPath0.arrayAdd((Object) serializeConfig0, (Object[]) null);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("G*S!O^;J_80cC_w", ">{BJ7aMm'", "fastjson.parser.deny.internal", (String[]) null, false);
      boolean boolean1 = jSONPath_MatchSegement0.apply(jSONPath0, parserConfig0, serializeConfig0, serializeConfig0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}", stringArray0, true);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.global;
      serializeConfig0.setAsmEnable(false);
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}", serializeConfig0, parserConfig0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      jSONPath_MatchSegement0.apply(jSONPath0, sQLInvalidAuthorizationSpecException0, jSONPath0, serializeConfig0);
      // Undeclared exception!
      try { 
        JSONPath.Operator.valueOf("fastjson.parser.deny");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.alibaba.fastjson.JSONPath.Operator.fastjson.parser.deny
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("^3(<B_XYR'.  D%:HY", serializeConfig0, parserConfig0);
      JSONPath.containsValue((Object) serializeConfig0, "fastjson.parser.deny.internal", (Object) serializeConfig0);
      jSONPath0.arrayAdd((Object) serializeConfig0, (Object[]) null);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.autoTypeSupport", ">{BJ7aMm'", "fastjson.parser.deny.internal", (String[]) null, false);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":99}");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":99}";
      stringArray0[1] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":99}";
      stringArray0[2] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":99}";
      stringArray0[3] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":99}";
      stringArray0[4] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":99}";
      stringArray0[5] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":99}";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":99}", stringArray0, true);
      String string0 = "";
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = JSONPath.compile("yqnd'$!fYq");
      Float float0 = new Float((-4168.294921609918));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.safeMode");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":99}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":99}", 1482);
      jSONPath_NotNullSegement0.apply(jSONPath0, float0, sQLInvalidAuthorizationSpecException0, sQLIntegrityConstraintViolationException0);
      JSONPath jSONPath1 = null;
      try {
        jSONPath1 = new JSONPath("", serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(114, 114, 114);
      JSONPath jSONPath0 = new JSONPath("m");
      String string0 = "m=olT_qN<";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("m=olT_qN<", (String[]) null, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.eval(jSONPath0, jSONPath0, "m=olT_qN<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$StringInSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("t");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept(';');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ';, but 't'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      String string0 = "{\"x\":99,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":99,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('|');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '|, but '{'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      String string0 = null;
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("com.alibaba.fastjson.JSONPath$PropertySegment", 4647432019745535567L, (-1804L), true);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"b\":{}}", serializeConfig0, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"b\":{}}", "fastjson.parser.deny", (-1922));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("R>IU3UDA%h{zdjHK[F!", "fastjson.parser.safeMode", (-1894), sQLDataException0);
      jSONPath_IntBetweenSegement0.apply(jSONPath0, jSONPath0, sQLDataException0, sQLSyntaxErrorException0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.deny", true);
      Integer integer0 = new Integer(0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1894), (-1894), 0);
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, integer0, jSONPath_RangeSegment0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Long long0 = new Long((-582L));
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("AZJl", true);
      Integer integer0 = new Integer(0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((byte) (-125), 14, (byte) (-125));
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$RefOpSegement");
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, long0, jSONPath_RangeSegment0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Object object0 = new Object();
      jSONPath0.deepSet(arrayList0, "char", (byte) (-125), jSONPath_RangeSegment0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Long long0 = new Long((-582L));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fieldDeserializer", serializeConfig0, parserConfig0);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.parser.deny", (-582L), (-582L), true);
      Double double0 = new Double((-582L));
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, double0, long0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1514), 0, 62);
      JSONPath jSONPath0 = JSONPath.compile("^c4>3");
      assertEquals("^c4>3", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      String string0 = "|b/>c#QXb+]%{Z!U-~";
      JSONPath jSONPath0 = new JSONPath("|b/>c#QXb+]%{Z!U-~");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "|b/>c#QXb+]%{Z!U-~";
      stringArray0[1] = "|b/>c#QXb+]%{Z!U-~";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment1 = new JSONPath.MultiPropertySegment(stringArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("p3M,p0g@yV6*<q$k'", (Throwable) null);
      Object object0 = jSONPath_MultiPropertySegment0.eval(jSONPath0, jSONPath_MultiPropertySegment1, sQLTransactionRollbackException0);
      JSONPath.paths(object0);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) jSONPath0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Float float0 = new Float((double) (byte)47);
      boolean boolean0 = JSONPath.eqNotNull(float0, (byte) (-125));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      JSONPath.isDouble(class0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string0 = ")7Cx7}";
      stringArray0[2] = ")7Cx7}";
      stringArray0[3] = "@H-<=_V(U/[Mt";
      stringArray0[4] = "";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      String string1 = "#;5*48B";
      String string2 = "(Ljava/lang/String;)";
      int int0 = 3;
      Throwable throwable0 = null;
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$IntOpSegement");
      int[] intArray0 = new int[4];
      intArray0[0] = 3;
      intArray0[1] = 2545;
      intArray0[2] = 3;
      intArray0[3] = 2545;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.alibaba.fastjson.JSONPath$ValueSegment", "@H-<=_V(U/[Mt", 2545, intArray0, (Throwable) null);
      jSONPath_MultiPropertySegment0.eval(jSONPath0, jSONPath0, batchUpdateException0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = null;
      try {
        jSONPath1 = new JSONPath("", (SerializeConfig) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("XX=g[7T=");
      JSONPath jSONPath0 = new JSONPath("XX=g[7T=");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, mockGregorianCalendar0, jSONPath_WildCardSegment0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath jSONPath0 = new JSONPath("D+NvYj");
      assertEquals("D+NvYj", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("pJm@Kg7RoSokw=!n", (long[]) null, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntInSegement0);
      JSONPath jSONPath0 = JSONPath.compile("E");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(91);
      jSONPath_FilterSegment0.eval(jSONPath0, "pJm@Kg7RoSokw=!n", jSONPath_ArrayAccessSegment0);
      Set<?> set0 = JSONPath.keySet((Object) jSONPath_FilterSegment0, "E");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      String string0 = "false";
      long[] longArray0 = new long[9];
      longArray0[0] = 6607618197526598121L;
      longArray0[1] = 0L;
      longArray0[2] = (-553L);
      longArray0[3] = (-384L);
      longArray0[4] = 1001L;
      longArray0[5] = (-4932L);
      longArray0[6] = 1656L;
      longArray0[7] = 0L;
      longArray0[8] = 0L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("false", longArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("false");
      jSONPath0.evalKeySet("false");
      Double double0 = new Double((-808.4128495));
      jSONPath0.getArrayItem(double0, 0);
      jSONPath_IntInSegement0.apply(jSONPath0, "false", jSONPath0, jSONPath0);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("false", jSONPath_MaxSegment0, jSONPath_Operator0);
      MockInstant.ofEpochSecond(0L);
      // Undeclared exception!
      try { 
        ZoneOffset.of("false");
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid ID for ZoneOffset, non numeric characters found: false
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      Long long0 = new Long(36L);
      long long1 = JSONPath.LENGTH;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!e");
      jSONPath_JSONPathParser0.parseArrayAccess(false);
      Class<SQLWarning> class0 = SQLWarning.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_SizeSegment0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      String string0 = "i";
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("i", "nin", true);
      JSONPath jSONPath0 = new JSONPath("1YT6u jc'K}tOB8");
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) "1YT6u jc'K}tOB8", (Object) jSONPath_RlikeSegement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 1YT6u jc'K}tOB8
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      String string0 = "ZDi*4H `D&Y)OW.>";
      JSONPath jSONPath0 = new JSONPath("ZDi*4H `D&Y)OW.>");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) "ZDi*4H `D&Y)OW.>", (Object) jSONPath_SizeSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : ZDi*4H `D&Y)OW.>
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("{\"x\":\"fastjson.parser.features.ErrorOnEnumNotMatch\",\"y\":7,\"z\":true,\"a\":false,\", method : \":{},\"xx\":false}");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("{\"x\":\"fastjson.parser.features.ErrorOnEnumNotMatch\",\"y\":7,\"z\":true,\"a\":false,\", method : \":{},\"xx\":false}", sQLInvalidAuthorizationSpecException0, true);
      SerializeConfig serializeConfig0 = null;
      try {
        serializeConfig0 = new SerializeConfig(0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      String string0 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[{}],\"b\":{}}";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[{}],\"b\":{}}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[{}],\"b\":{}}");
      boolean boolean0 = true;
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[{}],\"b\":{}}", sQLInvalidAuthorizationSpecException0, true);
      SerializeConfig serializeConfig0 = null;
      try {
        serializeConfig0 = new SerializeConfig(0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("pJm@Kg7RoSokw=!n", (long[]) null, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntInSegement0);
      JSONPath.compile("E");
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "/stackTrace/11");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("parseArray", (-1014497654951707614L), jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
      JSONPath jSONPath0 = new JSONPath("java/lang/Double");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(3238, 3238, 568);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath0, jSONPath_RangeSegment0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-4270347329889690746L);
      longArray0[1] = (-7734L);
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}", longArray0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntInSegement0);
      JSONPath jSONPath0 = null;
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.eval((JSONPath) null, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}", jSONPath_WildCardSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$IntInSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("{\"fruit\":\"Apple\",\"size\":false,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", true);
      // Undeclared exception!
      try { 
        JSONPath.compare(jSONPath_PropertySegment0, jSONPath_PropertySegment0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath$PropertySegment cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("parser", true);
      // Undeclared exception!
      try { 
        JSONPath.compare(jSONPath_PropertySegment0, jSONPath_PropertySegment0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath$PropertySegment cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"1\"}");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      DataTruncation dataTruncation0 = new DataTruncation((-1767), false, true, 0, 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, dataTruncation0);
      HashSet hashSet0 = (HashSet)jSONPath_KeySetSegment0.eval(jSONPath0, dataTruncation0, batchUpdateException0);
      assertNotNull(hashSet0);
      assertEquals(5, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      String[] stringArray0 = new String[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("M}<u");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Long long0 = new Long(8488266005336625107L);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONPath jSONPath0 = new JSONPath("min", serializeConfig0, (ParserConfig) null);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2285, 2285, 2285);
      boolean boolean0 = jSONPath0.set((Object) null, (Object) jSONPath_RangeSegment0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-823);
      intArray0[1] = 84;
      intArray0[2] = (-110);
      intArray0[3] = 242;
      intArray0[4] = 0;
      intArray0[5] = 67;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      boolean boolean0 = JSONPath.set((Object) null, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":false}", (Object) jSONPath_MultiIndexSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":true}}", (long[]) null, true);
      JSONPath jSONPath0 = JSONPath.compile("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":true}}");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":true}}", true);
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.eval(jSONPath0, "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":true}}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":true}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path {\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":true}}, segement {\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":true}}
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      String string0 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":null}";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":null}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":null}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      JSONPath.keySet((Object) null, "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      jSONPath0.evalSize("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("K12dB]q0>?Th&sM@gFJ");
      JSONPath jSONPath0 = new JSONPath("org.springframework.security.web.savedrequest.DefaultSavedRequest$Builder");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("l");
      jSONPath_JSONPathParser0.explain();
      Float float0 = new Float((double) 286L);
      boolean boolean0 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      String string0 = "";
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("", serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Long long0 = new Long((-582L));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fieldDeserializer", serializeConfig0, parserConfig0);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.parser.deny", (-582L), (-582L), true);
      Double double0 = new Double((-582L));
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(93, 34, 34);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, long0, jSONPath0);
      Collection<Object> collection0 = jSONPath0.getPropertyValues(object0);
      assertNotNull(collection0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fieldDeserializer", "fastjson.parser.autoTypeSupport", (-1933692554));
      boolean boolean0 = jSONPath0.set((Object) sQLIntegrityConstraintViolationException0, (Object) serializeConfig0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      JSONPath.reserveToObject("fastjson.parser.deny.internal", (String[]) null);
      int int0 = jSONPath0.evalSize(jSONPath_WildCardSegment0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$StringOpSegement");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":true}";
      boolean boolean0 = false;
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":true}", serializeConfig0, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      jSONPath_SizeSegment0.eval(jSONPath0, (Object) null, parserConfig0);
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      jSONPath_SizeSegment0.eval(jSONPath0, short1, short1);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.autoTypeAccept", false);
      jSONPath_PropertySegment0.eval(jSONPath0, parserConfig0, parserConfig0);
      Short short2 = Short.valueOf((short)2727);
      jSONPath_SizeSegment0.eval(jSONPath0, short2, jSONPath_PropertySegment0);
      String string1 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{r(J.");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      int int0 = 0;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\"}";
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\"}", serializeConfig0, parserConfig0);
      String string1 = "(I)";
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) jSONPath_ArrayAccessSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\"}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(387, 387, 67);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(".class");
      SQLTransientException sQLTransientException0 = new SQLTransientException("json-path can not be null or empty", "illega str", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException("fieldDeserializer", "JSONPath$PropertySegment", (-101), sQLTimeoutException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("(I)Ljava/lang/Enum;", "fastjson", sQLDataException0);
      Double double0 = new Double(3475.6326);
      jSONPath_RangeSegment0.eval(jSONPath0, double0, classLoader0);
      jSONPath0.getPropertyValues(double0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "fastjson", (Object) serializeConfig0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("i=N!(");
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      String string0 = "java/lang/Boolean";
      JSONPath jSONPath0 = new JSONPath("java/lang/Boolean");
      String string1 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[\"a string\"],\"b\":{}}";
      int int0 = 0;
      Throwable throwable0 = null;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("java/lang/Boolean", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[\"a string\"],\"b\":{}}", 0, (Throwable) null);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLTimeoutException0, (Object) sQLTimeoutException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath.compile("D+NvYj");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("D+NvYj", 6.0073326065928765E18, jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_DoubleOpSegement0, jSONPath_DoubleOpSegement0, true);
      JSONPath jSONPath0 = JSONPath.compile("D+NvYj");
      assertEquals("D+NvYj", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "szbA/9eA2`X2");
      JSONPath jSONPath0 = new JSONPath("szbA/9eA2`X2");
      Float float0 = new Float((-2519.4734F));
      JSONPath.containsValue((Object) null, "szbA/9eA2`X2", (Object) float0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "szbA/9eA2`X2", (Object) "szbA/9eA2`X2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("evalKeySet error : ");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("com.alibaba.fastjson.JSONPath$WildCardSegment", 6854854816081053523L, (-3386L), false);
      JSONPath jSONPath1 = JSONPath.compile("evalKeySet error : ");
      assertEquals("evalKeySet error : ", jSONPath1.getPath());
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      String string0 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      boolean boolean0 = true;
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", 0L, 0L, true);
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      int int0 = 0;
      jSONPath0.getArrayItem(jSONPath_IntBetweenSegement0, 0);
      jSONPath0.evalKeySet((Object) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      Float float0 = new Float(0.0);
      JSONPath.eqNotNull(float0, float0);
      JSONPath jSONPath0 = JSONPath.compile("99");
      Long[] longArray0 = new Long[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("fastjson.parser.autoTypeSupport", longArray0, false);
      JSONPath jSONPath1 = new JSONPath("99");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1, 1, 1437);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.safeMode", "fastjson.parser.autoTypeAccept");
      Double double0 = new Double(0.0);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath1, "99", jSONPath0);
      DataTruncation dataTruncation0 = new DataTruncation(1437, false, false, (-1641), 1437, sQLTransientConnectionException0);
      jSONPath_IntObjInSegement0.apply(jSONPath0, dataTruncation0, double0, "]yfw3h!");
      Long long0 = new Long((-1390L));
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement1 = new JSONPath.IntObjInSegement("99", longArray0, false);
      jSONPath_IntObjInSegement1.apply(jSONPath1, sQLTransientConnectionException0, jSONPath0, "99");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntObjInSegement1);
      jSONPath_FilterSegment0.remove(jSONPath1, double0, sQLTransientConnectionException0);
      Set<?> set0 = jSONPath0.evalKeySet(object0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/`j70K2w<>G5K*");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/`j70K2w<>G5K*");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(".BNpy]", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. /`j70K2w<>G5K*
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"y\":7,\"z\":true,\"a\":[],\"b\":{}}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/12", serializeConfig0, parserConfig0);
      boolean boolean1 = jSONPath0.remove((Object) "/stackTrace/12");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":null,\"value\":true,\"value2\":false,\"number\":\"1\"}";
      JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":null,\"value\":true,\"value2\":false,\"number\":\"1\"}");
      SerializeConfig serializeConfig0 = null;
      try {
        serializeConfig0 = new SerializeConfig((-2833));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IdentityHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":null}", false);
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":null}", (SerializeConfig) null, parserConfig0);
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment");
      Byte byte0 = new Byte((byte)0);
      jSONPath_NotNullSegement0.apply(jSONPath0, "com.alibaba.fastjson.JSONPath$PropertySegment", byte0, byte0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(1534);
      String string0 = "";
      String string1 = "{\":\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":[],\"value2\":99,\"number\":\"1\"}";
      int int0 = 0;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("5^tpEY*&O", "com.alibaba.fastjson.JSONPath$PropertySegment", (-1703), hashMap0);
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) jSONPath0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":[]}");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLNonTransientException0.setNextException(sQLSyntaxErrorException0);
      String string0 = null;
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) sQLNonTransientException0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      String string0 = "decimal";
      Long[] longArray0 = new Long[3];
      JSONPath jSONPath0 = JSONPath.compile("decimal");
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath jSONPath1 = new JSONPath("krrtr");
      Byte byte0 = new Byte((byte)99);
      JSONPath.contains((Object) byte0, "kotlin.reflect.KFunction");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath_MaxSegment0, (Object[]) longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path decimal
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("w`)A1", 3498L, jSONPath_Operator0);
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" is not a primitive type");
      Pattern pattern0 = Pattern.compile("syntax error: ");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("hp`%", pattern0, jSONPath_Operator0);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_RegMatchSegement0);
      assertSame(jSONPath_Filter0, jSONPath_RegMatchSegement0);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":{}}", (JSONPath.Segment) null, jSONPath_Operator0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":{}}", false);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("", serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-3246), (-3246), (-3246));
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("wOvbr%A8+uuXt]Cc@u`", serializeConfig0, parserConfig0);
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      ParserConfig.global = parserConfig1;
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, serializeConfig0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      String string0 = "com.alibaba.fastjson.JSONPath$PropertySegment";
      long long0 = 4647432019745535567L;
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("", (-18L), (-2096L), true);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment", serializeConfig0, parserConfig0);
      int int0 = (-2021571038);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "", (Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("com.alibaba.fastjson.JSONPath$PropertySegment", 4647432019745535567L, (-1804L), true);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"b\":{}}", serializeConfig0, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"b\":{}}", "fastjson.parser.deny", (-1922));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("R>IU3UDA%h{zdjHK[F!", "fastjson.parser.safeMode", (-1894), sQLDataException0);
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, jSONPath0, sQLDataException0, sQLSyntaxErrorException0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.deny", true);
      Integer integer0 = new Integer(0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1894), (-1894), 0);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, integer0, jSONPath_RangeSegment0);
      assertNotNull(object0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("fastjson.parser.safeMode", (-1922), jSONPath_Operator0);
      boolean boolean1 = jSONPath_DoubleOpSegement0.apply(jSONPath0, sQLSyntaxErrorException0, (Object) null, "com.alibaba.fastjson.JSONPath$PropertySegment");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Long long0 = new Long((-582L));
      long long1 = JSONPath.LENGTH;
      JSONPath.eqNotNull(long0, (-1580386065683472715L));
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. -
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Long long0 = new Long(8488266005336625107L);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/5");
      Byte byte0 = new Byte((byte)0);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("9mx%!xa");
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath1 = new JSONPath("/stackTrace/5", serializeConfig0, parserConfig0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("fastjson.parser.deny.internal", ".2yV(Lb[^>F>qk", sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("BeanToArray", "fastjson.parser.safeMode", sQLRecoverableException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLFeatureNotSupportedException1);
      jSONPath_NotNullSegement0.apply(jSONPath1, parserConfig0, jSONPath0, sQLSyntaxErrorException0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeAccept");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(",%Yi.&jE", "fastjson.parser.safeMode", (-1050));
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", "max", (-1050));
      TimeZone timeZone0 = TimeZone.getTimeZone("$`:4|[");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      jSONPath1.keySet((Object) mockGregorianCalendar0);
      JSONPath.paths((Object) ".2yV(Lb[^>F>qk", serializeConfig0);
      // Undeclared exception!
      try { 
        JSONPath.Operator.valueOf("9mx%!xa");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.alibaba.fastjson.JSONPath.Operator.9mx%!xa
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("yyyy/MM/dd HH:mm:ss");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("yyyy/MM/dd HH:mm:ss", 8963398325558730460L, 902L, true);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntBetweenSegement0);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/11");
      jSONPath0.keySet((Object) jSONPath_Filter0);
      ClassLoader.getSystemClassLoader();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
      try { 
        JSONPath.extract("/stackTrace/11", "/stackTrace/11");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) sQLInvalidAuthorizationSpecException0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("mK)E8pd6,]s^q", "C");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-2176));
      Float float0 = new Float((double) (byte) (-125));
      boolean boolean0 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("kotlin.ranges.ClosedFloatRange");
      BigDecimal bigDecimal0 = new BigDecimal((-867L));
      Set<?> set0 = jSONPath0.keySet((Object) bigDecimal0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("savedrequest", "savedrequest");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLInvalidAuthorizationSpecException0);
      int int0 = JSONPath.size((Object) sQLTimeoutException0, "savedrequest");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("{\"fruit\":false,\"size\":false,\"color\":null,\"value\":true,\"getInstance\":false,\"number\":\"1\"}", true);
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = new JSONPath("org.joda.time.DateTime");
      assertEquals("org.joda.time.DateTime", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$MultiIndexSegment");
      assertEquals("com.alibaba.fastjson.JSONPath$MultiIndexSegment", jSONPath0.getPath());
      
      Set<?> set0 = jSONPath0.evalKeySet("com.alibaba.fastjson.JSONPath$MultiIndexSegment");
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("mK)E8pd6,]s^q", "mK)E8pd6,]s^q");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2mK)E8pd6,]s^q
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("parser.features.NonStringKeyAsString");
      Set<?> set0 = jSONPath0.evalKeySet("parser.features.NonStringKeyAsString");
      assertNotNull(set0);
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-2176));
      jSONPath_ArrayAccessSegment0.eval(jSONPath0, set0, set0);
      Float float0 = new Float((double) (byte) (-125));
      boolean boolean0 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("{\"fruit\":\"Apple\",\"size\":false,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", true);
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = new JSONPath("org.joda.time.DateTime");
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath0, jSONPath_PropertySegment0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Double> class0 = Double.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      throwableDeserializer0.smartMatch("max");
      JSONPath.keySet((Object) throwableDeserializer0, "enum");
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-1802);
      intArray0[3] = 93;
      intArray0[4] = 2588;
      intArray0[5] = 100000000;
      intArray0[6] = 1522;
      intArray0[7] = (-333);
      intArray0[8] = 2086;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = new JSONPath("99");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      jSONPath_ArrayAccessSegment0.eval(jSONPath0, "enum", (Object) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\"}", 217);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransactionRollbackException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        jSONPath_MultiIndexSegment0.eval(jSONPath0, (Object) null, batchUpdateException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null, serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      String string0 = "(jKxCU4+dxV#;m^)f";
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("(jKxCU4+dxV#;m^)f", "", jSONPath_Operator0);
      String string1 = "";
      SerializeConfig serializeConfig0 = null;
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("", (SerializeConfig) null, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      Long long0 = new Long((-1580386065683472715L));
      Random.setNextRandom(56);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("com.alibaba.fastjson.JSONPath$NotNullSegement", "1U]", jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$NotNullSegement");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Long long0 = new Long(8488266005336625107L);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      String string0 = null;
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("REG_MATC", serializeConfig0, parserConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("6|C`hN}A/&%ZCeqXs<x");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("'Lkft/7yb");
      jSONPath_JSONPathParser1.skipWhitespace();
      Short short0 = new Short((short) (-1668));
      jSONPath_JSONPathParser1.parseArrayAccessFilter(false);
      jSONPath_JSONPathParser1.isEOF();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.deny", "fastjson.parser.autoTypeSupport", 91);
      int int0 = JSONPath.size((Object) "6|C`hN}A/&%ZCeqXs<x", "com.alibaba.fastjson.JSONPath$RegMatchSegement");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("autoTypeAccept", "autoTypeAccept", false);
      JSONPath.compile(";dtFn5]w:C'~o$I");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("illeal jsonpath syntax. ", false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("M92(tn3pmO/");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement(";dtFn5]w:C'~o$I");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \";dtFn5]w\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Long long0 = new Long((-582L));
      JSONPath.eqNotNull(long0, long0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("jACQdts&~~FM}##,gV");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"jACQdts&~~FM}##\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("^'az~Cf");
      jSONPath_JSONPathParser0.buildArraySegement("^'az~Cf");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-1580386065683472715L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":false}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":false}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"fruit\":\"Apple\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
