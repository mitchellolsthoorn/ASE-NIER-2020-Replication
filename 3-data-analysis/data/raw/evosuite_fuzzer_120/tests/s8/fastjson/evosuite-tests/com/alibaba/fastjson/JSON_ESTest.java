/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 00:06:42 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.JSONValidator;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ParseProcess;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.ObjectSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.GenericArrayTypeImpl;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamClass;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSON_ESTest extends JSON_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray(";");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject(",:4Z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        JSON.parseArray(";2P", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but ;, pos 1, line 1, column 2;2P
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray(".1I_yz+_(jqMa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ., pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":-99}");
      jSONObject0.clear();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      serializerFeatureArray0[5] = serializerFeatureArray0[1];
      JSON.writeJSONStringTo(jSONObject0, (Writer) null, serializerFeatureArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SerializeWriter serializeWriter0 = new SerializeWriter();
      LinkedHashMap<GenericArrayTypeImpl, JSONArray> linkedHashMap0 = new LinkedHashMap<GenericArrayTypeImpl, JSONArray>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[2];
      serializerFeatureArray0[4] = serializerFeatureArray0[2];
      serializerFeatureArray0[5] = serializerFeatureArray0[1];
      serializerFeatureArray0[6] = serializerFeatureArray0[4];
      JSON.writeJSONString((Writer) serializeWriter0, (Object) linkedHashMap0, serializerFeatureArray0);
      assertEquals(2, serializeWriter0.size());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      MockFile mockFile0 = new MockFile("true");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      JSON.writeJSONString((Writer) mockFileWriter0, (Object) serializerFeature0, (-671), serializerFeatureArray0);
      assertEquals(2L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(382);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      // Undeclared exception!
      try { 
        jSONArray0.toString(serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) uTF8Decoder0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseObject("99");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to JSONObject.
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("{TY$tb(i");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("fastjson.asmEnable");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = JSON.isValid("{);p");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("null");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      TreeMap<Annotation, JSONValidator.Type> treeMap0 = new TreeMap<Annotation, JSONValidator.Type>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      int int0 = JSON.writeJSONString((OutputStream) bufferedOutputStream0, charset0, (Object) treeMap0, serializerFeatureArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "5");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      TreeMap<String, JSONPObject> treeMap0 = new TreeMap<String, JSONPObject>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      int int0 = JSON.writeJSONString((OutputStream) filterOutputStream0, (Object) treeMap0, 3, serializerFeatureArray0);
      assertEquals(2L, mockFile0.length());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      String string0 = jSONArray0.toString(serializerFeatureArray0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[2];
      serializerFeatureArray0[5] = serializerFeatureArray0[0];
      serializerFeatureArray0[6] = serializerFeatureArray0[3];
      serializerFeatureArray0[7] = serializerFeatureArray0[2];
      String string0 = JSON.toJSONStringZ(charArrayWriter0, serializeConfig0, serializerFeatureArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringValueAsString;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONStringWithDateFormat(serializeConfig0, "", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      String string0 = JSON.toJSONString((Object) null, serializeFilterArray0, serializerFeatureArray0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = JSON.toJSONString((Object) null, false);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) null, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) pascalNameFilter0, serializeConfig0, (SerializeFilter[]) null, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeatureArray0[2];
      serializerFeatureArray0[5] = serializerFeatureArray0[2];
      serializerFeatureArray0[6] = serializerFeatureArray0[0];
      serializerFeatureArray0[7] = serializerFeatureArray0[4];
      serializerFeatureArray0[8] = serializerFeatureArray0[1];
      String string0 = JSON.toJSONString((Object) "", (-24), serializerFeatureArray0);
      assertEquals("[\n\t\n]", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = JSON.toJSONString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = new Object();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes(object0, serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte)125}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      byte[] byteArray0 = JSON.toJSONBytes((Object) serializerFeature0, serializeFilterArray0, serializerFeatureArray0);
      assertEquals(19, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[0] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes((Object) "false", serializeConfig0, serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)102, (byte)97, (byte)108, (byte)115, (byte)101, (byte)34}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(954, false);
      SerializeConfig serializeConfig0 = new SerializeConfig(3089, false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes((Object) jSONObject0, serializeConfig0, 3089, serializerFeatureArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Object object0 = JSON.toJSON((Object) null, parserConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object object0 = JSON.toJSON((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte) (-30);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[9];
      StringWriter stringWriter0 = JSON.parseObject(byteArray0, charset0, (Type) null, parserConfig0, (ParseProcess) null, (-1684), featureArray0);
      assertNull(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-110);
      Feature[] featureArray0 = new Feature[3];
      JSON.parseObject(byteArray0, (Type) null, featureArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Feature[] featureArray0 = new Feature[4];
      byte[] byteArray0 = new byte[0];
      Charset charset0 = Charset.defaultCharset();
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      Type type0 = FieldInfo.getFieldType((Class<?>) class0, (Type) class0, (Type) class0);
      SimplePropertyPreFilter simplePropertyPreFilter0 = JSON.parseObject(byteArray0, 55296, (-1), charset0, type0, featureArray0);
      assertNull(simplePropertyPreFilter0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Feature feature0 = Feature.SupportNonPublicField;
      Feature[] featureArray0 = new Feature[8];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      featureArray0[4] = feature0;
      featureArray0[5] = feature0;
      featureArray0[6] = feature0;
      featureArray0[7] = feature0;
      JSONObject jSONObject0 = JSON.parseObject("", featureArray0);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.SupportNonPublicField;
      featureArray0[0] = feature0;
      featureArray0[1] = featureArray0[0];
      featureArray0[2] = featureArray0[0];
      featureArray0[3] = featureArray0[0];
      JSONObject jSONObject0 = JSON.parseObject("{}", featureArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      Class<String> class0 = String.class;
      ObjectStreamClass objectStreamClass0 = ObjectStreamClass.lookup(class0);
      Class<?> class1 = objectStreamClass0.forClass();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      StringWriter stringWriter0 = JSON.parseObject((String) null, (Type) class1, parserConfig0, featureArray0);
      assertNull(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      Class<String> class0 = String.class;
      Type type0 = FieldInfo.getFieldType((Class<?>) class0, (Type) class0, (Type) class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONArray jSONArray0 = JSON.parseObject("", type0, parserConfig0, 20, featureArray0);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      Feature[] featureArray0 = new Feature[8];
      PascalNameFilter pascalNameFilter0 = JSON.parseObject((String) null, class0, featureArray0);
      assertNull(pascalNameFilter0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      Feature[] featureArray0 = new Feature[6];
      PascalNameFilter pascalNameFilter0 = JSON.parseObject("", class0, (ParseProcess) null, featureArray0);
      assertNull(pascalNameFilter0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      JSONObject jSONObject0 = JSON.parseObject("", class0);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      JSONArray jSONArray0 = JSON.parseObject("[[]]", class0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject("{}");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      String string0 = JSON.toJSONString((Object) jSONObject0, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<Object> class0 = Object.class;
      List<Object> list0 = JSON.parseArray("[{}]", class0);
      assertFalse(list0.contains("[{}]"));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = JSON.parseArray("[]");
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = JSON.parseArray("[[-99],\"a string\",true,true]");
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[19];
      stringArray0[0] = "+U";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      byte[] byteArray0 = JSON.toJSONBytes((Object) "u)VC(:zmX$;", serializeConfig0, serializeFilterArray0, "", 989, serializerFeatureArray0);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.SupportArrayToBean;
      featureArray0[0] = feature0;
      featureArray0[1] = featureArray0[0];
      featureArray0[2] = featureArray0[0];
      featureArray0[3] = featureArray0[0];
      featureArray0[4] = featureArray0[1];
      Object object0 = JSON.parse(byteArray0, featureArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(object0);
      assertArrayEquals(new byte[] {(byte)123, (byte)125}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      Object object0 = JSON.parse("", featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.IgnoreAutoType;
      featureArray0[0] = feature0;
      featureArray0[1] = featureArray0[0];
      featureArray0[2] = featureArray0[0];
      featureArray0[3] = feature0;
      featureArray0[4] = featureArray0[0];
      featureArray0[5] = feature0;
      featureArray0[6] = featureArray0[1];
      featureArray0[7] = featureArray0[4];
      JSONObject jSONObject0 = (JSONObject)JSON.parse("{\"typeName\":\"com.alibaba.fastjson.util.ParameterizedTypeImpl@0\"}", featureArray0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.IgnoreAutoType;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = featureArray0[0];
      featureArray0[3] = featureArray0[1];
      featureArray0[4] = featureArray0[3];
      featureArray0[5] = featureArray0[0];
      featureArray0[6] = featureArray0[1];
      featureArray0[7] = feature0;
      Object object0 = JSON.parse((String) null, parserConfig0, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONArray jSONArray0 = (JSONArray)JSON.parse("[[null,\"a string\"],\"a string\",-99,true]", parserConfig0, 16);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Object object0 = JSON.parse((String) null, parserConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object object0 = JSON.parse("", (-505));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      JSON.isValid("(W5q_)x");
      JSON.getMixInAnnotations(parameterizedTypeImpl0);
      JSONArray jSONArray0 = new JSONArray(293);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedList0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAddAll((-6), (Collection<?>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -6, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.SupportNonPublicField;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = featureArray0[0];
      featureArray0[3] = featureArray0[0];
      JSONObject jSONObject0 = JSON.parseObject("{\"fruit\":-99,\"\":\"\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":{\"x\":-99}}", featureArray0);
      MockFile mockFile0 = new MockFile("X~^ZV\"uZyxJA[^m#]j");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        jSONObject0.writeJSONString((Appendable) mockPrintStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(16);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "yyyy-MM-dd HH:mm:ss");
      // Undeclared exception!
      try { 
        jSONObject0.writeJSONString((Appendable) charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(13);
      // Undeclared exception!
      try { 
        jSONObject0.writeJSONString((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[1];
      serializerFeatureArray0[5] = serializerFeatureArray0[0];
      serializerFeatureArray0[6] = serializerFeatureArray0[0];
      serializerFeatureArray0[7] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(charArrayWriter0, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        JSON.writeJSONString((Writer) serializeWriter0, (Object) "\"java.io.CharArrayWriter@0000000005\"", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((Writer) null, (Object) "{\"0000-00-00\":false,\"size\":\"Large\",\"color\":\"a string\",\"value\":false,\"value2\":false,\"number\":\"1\"}", 989, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      Charset charset0 = Charset.defaultCharset();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "v|JVr07";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeature0;
      serializerFeatureArray0[7] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) mockPrintStream0, charset0, (Object) simplePropertyPreFilter0, serializeConfig0, (SerializeFilter[]) null, "v|JVr07", 954, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) null, charset0, (Object) null, serializeConfig0, serializeFilterArray0, "/**/", 26, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) null, (Object) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("@type");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0, false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeatureArray0[1];
      serializerFeatureArray0[5] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) mockPrintStream0, (Object) "BrowserSecure", 302, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedHashMap<JSONObject, JSONArray> linkedHashMap0 = new LinkedHashMap<JSONObject, JSONArray>(989, 446.3F);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[2];
      serializerFeatureArray0[4] = serializerFeatureArray0[3];
      serializerFeatureArray0[5] = serializerFeatureArray0[1];
      serializerFeatureArray0[6] = serializerFeatureArray0[5];
      serializerFeatureArray0[7] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) null, (Object) linkedHashMap0, 64, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TreeMap<JSONPath.Operator, PascalNameFilter> treeMap0 = new TreeMap<JSONPath.Operator, PascalNameFilter>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeatureArray0[2];
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      serializerFeatureArray0[5] = serializerFeatureArray0[0];
      try { 
        JSON.writeJSONString((OutputStream) pipedOutputStream0, (Object) treeMap0, 989, serializerFeatureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      // Undeclared exception!
      try { 
        JSON.toJavaObject((JSON) jSONObject0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONStringWithDateFormat(uTF8Decoder0, ".?~czl#WMFB", serializerFeatureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      // Undeclared exception!
      try { 
        JSON.toJSONStringWithDateFormat(serializeConfig0, "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer", serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, treeMap0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      serializerFeatureArray0[5] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) javaBeanSerializer0, (SerializeFilter[]) null, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      Class class1 = (Class)FieldInfo.getFieldType((Class<?>) class0, (Type) class0, (Type) class0);
      String[] stringArray0 = new String[3];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class1, stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) class1, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringValueAsString;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "true", serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Class<com.alibaba.fastjson.util.ParameterizedTypeImpl> class0 = com.alibaba.fastjson.util.ParameterizedTypeImpl.class;
      ObjectSerializer objectSerializer0 = serializeConfig0.createJavaBeanSerializer(class0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) objectSerializer0, serializeConfig0, (SerializeFilter[]) null, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "7Qi5=JZbwnn";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) simplePropertyPreFilter0, serializeConfig0, (SerializeFilter[]) null, "yyyy-MM-dd HH:mm:ss", 26, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "", serializeConfig0, (SerializeFilter[]) null, "", (-27), serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(13);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      serializerFeatureArray0[4] = serializerFeatureArray0[1];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) jSONObject0, (SerializeConfig) null, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "IQu", 13, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)107;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)84;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.MapSortField;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[4] = serializerFeature1;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "", (int) (byte)4, serializerFeatureArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(5);
      jSONObject0.put("_asm_fieldType", (Object) "_asm_fieldType");
      // Undeclared exception!
      try { 
        jSONObject0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        JSON.toJSONBytes(charset0, (Object) null, serializeConfig0, (SerializeFilter[]) null, "", 18, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeatureArray0[3];
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeatureArray0[2];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "parser.features.NonStringKeyAsString", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeatureArray0[2];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "{\"x\":\"hello\",\"y\":7E\"z\":true,\"a\":true,\"f\":{}}", serializeFilterArray0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      Type type0 = FieldInfo.getFieldType((Class<?>) class0, (Type) class0, (Type) class0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) type0, (SerializeFilter) null, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[1];
      serializerFeatureArray0[5] = serializerFeatureArray0[4];
      serializerFeatureArray0[6] = serializerFeatureArray0[2];
      serializerFeatureArray0[7] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "-8eK6Ecft<8.a5A", (SerializeConfig) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserSecure;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[9];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "u)VC(:zmX$;", serializeConfig0, serializeFilterArray0, "u)VC(:zmX$;", 16, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) serializerFeature0, serializeConfig0, (SerializeFilter[]) null, "", 660, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "", (SerializeConfig) null, (SerializeFilter[]) null, "", 3, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[3];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) null, serializeConfig0, serializeFilterArray0, (-35), (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Feature[] featureArray0 = new Feature[3];
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      String[] stringArray0 = new String[3];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) featureArray0[0], serializeConfig0, (SerializeFilter) simplePropertyPreFilter0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "", serializeConfig0, 18, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) uTF8Decoder0, serializeConfig0, 989, serializerFeatureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "}6\"-JjEdp6{.M1t", (SerializeConfig) null, 0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "true", 20, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      SerializerFeature serializerFeature1 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[3] = serializerFeature1;
      serializerFeatureArray0[4] = serializerFeatureArray0[3];
      serializerFeatureArray0[5] = serializerFeatureArray0[0];
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[6] = serializerFeature2;
      // Undeclared exception!
      JSON.toJSONBytes((Object) "false", 1222, serializerFeatureArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) uTF8Decoder0, 12, serializerFeatureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) null, 2778, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) pascalNameFilter0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.setDefaultTypeKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      Feature feature0 = Feature.CustomMapDeserializer;
      char[] charArray0 = new char[5];
      Feature[] featureArray0 = new Feature[4];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, 0, (Type) class0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONPObject jSONPObject0 = new JSONPObject();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      byte[] byteArray0 = JSON.toJSONBytes((Object) jSONPObject0, (SerializeFilter) null, serializerFeatureArray0);
      Charset charset0 = Charset.defaultCharset();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = new ParserConfig(true);
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.AutoCloseSource;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, charset0, (Type) parameterizedTypeImpl0, parserConfig0, (ParseProcess) null, 52, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // scan null error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[0] = feature0;
      featureArray0[1] = featureArray0[0];
      featureArray0[2] = featureArray0[0];
      featureArray0[3] = featureArray0[0];
      featureArray0[4] = feature0;
      featureArray0[5] = featureArray0[3];
      featureArray0[6] = featureArray0[5];
      featureArray0[7] = featureArray0[1];
      featureArray0[8] = featureArray0[6];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (Type) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 6, line 1, column 7\u0000\u0000\u0000\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      byte[] byteArray0 = new byte[8];
      Feature[] featureArray0 = new Feature[4];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (int) 113, (int)  (-1), (CharsetDecoder) null, (Type) parameterizedTypeImpl0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Class<String> class0 = String.class;
      ObjectStreamClass objectStreamClass0 = ObjectStreamClass.lookupAny(class0);
      Class<?> class1 = objectStreamClass0.forClass();
      Feature[] featureArray0 = new Feature[7];
      // Undeclared exception!
      try { 
        JSON.parseObject((byte[]) null, (-2147483645), (-622), charset0, (Type) class1, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("(Ljava/lang/Class;)Ljava/util/Collection;", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2(Ljava/lang/Class;)Ljava/util/Collection;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.OrderedField;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("false", featureArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<JSONPObject> class0 = JSONPObject.class;
      Class<JSONArray> class1 = JSONArray.class;
      FieldInfo fieldInfo0 = new FieldInfo("1.2.68", class0, class1, class1, (Field) null, (-4606), (-4606), (-4606));
      Type type0 = FieldInfo.getFieldType((Class<?>) class0, (Type) fieldInfo0.fieldClass, (Type) class1);
      Feature[] featureArray0 = new Feature[2];
      // Undeclared exception!
      try { 
        JSON.parseObject("!GXPvN ", type0, (ParserConfig) null, (-4606), featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject(";Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V", (Type) null, 1, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Feature[] featureArray0 = new Feature[4];
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("\"a string\"", class0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Feature feature0 = Feature.SupportArrayToBean;
      Class<Method> class0 = Method.class;
      Feature[] featureArray0 = new Feature[2];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("O~V", class0, (ParseProcess) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.reflect.Method
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseObject("-$$ob/6^O~<:?");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) byteArrayInputStream0, (Charset) null, (Type) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 3, line 1, column 4\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) null, (Charset) null, (Type) class0, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[28];
      Feature[] featureArray0 = new Feature[0];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-352), 3327);
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) byteArrayInputStream0, charset0, (Type) null, featureArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset charset0 = Charset.defaultCharset();
      Feature[] featureArray0 = new Feature[0];
      try { 
        JSON.parseObject((InputStream) pipedInputStream0, charset0, (Type) null, featureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(3468);
      Feature[] featureArray0 = new Feature[6];
      try { 
        JSON.parseObject((InputStream) pipedInputStream0, (Type) null, featureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray("[]", (Type[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 8, line 1, column 9\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Feature[] featureArray0 = new Feature[0];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 3327, 3327, (CharsetDecoder) uTF8Decoder0, featureArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 3327, 3327, (CharsetDecoder) uTF8Decoder0, 14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse("]", (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse("{);p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : )pos 1, line 1, column 2{);p
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Type type0 = JSON.getMixInAnnotations((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      byte[] byteArray0 = new byte[0];
      Feature[] featureArray0 = new Feature[0];
      JSON.parse(byteArray0, featureArray0);
      JSON.isValidObject("");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(hashMap0);
      StringWriter stringWriter0 = new StringWriter(3089);
      JSONObject jSONObject1 = jSONObject0.fluentRemove(stringWriter0);
      byte byte0 = jSONObject1.getByteValue("@type");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONObject jSONObject0 = (JSONObject)JSON.toJSON((Object) serializeConfig0, serializeConfig0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Integer integer0 = new Integer(84);
      Object object0 = JSON.toJSON((Object) integer0, (SerializeConfig) null);
      assertEquals(84, object0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      Object object0 = JSON.toJSON((Object) serializerFeatureArray0[1], serializeConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      Charset charset0 = Charset.defaultCharset();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes(charset0, (Object) "", serializeConfig0, (SerializeFilter[]) null, "", 18, serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)39, (byte)39}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<String> class0 = String.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      SerializeConfig serializeConfig0 = new SerializeConfig(410, false);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Charset) null, (Object) javaBeanSerializer0, serializeConfig0, serializeFilterArray0, "illegal state : ", 410, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes(charset0, (Object) uTF8Decoder0, serializeConfig0, serializeFilterArray0, (String) null, 3089, serializerFeatureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(false);
      SerializeConfig serializeConfig0 = new SerializeConfig(989, true);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[3];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[2];
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeatureArray0[0];
      serializerFeatureArray0[7] = serializerFeatureArray0[0];
      serializerFeatureArray0[8] = serializerFeatureArray0[3];
      String string0 = JSON.toJSONString((Object) jSONObject0, serializeConfig0, serializeFilterArray0, "java.util.OptionalLong", 1084, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Feature feature0 = Feature.OrderedField;
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) feature0, serializeConfig0, (SerializeFilter[]) null, (String) null, (-27), serializerFeatureArray0);
      assertEquals("14", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(17, true);
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) serializerFeature0, serializeConfig0, serializeFilterArray0, "", 1084, serializerFeatureArray0);
      assertEquals("\"IgnoreErrorGetter\"", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      ParserConfig parserConfig0 = new ParserConfig(false);
      Feature[] featureArray0 = new Feature[0];
      try { 
        JSON.parseObject((InputStream) pipedInputStream0, charset0, (Type) class0, parserConfig0, (ParseProcess) null, 26, featureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      String[] stringArray0 = new String[4];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Feature[] featureArray0 = new Feature[7];
      Constructor<StringWriter> constructor0 = JSON.parseObject(byteArray0, (int) 121, (-287), charset0, (Type) class1, parserConfig0, (ParseProcess) null, (int) 0, featureArray0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      Type type0 = FieldInfo.getFieldType((Class<?>) class0, (Type) class0, (Type) class0);
      byte[] byteArray0 = new byte[8];
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[4];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, 3089, 3089, charset0, type0, parserConfig0, (ParseProcess) null, 99999999, featureArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3089
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<String> class0 = String.class;
      Type type0 = FieldInfo.getFieldType((Class<?>) class0, (Type) class0, (Type) class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature feature0 = Feature.SupportAutoType;
      Feature[] featureArray0 = new Feature[8];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      featureArray0[4] = feature0;
      featureArray0[5] = feature0;
      featureArray0[6] = feature0;
      featureArray0[7] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("parseInt error", type0, parserConfig0, (ParseProcess) null, 3089, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.parser.safeMode", (Type) class0, (ParserConfig) null, (ParseProcess) null, 1, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<String> class0 = String.class;
      Type type0 = FieldInfo.getFieldType((Class<?>) class0, (Type) class0, (Type) class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[5];
      SimplePropertyPreFilter simplePropertyPreFilter0 = JSON.parseObject("", type0, parserConfig0, (ParseProcess) null, 0, featureArray0);
      assertNull(simplePropertyPreFilter0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[5];
      SimplePropertyPreFilter simplePropertyPreFilter0 = JSON.parseObject((String) null, (Type) null, parserConfig0, (ParseProcess) null, 2, featureArray0);
      assertNull(simplePropertyPreFilter0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Feature[] featureArray0 = new Feature[3];
      // Undeclared exception!
      try { 
        JSON.parse("false", featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parse("!V", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2!V
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        JSON.parse("+t", parserConfig0, 26);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Object object0 = JSON.parse((String) null, parserConfig0, 989);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[14];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "", serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      byte[] byteArray0 = JSON.toJSONBytes((Object) null, 20, serializerFeatureArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse("}n0ZKH7^B`Dbzh4-^c[", 1801);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2}n0ZKH7^B`Dbzh4-^c[
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SerializeWriter serializeWriter0 = new SerializeWriter((Writer) null);
      // Undeclared exception!
      try { 
        JSON.writeJSONString((Writer) serializeWriter0, (Object) null, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[5];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) pascalNameFilter0, serializeFilterArray0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Object object0 = JSON.parse("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) null, (SerializeConfig) null, 10, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "IQu", 13, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("hzX>\"1=R O^,nT:", class0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      MockFile mockFile0 = new MockFile("true");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      // Undeclared exception!
      try { 
        JSON.writeJSONString((Writer) mockFileWriter0, (Object) serializerFeature0, (-671), serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      JSONObject jSONObject0 = (JSONObject)JSON.toJSON((Object) pascalNameFilter0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Feature feature0 = Feature.OrderedField;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      SerializeConfig serializeConfig0 = new SerializeConfig((byte)107);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[4];
      byte[] byteArray0 = JSON.toJSONBytes((Object) feature0, serializeConfig0, serializeFilterArray0, (int) (byte)107, serializerFeatureArray0);
      assertEquals(14, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(5);
      String string0 = jSONObject0.toJSONString();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "true", serializeConfig0, (SerializeFilter) pascalNameFilter0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) pipedOutputStream0, (Object) pipedOutputStream0, 997, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      Class class1 = (Class)FieldInfo.getFieldType((Class<?>) class0, (Type) class0, (Type) class0);
      JSON.removeMixInAnnotations(class1);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSON.removeMixInAnnotations((Type) null);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Object> class0 = Object.class;
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl(class0);
      JSON.addMixInAnnotations(genericArrayTypeImpl0, (Type) null);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      JSON.addMixInAnnotations(parameterizedTypeImpl0, parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      com.alibaba.fastjson.util.ParameterizedTypeImpl parameterizedTypeImpl0 = new com.alibaba.fastjson.util.ParameterizedTypeImpl(typeArray0, class0, class0);
      JSON.addMixInAnnotations((Type) null, parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("[Wnufl],\"a string\",-99]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("@type");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("{\"fruit\":-99,\"\":\"Large\",\"color\":\"unsupported array put operation. \",\"value\":true,\"value2\":false,\"number]:\"1\",\"xz:{},\"writeDirectNonContext\":{\"x\":-99}}");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("java.time.OffsetTime");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      boolean boolean0 = JSON.isValid("can not cast to JSONObject.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = JSON.isValid("[\"a string\"]");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = JSON.isValid("}n0ZKH7^B`Dbzh4-^c[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean boolean0 = JSON.isValid("{\"\":[99,\"a string\",null]}");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = JSON.isValid(")d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      boolean boolean0 = JSON.isValid("false");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = JSON.isValid("true");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = JSON.isValid("1.2.68");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      boolean boolean0 = JSON.isValid("4rUS2I7^sXZQ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      boolean boolean0 = JSON.isValid("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      boolean boolean0 = JSON.isValid((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        JSON.parse((byte[]) null, 65544, 65544, (CharsetDecoder) uTF8Decoder0, (-2615));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      serializeConfig0.setTypeKey("[[null,\"a string\"],\"a string\",-99,true]");
      serializeConfig0.clearSerializers();
      JSON.isValidArray("[[null,\"a string\"],\"a string\",-99,true]");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Charset charset0 = Charset.defaultCharset();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.DisableFieldSmartMatch;
      featureArray0[0] = feature0;
      Object object0 = JSON.parseObject((InputStream) sequenceInputStream0, charset0, (Type) null, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONValidator$Type
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      StringWriter stringWriter0 = new StringWriter();
      Object object0 = JSON.toJSON((Object) stringWriter0, serializeConfig0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      SerializeConfig serializeConfig0 = new SerializeConfig(3, false);
      Object object0 = JSON.toJSON((Object) serializerFeature0, serializeConfig0);
      assertEquals("WriteBigDecimalAsPlain", object0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONPObject jSONPObject0 = new JSONPObject();
      SerializeConfig serializeConfig0 = new SerializeConfig(217);
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) jSONPObject0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // scan null error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      TreeMap<JSONPath.Operator, PascalNameFilter> treeMap0 = new TreeMap<JSONPath.Operator, PascalNameFilter>();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Object object0 = JSON.toJSON((Object) treeMap0, serializeConfig0);
      MockFile mockFile0 = new MockFile("1.2.68");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeatureArray0[1];
      serializerFeatureArray0[6] = serializerFeatureArray0[1];
      int int0 = JSON.writeJSONString((OutputStream) mockPrintStream0, object0, serializerFeatureArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      SerializeConfig serializeConfig0 = new SerializeConfig(989);
      Object object0 = JSON.toJSON((Object) jSONObject0, serializeConfig0);
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Charset charset0 = Charset.defaultCharset();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      int int0 = JSON.writeJSONString((OutputStream) mockPrintStream0, charset0, (Object) mockPrintStream0, serializeConfig0, serializeFilterArray0, "{\"\":[99,\"a string\",null],\"passHandle\":{}}", (-1678), serializerFeatureArray0);
      assertEquals(62, int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeature0;
      serializerFeatureArray0[7] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) null, charset0, (Object) null, serializeConfig0, (SerializeFilter[]) null, "", (-35), serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";_(I!>Nrh5r|@NlJ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) mockPrintStream0, (Object) ";_(I!>Nrh5r|@NlJ", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) class0, serializeConfig0, serializerFeatureArray0);
      assertEquals("\"java.lang.Object\"", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.toJSONStringWithDateFormat("fastjson.parser.autoTypeAccept", "OC\"", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      List<Object> list0 = JSON.parseArray("[]", typeArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      String string0 = JSON.toJSONString((Object) list0, serializeConfig0, (SerializeFilter) null, serializerFeatureArray0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      List<Object> list0 = JSON.parseArray((String) null, (Type[]) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        JSON.parseArray("{\"com.alibaba.fastjson.JSON\":\"a string\"}", typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("/**/", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but EOF, pos 4, line 1, column 5/**_/
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("true", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but true, pos 4, line 1, column 5true
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Object> class0 = Object.class;
      List<Object> list0 = JSON.parseArray((String) null, class0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      List<JSONPath.Operator> list0 = JSON.parseArray("", class0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONArray jSONArray0 = JSON.parseArray("");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONArray jSONArray0 = JSON.parseArray((String) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<Method> class0 = Method.class;
      char[] charArray0 = new char[3];
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, 1840, (Type) class0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<String> class0 = String.class;
      Type type0 = FieldInfo.getFieldType((Class<?>) class0, (Type) class0, (Type) class0);
      char[] charArray0 = new char[0];
      Object object0 = JSON.parseObject(charArray0, (-3394), type0, (Feature[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<Method> class0 = Method.class;
      char[] charArray0 = new char[2];
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, 27, (Type) class0, featureArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<String> class0 = String.class;
      Type type0 = FieldInfo.getFieldType((Class<?>) class0, (Type) class0, (Type) class0);
      Object object0 = JSON.parseObject((char[]) null, 6, type0, (Feature[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        JSON.parseObject("yyyy-MM-dd HH:mm:ss", (Type) null, parserConfig0, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parseObject("`[WG%&&(3", (Type) null, 113, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      Enum<JSONPath.Operator> enum0 = JSON.parseObject((String) null, (Type) null, 103, featureArray0);
      assertNull(enum0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      Enum<JSONPath.Operator> enum0 = JSON.parseObject("", (Type) null, 1, featureArray0);
      assertNull(enum0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      Feature[] featureArray0 = new Feature[1];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 3327, 3327, (CharsetDecoder) uTF8Decoder0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Feature[] featureArray0 = new Feature[0];
      Object object0 = JSON.parse(byteArray0, 14, 14, (CharsetDecoder) null, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Object object0 = JSON.parse((byte[]) null, 3327, 3327, (CharsetDecoder) uTF8Decoder0, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte) (-48);
      Object object0 = JSON.parse(byteArray0, (Feature[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        JSON.parse("fastjson.parser.deny.internal", parserConfig0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        JSON.parse("fastjson.parser.deny.internal", parserConfig0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("1.2.68", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual float, pos 3, line 1, column 41.2.68
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("V.+2_");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSON.handleResovleTask(defaultJSONParser0, jSONPath_Operator0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.toString();
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(20);
      // Undeclared exception!
      try { 
        jSONArray0.toJavaObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(30, false);
      Class<JSON> class0 = JSON.class;
      JSONObject jSONObject1 = (JSONObject)JSON.toJavaObject((JSON) jSONObject0, class0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Feature[] featureArray0 = new Feature[2];
      // Undeclared exception!
      try { 
        JSON.parseObject("O~V", class0, (ParseProcess) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      SerializeWriter serializeWriter0 = new SerializeWriter();
      JSONObject jSONObject0 = new JSONObject(13);
      jSONObject0.writeJSONString((Appendable) serializeWriter0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSON.clearMixInAnnotations();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSON.setDefaultTypeKey("KmhR@");
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      Class class1 = (Class)FieldInfo.getFieldType((Class<?>) class0, (Type) class0, (Type) class0);
      String[] stringArray0 = new String[3];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class1, stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) class1, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.parser.autoTypeAccept", (Type) class0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      byte[] byteArray0 = new byte[5];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (int)  (-10), 79, (CharsetDecoder) uTF8Decoder0, (Type) null, featureArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Feature[] featureArray0 = new Feature[4];
      LinkedHashMap<PascalNameFilter, PascalNameFilter> linkedHashMap0 = JSON.parseObject((String) null, (Type) class0, (ParseProcess) null, featureArray0);
      assertNull(linkedHashMap0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Integer integer0 = new Integer(9);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      String[] stringArray0 = new String[1];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      byte[] byteArray0 = JSON.toJSONBytes((Object) integer0, serializeConfig0, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte)125}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) null, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) serializerFeature0, serializeFilterArray0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Feature[] featureArray0 = new Feature[4];
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.parser.deny.internal", (Type) parameterizedTypeImpl0, parserConfig0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject((String) null);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "true", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(false);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) jSONObject0, serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      JSONObject jSONObject0 = (JSONObject)JSON.toJSON((Object) pascalNameFilter0, (ParserConfig) null);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray("D}MH;sR`tV$ZE!6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializeConfig serializeConfig0 = new SerializeConfig();
      // Undeclared exception!
      try { 
        JSON.toJSONStringZ(":H", serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("D6I&9sUDM&$ \"MtAy", (Type) null, parserConfig0, 989, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2D6I&9sUDM&$ \"MtAy
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        JSON.parse("fastjson.parser.autoTypeAccept", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class java.lang.String, create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseObject("getInstance", (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(989);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.writeJSONStringTo("", stringWriter0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) pascalNameFilter0, serializeConfig0, (SerializeFilter[]) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 989, (byte)32);
      Feature[] featureArray0 = new Feature[1];
      PushbackInputStream pushbackInputStream0 = JSON.parseObject((InputStream) byteArrayInputStream0, (Type) null, featureArray0);
      assertNull(pushbackInputStream0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("null");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      TreeMap<Annotation, JSONValidator.Type> treeMap0 = new TreeMap<Annotation, JSONValidator.Type>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) bufferedOutputStream0, charset0, (Object) treeMap0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) serializerFeature0, (SerializeFilter) pascalNameFilter0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) class0, serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Class<Method> class0 = Method.class;
      byte[] byteArray0 = new byte[0];
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (-278), 12, charset0, (Type) class0, (Feature[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -278
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }
}
