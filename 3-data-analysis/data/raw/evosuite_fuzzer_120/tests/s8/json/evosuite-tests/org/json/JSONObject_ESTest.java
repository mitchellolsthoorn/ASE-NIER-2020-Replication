/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 00:08:24 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Window;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.StandardProtocolFamily;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.security.CryptoPrimitive;
import java.text.Normalizer;
import java.util.Collection;
import java.util.Enumeration;
import java.util.Formatter;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.annotation.Resource;
import javax.smartcardio.CardTerminals;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle;
import jdk.net.SocketFlow;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = JSONObject.stringToValue(" 16m)");
      assertEquals(" 16m)", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(14);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      try { 
        jSONObject0.getFloat("X/&9\"-Em#u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"\":99},\"xx\":null}");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(6, jSONObject0.length());
      assertNotNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|Ew^#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("pc3D18D2@~`EB&a");
      assertNotNull(mockFileWriter0);
      
      JSONObject.indent(mockFileWriter0, 48);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(20);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("shortValueExact", "shortValueExact");
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      try { 
        jSONObject1.getBigInteger("shortValueExact");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"isreadUnsignedByte\":0.0,\"x\":-99,\"xx\":[]}");
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("{\"isreadUnsignedByte\":0.0,\"x\":-99,\"xx\":[]}", locale_Category0);
      assertEquals(4, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(4, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "{\"isreadUnsignedByte\":0.0,\"x\":-99,\"xx\":[]}";
      stringArray0[1] = "{\"isreadUnsignedByte\":0.0,\"x\":-99,\"xx\":[]}";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      assertEquals(4, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(4, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      assertEquals(2, stringArray0.length);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      Writer writer0 = JSONObject.writeValue(stringWriter0, "java.io.StringWriter@0000000040", (-3949), 101);
      assertNotNull(writer0);
      assertSame(stringWriter0, writer0);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":-99,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      assertEquals(5, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("{\"x\":-99,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", locale_Category0);
      assertEquals(6, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(6, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      Object object0 = jSONObject0.remove("{\"x\":-99,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      assertEquals(Locale.Category.FORMAT, object0);
      assertEquals(5, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(object0, locale_Category0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query("");
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery("");
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-63);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63), (byte)0}, byteArray0);
      assertEquals((short) (-16128), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      assertEquals(2, byteArray0.length);
      
      Number number0 = jSONObject0.optNumber("gettoString", (Number) bigInteger0);
      assertArrayEquals(new byte[] {(byte) (-63), (byte)0}, byteArray0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals((short) (-16128), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-16128), number0.shortValue());
      assertEquals((byte)0, number0.byteValue());
      assertNotNull(number0);
      assertEquals(2, byteArray0.length);
      assertSame(bigInteger0, number0);
      assertSame(number0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      Number number0 = jSONObject0.optNumber("", (Number) bigInteger0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, number0.shortValue());
      assertEquals((byte)0, number0.byteValue());
      assertNotNull(number0);
      assertSame(bigInteger0, number0);
      assertSame(number0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-73);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-73)}, byteArray0);
      assertEquals((byte) (-73), bigInteger0.byteValue());
      assertEquals((short)183, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      assertEquals(2, byteArray0.length);
      
      Number number0 = jSONObject0.optNumber("gettoString", (Number) bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-73)}, byteArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals((byte) (-73), bigInteger0.byteValue());
      assertEquals((short)183, bigInteger0.shortValue());
      assertEquals((byte) (-73), number0.byteValue());
      assertEquals((short)183, number0.shortValue());
      assertNotNull(number0);
      assertEquals(2, byteArray0.length);
      assertSame(bigInteger0, number0);
      assertSame(number0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(jSONPointer0);
      
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(jSONPointer0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      long long0 = jSONObject0.optLong("getClass", 0L);
      assertEquals(0L, long0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertFalse(linkedList0.contains("getClass"));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[[]],\"b\":{}}");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(5, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      int int0 = jSONObject0.optInt((String) null, 2);
      assertEquals(2, int0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      int int0 = jSONObject0.optInt("F;<dsv>N~oSR{tBY", (-794));
      assertEquals((-794), int0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"hello\",\"hashCode\":7,\"z\":true,\"a\":[[]],\"b\":{\"x\":\"a string\",\"xx\":null}}");
      assertEquals(5, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      double double0 = jSONObject0.optDouble("{\"x\":\"hello\",\"hashCode\":7,\"z\":true,\"a\":[[]],\"b\":{\"x\":\"a string\",\"xx\":null}}", (-10.650663229696528));
      assertEquals((-10.650663229696528), double0, 0.01);
      assertEquals(5, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("false", bigInteger0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-29);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-29)}, byteArray0);
      assertEquals((byte) (-29), bigInteger0.byteValue());
      assertEquals((short)227, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      assertEquals(4, byteArray0.length);
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("]", bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-29)}, byteArray0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals((byte) (-29), bigInteger0.byteValue());
      assertEquals((short)227, bigInteger0.shortValue());
      assertEquals((byte) (-29), bigInteger1.byteValue());
      assertEquals((short)227, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertEquals(4, byteArray0.length);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal(";92Q/a+2\",v`x<Y~A(", (BigDecimal) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal(";92Q/a+2\",v`x<Y~A(", bigDecimal0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<Long, Locale.Category> hashMap0 = new HashMap<Long, Locale.Category>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = "\\u";
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal(string0, bigDecimal0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("4kP7=4$*", 1861.0F);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("4kP7=4$*", 1861.0F);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      boolean boolean0 = jSONObject0.isNull("4kP7=4$*");
      assertFalse(boolean0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("is");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("4kP7=4$*", 1861.0F);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      long long0 = jSONObject1.getLong("4kP7=4$*");
      assertEquals(1861L, long0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"z\":true,\"] could not be converted to BigDecimal.\":99,\"readUnsignedByte\":[true,[]],\"null\":{},\"Misplaced endObject.\":{\"null\":\"a string\"},\"x\":\"a string\"}");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(6, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("=>^np!xftjWzqK", (-2338.8034109));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(7, jSONObject0.length());
      assertEquals(7, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      StringWriter stringWriter0 = new StringWriter(4445);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      // Undeclared exception!
      jSONObject0.write((Writer) stringWriter0, 784, 4445);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"get\":0.0,\"int\":null,\"] is not a long.\":\"a string\"}");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 48, 48);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"hello\",\"false\":7,\"z\":true,\"a\":[],\"b\":{}}");
      assertEquals(5, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-89L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      assertEquals(5, byteArray0.length);
      
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject0);
      assertEquals(5, byteArray0.length);
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (int) (byte)21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"toUpperCase\":[],\"false\":7,\"z\":true,\"a\":99,\"b\":false}");
      assertEquals(5, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JSONObject jSONObject0 = new JSONObject(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "org.json.JSONTokener");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      try { 
        jSONObject0.getDouble("7s-I+|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000024] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        jSONObject0.append(stringArray0[0], (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("lon");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":-99}}", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name {\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":-99}}, locale fr_FR
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(bigDecimal0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) stringArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-14530064));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -14530064
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"' and instead saw ''\":{},\"getdescendingIterator\":false,\"Misplaced key.\":{\"' ad istead saw ''\":null,\"utf-8\":\"a string\"},\"utf-8\":-99}");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(4, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      StringWriter stringWriter0 = new StringWriter(4445);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      Writer writer0 = jSONObject0.write((Writer) stringWriter0, 784, (-2410));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(4, jSONObject0.length());
      assertNotNull(writer0);
      assertSame(stringWriter0, writer0);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"z\":true,\"] could not be converted to BigDecimal.\":99,\"readUnsignedByte\":[true,[]],\"null\":{},\"Misplaced endObject.\":{\"null\":\"a string\"},\"x\":\"a string\"}");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(6, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      StringWriter stringWriter0 = new StringWriter(4445);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      try { 
        jSONObject0.write((Writer) stringWriter0, 784, 4445);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: java.lang.String@0000000012
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      Writer writer0 = jSONObject0.write((Writer) pipedWriter0, 70, 70);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(writer0);
      assertSame(pipedWriter0, writer0);
      assertSame(writer0, pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put(",\"[To_h^^j~DiY m", (-89L));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      StringWriter stringWriter0 = new StringWriter(4445);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      Writer writer0 = jSONObject0.write((Writer) stringWriter0, 784, 1508);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(writer0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(stringWriter0, writer0);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, jSONObject0, (-2993), (-2993));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = JSONObject.wrap(object0);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = (JSONArray)JSONObject.wrap(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Boolean boolean0 = new Boolean("?+bW,cyMbRH!7Yn");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Object object0 = JSONObject.wrap(boolean0);
      assertEquals(false, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Byte byte0 = new Byte((byte)106);
      assertEquals((byte)106, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = JSONObject.wrap(byte0);
      assertEquals((byte)106, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object object0 = JSONObject.wrap("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[[]],\"b\":{}}");
      assertEquals("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[[]],\"b\":{}}", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.MAP_EXTENDED_RANGES, locale_FilteringMode0);
      
      Object object0 = JSONObject.wrap(locale_FilteringMode0);
      assertEquals(Locale.FilteringMode.MAP_EXTENDED_RANGES, object0);
      assertSame(locale_FilteringMode0, object0);
      assertSame(object0, locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      Double double0 = new Double((-901.05162413354));
      assertEquals((-901.05162413354), (double)double0, 0.01);
      assertNotNull(double0);
      
      JSONArray jSONArray1 = jSONArray0.put(1057, (Object) double0);
      assertEquals(1058, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1058, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("3475.3196456721");
      assertEquals(3475.3196456721, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-!Ar6uRs7\">");
      assertEquals("-!Ar6uRs7\">", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("{\"x\":true,\"] is not an enum of type \":7,\"z\":true,\"/\":false,\"b\":null}");
      assertEquals("{\"x\":true,\"] is not an enum of type \":7,\"z\":true,\"/\":false,\"b\":null}", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("null");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("false");
      assertEquals(false, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("true");
      assertEquals(true, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      assertNotNull(mockPrintStream0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder0);
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charsetEncoder0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(outputStreamWriter0);
      
      Writer writer0 = JSONObject.quote("F-l)YUH", (Writer) outputStreamWriter0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(writer0);
      assertSame(outputStreamWriter0, writer0);
      assertSame(writer0, outputStreamWriter0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      Writer writer0 = JSONObject.quote("{\"x\":\"hello\",\"getClass\":7,\"z\":true,\"a\":false,\"false\":{\"x\":99,\"xx\":false},\"xx\":{}}", (Writer) stringWriter0);
      assertEquals("\"{\\\"x\\\":\\\"hello\\\",\\\"getClass\\\":7,\\\"z\\\":true,\\\"a\\\":false,\\\"false\\\":{\\\"x\\\":99,\\\"xx\\\":false},\\\"xx\\\":{}}\"", stringWriter0.toString());
      assertEquals("\"{\\\"x\\\":\\\"hello\\\",\\\"getClass\\\":7,\\\"z\\\":true,\\\"a\\\":false,\\\"false\\\":{\\\"x\\\":99,\\\"xx\\\":false},\\\"xx\\\":{}}\"", writer0.toString());
      assertNotNull(writer0);
      assertSame(stringWriter0, writer0);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder0);
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charsetEncoder0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertNotNull(outputStreamWriter0);
      
      Writer writer0 = JSONObject.quote("", (Writer) outputStreamWriter0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertNotNull(writer0);
      assertSame(outputStreamWriter0, writer0);
      assertSame(writer0, outputStreamWriter0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("{\"x\":\"hello\",\"hashCode\":7,\"z\":true,\"isbooleanValue\":[[]],\"\":{\"x\":\"a string\",\"xx\":null,\"xxx\":[]}}", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      assertNotNull(mockPrintStream0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder0);
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charsetEncoder0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertNotNull(outputStreamWriter0);
      
      Writer writer0 = JSONObject.quote((String) null, (Writer) outputStreamWriter0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertNotNull(writer0);
      assertSame(outputStreamWriter0, writer0);
      assertSame(writer0, outputStreamWriter0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, bigDecimal0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      JSONObject jSONObject0 = new JSONObject(enumeration0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("3mL4Y", (Object) jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("java.lang.Long@0000000013.", stringArray0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      assertEquals(3, stringArray0.length);
      
      HashMap<Window.Type, Double> hashMap0 = new HashMap<Window.Type, Double>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@0000000013.", (Map<?, ?>) hashMap0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertEquals(3, stringArray0.length);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      String string0 = jSONObject0.optString("java.lang.Long@0000000013.", "sh");
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(string0);
      assertEquals(3, stringArray0.length);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.optString("org.json.JSONWriter", "");
      assertEquals("", string0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      Number number0 = jSONObject0.optNumber("+#?OQgjvf<n", (Number) null);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put(",\"[To_h^^j~DiY m", (-89L));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      long long0 = jSONObject0.optLong(",\"[To_h^^j~DiY m", (long) 1938);
      assertEquals((-89L), long0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      long long0 = jSONObject0.optLong((String) null, 99L);
      assertEquals(99L, long0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      int int0 = jSONObject0.optInt((String) null, 0);
      assertEquals(0, int0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(51);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      float float0 = jSONObject0.optFloat("9A,yowb3N", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[[]],\"b\":{}}");
      assertEquals(5, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      double double0 = jSONObject0.optDouble("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[[]],\"b\":{}}", 0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = jSONObject0.optBoolean("X$^c", false);
      assertFalse(boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(20);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("S", (-1041));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      Class<StandardProtocolFamily> class0 = StandardProtocolFamily.class;
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET6;
      StandardProtocolFamily standardProtocolFamily1 = jSONObject0.optEnum(class0, "S", standardProtocolFamily0);
      assertEquals(StandardProtocolFamily.INET6, standardProtocolFamily1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(standardProtocolFamily0, standardProtocolFamily1);
      assertSame(standardProtocolFamily1, standardProtocolFamily0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.KEY_AGREEMENT;
      JSONObject jSONObject0 = new JSONObject((Object) "Kt,*@{+k2PwYvl");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Class<CryptoPrimitive> class0 = CryptoPrimitive.class;
      CryptoPrimitive cryptoPrimitive1 = jSONObject0.optEnum(class0, " 16m)", cryptoPrimitive0);
      assertEquals(CryptoPrimitive.KEY_AGREEMENT, cryptoPrimitive1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertSame(cryptoPrimitive0, cryptoPrimitive1);
      assertSame(cryptoPrimitive1, cryptoPrimitive0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Object object0 = jSONObject0.opt("isreadBoolean");
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Object object0 = jSONObject0.opt((String) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Long long0 = new Long((-511L));
      assertEquals((-511L), (long)long0);
      assertNotNull(long0);
      
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"isreadUnsignedByte\":0.0,\"x\":-99,\"xx\":[]}");
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = jSONObject0.isEmpty();
      assertFalse(boolean0);
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.append("", (Object) null);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      try { 
        jSONObject1.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.Float@00000000590\":0.0}");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      try { 
        jSONObject0.get("{\"java.lang.Float@00000000590\":0.0}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.READ;
      PushbackInputStream pushbackInputStream1 = hashMap0.put(processBuilder_Redirect_Type0, pushbackInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(pushbackInputStream1);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(20);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("S", (-1041));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      Object object0 = jSONObject0.get("S");
      assertEquals((-1041), object0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(object0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(55);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "[true]");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Map<String, Object> map0 = jSONObject0.toMap();
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(map0.isEmpty());
      assertEquals(2, map0.size());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      HashMap<JSONObject, SocketFlow.Status> hashMap0 = new HashMap<JSONObject, SocketFlow.Status>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject1 = jSONObject0.put("U5n/^ysZdd.A/", (Map<?, ?>) hashMap0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      Map<String, Object> map0 = jSONObject0.toMap();
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"toUpperCase\":[],\"false\":7,\"z\":true,\"a\":99,\"b\":false}");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(5, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.toString(59);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(5, jSONObject0.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("getlength", linkedList0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, linkedList0.size());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      String string0 = jSONObject0.toString(100);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(string0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("gettoCharArray", hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      String string0 = jSONObject0.toString((-1854));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(string0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("UXz$", locale_Category0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      String string0 = jSONObject0.toString(100);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(string0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"' and instead saw ''\":\".\",\"getdescendingIterator\":false,\"Misplaced key.\":{\"' and instead saw ''\":null,\"x\":\"a string\"},\"x\":99}");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(4, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(11);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      CharArrayWriter charArrayWriter1 = (CharArrayWriter)jSONObject0.write((Writer) charArrayWriter0, (-76), (-76));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(4, jSONObject0.length());
      assertEquals(320, charArrayWriter0.size());
      assertEquals(320, charArrayWriter1.size());
      assertNotNull(charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"z\":true,\"] could not be converted to BigDecimal.\":-99,\".\":[true,[]],\"null\":{},\"Misplaced endObject.\":{\"null\":\"a string\"},\"x\":\"a string\"}");
      assertEquals(6, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.append("{\"z\":true,\"] could not be converted to BigDecimal.\":-99,\".\":[true,[]],\"null\":{},\"Misplaced endObject.\":{\"null\":\"a string\"},\"x\":\"a string\"}", (Object) null);
      assertEquals(7, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(7, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      String string0 = jSONObject1.toString();
      assertEquals(7, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(7, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(string0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertNotNull(locale0);
      
      JSONObject jSONObject0 = new JSONObject(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(14, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = (BigInteger)JSONObject.wrap(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Double double0 = new Double((-109L));
      assertEquals((-109.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Object object0 = JSONObject.wrap(double0);
      assertEquals((-109.0), object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = JSONObject.wrap(float0);
      assertEquals(0.0F, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Long long0 = new Long((-511L));
      assertEquals((-511L), (long)long0);
      assertNotNull(long0);
      
      Object object0 = JSONObject.wrap(long0);
      assertEquals((-511L), object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Short short0 = new Short((short)4);
      assertEquals((short)4, (short)short0);
      assertNotNull(short0);
      
      Object object0 = JSONObject.wrap(short0);
      assertEquals((short)4, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(2364, (Object) jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(2365, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2365, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<CardTerminals.State, BigDecimal> hashMap0 = new HashMap<CardTerminals.State, BigDecimal>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(8192);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      try { 
        jSONObject0.put("{\"x\":\"hello\",\"y\":7,\"z\":true,\"isreadByte\":[],\"b\":{\"x\":\"a string\"}}", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("0000");
      assertEquals(0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("7bBu>.$&[vAW'XY|");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("9()Yn8QjX@Uu");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9()\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-0");
      assertEquals(-0.0, number0);
      assertNotNull(number0);
      
      JSONObject jSONObject0 = new JSONObject(number0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0EK'VjV=p@t]\"b\"^9T-");
      assertEquals("0EK'VjV=p@t]\"b\"^9T-", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("Unable tS write JSONArray vplue at index: ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("{\"fruit\":\"ha\",\"size\":{},\"\"\":false,\"value\":null,\"value2\":\"a string\",\"len\":\"1\",\"x\":false,\"99\":null}", (-109L));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      boolean boolean0 = jSONObject1.similar(jSONObject0);
      assertTrue(boolean0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("{\"fruit\":\"ha\",\"size\":{},\"\"\":false,\"value\":null,\"value2\":\"a string\",\"len\":\"1\",\"x\":false,\"99\":null}", (-109L));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      String[] stringArray0 = new String[5];
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(0, jSONObject2.length());
      assertTrue(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      assertEquals(5, stringArray0.length);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      
      boolean boolean0 = jSONObject1.similar(jSONObject2);
      assertFalse(boolean0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(0, jSONObject2.length());
      assertTrue(jSONObject2.isEmpty());
      assertEquals(5, stringArray0.length);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.WRITE;
      boolean boolean0 = jSONObject0.similar(processBuilder_Redirect_Type0);
      assertFalse(boolean0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":true,\"toC\":[],\"z\":true,\"/\":false,\"b\":null}");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(5, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      try { 
        jSONObject0.getLong("</1B%A#1JA^<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000031] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = "\\u";
      try { 
        jSONObject0.getNumber(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      try { 
        jSONObject0.getJSONObject(",'\"muva)/@Wgi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("y!vG^br^mu}\"SFZq;Dr", (Object) null);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("org.json.JSONPointerException", 0.0F);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      try { 
        jSONObject0.putOnce("org.json.JSONPointerException", "org.json.JSONPointerException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"org.json.JSONPointerException\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("isclone", (Object) null);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<LayoutStyle.ComponentPlacement, BigDecimal> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, BigDecimal>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("y", (Object) null);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      HashMap<MockPrintWriter, Long> hashMap0 = new HashMap<MockPrintWriter, Long>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("oroG");
      assertNotNull(mockFileOutputStream0);
      
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockFileOutputStream0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("has", "has");
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      String string0 = jSONObject0.optString("has");
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(string0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"z\":true,\"] could not be converted to BigDecimal.\":99,\"readUnsignedByte\":[_rue,[]],\"null\":{},\"Misplaced endObject.\":{\"null\":\"a string\"},\"x\":\"a tring\"}");
      assertEquals(6, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      HashMap<ObjectOutputStream, PushbackInputStream> hashMap0 = new HashMap<ObjectOutputStream, PushbackInputStream>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject1 = jSONObject0.put("{\"z\":true,\"] could not be converted to BigDecimal.\":99,\"readUnsignedByte\":[_rue,[]],\"null\":{},\"Misplaced endObject.\":{\"null\":\"a string\"},\"x\":\"a tring\"}", (Map<?, ?>) hashMap0);
      assertEquals(7, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(7, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      Number number0 = jSONObject0.optNumber("{\"z\":true,\"] could not be converted to BigDecimal.\":99,\"readUnsignedByte\":[_rue,[]],\"null\":{},\"Misplaced endObject.\":{\"null\":\"a string\"},\"x\":\"a tring\"}", (Number) bigInteger0);
      assertEquals(7, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, number0.byteValue());
      assertEquals((short)1, number0.shortValue());
      assertNotNull(number0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigInteger0, number0);
      assertSame(number0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("4kP7=4$*", 1861.0F);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      Number number0 = jSONObject1.optNumber("4kP7=4$*", (Number) bigInteger0);
      assertEquals(1861.0F, number0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(number0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate(":svK", ":svK");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      Number number0 = jSONObject1.optNumber(":svK");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNull(number0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"isEmpty\":[99,[false],true],\"Value out of sequence.\":null,\"Illegal escape.\":null}");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("{\"isEmpty\":[99,[false],true],\"Value out of sequence.\":null,\"Illegal escape.\":null}", jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(4, jSONObject0.length());
      assertEquals(4, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      long long0 = jSONObject1.optLong("{\"isEmpty\":[99,[false],true],\"Value out of sequence.\":null,\"Illegal escape.\":null}", 99L);
      assertEquals(99L, long0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(4, jSONObject0.length());
      assertEquals(4, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("4kP7=4$*", 1861.0F);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      long long0 = jSONObject1.optLong("4kP7=4$*");
      assertEquals(1861L, long0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(44);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.optJSONArray("_n0Bs{1I-3ERt:");
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("4kP7=4$*", 1861.0F);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      int int0 = jSONObject0.optInt("4kP7=4$*");
      assertEquals(1861, int0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"' and instead saw ''\":{},\"\":false,\"Misplaced key.\":[]}");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("{\"' and instead saw ''\":{},\"\":false,\"Misplaced key.\":[]}", jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(4, jSONObject0.length());
      assertEquals(4, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      float float0 = jSONObject0.optFloat("{\"' and instead saw ''\":{},\"\":false,\"Misplaced key.\":[]}", (-3940.927F));
      assertEquals((-3940.927F), float0, 0.01F);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(4, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("4kP7=4$*", 1861.0F);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      float float0 = jSONObject1.optFloat("4kP7=4$*", 1861.0F);
      assertEquals(1861.0F, float0, 0.01F);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"isEmpty\":[99,[false],true],\"Value out of sequence.\":null,\"Illegal escape.\":null}");
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("{\"isEmpty\":[99,[false],true],\"Value out of sequence.\":null,\"Illegal escape.\":null}", jSONObject0);
      assertEquals(4, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(4, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      double double0 = jSONObject0.optDouble("{\"isEmpty\":[99,[false],true],\"Value out of sequence.\":null,\"Illegal escape.\":null}", (double) 99L);
      assertEquals(99.0, double0, 0.01);
      assertEquals(4, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("4kP7=4$*", 1861.0F);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      double double0 = jSONObject0.optDouble("4kP7=4$*", (double) 1861.0F);
      assertEquals(1861.0, double0, 0.01);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("Unable tS write JSONArray vplue at index: ", bigInteger0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONObject jSONObject1 = jSONObject0.put("*$~lgY^t2c", (Collection<?>) linkedList0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, linkedList0.size());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = jSONObject1.optBigInteger("*$~lgY^t2c", bigInteger0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, linkedList0.size());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HashMap<LayoutStyle.ComponentPlacement, BigDecimal> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, BigDecimal>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      BigDecimal bigDecimal0 = new BigDecimal((-1813L));
      assertEquals((short) (-1813), bigDecimal0.shortValue());
      assertEquals((byte) (-21), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("y", bigDecimal0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals((short) (-1813), bigDecimal0.shortValue());
      assertEquals((byte) (-21), bigDecimal0.byteValue());
      assertEquals((short) (-1813), bigDecimal1.shortValue());
      assertEquals((byte) (-21), bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"readUnsignedShort\":null,\"ab\":0.0}");
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("{\"readUnsignedShort\":null,\"ab\":0.0}", locale_Category0);
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(3, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      BigDecimal bigDecimal0 = new BigDecimal((-1813L));
      assertEquals((byte) (-21), bigDecimal0.byteValue());
      assertEquals((short) (-1813), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("{\"readUnsignedShort\":null,\"ab\":0.0}", bigDecimal0);
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(3, jSONObject1.length());
      assertEquals((byte) (-21), bigDecimal0.byteValue());
      assertEquals((short) (-1813), bigDecimal0.shortValue());
      assertEquals((short) (-1813), bigDecimal1.shortValue());
      assertEquals((byte) (-21), bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("4kP7=4$*", 1861.0F);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      Class<Resource.AuthenticationType> class0 = Resource.AuthenticationType.class;
      jSONObject1.optEnum(class0, "4kP7=4$*");
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      String string0 = JSONObject.numberToString(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("=2i)3NZ", "=2i)3NZ");
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("", 0L);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONObject jSONObject2 = jSONObject1.increment("");
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("0D<u@^'%[>ycWZ[n", (-108.63F));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONObject jSONObject2 = jSONObject0.increment("0D<u@^'%[>ycWZ[n");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("=2i)3NZ", "=2i)3NZ");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      boolean boolean0 = jSONObject0.has("=2i)3NZ");
      assertTrue(boolean0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = jSONObject0.has("] is not a number.");
      assertFalse(boolean0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put(",\"[To_h^^j~DiY m", (-89L));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      try { 
        jSONObject0.getString(",\"[To_h^^j~DiY m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      String[] stringArray0 = JSONObject.getNames((Object) charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "olb-:OSc 5l");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("", 0L);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("{\"Misplaced key.\":{\"' and instead saw ''\":null},\"Substring bounds error\":false,\"] is not an enum of type \":\"a string\",\"' and instead saw ''\":null}", jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONObject jSONObject2 = jSONObject0.getJSONObject("{\"Misplaced key.\":{\"' and instead saw ''\":null},\"Substring bounds error\":false,\"] is not an enum of type \":\"a string\",\"' and instead saw ''\":null}");
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("org.json.JSONPointerException", 0.0F);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      try { 
        jSONObject0.getJSONObject("org.json.JSONPointerException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@0000000008.", (-99L));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      int int0 = jSONObject1.getInt("java.lang.Long@0000000008.");
      assertEquals((-99), int0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("has", "has");
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      try { 
        jSONObject0.getInt("has");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"' and instead saw ''\":\"hello\",\"isiterator\":[],\"Misplaced key.\":{\"' and instead saw ''\":null}}");
      JSONObject jSONObject1 = jSONObject0.accumulate("{\"' and instead saw ''\":\"hello\",\"isiterator\":[],\"Misplaced key.\":{\"' and instead saw ''\":null}}", jSONObject0);
      try { 
        jSONObject1.getNumber("{\"' and instead saw ''\":\"hello\",\"isiterator\":[],\"Misplaced key.\":{\"' and instead saw ''\":null}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000001036] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("e0y9c]WR<3", (-1.0F));
      float float0 = jSONObject0.getFloat("e0y9c]WR<3");
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("{\"fruit\":false,\"size\":true,\"Null key.\":false,\"value\":null,\"value2\":null,\"null\":\"1\",\"x\":false,\"Null key.\":null}", false);
      try { 
        jSONObject0.getFloat("{\"fruit\":false,\"size\":true,\"Null key.\":false,\"value\":null,\"value2\":null,\"null\":\"1\",\"x\":false,\"Null key.\":null}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("4kP7=4$*", 1861.0F);
      double double0 = jSONObject0.getDouble("4kP7=4$*");
      assertEquals(1861.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"get\":0.0,\"int\":null}");
      jSONObject0.accumulate("{\"get\":0.0,\"int\":null}", "{\"get\":0.0,\"int\":null}");
      try { 
        jSONObject0.getBigDecimal("{\"get\":0.0,\"int\":null}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000020] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("4kP7=4$*", true);
      boolean boolean0 = jSONObject1.getBoolean("4kP7=4$*");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "olb-:OSc 5l");
      Class<GroupLayout.Alignment> class0 = GroupLayout.Alignment.class;
      try { 
        jSONObject0.getEnum(class0, "olb-:OSc 5l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] is not an enum of type java.io.StringWriter@0000000016.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("org.json.JSONPointerException", 0.0F);
      long long0 = jSONObject1.getLong("org.json.JSONPointerException");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1.82));
      assertEquals("-1.82", string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1.0));
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"get\":0.0,\"int\":null,\"] is not an enum of type \":\"a string\"}");
      JSONObject jSONObject1 = jSONObject0.accumulate("{\"get\":0.0,\"int\":null,\"] is not an enum of type \":\"a string\"}", jSONObject0);
      jSONObject1.accumulate("{\"get\":0.0,\"int\":null,\"] is not an enum of type \":\"a string\"}", "{\"get\":0.0,\"int\":null,\"] is not an enum of type \":\"a string\"}");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      HashMap<Float, CharArrayReader> hashMap0 = new HashMap<Float, CharArrayReader>();
      hashMap0.put((Float) null, (CharArrayReader) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"Duplicate key \"\":-99,\"size\":\"Large\",\"color\":false,\"value\":true,\"value2\":[],\"number\":\"1\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 18 [character 19 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"readUnsignedShort\":null,\"A JSONObject text must end with '}'\":99}");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(55);
      Object object0 = jSONObject0.remove("[cjz~@");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONPointer jSONPointer0 = new JSONPointer("");
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.write((Writer) charArrayWriter0);
      assertEquals("{}", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[[]],\"b\":{}}");
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("es9*Wn 55XA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("{\"Duplicate key \"\":-99,\"size\":\"Large\",\"color\":false,\"value\":true,\"value2\":[],\"number\":\"1\"}");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONPointer jSONPointer0 = new JSONPointer("");
      Object object0 = jSONObject0.query(jSONPointer0);
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("&uP)4`~2");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "is");
      jSONObject0.keys();
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query("{\"Duplicate key \"\":-99,\"size\":\"Large\",\"color\":false,\"value\":true,\"value2\":[],\"number\":\"1\"}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\".\":{},\"hashCode\":7,\"z\":true,\"a\":[[]],\"b\":\"a string\"}");
      boolean boolean0 = jSONObject0.optBoolean("true");
      assertFalse(boolean0);
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("4kP7=4$*", 1861.0F);
      boolean boolean0 = jSONObject0.optBoolean("4kP7=4$*", true);
      assertFalse(jSONObject0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("longValue");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat("null");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<String> set0 = jSONObject0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("4kP7=4$*");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(fileSystemHandling0);
      int int0 = jSONObject0.optInt("org.json.JSONTokener");
      assertEquals(0, int0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) " h3C{_RH");
      try { 
        jSONObject0.getJSONArray("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000012] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }
}
