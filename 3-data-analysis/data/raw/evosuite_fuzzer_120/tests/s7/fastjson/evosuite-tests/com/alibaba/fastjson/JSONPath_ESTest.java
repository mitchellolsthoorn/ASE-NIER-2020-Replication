/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 23:42:02 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.JSONValidator;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.LabelFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalUnit;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.UUID;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "gy";
      JSONPath jSONPath0 = new JSONPath("gy");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Throwable throwable0 = null;
      String string1 = "W6T:Q'";
      JSONPath jSONPath1 = new JSONPath("W6T:Q'");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath2 = new JSONPath("gy");
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) jSONPath0, "L[^");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)36;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      Double double0 = new Double((-1442.32));
      Long[] longArray0 = new Long[5];
      Long long0 = new Long(7);
      longArray0[0] = long0;
      Long long1 = new Long(186L);
      longArray0[1] = long1;
      long[] longArray1 = new long[5];
      longArray1[0] = (long) longArray0[0];
      longArray1[1] = (long) longArray0[1];
      longArray1[2] = 186L;
      longArray1[3] = 186L;
      longArray1[4] = (long) longArray0[0];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("fastjson.parser.deny", longArray1, false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("H4b~W.X,@8ahf");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("javax.servlet.http.Cookie");
      JSONPath.JSONPathParser jSONPath_JSONPathParser2 = new JSONPath.JSONPathParser("-");
      jSONPath_JSONPathParser2.parseArrayAccessFilter(false);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        JSONPath.extract(":", "-}G=Og.!P&.=t!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. -}G=Og.!P&.=t!
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Long long0 = new Long((-6586085717218287427L));
      String string0 = "*";
      JSONPath.size((Object) long0, "*");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        mockGregorianCalendar0.setTime((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1000022, true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("T*5w|;", serializeConfig0, parserConfig0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.put("javax.servlet.http.Cookie", clientInfoStatus0);
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) serializeConfig0);
      jSONPath0.deepScan(hashMap0, "fastjson.parser.safeMode", vector0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("stackTrace", (String) null, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("stackTrace");
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NOT_BETWEEN;
      jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath_StringOpSegement0, "stackTrace", jSONPath0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      Float float0 = new Float((-3971.27647843));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("=MM\"aY#8UFZ)Q", "/stackTrace/5");
      // Undeclared exception!
      try { 
        jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath_FilterSegment0, float0, sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$StringOpSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONPath.paths((Object) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"AW,|L-CQykw");
      jSONPath_JSONPathParser0.isEOF();
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("\"AW,|L-CQykw", "\"AW,|L-CQykw", true);
      JSONPath jSONPath0 = new JSONPath("* .`fpN");
      int[] intArray0 = new int[5];
      intArray0[0] = (-2454);
      intArray0[1] = (-3448);
      intArray0[2] = 902;
      intArray0[3] = 1884;
      intArray0[4] = 3879;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("* .`fpN", "\"AW,|L-CQykw", (-3448));
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      UUID uUID0 = MockUUID.fromString("\"AW,|L-CQykw");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, uUID0, batchUpdateException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SerializeConfig.getGlobalInstance();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLException sQLException0 = new SQLException(">", "})`9`~");
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.SerializeConfig", serializeConfig0, parserConfig0);
      Vector<Object> vector0 = new Vector<Object>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.alibaba.fastjson.serializer.SerializeConfig", "T2J4tyixeytT)");
      int[] intArray0 = new int[7];
      intArray0[0] = 3499;
      intArray0[1] = 3499;
      intArray0[2] = 11;
      intArray0[3] = (-353);
      intArray0[4] = 427;
      intArray0[5] = (-1109171051);
      intArray0[6] = (-282);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fastjson.parser.autoTypeAccept", batchUpdateException0);
      vector0.add((Object) "a\u0005RW\"swo2.PfRP");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement(">", (-282), jSONPath_Operator0);
      jSONPath_DoubleOpSegement0.apply(jSONPath0, "a\u0005RW\"swo2.PfRP", "a\u0005RW\"swo2.PfRP", vector0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      String string0 = "e=a]p";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("c.&h2[jdN\"");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(2831L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      sQLClientInfoException0.getSuppressed();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("e=a]p");
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap0, sQLClientInfoException0);
      Long long0 = new Long(0);
      Long long1 = new Long(618487418357517421L);
      Long.getLong("com.alibaba.fastjson.JSONPath$WildCardSegment", long1);
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONPath.eqNotNull(bigInteger0, bigInteger0);
      // Undeclared exception!
      try { 
        JSONPath.extract(">8", "c.&h2[jdN\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. c.&h2[jdN\"
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "com.alibaba.fastjson.JSONPath$Operator";
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$Operator");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      long[] longArray0 = new long[14];
      longArray0[0] = 356L;
      longArray0[1] = 356L;
      longArray0[2] = 356L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("com.alibaba.fastjson.JSONPath$Operator", longArray0, false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("value not found in path ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$Operator");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      long[] longArray0 = new long[14];
      longArray0[0] = 356L;
      longArray0[1] = 356L;
      longArray0[2] = 356L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("com.alibaba.fastjson.JSONPath$Operator", longArray0, false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("value not found in path ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("RUDWv#^}AZoN`o");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("fastjson.parser.autoTypeAccept");
      ParserConfig parserConfig1 = new ParserConfig();
      jSONPath_NotNullSegement0.apply(jSONPath0, serializeConfig0, jSONPath0, parserConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeAccept");
      jSONPath_JSONPathParser0.isEOF();
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.safeMode", "fastjson.parser.deny.internal", 244);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("fastjson.parser.safeMode");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLNonTransientException0);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("RUDWv#^}AZoN`o", (String) null, "fastjson.parser.safeMode", (String[]) null, false);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, parserConfig1, jSONPath_MatchSegement0);
      jSONPath_MatchSegement0.apply(jSONPath0, jSONPath_SizeSegment0, (Object) null, object0);
      SQLWarning sQLWarning0 = new SQLWarning("fastjson.deserializer.fileRelativePathSupport", "B9$H)^5=%ZZ<W");
      JSONPath.eval((Object) jSONPath_JSONPathParser0, "fastjson.parser.autoTypeAccept");
      jSONPath0.remove((Object) null);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1, 1, 1);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("B>`oMiuyd@M9SH`]>", ",j+D-l&U8nM");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fastjson.parser.safeMode", (Throwable) null);
      SQLDataException sQLDataException0 = new SQLDataException("B>`oMiuyd@M9SH`]>", sQLSyntaxErrorException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTransactionRollbackException0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLDataException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("autoTypeSupport", ",j+D-l&U8nM", (-1090131319), mockThrowable0);
      JSONPath.containsValue((Object) classLoader0, "fastjson.parser.autoTypeAccept", (Object) sQLDataException0);
      Short short0 = new Short((short)133);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("TUBk=UVeh`kXLQ");
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, (Object) null);
      JSONPath jSONPath1 = new JSONPath("SM$fD5BH", serializeConfig0, parserConfig0);
      Long long0 = new Long((-7724053899351418539L));
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath1, object0, 798, long0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 798, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1, 1, 1);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("B>`oMiuyd@M9SH`]>", ",j+D-l&U8nM");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fastjson.parser.safeMode", (Throwable) null);
      SQLDataException sQLDataException0 = new SQLDataException("B>`oMiuyd@M9SH`]>", sQLSyntaxErrorException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTransactionRollbackException0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLDataException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("autoTypeSupport", ",j+D-l&U8nM", (-1090131319), mockThrowable0);
      JSONPath.containsValue((Object) classLoader0, "fastjson.parser.autoTypeAccept", (Object) sQLDataException0);
      Short short0 = new Short((short)133);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("TUBk=UVeh`kXLQ");
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, (Object) null);
      JSONPath jSONPath1 = new JSONPath("SM$fD5BH", serializeConfig0, parserConfig0);
      Long long0 = new Long((-7724053899351418539L));
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath1, object0, 798, long0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 798, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "stackTrace";
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("stackTrace", (String) null, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("stackTrace");
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NOT_BETWEEN;
      jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath_Operator1, "stackTrace", jSONPath0);
      Pattern pattern0 = Pattern.compile("d$zO");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("d$zO", "SM$fD5BH");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jSONPath0;
      objectArray0[1] = (Object) pattern0;
      objectArray0[2] = (Object) jSONPath_Operator0;
      JSONPath.read((String) null, "JSONValidator$ReaderValidator");
      objectArray0[3] = null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "}9";
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) sQLRecoverableException0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-2777L));
      longArray0[0] = long0;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", (SerializeConfig) null, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      MockCalendar.getInstance();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      jSONPath_WildCardSegment0.eval(jSONPath1, classLoader0, parserConfig0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.safeMode", "fastjson.parser.deny.internal", (Throwable) null);
      SQLException sQLException0 = new SQLException(sQLTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("n?_Yfq:GR", "fastjson.parser.deny.internal", sQLException0);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, "fastjson.parser.safeMode", 7L, sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SerializeConfig.getGlobalInstance();
      SQLException sQLException0 = new SQLException(">", "})`9`~");
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.SerializeConfig", serializeConfig0, parserConfig0);
      Vector<Object> vector0 = new Vector<Object>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.alibaba.fastjson.serializer.SerializeConfig", "T2J4tyixeytT)");
      int[] intArray0 = new int[7];
      intArray0[0] = 3499;
      intArray0[1] = 3499;
      intArray0[2] = 11;
      intArray0[3] = (-353);
      intArray0[4] = 427;
      intArray0[5] = (-1109171051);
      intArray0[6] = (-282);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fastjson.parser.autoTypeAccept", batchUpdateException0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement(">", (-282), jSONPath_Operator0);
      jSONPath_DoubleOpSegement0.apply(jSONPath0, "a\u0005RW\"swo2.PfRP", "a\u0005RW\"swo2.PfRP", vector0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SerializeConfig.getGlobalInstance();
      SQLException sQLException0 = new SQLException(">", "})`9`~");
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.SerializeConfig", serializeConfig0, parserConfig0);
      Vector<Object> vector0 = new Vector<Object>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.alibaba.fastjson.serializer.SerializeConfig", "T2J4tyixeytT)");
      int[] intArray0 = new int[7];
      intArray0[0] = 3499;
      intArray0[1] = 3499;
      intArray0[2] = 11;
      intArray0[3] = (-353);
      intArray0[4] = 427;
      intArray0[5] = (-1109171051);
      intArray0[6] = (-282);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fastjson.parser.autoTypeAccept", batchUpdateException0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement(">", (-282), jSONPath_Operator0);
      jSONPath_DoubleOpSegement0.apply(jSONPath0, "a\u0005RW\"swo2.PfRP", "a\u0005RW\"swo2.PfRP", vector0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1000022, true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("T*5w|;", serializeConfig0, parserConfig0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("02kau/zxC");
      jSONPath_JSONPathParser0.readValue();
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("e");
      MockThrowable mockThrowable0 = new MockThrowable("com.alibaba.fastjson.JSONPath$IntInSegement");
      SQLWarning sQLWarning0 = new SQLWarning("e", "8MbTGb3fN^On18-wpZQ", mockThrowable0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLWarning0);
      sQLInvalidAuthorizationSpecException0.spliterator();
      JSONPath.contains((Object) sQLInvalidAuthorizationSpecException0, "e");
      String string0 = "e[2,5nG)#< '";
      JSONPath jSONPath0 = JSONPath.compile("e[2,5nG)#< '");
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) "e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"5nG)#< \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Xca$e/stackTrace/3";
      JSONPath jSONPath0 = new JSONPath("nt");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("O^rC-yz)[", sQLNonTransientException0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("u'9O#a");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("'");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.readValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("not");
      JSONPath jSONPath1 = JSONPath.compile("com.alibaba.fastjson.serializer.CharArrayCodec");
      int[] intArray0 = new int[0];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "not");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("_asm_prefix__", intArray0);
      // Undeclared exception!
      jSONPath1.set((Object) jSONPath0, (Object) batchUpdateException0, true);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "-99";
      JSONPath jSONPath0 = new JSONPath("-99");
      int int0 = 0;
      Integer integer0 = new Integer(0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("a", true);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) jSONPath_PropertySegment0, "com.alibaba.fastjson.parser.DefaultJSONParser", (Object) "com.alibaba.fastjson.parser.DefaultJSONParser");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("\"a strig\"");
      DataTruncation dataTruncation0 = new DataTruncation(1418, true, true, 68, 68, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.setNextException(sQLNonTransientException0);
      dataTruncation0.getDataSize();
      SerializeConfig.getGlobalInstance();
      SQLException sQLException0 = new SQLException(">", ">");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLException0);
      SQLDataException sQLDataException0 = new SQLDataException("\"a strig\"");
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("null", (SerializeConfig) null, parserConfig0);
      Vector<Object> vector0 = new Vector<Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(sQLDataException0, "LT", arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("gy");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("pI8 ,");
      jSONPath0.remove((Object) null);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("com.alibaba.fastjson.JSONPath$DoubleOpSegement");
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      Class<JSONPath.Operator> class1 = JSONPath.Operator.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>(105);
      ParserConfig.getFieldFromCache("I", hashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("gy", class1, class1, class0, (Field) null, 105, 5379, (-2573));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getField();
      jSONPath_NullSegement0.apply(jSONPath0, "com.alibaba.fastjson.JSONPath$DoubleOpSegement", (Object) null, "I");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("list is null.");
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(6226, (-2149), 2012);
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement(";JL(TkS}%ed7/L6Rn", jSONPath_MinSegment0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("36~wJ,");
      Long long0 = new Long(2012);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.deny", "", 2438);
      Double double0 = new Double((-2535.9));
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransientConnectionException0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.deny.internal", hashMap0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1103100070));
      jSONPath0.set((Object) null, (Object) jSONPath_ArrayAccessSegment0, false);
      jSONPath0.deepSet(long0, "com", (-2149), "com");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      jSONPath0.contains((Object) "*");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("*", "*");
      SQLException sQLException0 = new SQLException("max", "*", sQLRecoverableException0);
      sQLException0.printStackTrace();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLRecoverableException0);
      SerializeConfig serializeConfig0 = new SerializeConfig(8, false);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      JSONPath jSONPath1 = new JSONPath("*", serializeConfig0, parserConfig0);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("*", 3520L, 16L, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "max", 8, sQLException0);
      jSONPath1.containsValue((Object) jSONPath_FilterSegment0, (Object) sQLTransientConnectionException0);
      Short short0 = new Short((short)6);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      jSONPath0.keySet((Object) sQLNonTransientConnectionException0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.safeMode");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/8");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONPath_JSONPathParser0.skipWhitespace();
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/8");
      jSONPath0.keySet((Object) jSONPath_JSONPathParser0);
      jSONPath0.remove((Object) "/stackTrace/8");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "/stackTrace/8";
      stringArray0[1] = "/stackTrace/8";
      stringArray0[2] = "/stackTrace/8";
      stringArray0[3] = "/stackTrace/8";
      stringArray0[4] = "/stackTrace/8";
      stringArray0[5] = "/stackTrace/8";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      jSONPath_MultiPropertySegment0.eval(jSONPath0, "/stackTrace/8", "/stackTrace/8");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, (byte)6);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("false");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.LE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("false", (Pattern) null, jSONPath_Operator1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("false", "/stackTrace/2");
      SQLException sQLException0 = new SQLException("false", "/stackTrace/11", sQLNonTransientException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLException0);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/2");
      jSONPath0.containsValue((Object) "/stackTrace/11", (Object) jSONPath_RegMatchSegement0);
      Short short0 = new Short((short)177);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONPath0.keySet((Object) short0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("false");
      jSONPath_JSONPathParser1.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(jSONPath_Operator0, "GT", (-1580386065683472715L), "/stackTrace/11");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("stackTrace", (String) null, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("stackTrace");
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NOT_BETWEEN;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Qnn[JA9qlv%r", "Qnn[JA9qlv%r");
      jSONPath0.eval((Object) sQLTransactionRollbackException0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "H";
      stringArray0[2] = "stackTrace";
      stringArray0[3] = "Qnn[JA9qlv%r";
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = ";q4udh|0 c)XYmEZ$;";
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath(";q4udh|0 c)XYmEZ$;", serializeConfig0, (ParserConfig) null);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      serializeConfig0.createJavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      String string0 = "o";
      JSONPath jSONPath0 = new JSONPath("\\-");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<String> class0 = String.class;
      hashMap0.put("\\-", "And");
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      jSONPath0.remove((Object) hashMap0);
      String string1 = "x";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("x", "x", 0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("GT");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("\\-");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(99999999, 99999999, 0);
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) "o", "I^ay-/j.qJeJv0]B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : I^ay-/j.qJeJv0]B
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "o";
      String string1 = "\\\\-";
      JSONPath jSONPath0 = new JSONPath("\\-");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("\\-", "And");
      jSONPath0.remove((Object) hashMap0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = null;
      try {
        jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("\"a strig\"");
      DataTruncation dataTruncation0 = new DataTruncation(1418, true, true, 68, 68, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.setNextException(sQLNonTransientException0);
      dataTruncation0.getDataSize();
      SerializeConfig.getGlobalInstance();
      SQLException sQLException0 = new SQLException(">", ">");
      JSONPath jSONPath0 = JSONPath.compile(">");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a strig\"");
      jSONPath_JSONPathParser0.readValue();
      jSONPath_JSONPathParser0.skipWhitespace();
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment(".k(`evPN~P[iw@", ".k(`evPN~P[iw@", true);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      jSONPath_ValueSegment0.apply(jSONPath0, "a strig\"", jSONPath_MultiIndexSegment0, sQLException0);
      jSONPath0.contains((Object) sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "com.alibaba.fastjson.JSONPath$Operator";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.alibaba.fastjson.JSONPath$Operator", "com.alibaba.fastjson.JSONPath$Operator", mockThrowable0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLTransientConnectionException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("com.alibaba.fastjson.JSONPath$Operator", "o", map0, sQLTransientConnectionException0);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSONPath.paths((Object) sQLClientInfoException1, serializeConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(":'S?(`R^a");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"'S?(`R^a\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockUUID.fromString("in");
      JSONPath.extract("{\"x\":\"hello\",\"z\":true,\"A\":\"a string\",\"unixtime\":null}", "/causestackTrace/1");
      JSONPath jSONPath0 = new JSONPath("B1``;Q");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("in");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      JSONPath jSONPath0 = new JSONPath("M)DF");
      JSONPath.compile("M)DF");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("in");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "stackTrace";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = new JSONPath("Vx@i");
      MockDate mockDate0 = new MockDate((-913), (-913), 975);
      mockDate0.toInstant();
      jSONPath_MultiPropertySegment0.eval(jSONPath0, "Vx@i", mockDate0);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("Vx@i");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath1 = new JSONPath("K$Dl8_b>+t", serializeConfig0, parserConfig0);
      JSONPath jSONPath2 = JSONPath.compile("K$Dl8_b>+t");
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      // Undeclared exception!
      jSONPath2.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("y_-_b.Ta>aJUg<'", 2620.9708473263, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      JSONPath jSONPath0 = new JSONPath("RUoHL/|");
      SerializeConfig.getGlobalInstance();
      SQLException sQLException0 = new SQLException("y_-_b.Ta>aJUg<'", "})`9`~");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLException0);
      Long long0 = new Long((-2585L));
      Long long1 = new Long((-520183782617964618L));
      Long long2 = Long.getLong("RUoHL/|", long0);
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONPath.eqNotNull(bigInteger0, long2);
      // Undeclared exception!
      try { 
        JSONPath.extract("(Ljava/lang/String;C)V", "2");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONPath.compile("RUDWv#^}AZoN`o");
      Integer integer0 = new Integer(7);
      JSONPath jSONPath0 = new JSONPath("RUDWv#^}AZoN`o");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(690, 101, 7);
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.deny");
      JSONPath jSONPath2 = JSONPath.compile("scanEnum");
      JSONPath.containsValue((Object) jSONPath2, "fastjson.parser.deny.internal", (Object) null);
      Short short0 = new Short((short)133);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath1, short0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -83
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONPath.compile("Xca$e/stackTrace/3");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-15), (-15), 1040);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement(";JL(TkS}%ed7/L6Rn", jSONPath_RangeSegment0, jSONPath_Operator0);
      Long long0 = new Long((-6586085717218287427L));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("valueOf", "fastjson.parser.deny", 1040);
      Double double0 = new Double((-3147.0294402549266));
      JSONPath.eqNotNull(long0, long0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransientConnectionException0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "fastjson.parser.safeMode";
      stringArray0[1] = "fastjson.parser.deny.internal";
      stringArray0[2] = "*";
      stringArray0[3] = "A";
      stringArray0[4] = "valueOf";
      JSONPath.reserveToArray(serializeConfig0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      DataTruncation dataTruncation0 = new DataTruncation(23, true, true, 1418, 1418);
      sQLIntegrityConstraintViolationException0.setNextException(sQLNonTransientException0);
      dataTruncation0.getDataSize();
      SerializeConfig.getGlobalInstance();
      SQLDataException sQLDataException0 = new SQLDataException("{}", "{}");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("})`9`~", "{}", 1418);
      SQLDataException sQLDataException1 = new SQLDataException("{}");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(" is not a primitive type");
      JSONPath.compile("){p*R3!z!jG");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "){p*R3!z!jG";
      objectArray0[1] = (Object) " is not a primitive type";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(">");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1, 1, 1);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      JSONPath.RangeSegment jSONPath_RangeSegment1 = new JSONPath.RangeSegment((short)133, 39, 39);
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      Short short0 = new Short((short)91);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("isEnabled", "fastjson.parser.deny");
      JSONPath jSONPath2 = new JSONPath("fastjson.parser.autoTypeSupport");
      jSONPath_RangeSegment1.eval(jSONPath1, sQLIntegrityConstraintViolationException0, jSONPath2);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("^&qZJ>Rm");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("add", "^&qZJ>Rm", jSONPath_Operator0);
      Short short1 = new Short((short)113);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("add");
      Double double0 = new Double(941.3422617632);
      jSONPath_StringOpSegement0.apply(jSONPath2, sQLNonTransientConnectionException0, "add", double0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("[");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '^, but 'm'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      Double double0 = new Double((-1442.32));
      Long[] longArray0 = new Long[5];
      Long long0 = new Long(7);
      longArray0[0] = long0;
      Long long1 = new Long(186L);
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullStringAsEmpty;
      serializeConfig0.config(class0, serializerFeature0, false);
      longArray0[1] = long1;
      Long long2 = new Long(386461436234701831L);
      Long long3 = new Long((-536L));
      Long long4 = new Long((long) longArray0[0]);
      longArray0[4] = long4;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(45, 7, 19);
      jSONPath_RangeSegment0.eval(jSONPath0, double0, double0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      JSONPath.eqNotNull(bigInteger1, bigInteger1);
      parserConfig0.addAccept("~I2TYHlg");
      Long long5 = new Long(3744L);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(45);
      JSONPath.reserveToArray(localDate0, (String[]) null);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("~I2TYHlg", "fastjson.parser.safeMode", jSONPath_Operator0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(19);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fastjson.parser.safeMode", "UDyUMP^S6DKcODcrd", (-570));
      jSONPath_StringOpSegement0.apply(jSONPath0, longArray0[0], jSONPath_ArrayAccessSegment0, sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("y_-_b.Ta>aJUg<'", 2620.9708473263, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      JSONPath jSONPath0 = new JSONPath("RUoHL/|");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SQLException sQLException0 = new SQLException("y_-_b.Ta>aJUg<'", "})`9`~");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("})`9`~", ", segement ");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLRecoverableException0);
      SQLDataException sQLDataException0 = new SQLDataException("})`9`~", "[9o!4$2bTuU'c_", (-2291), sQLException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("RUoHL/|", ", segement ", sQLRecoverableException0);
      JSONPath jSONPath1 = JSONPath.compile("/cause/stackTrace/2");
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      JSONPath jSONPath2 = new JSONPath("min", serializeConfig0, parserConfig0);
      jSONPath2.arrayAdd((Object) "/cause/stackTrace/2", (Object[]) null);
      jSONPath1.arrayAdd((Object) "lyn", (Object[]) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%)c>%A");
      jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("RUDWv#^}AZoN`o");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("fastjson.parser.autoTypeAccept");
      ParserConfig parserConfig1 = new ParserConfig();
      jSONPath_NotNullSegement0.apply(jSONPath0, serializeConfig0, jSONPath0, parserConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeAccept");
      jSONPath_JSONPathParser0.isEOF();
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.safeMode", "fastjson.parser.deny.internal", 244);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fastjson.parser.autoTypeSupport", sQLNonTransientException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTimeoutException0);
      jSONPath_FilterSegment0.remove(jSONPath1, sQLIntegrityConstraintViolationException0, sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("I%W:vU,|L03X'2}3gM", 1117.51343873856, jSONPath_Operator0);
      Byte byte0 = new Byte((byte) (-107));
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializeConfig serializeConfig1 = SerializeConfig.globalInstance;
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1040, (-9), 1040);
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.GT;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("I%W:vU,|L03X'2}3gM", jSONPath_RangeSegment0, jSONPath_Operator1);
      JSONPath jSONPath0 = new JSONPath("I%W:vU,|L03X'2}3gM", serializeConfig0, parserConfig0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-107);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("cFCqC0)#wK=", "", intArray0);
      Integer integer0 = new Integer(1423);
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, batchUpdateException0, integer0);
      jSONPath_RangeSegment0.eval(jSONPath0, object0, object0);
      JSONPath jSONPath1 = new JSONPath("vq");
      Long long0 = new Long((-9));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Ansupported", "'o,7[zdV\"pq;\"T", (-4473));
      Float float0 = new Float((double) 1);
      jSONPath_RefOpSegement0.apply(jSONPath1, sQLTransientConnectionException0, float0, jSONPath1);
      ParserConfig parserConfig1 = new ParserConfig(false);
      jSONPath1.keySet((Object) jSONPath_RefOpSegement0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\\-", parserConfig1);
      // Undeclared exception!
      try { 
        jSONPath1.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object object0 = JSONPath.extract("{\"x\":\"hello\",\"illeal jsonpath syntax. \":7,\"z\":true,\"/cause/stackTrace/3\":\"a string\",\"unixtime\":[]}", ";");
      JSONPath jSONPath0 = new JSONPath(";");
      ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.WildCardSegment jSONPath_WildCardSegment1 = JSONPath.WildCardSegment.instance_deep;
      Class<SQLException> class0 = SQLException.class;
      int[] intArray0 = new int[6];
      intArray0[0] = 3089;
      intArray0[1] = 989;
      intArray0[2] = 3089;
      intArray0[3] = 0;
      intArray0[4] = 3089;
      intArray0[5] = 989;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(";", "yyyy-MM-dd HH:mm:ss", intArray0, sQLClientInfoException0);
      jSONPath0.set((Object) batchUpdateException0, object0, false);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("XGofBhk6G", hashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("1ZNvMERdL@NpJO<G", class0, class0, class0, (Field) null, 0, 0, 0);
      FieldInfo.getFieldType((Class<?>) class0, fieldInfo0.fieldType, (Type) fieldInfo0.fieldClass);
      jSONPath0.init();
      JSONPath.Operator.values();
      int[] intArray1 = new int[4];
      intArray1[0] = 989;
      intArray1[1] = 3089;
      intArray1[2] = 3089;
      intArray1[3] = 0;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray1);
      // Undeclared exception!
      try { 
        jSONPath_MultiIndexSegment0.eval(jSONPath0, (Object) null, jSONPath_WildCardSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = "Xca$e/stackTrace/3";
      stringArray0[0] = "Xca$e/stackTrace/3";
      String string1 = "not";
      JSONPath jSONPath0 = new JSONPath("not");
      Long long0 = new Long(3291L);
      // Undeclared exception!
      try { 
        JSONPath.compare(long0, jSONPath0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath cannot be cast to java.lang.Long
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Xca$e/stackTrace/3";
      JSONPath jSONPath0 = new JSONPath("nt");
      Long long0 = new Long(3291L);
      // Undeclared exception!
      try { 
        JSONPath.compare(long0, jSONPath0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath cannot be cast to java.lang.Long
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("hashCode");
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.deny");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.safeMode");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader.getSystemClassLoader();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(39, 39, 39);
      JSONPath jSONPath2 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      Short short0 = new Short((short)154);
      jSONPath_RangeSegment0.eval(jSONPath1, jSONPath2, short0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("hashCode");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("fastjson.parser.deny", "fastjson.parser.safeMode", jSONPath_Operator0);
      Short short1 = new Short((short)113);
      jSONPath_StringOpSegement0.apply(jSONPath0, parserConfig0, serializeConfig0, short1);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("hashCode");
      jSONPath_JSONPathParser1.readString();
      jSONPath_JSONPathParser1.filterRest(jSONPath_StringOpSegement0);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("stackTrace", "/cause/stackTrace/9", jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("]W");
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NOT_BETWEEN;
      SQLDataException sQLDataException0 = new SQLDataException("/cause/stackTrace/9", "]W");
      jSONPath_StringOpSegement0.apply(jSONPath0, "]W", jSONPath_Operator0, sQLDataException0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      Float float0 = new Float((-2011.843484174));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("stackTrace", "/vVU_zTpl9\"tHHX");
      jSONPath_StringOpSegement0.apply(jSONPath0, "]W", "stackTrace", jSONPath_FilterSegment0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("8'>Qh");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("/cause/stackTrace/9");
      jSONPath_JSONPathParser1.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"/cause/stackTrace/12\":[],\"getFieldValue error.\":false}");
      Integer integer0 = new Integer(0);
      JSONPath jSONPath1 = new JSONPath("{\"/cause/stackTrace/12\":[],\"getFieldValue error.\":false}");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 1, 0);
      JSONPath jSONPath2 = new JSONPath("()I");
      short short0 = (short)133;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("undefined", "getFieldType");
      SQLDataException sQLDataException0 = new SQLDataException("scanEnum", sQLTransactionRollbackException0);
      JSONPath.containsValue((Object) sQLDataException0, "/stackTrace/8", (Object) parserConfig0);
      Short short1 = new Short((short)133);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath2, classLoader0, short1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.alibaba.fastjson.JSONPath$RangeSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("RUDWv#^}AZoN`o");
      SerializeConfig.getGlobalInstance();
      ParserConfig.getGlobalInstance();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus("fastjson.parser.deny.internal", false);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("&RmM~Y8?3m[52,A!=");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("RUDWv#^}AZoN`o", jSONPath_WildCardSegment0, jSONPath_Operator0);
      JSONPath jSONPath1 = new JSONPath("/stackTrace/1");
      Long long0 = new Long(284L);
      Integer integer0 = new Integer((-1));
      JSONPath.RefOpSegement jSONPath_RefOpSegement1 = new JSONPath.RefOpSegement(",>ZUp1[EP", jSONPath_WildCardSegment0, jSONPath_Operator0);
      jSONPath_RefOpSegement1.apply(jSONPath1, "/cause/cause/stackTrace/5", "&RmM~Y8?3m[52,A!=", "/cause/cause/stackTrace/5");
      ParserConfig parserConfig1 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",>ZUp1[EP", parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath1.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("true", sQLNonTransientException0);
      sQLIntegrityConstraintViolationException0.setNextException(sQLNonTransientException0);
      Integer integer0 = new Integer(15);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      Double double0 = new Double((-1442.32));
      BigInteger bigInteger0 = BigInteger.TEN;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("true", "fastjson.parser.safeMode");
      JSONPath jSONPath1 = new JSONPath("l*&h<;ZZ~v[o");
      Long long0 = new Long(1056);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("true", "vq", 15);
      Double double1 = new Double((-1442.32));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONPath.eqNotNull(bigDecimal0, double0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowUnQuotedFieldNames;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowISO8601DateFormat;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AllowUnQuotedFieldNames;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.UseObjectArray;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.DisableCircularReferenceDetect;
      featureArray0[5] = feature5;
      // Undeclared exception!
      try { 
        JSONPath.extract("{\"x\":\"hello\",\"illeal jsonpath syntax. \":7,\"z\":true,\"b\":\"a string\",\"unixtime\":null}", "{\"x\":\"hello\",\"illeal jsonpath syntax. \":7,\"z\":true,\"b\":\"a string\",\"unixtime\":null}", (ParserConfig) null, (-1382), featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONPath jSONPath0 = new JSONPath("sa39Ia_EK");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int[] intArray0 = new int[6];
      intArray0[0] = 2712;
      intArray0[1] = 2712;
      intArray0[2] = 1357;
      intArray0[3] = 2712;
      intArray0[4] = 2712;
      intArray0[5] = 2712;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("fastjson.parser.deny", "jsonpath can not be null", 2712, intArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(")", "jsonpath can not be null");
      SQLWarning sQLWarning0 = new SQLWarning("r/h=BpP", "'", (-1426), sQLInvalidAuthorizationSpecException0);
      sQLWarning0.getLocalizedMessage();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("}_@=j*6", false);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement(".k(`evPN~P[iw@");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      jSONPath_FilterSegment0.eval(jSONPath0, parserConfig0, jSONPath0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = null;
      try {
        jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      String string0 = "list is null.";
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("list is null.");
      String string1 = "?G,\"BT|^$";
      JSONPath jSONPath0 = new JSONPath("?G,\"BT|^$");
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("list is null.", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONPath.compile("RUDWv#^}AZoN`o");
      SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("n{h&eOu");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // n{h&eOu
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("n{h&eOu");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // n{h&eOu
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      Double double0 = new Double((-1442.32));
      Class<BigInteger> class0 = BigInteger.class;
      Long[] longArray0 = new Long[5];
      Long long0 = new Long(7);
      longArray0[0] = long0;
      Long long1 = new Long(186L);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) classLoader0, (Object) class0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "t[%Z/L4e(&fv";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException0.spliterator();
      JSONPath jSONPath0 = new JSONPath("t[%Z/L4e(&fv");
      SerializeConfig serializeConfig0 = new SerializeConfig(754);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) consumer0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "stackTrace";
      stringArray0[1] = "ui!OFpA`!eSX3A";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = new JSONPath("Vx@i");
      Object object0 = jSONPath_MultiPropertySegment0.eval(jSONPath0, "stackTrace", "stackTrace");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath.paths(object0, serializeConfig0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Xca$e/stackTrace/3";
      String string0 = "o";
      JSONPath jSONPath0 = new JSONPath("o");
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      // Undeclared exception!
      jSONPath0.remove((Object) javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = "Xca$e/stackTrace/3";
      stringArray0[0] = "Xca$e/stackTrace/3";
      String string1 = "not";
      JSONPath jSONPath0 = new JSONPath("not");
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      // Undeclared exception!
      jSONPath0.remove((Object) javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("{\"_\":-Infinity}", sQLNonTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(1418, true, true, 7, 7, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.setNextException(sQLNonTransientException0);
      dataTruncation0.getDataSize();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      Double double0 = new Double((-1442.32));
      BigInteger bigInteger0 = BigInteger.TEN;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.autoTypeAccept", sQLNonTransientException0);
      String string0 = "AllowSingleQuotes";
      sQLNonTransientException0.setNextException(dataTruncation0);
      Class<BigInteger> class0 = BigInteger.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues(classLoader0);
      jSONPath0.deepScan(sQLFeatureNotSupportedException0, string0, list0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("{\"_\":-Infinity}", sQLNonTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(1418, true, true, 7, 7, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.setNextException(sQLIntegrityConstraintViolationException0);
      dataTruncation0.getDataSize();
      ClassLoader.getSystemClassLoader();
      Short short0 = new Short((short) (-1406));
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("{\"_\":-Infinity}", "/cause/stackTrace/5", "/cause/stackTrace/5", 7);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("REG_MATCH", "REG_MATCH", "fastjson.asmEnable", 2626);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("{\"_\":-Infinity}", "Z,pfd_L-", "/cause/stackTrace/5", 1418);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("!JDS}43", "/cause/stackTrace/5", (String) null, (-1540));
      stackTraceElementArray0[3] = stackTraceElement3;
      dataTruncation0.setStackTrace(stackTraceElementArray0);
      DataTruncation dataTruncation1 = new DataTruncation(11, true, true, 7, (-1517));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{\"_\":-Infinity}";
      stringArray0[1] = "{\"_\":-Infinity}";
      stringArray0[2] = "{\"_\":-Infinity}";
      stringArray0[3] = "{\"_\":-Infinity}";
      stringArray0[4] = "{\"_\":-Infinity}";
      stringArray0[5] = "{\"_\":-Infinity}";
      // Undeclared exception!
      try { 
        JSONPath.read("{\"_\":-Infinity}", "{\"_\":-Infinity}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "7";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("7");
      long long0 = 15L;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("7", 15L, jSONPath_Operator0);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntOpSegement0);
      jSONPath_JSONPathParser0.filterRest(jSONPath_Filter0);
      Float float0 = new Float((float) 15L);
      JSONPath.eqNotNull(float0, float0);
      JSONPath jSONPath0 = JSONPath.compile("P!I2qlU3O3J\"[U|o");
      String string1 = "alibaba";
      SQLDataException sQLDataException0 = new SQLDataException("/", "alibaba");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(83);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLDataException0, (Object) jSONPath_ArrayAccessSegment0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : P!I2qlU3O3J\"[U|o
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "not match ";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("not match ", stringArray0, false);
      SerializeConfig serializeConfig0 = new SerializeConfig(74);
      JSONPath jSONPath0 = new JSONPath("not match ", serializeConfig0, (ParserConfig) null);
      Float float0 = new Float(0.0);
      JSONPath.eqNotNull(float0, float0);
      Float float1 = new Float(1075.66452924);
      jSONPath_StringInSegement0.apply(jSONPath0, (Object) null, float1, "not match ");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("RUDWv#^}AZoN`o");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      ParserConfig parserConfig1 = new ParserConfig(false);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.reserveToObject("VNRJ?(aE", (String[]) null);
      Class<Object> class0 = Object.class;
      parserConfig1.register("RUDWv#^}AZoN`o", class0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeAccept");
      JSONPath.reserveToArray(serializeConfig0, (String[]) null);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("Z3qxq40`AW[G", "fastjson.compatibleWithJavaBean", "fastjson.parser.safeMode", (String[]) null, false);
      Byte byte0 = new Byte((byte)5);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("rgk~{t;", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("VNRJ?(aE", "RUDWv#^}AZoN`o", 3089, map0, sQLClientInfoException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[Z");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTimeoutException0);
      jSONPath_MatchSegement0.apply(jSONPath0, byte0, sQLClientInfoException1, sQLTransientConnectionException0);
      SQLWarning sQLWarning0 = new SQLWarning("fastjson.parser.autoTypeSupport", "fastjson.parser.autoTypeSupport");
      jSONPath1.remove((Object) sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("*C({[k1B@3(%:t", sQLNonTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(1183, false, false, 23, 1102, sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("rlike", "x`,^.[#-x11a:moR");
      sQLIntegrityConstraintViolationException1.setNextException(dataTruncation0);
      dataTruncation0.getDataSize();
      SerializeConfig.getGlobalInstance();
      SQLException sQLException0 = new SQLException("+x^fK}KyhZ!-e},_^2%", (String) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(dataTruncation0);
      SQLDataException sQLDataException0 = new SQLDataException(")");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(")", "})`9`~", dataTruncation0);
      JSONPath.compile("ek?");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<^ob:\u0001>)|Td");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("^0r> F/k>DU|QoQP(");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      JSONPath.isInt(class0);
      String string0 = "afDp4'+aaIdc\\wATa";
      JSONPath jSONPath0 = JSONPath.compile("afDp4'+aaIdcwATa");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("afDp4'+aaIdcwATa");
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[D");
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      jSONPath0.getJavaBeanSerializer(class0);
      int int0 = 2586;
      Integer integer0 = new Integer(2586);
      JSONPath jSONPath1 = new JSONPath("[D");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.alibaba.fastjson.serializer.MiscCodec");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ParserConfig.getGlobalInstance();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-262), 3, 15);
      JSONPath jSONPath2 = new JSONPath("illegal json : ");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fastjson.parser.deny.internal", "com.alibaba.fastjson.serializer.MiscCodec", 3);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) jSONPath2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("[]");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      Class<Integer> class0 = Integer.class;
      parserConfig0.checkAutoType(class0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      Short short0 = new Short((short)2582);
      DataTruncation dataTruncation0 = new DataTruncation(40, false, true, 122, 122);
      Byte byte0 = new Byte((byte)116);
      Integer integer0 = new Integer(122);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9i'a.PK58?3Q[=$");
      jSONPath_JSONPathParser0.readDoubleValue((short)2582);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "/StackTrace/2";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/StackTrace/2");
      jSONPath_JSONPathParser0.buildArraySegement("/StackTrace/2");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("/StackTrace/2", (SerializeConfig) null, parserConfig0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      // Undeclared exception!
      try { 
        jSONPath0.evalKeySet(jSONPath_FilterSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONPath.extract("{\"x\":\"hello\",\"illeal jsonpath syntax. \":7,\"like\":true,\"b\":true,\"unixtime\":null}", "b");
      JSONPath jSONPath0 = new JSONPath("b");
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.parser.safeMode", (-1580386065683472715L), 0, false);
      ParserConfig parserConfig1 = ParserConfig.global;
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      parserConfig1.getDeserializer((Class<?>) class0, (Type) class0);
      parserConfig0.getDeserializer((Type) class0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeAccept");
      Short short0 = new Short((short)154);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(125, 2, 0);
      Object object0 = null;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath_MultiIndexSegment0.eval(jSONPath1, sQLFeatureNotSupportedException0, jSONPath_SizeSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MultiIndexSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONPath.extract("{\"x\":\"/stackTrace\",\"illeal jsonpath syntax. \":7,\"z\":true,\"b\":-99,\"unixtime\":[]}", "b");
      JSONPath jSONPath0 = new JSONPath("b");
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig parserConfig1 = ParserConfig.global;
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      parserConfig1.getDeserializer((Class<?>) class0, (Type) class0);
      parserConfig0.getDeserializer((Type) class0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONPath jSONPath1 = JSONPath.compile("/cause/stackTrace/2");
      ParserConfig parserConfig2 = new ParserConfig((ASMDeserializerFactory) null);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      jSONPath1.arrayAdd((Object) bigInteger0, (Object[]) null);
      JSONPath jSONPath2 = new JSONPath("fastjson.parser.deny.internal");
      jSONPath2.arrayAdd((Object) parserConfig2, (Object[]) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("cause");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object object0 = JSONPath.extract("{\"x\":\"hello\",\"illeal jsonpath syntax. \":7,\"z\":true,\"b\":true,\"unixtime\":null,\"/stackTrace/5\":{}}", "b");
      JSONPath jSONPath0 = new JSONPath("b");
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.parser.safeMode", (-1580386065683472715L), 0, false);
      ParserConfig parserConfig1 = ParserConfig.global;
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      parserConfig1.getDeserializer((Class<?>) class0, (Type) class0);
      parserConfig0.getDeserializer((Type) class0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Geb0Y");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTimeoutException0);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("FL/h.*7FJY", "fastjson.parser.safeMode", "", (String[]) null, false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      jSONPath_MatchSegement0.apply(jSONPath0, sQLIntegrityConstraintViolationException0, (Object) null, object0);
      SQLWarning sQLWarning0 = new SQLWarning("b?^('ZY;xVRY", "fastjson.parser.deny.internal");
      jSONPath0.remove((Object) "FL/h.*7FJY");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "unsupported array put operation. ";
      JSONPath jSONPath0 = new JSONPath("unsupported array put operation. ");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("unsupported array put operation. ", "GxbrrP[EA^o(=)?;$]z");
      MockThrowable mockThrowable0 = new MockThrowable("I", sQLNonTransientException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.alibaba.fastjson.JSONPath$IntBetweenSegement", sQLNonTransientException0);
      Double double0 = new Double(2002.0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>(hashMap0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Ds;w?Bl*iD[Z?tQ", "QE{&A`@lV^{nVo%)>J", 6, hashMap1);
      jSONPath0.setPropertyValue(sQLNonTransientException0, "com.alibaba.fastjson.JSONPath$IntBetweenSegement", 346L, sQLClientInfoException0);
      Long long0 = new Long((-83L));
      Long long1 = new Long((-674L));
      Long.getLong("qA", long1);
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONPath.eqNotNull(bigInteger0, long0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(52);
      SQLWarning sQLWarning0 = new SQLWarning("g]En@trz:}TDVRR", "}", 52);
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(sQLWarning0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/Cause/Cause/StackTrace/5", true);
      JSONPath jSONPath0 = new JSONPath("/StackTrace/12");
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-100);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("/Cause/Cause/StackTrace/5", "Y<m_@D>ci~x9`");
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      jSONPath_PropertySegment0.remove(jSONPath0, sQLInvalidAuthorizationSpecException0);
      jSONPath_PropertySegment0.eval(jSONPath0, javaBeanSerializer0, (Object) null);
      JSONPath.size((Object) jSONPath_PropertySegment0, "cxPVthPt");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "cxPVthPt";
      stringArray0[1] = "in";
      stringArray0[2] = "/Cause/Cause/StackTrace/5";
      stringArray0[3] = "/Cause/Cause/StackTrace/5";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("com", serializeConfig0, parserConfig0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("e7`ziq=38");
      SQLWarning sQLWarning0 = new SQLWarning("fastjson.parser.autoTypeAccept", (String) null, sQLTransactionRollbackException0);
      sQLWarning0.fillInStackTrace();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLWarning0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-401));
      jSONPath0.set((Object) sQLTimeoutException0, (Object) jSONPath_ArrayAccessSegment0, false);
      DataTruncation dataTruncation0 = new DataTruncation(48, true, true, (-401), 48, sQLWarning0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("fastjson.parser.deny");
      sQLWarning0.printStackTrace((PrintWriter) mockPrintWriter0);
      dataTruncation0.getRead();
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, dataTruncation0, "+(vo+U");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      Double double0 = new Double((-1442.32));
      Class<BigInteger> class0 = BigInteger.class;
      Long[] longArray0 = new Long[5];
      Long long0 = new Long(7);
      longArray0[0] = long0;
      Long long1 = new Long(186L);
      longArray0[1] = long1;
      Long long2 = new Long(386461436234701831L);
      Long long3 = new Long((-536L));
      Long long4 = new Long((long) longArray0[0]);
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("dd-MMyyyy", longArray0, false);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      jSONPath_IntObjInSegement0.apply(jSONPath0, long4, javaBeanSerializer0, sQLClientInfoException0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("5q[GAho7]l");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 5q[GAho7]l
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("not");
      jSONPath0.isRef();
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("not", jSONPath_SizeSegment0, jSONPath_Operator0);
      JSONPath jSONPath1 = new JSONPath("*");
      Long long0 = new Long(2212L);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("not", "not", (-413));
      Double double0 = new Double(119.0);
      JSONPath.eqNotNull(double0, long0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransientConnectionException0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("~:YC");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but '~'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONPath jSONPath0 = JSONPath.compile("z");
      JSONPath.size((Object) null, "z");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      jSONPath0.size((Object) jSONPath_WildCardSegment0);
      // Undeclared exception!
      JSONPath.remove((Object) jSONPath0, "z");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Double double0 = new Double(1000000.0);
      Byte byte0 = new Byte((byte)116);
      Byte byte1 = new Byte((byte) (-93));
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializeConfig serializeConfig1 = SerializeConfig.globalInstance;
      ClassLoader.getSystemClassLoader();
      ParserConfig.getGlobalInstance();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(5, (-9), (byte)116);
      JSONPath.RangeSegment jSONPath_RangeSegment1 = new JSONPath.RangeSegment(33, (byte)116, 33);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("fastjson.parser.deny", jSONPath_RangeSegment1, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("&kx\u0005;");
      Long long0 = new Long((byte)116);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.autoTypeAccept", "fastjson.parser.deny.internal", (-9));
      Double double1 = new Double(3230.128428245);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONPath.eqNotNull(bigDecimal0, long0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RE=<2t6W$;W~MTfO");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<BigInteger> class0 = BigInteger.class;
      serializeConfig0.createJavaBeanSerializer(class0);
      JSONPath.paths((Object) "RE=<2t6W$;W~MTfO", serializeConfig0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("RE=<2t6W$;W~MTfO");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      SerializeConfig serializeConfig1 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("0GQ}%X}l&", serializeConfig0, parserConfig0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      jSONPath_KeySetSegment0.eval(jSONPath0, serializeConfig1, jSONPath0);
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.deny.internal");
      Long long0 = new Long((short)102);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("valueOf", "y:6CIlY`Q??e8n^oj", 1257);
      Double double0 = new Double((-3147.0294402549266));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal2 = new BigDecimal(bigInteger0);
      JSONPath.eqNotNull(bigDecimal2, bigDecimal1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransientConnectionException0);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("y:6CIlY`Q??e8n^oj");
      JSONPath jSONPath2 = new JSONPath("b");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientException0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("_asm_list_item_deser__", false);
      jSONPath_NullSegement0.apply(jSONPath2, sQLInvalidAuthorizationSpecException0, jSONPath_JSONPathParser0, jSONPath_PropertySegment0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Gs{", "Fm(b'hr2T8S", 1257, sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) sQLTimeoutException0, "|");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "/Cause/StackTrace/11";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/Cause/StackTrace/11");
      JSONPath jSONPath0 = JSONPath.compile("w`Y3");
      JSONPath jSONPath1 = JSONPath.compile("/Cause/StackTrace/11");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("w`Y3", "x@MiU#", 9);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("x@MiU#", "],$<Sd~@Ba)^r?q8y@@", sQLRecoverableException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("-", ",)`>5<Fx6Xiq9`U|3", 43, hashMap0, sQLIntegrityConstraintViolationException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("-", sQLClientInfoException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTimeoutException0);
      JSONPath.paths((Object) sQLInvalidAuthorizationSpecException0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath2 = new JSONPath("-", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath1, "w`Y3", 43, jSONPath2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      MockThrowable mockThrowable0 = new MockThrowable("com.alibaba.fastjson.JSONPath$Operator");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.alibaba.fastjson.JSONPath$Operator", "com.alibaba.fastjson.JSONPath$Operator", mockThrowable0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLTransientConnectionException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("com.alibaba.fastjson.JSONPath$Operator", "'s*,s*'", map0, sQLTransientConnectionException0);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSONPath.paths((Object) sQLClientInfoException1, serializeConfig0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("LFnDPHL-\"}teUtS.JwM");
      jSONPath_JSONPathParser0.readString();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("eJb1<m#o");
      jSONPath0.size((Object) null);
      JSONPath.remove((Object) null, "getEndInclusive");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(45);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "XzgfDW";
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("XzgfDW", hashMap0);
      JSONPath.remove((Object) null, "s0%&g[:(hCDZ?u");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("LFnDPHL-\"}teUtS.JwM", false);
      String string1 = "bPL#4q_gF**P>Q#+";
      JSONPath jSONPath1 = new JSONPath("bPL#4q_gF**P>Q#+");
      MockThrowable mockThrowable0 = new MockThrowable(sQLSyntaxErrorException0);
      MockThrowable.getDefaultStackTrace();
      SQLDataException sQLDataException0 = new SQLDataException(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath1, (Object) jSONPath_JSONPathParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : eJb1<m#o
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "Xca$e/stackTUrace/3";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Xca$e/stackTUrace/3");
      JSONPath jSONPath0 = JSONPath.compile("Xca$e/stackTUrace/3");
      jSONPath0.size((Object) null);
      ParserConfig.getGlobalInstance();
      Class<String> class0 = String.class;
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("hashCode");
      SQLDataException sQLDataException0 = new SQLDataException("hashCode", "hashCode");
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "hashCode";
      stringArray0[2] = "hashCode";
      stringArray0[3] = "hashCode";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      javaBeanSerializer0.getFieldValues(stringArray0[1]);
      List<Object> list0 = javaBeanSerializer0.getFieldValues(stringArray0[1]);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLDataException0, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      String string0 = "k";
      JSONPath jSONPath0 = new JSONPath("k");
      // Undeclared exception!
      JSONPath.remove((Object) jSONPath0, "k");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$MinSegment");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$MinSegment");
      Float float0 = new Float(1383.0F);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("com.alibaba.fastjson.JSONPath$MinSegment", jSONPath_JSONPathParser0, false);
      Integer integer0 = new Integer(1004);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      jSONPath0.getJavaBeanDeserializer(class0);
      jSONPath0.extract((DefaultJSONParser) null);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "stackTrace";
      stringArray0[1] = "ui!OFpA`!eSX3A";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      String string0 = "org.joda.time.format.DateTimeFormatter";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("ui!OFpA`!eSX3A", "org.joda.time.format.DateTimeFormatter", 11);
      Float float0 = new Float(0.0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement(";0m", jSONPath_MultiPropertySegment0, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("ui!OFpA`!eSX3A");
      jSONPath0.extract((DefaultJSONParser) null);
      jSONPath_RefOpSegement0.apply(jSONPath0, (Object) null, jSONPath0, (Object) null);
      ParserConfig parserConfig0 = new ParserConfig(false);
      parserConfig0.setAutoTypeSupport(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("E3Q~", parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2E3Q~
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("{\"/stackTrace/1\":-428.568,\"not support jsonpath : \":[]}", "{\"/stackTrace/1\":-428.568,\"not support jsonpath : \":[]}");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLFeatureNotSupportedException0);
      jSONPath0.evalKeySet(sQLTransactionRollbackException0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      Double double0 = new Double((-1442.32));
      BigInteger bigInteger0 = BigInteger.TEN;
      Class<BigInteger> class0 = BigInteger.class;
      Long[] longArray0 = new Long[5];
      Long long0 = new Long(7);
      longArray0[0] = long0;
      Long long1 = new Long(186L);
      longArray0[1] = long1;
      Long long2 = new Long(386461436234701831L);
      longArray0[2] = long2;
      Long long3 = new Long((-503L));
      longArray0[3] = long3;
      Long long4 = new Long(3110L);
      longArray0[4] = long4;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("dd-MM-yyyy", longArray0, false);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      jSONPath_IntObjInSegement0.apply(jSONPath0, long4, javaBeanSerializer0, sQLClientInfoException0);
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.ErrorOnEnumNotMatch;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableASM;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.SortFeidFastMatch;
      featureArray0[2] = feature2;
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.parser.autoTypeAccept", "fastjson.parser.autoTypeSupport", parserConfig0, 65, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("99", "99");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLFeatureNotSupportedException0);
      jSONPath0.evalKeySet(sQLTransactionRollbackException0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      Double double0 = new Double((-1442.32));
      BigInteger bigInteger0 = BigInteger.TEN;
      Class<BigInteger> class0 = BigInteger.class;
      Long[] longArray0 = new Long[5];
      Long long0 = new Long(7);
      longArray0[0] = long0;
      Long long1 = new Long(186L);
      longArray0[1] = long1;
      Long long2 = new Long(386461436234701831L);
      longArray0[2] = long2;
      Long long3 = new Long((-503L));
      Long long4 = new Long(3110L);
      longArray0[4] = long4;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("dd-MM-yyyy", longArray0, false);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      jSONPath_IntObjInSegement0.apply(jSONPath0, long4, javaBeanSerializer0, sQLClientInfoException0);
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.ErrorOnEnumNotMatch;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableASM;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.SortFeidFastMatch;
      featureArray0[2] = feature2;
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.parser.autoTypeSupport", "fastjson.parser.deny.internal");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RE=<2t6W$;W~MTfO");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<BigInteger> class0 = BigInteger.class;
      serializeConfig0.createJavaBeanSerializer(class0);
      JSONPath.paths((Object) "RE=<2t6W$;W~MTfO", serializeConfig0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("RE=<2t6W$;W~MTfO");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      SerializeConfig serializeConfig1 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("0GQ}%X}l&", serializeConfig0, parserConfig0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      jSONPath_KeySetSegment0.eval(jSONPath0, serializeConfig1, jSONPath0);
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.deny.internal");
      Long long0 = new Long((short)102);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("valueOf", "y:6CIlY`Q??e8n^oj", 1257);
      Double double0 = new Double((-3147.0294402549266));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal2 = new BigDecimal(bigInteger0);
      JSONPath.eqNotNull(bigDecimal2, bigDecimal1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransientConnectionException0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("s");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "com.alibaba.fastjson.JSONPath$Operator";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.alibaba.fastjson.JSONPath$Operator", "com.alibaba.fastjson.JSONPath$Operator", mockThrowable0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLTransientConnectionException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("com.alibaba.fastjson.JSONPath$Operator", "o", map0, sQLTransientConnectionException0);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSONPath.paths((Object) sQLClientInfoException1, serializeConfig0);
      String string1 = ":'S?(`R^a";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(":'S?(`R^a");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"'S?(`R^a\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*_#ml#");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("q&#c{Ki:mv[c/^Q|B#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"q&#c{Ki\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":true,\"number\":\"1\"}");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1, 1, 40);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      Short short0 = new Short((short)2582);
      DataTruncation dataTruncation0 = new DataTruncation(40, false, true, 122, 122);
      Byte byte0 = new Byte((byte)116);
      JSONPath.reserveToObject(byte0, (String[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("|7i<k&t:o-j*");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"|7i<k&t\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$MinSegment";
      stringArray0[1] = "com.alibaba.fastjson.JSONPath$MinSegment";
      stringArray0[2] = "com.alibaba.fastjson.JSONPath$MinSegment";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("scanLong", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      ClassLoader.getSystemClassLoader();
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment1 = new JSONPath.MultiPropertySegment(stringArray0);
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "com.alibaba.fastjson.JSONPath$MinSegment", 36, (Map<String, ClientInfoStatus>) null);
      JSONPath.set((Object) null, "y e>w+)oq W[0J", (Object) null);
      JSONPath jSONPath1 = null;
      try {
        jSONPath1 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/7");
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLWarning0);
      JSONPath.size((Object) sQLInvalidAuthorizationSpecException0, "/stackTrace/7");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      jSONPath0.size((Object) sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) sQLInvalidAuthorizationSpecException0, "/stackTrace/7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "unsupported array put operation. ";
      stringArray0[1] = "unsupported array put operation. ";
      stringArray0[2] = "unsupported array put operation. ";
      stringArray0[4] = "unsupported array put operation. ";
      stringArray0[5] = "unsupported array put operation. ";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Double double0 = new Double(2803.0);
      JSONPath.remove((Object) null, "getCurrent");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(2997);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) double0, "unsupported array put operation. ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "Xca$e/stackTUrace/3";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Xca$e/stackTUrace/3");
      JSONPath jSONPath0 = JSONPath.compile("Xca$e/stackTUrace/3");
      ParserConfig.getGlobalInstance();
      Class<String> class0 = String.class;
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SerializeConfig.getGlobalInstance();
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 23;
      longArray0[1] = 1099511628211L;
      longArray0[2] = (long) 23;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("/cause/stackTrace", longArray0, false);
      JSONPath jSONPath0 = new JSONPath("{\"NOT_RLIKE\":[],\"y\":{\"NOT_RLIKE\":null},\"z\":true,\"a\":[],\"b\":{}}");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/cause/stackTrace/3");
      jSONPath_JSONPathParser0.explain();
      Object object0 = new Object();
      JSONPath.contains((Object) "{\"NOT_RLIKE\":[],\"y\":{\"NOT_RLIKE\":null},\"z\":true,\"a\":[],\"b\":{}}", "/cause/stackTrace");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/7");
      JSONPath.size((Object) null, "/stackTrace/7");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      jSONPath0.size((Object) jSONPath_WildCardSegment0);
      JSONPath.remove((Object) jSONPath0, "/stackTrace/7");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(45);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONPath.remove((Object) jSONPath_ArrayAccessSegment0, "XzgfDW");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("unclosed string : ", true);
      JSONPath jSONPath1 = new JSONPath("/stackTrace/7");
      MockThrowable mockThrowable0 = new MockThrowable(sQLSyntaxErrorException0);
      MockThrowable.getDefaultStackTrace();
      SQLDataException sQLDataException0 = new SQLDataException(mockThrowable0);
      jSONPath1.set((Object) "/stackTrace/7", (Object) sQLDataException0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "}}5Mud>%-yuI(@";
      stringArray0[1] = "unclosed string : ";
      stringArray0[2] = "><";
      stringArray0[3] = "><";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("}}5Mud>%-yuI(@", "}}5Mud>%-yuI(@", "><", stringArray0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      MockUUID.fromString("/cause/stackTrace/1");
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(";JL(TkS}%ed7/L6Rn");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("fastjson.parser.autoTypeSupport", jSONPath_Segment0, jSONPath_Operator0);
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.deny.internal");
      Long long0 = new Long(1651L);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.safeMode", "C1Bgvd{}F3.U{ncP\"", 92);
      Double double0 = new Double((-3147.0294402549266));
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("_q_", "fastjson.parser.deny", 92, sQLTransientConnectionException0);
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException(sQLNonTransientException0);
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.And;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_Operator1, (Object) sQLNonTransientException0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("{\"/stackTrace/1\":-428.568}", sQLNonTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(1418, true, true, 7, 15, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.setNextException(sQLNonTransientException0);
      dataTruncation0.getDataSize();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      Double double0 = new Double((-1442.32));
      BigInteger bigInteger0 = BigInteger.TEN;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.autoTypeAccept", sQLNonTransientException0);
      Class<BigInteger> class0 = BigInteger.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues(classLoader0);
      jSONPath0.deepScan(sQLFeatureNotSupportedException0, "AllowSingleQuotes", list0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Integer integer0 = new Integer(0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializeConfig serializeConfig1 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("H -&iT#m}#Uft&8");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.joda.time.format.DateTimeFormatter", (String) null, 1024);
      ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("code", parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : H -&iT#m}#Uft&8
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Random.setNextRandom(199);
      JSONPath.JSONPathParser.isDigitFirst('$');
      Pattern pattern0 = Pattern.compile("not", 199);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("not", pattern0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RegMatchSegement0);
      JSONPath jSONPath0 = new JSONPath("@U%s,^EIN]p");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '$';
      intArray0[1] = (int) '$';
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("@U%s,^EIN]p", "Rnfw39gGB N1R!=/Y", 2712, intArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLWarning sQLWarning0 = new SQLWarning("not", "Rnfw39gGB N1R!=/Y", 199, sQLClientInfoException0);
      sQLWarning0.getLocalizedMessage();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("LYn", false);
      jSONPath_FilterSegment0.eval(jSONPath0, sQLWarning0, jSONPath_PropertySegment0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("LYn");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. LYn
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONPath.compile("Xca$e/stackTrace/3");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-15), (-15), 1040);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement(";JL(TkS}%ed7/L6Rn", jSONPath_RangeSegment0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("*");
      Long long0 = new Long((-6586085717218287427L));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("valueOf", "fastjson.parser.deny", 1040);
      Double double0 = new Double((-3147.0294402549266));
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLNonTransientException0, (Object) null, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("\"a string\"");
      Integer integer0 = new Integer(0);
      JSONPath jSONPath1 = new JSONPath("\"a string\"");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"a string\"");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      MockCalendar.getInstance();
      Byte byte0 = new Byte((byte)8);
      Short short0 = new Short((byte)8);
      JSONPath.eqNotNull(short0, integer0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        JSONPath.extract("mRC)o8a|0(DZ^", "/stackTrace/12");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "[-99,[false],99]";
      Object object0 = new Object();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[-99,[false],99]");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/cause/stackTrace/0";
      stringArray0[1] = "[-99,[false],99]";
      stringArray0[2] = "[-99,[false],99]";
      stringArray0[3] = "[-99,[false],99]";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      int int0 = 47;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("/cause/stackTrace/5", (String) null, 47);
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(sQLFeatureNotSupportedException0, stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"[false\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object object0 = new Object();
      long[] longArray0 = new long[1];
      longArray0[0] = (-6586085717218287427L);
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("rJoa4FBP", longArray0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntInSegement0, jSONPath_IntInSegement0, true);
      SQLDataException sQLDataException0 = new SQLDataException();
      JSONPath jSONPath0 = new JSONPath("[-99,[false],99]");
      Short short0 = new Short((short) (-2729));
      jSONPath_FilterGroup0.apply(jSONPath0, short0, short0, short0);
      JSONPath jSONPath1 = JSONPath.compile("/cause/cause/stackTrace/2");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jSONPath_FilterGroup0.apply(jSONPath1, jSONPath0, mockGregorianCalendar0, short0);
      JSONPath.JSONPathParser.isDigitFirst('B');
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("ld%C%z~");
      jSONPath_JSONPathParser0.filterRest(jSONPath_IntInSegement0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("#yryA*ma*yIDu7");
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) "/cause/cause/stackTrace/2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"[false\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONPath.extract("{\"x\":\"hello\",\"illeal jsonpath syntax. \":7,\"z\":true,\"b\":\"a string\",\"unixtime\":null}", "b");
      JSONPath jSONPath0 = new JSONPath("b");
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.parser.safeMode", (-1580386065683472715L), 0, false);
      ParserConfig parserConfig1 = ParserConfig.global;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.reserveToObject((Object) null, (String[]) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("like");
      Double double0 = new Double(2895.93);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fastjson.parser.autoTypeSupport");
      JSONPath.reserveToArray(sQLSyntaxErrorException0, (String[]) null);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/cause/stackTrace");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, 109);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("/cause/stackTrace/11", sQLTimeoutException0);
      Short short0 = new Short((short)2819);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("$e", "B>nS:-XkN]@VBGy", 40, (Map<String, ClientInfoStatus>) null);
      JSONPath.compare("T*5w|;", "/cause/stackTrace/11");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONPath.compile("hashCode");
      ParserConfig parserConfig0 = new ParserConfig();
      MockUUID.fromString("I`g%Hh");
      Byte byte0 = new Byte((byte) (-115));
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializeConfig serializeConfig1 = SerializeConfig.globalInstance;
      ClassLoader.getSystemClassLoader();
      ParserConfig.getGlobalInstance();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1040, 1491, 1040);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("fastjson.parser.deny.internal", jSONPath_RangeSegment0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      Long long0 = new Long(3132L);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.safeMode", "vq", 1491);
      Double double0 = new Double((-1964.0));
      JSONPath.eqNotNull(long0, long0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      JSONPath jSONPath1 = new JSONPath("/cause/stackTrace/0");
      SQLTransientException sQLTransientException0 = new SQLTransientException("I`g%Hh", "fastjson.parser.autoTypeSupport", 1040, sQLTransientConnectionException0);
      Class<JSONPath.RangeSegment> class0 = JSONPath.RangeSegment.class;
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.deny.internal", hashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("/cause/stackTrace/0", class0, class1, (Type) null, (Field) null, 33, 33, 48);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      jSONPath_FilterSegment0.remove(jSONPath1, sQLTransientException0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("y_-_b.Ta>aJUg<'", 2620.9708473263, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      JSONPath jSONPath0 = new JSONPath("RUoHL/|");
      jSONPath_FilterSegment0.remove(jSONPath0, "RUoHL/|", "RUoHL/|");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_DoubleOpSegement0, jSONPath_DoubleOpSegement0, true);
      JSONPath jSONPath1 = new JSONPath("com.alibaba.fastjson.JSONPath$IntObjInSegement");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath1, "y_-_b.Ta>aJUg<'", "com.alibaba.fastjson.JSONPath$IntObjInSegement");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SerializeConfig.getGlobalInstance();
      SQLException sQLException0 = new SQLException("deny", "Q(PMB2ihq");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLException0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "deny";
      stringArray0[1] = ">";
      stringArray0[2] = "/stackTrace/7";
      stringArray0[3] = "){p*R3!z!jG";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject("/stackTrace/7", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = "Xca$e/stackTrace/3";
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      String string1 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "/cause/stackTrace/0";
      stringArray0[1] = "Xca$e/stackTrace/3";
      stringArray0[2] = ",";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      String string2 = "scanLong";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      JSONPath.WildCardSegment jSONPath_WildCardSegment1 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject("scanLong", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ",";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.getParent();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      String[] stringArray1 = new String[1];
      stringArray1[0] = "/cause/stackTrace/0";
      JSONPath.reserveToObject("scanLong", stringArray1);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/cause/stackTrace/0");
      Double double0 = new Double(1418);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      JSONPath.reserveToArray(sQLTransientConnectionException0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)46;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      JSONPath.eqNotNull(bigInteger0, (byte)122);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-107));
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializeConfig serializeConfig1 = SerializeConfig.globalInstance;
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("vq");
      Long long0 = new Long((-9));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.autoTypeAccept", "vq", 1056);
      Double double0 = new Double(3110.416);
      JSONPath.eqNotNull(byte0, double0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("6M-2", stringArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      long[] longArray0 = new long[5];
      longArray0[0] = (-409L);
      longArray0[1] = (-409L);
      longArray0[2] = (-409L);
      longArray0[3] = (-409L);
      longArray0[4] = (-409L);
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("/cause/stackTrace", longArray0, true);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("6M-2");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("(pv}]Vk", "6M-2", false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_RlikeSegement0, false);
      SQLDataException sQLDataException0 = new SQLDataException();
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("i*J#dD ", (String) null, "", stringArray0, false);
      JSONPath.FilterGroup jSONPath_FilterGroup1 = new JSONPath.FilterGroup(jSONPath_MatchSegement0, jSONPath_NullSegement0, true);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      jSONPath0.keySet((Object) "/cause/stackTrace/3");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("LFnDPHL-\"}teUtS.JwM");
      jSONPath_JSONPathParser0.readString();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONPath.remove((Object) null, "XzgfDW");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("M", true);
      JSONPath jSONPath0 = new JSONPath("unclosed string : ");
      MockThrowable mockThrowable0 = new MockThrowable(sQLSyntaxErrorException0);
      MockThrowable.getDefaultStackTrace();
      SQLDataException sQLDataException0 = new SQLDataException(mockThrowable0);
      jSONPath0.set((Object) null, (Object) jSONPath_JSONPathParser0);
      String[] stringArray0 = new String[0];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("unclosed string : ", (String) null, "M", stringArray0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("I%W:vU,@L03X'2}3gM", 1139.3154066014367, jSONPath_Operator0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "I%W:vU,@L03X'2}3gM";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = new JSONPath("I%W:vU,@L03X'2}3gM");
      Long long0 = new Long((-2625L));
      Long long1 = Long.getLong("I%W:vU,@L03X'2}3gM", long0);
      short short0 = (short)2947;
      Short short1 = new Short((short)2947);
      JSONPath.eqNotNull(long1, long1);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("I%W:vU,@L03X'2}3gM", false);
      String string0 = "com.alibaba.fastjson.serializer.AtomicCodec";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.alibaba.fastjson.serializer.AtomicCodec");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache(",e9{*Q@", hashMap0);
      JSONField jSONField0 = mock(JSONField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jSONField0).format();
      FieldInfo fieldInfo0 = null;
      try {
        fieldInfo0 = new FieldInfo("l7l)2<2u0cJ0PN", (Method) null, (Field) null, class0, class0, (-1568), 84, (-1568), jSONField0, jSONField0, ",e9{*Q@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.FieldInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = "stackTrce";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "stackTrce";
      stringArray0[1] = "ui!OFpA`!eSX3A";
      stringArray0[2] = "stackTrce";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = new JSONPath("stackTrce");
      Long long0 = new Long(5614464919154503228L);
      String string1 = "T1Q[]-=";
      Long long1 = Long.getLong("T1Q[]-=", long0);
      short short0 = (short)59;
      Short short1 = new Short((short)59);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(long1, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "stackTrce";
      stringArray0[1] = "ui!OFpA`!eSX3A";
      stringArray0[2] = "stackTrce";
      JSONPath jSONPath0 = new JSONPath("stackTrce");
      Long long0 = new Long(5614464919154503228L);
      Long long1 = Long.getLong("T1Q[]-=", long0);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(long1, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONPath.compile("com.alibaba.fastjson.serializer.CharArrayCodec");
      Short short0 = new Short((short)15);
      JSONPath.eqNotNull(short0, short0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath.compile("GU' ");
      Integer integer0 = new Integer(7);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/1");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(7);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONPath.compile("com.alibaba.fastjson.serializer.CharArrayCodec");
      Long long0 = new Long((-1446L));
      Long long1 = new Long(270L);
      Long long2 = Long.getLong("GU' ", long1);
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONPath.eqNotNull(long2, long0);
      // Undeclared exception!
      try { 
        JSONPath.extract("GU' ", "GU' ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : GU' 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "vRPSh9gOe}#[K9&";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("vRPSh9gOe}#[K9&");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Xca$e/stackTrace/3";
      JSONPath jSONPath0 = new JSONPath("nt");
      // Undeclared exception!
      try { 
        JSONPath.compare(jSONPath0, jSONPath0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("RUDWv#^}AZoN`o");
      SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeSupport");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2002, 2002, 2002);
      Double double0 = new Double(2002);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JSONPath.isInt(class0);
      JSONPath.eqNotNull(double0, double0);
      int[] intArray0 = new int[7];
      intArray0[0] = 2002;
      intArray0[1] = 2002;
      intArray0[2] = 2002;
      intArray0[3] = 2002;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("f", "RUDWv#^}AZoN`o", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("xT-8[v.w$c@MsO&", "/stackTrace/5", 2002, (Map<String, ClientInfoStatus>) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3220, 106, 103, 2002, 97);
      JSONPath.compare(mockGregorianCalendar0, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$MatchSegement");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("com.alibaba.fastjson.JSONPath$MatchSegement", 1920.780286092, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("n/k8^)9N}'G#joLK\"");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("lsqX>TsROG0S ", "a\u0005RW\"swo2.PfRP");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.alibaba.fastjson.JSONPath$MatchSegement", sQLNonTransientException0);
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, sQLIntegrityConstraintViolationException0, jSONPath_JSONPathParser0, jSONPath_Operator0);
      assertFalse(boolean0);
      
      JSONPath.Operator.values();
      int[] intArray0 = new int[7];
      intArray0[0] = 46;
      intArray0[1] = 0;
      intArray0[2] = (-3226);
      intArray0[3] = 44;
      intArray0[4] = 1024;
      intArray0[5] = 863;
      intArray0[6] = 15;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("n/k8^)9N}'G#joLK\"", "/cause/stackTrace/7", intArray0, sQLIntegrityConstraintViolationException0);
      jSONPath0.setPropertyValue("n/k8^)9N}'G#joLK\"", "XgeN;vm", 3256258368248066264L, batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath.compile("n/k8^)9N}'G#joLK\"");
      JSONPath.read((String) null, "O0k3lJS$5,EP_e ");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("lsqX>TsROG0S ", "a\u0005RW\"swo2.PfRP");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.alibaba.fastjson.JSONPath$MatchSegement", sQLNonTransientException0);
      Byte byte0 = new Byte((byte)77);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "com.alibaba.fastjson.JSONPath$MinSegment";
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment");
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      jSONPath0.getJavaBeanSerializer(class0);
      Integer integer0 = new Integer(3);
      JSONPath jSONPath1 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.alibaba.fastjson.JSONPath$MinSegment");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-9), 1, 1);
      JSONPath jSONPath2 = new JSONPath("fastjson.parser.safeMode");
      Short short0 = new Short((short)154);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath1, serializeConfig0, parserConfig0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      jSONPath0.contains((Object) "*");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("*", "*");
      SQLException sQLException0 = new SQLException("max", "*", sQLRecoverableException0);
      sQLException0.printStackTrace();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLRecoverableException0);
      SerializeConfig serializeConfig0 = new SerializeConfig(8, false);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      JSONPath jSONPath1 = new JSONPath("*", serializeConfig0, parserConfig0);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("*", 3520L, 16L, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "max", 8, sQLException0);
      jSONPath1.containsValue((Object) jSONPath_FilterSegment0, (Object) sQLTransientConnectionException0);
      Short short0 = new Short((short)6);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      jSONPath0.keySet((Object) sQLNonTransientConnectionException0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$MinSegment";
      stringArray0[1] = "com.alibaba.fastjson.JSONPath$MinSegment";
      stringArray0[2] = "com.alibaba.fastjson.JSONPath$MinSegment";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("scanLong", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.reserveToObject(jSONPath_WildCardSegment0, stringArray0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$MinSegment");
      Double double0 = new Double(1067.2086478919584);
      String[] stringArray1 = new String[7];
      stringArray1[1] = "scanLong";
      stringArray1[2] = "A~mbwC$%n>J=Q!^jZtH";
      stringArray1[4] = "\\-";
      ParserConfig parserConfig0 = new ParserConfig();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      jSONPath0.contains((Object) javaBeanDeserializer0);
      JSONPath.compile(")Z**J^`m2qQDS");
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      String string0 = "{\"fruit\":\"Apple\",\"org.apache.ibatis.javassist.util.proxy.Prox}Object\":\"Large\",\"color\":-99,\"value\":false,\"org\":false,\"number\":{M}";
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"org.apache.ibatis.javassist.util.proxy.Prox}Object\":\"Large\",\"color\":-99,\"value\":false,\"org\":false,\"number\":{M}");
      MockUUID.fromString("t");
      String string1 = "/cause/cause/stackTrace/9";
      // Undeclared exception!
      try { 
        JSONPath.extract("^Ein,Z", "/cause/cause/stackTrace/9");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("y_-_b.Ta>aJUg<'", 2620.9708473263, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      JSONPath jSONPath0 = new JSONPath("RUoHL/|");
      jSONPath_FilterSegment0.remove(jSONPath0, "RUoHL/|", "RUoHL/|");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_DoubleOpSegement0, jSONPath_DoubleOpSegement0, true);
      int[] intArray0 = new int[2];
      intArray0[0] = 110;
      intArray0[1] = 110;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/cause/stackTrace/2");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLTransactionRollbackException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("size", "RUoHL/|", 110, batchUpdateException0);
      SQLWarning sQLWarning0 = new SQLWarning("/cause/stackTrace/2", "y_-_b.Ta>aJUg<'", 110, sQLRecoverableException0);
      SQLWarning sQLWarning1 = new SQLWarning();
      jSONPath_FilterGroup0.apply(jSONPath0, (Object) null, sQLWarning0, sQLWarning1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("parse number key error");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "parse number key error";
      stringArray0[1] = "parse number key error";
      stringArray0[2] = "parse number key error";
      stringArray0[3] = "parse number key error";
      stringArray0[4] = "parse number key error";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("parse number key error", stringArray0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringInSegement0, jSONPath_StringInSegement0, true);
      DataTruncation dataTruncation0 = new DataTruncation((-8), true, true, (-8), (-8));
      dataTruncation0.getNextWarning();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransactionRollbackException0);
      jSONPath_FilterGroup0.apply(jSONPath0, sQLTransactionRollbackException0, sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"org.apache.ibatis.javassist.util.proxy.Prox}Object\":\"Large\",\"color\":-99,\"value\":false,\"org\":false,\"number\":{M}");
      String string0 = "t";
      MockUUID.fromString("t");
      Object object0 = new Object();
      String string1 = "rJoa4FBP";
      long[] longArray0 = new long[7];
      longArray0[0] = (-6586085717218287427L);
      longArray0[1] = 186L;
      longArray0[2] = 186L;
      longArray0[3] = 1408L;
      longArray0[4] = (-6586085717218287427L);
      longArray0[5] = 7653587661291503033L;
      longArray0[6] = 5531884185925739200L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("rJoa4FBP", longArray0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntInSegement0, jSONPath_IntInSegement0, true);
      SQLDataException sQLDataException0 = new SQLDataException();
      jSONPath_FilterGroup0.apply(jSONPath0, "t", jSONPath0, sQLDataException0);
      jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_IntInSegement0, object0, "t");
      char char0 = ',';
      Object object1 = null;
      Class<Integer> class0 = Integer.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class0, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("6f'0PJ");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("6f'0PJ", "6f'0PJ", 5754);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLFeatureNotSupportedException0);
      boolean boolean0 = true;
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup((JSONPath.Filter) null, (JSONPath.Filter) null, true);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_MinSegment0, jSONPath_WildCardSegment0, jSONPath_WildCardSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$FilterGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("I%W:vU,@L03X'2}3gM", 1139.3154066014367, jSONPath_Operator0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = (-9);
      SQLException sQLException0 = new SQLException("I%W:vU,@L03X'2}3gM");
      DataTruncation dataTruncation0 = new DataTruncation((-9), true, true, (-9), 95, sQLException0);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("I%W:vU,@L03X'2}3gM", (SerializeConfig) null, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath jSONPath1 = new JSONPath("48?rTs", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue(jSONPath_SizeSegment0, "I%W:vU,@L03X'2}3gM", 4647432019745535567L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("6M-2", stringArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      long[] longArray0 = new long[4];
      longArray0[0] = 379L;
      longArray0[2] = 769L;
      longArray0[3] = 769L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("/stackTrace/0", longArray0, false);
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      jSONPath_IntInSegement0.apply(jSONPath0, jSONPath_MultiPropertySegment0, jSONPath_Operator0, jSONPath0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("F<*xc<f+R) |F*$2k");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONPath.compile("com.alibaba.fastjson.JSONPath$MinSegment");
      String[] stringArray0 = new String[13];
      stringArray0[1] = "com.alibaba.fastjson.JSONPath$MinSegment";
      stringArray0[2] = "com.alibaba.fastjson.JSONPath$MinSegment";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("com.alibaba.fastjson.JSONPath$MinSegment", stringArray0, false);
      JSONPath jSONPath0 = new JSONPath("RUDWv#^}AZoN`o");
      SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      ParserConfig parserConfig1 = new ParserConfig(true);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      DataTruncation dataTruncation0 = new DataTruncation(41, false, false, (-2985), 41);
      jSONPath_StringInSegement0.apply(jSONPath0, dataTruncation0, "RUDWv#^}AZoN`o", "RUDWv#^}AZoN`o");
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("com.alibaba.fastjson.util.IdentityHashMap$Ent=y", (-851L), (-851L), true);
      JSONPath jSONPath0 = new JSONPath("Pe");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, "g2wP{.q9d`z8", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/6", serializeConfig0, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      MockCalendar.getInstance();
      JSONPath.WildCardSegment jSONPath_WildCardSegment1 = JSONPath.WildCardSegment.instance_deep;
      jSONPath_WildCardSegment1.eval(jSONPath0, consumer0, parserConfig0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      jSONPath0.deepGetPropertyValues(parserConfig0, arrayList0);
      jSONPath0.isRef();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("com.alibaba.fastjson.util.IdentityHashMap$Entry", "com.alibaba.fastjson.util.IdentityHashMap$Entry", true);
      JSONPath jSONPath0 = new JSONPath("<V8x,Kyf");
      Double double0 = new Double(1054.0);
      jSONPath_RlikeSegement0.apply(jSONPath0, javaBeanSerializer0, class0, double0);
      // Undeclared exception!
      try { 
        JSONPath.extract(" >Uw[e2Eu+", "<V8x,Kyf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. <V8x,Kyf
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Xca$e/stackTrace/3");
      JSONPath jSONPath1 = JSONPath.compile("Xca$e/stackTrace/3");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("Xca$e/stackTrace/3", jSONPath0, false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Xca$e/stackTrace/3";
      stringArray0[1] = "Xca$e/stackTrace/3";
      stringArray0[2] = "Xca$e/stackTrace/3";
      stringArray0[3] = "Xca$e/stackTrace/3";
      stringArray0[4] = "Xca$e/stackTrace/3";
      stringArray0[5] = "com.alibaba.fastjson.JSONPath$MultiIndexSegment";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      int[] intArray0 = new int[2];
      SQLWarning sQLWarning0 = new SQLWarning("between", "Xca$e/stackTrace/3");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jSONPath_ValueSegment0.apply(jSONPath1, sQLWarning0, "com.alibaba.fastjson.JSONPath$MultiIndexSegment", mockGregorianCalendar0);
      intArray0[0] = 560;
      intArray0[1] = 560;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("/cause/stackTrace/3", "", 560, intArray0, sQLNonTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("=y~vwPwx{D |>G ", batchUpdateException0);
      batchUpdateException0.printStackTrace();
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("Tu1hs|K", "Tu1hs|K", true);
      Class<DataTruncation> class0 = DataTruncation.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      jSONPath_RlikeSegement0.apply(jSONPath0, javaBeanSerializer0, "between", map0);
      SQLException sQLException0 = new SQLException("com.alibaba.fastjson.JSONPath$MatchSegement", sQLNonTransientConnectionException0);
      jSONPath_ValueSegment0.apply(jSONPath1, jSONPath_MultiPropertySegment0, sQLTransientConnectionException0, sQLException0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/cause/stackTrace/3");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. /cause/stackTrace/3
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("I%W:vU,|L03X'2}3gM", 1117.51343873856, jSONPath_Operator0);
      Byte byte0 = new Byte((byte) (-107));
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializeConfig serializeConfig1 = SerializeConfig.globalInstance;
      ClassLoader.getSystemClassLoader();
      ParserConfig.getGlobalInstance();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1040, (-9), 1040);
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.GT;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("I%W:vU,|L03X'2}3gM", jSONPath_RangeSegment0, jSONPath_Operator1);
      JSONPath jSONPath0 = new JSONPath("vq");
      Long long0 = new Long((-9));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Ansupported", "'o,7[zdV\"pq;\"T", (-4473));
      Float float0 = new Float((double) 1);
      jSONPath_RefOpSegement0.apply(jSONPath0, sQLTransientConnectionException0, float0, jSONPath0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\\-", parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "com.alibaba.fastjson.JSONPath$MinSegment";
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.alibaba.fastjson.JSONPath$MinSegment");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$MinSegment");
      String string1 = "/stackTrace/0";
      int[] intArray0 = new int[5];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = Integer.MAX_VALUE;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("/stackTrace/0", "scanLong", Integer.MAX_VALUE, intArray0);
      String string2 = null;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashMap0, batchUpdateException0);
      SQLWarning sQLWarning0 = new SQLWarning("com.alibaba.fastjson.JSONPath$MinSegment", "com.alibaba.fastjson.JSONPath$MinSegment", 1507, batchUpdateException0);
      sQLWarning0.getLocalizedMessage();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment(":#Ih1<,", false);
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("keySet", (Long[]) null, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntObjInSegement0, jSONPath_IntObjInSegement0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, (Object) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$MinSegment");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. com.alibaba.fastjson.JSONPath$MinSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("list is null.");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      JSONPath jSONPath0 = new JSONPath("?G,\"BT|^$");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int[] intArray0 = new int[1];
      intArray0[0] = 2712;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("val", "7D{eq ZzohMDH>HQ:>8", 2712, intArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLWarning sQLWarning0 = new SQLWarning("7D{eq ZzohMDH>HQ:>8", "DisableSpecialKeyDetect", (-1088588808), sQLClientInfoException0);
      sQLWarning0.getLocalizedMessage();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("java.time.ZoneOffset", false);
      HashMap<String, Field> hashMap1 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("?G,\"BT|^$", hashMap1);
      jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, (Object) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("o]X:");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("gy");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("gy");
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("gy", parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment");
      Integer integer0 = new Integer(0);
      JSONPath jSONPath1 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/cause/cause/stackTrace/10");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-9), 1, 1);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("com.alibaba.fastjson.JSONPath$MinSegment", jSONPath_RangeSegment0, jSONPath_Operator0);
      JSONPath jSONPath2 = new JSONPath("fastjson.parser.autoTypeSupport");
      Long long0 = new Long(0);
      jSONPath_RefOpSegement0.apply(jSONPath2, jSONPath_RangeSegment0, (Object) null, jSONPath0);
      ParserConfig parserConfig1 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("GT", parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath2.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$MinSegment");
      JSONPath.paths((Object) jSONPath0);
      String[] stringArray0 = new String[13];
      stringArray0[1] = "com.alibaba.fastjson.JSONPath$MinSegment";
      stringArray0[2] = "com.alibaba.fastjson.JSONPath$MinSegment";
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLSyntaxErrorException0);
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = null;
      try {
        jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("RUDWv#^}AZoN`o");
      JSONPath.paths((Object) jSONPath0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("RUDWv#^}AZoN`o");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("fastjson.parser.autoTypeAccept");
      ParserConfig parserConfig1 = new ParserConfig();
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, serializeConfig0, jSONPath0, parserConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeAccept");
      jSONPath_JSONPathParser0.isEOF();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.safeMode");
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("RUDWv#^}AZoN`o", (String) null, "fastjson.parser.safeMode", (String[]) null, false);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, parserConfig1, jSONPath_MatchSegement0);
      boolean boolean1 = jSONPath_MatchSegement0.apply(jSONPath0, jSONPath_SizeSegment0, (Object) null, object0);
      assertTrue(boolean1 == boolean0);
      
      SQLWarning sQLWarning0 = new SQLWarning("fastjson.deserializer.fileRelativePathSupport", "B9$H)^5=%ZZ<W");
      Object object1 = JSONPath.eval((Object) jSONPath_JSONPathParser0, "fastjson.parser.autoTypeAccept");
      assertNull(object1);
      
      boolean boolean2 = jSONPath0.remove((Object) null);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("{\"NOT_RLIKE\":[],\"y\":true,\"z\":true,\"com.alibaba.fastjson.serializer.BeanContext\":[],\"LocalVariableTypeTable\":{\"x\":{}}}", sQLNonTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(1418, false, false, 7, 23, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.setNextException(sQLNonTransientException0);
      dataTruncation0.getDataSize();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Map<String, Object> map0 = JSONPath.paths((Object) dataTruncation0, serializeConfig0);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 23;
      longArray0[1] = 1099511628211L;
      longArray0[2] = (long) 23;
      SQLDataException sQLDataException0 = new SQLDataException("n09J>`C", ">V.9b@)o9GGi}ahN", 103, sQLIntegrityConstraintViolationException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("{\"NOT_RLIKE\":[],\"y\":true,\"z\":true,\"com.alibaba.fastjson.serializer.BeanContext\":[],\"LocalVariableTypeTable\":{\"x\":{}}}", "Ljava/lang/Class;", dataTruncation0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath(",D", serializeConfig0, parserConfig0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) ">V.9b@)o9GGi}ahN";
      objectArray0[1] = (Object) "{\"NOT_RLIKE\":[],\"y\":true,\"z\":true,\"com.alibaba.fastjson.serializer.BeanContext\":[],\"LocalVariableTypeTable\":{\"x\":{}}}";
      objectArray0[2] = (Object) ",D";
      objectArray0[3] = (Object) map0;
      objectArray0[4] = (Object) parserConfig0;
      jSONPath0.arrayAdd((Object) null, objectArray0);
      assertEquals(",D", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONPath.extract("{\"x\":\"hello\",\"illeal jsonpath syntax. \":7,\"z\":true,\"b\":\"a string\",\"unixtime\":null}", "b");
      JSONPath jSONPath0 = new JSONPath("b");
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.parser.safeMode", (-1580386065683472715L), 0, false);
      ParserConfig parserConfig1 = ParserConfig.global;
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      ObjectDeserializer objectDeserializer0 = parserConfig1.getDeserializer((Class<?>) class0, (Type) class0);
      parserConfig0.getDeserializer((Type) class0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) null);
      SQLDataException sQLDataException0 = new SQLDataException("b?^('ZY;xVRY", "FL/h.*7FJY", 3, sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("};p<)87G({@qvml", "fastjson.parser.autoTypeSupport", sQLDataException0);
      jSONPath0.arrayAdd((Object) objectDeserializer0, (Object[]) null);
      assertEquals(12, objectDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = 23;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("{\"NOT_RLIKE\":[],\"y\":true,\"z\":true,\"com.alibaba.fastjson.serializer.BeanContext\":[],\"LocalVariableTypeTable\":{\"x\":{}}}", sQLNonTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(1418, false, false, 7, 23, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.setNextException(sQLNonTransientException0);
      dataTruncation0.getDataSize();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(2443);
      JSONPath jSONPath0 = new JSONPath("NE");
      ParserConfig parserConfig0 = new ParserConfig(true);
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.SafeMode;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowSingleQuotes;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.InitStringFieldAsEmpty;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.InternFieldNames;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.DisableASM;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.SortFeidFastMatch;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.SupportArrayToBean;
      JSONPath.eq("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[99],\"b\":{}}", feature1);
      featureArray0[7] = feature6;
      JSONPath.extract("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[99],\"b\":{}}", "NE", parserConfig0, (-1739), featureArray0);
      Integer integer0 = new Integer(58);
      jSONPath0.set((Object) "NE", (Object) integer0);
      String[] stringArray0 = new String[1];
      String string0 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":-99}}";
      stringArray0[0] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":-99}}";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("NE", stringArray0, false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("&,=_1I'Jflu!");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. &,=_1I'Jflu!
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com.alibaba.fastjson.JSONPath$MinSegment", false);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLSyntaxErrorException0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("step must greater than zero : ");
      BigInteger bigInteger0 = BigInteger.TEN;
      SerializeConfig serializeConfig0 = new SerializeConfig(377);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment");
      SQLException sQLException0 = new SQLException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("1.GI}2_d}8:hk>", sQLException0);
      jSONPath_PropertySegment0.eval(jSONPath0, sQLTransientConnectionException0, (Object) null);
      JSONPath jSONPath1 = new JSONPath("))Oo0]wTcob1#n/2v", serializeConfig0, (ParserConfig) null);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath1, (Object) null, 85, "step must greater than zero : ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/5S{?zn91");
      Integer integer0 = new Integer((-658));
      jSONPath0.set((Object) integer0, (Object) "/5S{?zn91", true);
      JSONPath.compile("/5S{?zn91");
      JSONPath.eqNotNull(integer0, integer0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.serializer.CharArrayCodec");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment");
      Integer integer0 = new Integer(0);
      JSONPath.compile("illegal enum. ");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath jSONPath1 = new JSONPath(" w/)%");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath2 = new JSONPath("JZB/i", serializeConfig0, parserConfig0);
      ParserConfig parserConfig1 = new ParserConfig();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<UUID> class0 = UUID.class;
      Class<JSONPath> class1 = JSONPath.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1, hashMap0);
      JavaBeanSerializer javaBeanSerializer1 = new JavaBeanSerializer(class0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Class<PropertyNamingStrategy> class2 = PropertyNamingStrategy.class;
      JavaBeanSerializer javaBeanSerializer2 = new JavaBeanSerializer(class2, hashMap0);
      Class<JavaBeanDeserializer> class3 = JavaBeanDeserializer.class;
      JavaBeanSerializer javaBeanSerializer3 = jSONPath0.getJavaBeanSerializer(class3);
      Class<Object> class4 = Object.class;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "fastjson.parser.deny";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class4, stringArray0);
      javaBeanSerializer3.addFilter(simplePropertyPreFilter0);
      javaBeanSerializer3.getLabelFilters();
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("/cause/stackTrace/3", (long[]) null, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntInSegement0);
      // Undeclared exception!
      try { 
        jSONPath2.getPropertyValue(class0, "fastjson.parser.autoTypeAccept", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = "null";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "null";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray("null", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath jSONPath0 = new JSONPath("{\"size\":{},\"color\":true,\"()V\":{},\"(J)V\":\"a string\",\"number\":\"1\",\"/cause/stackTrace/3\":-99}");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      Short short0 = new Short((short)102);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((short)102, 3968, 92);
      JSONPath.reserveToObject(short0, (String[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fastjson.parser.autoTypeAccept", sQLTransientConnectionException0);
      JSONPath.reserveToArray(sQLSyntaxErrorException0, (String[]) null);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(101);
      jSONPath_JSONPathParser0.isEOF();
      Set<?> set0 = jSONPath0.evalKeySet(sQLNonTransientConnectionException0);
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Xca$e/stackTrace/3";
      short short0 = (short)102;
      Short short1 = new Short((short)102);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath.paths((Object) "Xca$e/stackTrace/3", serializeConfig0);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("Xca$e/stackTrace/3", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "Xca$e/stackTrace/3", (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path Xca$e/stackTrace/3
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/stackTrace/8");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/stackTrace/8";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath1 = JSONPath.compile("/stackTrace/8");
      jSONPath1.removePropertyValue("com.alibaba.fastjson.JSONPath$MinSegment", "max", false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("scanLong", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("T!k@", "/stackTrace/8", 181, (Throwable) null);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("scanLong");
      sQLRecoverableException1.spliterator();
      SQLDataException sQLDataException0 = new SQLDataException("/stackTrace/8", ">@lC5quQ&}mlB%E", 181, sQLTransientConnectionException0);
      sQLRecoverableException1.getSuppressed();
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment1 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("p-{i;BC`9x#0t");
      BigInteger bigInteger0 = BigInteger.TEN;
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, (Map<String, String>) null);
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(javaBeanSerializer0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "unsupported array put operation. ";
      stringArray0[1] = "stackTrace";
      stringArray0[2] = "stackTrace";
      stringArray0[3] = "unsupported array put operation. ";
      stringArray0[4] = "unsupported array put operation. ";
      stringArray0[5] = "unsupported array put operation. ";
      stringArray0[6] = "ui!OFpA`!eSX3A";
      stringArray0[7] = "ui!OFpA`!eSX3A";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = new JSONPath("unsupported array put operation. ");
      Short short0 = new Short((short)595);
      jSONPath_MultiPropertySegment0.eval(jSONPath0, "ui!OFpA`!eSX3A", short0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(jSONPath_Operator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment");
      SQLException sQLException0 = new SQLException("K1;c|nd)\"T", ":jSXb^(}", 32);
      jSONPath0.containsValue((Object) sQLException0, (Object) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.alibaba.fastjson.JSONPath$MinSegment");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$MinSegment");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath1 = new JSONPath("/stackTrace/11", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      // Undeclared exception!
      try { 
        jSONPath1.getPropertyValues(jSONPath_Operator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Xca$e/stackTrace/3";
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) "", "com.alibaba.fastjson.JSONPath$RegMatchSegement", (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("{\"NOT_RLIKE\":[],\"y\":{\"NOT_RLIKE\":null},\"z\":true,\"a\":[],\"b\":true,\"/stackTrace/10\":99}", sQLNonTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(1418, false, false, 7, 23, sQLIntegrityConstraintViolationException0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath.paths((Object) dataTruncation0, serializeConfig0);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 23;
      longArray0[1] = 23L;
      longArray0[2] = (long) 23;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("/cause/stackTrace", longArray0, false);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/3");
      JSONPath.paths((Object) "/cause/stackTrace/3");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientException0);
      jSONPath_IntInSegement0.apply(jSONPath0, sQLInvalidAuthorizationSpecException0, jSONPath0, "{\"NOT_RLIKE\":[],\"y\":{\"NOT_RLIKE\":null},\"z\":true,\"a\":[],\"b\":true,\"/stackTrace/10\":99}");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/cause/stackTrace/3");
      String[] stringArray0 = new String[0];
      JSONPath.reserveToArray(jSONPath_Operator0, stringArray0);
      jSONPath0.removePropertyValue(sQLInvalidAuthorizationSpecException0, "1.2.68", true);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("O0:jW@C", true);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLNonTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException("@type", "1.2.68", 11, sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.eval(jSONPath0, sQLDataException0, sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path /cause/stackTrace/3, segement O0:jW@C
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONPath.compile("hashCode");
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.safeMode");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(39, 39, 39);
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeSupport");
      Short short0 = new Short((short)154);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      JavaBeanSerializer javaBeanSerializer1 = new JavaBeanSerializer(class1, hashMap0);
      javaBeanSerializer1.getLabelFilters();
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.autoTypeSupport", "fastjson.parser.deny", (String) null, (String[]) null, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.safeMode", false);
      JSONPath.remove((Object) jSONPath_PropertySegment0, "com.alibaba.fastjson.JSONPath$ArrayAccessSegment");
      JSONPath jSONPath2 = null;
      try {
        jSONPath2 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "stackTrace";
      stringArray0[1] = "ui!OFpA`!eSX3A";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = new JSONPath("Vx@i");
      jSONPath_MultiPropertySegment0.eval(jSONPath0, "stackTrace", "stackTrace");
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("", "66`v3rz|2lexD'j", (String) null, stringArray0, true);
      Float float0 = new Float(2218.04944295);
      jSONPath_MatchSegement0.apply(jSONPath0, (Object) null, "66`v3rz|2lexD'j", float0);
      SQLWarning sQLWarning0 = new SQLWarning("O?q!", (String) null);
      JSONPath.eval((Object) "B9$H)^5=%ZZ<W", "%");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "O?q!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : Vx@i
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("not");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("4&q3IjqS2qB/", ",+<a~bb", jSONPath_Operator0);
      long[] longArray0 = new long[5];
      longArray0[0] = (-3290L);
      longArray0[1] = (-1014497654951707614L);
      longArray0[2] = 675L;
      longArray0[3] = 4647432019745535567L;
      longArray0[4] = 5614464919154503228L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("4&q3IjqS2qB/", longArray0, false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[iG`-`R'*+QiHAyg");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntInSegement0);
      Pattern.compile("4&q3IjqS2qB/");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_Filter0);
      Double double0 = new Double((-1.0));
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[iG`-`R'*+QiHAyg";
      stringArray0[1] = "[iG`-`R'*+QiHAyg";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(sQLClientInfoException0, stringArray0);
      assertEquals(2, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("6M-2", stringArray0, false);
      JSONPath.compile("com.alibaba.fastjson.JSONPath");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath jSONPath0 = new JSONPath(" w/)%");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("JZB/i", serializeConfig0, parserConfig0);
      ParserConfig parserConfig1 = new ParserConfig();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<UUID> class0 = UUID.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      JavaBeanSerializer javaBeanSerializer1 = new JavaBeanSerializer(class0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      JavaBeanSerializer javaBeanSerializer2 = new JavaBeanSerializer(class1, hashMap0);
      javaBeanSerializer2.getLabelFilters();
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      JSONPath.remove((Object) "JZB/i", "fastjson.parser.deny.internal");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" w/)%");
      jSONPath_JSONPathParser0.filterRest(jSONPath_StringInSegement0);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = ";Ljava/lang/Object;C)C";
      JSONPath jSONPath0 = JSONPath.compile(";Ljava/lang/Object;C)C");
      Locale locale0 = new Locale(";Ljava/lang/Object;C)C", ";Ljava/lang/Object;C)C", ";Ljava/lang/Object;C)C");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      locale0.stripExtensions();
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(mockGregorianCalendar0, "ons$EmptyList@0000000160", true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("I%W:vU,@L03X'2}3gM", 1139.3154066014367, jSONPath_Operator0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 95;
      SQLException sQLException0 = new SQLException("MP,!&P^");
      DataTruncation dataTruncation0 = new DataTruncation((-9), false, true, (-9), 95, sQLException0);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("MP,!&P^", (SerializeConfig) null, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      String[] stringArray0 = new String[0];
      JSONPath.reserveToObject("/stackTrace/6", stringArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "com.alibaba.fastjson.JSON";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSON");
      JSONPath.reserveToArray((Object) null, stringArray0);
      JSONPath.remove((Object) "fastjson.parser.deny.internal", "/stackTrace/6");
      jSONPath_JSONPathParser0.isEOF();
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = null;
      try {
        jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MultiPropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("not");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("4&q3IjqS2qB/", ",+<a~bb", jSONPath_Operator0);
      long[] longArray0 = new long[5];
      longArray0[0] = (-3290L);
      longArray0[1] = (-1014497654951707614L);
      longArray0[2] = 675L;
      longArray0[3] = 4647432019745535567L;
      longArray0[4] = 5614464919154503228L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("4&q3IjqS2qB/", longArray0, false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[iG`-`R'*+QiHAyg");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntInSegement0);
      Pattern.compile("4&q3IjqS2qB/");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_Filter0);
      JSONPath jSONPath1 = new JSONPath("ex#Q9-Hn5bJ 5#yc\"`");
      Vector<Object> vector0 = new Vector<Object>();
      jSONPath1.deepGetPropertyValues(jSONPath_StringOpSegement0, vector0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      hashMap0.put("/cause/cause/stackTrace/11", "[iG`-`R'*+QiHAyg");
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      javaBeanSerializer0.getBeforeFilters();
      JavaBeanSerializer javaBeanSerializer1 = new JavaBeanSerializer(class0);
      javaBeanSerializer1.getLabelFilters();
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(3951);
      boolean boolean1 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = "hashCode";
      JSONPath.compile("hashCode");
      JSONPath.compile("hashCode");
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("not");
      long[] longArray0 = new long[9];
      longArray0[2] = 0L;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      longArray0[3] = 356L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("7S?@[", longArray0, false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("T!k@");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but 'k'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = "Xca$e/stackTrace/3";
      stringArray0[0] = "Xca$e/stackTrace/3";
      JSONPath jSONPath0 = new JSONPath("not");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Xca$e/stackTrace/3", "Xca$e/stackTrace/3", 109);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLFeatureNotSupportedException0);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 109;
      longArray0[1] = (long) 109;
      longArray0[2] = 494L;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      longArray0[3] = 379L;
      longArray0[4] = (long) 109;
      longArray0[5] = 769L;
      longArray0[6] = (long) 109;
      longArray0[7] = (long) 109;
      longArray0[8] = (long) 109;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("7S?@[", longArray0, false);
      jSONPath_IntInSegement0.apply(jSONPath0, "Xca$e/stackTrace/3", "Xca$e/stackTrace/3", "not");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("T!k@");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but 'k'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("hashCode");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("hashCode", (SerializeConfig) null, parserConfig0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{\"x\":\"JSONPath$FilterGroup\",\"y\":[99],\"z\":true,\"/cause/stackTrace/8\":{},\"b\":{\"x\":\"a string\"},\", but '\":99,\"/cause/cause/stackTrace/0\":true}");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("fastjson.parser.autoTypeAccept", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.safeMode", sQLTransientConnectionException0);
      JSONPath.arrayAdd((Object) sQLNonTransientConnectionException0, "fastjson.parser.deny.internal", (Object[]) null);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      JSONPath jSONPath2 = new JSONPath("/cause/stackTrace/0", (SerializeConfig) null, parserConfig1);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONPath.SizeSegment jSONPath_SizeSegment1 = (JSONPath.SizeSegment)JSONPath.reserveToObject(jSONPath_SizeSegment0, (String[]) null);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("");
      JSONPath jSONPath3 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("GT", "CL");
      jSONPath_NullSegement0.apply(jSONPath0, jSONPath3, "{\"x\":\"JSONPath$FilterGroup\",\"y\":[99],\"z\":true,\"/cause/stackTrace/8\":{},\"b\":{\"x\":\"a string\"},\", but '\":99,\"/cause/cause/stackTrace/0\":true}", sQLRecoverableException0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("!in)", jSONPath_SizeSegment1, jSONPath_Operator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("expect '", "fastjson.parser.deny", 5, sQLTransientConnectionException0);
      jSONPath_RefOpSegement0.apply(jSONPath3, serializeConfig0, jSONPath2, sQLInvalidAuthorizationSpecException0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      // Undeclared exception!
      try { 
        jSONPath1.getPropertyValues(jSONPath_FilterSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath jSONPath0 = new JSONPath("{\"size\":false,\"color\":true,\"()V\":null,\"(J)V\":\"a string\",\"number\":\"1\",\"time\":-99}");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      Short short0 = new Short((short)102);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((short)102, 3968, 92);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      Class<?> class1 = javaBeanSerializer0.getType();
      parserConfig0.get(class1);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("7Rtg^:]W");
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("i*", "fastjson.parser.autoTypeAccept", "~=PC2", (String[]) null, false);
      jSONPath_JSONPathParser0.filterRest(jSONPath_MatchSegement0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = null;
      try {
        jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      MockThaiBuddhistDate.now();
      JSONPath.remove((Object) null, "fastjson.parser.deny.internal");
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("and", "&%u6?Q^90ra(:|J41", "mQ", (String[]) null, false);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      String string0 = "M)DF";
      Integer integer0 = new Integer((-658));
      JSONPath jSONPath0 = new JSONPath("M)DF");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_KeySetSegment0, (Object) integer0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : M)DF
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("I%W:vU,|L03X'2}3gM", 1117.51343873856, jSONPath_Operator0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Byte byte0 = new Byte((byte) (-107));
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/1", serializeConfig0, (ParserConfig) null);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-3662), (-9), 9);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath jSONPath1 = new JSONPath("I%W:vU,|L03X'2}3gM");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("gXg", "M: np");
      jSONPath_DoubleOpSegement0.apply(jSONPath0, jSONPath_WildCardSegment0, "/cause/stackTrace/1", sQLSyntaxErrorException0);
      String string0 = "Qr";
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException((String) null, "Qr", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, sQLTransactionRollbackException0, sQLSyntaxErrorException1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = "6M-2";
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("6M-2", stringArray0, false);
      JSONPath.compile("com.alibaba.fastjson.JSONPath");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath jSONPath0 = new JSONPath(" w/)%");
      SerializeConfig.getGlobalInstance();
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("6M-2", (long[]) null, false);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("array", serializeConfig0, parserConfig0);
      ParserConfig parserConfig1 = new ParserConfig();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<UUID> class0 = UUID.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      JavaBeanSerializer javaBeanSerializer1 = new JavaBeanSerializer(class0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer2 = new JavaBeanSerializer(class0, hashMap0);
      javaBeanSerializer0.getLabelFilters();
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntInSegement0);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) class0, "fastjson.parser.autoTypeAccept");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("{\"NOT_RLIKE\":[],\"y\":true,\"z\":true,\"com.alibaba.fastjson.serializer.BeanContext\":[],\"LocalVariableTypeTable\":{\"x\":{}}}", sQLNonTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(1418, false, false, 7, 23, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.setNextException(sQLNonTransientException0);
      dataTruncation0.getDataSize();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath.paths((Object) dataTruncation0, serializeConfig0);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 23;
      longArray0[1] = 1099511628211L;
      longArray0[2] = (long) 23;
      // Undeclared exception!
      try { 
        JSONPath.read("M0q+rjIQ2Ch", "DAmvJA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2M0q+rjIQ2Ch
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("99", sQLNonTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(1418, true, true, 68, 23, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.setNextException(sQLNonTransientException0);
      dataTruncation0.getDataSize();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath.paths((Object) dataTruncation0, serializeConfig0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "99");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "%:=-nd;0rLv?y;5N";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("%:=-nd;0rLv?y;5N", stringArray0, false);
      JSONPath jSONPath0 = new JSONPath("RUDWv#^}AZoN`o");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      ParserConfig parserConfig1 = new ParserConfig(false);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("VNRJ?(aE");
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig1, class0);
      ParserConfig.getGlobalInstance();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      parserConfig0.setDefaultClassLoader(aSMClassLoader0);
      JSONPath jSONPath2 = new JSONPath("VNRJ?(aE", serializeConfig0, parserConfig0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("{\"evalSize error : \":[[],false],\"y\":7,\"z\":true,\"/stackTrace/1\":\"a string\",\"b\":{}}", "fastjson.parser.deny.internal");
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath2, serializeConfig0, jSONPath0, parserConfig1);
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("vXy~xVKL-XYIhsMqu");
      jSONPath_JSONPathParser0.getNextChar();
      int int0 = JSONPath.size((Object) aSMClassLoader0, "fastjson.parser.autoTypeSupport");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONPath.compile("hashCode");
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.safeMode");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(39, 39, 39);
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeSupport");
      Short short0 = new Short((short)154);
      jSONPath_RangeSegment0.eval(jSONPath0, jSONPath1, short0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("hashCode");
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      List<LabelFilter> list0 = new Vector<LabelFilter>();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("#", "{[('", jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringOpSegement0, jSONPath_StringOpSegement0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)154;
      intArray0[1] = 39;
      intArray0[2] = 39;
      intArray0[3] = 39;
      intArray0[4] = 39;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.remove((Object) jSONPath_MultiIndexSegment0, "[{},false>]");
      String string0 = "Yo3R='h:##@?;WlUN";
      String string1 = "C/*q\".\"Q;I6[>'s";
      JSONPath jSONPath2 = new JSONPath(string1);
      jSONPath1.arrayAdd((Object) string0, (Object[]) parserConfig1.DENYS);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("yyyy-MM-dd'T'HH:mm:ss.SSS");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("NhBS7xN%jwi,{q(@nP|");
      Class<Calendar> class0 = Calendar.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues(class0);
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(sQLRecoverableException0, "not", list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path yyyy-MM-dd'T'HH:mm:ss.SSS, segement not
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("2=Du", "stackTrace", "h|vNjqm'+=UM3$Lsc", stringArray0, false);
      JSONPath jSONPath0 = new JSONPath("/'yKh3q#S");
      jSONPath_MatchSegement0.apply(jSONPath0, "h|vNjqm'+=UM3$Lsc", (Object) null, "2=Du");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) "stackTrace");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. /'yKh3q#S
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Random.setNextRandom(199);
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('$');
      assertFalse(boolean0);
      
      Pattern pattern0 = Pattern.compile("not", 199);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("not", pattern0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RegMatchSegement0);
      JSONPath jSONPath0 = new JSONPath("@U%s,^EIN]p");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Double double0 = new Double(0.0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("@U%s,^EIN]p");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.joda.time.format.DateTimeFormatter";
      stringArray0[1] = "alibaba";
      Object object0 = JSONPath.reserveToArray((Object) null, stringArray0);
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(double0, stringArray0);
      assertTrue(jSONArray0.equals((Object)object0));
      assertFalse(jSONArray0.isEmpty());
      
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("org.joda.time.format.DateTimeFormatter", "be.J>", "*", stringArray0, false);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("alibaba", "cCxK|`[!2an:Y/@", 199, hashMap0);
      SQLDataException sQLDataException0 = new SQLDataException("alibaba", "Rnfw39gGB N1R!=/Y", 199, sQLClientInfoException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("*", "alibaba", sQLDataException0);
      SQLWarning sQLWarning0 = new SQLWarning("#&J6l", "*", sQLInvalidAuthorizationSpecException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("CRt{&19g7lv8wGA", "e8\u0001h`\"D ", sQLWarning0);
      boolean boolean1 = jSONPath_MatchSegement0.apply(jSONPath0, jSONPath_RegMatchSegement0, sQLFeatureNotSupportedException0, (Object) null);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "com.alibaba.fastjson.JSONPath$MinSegment";
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$MinSegment";
      stringArray0[1] = "com.alibaba.fastjson.JSONPath$MinSegment";
      stringArray0[2] = "com.alibaba.fastjson.JSONPath$MinSegment";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      String string1 = "scanLong";
      jSONPath0.removePropertyValue(jSONPath_MultiPropertySegment0, "scanLong", true);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("scanLong", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("scanLong", "com.alibaba.fastjson.JSONPath$MinSegment", 181, (Throwable) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.reserveToObject(jSONPath_WildCardSegment0, stringArray0);
      String string2 = "A~mbwC$%n>J=Q!^jZtH";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$MinSegment");
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment1 = null;
      try {
        jSONPath_MultiPropertySegment1 = new JSONPath.MultiPropertySegment((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MultiPropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONPath.compile("hashCode");
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.safeMode");
      Byte byte0 = new Byte((byte) (-85));
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) byte0, ".k(`evPN~P[iw@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : .k(`evPN~P[iw@
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SerializeConfig.getGlobalInstance();
      SQLException sQLException0 = new SQLException(">", ">");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLException0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "){p*R3!z!jG";
      stringArray0[1] = "B_@D%L:\"?k9~}2?\"&16Y";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject("B_@D%L:\"?k9~}2?\"&16Y", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = "93T^flx\\h)HON9(T;";
      JSONPath.compile("93T^flxh)HON9(T;");
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath.compile("93T^flxh)HON9(T;");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.safeMode");
      byte byte0 = (byte) (-85);
      Byte byte1 = new Byte((byte) (-85));
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) byte1, ".k(`evPN~P[iw@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : .k(`evPN~P[iw@
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = "not";
      JSONPath jSONPath0 = new JSONPath("not");
      jSONPath0.isRef();
      String string1 = "4&q3IjqS2qB/";
      String string2 = ",+<a~bb";
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("4&q3IjqS2qB/", ",+<a~bb", jSONPath_Operator0);
      long[] longArray0 = new long[5];
      longArray0[0] = (-3290L);
      longArray0[1] = (-1014497654951707614L);
      longArray0[2] = 675L;
      longArray0[3] = 4647432019745535567L;
      longArray0[4] = 5614464919154503228L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("4&q3IjqS2qB/", longArray0, false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[iG`-`R'*+QiHAyg");
      jSONPath_JSONPathParser0.filterRest(jSONPath_IntInSegement0);
      Pattern pattern0 = Pattern.compile("4&q3IjqS2qB/");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      String[] stringArray0 = new String[0];
      JSONPath.reserveToObject(pattern0, stringArray0);
      String string3 = null;
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = null;
      try {
        jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      String string0 = "2gJ%VFb$dzM59mUmf";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2gJ%VFb$dzM59mUmf");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      JSONPath.arrayAdd((Object) null, "Set", objectArray0);
      int int0 = 3;
      int int1 = (-1441);
      DataTruncation dataTruncation0 = new DataTruncation(3, true, true, 3, (-1441));
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) dataTruncation0, "fastjson.parser.autoTypeAccept", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path fastjson.parser.autoTypeAccept
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Xca$e/stackTrace/3";
      JSONPath jSONPath0 = new JSONPath("not");
      long[] longArray0 = new long[9];
      longArray0[2] = 0L;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      longArray0[3] = 379L;
      longArray0[5] = 379L;
      jSONPath0.arrayAdd((Object) null, (Object[]) stringArray0);
      assertEquals("not", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Integer integer0 = new Integer((-57));
      String string0 = null;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/cause/cause/stackTrace/5");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string1 = "$VALUES";
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("/cause/cause/stackTrace/5", jSONPath_WildCardSegment0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      Long long0 = new Long((-57));
      Integer integer1 = new Integer((-57));
      jSONPath0.removePropertyValue(parserConfig0, " ci_hjKX!", true);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("6M-2", stringArray0, false);
      JSONPath.compile("com.alibaba.fastjson.JSONPath");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath jSONPath0 = new JSONPath(" w/)%");
      SerializeConfig.getGlobalInstance();
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("CRt{&19g7lv8wGAM", (long[]) null, false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" w/)%");
      jSONPath_JSONPathParser0.filterRest(jSONPath_IntInSegement0);
      String string0 = "";
      Pattern.compile("6M-2");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntInSegement0);
      JSONPath jSONPath1 = new JSONPath("()C");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<Long> class0 = Long.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      javaBeanSerializer0.getBeforeFilters();
      javaBeanSerializer0.getLabelFilters();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) propertyNamingStrategy0, "nin");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("I%W:vU,@L03X'2}3gM", 1117.51343873856, jSONPath_Operator0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Byte byte0 = new Byte((byte) (-107));
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/1", serializeConfig0, (ParserConfig) null);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-3662), (-9), 9);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath jSONPath1 = new JSONPath("I%W:vU,@L03X'2}3gM");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      String string0 = "Qr";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "Qr", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, sQLTransactionRollbackException0, sQLSyntaxErrorException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      DataTruncation dataTruncation0 = new DataTruncation(12, true, true, 12, 109);
      dataTruncation0.getDataSize();
      JSONPath.eval((Object) dataTruncation0, "c");
      JSONPath jSONPath0 = new JSONPath("c");
      Collection<Object> collection0 = jSONPath0.getPropertyValues(dataTruncation0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("c");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      JSONPath.arrayAdd((Object) collection0, "c|Qnaw.'*8j", (Object[]) jSONPath_SegmentArray0);
      String string0 = null;
      String string1 = "fastjson.compatibleWithJavaBean";
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = null;
      try {
        jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement(string0, string1, jSONPath_Operator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.alibaba.fastjson.JSONPath$MinSegment");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$MinSegment");
      jSONPath_JSONPathParser0.readSegement();
      Short short0 = new Short((short)154);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(26376, 26349, 26376);
      UUID uUID0 = MockUUID.fromString("9sWKXo");
      jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_JSONPathParser0, uUID0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("/cause/cause/stackTrace/4");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("/cause/cause/stackTrace/4", "9sWKXo", jSONPath_Operator0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser2 = new JSONPath.JSONPathParser("*42\"Y_FF|D-({");
      JSONPath.JSONPathParser jSONPath_JSONPathParser3 = new JSONPath.JSONPathParser("g0Da");
      jSONPath_JSONPathParser3.filterRest(jSONPath_StringOpSegement0);
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.BETWEEN;
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("I%W:vU,@L03X'2}3gM", 1117.51343873856, jSONPath_Operator0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Byte byte0 = new Byte((byte) (-107));
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(91, (-3662), (byte) (-107));
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath jSONPath1 = new JSONPath("I%W:vU,@L03X'2}3gM");
      jSONPath_RangeSegment0.eval(jSONPath1, "com.alibaba.fastjson.JSONPath", serializeConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath");
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("fastjson.parser.autoTypeSupport", (String) null, jSONPath_Operator1);
      jSONPath_JSONPathParser0.filterRest(jSONPath_DoubleOpSegement0);
      JSONPath.Operator jSONPath_Operator2 = JSONPath.Operator.NOT_BETWEEN;
      assertFalse(jSONPath_Operator2.equals((Object)jSONPath_Operator0));
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(3.0);
      bigDecimal0.signum();
      Object object0 = JSONPath.eval((Object) bigDecimal0, "NXR");
      assertNull(object0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      boolean boolean0 = JSONPath.contains((Object) sQLIntegrityConstraintViolationException0, "java.time.LocalDate");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment");
      String[] stringArray0 = new String[3];
      stringArray0[1] = "com.alibaba.fastjson.JSONPath$MinSegment";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.alibaba.fastjson.JSONPath$MinSegment", (Throwable) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "/cause/cause/stackTrace/12", 76, sQLFeatureNotSupportedException0);
      Object object0 = new Object();
      boolean boolean0 = JSONPath.contains(object0, "com.alibaba.fastjson.JSONPath$MinSegment");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$KeySetSegment", serializeConfig0, parserConfig0);
      Class<String> class0 = String.class;
      jSONPath0.getJavaBeanSerializer(class0);
      classLoader0.setClassAssertionStatus("%u4#", true);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) bigDecimal0, (String) null, (Object) bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1000022, true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny.internal");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      JSONPath jSONPath1 = JSONPath.compile("autoTy\"TpeAc ept");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath1, (Object) null, 36, "autoTy\"TpeAc ept");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/Cause/StackTrace/11");
      JSONPath.compile("w`Y3");
      JSONPath jSONPath0 = JSONPath.compile("/Cause/StackTrace/11");
      jSONPath0.keySet((Object) null);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%i yrKP<|L=QDo");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("Or");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. %i yrKP<|L=QDo
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("`V|VLZ");
      Object[] objectArray0 = new Object[0];
      jSONPath0.arrayAdd((Object) "([C)Ljava/util/UUID;", objectArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("([C)Ljava/util/UUID;");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("6M-2", stringArray0, false);
      JSONPath.compile("com.alibaba.fastjson.JSONPath");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath jSONPath0 = new JSONPath(" w/)%");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("JZB/i", serializeConfig0, parserConfig0);
      ParserConfig parserConfig1 = new ParserConfig();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<UUID> class0 = UUID.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      JavaBeanSerializer javaBeanSerializer1 = new JavaBeanSerializer(class0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      JavaBeanSerializer javaBeanSerializer2 = new JavaBeanSerializer(class1, hashMap0);
      javaBeanSerializer2.getLabelFilters();
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      JSONPath.remove((Object) "JZB/i", "fastjson.parser.deny.internal");
      JSONPath jSONPath2 = new JSONPath("Yo3R='h:##@?;WlUN");
      jSONPath2.arrayAdd((Object) parserConfig0, (Object[]) stringArray0);
      assertTrue(parserConfig0.isAsmEnable());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("hashCode");
      ParserConfig.getGlobalInstance();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("fastjson.parser.autoTypeAccept", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath1 = new JSONPath("/cause/stackTrace/0", (SerializeConfig) null, parserConfig0);
      int int0 = (-3662);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-3662), (-3662), (-3662));
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_SizeSegment0, "hashCode");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("hashCode");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("hashCode", (SerializeConfig) null, parserConfig0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{\"x\":\"hello\",\"y\":\"a string\",\"z\":true,\"/cause/stackTrace/8\":[],\"b\":{},\", but '\":99,\"GW< \":true}");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("fastjson.parser.autoTypeAccept", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      JSONPath jSONPath2 = new JSONPath("/cause/stackTrace/0", (SerializeConfig) null, parserConfig1);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-3662), (-3662), (-3662));
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_SizeSegment0, "hashCode");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "]7HOfk";
      stringArray0[1] = "A?-98SC&_z*rSi#r?";
      stringArray0[2] = "og@Fjt";
      stringArray0[3] = "]7HOfk";
      stringArray0[4] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":[],\"value2\":false,\"number\":\"1\"}";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "q*<o~+U\"jE";
      stringArray0[8] = "";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$FilterGroup");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "stackTrace");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLInvalidAuthorizationSpecException0, (Object) "com.alibaba.fastjson.JSONPath$FilterGroup");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RE=<2t6W$;W~MTfO");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<BigInteger> class0 = BigInteger.class;
      serializeConfig0.createJavaBeanSerializer(class0);
      Map<String, Object> map0 = JSONPath.paths((Object) "RE=<2t6W$;W~MTfO", serializeConfig0);
      assertEquals(1, map0.size());
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("FT!T;");
      jSONPath_JSONPathParser0.skipWhitespace();
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("FT!T;", jSONPath_Segment0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("E:Vdj~");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int[] intArray0 = new int[5];
      intArray0[0] = 671;
      intArray0[1] = 10;
      intArray0[2] = 3403;
      intArray0[3] = (-928);
      intArray0[4] = 46;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("#'p@ZG=@YT|]W", intArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, batchUpdateException0);
      SQLDataException sQLDataException0 = new SQLDataException("#'p@ZG=@YT|]W", "E:Vdj~", sQLClientInfoException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLDataException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("FT!T;", "6]2/G$!~K", 1172);
      boolean boolean1 = jSONPath_RefOpSegement0.apply(jSONPath0, sQLSyntaxErrorException0, jSONPath_Operator0, sQLTransactionRollbackException0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("RE=<2t6W$;W~MTfO", "com.alibaba.fastjson.JSONPath$PropertySegment", jSONPath_Operator0);
      DataTruncation dataTruncation0 = new DataTruncation((-928), false, true, 107, 0);
      boolean boolean2 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath0, sQLSyntaxErrorException0, dataTruncation0);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("*", "*", jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONReader");
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NOT_BETWEEN;
      int[] intArray0 = new int[4];
      intArray0[0] = (-1577);
      intArray0[1] = 9;
      intArray0[2] = 9;
      intArray0[3] = 9;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      jSONPath_StringOpSegement0.apply(jSONPath0, (Object) null, jSONPath_Operator1, jSONPath_MultiIndexSegment0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("valueOf");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_StringOpSegement0);
      assertSame(jSONPath_Filter0, jSONPath_StringOpSegement0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Random.setNextRandom(199);
      JSONPath.JSONPathParser.isDigitFirst('$');
      Pattern pattern0 = Pattern.compile("not", 199);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("not", pattern0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RegMatchSegement0);
      JSONPath jSONPath0 = new JSONPath("@U%s,^EIN]p");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "not";
      stringArray0[1] = "Rnfw39gGB N1R!=/Y";
      stringArray0[2] = "@U%s,^EIN]p";
      String string0 = "alibaba";
      stringArray0[3] = "alibaba";
      stringArray0[4] = ", segement ";
      String string1 = "org.joda.time.format.DateTimeFormatter";
      stringArray0[5] = "org.joda.time.format.DateTimeFormatter";
      stringArray0[6] = "@U%s,^EIN]p";
      stringArray0[7] = "not";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(double0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : Rnfw39gGB N1R!=/Y
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("autoTypeSupport");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("autoTypeSupport", "autoTypeSupport");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.autoTypeSupport", "autoTypeSupport", (-1370), sQLNonTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(26, false, true, 26, 26, sQLNonTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.autoTypeSupport", "fastjson.parser.autoTypeSupport", dataTruncation0);
      Object object0 = jSONPath0.eval((Object) sQLTransientConnectionException0);
      assertNull(object0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "autoTypeSupport";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject((Object) null, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "stackTrace";
      String string0 = "like";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "like");
      int int0 = (-493);
      DataTruncation dataTruncation0 = new DataTruncation((-493), true, true, (-2860), (-493));
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(dataTruncation0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = "LFnDPHL-\"}teUtS.JwM";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("LFnDPHL-\"}teUtS.JwM");
      jSONPath_JSONPathParser0.readString();
      jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("{\"/stackTrace/1\":-428.568}", sQLNonTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(1418, true, true, 7, 15, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.setNextException(sQLNonTransientException0);
      dataTruncation0.getDataSize();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      Double double0 = new Double((-1442.32));
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = JSONPath.eqNotNull(double0, bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("I%W:vU,|L03X'2}3gM", 1117.51343873856, jSONPath_Operator0);
      Byte byte0 = new Byte((byte) (-107));
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializeConfig serializeConfig1 = SerializeConfig.globalInstance;
      ClassLoader.getSystemClassLoader();
      ParserConfig.getGlobalInstance();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1040, (-9), 1040);
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.GT;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("I%W:vU,|L03X'2}3gM", jSONPath_RangeSegment0, jSONPath_Operator1);
      JSONPath jSONPath0 = new JSONPath("vq");
      Long long0 = new Long((-9));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.joda.time.format.DateTimeFormatter", "vq", 1040);
      Double double0 = new Double(3110.416);
      boolean boolean1 = JSONPath.eqNotNull(byte0, double0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("6f'0PJ");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("U0LZ;Ca;b_z[Rg@[;k", "6f'0PJ");
      MockThrowable mockThrowable0 = new MockThrowable("U0LZ;Ca;b_z[Rg@[;k", sQLNonTransientException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("BS&(4A", mockThrowable0);
      Double double0 = new Double(346L);
      jSONPath0.setPropertyValue(sQLTransactionRollbackException0, "BS&(4A", 346L, double0);
      Long long0 = new Long(5614464919154503228L);
      Long long1 = new Long(346L);
      Long.getLong("6f'0PJ", long1);
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONPath.eqNotNull(double0, long0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-3182));
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath_ArrayAccessSegment0, stringArray0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("RUDWv#^}AZoN`o");
      SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath.compile("RUDWv#^}AZoN`o");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2002, 2002, 2002);
      Double double0 = new Double(2002);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JSONPath.isInt(class0);
      JSONPath.eqNotNull(double0, double0);
      int[] intArray0 = new int[7];
      intArray0[0] = 2002;
      intArray0[1] = 2002;
      intArray0[2] = 2002;
      intArray0[3] = 2002;
      intArray0[4] = 106;
      intArray0[5] = 2002;
      intArray0[6] = 2002;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("RUDWv#^}AZoN`o", intArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(batchUpdateException0);
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(sQLFeatureNotSupportedException0, (String[]) null);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath.compile("<<v- B$2kYEK");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      Double double0 = new Double(1371.0659021);
      boolean boolean0 = JSONPath.eqNotNull(double0, double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Xca$e/stackTrace/3";
      // Undeclared exception!
      try { 
        JSONPath.extract("MwYPHn", "Xca$e/stackTrace/3");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      int int0 = 76;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("tPZC>J+eGGszU26[qU", (Throwable) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("GW< ", "GW< ", 76, sQLFeatureNotSupportedException0);
      JSONPath.compile("com.alibaba.fastjson.JSONPath$Operator");
      long long0 = 8963398325558730460L;
      Long long1 = new Long(8963398325558730460L);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("fastjson.parser.safeMode", (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = "com.alibaba.fastjson.JSONPath$MinSegment";
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.alibaba.fastjson.JSONPath$MinSegment");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$MinSegment");
      JSONPath.compile("com.alibaba.fastjson.JSONPath$MinSegment");
      Float float0 = new Float(1383.0F);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("com.alibaba.fastjson.JSONPath$MinSegment", (Object) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/stackTrace/8");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/stackTrace/8";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath1 = JSONPath.compile("/stackTrace/8");
      boolean boolean0 = jSONPath1.removePropertyValue("com.alibaba.fastjson.JSONPath$MinSegment", "max", false);
      assertFalse(boolean0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("scanLong", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("T!k@", "/stackTrace/8", 181, (Throwable) null);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("scanLong");
      sQLRecoverableException1.spliterator();
      SQLDataException sQLDataException0 = new SQLDataException("/stackTrace/8", ">@lC5quQ&}mlB%E", 181, sQLTransientConnectionException0);
      sQLRecoverableException1.getSuppressed();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("%0o`|-5k#", false);
      Object object0 = JSONPath.reserveToArray("/stackTrace/8", stringArray0);
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("/stackTrace/8", stringArray0, true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$MinSegment");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(" is not a primitive type", "equals", 3089, hashMap0);
      Object object1 = JSONPath.reserveToArray(sQLClientInfoException0, stringArray0);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean1 = jSONPath_JSONPathParser0.isEOF();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath.compile("hashCode");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("hashCode", (SerializeConfig) null, parserConfig0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{\"x\":\"hello\",\"y\":99,\"z\":true,\"/cause/stackTrace/8\":[],\"b\":{},\", but '\":99,\"xxx\":true}");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("fastjson.parser.autoTypeAccept", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.safeMode", sQLTransientConnectionException0);
      JSONPath.arrayAdd((Object) sQLNonTransientConnectionException0, "fastjson.parser.deny.internal", (Object[]) null);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      JSONPath jSONPath1 = new JSONPath("/cause/stackTrace/0", (SerializeConfig) null, parserConfig1);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONPath.reserveToObject(jSONPath_SizeSegment0, (String[]) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSON");
      JSONPath.reserveToArray(sQLTransientConnectionException0, (String[]) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.autoTypeSupport", "NE", 1858, sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        jSONPath1.keySet((Object) sQLTimeoutException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("6M-2", (Long[]) null, false);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      JSONPath jSONPath0 = new JSONPath("6M-2", serializeConfig0, parserConfig0);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("fastjson.parser.deny.internal");
      MockUUID.fromString("fastjson.parser.safeMode");
      Locale locale0 = Locale.CANADA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      JSONPath.reserveToArray(parserConfig0, (String[]) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("'nR]R|1'", sQLClientInfoException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.deny.internal", "6M-2", 1858, sQLSyntaxErrorException0);
      DataTruncation dataTruncation0 = new DataTruncation(1858, false, false, 1858, 1858);
      dataTruncation0.getNextWarning();
      jSONPath0.keySet((Object) null);
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("%f/$&FP", serializeConfig0, parserConfig1);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath1, (Object) null, 1858, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("I%W:vU,|L03X'2}3gM", 1117.51343873856, jSONPath_Operator0);
      Byte byte0 = new Byte((byte) (-107));
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializeConfig serializeConfig1 = SerializeConfig.globalInstance;
      ClassLoader.getSystemClassLoader();
      ParserConfig.getGlobalInstance();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1040, (-9), 1040);
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.GT;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("I%W:vU,|L03X'2}3gM", jSONPath_RangeSegment0, jSONPath_Operator1);
      JSONPath jSONPath0 = new JSONPath("vq");
      Long long0 = new Long((-9));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Ansupported", "'o,7[zdV\"pq;\"T", (-4473));
      Float float0 = new Float((double) 1);
      jSONPath_RefOpSegement0.apply(jSONPath0, sQLTransientConnectionException0, float0, jSONPath0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      jSONPath0.keySet((Object) jSONPath_RefOpSegement0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\\-", parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("gy");
      jSONPath0.keySet((Object) "gy");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("pI8 ,");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("gy");
      JSONPath.reserveToArray((Object) null, (String[]) null);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. pI8 ,
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      String string0 = "M)DF";
      JSONPath jSONPath0 = new JSONPath("M)DF");
      JSONPath jSONPath1 = JSONPath.compile("M)DF");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) jSONPath1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : M)DF
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONPath.extract("{\"x\":\"/cause/stackTrace/11\",\"illeal jsonpath syntax. \":7,\"z\":true,\"a\":[],\"b\":\"a string\",\"xx\":99}", "false");
      JSONPath jSONPath0 = new JSONPath("false");
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.parser.safeMode", (-1580386065683472715L), 0, false);
      ParserConfig parserConfig1 = ParserConfig.global;
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      parserConfig1.getDeserializer((Class<?>) class0, (Type) class0);
      parserConfig0.getDeserializer((Type) class0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(1100);
      int[] intArray0 = new int[1];
      intArray0[0] = 1100;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "()V", intArray0);
      SQLWarning sQLWarning0 = new SQLWarning("o<3'9 DXxjnf-EQamB", batchUpdateException0);
      jSONPath_ArrayAccessSegment0.eval(jSONPath0, sQLWarning0, (Object) null);
      // Undeclared exception!
      jSONPath0.deepSet(bigDecimal0, "fastjson.parser.safeMode", (-1580386065683472715L), (Object) null);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("yyyy-MM-dd'T'HH:mm:ss.SSS");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig parserConfig1 = ParserConfig.global;
      JSONPath jSONPath1 = new JSONPath("/cause/stackTrace/5", serializeConfig0, parserConfig0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      jSONPath_KeySetSegment0.eval(jSONPath0, sQLTransientConnectionException0, jSONPath1);
      Short short0 = new Short((short)102);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_WildCardSegment0, serializeConfig0);
      jSONPath1.arrayAdd((Object) serializeConfig0, (Object[]) null);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((short)102, (short)102, 3968);
      BigDecimal bigDecimal1 = new BigDecimal((double) (short)102);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map1);
      javaBeanSerializer0.getType();
      TimeDeserializer timeDeserializer0 = new TimeDeserializer();
      jSONPath1.getPropertyValues(timeDeserializer0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(2);
      int int0 = JSONPath.size((Object) map0, "Xca$e/stackTrace/3");
      assertEquals((-1), int0);
      assertEquals(1, map0.size());
      
      boolean boolean0 = JSONPath.eq((Object) null, jSONPath0);
      assertFalse(boolean0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.safeMode", false);
      DataTruncation dataTruncation0 = new DataTruncation((short)102, false, false, 2276, (-3158));
      boolean boolean1 = jSONPath_PropertySegment0.remove(jSONPath0, dataTruncation0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = serializeConfig0.propertyNamingStrategy;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      MockThrowable mockThrowable0 = new MockThrowable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "CRt{&19g7lv8wGA";
      stringArray0[1] = "CRt{&19g7lv8wGA";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath.reserveToArray(serializeConfig0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Xca$e/stackTrace/3");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      long[] longArray0 = new long[2];
      longArray0[0] = 379L;
      longArray0[1] = 379L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("{u(Vyi", longArray0, true);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Xca$e/stackTrace/3", "Xca$e/stackTrace/3", sQLNonTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("iA_Tb3K=d`V=0x", "not", (-2879), sQLFeatureNotSupportedException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Cu#dYmJ#+k2r!ztH", (String) null, (-2879), hashMap0, sQLInvalidAuthorizationSpecException0);
      jSONPath_IntInSegement0.apply(jSONPath0, sQLClientInfoException0, sQLFeatureNotSupportedException0, sQLInvalidAuthorizationSpecException0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Cu#dYmJ#+k2r!ztH");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_Operator0, (Object) bigInteger0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("gy");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("pI8 ,");
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath0, jSONPath_SizeSegment0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "]7HOfk";
      stringArray0[1] = "A?-98SC&_z*rSi#r?";
      stringArray0[2] = "og@Fjt";
      stringArray0[3] = "]7HOfk";
      stringArray0[4] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":[],\"value2\":false,\"number\":\"1\"}";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "q*<o~+U\"jE";
      stringArray0[8] = "";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("]7HOfk", (String) null, 36, (Map<String, ClientInfoStatus>) null);
      JSONPath.set((Object) sQLClientInfoException0, "nin", (Object) "q*<o~+U\"jE");
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$FilterGroup");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, propertyNamingStrategy0, sQLClientInfoException0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("not");
      jSONPath0.isRef();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("4&q3IjqS2qB/", ",+<a~bb", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("4&q3IjqS2qB/");
      UUID uUID0 = MockUUID.fromString("not");
      jSONPath_NullSegement0.apply(jSONPath0, uUID0, "not", jSONPath0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("BETWEEN");
      jSONPath_JSONPathParser0.filterRest(jSONPath_StringOpSegement0);
      JSONPath.Operator jSONPath_Operator1 = jSONPath_JSONPathParser0.readOp();
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment(",+<a~bb", true);
      JSONPath.PropertySegment jSONPath_PropertySegment1 = new JSONPath.PropertySegment("ahiE=&", true);
      jSONPath_PropertySegment0.setValue(jSONPath0, jSONPath_PropertySegment1, "not");
      assertFalse(jSONPath_PropertySegment1.equals((Object)jSONPath_PropertySegment0));
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "com.alibaba.fastjson.JSONPath$Operator";
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("com.alibaba.fastjson.JSONPath$Operator");
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$Operator");
      JSONPath jSONPath1 = new JSONPath("com.alibaba.fastjson.JSONPath$Operator");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath1, (Object) null, 131);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("not");
      jSONPath0.isRef();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("4&q3IjqS2qB/", ",+<a~bb", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("4&q3IjqS2qB/");
      UUID uUID0 = MockUUID.fromString("not");
      jSONPath_NullSegement0.apply(jSONPath0, uUID0, "not", jSONPath0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("BETWEEN");
      jSONPath_JSONPathParser0.filterRest(jSONPath_StringOpSegement0);
      jSONPath_JSONPathParser0.readOp();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("dJv&", false);
      int[] intArray0 = new int[1];
      intArray0[0] = 103;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("vB=ot`", "not", 1056, (Map<String, ClientInfoStatus>) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("4&q3IjqS2qB/", "dJv&", intArray0, sQLClientInfoException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("50etK:zUwsUwI", ",+<a~bb", 103, batchUpdateException0);
      jSONPath_PropertySegment0.setValue(jSONPath0, sQLRecoverableException0, batchUpdateException0);
      assertEquals("java.sql.SQLRecoverableException: 50etK:zUwsUwI", sQLRecoverableException0.toString());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\"}", 2265L, (-1403L), false);
      SerializeConfig serializeConfig0 = new SerializeConfig(999999, false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("T*5w|;", serializeConfig0, parserConfig0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(57, 117, 3460);
      Pattern.compile("fastjson.parser.autoTypeAccept");
      JSONPath jSONPath1 = new JSONPath("@JdR9oA,kx<;=x", serializeConfig0, parserConfig0);
      Class<JSONPath.SizeSegment> class0 = JSONPath.SizeSegment.class;
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      ObjectDeserializer objectDeserializer0 = parserConfig0.getDeserializer((Type) class0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(862, 3460, 2222);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONPath1.deepSet("T*5w|;", "fastjson.parser.deny.internal", (-444L), jSONPath_RangeSegment0);
      Short short0 = new Short((short)5783);
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, "/stackTrace/9", objectDeserializer0, short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/stackTrace/8");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/stackTrace/8";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath1 = JSONPath.compile("/stackTrace/8");
      jSONPath1.removePropertyValue("com.alibaba.fastjson.JSONPath$MinSegment", "max", false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("scanLong", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("T!k@", "/stackTrace/8", 181, (Throwable) null);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("ZpdG^=*");
      sQLRecoverableException1.spliterator();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath2 = new JSONPath("value not found in path ", serializeConfig0, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      int[] intArray0 = new int[4];
      intArray0[0] = 36;
      intArray0[1] = 181;
      intArray0[2] = 181;
      intArray0[3] = 181;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      JSONPath.set((Object) jSONPath1, "com.alibaba.fastjson.JSONPath$NotNullSegement", (Object) sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment");
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ui!OFpA`!eSX3A";
      stringArray0[1] = "com.alibaba.fastjson.JSONPath$MinSegment";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath1 = new JSONPath("/cause/cause/stackTrace/6");
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, "com.alibaba.fastjson.JSONPath$MinSegment", jSONPath0);
      assertEquals(2, arrayList0.size());
      
      jSONPath0.getArrayItem((Object) null, 0);
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$MinSegment";
      stringArray0[1] = "com.alibaba.fastjson.JSONPath$MinSegment";
      stringArray0[2] = "com.alibaba.fastjson.JSONPath$MinSegment";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      jSONPath0.contains((Object) null);
      jSONPath0.removePropertyValue(jSONPath_MultiPropertySegment0, "scanLong", true);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("scanLong", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("scanLong", "com.alibaba.fastjson.JSONPath$MinSegment", 181, (Throwable) null);
      sQLRecoverableException0.spliterator();
      SQLDataException sQLDataException0 = new SQLDataException("com.alibaba.fastjson.JSONPath$MinSegment", "com.alibaba.fastjson.JSONPath$MinSegment", 43, sQLRecoverableException0);
      sQLTransientConnectionException0.getSuppressed();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com.alibaba.fastjson.JSONPath$MinSegment", false);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath_SizeSegment0, sQLFeatureNotSupportedException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("not");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("4&q3IjqS2qB/", ",+<a~bb", jSONPath_Operator0);
      long[] longArray0 = new long[5];
      longArray0[0] = (-3290L);
      longArray0[1] = (-1014497654951707614L);
      longArray0[2] = 675L;
      longArray0[3] = 4647432019745535567L;
      longArray0[4] = 5614464919154503228L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("4&q3IjqS2qB/", longArray0, false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[iG`-`R'*+QiHAyg");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntInSegement0);
      Pattern.compile("4&q3IjqS2qB/");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_Filter0);
      JSONPath jSONPath1 = new JSONPath("ex#Q9-Hn5bJ 5#yc\"`");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      javaBeanSerializer0.getBeforeFilters();
      JavaBeanSerializer javaBeanSerializer1 = new JavaBeanSerializer(class0);
      javaBeanSerializer1.getLabelFilters();
      boolean boolean1 = JSONPath.remove((Object) jSONPath_StringOpSegement0, "g");
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = jSONPath_JSONPathParser0.isEOF();
      assertTrue(boolean2 == boolean1);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("/cause/cause/stackTrace/6", "ex#Q9-Hn5bJ 5#yc\"`", false);
      JSONPath jSONPath2 = JSONPath.compile("[iG`-`R'*+QiHAyg");
      Long long0 = new Long(4647432019745535567L);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      boolean boolean3 = jSONPath_ValueSegment0.apply(jSONPath2, long0, jSONPath_Operator0, javaBeanDeserializer0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$MinSegment");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$MinSegment");
      Float float0 = new Float(1383.0F);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("com.alibaba.fastjson.JSONPath$MinSegment", jSONPath_JSONPathParser0, false);
      Integer integer0 = new Integer(1004);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      boolean boolean1 = jSONPath_ValueSegment0.apply(jSONPath0, jSONPath0, integer0, sQLInvalidAuthorizationSpecException0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(" w/)%", " w/)%");
      String[] stringArray0 = new String[6];
      stringArray0[0] = " w/)%";
      stringArray0[1] = " w/)%";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(" w/)%", "/cause/stackTrace/1", (-1746));
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(" w/)%", sQLTransactionRollbackException0);
      Short short0 = new Short((short)128);
      // Undeclared exception!
      try { 
        JSONPath.compare((Object) null, sQLTimeoutException1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("false", 2265L, (-1403L), true);
      SerializeConfig serializeConfig0 = new SerializeConfig(1000001, true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("T*5w|;", serializeConfig0, parserConfig0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      javaBeanSerializer0.getBeforeFilters();
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      JavaBeanSerializer javaBeanSerializer1 = new JavaBeanSerializer(class1);
      javaBeanSerializer1.getLabelFilters();
      Float float0 = new Float((float) 2265L);
      JSONPath.remove((Object) float0, "fastjson.parser.deny.internal");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("XKp");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("I%W:vU,@L03X'2}3gM", 1117.51343873856, jSONPath_Operator0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "MP,!&P^";
      SQLException sQLException0 = new SQLException("MP,!&P^");
      DataTruncation dataTruncation0 = new DataTruncation(9, false, true, 9, 91, sQLException0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath.reserveToObject("MP,!&P^", (String[]) null);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      Class<?> class1 = javaBeanSerializer0.getType();
      parserConfig0.get(class0);
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("Nm|DT4y(eu?%RI", jSONPath_WildCardSegment0, jSONPath_Operator0);
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.GE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement1 = new JSONPath.RefOpSegement("/cause/cause/stackTrace/8", jSONPath_WildCardSegment0, jSONPath_Operator1);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig1 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("I%W:vU,@L03X'2}3gM", serializeConfig0, parserConfig1);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      serializeConfig0.setPropertyNamingStrategy(propertyNamingStrategy0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(99999, 57, 91);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, class1, jSONPath_RefOpSegement1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1097
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig.global = parserConfig0;
      jSONPath0.isRef();
      Short short0 = new Short((short)9216);
      DataTruncation dataTruncation0 = new DataTruncation((short)9216, false, false, (short)9216, 2741);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("4&q3IjqS2qB/");
      MockUUID.fromString("*");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(",+<a~bb");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig1 = new SerializeConfig(1418, false);
      JSONPath jSONPath0 = new JSONPath("not", serializeConfig1, parserConfig0);
      Vector<Object> vector0 = new Vector<Object>();
      BigInteger bigInteger0 = BigInteger.ONE;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      jSONPath0.deepScan(sQLIntegrityConstraintViolationException0, "3HQNGm", vector0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      assertEquals(PropertyNamingStrategy.PascalCase, propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("{\"NOT_RLIKE\":[],\"y\":{\"NOT_RLIKE\":null},\"z\":true,\"a\":[],\"b\":{}}", sQLNonTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(1418, false, false, 7, 23, sQLIntegrityConstraintViolationException0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath.paths((Object) dataTruncation0, serializeConfig0);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 23;
      longArray0[1] = 1099511628211L;
      longArray0[2] = (long) 23;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("/cause/stackTrace", longArray0, false);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/3");
      JSONPath.paths((Object) "/cause/stackTrace/3");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientException0);
      jSONPath_IntInSegement0.apply(jSONPath0, sQLInvalidAuthorizationSpecException0, jSONPath0, "{\"NOT_RLIKE\":[],\"y\":{\"NOT_RLIKE\":null},\"z\":true,\"a\":[],\"b\":{}}");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("/cause/stackTrace/3");
      String[] stringArray0 = new String[0];
      JSONPath.reserveToArray(jSONPath_Operator0, stringArray0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("O0:jW@C", true);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLNonTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException("@type", "1.2.68", 11, sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.eval(jSONPath0, sQLDataException0, sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path /cause/stackTrace/3, segement O0:jW@C
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/7");
      JSONPath.remove((Object) jSONPath0, "/stackTrace/7");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(45);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONPath.remove((Object) jSONPath_ArrayAccessSegment0, "XzgfDW");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("unclosed string : ", true);
      JSONPath jSONPath1 = new JSONPath("/stackTrace/7");
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<Short> class0 = Short.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.eval(jSONPath0, jSONPath1, javaBeanDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path /stackTrace/7, segement unclosed string : 
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("r&TM_ld;", serializeConfig0, parserConfig0);
      Vector<Object> vector0 = new Vector<Object>();
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(serializeConfig0, "fastjson.parser.safeMode", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path r&TM_ld;, segement fastjson.parser.safeMode
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("st", 2233L, (-1403L), true);
      SerializeConfig serializeConfig0 = new SerializeConfig(1000001, true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("st", serializeConfig0, parserConfig0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.deny.internal", false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      JSONPath.PropertySegment jSONPath_PropertySegment1 = new JSONPath.PropertySegment("fastjson.parser.deny.internal", false);
      jSONPath_FilterSegment0.eval(jSONPath0, serializeConfig0, jSONPath_PropertySegment1);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("{\"fruit\":{},\"g\":\"Large\",\"/stackTrace/6\":false,\"value\":true,\"value2\":true,\"number\":\"1\"}");
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":{},\"g\":\"Large\",\"/stackTrace/6\":false,\"value\":true,\"value2\":true,\"number\":\"1\"}");
      UUID uUID0 = MockUUID.fromString("{\"fruit\":{},\"g\":\"Large\",\"/stackTrace/6\":false,\"value\":true,\"value2\":true,\"number\":\"1\"}");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      jSONPath_FilterSegment0.eval(jSONPath0, "{\"fruit\":{},\"g\":\"Large\",\"/stackTrace/6\":false,\"value\":true,\"value2\":true,\"number\":\"1\"}", uUID0);
      int[] intArray0 = new int[8];
      intArray0[6] = 18;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Random.setNextRandom(199);
      JSONPath.JSONPathParser.isDigitFirst('$');
      Pattern pattern0 = Pattern.compile("not", 199);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("not", pattern0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RegMatchSegement0);
      JSONPath jSONPath0 = new JSONPath("@U%s,^EIN]p");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '$';
      intArray0[1] = (int) '$';
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("@U%s,^EIN]p", "Rnfw39gGB N1R!=/Y", 2712, intArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("@U%s,^EIN]p", hashMap0, batchUpdateException0);
      SQLWarning sQLWarning0 = new SQLWarning("not", "Rnfw39gGB N1R!=/Y", 199, sQLClientInfoException0);
      sQLWarning0.getLocalizedMessage();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("LYn", false);
      jSONPath_FilterSegment0.eval(jSONPath0, sQLWarning0, jSONPath_PropertySegment0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("LYn");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but 'L'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("Xca$e/stackTrace/3", serializeConfig0, parserConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("kg_EJRGg]");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<UUID> class0 = UUID.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      JavaBeanSerializer javaBeanSerializer1 = new JavaBeanSerializer(class1);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Class<MockCalendar> class2 = MockCalendar.class;
      JavaBeanSerializer javaBeanSerializer2 = new JavaBeanSerializer(class2, hashMap1);
      javaBeanSerializer2.getLabelFilters();
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("fastjson.parser.deny", (String[]) null, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1024, 893, 3536);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, parserConfig0);
      // Undeclared exception!
      try { 
        JSONPath.remove(object0, "fastjson.parser.safeMode");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("I%W:vU,@L03X'2}3gM", 1117.51343873856, jSONPath_Operator0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLException sQLException0 = new SQLException("MP,!&P^");
      DataTruncation dataTruncation0 = new DataTruncation(9, false, true, 9, 91, sQLException0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath.reserveToObject("MP,!&P^", (String[]) null);
      int[] intArray0 = new int[2];
      intArray0[1] = (-36787060);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment1 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        jSONPath_MultiIndexSegment1.eval(jSONPath0, "I%W:vU,@L03X'2}3gM", jSONPath_DoubleOpSegement0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1000022, true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("T*5w|;", serializeConfig0, parserConfig0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("false", 2254L, jSONPath_Operator0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, bigInteger0, "fastjson.parser.deny.internal", jSONPath_WildCardSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("false", 2265L, (-1403L), true);
      SerializeConfig serializeConfig0 = new SerializeConfig(1000001, true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("T*5w|;", serializeConfig0, parserConfig0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      parserConfig0.getDeserializer((Type) class0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("K\"", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("T*5w|;", "_UlMU#'A!", 1000001, map0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("false", 2275L, jSONPath_Operator0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, bigInteger0, "_UlMU#'A!", jSONPath_WildCardSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("B>4+@vXglZ");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) "B>4+@vXglZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : B>4+@vXglZ
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":true,\"color\":false,\"/cause/cause/stackTrace/0\":{},\"value2\":\"a string\",\"number\":\"1\",\"/stackTrace/10\":-99,\"xx\":[]}");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("{\"fruit\":\"Apple\",\"size\":true,\"color\":false,\"/cause/cause/stackTrace/0\":{},\"value2\":\"a string\",\"number\":\"1\",\"/stackTrace/10\":-99,\"xx\":[]}");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig1 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig1 = ParserConfig.global;
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig1, parserConfig1);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      jSONPath_KeySetSegment0.eval(jSONPath0, (Object) null, serializeConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny.internal");
      jSONPath1.eval((Object) null);
      Byte byte0 = new Byte((byte)102);
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"fruit\":\"Apple\",\"size\":true,\"color\":false,\"/cause/cause/stackTrace/0\":{},\"value2\":\"a string\",\"number\":\"1\",\"/stackTrace/10\":-99,\"xx\":[]}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONPath.eqNotNull(bigInteger0, bigInteger0);
      String string0 = "/cause/stack-trace/9";
      JSONPath.eval((Object) bigInteger0, "/cause/stack-trace/9");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath(string0, serializeConfig0, parserConfig0);
      Object object0 = null;
      jSONPath0.evalSize(object0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("yyyy-MM-dd'T'HH:mm:ss.SSS");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig1 = ParserConfig.global;
      JSONPath jSONPath1 = new JSONPath("/cause/stackTrace/5", serializeConfig0, parserConfig0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, sQLTransientConnectionException0, jSONPath1);
      assertNull(object0);
      
      Short short0 = new Short((short)102);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_WildCardSegment0, serializeConfig0);
      jSONPath1.arrayAdd((Object) serializeConfig0, (Object[]) null);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((short)102, (short)102, 3968);
      BigDecimal bigDecimal1 = new BigDecimal(3680.864431);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map1);
      javaBeanSerializer0.getType();
      parserConfig0.get(class0);
      jSONPath1.getPropertyValues((Object) null);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(2);
      JSONPath.size((Object) map0, "/cause/stackTrace/3");
      assertEquals(1, map0.size());
      
      boolean boolean0 = JSONPath.eq((Object) null, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath jSONPath0 = new JSONPath("99");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig1 = new SerializeConfig(false);
      ParserConfig parserConfig1 = ParserConfig.global;
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig1, parserConfig1);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, (Object) null, serializeConfig0);
      assertNotNull(object0);
      
      Short short0 = new Short((short)102);
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      jSONPath0.arrayAdd((Object) jSONPath_KeySetSegment0, (Object[]) null);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((short)102, 3968, 92);
      BigDecimal bigDecimal1 = new BigDecimal(0.0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map1);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(863);
      int int0 = JSONPath.size((Object) jSONPath_ArrayAccessSegment0, "fastjson.parser.autoTypeAccept");
      assertEquals((-1), int0);
      
      jSONPath1.setPropertyValue(map0, "fastjson.parser.deny.internal", 863, jSONPath_KeySetSegment0);
      Short short1 = new Short((short)102);
      Map<String, Object> map2 = JSONPath.paths((Object) short1);
      assertEquals(1, map2.size());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("autoTypeSupport");
      ParserConfig.getGlobalInstance();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      jSONPath0.size((Object) jSONPath_WildCardSegment0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(4673);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      JSONPath.remove((Object) jSONPath_WildCardSegment0, "fastjson.parser.safeMode");
      JSONPath jSONPath1 = new JSONPath("(I)Ljava/lang/Object;");
      MockThrowable mockThrowable0 = new MockThrowable(sQLSyntaxErrorException0);
      MockThrowable.getDefaultStackTrace();
      SQLDataException sQLDataException0 = new SQLDataException(mockThrowable0);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.autoTypeSupport", "6qoa:<e'bFRqvhzU:tK", "com.alibaba.fastjson.JSONPath$WildCardSegment", (String[]) null, false);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("fastjson.parser.autoTypeSupport", (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1000022, true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("T*5w|;", serializeConfig0, parserConfig0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("fastjson.parser.safeMode", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("false", 2254L, jSONPath_Operator0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      boolean boolean0 = JSONPath.remove((Object) map0, "/StackTrace/5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("com.alibaba.fastjson.util.IdentityHashMap$Entry", (-851L), (-851L), true);
      JSONPath jSONPath0 = new JSONPath("Pe");
      SQLWarning sQLWarning0 = new SQLWarning("4", "true");
      Class<BigInteger> class0 = BigInteger.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.serializer.ASMSerializer_60_BigInteger
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("false", 2265L, (-1403L), false);
      SerializeConfig serializeConfig0 = new SerializeConfig(1000001, false);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("false", serializeConfig0, parserConfig0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      parserConfig0.getDeserializer((Type) class0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONPath0.deepSet(serializeConfig0, "+;O>>D#;9?>HVL8", 504L, bigInteger0);
      jSONPath_IntBetweenSegement0.apply(jSONPath0, "false", bigInteger0, "false");
      int[] intArray0 = new int[3];
      intArray0[0] = 1000001;
      intArray0[1] = 1000001;
      intArray0[2] = 1000001;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("GT", (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLRecoverableException0);
      boolean boolean0 = JSONPath.remove((Object) batchUpdateException0, "fastjson.parser.deny");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":true,\"number\":\"1\"}");
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":true,\"number\":\"1\"}");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      jSONPath_NullSegement0.apply(jSONPath0, jSONPath0, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":true,\"number\":\"1\"}", jSONPath_SizeSegment0);
      JSONPath.containsValue((Object) jSONPath_NullSegement0, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":true,\"number\":\"1\"}", (Object) null);
      String string0 = "/StackTrace";
      ParserConfig parserConfig0 = new ParserConfig();
      int int0 = 1;
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(string0, parserConfig0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":true,\"color\":false,\"/cause/cause/stackTrace/0\":{},\"value2\":\"a string\",\"number\":\"1\",\"x\":-99}");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig1 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig1 = ParserConfig.global;
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig1, parserConfig1);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      jSONPath_KeySetSegment0.eval(jSONPath0, (Object) null, serializeConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny.internal");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. fastjson.parser.deny.internal
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONPath.compile("){p*R3!z!jG");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.util.IdentityHashMap$Entry");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. com.alibaba.fastjson.util.IdentityHashMap$Entry
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      String string0 = "{\"fruit\":\"Apple\",\"org.apache.ibatis.javassist.util.proxy.Prox}Object\":\"Large\",\"color\":-99,\"value\":false,\"org\":false,\"number\":{M}";
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"org.apache.ibatis.javassist.util.proxy.Prox}Object\":\"Large\",\"color\":-99,\"value\":false,\"org\":false,\"number\":{M}");
      String string1 = "t";
      UUID uUID0 = MockUUID.fromString("t");
      Object object0 = new Object();
      long[] longArray0 = new long[7];
      longArray0[0] = (-6586085717218287427L);
      longArray0[1] = 186L;
      longArray0[2] = 1L;
      longArray0[3] = 1408L;
      longArray0[4] = (-6586085717218287427L);
      longArray0[5] = 7653587661291503027L;
      longArray0[6] = 5531884185925739200L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("rJoa4FBP", longArray0, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntInSegement0, jSONPath_IntInSegement0, false);
      jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_IntInSegement0, object0, "t");
      JSONPath.JSONPathParser.isDigitFirst(',');
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      JSONPath.isInt(class0);
      int int0 = 1508;
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, jSONPath0, uUID0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "unsupported array put operation. ";
      JSONPath jSONPath0 = new JSONPath("unsupported array put operation. ");
      long[] longArray0 = new long[1];
      longArray0[0] = 379L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("unsupported array put operation. ", longArray0, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntInSegement0, jSONPath_IntInSegement0, false);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("not support type :", sQLDataException0);
      jSONPath_FilterGroup0.apply(jSONPath0, "*XA{1B-Ls", "*XA{1B-Ls", sQLNonTransientConnectionException0);
      jSONPath_FilterGroup0.apply(jSONPath0, sQLDataException0, "unsupported array put operation. ", sQLDataException0);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) "unsupported array put operation. ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : unsupported array put operation. 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("{\"NOT_RLIKE\":[],\"y\":{\"NOT_RLIKE\":null},\"z\":true,\"a\":[],\"b\":{}}", sQLNonTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(1418, false, false, 7, 23, sQLIntegrityConstraintViolationException0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath.paths((Object) dataTruncation0, serializeConfig0);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 23;
      longArray0[1] = 1099511628211L;
      longArray0[2] = (long) 23;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("/cause/stackTrace", longArray0, false);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/3");
      JSONPath.paths((Object) "/cause/stackTrace/3");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientException0);
      jSONPath_IntInSegement0.apply(jSONPath0, sQLInvalidAuthorizationSpecException0, jSONPath0, "{\"NOT_RLIKE\":[],\"y\":{\"NOT_RLIKE\":null},\"z\":true,\"a\":[],\"b\":{}}");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("/cause/stackTrace/3");
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath_Operator0, stringArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C6A;QO<d");
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("2=Du", stringArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("not");
      jSONPath0.isRef();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("4&q3IjqS2qB/", ",+<a~bb", jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig(7);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("Nz)G", serializeConfig0, parserConfig0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(36);
      UUID uUID0 = MockUUID.randomUUID();
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath1, uUID0, ",+<a~bb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.util.UUID
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = "[-99,[]]";
      JSONPath.extract("{\"x\":\"hello\",\"y\":7,\"z\":-99,\"a\":[],\"java/lang/Integer\":\"a string\"}", "[-99,[]]");
      JSONPath jSONPath0 = new JSONPath(string0);
      ParserConfig parserConfig0 = new ParserConfig();
      int int0 = 0;
      long long0 = (-1580386065683472715L);
      boolean boolean0 = false;
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement(parserConfig0.SAFE_MODE_PROPERTY, long0, int0, boolean0);
      String string1 = "com.alibaba.fastjson.JSONPath$JSONPathParser";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(string1);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("$y\"!QSG[mMnhI2", "GU' ");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("GU' ", "$y\"!QSG[mMnhI2", sQLNonTransientConnectionException0);
      sQLRecoverableException0.spliterator();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath.size((Object) "scanInt", "y7<zQRm6S5j");
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("jDbs5u", 165L, (-719183851066137122L), false);
      JSONPath jSONPath0 = JSONPath.compile("jDbs5u");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      SQLWarning sQLWarning0 = new SQLWarning("com.alibaba.fastjson.JSONPath$IntObjInSegement", "/stackTrace/6");
      jSONPath_IntBetweenSegement0.apply(jSONPath0, jSONPath_FilterSegment0, sQLWarning0, jSONPath0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      // Undeclared exception!
      try { 
        JSONPath.set((Object) jSONPath_Operator0, "jDbs5u", (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\"}", 2265L, (-1403L), false);
      String string0 = "T*5w|;";
      int int0 = 999999;
      SerializeConfig serializeConfig0 = new SerializeConfig(999999, false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("T*5w|;", serializeConfig0, parserConfig0);
      int int1 = 57;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(57, 117, 3460);
      Pattern pattern0 = Pattern.compile("fastjson.parser.autoTypeAccept");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("fastjson.parser.autoTypeAccept", pattern0, jSONPath_Operator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fastjson.parser.deny.internal", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\"}", 57);
      Integer integer0 = new Integer(57);
      jSONPath_RegMatchSegement0.apply(jSONPath0, "T*5w|;", sQLIntegrityConstraintViolationException0, integer0);
      String string1 = "LT";
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\"}", false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/stackTrace/9", "r{l)%)S*S4O", 57, sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.setValue(jSONPath0, pattern0, sQLNonTransientConnectionException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.InternFieldNames;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSONPath.extract("/cause/stackTrace/9", "/cause/stackTrace/9", parserConfig0, 43, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = "{\"parser\":\"hello\",\"illeal jsonpath syntax. \":\"a string\",\"z\":true,\"b\":\"a string\",\"unixtime\":null,\"xx\":true}";
      String string1 = "b";
      JSONPath.extract("{\"parser\":\"hello\",\"illeal jsonpath syntax. \":\"a string\",\"z\":true,\"b\":\"a string\",\"unixtime\":null,\"xx\":true}", "b");
      JSONPath jSONPath0 = new JSONPath("b");
      ParserConfig parserConfig0 = new ParserConfig();
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      JavaBeanSerializer javaBeanSerializer0 = null;
      try {
        javaBeanSerializer0 = new JavaBeanSerializer(class0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = "{\"x\":true,\"/cause/stackTrace/10\":7,\"z\":true,\"a\":[],\"b\":\"a string\"}";
      JSONPath.extract("{\"x\":true,\"/cause/stackTrace/10\":7,\"z\":true,\"a\":[],\"b\":\"a string\"}", "true");
      JSONPath jSONPath0 = new JSONPath("true");
      ParserConfig parserConfig0 = new ParserConfig();
      int int0 = 0;
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowComment;
      featureArray0[1] = feature1;
      Feature[] featureArray1 = new Feature[8];
      featureArray1[0] = feature1;
      featureArray1[1] = feature1;
      featureArray1[2] = feature1;
      featureArray1[3] = feature0;
      Feature feature2 = Feature.DisableSpecialKeyDetect;
      featureArray1[4] = feature2;
      featureArray1[5] = feature0;
      featureArray1[6] = feature0;
      featureArray1[7] = feature0;
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.parser.autoTypeAccept", "fastjson.parser.autoTypeSupport", parserConfig0, 580, featureArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "unsupported array put operation. ";
      stringArray0[1] = "unsupported array put operation. ";
      stringArray0[2] = "unsupported array put operation. ";
      stringArray0[3] = "unsupported array put operation. ";
      stringArray0[4] = "unsupported array put operation. ";
      stringArray0[5] = "unsupported array put operation. ";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("unsupported array put operation. ", stringArray0, true);
      String string0 = "RUDWv#^}AZoN`o";
      JSONPath jSONPath0 = new JSONPath("RUDWv#^}AZoN`o");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("JZB/i", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "unsupported array put operation. ", (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : RUDWv#^}AZoN`o
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(" w/)%", " w/)%", 36);
      String[] stringArray0 = new String[2];
      JSONPath jSONPath0 = new JSONPath("w/)L");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath_WildCardSegment0, (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. w/)L
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(" w/)%", " w/)%", 36);
      String[] stringArray0 = new String[8];
      stringArray0[0] = " w/)%";
      stringArray0[1] = " w/)%";
      stringArray0[2] = " w/)%";
      stringArray0[3] = " w/)%";
      stringArray0[4] = " w/)%";
      stringArray0[5] = " w/)%";
      stringArray0[6] = " w/)%";
      stringArray0[7] = "com.alibaba.fastjson.serializer.SimplePropertyPreFilter";
      JSONPath.reserveToArray(sQLTransactionRollbackException0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$MinSegment";
      stringArray0[1] = "com.alibaba.fastjson.JSONPath$MinSegment";
      stringArray0[2] = "com.alibaba.fastjson.JSONPath$MinSegment";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      jSONPath0.removePropertyValue(jSONPath_MultiPropertySegment0, "scanLong", true);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("scanLong", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("scanLong", "com.alibaba.fastjson.JSONPath$MinSegment", 181, (Throwable) null);
      sQLRecoverableException0.spliterator();
      SQLDataException sQLDataException0 = new SQLDataException("com.alibaba.fastjson.JSONPath$MinSegment", "com.alibaba.fastjson.JSONPath$MinSegment", 43, sQLRecoverableException0);
      sQLTransientConnectionException0.getSuppressed();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com.alibaba.fastjson.JSONPath$MinSegment", false);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath_SizeSegment0, sQLFeatureNotSupportedException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "]7HOfk";
      stringArray0[1] = "A?-98SC&_z*rSi#r?";
      stringArray0[2] = "og@Fjt";
      stringArray0[3] = "]7HOfk";
      long[] longArray0 = new long[4];
      longArray0[0] = 615L;
      longArray0[1] = 615L;
      longArray0[2] = 615L;
      longArray0[3] = 615L;
      boolean boolean0 = false;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("og@Fjt", longArray0, false);
      JSONPath jSONPath0 = new JSONPath("QfI->far+H");
      Double double0 = new Double(615L);
      JSONPath.keySet((Object) "]7HOfk", "_asm");
      JSONPath.IntInSegement jSONPath_IntInSegement1 = new JSONPath.IntInSegement("og@Fjt", longArray0, false);
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = null;
      try {
        jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONPath.compile("93T^flxh)HON9(T;");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("93T^flxh)HON9(T;");
      jSONPath_JSONPathParser0.parseArrayAccess(false);
      String string0 = "true";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "true";
      stringArray0[1] = "93T^flxh)HON9(T;";
      stringArray0[2] = "true";
      stringArray0[3] = "true";
      stringArray0[4] = "93T^flxh)HON9(T;";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      String string1 = "fastjson";
      JSONPath.compile("fastjson");
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class0, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("gy");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("pI8 ,");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"pI8 \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/stackTrace/8");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/stackTrace/8";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath1 = JSONPath.compile("/stackTrace/8");
      jSONPath1.removePropertyValue("com.alibaba.fastjson.JSONPath$MinSegment", "max", false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("scanLong", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("T!k@", "/stackTrace/8", 181, (Throwable) null);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("ZpdG^=*");
      sQLRecoverableException1.spliterator();
      SQLDataException sQLDataException0 = new SQLDataException("ZpdG^=*", ">@lC5quQ&}mlB%E", 181, sQLTransientConnectionException0);
      sQLRecoverableException1.getSuppressed();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("%0o`|-5k#", false);
      JSONPath.reserveToArray("/stackTrace/8", stringArray0);
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("ZpdG^=*", stringArray0, true);
      SQLWarning sQLWarning0 = new SQLWarning("", "b'nfwPQE/", 181, sQLRecoverableException1);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, sQLWarning0, "max", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$MinSegment";
      stringArray0[1] = "com.alibaba.fastjson.JSONPath$MinSegment";
      stringArray0[2] = "com.alibaba.fastjson.JSONPath$MinSegment";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("/stackTrace/3", "vZi!f?", 6);
      JSONPath jSONPath1 = new JSONPath("M_|");
      Class<String> class0 = String.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath1.getJavaBeanSerializer(class0);
      JSONPath.reserveToObject(javaBeanSerializer0, stringArray0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("/cause/cause/stackTrace/10", 6, jSONPath_Operator0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLRecoverableException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("/cause/stackTrace/6", "com.alibaba.fastjson.JSONPath$MinSegment", hashMap0, sQLTransientException0);
      Short short0 = new Short((short) (-906));
      jSONPath_IntOpSegement0.apply(jSONPath1, "/stackTrace/3", short0, "/stackTrace/3");
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSONPath.compile("Xca$e/stackTrace/3");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-15), (-15), 1040);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement(";JL(TkS}%ed7/L6Rn", jSONPath_RangeSegment0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("*");
      Long long0 = new Long((-6586085717218287427L));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("valueOf", "fastjson.parser.deny", 1040);
      Double double0 = new Double((-3147.0294402549266));
      JSONPath.eqNotNull(long0, long0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLNonTransientException0, (Object) null, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      String string0 = "org.joda.time.LocalDate";
      String string1 = "writeAfter";
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) parserConfig0, (Object) parserConfig0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "unsupported array put operation. ";
      stringArray0[1] = "unsupported array put operation. ";
      stringArray0[2] = "unsupported array put operation. ";
      stringArray0[4] = "unsupported array put operation. ";
      stringArray0[5] = "unsupported array put operation. ";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("unsupported array put operation. ", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath("RUDWv#^}AZoN`o");
      Short short0 = new Short((short)2939);
      jSONPath0.removePropertyValue(short0, "jsonpath error, path ", false);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("jsonpath error, path ", batchUpdateException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("unsupported array put operation. ", "unsupported array put operation. ", (short)2939, (Throwable) null);
      sQLRecoverableException0.spliterator();
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataException0.getSuppressed();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("size", false);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("/cause/stackTrace/11", "_WpMth~a^ktfjz``");
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(sQLInvalidAuthorizationSpecException0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "unsupported array put operation. ";
      JSONPath.compile("unsupported array put operation. ");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray((Object) null, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("8lD%2bpiY+");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 8lD%2bpiY+
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`/o/=aRt");
      Double double0 = new Double(2803.0);
      Double double1 = new Double(2803.0);
      JSONPath.eq(double1, (Object) null);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      String string0 = "K";
      JSONPath jSONPath0 = new JSONPath("`/o/=aRt");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-3057));
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("K", serializeConfig0, parserConfig0);
      Double double2 = new Double((-3057));
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.eval(jSONPath1, (Object) null, double2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      String string0 = "6f'0PJ";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Double double0 = new Double(1.0E7);
      JSONPath.eq("6f'0PJ", (Object) null);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = null;
      try {
        jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MultiPropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String[] stringArray0 = new String[6];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Double double0 = new Double(2803.0);
      JSONPath.eq(stringArray0[5], double0);
      Double double1 = new Double((-2579.81));
      Long long0 = new Long((-2432L));
      boolean boolean0 = JSONPath.eq((Object) null, long0);
      assertFalse(boolean0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = new JSONPath("*$%,/LR'B`g)R)OdhP");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("*$%,/LR'B`g)R)OdhP", "/stackTrace/13");
      Double double2 = new Double(2803.0);
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, sQLSyntaxErrorException0, double2);
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.util.IdentityHashMap$Entry");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath.paths((Object) jSONPath0, serializeConfig0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.alibaba.fastjson.util.IdentityHashMap$Entry", "com.alibaba.fastjson.util.IdentityHashMap$Entry", 45, (Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLSyntaxErrorException0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "com.alibaba.fastjson.util.IdentityHashMap$Entry";
      stringArray0[1] = "com.alibaba.fastjson.util.IdentityHashMap$Entry";
      stringArray0[2] = "com.alibaba.fastjson.util.IdentityHashMap$Entry";
      stringArray0[3] = "D_do$";
      stringArray0[4] = "com.alibaba.fastjson.util.IdentityHashMap$Entry";
      stringArray0[5] = "com.alibaba.fastjson.util.IdentityHashMap$Entry";
      stringArray0[6] = "com.alibaba.fastjson.util.IdentityHashMap$Entry";
      String string0 = "W";
      stringArray0[7] = "W";
      stringArray0[8] = "com.alibaba.fastjson.util.IdentityHashMap$Entry";
      JSONPath.reserveToArray("com.alibaba.fastjson.util.IdentityHashMap$Entry", stringArray0);
      boolean boolean0 = false;
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = null;
      try {
        jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement((String) null, "D_do$", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      String string0 = "list is null.";
      String string1 = "";
      // Undeclared exception!
      try { 
        JSONPath.extract("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 1, line 1, column 2
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "unsupported array put operation. ";
      stringArray0[1] = "unsupported array put operation. ";
      stringArray0[2] = "unsupported array put operation. ";
      stringArray0[3] = "unsupported array put operation. ";
      stringArray0[4] = "unsupported array put operation. ";
      stringArray0[5] = "unsupported array put operation. ";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Double double0 = new Double(2803.0);
      JSONPath.eq("unsupported array put operation. ", double0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = new JSONPath("K");
      // Undeclared exception!
      try { 
        JSONPath.extract("unsupported array put operation. ", "K");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ident
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("RUDWv#^}AZoN`o");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      long[] longArray0 = new long[3];
      longArray0[1] = 794L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("stackTrace", longArray0, false);
      JSONPath jSONPath2 = new JSONPath("bXl_i1 `xz8pWg#)7-2");
      JSONPath jSONPath3 = new JSONPath("bXl_i1 `xz8pWg#)7-2");
      // Undeclared exception!
      try { 
        JSONPath.extract("$", "$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2$
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.alibaba.fastjson.JSONPath$MinSegment");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$MinSegment";
      stringArray0[1] = "com.alibaba.fastjson.JSONPath$MinSegment";
      byte byte0 = (byte)8;
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) "com.alibaba.fastjson.JSONPath$MinSegment", "com.alibaba.fastjson.JSONPath$MinSegment", (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path com.alibaba.fastjson.JSONPath$MinSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = "not";
      JSONPath jSONPath0 = new JSONPath("not");
      jSONPath0.isRef();
      String string1 = "4&q3IjqS2qB/";
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("4&q3IjqS2qB/", ",+<a~bb", jSONPath_Operator0);
      short short0 = (short)9216;
      Short short1 = new Short((short)9216);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      int int0 = 2741;
      boolean boolean0 = false;
      boolean boolean1 = false;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-32);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) short1;
      objectArray0[1] = (Object) jSONPath0;
      objectArray0[2] = (Object) "not";
      objectArray0[3] = (Object) jSONPath0;
      objectArray0[4] = (Object) jSONPath_FilterSegment0;
      objectArray0[5] = (Object) null;
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) jSONPath_Operator0, "not", objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath jSONPath0 = new JSONPath("-99");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLNonTransientConnectionException0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig1 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig1 = ParserConfig.global;
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig1, parserConfig1);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, (Object) null, serializeConfig0);
      assertNotNull(object0);
      
      Short short0 = new Short((short)102);
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      jSONPath0.arrayAdd((Object) jSONPath_KeySetSegment0, (Object[]) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig2 = new ParserConfig(aSMClassLoader0);
      Class<Short> class0 = Short.TYPE;
      parserConfig2.getDeserializer((Type) class0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("f", sQLNonTransientConnectionException0);
      jSONPath1.deepSet(sQLIntegrityConstraintViolationException0, "not", 504L, (Object) null);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.parser.deny", 6534946468240507089L, (short)102, false);
      Byte byte0 = new Byte((byte) (-65));
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath1, map0, byte0, sQLTransientException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      JSONPath jSONPath0 = new JSONPath("M)DF");
      JSONPath.compile("M)DF");
      Double double0 = new Double(0.0);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("z&x<:&;>", "java.nio.file.Path", false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_RlikeSegement0, jSONPath_RlikeSegement0, true);
      JSONPath jSONPath1 = new JSONPath("M)DF");
      Long.getLong("/stackTrace/3");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("lineNumber", "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLWarning sQLWarning0 = new SQLWarning("lineNumber");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1939), 26376, (-1939));
      // Undeclared exception!
      try { 
        jSONPath1.containsValue((Object) sQLWarning0, (Object) jSONPath_RangeSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : M)DF
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\"}", 2265L, (-1403L), false);
      SerializeConfig serializeConfig0 = new SerializeConfig(999999, false);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("T*5w|;", serializeConfig0, parserConfig0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      parserConfig0.getDeserializer((Type) class0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONPath0.deepSet(serializeConfig0, "+;O>>D#;9?>HVL8", 504L, bigInteger0);
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, "T*5w|;", bigInteger0, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\"}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Double double0 = new Double(1000000.0);
      Byte byte0 = new Byte((byte)11);
      JSONPath.containsValue((Object) double0, "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer", (Object) byte0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLSyntaxErrorException0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      BigInteger bigInteger0 = BigInteger.TEN;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      jSONPath_WildCardSegment0.eval(jSONPath0, bigInteger0, sQLNonTransientConnectionException0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      assertEquals(PropertyNamingStrategy.NoChange, propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(90, true);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("resolveTask", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.containsValue((Object) serializeConfig0, (Object) serializeConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Double double0 = new Double(1000000.0);
      String string0 = "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer";
      byte byte0 = (byte)116;
      Byte byte1 = new Byte((byte)116);
      JSONPath.containsValue((Object) double0, "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer", (Object) byte1);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = null;
      try {
        jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SafeMode;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      featureArray0[1] = feature1;
      // Undeclared exception!
      try { 
        JSONPath.extract("Z", "max", parserConfig0, 831, featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      MockUUID.fromString("/cause/stackTrace/1");
      String string0 = "com.alibaba.fastjson.JSONPath$ArrayAccessSegment";
      JSONPath.extract("", "/cause/stackTrace/1");
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = ":>@3y{L";
      String string1 = "t~";
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      int int0 = 1836;
      // Undeclared exception!
      try { 
        JSONPath.extract(":>@3y{L", "t~", parserConfig0, 1836, (Feature[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // :
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = "'\\s*,\\s*'";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      MockThrowable mockThrowable0 = new MockThrowable("com.alibaba.fastjson.JSONPath$Operator");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.alibaba.fastjson.JSONPath$Operator", "com.alibaba.fastjson.JSONPath$Operator", mockThrowable0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLTransientConnectionException0);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        JSONPath.extract("'s*,s*'", "UseISO8601DateFormat");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // string
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("not");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      String string0 = "!x{LA^O72ysF=jq=@]";
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException0.forEach(consumer0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "/stackTrace/10", (int[]) null, sQLRecoverableException0);
      sQLRecoverableException0.setNextException(batchUpdateException0);
      sQLRecoverableException0.spliterator();
      boolean boolean0 = true;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("scanInt", true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "t[%Z/L4e(&fv";
      stringArray0[1] = "scanInt";
      stringArray0[2] = "!x{LA^O72ysF=jq=@]";
      stringArray0[3] = "not";
      stringArray0[4] = "!x{LA^O72ysF=jq=@]";
      stringArray0[5] = "/stackTrace/10";
      stringArray0[6] = "t[%Z/L4e(&fv";
      JSONPath.reserveToArray(sQLRecoverableException0, stringArray0);
      String string1 = "/cause/cause/stackTrace/12";
      String string2 = "v^Fi";
      Pattern pattern0 = Pattern.compile(string2);
      String string3 = "isNotWriteDefaultValue";
      int int0 = 1560;
      Pattern.compile(string3, int0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement(string1, pattern0, jSONPath_Operator0);
      int int1 = (-3536);
      int int2 = (-2028280881);
      int int3 = 58;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(int1, int2, int3);
      Object object0 = null;
      boolean boolean1 = jSONPath_RegMatchSegement0.apply(jSONPath0, jSONPath_RangeSegment0, stringArray0[5], object0);
      int int4 = 2459;
      DataTruncation dataTruncation0 = new DataTruncation(int4, boolean1, boolean0, int0, int1);
      try { 
        Short.valueOf(stringArray0[6]);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"t[%Z/L4e(&fv\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("not");
      jSONPath0.isRef();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("4&q3IjqS2qB/", ",+<a~bb", jSONPath_Operator0);
      Short short0 = new Short((short)9216);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      DataTruncation dataTruncation0 = new DataTruncation((short)9216, false, false, (short)9216, 2741);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("4&q3IjqS2qB/");
      UUID uUID0 = MockUUID.fromString("not");
      jSONPath_NullSegement0.apply(jSONPath0, uUID0, "not", jSONPath0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("BETWEEN");
      JSONPath.Operator jSONPath_Operator1 = jSONPath_JSONPathParser0.readOp();
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(">qcZqOi");
      jSONPath_JSONPathParser0.readOp();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("/cause/cause/stackTrace/0", serializeConfig0, parserConfig0);
      Vector<Object> vector0 = new Vector<Object>();
      jSONPath0.deepScan(jSONPath_JSONPathParser0, "qIOw,uYo,Bk'X^", vector0);
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-95));
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) byte0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      String[] stringArray0 = new String[2];
      stringArray0[0] = ":$WTx'f`Z=p3%S?2M[";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":\"Apple\",\"size\":99,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      long[] longArray0 = new long[2];
      longArray0[1] = 41L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement(":$WTx'f`Z=p3%S?2M[", longArray0, false);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntInSegement0);
      Pattern.compile("");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_Filter0);
      JSONPath jSONPath0 = new JSONPath(":$WTx'f`Z=p3%S?2M[");
      Class<JSONPath> class0 = JSONPath.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      javaBeanSerializer0.getLabelFilters();
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath_JSONPathParser0, ":$WTx'f`Z=p3%S?2M[");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Xca$e/stackTrace/3";
      JSONPath jSONPath0 = new JSONPath("not");
      long[] longArray0 = new long[9];
      longArray0[2] = 0L;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      longArray0[3] = 379L;
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath0, (Object) null);
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = null;
      try {
        jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"/cause/stackTrace\",\"color\":false,\"value\":null,\"value2\":\"a string\",\"number\":\"1\",\"x\":-99}");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig1 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig1 = ParserConfig.global;
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig1, parserConfig1);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      jSONPath_KeySetSegment0.eval(jSONPath0, (Object) null, serializeConfig0);
      Short short0 = new Short((short)102);
      JSONPath.paths((Object) null, serializeConfig0);
      jSONPath0.arrayAdd((Object) jSONPath_KeySetSegment0, (Object[]) null);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((short)102, 3968, 92);
      BigDecimal bigDecimal1 = new BigDecimal(0.0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      Class<?> class1 = javaBeanSerializer0.getType();
      parserConfig1.get(class1);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("{\"fruit\":\"Apple\",\"size\":\"/cause/stackTrace\",\"color\":false,\"value\":null,\"value2\":\"a string\",\"number\":\"1\",\"x\":-99}", jSONPath_KeySetSegment0, jSONPath_Operator0);
      jSONPath_RefOpSegement0.apply(jSONPath0, jSONPath_KeySetSegment0, sQLNonTransientConnectionException0, sQLTransientConnectionException0);
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("-99", jSONPath_WildCardSegment0, jSONPath_Operator0);
      JSONPath.compile("-99");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-99");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/cause/cause/stackTrace/5");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("/cause/cause/stackTrace/5", jSONPath_WildCardSegment0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      Long long0 = new Long(0);
      Integer integer1 = new Integer(0);
      jSONPath_RefOpSegement0.apply(jSONPath0, integer0, integer1, "$VALUES");
      ParserConfig parserConfig1 = new ParserConfig(false);
      jSONPath0.arrayAdd((Object) jSONPath_WildCardSegment0, (Object[]) null);
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "]7HOfk";
      String string0 = "A?-98SC&_z*rS\\i#r?";
      stringArray0[1] = "A?-98SC&_z*rSi#r?";
      stringArray0[2] = "og@Fjt";
      stringArray0[3] = "]7HOfk";
      stringArray0[4] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":[],\"value2\":false,\"number\":\"1\"}";
      stringArray0[5] = "";
      stringArray0[6] = "";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("]7HOfk");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("/cause/stackTrace/6");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.parseArrayAccessFilter(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("jDbs5u", 165L, (-719183851066137122L), false);
      JSONPath.compile("jDbs5u");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stacQTrace/4");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      String string0 = "unsupported array put operation. ";
      String[] stringArray0 = new String[6];
      stringArray0[0] = "unsupported array put operation. ";
      stringArray0[1] = "unsupported array put operation. ";
      stringArray0[2] = "unsupported array put operation. ";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("=UBl1", "unsupported array put operation. ", "unsupported array put operation. ", stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String string0 = "yyyy\u5E74M\u6708d\u65E5 HH:mm:ss";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.joda.time.format.DateTimeFormatter";
      String string1 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.alibaba.fastjson.JSONPath$NullSegement");
      JSONPath.eq("yyyy\u5E74M\u6708d\u65E5 HH:mm:ss", "org.joda.time.format.DateTimeFormatter");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      JSONPath.extract("{\"x\":\"hello\",\"illeal jsonpath syntax. \":7,\"z\":true,\"b\":\"a string\",\"unixtime\":null}", "b");
      JSONPath jSONPath0 = new JSONPath("b");
      JSONPath.eq("a string", "{\"x\":\"hello\",\"illeal jsonpath syntax. \":7,\"z\":true,\"b\":\"a string\",\"unixtime\":null}");
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.parser.safeMode", (-1580386065683472715L), 0, false);
      ParserConfig parserConfig1 = ParserConfig.global;
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      parserConfig1.getDeserializer((Class<?>) class0, (Type) class0);
      parserConfig0.getDeserializer((Type) class0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fastjson.parser.autoTypeAccept", "a string");
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("(II)V", "/cause/stackTrace/4", 0, sQLSyntaxErrorException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLSyntaxErrorException1);
      JSONPath.reserveToArray("b?^('ZY;xVRY", (String[]) null);
      Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      String string0 = "f^-b";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("f^-b");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("/cause/stackTrace/7", (Pattern) null, jSONPath_Operator0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.ListSerializer", serializeConfig0, parserConfig0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(43, 3460, 57);
      jSONPath_RegMatchSegement0.apply(jSONPath0, jSONPath0, "/cause/stackTrace/7", mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      JSONPath.isInt(class0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("KL\"P~9my@xD");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String[] stringArray0 = new String[6];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Double double0 = new Double(2803.0);
      JSONPath.eq(stringArray0[5], double0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      String[] stringArray0 = new String[6];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Double double0 = new Double(2803.0);
      JSONPath.eq(stringArray0[5], double0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = new JSONPath("K");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(116);
      jSONPath_ArrayAccessSegment0.eval(jSONPath0, (Object) null, (Object) null);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("K", false);
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.setValue(jSONPath0, stringArray0[0], (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "unsupported array put operation. ";
      stringArray0[1] = "unsupported array put operation. ";
      stringArray0[2] = "unsupported array put operation. ";
      stringArray0[3] = "unsupported array put operation. ";
      stringArray0[4] = "unsupported array put operation. ";
      stringArray0[5] = "unsupported array put operation. ";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("unsupported array put operation. ", stringArray0, true);
      String string0 = "RUDWv#^}AZoN`o";
      JSONPath jSONPath0 = new JSONPath("RUDWv#^}AZoN`o");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("JZB/i", serializeConfig0, parserConfig0);
      ParserConfig parserConfig1 = new ParserConfig(false);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$PropertySegment");
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      ParserConfig parserConfig2 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath2 = new JSONPath("{\"x\":[[]],\"y\":7,\"z\":true,\"/stackTrace/1\":[-99],\"b\":{}}", serializeConfig0, parserConfig2);
      JSONPath.arrayAdd((Object) "RUDWv#^}AZoN`o", "fastjson.parser.safeMode", (Object[]) null);
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem("q}EOzAx#_3}", 664);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":{},\"value2\":false,\"number\":\"1\"}");
      String string0 = "com.alibaba.fastjson.JSONPath$RangeSegment";
      Vector<Object> vector0 = new Vector<Object>();
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      jSONPath0.evalSize(jSONPath_MultiPropertySegment0);
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment1 = new JSONPath.MultiPropertySegment(stringArray0);
      jSONPath0.evalKeySet(jSONPath_MultiPropertySegment1);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$RangeSegment");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      JSONPath.Operator.values();
      String string0 = "{\"fruit\":\"Apple\",\"size\":-99,\"color\":\"Red\",\"com.alibaba.fastjson.parser.deserializer.FieldDeserializer\":null,\"value2\":false,\"Or\":\"1\",\"x\":false}";
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 615L;
      boolean boolean0 = false;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("{\"fruit\":\"Apple\",\"size\":-99,\"color\":\"Red\",\"com.alibaba.fastjson.parser.deserializer.FieldDeserializer\":null,\"value2\":false,\"Or\":\"1\",\"x\":false}", longArray0, false);
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":-99,\"color\":\"Red\",\"com.alibaba.fastjson.parser.deserializer.FieldDeserializer\":null,\"value2\":false,\"Or\":\"1\",\"x\":false}");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_IntInSegement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"fruit\":\"Apple\",\"size\":-99,\"color\":\"Red\",\"com.alibaba.fastjson.parser.deserializer.FieldDeserializer\":null,\"value2\":false,\"Or\":\"1\",\"x\":false}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Short> class0 = Short.TYPE;
      parserConfig0.get(class0);
      Pattern.compile("autoTypeAccept");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONPath jSONPath0 = JSONPath.compile("6-!For7fENWK./OY");
      jSONPath0.evalKeySet(parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "autoTypeAccept");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Xca$e/stackTrace/3";
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("Xca$e/stackTrace/3", "Xca$e/stackTrace/3", jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("Xca$e/stackTrace/3");
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NOT_BETWEEN;
      String[] stringArray1 = new String[4];
      stringArray1[0] = "Xca$e/stackTrace/3";
      stringArray1[1] = "Xca$e/stackTrace/3";
      stringArray1[2] = "Xca$e/stackTrace/3";
      stringArray1[3] = "Xca$e/stackTrace/3";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath_Operator0, stringArray1);
      assertEquals(4, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Pattern.compile("autoTypeAccept");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONPath jSONPath0 = JSONPath.compile("6-!For7fENWK./OY");
      Set<?> set0 = jSONPath0.evalKeySet(parserConfig0);
      assertFalse(set0.contains("6-!For7fENWK./OY"));
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      JSONPath.extract("{\"x\":\"hello\",\"illeal jsonpath syntax. \":7,\"z\":true,\"b\":\"a string\",\"unixtime\":null}", ";");
      JSONPath jSONPath0 = new JSONPath(";");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransactionRollbackException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLNonTransientException0);
      sQLRecoverableException0.spliterator();
      JSONPath jSONPath1 = new JSONPath("/");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Instant instant0 = MockInstant.now();
      ChronoUnit chronoUnit0 = ChronoUnit.SECONDS;
      Instant instant1 = MockInstant.plus(instant0, (long) 3089, (TemporalUnit) chronoUnit0);
      Instant instant2 = MockInstant.minusMillis(instant1, 989);
      Date date0 = Date.from(instant2);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jSONPath0;
      objectArray0[1] = (Object) jSONPath0;
      // Undeclared exception!
      try { 
        jSONPath1.arrayAdd((Object) date0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.util.Date
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Xca$e/stackTrace/3", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("Xca$e/stackTrace/3", serializeConfig0, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      MockCalendar.getInstance();
      jSONPath0.arrayAdd((Object) mockPrintStream0, (Object[]) null);
      assertEquals("Xca$e/stackTrace/3", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("99", "99", 68);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("99", sQLInvalidAuthorizationSpecException0);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("Z`>8mu", 68, (-2068L), true);
      JSONPath jSONPath0 = new JSONPath("KXd59C");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      BigInteger bigInteger0 = BigInteger.TEN;
      HashSet hashSet0 = (HashSet)jSONPath_KeySetSegment0.eval(jSONPath0, sQLIntegrityConstraintViolationException0, bigInteger0);
      assertNotNull(hashSet0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(68, 92, 92);
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, "KXd59C", hashSet0, mockGregorianCalendar0);
      assertEquals(1, hashSet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"evalSize error : \",\"value\":true,\"value2\":\"a string\",\"number\":\"1\",\"x\":-99}");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLNonTransientConnectionException0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig1 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig1 = ParserConfig.global;
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig1, parserConfig1);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      jSONPath_KeySetSegment0.eval(jSONPath0, (Object) null, serializeConfig0);
      Short short0 = new Short((short)102);
      JSONPath.paths((Object) null, serializeConfig0);
      jSONPath0.arrayAdd((Object) jSONPath_KeySetSegment0, (Object[]) null);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((short)102, 3968, 92);
      BigDecimal bigDecimal1 = new BigDecimal(0.0);
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = null;
      try {
        jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MultiPropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$MinSegment";
      stringArray0[1] = "com.alibaba.fastjson.JSONPath$MinSegment";
      stringArray0[2] = "com.alibaba.fastjson.JSONPath$MinSegment";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      boolean boolean0 = jSONPath0.removePropertyValue(jSONPath_MultiPropertySegment0, "scanLong", true);
      assertFalse(boolean0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("scanLong", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("scanLong", "com.alibaba.fastjson.JSONPath$MinSegment", 181, (Throwable) null);
      sQLRecoverableException0.spliterator();
      SQLDataException sQLDataException0 = new SQLDataException("com.alibaba.fastjson.JSONPath$MinSegment", "com.alibaba.fastjson.JSONPath$MinSegment", 43, sQLRecoverableException0);
      sQLTransientConnectionException0.getSuppressed();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com.alibaba.fastjson.JSONPath$MinSegment", false);
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath_PropertySegment0, stringArray0);
      assertEquals(3, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("hashCode");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("hashCode", (SerializeConfig) null, parserConfig0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{\"{\"fruit\":\"Apple\",\"size\":-99,\"color\":\"Red\",\"com.alibaba.fastjson.parser.deserializer.FieldDeserializer\":null,\"value2\":false,\"number\":\"1\",\"x\":[]}\":\"hello\",\"y\":99,\"z\":true,\"a\":[],\"b\":{},\"xx\":99}");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{\"/stackTrace/11\":null,\"y\":7,\"/stackTrace/7\":true,\"a\":[],\"xx\":{}}", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      DataTruncation dataTruncation0 = new DataTruncation(116, false, false, (-1608), 12);
      int[] intArray0 = new int[8];
      intArray0[0] = 116;
      intArray0[1] = 116;
      intArray0[2] = 116;
      intArray0[3] = 12;
      intArray0[4] = (-1608);
      intArray0[5] = 12;
      intArray0[6] = (-1608);
      intArray0[7] = 12;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      Pattern pattern0 = Pattern.compile("hashCode");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("writeDirectNonContext", pattern0, jSONPath_Operator0);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment1 = new JSONPath.MultiIndexSegment(intArray0);
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        jSONPath_MultiIndexSegment0.eval(jSONPath0, "{\"{\"fruit\":\"Apple\",\"size\":-99,\"color\":\"Red\",\"com.alibaba.fastjson.parser.deserializer.FieldDeserializer\":null,\"value2\":false,\"number\":\"1\",\"x\":[]}\":\"hello\",\"y\":99,\"z\":true,\"a\":[],\"b\":{},\"xx\":99}", double0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("6f'0PJ");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("6f'0PJ", "6f'0PJ", 5754);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLFeatureNotSupportedException0);
      int[] intArray0 = new int[6];
      intArray0[0] = 114;
      intArray0[1] = 5754;
      intArray0[2] = 5754;
      intArray0[3] = 5754;
      intArray0[4] = 5754;
      intArray0[5] = 5754;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      // Undeclared exception!
      try { 
        jSONPath_MultiIndexSegment0.eval(jSONPath0, (Object) null, sQLSyntaxErrorException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "unsupported array put operation. ";
      stringArray0[1] = "unsupported array put operation. ";
      stringArray0[2] = "unsupported array put operation. ";
      stringArray0[3] = "unsupported array put operation. ";
      stringArray0[4] = "unsupported array put operation. ";
      stringArray0[5] = "unsupported array put operation. ";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Double double0 = new Double(2803.0);
      JSONPath.eq("unsupported array put operation. ", double0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = new JSONPath("K");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(116);
      Object object0 = jSONPath_ArrayAccessSegment0.eval(jSONPath0, (Object) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/5S{?zn91");
      Integer integer0 = new Integer((-658));
      jSONPath0.set((Object) integer0, (Object) "/5S{?zn91", true);
      JSONPath.compile("/5S{?zn91");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.serializer.CharArrayCodec");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      long[] longArray0 = new long[6];
      longArray0[1] = 356L;
      longArray0[1] = 356L;
      longArray0[3] = 356L;
      longArray0[4] = 356L;
      longArray0[5] = 356L;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("gi'O+rs=&:qp,T3");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"'O+rs=&:qp\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      JSONPath.reserveToArray("2=Du", stringArray0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/Cause/StackTrace/0");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(3, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = "CRt\\{&19g7lv8wGAM";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("CRt{&19g7lv8wGAM");
      jSONPath_JSONPathParser0.buildArraySegement("CRt{&19g7lv8wGAM");
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      PropertyNamingStrategy propertyNamingStrategy0 = serializeConfig0.propertyNamingStrategy;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Class<JSONValidator.Type>[] classArray0 = (Class<JSONValidator.Type>[]) Array.newInstance(Class.class, 5);
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      classArray0[0] = class0;
      Class<JSONValidator.Type> class1 = JSONValidator.Type.class;
      classArray0[1] = class1;
      Class<JSONValidator.Type> class2 = JSONValidator.Type.class;
      classArray0[2] = class2;
      Class<JSONValidator.Type> class3 = JSONValidator.Type.class;
      classArray0[3] = class3;
      Class<JSONValidator.Type> class4 = JSONValidator.Type.class;
      classArray0[4] = class4;
      serializeConfig0.configEnumAsJavaBean(classArray0);
      MockThrowable mockThrowable0 = new MockThrowable();
      serializeConfig0.setAsmEnable(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'C, but 'M'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "]7HOfk";
      stringArray0[1] = "A?-98SC&_z*rSi#r?";
      stringArray0[2] = "og@Fjt";
      stringArray0[3] = "]7HOfk";
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":[],\"value2\":false,\"number\":\"1\"}";
      stringArray0[4] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":[],\"value2\":false,\"number\":\"1\"}";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "q*<o~+U\"jE";
      stringArray0[8] = "";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig(32);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("writeNoneASM", serializeConfig0, parserConfig0);
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment1 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/cause/stackTrace/6", true);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fastjson.parser.autoTypeAccept", "");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLSyntaxErrorException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "A?-98SC&_z*rSi#r?", (-1994502753), sQLTimeoutException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":[],\"value2\":false,\"number\":\"1\"}", sQLRecoverableException0);
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, sQLFeatureNotSupportedException0, "q*<o~+U\"jE");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":{},\"value2\":false,\"number\":\"1\"}");
      Vector<Object> vector0 = new Vector<Object>();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$RangeSegment");
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, javaBeanSerializer0, sQLClientInfoException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLSyntaxErrorException0);
      JSONPath jSONPath0 = new JSONPath("unsupported array put operation. ");
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      String[] stringArray0 = new String[0];
      JSONPath.reserveToObject("/stackTrace/6", stringArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeAccept");
      JSONPath jSONPath0 = new JSONPath("/stackTrace/6");
      Class<Calendar> class0 = Calendar.class;
      JSONPath.eq(parserConfig0, fileSystemHandling0);
      jSONPath0.getJavaBeanSerializer(class0);
      jSONPath0.arrayAdd((Object) null, (Object[]) stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "unsupported array put operation. ";
      stringArray0[1] = "unsupported array put operation. ";
      stringArray0[2] = "unsupported array put operation. ";
      stringArray0[3] = "unsupported array put operation. ";
      stringArray0[4] = "unsupported array put operation. ";
      stringArray0[5] = "unsupported array put operation. ";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Double double0 = new Double(2803.0);
      JSONPath.eq("unsupported array put operation. ", double0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = new JSONPath("K");
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, "unsupported array put operation. ", "/stackTrace/13");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("RUDWv#^}AZoN`o");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      String string0 = "stackTrace";
      long[] longArray0 = new long[3];
      longArray0[0] = 489L;
      longArray0[1] = 794L;
      longArray0[2] = (-131L);
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("stackTrace", longArray0, false);
      JSONPath jSONPath2 = new JSONPath("bXl_i1 `xz8pWg#)7-2");
      JSONPath jSONPath3 = new JSONPath("com.alibaba.fastjson.JSONPath$Context");
      // Undeclared exception!
      try { 
        jSONPath2.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : bXl_i1 `xz8pWg#)7-2
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("hashCode");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("hashCode", (SerializeConfig) null, parserConfig0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{\"{\"fruit\":\"Apple\",\"size\":-99,\"color\":\"Red\",\"com.alibaba.fastjson.parser.deserializer.FieldDeserializer\":null,\"value2\":false,\"number\":\"1\",\"x\":[]}\":\"hello\",\"y\":99,\"z\":true,\"a\":[],\"b\":{},\"xx\":99}");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{\"/stackTrace/11\":null,\"y\":7,\"z\":true,\"a\":[],\"xx\":true}", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      DataTruncation dataTruncation0 = new DataTruncation(116, false, false, (-1608), 12);
      int[] intArray0 = new int[8];
      intArray0[0] = 116;
      intArray0[1] = 116;
      intArray0[2] = 116;
      intArray0[3] = 12;
      intArray0[4] = (-1608);
      intArray0[5] = 12;
      intArray0[6] = (-1608);
      intArray0[7] = 12;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      Pattern pattern0 = Pattern.compile("hashCode");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("writeDirectNonContext", pattern0, jSONPath_Operator0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath_RegMatchSegement0.apply(jSONPath1, jSONPath0, "{\"/stackTrace/11\":null,\"y\":7,\"z\":true,\"a\":[],\"xx\":true}", javaBeanSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("stackTrace", (String) null, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("stackTrace");
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NOT_BETWEEN;
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath_Operator1, "stackTrace", jSONPath0);
      Pattern pattern0 = Pattern.compile("d$zO");
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("}9", pattern0, jSONPath_Operator0);
      boolean boolean1 = jSONPath_RegMatchSegement0.apply(jSONPath0, pattern0, "stackTrace", jSONPath_StringOpSegement0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = null;
      Double double0 = new Double((-1196.903619483));
      // Undeclared exception!
      try { 
        JSONPath.set((Object) null, (String) null, (Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("I%W:vU,@L03X'2}3gM", 1117.51343873856, jSONPath_Operator0);
      JSONPath jSONPath0 = null;
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Byte byte0 = new Byte((byte) (-107));
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLException sQLException0 = new SQLException("MP,!&P^");
      DataTruncation dataTruncation0 = new DataTruncation(9, false, true, 9, 91, sQLException0);
      String string0 = "xzD4'6\\{M@DM";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<JSONPath> class0 = JSONPath.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      JSONPath.set((Object) dataTruncation0, "xzD4'6{M@DM", (Object) javaBeanDeserializer0);
      String string1 = "aZ@dgs1fiV";
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement(string1, parserConfig0.DENY_PROPERTY_INTERNAL, jSONPath_Operator1);
      Map<String, ClientInfoStatus> map0 = null;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(map0);
      // Undeclared exception!
      try { 
        jSONPath_StringOpSegement0.apply(jSONPath0, sQLClientInfoException0, string0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$StringOpSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("{\"/stackTrace/7\":false,\"size\":-99,\"color\":\"Red\",\"value\":true,\"value2\":true,\"number\":\"1\"}");
      JSONPath jSONPath0 = JSONPath.compile("{\"/stackTrace/7\":false,\"size\":-99,\"color\":\"Red\",\"value\":true,\"value2\":true,\"number\":\"1\"}");
      boolean boolean0 = JSONPath.set((Object) null, "/stackTrace/9", (Object) jSONPath_NullSegement0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      boolean boolean1 = jSONPath_NullSegement0.apply(jSONPath0, jSONPath0, "{\"/stackTrace/7\":false,\"size\":-99,\"color\":\"Red\",\"value\":true,\"value2\":true,\"number\":\"1\"}", jSONPath_SizeSegment0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NOT_IN");
      boolean boolean0 = JSONPath.eq("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("hashCode");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("hashCode", (SerializeConfig) null, parserConfig0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{\"x\":\"hello\",\"y\":99,\"z\":true,\"/cause/stackTrace/8\":[],\"b\":{},\", but '\":99,\"xxx\":true}");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("fastjson.parser.autoTypeAccept", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      DataTruncation dataTruncation0 = new DataTruncation(109, false, false, (-1608), 4);
      JSONPath.reserveToArray("{\"x\":\"hello\",\"y\":99,\"z\":true,\"/cause/stackTrace/8\":[],\"b\":{},\", but '\":99,\"xxx\":true}", (String[]) null);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment(",  end ", mockPrintStream0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_ValueSegment0, jSONPath_ValueSegment0, false);
      Long long0 = new Long(109);
      Integer integer0 = new Integer((-2792));
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      jSONPath_ValueSegment0.apply(jSONPath0, long0, integer0, (Object) null);
      Integer integer1 = new Integer(56);
      // Undeclared exception!
      try { 
        jSONPath_FilterGroup0.apply(jSONPath1, ",  end ", integer1, "fastjson.parser.autoTypeSupport");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = "bj.@ibf@D";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("bj.@ibf@D");
      jSONPath_JSONPathParser0.readString();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-5808505196107383703L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String string0 = "CRt\\{&19g7lv8wGAM";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("CRt{&19g7lv8wGAM");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'C, but 'M'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "RLIKE");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("kJH4Cd?~e");
      FileSystemHandling.shouldAllThrowIOExceptions();
      long long0 = (-1580386065683472715L);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'k, but 'e'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("gy");
      jSONPath0.isRef();
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "gy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("K>4 |L]o9`W*[<?+", "K>4 |L]o9`W*[<?+", jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("K>4 |L]o9`W*[<?+");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, "com.alibaba.fastjson.JSONPath$NotNullSegement", jSONPath_WildCardSegment0, jSONPath_WildCardSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("not");
      boolean boolean0 = jSONPath0.isRef();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("4&q3IjqS2qB/", ",+<a~bb", jSONPath_Operator0);
      Short short0 = new Short((short)9216);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      boolean boolean1 = jSONPath_StringOpSegement0.apply(jSONPath0, short0, "not", jSONPath_FilterSegment0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$MinSegment");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$MinSegment");
      Float float0 = new Float(1383.0F);
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("6f'ePX", (long[]) null, false);
      Byte byte0 = new Byte((byte) (-84));
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntInSegement0);
      boolean boolean1 = jSONPath_IntInSegement0.apply(jSONPath0, bigDecimal0, "com.alibaba.fastjson.JSONPath$MinSegment", jSONPath_JSONPathParser0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "stackTrace";
      stringArray0[1] = "ui!OFpA`!eSX3A";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SQLTransientException sQLTransientException0 = new SQLTransientException("G2(krB!(vLT<U8b", "G2(krB!(vLT<U8b");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("%", "ui!OFpA`!eSX3A", sQLTransientException0);
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(sQLNonTransientConnectionException0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("gy");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      SerializeConfig serializeConfig0 = new SerializeConfig(61, false);
      JSONPath jSONPath1 = new JSONPath("pI8 ,", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath1.containsValue((Object) "gy", (Object) "gy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. pI8 ,
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("com.alibaba.fastjson.util.IdentityHashMap$Entry", (-851L), (-851L), true);
      JSONPath jSONPath0 = new JSONPath("Pe");
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, jSONPath0, "Pe", "Pe");
      assertFalse(boolean0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("[NV&U=:^");
      boolean boolean1 = jSONPath_NotNullSegement0.apply(jSONPath0, "[NV&U=:^", "com.alibaba.fastjson.util.IdentityHashMap$Entry", "com.alibaba.fastjson.util.IdentityHashMap$Entry");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "unsupported array put operation. ";
      stringArray0[1] = "unsupported array put operation. ";
      stringArray0[2] = "unsupported array put operation. ";
      stringArray0[3] = "unsupported array put operation. ";
      stringArray0[4] = "unsupported array put operation. ";
      stringArray0[5] = "unsupported array put operation. ";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("unsupported array put operation. ", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath("RUDWv#^}AZoN`o");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("JZB/i", serializeConfig0, parserConfig0);
      ParserConfig parserConfig1 = new ParserConfig(false);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$PropertySegment");
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      ParserConfig parserConfig2 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath2 = new JSONPath("{\"x\":[[]],\"y\":7,\"z\":true,\"/stackTrace/1\":[-99],\"b\":{}}", serializeConfig0, parserConfig2);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("q}EOzAx#_3}", "unsupported array put operation. ");
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath1, jSONPath2, sQLInvalidAuthorizationSpecException0, "RUDWv#^}AZoN`o");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java/io/IOException");
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("2c=Du", (String[]) null);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      JSONPath.compile("hashCode");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("hashCode", (SerializeConfig) null, parserConfig0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\", but '\":99,\"xxx\":true}");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{\"/stackTrace/11\":null,\"y\":7,\"z\":true,\"a\":[],\"xx\":true}", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      DataTruncation dataTruncation0 = new DataTruncation(116, false, false, (-1608), 12);
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\", but '\":99,\"xxx\":true}", (String[]) null);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONPath jSONPath0 = new JSONPath("nin");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("RLIKE", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("jg", "RLIKE", map0);
      jSONPath0.keySet((Object) sQLClientInfoException1);
      String string0 = jSONPath0.getPath();
      assertEquals("nin", string0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String[] stringArray0 = new String[19];
      stringArray0[0] = "unsupported array put operation. ";
      stringArray0[1] = "unsupported array put operation. ";
      stringArray0[2] = "unsupported array put operation. ";
      stringArray0[3] = "unsupported array put operation. ";
      stringArray0[4] = "unsupported array put operation. ";
      stringArray0[5] = "unsupported array put operation. ";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("unsupported array put operation. ", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath("RUDWv#^}AZoN`o");
      SerializeConfig.getGlobalInstance();
      ParserConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "unsupported array put operation. ", jSONPath0, throwableDeserializer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "unsupported array put operation. ";
      stringArray0[1] = "unsupported array put operation. ";
      stringArray0[2] = "unsupported array put operation. ";
      stringArray0[4] = "unsupported array put operation. ";
      stringArray0[5] = "unsupported array put operation. ";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("unsupported array put operation. ", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath("RUDWv#^}AZoN`o");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("JZB/i", serializeConfig0, parserConfig0);
      ParserConfig parserConfig1 = new ParserConfig(false);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig1, class0);
      jSONPath_StringInSegement0.apply(jSONPath0, "unsupported array put operation. ", jSONPath1, throwableDeserializer0);
      jSONPath0.getPath();
      jSONPath1.getPropertyValues("unsupported array put operation. ");
      DataTruncation dataTruncation0 = new DataTruncation((-2330), false, false, 48, 1690);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) dataTruncation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : RUDWv#^}AZoN`o
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(9, false);
      ClassLoader.getSystemClassLoader();
      SQLTransientException sQLTransientException0 = new SQLTransientException("%", "%");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("%");
      SerializeConfig serializeConfig1 = (SerializeConfig)JSONPath.reserveToObject(serializeConfig0, (String[]) null);
      assertTrue(serializeConfig1.isAsmEnable());
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}";
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      byte byte0 = (byte)0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLNonTransientConnectionException0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath1 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", serializeConfig0, parserConfig0);
      JSONPath.reserveToObject(sQLNonTransientConnectionException0, (String[]) null);
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, sQLTransientConnectionException0, jSONPath1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      JSONPath jSONPath0 = new JSONPath("M)DF");
      JSONPath jSONPath1 = JSONPath.compile("M)DF");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath1, "", 0, jSONPath_KeySetSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"/cause/stackTrace/12\":{},\"getFieldValue error.\":false}");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLSyntaxErrorException0);
      JSONPath jSONPath1 = new JSONPath("s,;Ed5CV_S96'OC**ta");
      JSONPath.WildCardSegment jSONPath_WildCardSegment1 = JSONPath.WildCardSegment.instance;
      jSONPath_WildCardSegment1.eval(jSONPath1, jSONPath1, sQLFeatureNotSupportedException0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      assertEquals(PropertyNamingStrategy.NoChange, propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(9, false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) "*", (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String string0 = "com.alibaba.fastjson.JSONPath$MinSegment";
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment");
      String string1 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$MinSegment";
      stringArray0[1] = "com.alibaba.fastjson.JSONPath$MinSegment";
      stringArray0[2] = "com.alibaba.fastjson.JSONPath$MinSegment";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      jSONPath0.removePropertyValue(jSONPath_MultiPropertySegment0, "scanLong", true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$MinSegment");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "stackTrace";
      stringArray0[1] = "ui!OFpA`!eSX3A";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = new JSONPath("nx@6");
      Object object0 = jSONPath_MultiPropertySegment0.eval(jSONPath0, "stackTrace", "stackTrace");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      jSONPath0.removePropertyValue(jSONPath_MultiPropertySegment0, "stackTrace", true);
      JSONPath.paths(object0, serializeConfig0);
      jSONPath0.evalKeySet(jSONPath_MultiPropertySegment0);
      Random.setNextRandom((-515));
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.alibaba.fastjson.JSONPath$MinSegment");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$MinSegment");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-2777L));
      longArray0[0] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("}wlm-w{X=%emVV<gf=i", longArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("}wlm-w{X=%emVV<gf=i");
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, "}wlm-w{X=%emVV<gf=i", long0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("|`d6RB9", (Long[]) null, false);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      JSONPath jSONPath0 = new JSONPath("|`d6RB9", serializeConfig0, parserConfig0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-783);
      intArray0[1] = (-783);
      intArray0[2] = (-783);
      intArray0[3] = (-783);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("fastjson.parser.autoTypeAccept", "/SG_mVJ><Q|", (-783), intArray0);
      // Undeclared exception!
      try { 
        jSONPath_IntObjInSegement0.apply(jSONPath0, batchUpdateException0, (Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$IntObjInSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      JSONPath.compile("hashCode");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("hashCode", (SerializeConfig) null, parserConfig0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":99}");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{\"/stackTrace/11\":null,\"y\":7,\"z\":true,\"a\":[],\"xx\":true}", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      DataTruncation dataTruncation0 = new DataTruncation(116, false, false, (-1608), 12);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("evalSize error : ", 0L, (-1519L), false);
      // Undeclared exception!
      try { 
        jSONPath_IntBetweenSegement0.apply(jSONPath0, "{\"/stackTrace/11\":null,\"y\":7,\"z\":true,\"a\":[],\"xx\":true}", sQLTransientConnectionException0, jSONPath0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "stackTrace";
      stringArray0[1] = "ui!OFpA`!eSX3A";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = new JSONPath("Vx@i");
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, "stackTrace", "stackTrace");
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "]7HOfk";
      stringArray0[1] = "A?-98SC&_z*rSi#r?";
      stringArray0[2] = "og@Fjt";
      stringArray0[3] = "]7HOfk";
      stringArray0[4] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":[],\"value2\":false,\"number\":\"1\"}";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "q*<o~+U\"jE";
      stringArray0[8] = "";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig(32);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("writeNoneASM", serializeConfig0, parserConfig0);
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment1 = new JSONPath.MultiPropertySegment(stringArray0);
      jSONPath_MultiPropertySegment0.eval(jSONPath0, jSONPath_MultiPropertySegment1, "A?-98SC&_z*rSi#r?");
      JSONPath jSONPath1 = JSONPath.compile("");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      Object object0 = null;
      jSONPath_MultiPropertySegment0.eval(jSONPath1, jSONPath1, object0);
      String string0 = "";
      String string1 = "oub++D'";
      JSONPath.read(string0, string1);
      JSONPath.Filter jSONPath_Filter0 = null;
      boolean boolean0 = false;
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_Filter0, jSONPath_Filter0, boolean0);
      Object object1 = null;
      double double0 = 2308.18;
      Double double1 = new Double(double0);
      // Undeclared exception!
      try { 
        jSONPath_FilterGroup0.apply(jSONPath1, stringArray0[0], object1, double1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$FilterGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String string0 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":\"a string\"}";
      String string1 = "\"a string\"";
      JSONPath.extract("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":\"a string\"}", "\"a string\"");
      JSONPath jSONPath0 = new JSONPath(string1);
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowComment;
      featureArray0[1] = feature1;
      String string2 = "8\"RqN.5rZ";
      int int0 = 57;
      // Undeclared exception!
      try { 
        JSONPath.extract(string2, string2, parserConfig0, int0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        JSONPath.extract("MwYPHn", stringArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("org.springframework.cglib.proxy.Factory", serializeConfig0, (ParserConfig) null);
      JSONPath jSONPath1 = new JSONPath("toJdbc", serializeConfig0, (ParserConfig) null);
      jSONPath0.eval((Object) jSONPath1);
      Vector<Object> vector0 = new Vector<Object>();
      JSONPath jSONPath2 = JSONPath.compile("org.springframework.cglib.proxy.Factory");
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1102;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      jSONPath2.deepScan(jSONPath_MultiIndexSegment0, "org.springframework.cglib.proxy.Factory", vector0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "toJdbc";
      stringArray0[1] = "toJdbc";
      stringArray0[2] = "org.springframework.cglib.proxy.Factory";
      stringArray0[3] = "toJdbc";
      stringArray0[4] = "org.springframework.cglib.proxy.Factory";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      jSONPath1.evalSize("toJdbc");
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment1 = new JSONPath.MultiPropertySegment(stringArray0);
      jSONPath2.evalKeySet((Object) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("java.lang.StackTraceElement");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      JSONPath.compile("hashCode");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("hashCode", (SerializeConfig) null, parserConfig0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":99}");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("hashCode");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      sQLTransientConnectionException0.printStackTrace((PrintStream) mockPrintStream0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-1952);
      intArray0[1] = (-1952);
      intArray0[2] = 128;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("x|cv sm,,e_", "x|cv sm,,e_", (-1952), intArray0, sQLTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(batchUpdateException0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1952));
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("yyyy-MM-jd'T'HH:gm:ss.SSSSSSSS6", (-1952), jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntOpSegement0, (JSONPath.Filter) null, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.eval(jSONPath0, jSONPath_FilterSegment0, "springframework");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Xca$e/stackTrace/3";
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("Xca$e/stackTrace/3", "Xca$e/stackTrace/3", jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("Xca$e/stackTrace/3");
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NOT_BETWEEN;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath0, jSONPath_Operator1, sQLClientInfoException0);
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath_Operator1, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String string0 = "y_-_b.Ta>aJUg<'";
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("y_-_b.Ta>aJUg<'", 2620.9708473263, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      String string1 = "\\RUoHL/|";
      JSONPath jSONPath0 = new JSONPath("RUoHL/|");
      SerializeConfig.getGlobalInstance();
      SQLException sQLException0 = new SQLException("y_-_b.Ta>aJUg<'", "})`9`~");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("B3sF}`']z;V*pcV^");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-1580386065683472715L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Class<BigInteger> class0 = BigInteger.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("j>u4)*)R]S50j@=#7@s");
      SerializeConfig serializeConfig0 = new SerializeConfig(1362, false);
      JSONPath jSONPath1 = new JSONPath("j>u4)*)R]S50j@=#7@s", serializeConfig0, (ParserConfig) null);
      int int0 = jSONPath0.evalSize(jSONPath1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(">qcZqOi");
      jSONPath_JSONPathParser0.readOp();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("/cause/cause/stackTrace/0", serializeConfig0, parserConfig0);
      Vector<Object> vector0 = new Vector<Object>();
      jSONPath0.deepScan(jSONPath_JSONPathParser0, "fastjson.parser.deny.internal", vector0);
      assertEquals("/cause/cause/stackTrace/0", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.joda.time.format.DateTimeFormatter";
      JSONPath jSONPath0 = JSONPath.compile("com");
      String string0 = "com.alibaba.fastjson.JSONPath$RangeSegment";
      Vector<Object> vector0 = new Vector<Object>();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      jSONPath0.deepScan(jSONPath_WildCardSegment0, "com", vector0);
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(376, 376, 376);
      jSONPath0.evalSize(mockGregorianCalendar0);
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment1 = new JSONPath.MultiPropertySegment(stringArray0);
      jSONPath0.evalKeySet((Object) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("org.joda.time.format.DateTimeFormatter");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      JSONPath.Operator.values();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "like");
      Set<?> set0 = JSONPath.keySet((Object) sQLIntegrityConstraintViolationException0, "YlyqW4zb");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      JSONPath.compile("6f'ePX");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"~q {e4s:@[zu");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(323L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      JSONPath.compile("Xca$e/stackTrace/3");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      JSONPath jSONPath0 = new JSONPath("parse number key error");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Xca$e/stackTrace/3");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      JSONPath jSONPath0 = new JSONPath("unsupported array put operation. ");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(".null");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. .null
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/12");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("/stackTrace/12", "/stackTrace/5", jSONPath_Operator0);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_StringOpSegement0);
      JSONPath.Filter jSONPath_Filter1 = jSONPath_JSONPathParser0.filterRest(jSONPath_Filter0);
      assertSame(jSONPath_Filter1, jSONPath_StringOpSegement0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("{\"NOT_RLIKE\":[],\"y\":{\"NOT_RLIKE\":null},\"z\":true,\"a\":[],\"b\":{}}", sQLNonTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(1418, false, false, 7, 23, sQLIntegrityConstraintViolationException0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath.paths((Object) dataTruncation0, serializeConfig0);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 23;
      longArray0[1] = 1099511628211L;
      longArray0[2] = (long) 23;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("/cause/stackTrace", longArray0, false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer");
      jSONPath_JSONPathParser0.filterRest(jSONPath_IntInSegement0);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      String string0 = "hashCode";
      JSONPath.compile("hashCode");
      String string1 = "{\"x\":[],\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("hashCode", sQLNonTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(90, true, true, 90, 90, sQLIntegrityConstraintViolationException0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) serializeConfig0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      JSONPath.compile("false");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":-99}", 0L, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(2443);
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":true,\"value\":true,\"value2\":false,\"number\":\"1\"}";
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":true,\"value\":true,\"value2\":false,\"number\":\"1\"}");
      ParserConfig parserConfig0 = new ParserConfig(true);
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.SafeMode;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowSingleQuotes;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.SupportArrayToBean;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.InternFieldNames;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.DisableASM;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.SortFeidFastMatch;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.DisableCircularReferenceDetect;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.SupportArrayToBean;
      featureArray0[7] = feature7;
      JSONPath.extract("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[99],\"b\":{}}", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":true,\"value\":true,\"value2\":false,\"number\":\"1\"}", parserConfig0, (-1739), featureArray0);
      int int0 = 58;
      Integer integer0 = new Integer(int0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) string0, (Object) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":true,\"value\":true,\"value2\":false,\"number\":\"1\"}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("not");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = null;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = null;
      try {
        jSONPath_IntInSegement0 = new JSONPath.IntInSegement((String) null, (long[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      JSONPath.Operator.values();
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 615L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("{\"fruit\":\"Apple\",\"size\":-99,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", longArray0, false);
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":-99,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      Double double0 = new Double((-6247.3));
      JSONPath.keySet((Object) double0, "{\"fruit\":\"Apple\",\"size\":-99,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      String string0 = "\\\\\\.";
      String string1 = "null";
      int int0 = 0;
      int[] intArray0 = new int[7];
      intArray0[0] = int0;
      intArray0[1] = int0;
      int int1 = 612;
      intArray0[2] = int1;
      intArray0[3] = int0;
      int int2 = 97;
      intArray0[4] = int2;
      intArray0[5] = int0;
      intArray0[6] = int0;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      jSONPath_IntInSegement0.apply(jSONPath0, double0, jSONPath0, jSONPath_MultiIndexSegment0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(string0, string1, int0);
      jSONPath_IntInSegement0.apply(jSONPath0, jSONPath0, jSONPath0, sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      JSONPath.extract("{\"/stackTrace/10\":\"hello\",\"illeal jsonpath syntax. \":7,\"z\":true,\"b\":\"a string\",\"unixtime\":null,\"xx\":false}", "b");
      JSONPath jSONPath0 = new JSONPath("b");
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.parser.safeMode", (-1580386065683472715L), 0, false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny.internal");
      int[] intArray0 = new int[5];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 532;
      intArray0[4] = 0;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment1 = new JSONPath.MultiIndexSegment(intArray0);
      // Undeclared exception!
      try { 
        jSONPath_MultiIndexSegment1.eval(jSONPath0, (Object) null, jSONPath_JSONPathParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(" - ");
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem(" - ", (-1793346306));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$RefOpSegement");
      JSONPath jSONPath1 = JSONPath.compile("nin");
      jSONPath1.init();
      jSONPath0.getArrayItem("com.alibaba.fastjson.JSONPath$RefOpSegement", 0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLFeatureNotSupportedException0);
      JSONPath.eval((Object) sQLInvalidAuthorizationSpecException0, "com.alibaba.fastjson.JSONPath$RefOpSegement");
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("k-Ik@ch", stringArray0, false);
      Object object0 = null;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("nin", "k-Ik@ch", sQLFeatureNotSupportedException0);
      jSONPath_StringInSegement0.apply(jSONPath1, (Object) null, "k-Ik@ch", "nin");
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 10, 0, 0, 10, 1232, 10, 670, 999999);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal end day of week 10
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "stackTrace";
      stringArray0[1] = "ui!OFpA`!eSX3A";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = new JSONPath("Vx@i");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("ui!OFpA`!eSX3A");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Vx@i");
      SQLException sQLException0 = new SQLException(sQLNonTransientException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLException0);
      jSONPath_FilterGroup0.apply(jSONPath0, "ui!OFpA`!eSX3A", mockGregorianCalendar0, sQLTimeoutException0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(65, 65, 65);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) jSONPath_RangeSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : Vx@i
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      JSONPath.isInt(class0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("8Fe}");
      jSONPath_JSONPathParser0.readValue();
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("8Fe}");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, false);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath jSONPath0 = JSONPath.compile("8Fe}");
      SQLDataException sQLDataException0 = new SQLDataException("8Fe}");
      jSONPath0.keySet((Object) sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      String string0 = "IN";
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("IN");
      ParserConfig parserConfig0 = new ParserConfig(true);
      SQLWarning sQLWarning0 = new SQLWarning("java.time.Period");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.deny.internal", "fastjson.parser.safeMode", 79, sQLWarning0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLInvalidAuthorizationSpecException0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, false);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
      try { 
        jSONPath_FilterGroup0.apply((JSONPath) null, sQLInvalidAuthorizationSpecException1, jSONPath_NullSegement0, sQLInvalidAuthorizationSpecException1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$NullSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      String string0 = "IN";
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("IN");
      SerializeConfig serializeConfig0 = new SerializeConfig(79, false);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("IN", serializeConfig0, parserConfig0);
      SQLWarning sQLWarning0 = new SQLWarning("java.time.Period");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.deny.internal", "fastjson.parser.safeMode", 79, sQLWarning0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLInvalidAuthorizationSpecException0);
      jSONPath_NullSegement0.apply(jSONPath0, jSONPath0, sQLNonTransientConnectionException0, sQLNonTransientConnectionException0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, false);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
      try { 
        jSONPath_FilterGroup0.apply((JSONPath) null, sQLInvalidAuthorizationSpecException1, jSONPath_NullSegement0, sQLInvalidAuthorizationSpecException1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$NullSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath.paths((Object) serializeConfig0, serializeConfig0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(")PCa)^Zc(F");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Class<BigInteger> class0 = BigInteger.class;
      JSONPath.isDouble(class0);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("{\"x\":[],\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", sQLNonTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(1418, false, false, 7, 23, sQLIntegrityConstraintViolationException0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath.paths((Object) dataTruncation0, serializeConfig0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "{\"x\":[],\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      stringArray0[1] = "{\"x\":[],\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      stringArray0[2] = "{\"x\":[],\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      stringArray0[3] = "{\"x\":[],\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      stringArray0[4] = "{\"x\":[],\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      stringArray0[5] = "{\"x\":[],\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      stringArray0[6] = "{\"x\":[],\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      JSONPath.reserveToArray((Object) null, stringArray0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Long long0 = new Long(0L);
      Map<String, Object> map0 = JSONPath.paths((Object) long0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Map<String, Object> map0 = JSONPath.paths((Object) sQLTransactionRollbackException0, serializeConfig0);
      assertEquals(67, map0.size());
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      String string0 = "6f'0PJ";
      JSONPath jSONPath0 = JSONPath.compile("6f'0PJ");
      jSONPath0.eval((Object) "6f'0PJ");
      int int0 = 5754;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(string0, string0, int0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath.paths((Object) jSONPath_SizeSegment0, serializeConfig0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      JSONPath.compile("hashCode");
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.safeMode");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader.getSystemClassLoader();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(39, 39, 39);
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      Short short0 = new Short((short)154);
      jSONPath_RangeSegment0.eval(jSONPath0, jSONPath1, short0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransientConnectionException0);
      JSONPath.compile("fastjson.parser.safeMode");
      Set<?> set0 = JSONPath.keySet((Object) null, "hashCode");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":true,\"number\":\"1\"}");
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":true,\"number\":\"1\"}");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      Short short0 = new Short((short) (-3319));
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, jSONPath_NullSegement0, short0);
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, jSONPath0, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":true,\"number\":\"1\"}", jSONPath_SizeSegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      JSONPath jSONPath0 = new JSONPath("M)DF");
      JSONPath jSONPath1 = JSONPath.compile("M)DF");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      int int0 = 36;
      Short short0 = new Short((short) (-146));
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((short) (-146), 1423, 1423);
      Float float0 = new Float(2002.0);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath1, float0, jSONPath1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(925, false);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("Z", serializeConfig0, parserConfig0);
      int int0 = jSONPath0.evalSize(parserConfig0);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      JSONPath jSONPath0 = new JSONPath("M)DF");
      JSONPath.compile("M)DF");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(41, 10, 0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"/cause/stackTrace/12\":[],\"getFieldValue error.\":false}");
      Integer integer0 = new Integer(0);
      JSONPath jSONPath1 = new JSONPath("{\"/cause/stackTrace/12\":[],\"getFieldValue error.\":false}");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 1, 0);
      JSONPath jSONPath2 = new JSONPath("()I");
      short short0 = (short)133;
      Short short1 = new Short((short)133);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath2, classLoader0, short1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.alibaba.fastjson.JSONPath$RangeSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      int int0 = 3968;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(3968, 3968, 3968);
      String string0 = "j@r";
      JSONPath jSONPath0 = new JSONPath("j@r");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(3968);
      jSONPath_RangeSegment0.eval(jSONPath0, "j@r", jSONPath_ArrayAccessSegment0);
      String string1 = "";
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SQLTransientException sQLTransientException0 = new SQLTransientException("y#", "", 3608);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("]E'N", "\"xC^A[{Dx`bj*", 2295, sQLTransientException0);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : j@r
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      String string0 = "list is null.";
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("list is null.");
      JSONPath jSONPath0 = new JSONPath("?G,\"BT|^$");
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, "list is null.", jSONPath_NullSegement0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}";
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      byte byte0 = (byte)0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLNonTransientConnectionException0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath1 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, sQLTransientConnectionException0, jSONPath1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Xca$e/stackTrace/3");
      JSONPath jSONPath1 = JSONPath.compile("Xca$e/stackTrace/3");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath1, jSONPath1, 560);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("hashCode");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("hashCode", (SerializeConfig) null, parserConfig0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":99}");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[]}", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      sQLTransientConnectionException0.printStackTrace((PrintStream) mockPrintStream0);
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath1, sQLTransientConnectionException0, 15);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLTransientConnectionException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "not match ";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("not match ", stringArray0, false);
      SerializeConfig serializeConfig0 = new SerializeConfig(74);
      JSONPath jSONPath0 = new JSONPath("not match ", serializeConfig0, (ParserConfig) null);
      Float float0 = new Float(1075.66452924);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, (Object) null, float0, "not match ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "unsupported array put operation. ";
      stringArray0[1] = "unsupported array put operation. ";
      stringArray0[2] = "unsupported array put operation. ";
      stringArray0[3] = "unsupported array put operation. ";
      stringArray0[4] = "unsupported array put operation. ";
      stringArray0[5] = "unsupported array put operation. ";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("unsupported array put operation. ", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath("RUDWv#^}AZoN`o");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("JZB/i", serializeConfig0, parserConfig0);
      ParserConfig parserConfig1 = new ParserConfig(false);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig1, class0);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "unsupported array put operation. ", jSONPath1, throwableDeserializer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      String string0 = "yyyy\u5E74M\u6708d\u65E5 HH:mm:ss";
      String[] stringArray0 = new String[1];
      String string1 = "org.joda.time.format.DateTimeFormatter";
      stringArray0[0] = "org.joda.time.format.DateTimeFormatter";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("yyyy\u5E74M\u6708d\u65E5 HH:mm:ss", "yyyy\u5E74M\u6708d\u65E5 HH:mm:ss", "", stringArray0, true);
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("", serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(";JL(TkS}%ed7/L6Rn");
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ",";
      stringArray0[1] = "s";
      stringArray0[2] = "s";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("s", ",", ",", stringArray0, true);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Class<BigInteger> class0 = BigInteger.class;
      JSONPath.isDouble(class0);
      String string0 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":\"a string\"}";
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":\"a string\"}", 2493.4411259915, jSONPath_Operator0);
      SerializeConfig serializeConfig0 = null;
      try {
        serializeConfig0 = new SerializeConfig(0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      JSONPath.compile("hashCode");
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.safeMode");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("hashCode", "hashCode", false);
      JSONPath.compile("/cause/stackTrace/9");
      Float float0 = new Float((-3212.844F));
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, jSONPath0, jSONPath_WildCardSegment0, (Object) null);
      boolean boolean1 = JSONPath.contains((Object) null, "fastjson.parser.autoTypeSupport");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("2=Du", "stackTrace", "h|vNjqm'+=UM3$Lsc", stringArray0, false);
      String string0 = "/'yKh3q#S";
      JSONPath jSONPath0 = new JSONPath("/'yKh3q#S");
      byte byte0 = (byte) (-56);
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        JSONPath.extract("stackTrace", "2=Du", parserConfig0, 2111, (Feature[]) null);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2stackTrace
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      int int0 = 76;
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = parserConfig0.checkAutoType(class0);
      parserConfig0.get(class1);
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.SupportArrayToBean;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.OrderedField;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.CustomMapDeserializer;
      ParserConfig.AutoTypeCheckHandler parserConfig_AutoTypeCheckHandler0 = mock(ParserConfig.AutoTypeCheckHandler.class, new ViolatedAssumptionAnswer());
      parserConfig0.addAutoTypeCheckHandler(parserConfig_AutoTypeCheckHandler0);
      featureArray0[2] = feature2;
      // Undeclared exception!
      try { 
        JSONPath.extract("KH+Zoe;BgQIz", "KH+Zoe;BgQIz", parserConfig0, 76, featureArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2KH+Zoe;BgQIz
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        JSONPath.read("com.alibaba.fastjson.JSONPath$NotNullSegement", "x$Oh%~y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2com.alibaba.fastjson.JSONPath$NotNullSegement
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("-", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-79));
      int int0 = 62;
      SerializeConfig serializeConfig0 = new SerializeConfig(62, true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("LP2", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        JSONPath.read("m1 yUI8--T_z@;@Kl9", "fastjson.parser.safeMode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2m1 yUI8--T_z@;@Kl9
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      String string0 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"b\":{}}";
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"b\":{}}", serializeConfig0, parserConfig0);
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("fastjson.parser.deny", (String[]) null, true);
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = null;
      try {
        jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MultiPropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("6M-2", stringArray0, false);
      ParserConfig parserConfig0 = new ParserConfig();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      Class<Integer> class0 = Integer.TYPE;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(6, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("w", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.containsValue((Object) "w", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("{\"NOT_RLIKE\":[],\"y\":{\"NOT_RLIKE\":null},\"z\":true,\"a\":[],\"b\":{}}", sQLNonTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(1418, false, false, 7, 23, sQLIntegrityConstraintViolationException0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath.paths((Object) dataTruncation0, serializeConfig0);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 23;
      longArray0[1] = 1099511628211L;
      longArray0[2] = (long) 23;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("/cause/stackTrace", longArray0, false);
      JSONPath jSONPath0 = new JSONPath("{\"NOT_RLIKE\":[],\"y\":{\"NOT_RLIKE\":null},\"z\":true,\"a\":[],\"b\":{}}");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      jSONPath_IntInSegement0.apply(jSONPath0, sQLIntegrityConstraintViolationException0, dataTruncation0, jSONPath_Operator0);
      JSONPath jSONPath1 = new JSONPath("/cause/stackTrace/3");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientException0);
      jSONPath_IntInSegement0.apply(jSONPath1, sQLInvalidAuthorizationSpecException0, jSONPath1, "{\"NOT_RLIKE\":[],\"y\":{\"NOT_RLIKE\":null},\"z\":true,\"a\":[],\"b\":{}}");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer");
      jSONPath_JSONPathParser0.filterRest(jSONPath_IntInSegement0);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      int int0 = 199;
      Random.setNextRandom(199);
      JSONPath.JSONPathParser.isDigitFirst('$');
      Pattern pattern0 = Pattern.compile("not", 199);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("not", pattern0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RegMatchSegement0);
      JSONPath jSONPath0 = new JSONPath("@U%s,^EIN]p");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      JSONPath.compile("Xca$e/stackTrace/3");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-15), (-15), 1040);
      // Undeclared exception!
      try { 
        JSONPath.extract("k:SP&6\";1V", "kRVw#");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$MinSegment");
      String[] stringArray0 = new String[13];
      stringArray0[1] = "com.alibaba.fastjson.JSONPath$MinSegment";
      stringArray0[2] = "com.alibaba.fastjson.JSONPath$MinSegment";
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath_Operator0, (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path com.alibaba.fastjson.JSONPath$MinSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("false", serializeConfig0, parserConfig0);
      Set<?> set0 = jSONPath0.evalKeySet("false");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      String string0 = "org.springframework.cglib.proxy.Factory";
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = null;
      JSONPath jSONPath0 = new JSONPath("org.springframework.cglib.proxy.Factory", serializeConfig0, (ParserConfig) null);
      String string1 = "toJdbc";
      JSONPath jSONPath1 = new JSONPath("toJdbc", serializeConfig0, (ParserConfig) null);
      jSONPath0.eval((Object) jSONPath1);
      int int0 = 0;
      String string2 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      String string3 = "t[%Z/L4e(&fv";
      int[] intArray0 = null;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      String string0 = "YB4";
      // Undeclared exception!
      try { 
        JSONPath.extract("YB4", "com.alibaba.fastjson.JSONPath$IntInSegement");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        JSONPath.compile(stringArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) sQLNonTransientConnectionException0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1000022, true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("T*5w|;", serializeConfig0, parserConfig0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Vector<Object> vector0 = new Vector<Object>();
      jSONPath0.deepScan(hashMap0, "fastjson.parser.safeMode", vector0);
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("alpha");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("parse number key error");
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan("alpha", "fastjson.parser.autoTypeSupport", stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path alpha, segement fastjson.parser.autoTypeSupport
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("RUDWv#^LAZoN`o");
      ParserConfig parserConfig0 = ParserConfig.global;
      ParserConfig.getGlobalInstance();
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("fastjson.parser.deny.internal");
      ParserConfig parserConfig1 = new ParserConfig();
      assertFalse(parserConfig1.isJacksonCompatible());
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("{\"x\":\"hello\",\"y\":99,\"z\":true,\"a\":[],\"b\":{}}");
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":{},\"value2\":false,\"number\":\"1\"}");
      String string0 = "com.alibaba.fastjson.JSONPath$RangeSegment";
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":{},\"value2\":false,\"number\":\"1\"}", "com.alibaba.fastjson.JSONPath$RangeSegment", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":{},\"value2\":false,\"number\":\"1\"}, segement com.alibaba.fastjson.JSONPath$RangeSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      String string0 = "{\"fruit\":-99,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":-99,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      long long0 = (-2105L);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-2105L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.printStackTrace();
      sQLClientInfoException0.getFailedProperties();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("c.&h2[jdN\"");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(2831L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("t[%Z/L4e(&fv");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_WildCardSegment0, (Object) "t[%Z/L4e(&fv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '], but '/'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      String string0 = "LFnDPHL-\"}teUtS.JwM";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("LFnDPHL-\"}teUtS.JwM");
      jSONPath_JSONPathParser0.readString();
      jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/cause");
      jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("gy");
      // Undeclared exception!
      try { 
        JSONPath.extract("gy", "gy");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("{\"fruit\":\"Apple\",\"size\":\"LE\",\"color\":[[]],\"value\":true,\"value2\":true,\"number\":\"1\"}");
      JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"LE\",\"color\":[[]],\"value\":true,\"value2\":true,\"number\":\"1\"}");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":\"Apple\",\"size\":\"LE\",\"color\":[[]],\"value\":true,\"value2\":true,\"number\":\"1\"}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"fruit\":\"Apple\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "Z`&(95%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = "com.alibaba.fastjson.serializer.SimplePropertyPreFilter";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray("com.alibaba.fastjson.serializer.SimplePropertyPreFilter", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":true,\"number\":\"1\"}");
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":true,\"number\":\"1\"}");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, jSONPath0, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":true,\"number\":\"1\"}", jSONPath_SizeSegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fhgay1");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      JSONPath jSONPath0 = new JSONPath("M)DF");
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":{}}}", false);
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\"}");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte) (-18);
      byteArray0[8] = (byte) (-124);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Object object0 = jSONPath0.getPropertyValue(bigInteger0, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\"}", (byte) (-96));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("6f'ePX");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("6f'ePX", "6f'ePX");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, sQLFeatureNotSupportedException0, sQLSyntaxErrorException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":false,\"value2\":false,\"number\":\"1\"}";
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":false,\"value2\":false,\"number\":\"1\"}");
      String string1 = "t";
      UUID uUID0 = MockUUID.fromString("t");
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, uUID0, uUID0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("getDeclaringClass");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("getDeclaringClass", "'mv)DuuS77'", 13);
      int int0 = jSONPath0.size((Object) sQLRecoverableException0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      String string0 = "{\"x\":\"hello\",\"y\":\"a string\",\"z\":true,\"a\":[],\"b\":{}}";
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":\"a string\",\"z\":true,\"a\":[],\"b\":{}}");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) jSONPath_ArrayAccessSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"x\":\"hello\",\"y\":\"a string\",\"z\":true,\"a\":[],\"b\":{}}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("&'");
      Integer integer0 = new Integer((-2346));
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-2346));
      boolean boolean0 = jSONPath0.setPropertyValue(integer0, "+G8 zP%:1;;Z9{", (-2346), jSONPath_ArrayAccessSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = null;
      try {
        jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("[]", "[]", true);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 1
         // []
         //  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      JSONPath jSONPath0 = new JSONPath("M)DF");
      JSONPath.compile("M)DF");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("M)DF", "fxa9", true);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_RlikeSegement0);
      assertSame(jSONPath_Filter0, jSONPath_RlikeSegement0);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "stackTrace";
      stringArray0[1] = "ui!OFpA`!eSX3A";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = new JSONPath("Vx@i");
      Long long0 = new Long((-2625L));
      Long long1 = Long.getLong("stackTrace", long0);
      Short short0 = new Short((short)59);
      JSONPath.eqNotNull(long1, short0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("Vx@i", false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) jSONPath_PropertySegment0, (Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : Vx@i
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("6M-2", stringArray0, false);
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig parserConfig1 = ParserConfig.global;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      MockThrowable mockThrowable0 = new MockThrowable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "unsupported array put operation. ";
      JSONPath jSONPath0 = JSONPath.compile("unsupported array put operation. ");
      jSONPath0.removePropertyValue("unsupported array put operation. ", "unsupported array put operation. ", false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray((Object) null, stringArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      JSONPath.isInt(class0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("8Fe}");
      jSONPath_JSONPathParser0.readValue();
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      JSONPath.isInt(class0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("8]=", serializeConfig0, parserConfig0);
      String string0 = "8Fe}";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("8Fe}");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      jSONPath0.removePropertyValue(object0, "fastjson.parser.autoTypeAccept", false);
      String string1 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"a string\"}";
      String string2 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}";
      jSONPath_JSONPathParser0.skipWhitespace();
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"a string\"}", class0, 2452);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"a string\"}
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      int int0 = JSONPath.size((Object) null, "{\"fruit\":\"Apple\",\"size\":[],\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("I%W:vU,@L03X'2}3gM", 1117.51343873856, jSONPath_Operator0);
      JSONPath jSONPath0 = null;
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      byte byte0 = (byte) (-107);
      Byte byte1 = new Byte((byte) (-107));
      // Undeclared exception!
      try { 
        jSONPath_DoubleOpSegement0.apply((JSONPath) null, jSONPath_WildCardSegment0, (Object) null, byte1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$DoubleOpSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      String string0 = "false";
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("false", 2265L, (-1403L), true);
      String string1 = "T*5w|;";
      SerializeConfig serializeConfig0 = new SerializeConfig(1000001, true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("T*5w|;", serializeConfig0, parserConfig0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      parserConfig0.getDeserializer((Type) class0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(serializeConfig0, "+;O>>D#;9?>HVL8", 504L, bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path T*5w|;, segement +;O>>D#;9?>HVL8
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("null");
      JSON.DEFAULT_PARSER_FEATURE = 14;
      Integer integer0 = new Integer((-1073));
      jSONPath0.deepSet((Object) null, "com.alibaba.fastjson.serializer.AtomicCodec", 0L, integer0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(14);
      SQLException sQLException0 = new SQLException("", "com.alibaba.fastjson.JSONPath$IntBetweenSegement");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("!n2T``C#Hg/)r8", "com.alibaba.fastjson.serializer.AtomicCodec", 14, sQLException0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":\"a string\",\"/cause/stackTrace/7\":null,\"a\":\"a string\",\"b\":{}}");
      Integer integer0 = new Integer(0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{\"x\":\"hello\",\"y\":\"a string\",\"/cause/stackTrace/7\":null,\"a\":\"a string\",\"b\":{}}");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("2=Du", "", 0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", sQLTimeoutException0);
      Short short0 = new Short((short)137);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("{\"x\":\"hello\",\"y\":\"a string\",\"/cause/stackTrace/7\":null,\"a\":\"a string\",\"b\":{}}", "f", 109, (Map<String, ClientInfoStatus>) null);
      // Undeclared exception!
      try { 
        JSONPath.compare(integer0, sQLClientInfoException1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLClientInfoException cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      String string0 = "GU' ";
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.serializer.CharArrayCodec");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "/5S{?zn91", (Object) "/5S{?zn91", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = "Xca$e/stackTrace/3";
      stringArray0[0] = "Xca$e/stackTrace/3";
      JSONPath jSONPath0 = new JSONPath("MwYPHn");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      jSONPath0.getJavaBeanDeserializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath_WildCardSegment0, (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path MwYPHn
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      String string0 = "\\st";
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("st", 2265L, (-1403L), true);
      SerializeConfig serializeConfig0 = new SerializeConfig(1000001, true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("st", serializeConfig0, parserConfig0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(serializeConfig0, "+;O>>D#;9?>HVL8", 504L, bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path st, segement +;O>>D#;9?>HVL8
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("not");
      // Undeclared exception!
      try { 
        JSONPath.compare(jSONPath0, "not");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":{},\"value\":true,\"value2\":false,\"number\":\"1\"}";
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":{},\"value\":true,\"value2\":false,\"number\":\"1\"}");
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      long long0 = (-1903L);
      jSONPath0.deepSet("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":{},\"value\":true,\"value2\":false,\"number\":\"1\"}", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":{},\"value\":true,\"value2\":false,\"number\":\"1\"}", (-1903L), "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":{},\"value\":true,\"value2\":false,\"number\":\"1\"}");
      // Undeclared exception!
      try { 
        JSONPath.compare(javaBeanDeserializer0, class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = null;
      try {
        jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "stackTrace";
      stringArray0[1] = "ui!OFpA`!eSX3A";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      // Undeclared exception!
      try { 
        JSONPath.extract("ui!OFpA`!eSX3A", "stackTrace");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ident
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      PropertyNamingStrategy propertyNamingStrategy0 = serializeConfig0.propertyNamingStrategy;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      MockThrowable mockThrowable0 = new MockThrowable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(serializeConfig0, stringArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      String[] stringArray0 = new String[0];
      JSONPath.reserveToObject("/stackTrace/6", stringArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeAccept");
      JSONPath jSONPath0 = new JSONPath("/stackTrace/6");
      Class<Calendar> class0 = Calendar.class;
      jSONPath0.getJavaBeanSerializer(class0);
      jSONPath0.arrayAdd((Object) null, (Object[]) stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("{\"fruit\":-99,\"size\":\"Large\",\"java.time.ZoneOffset\":false,\"value\":true,\"value2\":true,\"number\":\"1\"}");
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":-99,\"size\":\"Large\",\"java.time.ZoneOffset\":false,\"value\":true,\"value2\":true,\"number\":\"1\"}");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, jSONPath0, "{\"fruit\":-99,\"size\":\"Large\",\"java.time.ZoneOffset\":false,\"value\":true,\"value2\":true,\"number\":\"1\"}", jSONPath_SizeSegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$IntObjInSegement");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but 'c'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      JSONPath.Operator.values();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{G\"D7R`1Bmqbh~<");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but '{'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", 843.359873, jSONPath_Operator0);
      Long[] longArray0 = new Long[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", longArray0, false);
      // Undeclared exception!
      try { 
        jSONPath_IntObjInSegement0.apply((JSONPath) null, jSONPath_DoubleOpSegement0, (Object) null, jSONPath_DoubleOpSegement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$IntObjInSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-2777L));
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("}wlm-w{X=%emVV<gf=i", longArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("}wlm-w{X=%emVV<gf=i");
      assertEquals("}wlm-w{X=%emVV<gf=i", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = "Xca$e/stackTrace/3";
      stringArray0[0] = "Xca$e/stackTrace/3";
      JSONPath jSONPath0 = new JSONPath("MwYPHn");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath_WildCardSegment0, (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path MwYPHn
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("V", "V", true);
      JSONPath jSONPath0 = new JSONPath("V");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-263), (-263), (-263));
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, "V", (Object) null, mockGregorianCalendar0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = "Xca$e/stackTrace/3";
      stringArray0[0] = "Xca$e/stackTrace/3";
      JSONPath jSONPath0 = new JSONPath("MwYPHn");
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) "MwYPHn", "$hdU(vL+^=>QT", (Object[]) stringArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Path deserialize erorr");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null, serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      String string0 = null;
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      String string0 = null;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Class<JSONValidator.Type>[] classArray0 = (Class<JSONValidator.Type>[]) Array.newInstance(Class.class, 5);
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      classArray0[0] = class0;
      Class<JSONValidator.Type> class1 = JSONValidator.Type.class;
      classArray0[1] = class1;
      Class<JSONValidator.Type> class2 = JSONValidator.Type.class;
      classArray0[2] = class2;
      Class<JSONValidator.Type> class3 = JSONValidator.Type.class;
      classArray0[3] = class3;
      Class<JSONValidator.Type> class4 = JSONValidator.Type.class;
      classArray0[4] = class4;
      serializeConfig0.configEnumAsJavaBean(classArray0);
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null, serializeConfig0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }
}
