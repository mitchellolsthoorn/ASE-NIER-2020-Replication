/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 04:02:25 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.JSONValidator;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.UUID;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":-99,\"size\":false,\"in\":\"Red\",\"value\":[],\"value2\":false,\"com.alibaba.fastjson.parser.deserializer.JSONPDeserializer\":false}");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("{\"fruit\":-99,\"size\":false,\"in\":\"Red\",\"value\":[],\"value2\":false,\"com.alibaba.fastjson.parser.deserializer.JSONPDeserializer\":false}", jSONPath_JSONPathParser0, true);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, "{\"fruit\":-99,\"size\":false,\"in\":\"Red\",\"value\":[],\"value2\":false,\"com.alibaba.fastjson.parser.deserializer.JSONPDeserializer\":false}", bigInteger0, "{\"fruit\":-99,\"size\":false,\"in\":\"Red\",\"value\":[],\"value2\":false,\"com.alibaba.fastjson.parser.deserializer.JSONPDeserializer\":false}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":-99,\"size\":false,\"in\":\"Red\",\"value\":[],\"V\":false,\"com.alibaba.fastjson.parser.deserializer.JSONPDeserializer\":false,\"x\":null}");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("{\"fruit\":-99,\"size\":false,\"in\":\"Red\",\"value\":[],\"V\":false,\"com.alibaba.fastjson.parser.deserializer.JSONPDeserializer\":false,\"x\":null}", jSONPath_JSONPathParser0, true);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, "{\"fruit\":-99,\"size\":false,\"in\":\"Red\",\"value\":[],\"V\":false,\"com.alibaba.fastjson.parser.deserializer.JSONPDeserializer\":false,\"x\":null}", bigInteger0, "{\"fruit\":-99,\"size\":false,\"in\":\"Red\",\"value\":[],\"V\":false,\"com.alibaba.fastjson.parser.deserializer.JSONPDeserializer\":false,\"x\":null}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Long long0 = new Long(1797);
      boolean boolean0 = JSONPath.eqNotNull(long0, (byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(6, (byte)32, (byte) (-117));
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$IntInSegement", serializeConfig0, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.deny.internal", "\"a string\"", (byte)126);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("23HlC70:BxA@<)LK", "methodName", sQLDataException0);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, "com.alibaba.fastjson.JSONPath$IntInSegement", sQLSyntaxErrorException0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$VALUES");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("$VALUES");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((short)886, 31, 31);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_WildCardSegment0, jSONPath_JSONPathParser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -26
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 0, 0);
      JSONPath jSONPath0 = new JSONPath("M%uliJ");
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("0*b}K8U[DK]Hwu>", "fastjson", "AC;To5< tWiyrv", (String[]) null, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, jSONPath_FilterSegment0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.alibaba.fastjson.JSONPath$RangeSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=' sB6@5}");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":-99,\"z\":true,\"a\":[],\"b\":{}}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!?;Hx65 oUm]K-Y_.-_");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      jSONPath_JSONPathParser0.explain();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(619L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("0u#Y4gJ[");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(0L, object0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=}aeZZr/jZ`7-qn;Q");
      jSONPath_JSONPathParser0.next();
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement(":st");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_NotNullSegement0);
      assertSame(jSONPath_NotNullSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$VALUES");
      Long[] longArray0 = new Long[4];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("K1JXC>I+5<", longArray0, true);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntObjInSegement0);
      assertSame(jSONPath_IntObjInSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$VALdES");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Z");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(1, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("-", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.parser.ParserConfig
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[4];
      // Undeclared exception!
      try { 
        JSONPath.extract("alpha", "alpha", parserConfig0, (-1854), featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("l16kQ`bwFtqyJ!", "l16kQ`bwFtqyJ!", false);
      JSONPath jSONPath0 = JSONPath.compile("l16kQ`bwFtqyJ!");
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, "l16kQ`bwFtqyJ!", "l16kQ`bwFtqyJ!", jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("6");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nin");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('(');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$Operator");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("([C)[[F");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":null,\"value\":true,\"value2\":false,\"number\":\"1\"}");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(1685);
      Long long0 = new Long((-190281065685395680L));
      Object object0 = jSONPath_ArrayAccessSegment0.eval(jSONPath0, long0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("*^!C)(4L~q7I*Ct8", serializeConfig0, parserConfig0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("W?3J<ac");
      Double double0 = new Double((-1.58038606184080998E18));
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, double0, jSONPath_NotNullSegement0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-4221), 23, (-4221));
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.BooleanCodec");
      // Undeclared exception!
      jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, (Object) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("y!=![E^Tu`OU");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("kRKu%:ni.orS-lAn_", serializeConfig0, (ParserConfig) null);
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      int int0 = JSONPath.size((Object) sQLTimeoutException0, "/stackTrace/4");
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("can not cast to char, value : ");
      boolean boolean0 = jSONPath0.setPropertyValue("can not cast to char, value : ", "can not cast to char, value : ", (-1014497654951707614L), "can not cast to char, value : ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      boolean boolean0 = JSONPath.set((Object) "_ul}[_9~OHRb%eJM", "[", (Object) parserConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      JSONPath jSONPath0 = JSONPath.compile("w");
      Float float0 = new Float((float) (-116L));
      boolean boolean0 = jSONPath0.set((Object) uUID0, (Object) float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object object0 = JSONPath.read((String) null, "VR\u0004ODZ?zu6%!");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null, (SerializeConfig) null);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("V>ALdES");
      DataTruncation dataTruncation0 = new DataTruncation(37, false, false, 37, 37, sQLSyntaxErrorException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(dataTruncation0);
      Set<?> set0 = JSONPath.keySet((Object) sQLInvalidAuthorizationSpecException0, "/stackTrace/6");
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("BGE>s2\"~z<");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(5, (-1364), 51068);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, sQLTimeoutException0);
      Object object1 = jSONPath0.getPropertyValue(object0, "BGE>s2\"~z<", 3730752432285826863L);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("2[");
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("i+y<fGcakq");
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("T#}d)%E~88/i3.m<,O", stringArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("4!?4BG}ol.7F y");
      Object object0 = jSONPath0.getArrayItem(jSONPath_StringInSegement0, 0);
      assertSame(jSONPath_StringInSegement0, object0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("P");
      Pattern pattern0 = Pattern.compile("fastjson.parser.autoTypeSupport", 1551);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("9k", pattern0, jSONPath_Operator0);
      int int0 = jSONPath0.evalSize(jSONPath_RegMatchSegement0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("d[/=");
      int int0 = jSONPath0.evalSize("d[/=");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(")rN2vVAi*8iLq");
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_MultiIndexSegment0);
      assertFalse(set0.contains(")rN2vVAi*8iLq"));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = JSONPath.eval(objectArray0[0], "`DXla");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "{\"fruit\":\"rlike\",\"size\":99,\"yyyyMMdd\":null,\"parseShort error, field : \":false,\"number\":true,\"x\":false}");
      Locale locale0 = Locale.CANADA_FRENCH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      Object object0 = JSONPath.eval((Object) mockGregorianCalendar0, "'");
      assertSame(mockGregorianCalendar0, object0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/6");
      DataTruncation dataTruncation0 = new DataTruncation(101, false, true, 3545, (-4637));
      DataTruncation dataTruncation1 = new DataTruncation(3545, true, true, 3545, 261, dataTruncation0);
      StackTraceElement stackTraceElement0 = (StackTraceElement)jSONPath0.eval((Object) dataTruncation1);
      assertNotNull(stackTraceElement0);
      assertEquals(296, stackTraceElement0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Long long0 = new Long((-3851359326990528739L));
      Long long1 = new Long(390L);
      int int0 = JSONPath.compare(long0, long1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.size((Object) "-", "-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("+");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fastjson.parser.autoTypeSupport", "xz<uOP\bg>*lXjOKy", (Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("xz<uOP\bg>*lXjOKy", "xz<uOP\bg>*lXjOKy", (byte) (-115), sQLSyntaxErrorException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.safeMode", sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) sQLTransientConnectionException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("..");
      int int0 = jSONPath0.size((Object) "..");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(", pos ");
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) jSONPath0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. , pos 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("parser", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue("parser", "B|RL'8xl;#:[cAQ#", 708L, "wZp@!+JZ7K`_<8rf");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("java/util/List");
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<SQLDataException> class0 = SQLDataException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, "N)n<|9w:BKI0.r~<Z|", 2923, throwableDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("H-s8q-?v]0BNO");
      SQLException sQLException0 = new SQLException("fastjson.parser.safeMode", "H-s8q-?v]0BNO");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, (Object) null, (-74185799), sQLException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Integer integer0 = new Integer(1024);
      // Undeclared exception!
      JSONPath.set((Object) bigInteger0, "fastjson.parser.autoTypeSupport", (Object) integer0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.deny", "fastjson.parser.autoTypeAccept");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        JSONPath.set((Object) sQLTransientConnectionException0, "fastjson.parser.deny", (Object) bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("");
      SQLDataException sQLDataException0 = new SQLDataException();
      // Undeclared exception!
      try { 
        JSONPath.set((Object) jSONPath0, "'s*,s*'", (Object) sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 's*,s*'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("java/util/List", ", pos ", jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("java/util/List");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
      jSONPath0.set((Object) bigDecimal0, (Object) jSONPath_StringOpSegement0, true);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("8");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(34, 34, 8);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_RangeSegment0, (Object) "8", true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("can not cast to char, value : ", serializeConfig0, parserConfig0);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) serializeConfig0, (Object) jSONPath_MultiIndexSegment0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : can not cast to char, value : 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.PrimitiveArraySerializer");
      Class<Byte> class0 = Byte.class;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) class0, (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONPath jSONPath0 = JSONPath.compile("..");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "4!?4BG}ol.7F y", (Object) double0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$IntObjInSegement");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.alibaba.fastjson.JSONPath$IntObjInSegement");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLFeatureNotSupportedException0, (Object) "com.alibaba.fastjson.JSONPath$IntObjInSegement");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("illegal json : ");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "illegal json : ";
      stringArray0[1] = "illegal json : ";
      stringArray0[2] = "BETWEEN";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      Class<BigInteger> class0 = BigInteger.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_MultiPropertySegment0, (Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : illegal json : 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "[";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(sQLTransientConnectionException0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "1";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(double0, stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Long long0 = new Long(4190L);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "UYh";
      stringArray0[1] = "UYh";
      stringArray0[2] = "..";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(long0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("M");
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      jSONPath0.removePropertyValue(bigInteger0, "M", false);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("UYh[E4%n");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, "UYh[E4%n", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("d[/=");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, "principal", (-114));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) classLoader0, "nin");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("setContext");
      // Undeclared exception!
      JSONPath.remove((Object) jSONPath0, "writeAsArrayNormal");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "b[ j6%g[oz5t50v;Q";
      stringArray0[1] = "\"a string\"";
      stringArray0[2] = "..";
      stringArray0[3] = "\"a string\"";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath_MultiPropertySegment0, "..");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) aSMDeserializerFactory0, "!");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{\"fruit\":\"Apple\",\"size\":null,\"color\":\"Red\",\"value\":true,\"value2\":false,\"KCRt2Q1)~<xQ8w5\":\"1\"}");
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) sQLTransientConnectionException0, "LJ8oXF9a|5H6W0ErLFv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : LJ8oXF9a|5H6W0ErLFv
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("v3B47-", serializeConfig0, parserConfig0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_WildCardSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("i%?g<<j'>|&2%a");
      JSONPath jSONPath1 = JSONPath.compile("writeLong");
      // Undeclared exception!
      jSONPath1.remove((Object) jSONPath0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("com", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "com");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("..");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("..", "2pdLuqp");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLRecoverableException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath(":", serializeConfig0, parserConfig0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("_asm_list_item_deser__", "['{N]+r\"\u0005'N7SbG/", 2541);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLNonTransientConnectionException0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("1", "1");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read((String) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<String> class0 = String.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(364, false);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("1", serializeConfig0, parserConfig0);
      Double double0 = new Double(364);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) double0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("..");
      Set<?> set0 = jSONPath0.keySet((Object) "..");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Uc>6+]Oy(JSr");
      jSONPath0.keySet((Object) ParserConfig.global);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("..");
      boolean boolean0 = jSONPath0.isRef();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("f^![KRQHq `[3BM");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : f^![KRQHq `[3BM
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("..");
      jSONPath0.init();
      assertEquals("..", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("Q{_4.$3", (SerializeConfig) null, parserConfig0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue(sQLTimeoutException0, "fastjson.parser.autoTypeAccept", (-1100L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson");
      Class<BigInteger> class0 = BigInteger.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("DWV: ");
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem("DWV: ", 26);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "/stackTrace/9", parserConfig0, 63, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[9];
      // Undeclared exception!
      try { 
        JSONPath.extract("_|E (1PbnyK/*N", "-", parserConfig0, 36, featureArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -3
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        JSONPath.extract("X_Xo=)yf+GrqqU(7w", "X_Xo=)yf+GrqqU(7w", parserConfig0, 503, (Feature[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, ",  end ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[]");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[]", parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("UYh[E4%n");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("-l?Ir,z}XBaMQ", parserConfig0, (byte)47);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // int
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("DWV: ");
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", (SerializeConfig) null, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(jSONPath_Operator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("7f;");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7f;");
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONPath0.evalKeySet(jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // evalKeySet error : 7f;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("java.util.OptionalInt", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) "java.util.OptionalInt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("OVAvOekH");
      JSONPath jSONPath0 = JSONPath.compile("`DY]");
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) jSONPath_NotNullSegement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. `DY]
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Float float0 = Float.valueOf(0.0F);
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(float0, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("od");
      // Undeclared exception!
      jSONPath0.deepSet(jSONPath0, "od", 2302L, "nin");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("REG_MATCH", (SerializeConfig) null, parserConfig0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("fastjson.parser.autoTypeSupport", "fastjson.parser.autoTypeAccept", hashMap0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(batchUpdateException0, "fastjson.parser.deny.internal", (-9108755501533577784L), classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path REG_MATCH, segement fastjson.parser.deny.internal
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("java");
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("$VALUES", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("$VALdES");
      SQLWarning sQLWarning0 = new SQLWarning("com.fasterxml.jackson.annotation.JsonCreator", "$VALdES");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("$VALdES", "_|Il", (-283), sQLWarning0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLIntegrityConstraintViolationException0, linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("UYh[E4%n");
      SQLWarning sQLWarning0 = new SQLWarning("UYh[E4%n");
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLWarning0, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("syntax error,except start with { or [,but actually start with ", sQLTimeoutException0);
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) class0, "com.alibaba.fastjson.JSONPath$IntObjInSegement", (Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.alibaba.fastjson.JSONPath$IntObjInSegement");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("3GbnND91d!9", sQLTransactionRollbackException0);
      Byte byte0 = new Byte((byte) (-30));
      boolean boolean0 = JSONPath.containsValue((Object) sQLInvalidAuthorizationSpecException0, "..", (Object) byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[] intArray0 = new int[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) batchUpdateException0, "com.alibaba}fastjson.JSONath$6ntObjInSegemnt", (Object) "com.alibaba}fastjson.JSONath$6ntObjInSegemnt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : com.alibaba}fastjson.JSONath$6ntObjInSegemnt
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      JSONPath jSONPath1 = new JSONPath("[]", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath1.containsValue((Object) jSONPath0, (Object) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", (SerializeConfig) null, parserConfig0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) jSONPath_WildCardSegment0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Z");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("9ej", ";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Z", (-2232));
      SQLWarning sQLWarning0 = new SQLWarning(";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Z", "Y", (-2232), sQLFeatureNotSupportedException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Y", "illegal ref");
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) sQLDataException0, (Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ;Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Z
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) class0, "fastjson.parser.safeMode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("{\"fruit\":\"Apple\",\"size\":null,\"color\"\"Red\",\"vplue\"true,\"value2\":flse,\"number\":\"1\"}", "{\"fruit\":\"Apple\",\"size\":null,\"color\"\"Red\",\"vplue\"true,\"value2\":flse,\"number\":\"1\"}", 19);
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) sQLFeatureNotSupportedException0, "{\"fruit\":\"Apple\",\"size\":null,\"color\"\"Red\",\"vplue\"true,\"value2\":flse,\"number\":\"1\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"fruit\":\"Apple\",\"size\":null,\"color\"\"Red\",\"vplue\"true,\"value2\":flse,\"number\":\"1\"}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("f^![KRQHq `[3BM");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) "f^![KRQHq `[3BM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : f^![KRQHq `[3BM
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Double double0 = new Double(503);
      // Undeclared exception!
      try { 
        JSONPath.compare(double0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("..");
      Object[] objectArray0 = new Object[4];
      jSONPath0.arrayAdd((Object) "alibaba", objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONPath jSONPath0 = JSONPath.compile("like");
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "null", (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny.internal");
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      JSONPath.arrayAdd((Object) javaBeanDeserializer0, "", (Object[]) null);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null, serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.removePropertyValue(serializeConfig0, "fastjson.parser.autoTypeSupport", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("{eu1osSy!Q,FMt", (SerializeConfig) null, parserConfig0);
      Integer integer0 = new Integer(43);
      jSONPath0.deepSet(integer0, "dqpC'E%qkYu", 5274044858141538265L, "{eu1osSy!Q,FMt");
      assertEquals("{eu1osSy!Q,FMt", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("UYh[E4%n");
      BigDecimal bigDecimal0 = new BigDecimal((int) (byte)47);
      jSONPath0.deepSet((Object) null, "UYh[E4%n", 1675L, bigDecimal0);
      assertEquals((byte)47, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("UU\r:$-raMP");
      Class<Object> class0 = Object.class;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("UU\r:$-raMP", "yyyy", 193, sQLIntegrityConstraintViolationException0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues(sQLIntegrityConstraintViolationException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("scanType", "|tS@{jY[^VGRrhm:$", sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(sQLTimeoutException0, "e^e$B3\",69-i2A", list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path UU\r:$-raMP, segement e^e$B3\",69-i2A
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("J");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, (Object) null, (-3334));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("f^![KRQHq `[3BM");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, jSONPath0, (-74185799), jSONPath0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("2[");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com.alibaba.fastjson.JSONPath$IntObjInSegement", false);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, "Sb*!fCTdMey=", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[9ej8");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(1, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("parser");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      JSONPath jSONPath0 = new JSONPath("b");
      int int0 = jSONPath0.size((Object) date0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("J");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(1, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONPath.compile(":q&3ihIUu.");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("( r.T", (-74185799), (-4270347329889690746L), true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("autoTypeAccept", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.set((Object) serializeConfig0, (Object) "autoTypeAccept", false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("i%?g<<j'>|&2%a");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) jSONPath0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("IN");
      Byte byte0 = new Byte((byte) (-60));
      boolean boolean0 = jSONPath0.remove((Object) byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("mc)d*kZ.,7\"\">");
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("[]", true);
      JSONPath jSONPath0 = new JSONPath("[]");
      boolean boolean0 = jSONPath0.containsValue((Object) null, (Object) jSONPath_PropertySegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = JSONPath.compile("qCQ5N1Mh");
      boolean boolean0 = jSONPath0.containsValue((Object) classLoader0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      char[] charArray0 = new char[7];
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, (byte)0, parserConfig0, 2252);
      Object object0 = jSONPath0.extract(defaultJSONParser0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(":");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("parseDecimal error, field : ", jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("4HOBxtCgxaxQk0");
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("[]", true);
      JSONPath jSONPath0 = new JSONPath("[]");
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, "[]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("kotlin.reflect.jvm.internal.KClassImpl");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-611));
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = "3=0nN5h\\u4eT|fKRe6z";
      SerializeConfig serializeConfig0 = new SerializeConfig(5, true);
      Map<String, Object> map0 = JSONPath.paths((Object) string0, serializeConfig0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("WriteSlashAsSpecial");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "WriteSlashAsSpecial";
      stringArray0[1] = "WriteSlashAsSpecial";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject(jSONPath0, stringArray0);
      assertEquals(0, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("WriteSlashAsSpecial");
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(jSONPath0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToObject((Object) null, stringArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLClientInfoException sQLClientInfoException1 = (SQLClientInfoException)JSONPath.reserveToObject(sQLClientInfoException0, (String[]) null);
      assertNull(sQLClientInfoException1.getMessage());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(double0, stringArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(bigInteger0, (String[]) null);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("b");
      MockDate mockDate0 = new MockDate();
      Set<?> set0 = jSONPath0.evalKeySet(mockDate0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>(3089);
      Set<?> set0 = JSONPath.keySet((Object) vector0, "true");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      Set<?> set0 = jSONPath0.evalKeySet(map0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("7f;");
      Set<?> set0 = jSONPath0.evalKeySet("7f;");
      assertFalse(set0.contains("7f;"));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/3");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 1141, 486, 5);
      int int0 = jSONPath0.evalSize(mockGregorianCalendar0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("DefaultFieldDeserializer", serializeConfig0, parserConfig0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(propertyNamingStrategy0, "fastjson.parser.autoTypeSupport", false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("T", false);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("T", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("^A]", sQLClientInfoException0);
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.setValue(jSONPath0, jSONPath_Operator0, sQLFeatureNotSupportedException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("i%?g<<j'>|&2%a");
      Class<SQLException> class0 = SQLException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNotNull(javaBeanDeserializer0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("false").when(biFunction0).apply(any() , any());
      hashMap0.compute("false", biFunction0);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues(javaBeanDeserializer0);
      jSONPath0.deepScan(hashMap0, "writeFieldValue", list0);
      assertFalse(list0.contains("false"));
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("'a)^(U", serializeConfig0, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.autoTypeAccept", true);
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, serializeConfig0, parserConfig0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("..");
      Vector<Object> vector0 = new Vector<Object>(3089);
      jSONPath0.deepScan(vector0, "alibaba", vector0);
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      JSONPath jSONPath0 = new JSONPath("KCzss:");
      Object object0 = jSONPath0.getPropertyValue(mockGregorianCalendar0, "nin", 6607618197526598121L);
      assertEquals(21, object0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      Object object0 = jSONPath0.eval((Object) mockGregorianCalendar0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("org.joda.time.Instant");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      boolean boolean0 = jSONPath0.contains((Object) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":99,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      Object object0 = jSONPath0.getPropertyValue("{\"fruit\":\"Apple\",\"size\":99,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", "8Byn8r4E}N^]'", 5614464919154503228L);
      assertEquals(6, object0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Integer integer0 = new Integer(59);
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Double double0 = new Double((-887.5));
      boolean boolean0 = JSONPath.eqNotNull(double0, double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Float float0 = Float.valueOf(0.0F);
      boolean boolean0 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-61));
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(byte0, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull((byte)44, (byte)44);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Float float0 = Float.valueOf((float) (-1580386065683472715L));
      boolean boolean0 = JSONPath.eqNotNull((-1580386065683472715L), float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-79));
      BigDecimal bigDecimal0 = new BigDecimal((-274.306015205));
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Long long0 = new Long((-1880892684));
      Short short0 = new Short((short) (-453));
      boolean boolean0 = JSONPath.eq(long0, short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("i%?g<<j'>|&2%a");
      boolean boolean0 = JSONPath.eq(sQLIntegrityConstraintViolationException0, class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      boolean boolean0 = JSONPath.eq(bigDecimal0, bigDecimal1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("i%?g<<j'>|&2%a");
      boolean boolean0 = JSONPath.eq(jSONPath0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("vUQb/%y2", "vUQb/%y2", 1697);
      boolean boolean0 = JSONPath.eq((Object) null, sQLTimeoutException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      boolean boolean0 = JSONPath.eq(sQLTransientConnectionException0, sQLTransientConnectionException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONPath jSONPath0 = JSONPath.compile("com.fasterxml.jackson.annotation.JsonCreator");
      jSONPath0.deepGetPropertyValues(linkedList0, linkedList0);
      assertFalse(linkedList0.contains("com.fasterxml.jackson.annotation.JsonCreator"));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("2[");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("2[", "6", (-1566), hashMap0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLClientInfoException0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, "2[", batchUpdateException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.PrimitiveArraySerializer");
      Locale locale0 = Locale.JAPANESE;
      Map<String, Object> map0 = JSONPath.paths((Object) locale0);
      jSONPath0.getPropertyValues(map0);
      assertEquals(13, map0.size());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues("QtmI-jn:|SX@");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("0kY7ywQlDUlw6KT");
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":true,\"color\":true,\"value\":true,\"8WS+M_\":false,\"not\":\"1\",\"x\":99}");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "scanFieldFloat";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath_ArrayAccessSegment0, stringArray0);
      jSONPath0.getArrayItem(jSONArray0, (-2103));
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Float float0 = Float.valueOf(0.0F);
      boolean boolean0 = JSONPath.containsValue((Object) "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer", "/stackTrace/10", (Object) float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("2[");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("2[");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Cb/8WS+M_.7f;";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("+U_]nG<N", "G|%<=4$tCXQGHjo2F", "\t", stringArray0, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_MatchSegement0, jSONPath_MatchSegement0, false);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, "G|%<=4$tCXQGHjo2F", jSONPath_JSONPathParser0, "Cb/8WS+M_.7f;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("T#}d)%E~88/i3.m<,O", stringArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("4!?4BG}yXol.`F y");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("89wDciKj>");
      Byte byte0 = new Byte((byte) (-33));
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringInSegement0, jSONPath_StringInSegement0, true);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, byte0, "4!?4BG}yXol.`F y", sQLFeatureNotSupportedException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("P", 2836L, (-802L), true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntBetweenSegement0, jSONPath_IntBetweenSegement0, true);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = JSONPath.compile("P");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.autoTypeSupport");
      Byte byte0 = new Byte((byte) (-33));
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, parserConfig0, sQLFeatureNotSupportedException0, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-33));
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("/stackTrace/6");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, false);
      JSONPath jSONPath0 = JSONPath.compile("A.+W");
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, byte0, "UCRm_l iV,", "UCRm_l iV,");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("T#}d)%E~88/i3.m<,O");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("syntax");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "QtmI-jn:|SX@");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.remove(jSONPath0, sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.SQLException$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("SJbp#!8;WxkU77Q(!");
      Float float0 = Float.valueOf((float) (-1580386065683472715L));
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("$vl", "\\-", false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RlikeSegement0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, (Object) null, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      JSONPath jSONPath0 = new JSONPath("WriteSlashAsSpecial");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, (Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("fastjson.parser.autoTypeAccept", "fastjson.parser.autoTypeAccept", false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RlikeSegement0);
      JSONPath jSONPath0 = new JSONPath("nin");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath0, sQLInvalidAuthorizationSpecException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("7f;");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("7f;");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7f;");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath0, jSONReaderScanner0);
      assertSame(jSONReaderScanner0, object0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("P", "YE|1Az?f?6m", false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RlikeSegement0);
      JSONPath jSONPath0 = new JSONPath("t");
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "nin", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.serializer.PrimitiveArraySerializer");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~tdd");
      Pattern pattern0 = Pattern.compile("fastjson.parser.autoTypeSupport");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("oVFk,7EDosj", pattern0, jSONPath_Operator0);
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, "~tdd", "oVFk,7EDosj", jSONReaderScanner0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(503);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("-{a_|-n", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(11, 11, (-222));
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("-{a_|-n", "a\f;THj%w", jSONPath_Operator0);
      Class<Annotation> class0 = Annotation.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath_RangeSegment0, jSONPath0, throwableDeserializer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("fastjson.parser.autoTypeAccept", "stackTrace", jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, serializeConfig0, jSONPath_Operator0, "stackTrace");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("fastjson.parser.autoTypeAccept", "fastjson.parser.autoTypeAccept", true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RlikeSegement0);
      JSONPath jSONPath0 = new JSONPath("nin");
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "nin", "nin");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "uH6-v!((a=1:M\">'t&u";
      stringArray0[1] = "uH6-v!((a=1:M\">'t&u";
      stringArray0[2] = "uH6-v!((a=1:M\">'t&u";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("uH6-v!((a=1:M\">'t&u", "uH6-v!((a=1:M\">'t&u", "uH6-v!((a=1:M\">'t&u", stringArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("uH6-v!((a=1:M\">'t&u");
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, jSONPath0, "uH6-v!((a=1:M\">'t&u", jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.autoTypeSupport", (String) null, (String) null, (String[]) null, true);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("{\"fileName\":\"hello\",\"y\":7,\"z\":true,\"a\":[true]}", true);
      JSONPath jSONPath0 = new JSONPath("{\"fileName\":\"hello\",\"y\":7,\"z\":true,\"a\":[true]}");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("", jSONPath_PropertySegment0, jSONPath_Operator0);
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, "{\"fileName\":\"hello\",\"y\":7,\"z\":true,\"a\":[true]}", jSONPath_Operator0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("b[ j6%g[oz5t50v;Q");
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      MathContext mathContext0 = new MathContext(46, roundingMode0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((byte) (-16), (byte) (-117), 1827);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("\"a string\"", true);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("c", jSONPath_PropertySegment0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_FilterSegment0, mathContext0);
      assertNotNull(object0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, jSONPath_WildCardSegment0, jSONPath_FilterSegment0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("{\"x\":null,\" EK7yF{ W~Vl L).(\":\"a string\",\"fastjson.parser.autoTypeSupport\":\"a string\",\"org.joda.time.LocalDate\":[],\"json-path can not be null or empty\":true,\"xx\":[]}", 0L, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("{\"x\":null,\" EK7yF{ W~Vl L).(\":\"a string\",\"fastjson.parser.autoTypeSupport\":\"a string\",\"org.joda.time.LocalDate\":[],\"json-path can not be null or empty\":true,\"xx\":[]}");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "false", 19);
      Long long0 = new Long((-30L));
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, (Object) null, sQLFeatureNotSupportedException0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("{eu1osSy!Q,FMt", stringArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("{eu1osSy!Q,FMt");
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "{eu1osSy!Q,FMt", jSONPath_MultiIndexSegment0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "W;.]`lOxH";
      stringArray0[1] = "-";
      stringArray0[2] = "-";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("-", stringArray0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      JSONPath jSONPath0 = JSONPath.compile("yTDn");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("-");
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_StringInSegement0, sQLTransactionRollbackException0);
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("9Fcsr[!");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9Fcsr[!");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      Long[] longArray0 = new Long[8];
      longArray0[0] = (Long) object0;
      longArray0[1] = (Long) object0;
      longArray0[2] = (Long) object0;
      longArray0[3] = (Long) object0;
      longArray0[4] = (Long) object0;
      longArray0[5] = (Long) object0;
      longArray0[6] = (Long) object0;
      longArray0[7] = (Long) object0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("9Fcsr[!", longArray0, true);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLWarning sQLWarning0 = new SQLWarning(sQLIntegrityConstraintViolationException0);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, sQLIntegrityConstraintViolationException0, sQLWarning0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("9Fcsr[!");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9Fcsr[!");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      Long[] longArray0 = new Long[8];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("9Fcsr[!", longArray0, true);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLWarning sQLWarning0 = new SQLWarning(sQLIntegrityConstraintViolationException0);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, sQLIntegrityConstraintViolationException0, sQLWarning0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("lexer", (-4163L), 483L, true);
      JSONPath jSONPath0 = new JSONPath("'U]]2/\"");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<SQLException> class0 = SQLException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, jSONPath0, javaBeanDeserializer0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      long[] longArray0 = new long[1];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("UYh[E4%n", longArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("UYh[E4%n");
      Byte byte0 = new Byte((byte)47);
      BigDecimal bigDecimal0 = new BigDecimal((int) (byte)47);
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, byte0, bigDecimal0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("[9ej8", parserConfig0, false);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, parserConfig0, locale0, locale0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("#; ,`", (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("7f;");
      SQLDataException sQLDataException0 = new SQLDataException("7f;", "7f;");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("7f;");
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, sQLDataException0, jSONPath0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("parseDecimal error, field : ", "`DY]", false);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("parseDecimal error, field : ");
      JSONPath jSONPath0 = JSONPath.compile("`DY]");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, batchUpdateException0, jSONPath_RlikeSegement0, jSONPath_WildCardSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(503);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(11, 11, (-222));
      JSONPath jSONPath0 = new JSONPath("/stackTrace/1");
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, javaBeanSerializer0, serializeConfig0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$VALUES");
      JSONPath jSONPath0 = new JSONPath("true");
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, "X+3n-&BlX8|-(", jSONPath_JSONPathParser0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("1^^vB4)lOfT H2", "*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.JSONPath$WildCardSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("f^![KRQHq `[3BM");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "f^![KRQHq `[3BM";
      stringArray0[1] = "f^![KRQHq `[3BM";
      stringArray0[2] = "f^![KRQHq `[3BM";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, jSONPath_MultiPropertySegment0, "f^![KRQHq `[3BM");
      assertEquals(3, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$FilterSegment", serializeConfig0, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.deny", true);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(" @a&oFa/U$yRKIK.", "l", (-2020), (Throwable) null);
      jSONPath_PropertySegment0.setValue(jSONPath0, sQLRecoverableException0, jSONPath0);
      assertEquals("java.sql.SQLRecoverableException:  @a&oFa/U$yRKIK.", sQLRecoverableException0.toString());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("alibaba");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = '2';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 713, 50900);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("_E:_M&fo)@,z1$P{EBO", jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json : 
         //
         verifyException("com.alibaba.fastjson.JSONPath$PropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("alibaba");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 713, 50900);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("_E:_M&fo)@,z1$P{EBO", jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json : 
         //
         verifyException("com.alibaba.fastjson.JSONPath$PropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLDataException0);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        JSONPath.compare(sQLTimeoutException0, javaBeanSerializer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLTimeoutException cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Integer integer0 = new Integer(1797);
      // Undeclared exception!
      try { 
        JSONPath.compare(integer0, "list_item_desc");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Long long0 = new Long(699L);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("UCRm_l iV,", "UCRm_l iV,");
      // Undeclared exception!
      try { 
        JSONPath.compare(long0, sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException cannot be cast to java.lang.Long
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Byte byte0 = new Byte((byte)43);
      int int0 = JSONPath.compare(byte0, byte0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Double double0 = new Double(503);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(11, 11, (-222));
      // Undeclared exception!
      try { 
        JSONPath.compare(double0, jSONPath_RangeSegment0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath$RangeSegment cannot be cast to java.lang.Double
         //
         verifyException("java.lang.Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"com.alibaba.fastjson.JSONPath$SizeSegment\",\"y\":-99,\"z\":true,\"a\":[],\"b\":{\"x\":[]}}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"x\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[\"a string\"]");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(1, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"QHt#xT@");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(":");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'s*,s*'");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("^Q:^+q8SGj+eSvJV-8j");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("Q:", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":true,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '{, but '}'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.serializer.PrimitiveArraySerializer");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("?E|z$Kw", "com.alibaba.fastjson.serializer.PrimitiveArraySerializer", (-2856));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLInvalidAuthorizationSpecException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("AB?G[d/g#w>z[y8v=", sQLInvalidAuthorizationSpecException0);
      SQLWarning sQLWarning0 = new SQLWarning("?E|z$Kw", "AB?G[d/g#w>z[y8v=", sQLInvalidAuthorizationSpecException0);
      SQLDataException sQLDataException0 = new SQLDataException("can", sQLTransientConnectionException0);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("can");
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("can", (-2856), jSONPath_Operator0);
      SQLDataException sQLDataException1 = new SQLDataException("\\.", "UYh[E4%n", sQLWarning0);
      SQLWarning sQLWarning1 = new SQLWarning();
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NOT_IN;
      jSONPath_DoubleOpSegement0.apply(jSONPath0, sQLDataException1, sQLWarning1, jSONPath_Operator1);
      JSONPath jSONPath1 = JSONPath.compile("\\.");
      jSONPath1.getPropertyValue(sQLWarning1, "\\.", (-116L));
      jSONPath1.init();
      assertEquals("\\.", jSONPath1.getPath());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("SJbp#!8;WxkU77Q(!");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : SJbp#!8;WxkU77Q(!
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/12");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(2, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("between");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("rlike");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nin");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("can not cast to char, value : ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<GbBp[5P6JFVMFE");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("sY!+(3_O)f");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but '+'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=}aeZZr/jZ`7-qn;Q");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nin");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // nin
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string\"");
      jSONPath_JSONPathParser0.readValue();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(",m?BnW/'");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-1467L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("+0\"G*z]P]>nkwo");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue(1107L);
      assertEquals(1107.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-{a_|-n");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[[99],-99,\"a string\"]");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : [[99],-99,\"a string\"]
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("a sing]");
      jSONPath_JSONPathParser0.readName();
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Ib/2[/bX>YqW4;j");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : Ib/2[/bX>YqW4;j
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[-99,99]");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(1, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("y>V2=57");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[true]");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("\u0003=m.D=rch7f");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. \u0003=m.D=rch7f
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$VALUES");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      JSONPath.arrayAdd((Object) null, "#R.w]zRx", (Object[]) jSONPath_SegmentArray0);
      assertEquals(1, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      int[] intArray0 = new int[8];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("between", hashMap0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("i_14", "i_14", intArray0, sQLClientInfoException0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "between";
      stringArray0[1] = "}";
      stringArray0[2] = "between";
      stringArray0[3] = "7f;";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(batchUpdateException0, stringArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      Map<String, Object> map1 = JSONPath.paths((Object) map0);
      assertEquals(1, map1.size());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("a!X'\"9$]bA#Pn(", "a!X'\"9$]bA#Pn(", 32);
      Map<String, Object> map0 = JSONPath.paths((Object) sQLInvalidAuthorizationSpecException0);
      //  // Unstable assertion: assertEquals(83, map0.size());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "CustomMapDeserializer");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) serializeConfig0, (Object) "autoTypeAccept", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/stackTrace/8");
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) sQLTimeoutException0, "/stackTrace/8", (Object) jSONPath_MultiIndexSegment0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = new JSONPath("/");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/", "parseShort error, field : ", sQLClientInfoException0);
      boolean boolean0 = jSONPath0.set((Object) sQLTransactionRollbackException0, (Object) classLoader0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("2[");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("2[");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) sQLSyntaxErrorException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$FilterSegment", serializeConfig0, parserConfig0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.alibaba.fastjson.JSONPath$FilterSegment", "fastjson.parser.safeMode", (Throwable) null);
      boolean boolean0 = jSONPath0.remove((Object) sQLTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      boolean boolean0 = JSONPath.remove((Object) null, "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(16);
      JSONPath jSONPath0 = JSONPath.compile(":");
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath_ArrayAccessSegment0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class com.alibaba.fastjson.JSONPath$ArrayAccessSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("-", stringArray0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      JSONPath jSONPath0 = JSONPath.compile("yTDn");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("-");
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_StringInSegement0, sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd(object0, (Object[]) stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("writeNormal");
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) sQLTransactionRollbackException0, (Object[]) jSONPath_SegmentArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.serializer.PrimitiveArraySerializer");
      Object[] objectArray0 = new Object[1];
      jSONPath0.arrayAdd((Object) null, objectArray0);
      assertEquals("com.alibaba.fastjson.serializer.PrimitiveArraySerializer", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath jSONPath0 = JSONPath.compile("4!?4BG}ol.7F y");
      Float float0 = new Float(883.4075F);
      jSONPath0.arrayAdd((Object) float0, (Object[]) stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      jSONPath0.arrayAdd((Object) "fastjson.parser.deny", (Object[]) null);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("deny");
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$VALdES");
      JSONPath jSONPath0 = JSONPath.compile("$VALdES");
      Set<?> set0 = jSONPath0.keySet((Object) jSONPath_JSONPathParser0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("'a)^(U");
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.alibaba.fastjson.JSONPath$IntObjInSegement", "parseDecimal error, field : ", 51068);
      boolean boolean0 = JSONPath.containsValue((Object) bigDecimal0, ":", (Object) sQLRecoverableException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      int[] intArray0 = new int[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "com.alibaba.fastjson.JSONValidator$Type", batchUpdateException0);
      boolean boolean0 = JSONPath.containsValue((Object) sQLSyntaxErrorException0, "com.alibaba.fastjson.JSONPath$IntObjInSegement", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(":");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("g{", "rp\"r_2,q", (-3607));
      boolean boolean0 = jSONPath0.contains((Object) sQLNonTransientConnectionException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.features.ErrorOnEnumNotMatch");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Object object0 = JSONPath.extract("", "fastjson.parser.safeMode");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSONPath.extract("parseDecimal error, field : ", ":", parserConfig0, 1685, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2parseDecimal error, field : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/11");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      boolean boolean0 = jSONPath0.isRef();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/cause/stackTrace/11");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      int int0 = jSONPath0.size((Object) "$VALUES");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":null,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, jSONPath0, "{\"fruit\":\"Apple\",\"size\":null,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("=O", serializeConfig0, parserConfig0);
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, serializeConfig0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("can not cast to char, value : ", "can not cast to char, value : ", jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("can not cast to char, value : ");
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath0, jSONPath0, jSONPath_Operator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("v.TzsNK-", "fastjson.parser.deny");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"z\":\"a string\",\"a\":[],\"b\":{}}");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('\"', char0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.PrimitiveArraySerializer");
      MathContext mathContext0 = new MathContext(1822);
      BigDecimal bigDecimal0 = new BigDecimal(0.0, mathContext0);
      Short short0 = new Short((short)86);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(11);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, short0, bigDecimal0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.Short
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("/stackTrace/6", serializeConfig0, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException("/stackTrace/6");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath jSONPath0 = new JSONPath("l=YzJ9)M'-DE[,R-");
      Short short0 = new Short((short)1005);
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, jSONPath0, short0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("ErrorOnEnumNotMatch");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) jSONPath_FilterSegment0, "1", (Object) jSONPath_NotNullSegement0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      int int0 = JSONPath.size((Object) null, "rp/mfmbWYA#},r}v");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("nin");
      String string0 = jSONPath0.getPath();
      assertEquals("nin", string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("in");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONPath.set((Object) "fastjson", "BrowserCompatible", (Object) "17Ty!2O");
  }
}
