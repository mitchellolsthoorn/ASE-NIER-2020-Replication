/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 21:39:08 GMT 2020
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.DefaultDateTypeAdapter;
import com.google.gson.Gson;
import com.google.gson.InstanceCreator;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.LongSerializationPolicy;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.Excluder;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Date;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicLongArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Gson_ESTest extends Gson_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0);
      assertNotNull(bufferedWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0);
      assertNotNull(mockPrintWriter0);
      
      JsonWriter jsonWriter0 = new JsonWriter(mockPrintWriter0);
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertNotNull(jsonWriter0);
      
      gson0.toJson((JsonElement) null, jsonWriter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      Class<Long> class0 = Long.class;
      TypeToken<Long> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class<? super Long> class1 = typeToken0.getRawType();
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Long", class1.toString());
      assertNotNull(class1);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Vq#sCm%=G[\"");
      assertNotNull(mockPrintWriter0);
      
      gson0.toJson((Object) null, (Type) class1, (Appendable) mockPrintWriter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Long", class1.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      Byte byte0 = new Byte((byte)7);
      assertNotNull(byte0);
      assertEquals((byte)7, (byte)byte0);
      
      Class<Integer> class0 = Integer.TYPE;
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      JsonWriter jsonWriter0 = gson0.newJsonWriter(stringWriter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertNotNull(jsonWriter0);
      
      gson0.toJson((Object) byte0, (Type) class0, jsonWriter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      JsonArray jsonArray0 = new JsonArray();
      assertTrue(jsonArray0.isJsonArray());
      assertFalse(jsonArray0.isJsonObject());
      assertFalse(jsonArray0.isJsonNull());
      assertFalse(jsonArray0.isJsonPrimitive());
      assertEquals(0, jsonArray0.size());
      assertNotNull(jsonArray0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      gson0.toJson((JsonElement) jsonArray0, (Appendable) charArrayWriter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertTrue(jsonArray0.isJsonArray());
      assertFalse(jsonArray0.isJsonObject());
      assertFalse(jsonArray0.isJsonNull());
      assertFalse(jsonArray0.isJsonPrimitive());
      assertEquals(0, jsonArray0.size());
      assertEquals("[]", charArrayWriter0.toString());
      assertEquals(2, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Gson.checkValidFloatingPoint(0.0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      Class<AtomicLong> class0 = AtomicLong.class;
      LongSerializationPolicy longSerializationPolicy0 = LongSerializationPolicy.STRING;
      Long long0 = new Long(2261L);
      assertNotNull(long0);
      assertEquals(2261L, (long)long0);
      
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)longSerializationPolicy0.serialize(long0);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isString());
      assertNotNull(jsonPrimitive0);
      
      AtomicLong atomicLong0 = (AtomicLong)gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isString());
      assertEquals(2261, atomicLong0.intValue());
      assertEquals((short)2261, atomicLong0.shortValue());
      assertEquals("2261", atomicLong0.toString());
      assertEquals(2261.0, atomicLong0.doubleValue(), 0.01);
      assertEquals((byte) (-43), atomicLong0.byteValue());
      assertEquals(2261L, atomicLong0.get());
      assertEquals(2261.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(2261L, atomicLong0.longValue());
      assertNotNull(atomicLong0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      MockFile mockFile0 = new MockFile("{\"x\":\"hello\",\"y\":false,\"\":true,\"a\":[[]],\"b\":\"a string\"}");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      gson0.toJson((Object) mockFile0, (Appendable) mockPrintWriter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("{\"x\":\"hello\",\"y\":false,\"\":true,\"a\":[[]],\"b\":\"a string\"}", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("{\"x\":\"hello\",\"y\":false,\"\":true,\"a\":[[]],\"b\":\"a string\"}", mockFile0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      JsonObject jsonObject0 = new JsonObject();
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertTrue(jsonObject0.isJsonObject());
      assertNotNull(jsonObject0);
      
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class class1 = (Class)typeToken0.getType();
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertNotNull(class1);
      
      JsonObject jsonObject1 = (JsonObject)gson0.toJsonTree((Object) jsonObject0, (Type) class1);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(jsonObject1.isJsonPrimitive());
      assertFalse(jsonObject1.isJsonArray());
      assertTrue(jsonObject1.isJsonObject());
      assertFalse(jsonObject1.isJsonNull());
      assertNotSame(jsonObject0, jsonObject1);
      assertNotSame(jsonObject1, jsonObject0);
      assertTrue(jsonObject1.equals((Object)jsonObject0));
      assertNotNull(jsonObject1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      AtomicLong atomicLong0 = new AtomicLong((-1253L));
      assertEquals((-1253.0), atomicLong0.doubleValue(), 0.01);
      assertEquals("-1253", atomicLong0.toString());
      assertEquals((-1253L), atomicLong0.get());
      assertEquals((-1253.0F), atomicLong0.floatValue(), 0.01F);
      assertEquals((-1253), atomicLong0.intValue());
      assertEquals((-1253L), atomicLong0.longValue());
      assertEquals((short) (-1253), atomicLong0.shortValue());
      assertEquals((byte)27, atomicLong0.byteValue());
      assertNotNull(atomicLong0);
      
      Class<Short> class0 = Short.class;
      TypeToken<Short> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class<? super Short> class1 = typeToken0.getRawType();
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(17, class1.getModifiers());
      assertEquals("class java.lang.Short", class1.toString());
      assertNotNull(class1);
      
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) atomicLong0, (Type) class1);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals((-1253.0), atomicLong0.doubleValue(), 0.01);
      assertEquals("-1253", atomicLong0.toString());
      assertEquals((-1253L), atomicLong0.get());
      assertEquals((-1253.0F), atomicLong0.floatValue(), 0.01F);
      assertEquals((-1253), atomicLong0.intValue());
      assertEquals((-1253L), atomicLong0.longValue());
      assertEquals((short) (-1253), atomicLong0.shortValue());
      assertEquals((byte)27, atomicLong0.byteValue());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(17, class1.getModifiers());
      assertEquals("class java.lang.Short", class1.toString());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertNotNull(jsonPrimitive0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      Class<Object> class0 = Object.class;
      Object object0 = gson0.fromJson("com.google.gson.internal.bind.TypeAdapters$8", class0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(object0);
      assertEquals("com.google.gson.internal.bind.TypeAdapters$8", object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      Class<String> class0 = String.class;
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      InstanceCreator<BigInteger> instanceCreator0 = gson0.fromJson((Reader) stringReader0, (Type) class0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNull(instanceCreator0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Class<String> class0 = String.class;
      String string0 = gson0.fromJson((Reader) stringReader0, class0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      StringReader stringReader0 = new StringReader("iX.Fr') ");
      assertNotNull(stringReader0);
      
      Class<String> class0 = String.class;
      String string0 = gson0.fromJson((Reader) stringReader0, class0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(string0);
      assertEquals("iX.Fr')", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      Float float0 = new Float(2086.5193F);
      assertNotNull(float0);
      assertEquals(2086.5193F, (float)float0, 0.01F);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(float0);
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertNotNull(jsonPrimitive0);
      
      Class<String> class0 = String.class;
      String string0 = gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      Excluder excluder0 = Excluder.DEFAULT;
      assertNotNull(excluder0);
      
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) excluder0, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      Class<Float> class0 = Float.TYPE;
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) "{\" is not a valid double value as per JSON specification. To override this behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":[false],\"\":null}", (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.Gson$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      Class<AtomicLong> class0 = AtomicLong.class;
      TypeToken<AtomicLong> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) typeToken0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.util.concurrent.atomic.AtomicLong. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("boolean", class0.toString());
      assertNotNull(class0);
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) null, (Type) class0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        gson0.toJson((Object) null, (Type) class0, (Appendable) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      Class<Long> class0 = Long.class;
      TypeToken<Long> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class<? super Long> class1 = typeToken0.getRawType();
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Long", class1.toString());
      assertNotNull(class1);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Vq#sCm%=G[\"");
      assertNotNull(mockPrintWriter0);
      
      JsonWriter jsonWriter0 = gson0.newJsonWriter(mockPrintWriter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertNotNull(jsonWriter0);
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class1, (Type) class0, jsonWriter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 2);
      assertNotNull(defaultDateTypeAdapter0);
      
      Class<Object> class1 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class1);
      assertNotNull(typeToken0);
      
      Class<? super Object> class2 = typeToken0.getRawType();
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertNotNull(class2);
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) defaultDateTypeAdapter0, (Type) class2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.util.Date. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      Gson.FutureTypeAdapter<Excluder> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Excluder>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) gson_FutureTypeAdapter0, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      Class<Date> class0 = Date.class;
      TypeToken<Date> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      TypeAdapter<Date> typeAdapter0 = gson0.getAdapter(typeToken0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(typeAdapter0);
      
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) typeAdapter0, (Type) class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class java.text.DecimalFormat declares multiple JSON fields named maximumFractionDigits
         //
         verifyException("com.google.gson.internal.bind.ReflectiveTypeAdapterFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      Class<Short> class0 = Short.TYPE;
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertEquals("short", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$6", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      Class<AtomicLong> class0 = AtomicLong.class;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0, (Appendable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.util.concurrent.atomic.AtomicLong. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertNotNull(class0);
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: boolean. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      LongSerializationPolicy longSerializationPolicy0 = LongSerializationPolicy.STRING;
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)longSerializationPolicy0.serialize((Long) null);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertNotNull(jsonPrimitive0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        gson0.toJson((JsonElement) jsonPrimitive0, (Appendable) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      BigDecimal bigDecimal0 = new BigDecimal((-604));
      assertEquals((byte) (-92), bigDecimal0.byteValue());
      assertEquals((short) (-604), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(bigDecimal0);
      assertEquals((byte) (-92), bigDecimal0.byteValue());
      assertEquals((short) (-604), bigDecimal0.shortValue());
      assertTrue(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isString());
      assertNotNull(jsonPrimitive0);
      
      MockFile mockFile0 = new MockFile("M =4(HHm-@>7[");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      assertNotNull(mockFileWriter0);
      
      JsonWriter jsonWriter0 = gson0.newJsonWriter(mockFileWriter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals("M =4(HHm-@>7[", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals("M =4(HHm-@>7[", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertNotNull(jsonWriter0);
      
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals("M =4(HHm-@>7[", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals("M =4(HHm-@>7[", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter1.getSerializeNulls());
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) jsonPrimitive0, jsonWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      Class<Type> class0 = Type.class;
      TypeToken<Type> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class class1 = (Class)typeToken0.getType();
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isInterface());
      assertEquals(1537, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("interface java.lang.reflect.Type", class1.toString());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      // Undeclared exception!
      try { 
        gson0.fromJson("'I22_y", (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.lang.reflect.Type. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      // Undeclared exception!
      try { 
        gson0.fromJson("(xpect2d END_OBJECT }ut was ", (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("fVk-#=O[qxs", class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      Class<Integer> class0 = Integer.class;
      try { 
        gson0.fromJson("Za9Wm/uy}'VV]&Kn", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"Za9Wm\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$7", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      PipedReader pipedReader0 = new PipedReader(7);
      assertNotNull(pipedReader0);
      
      Class<Float> class0 = Float.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertNotNull(class0);
      
      try { 
        gson0.fromJson((Reader) pipedReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      Class<String> class0 = String.class;
      try { 
        gson0.fromJson((Reader) pipedReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      Class<Integer> class0 = Integer.class;
      TypeToken<Integer> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class class1 = (Class)typeToken0.getType();
      assertFalse(class1.isAnnotation());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Integer", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonReader) null, (Type) class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      Class<Byte> class0 = Byte.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      JsonArray jsonArray0 = new JsonArray();
      assertTrue(jsonArray0.isJsonArray());
      assertFalse(jsonArray0.isJsonNull());
      assertEquals(0, jsonArray0.size());
      assertFalse(jsonArray0.isJsonObject());
      assertFalse(jsonArray0.isJsonPrimitive());
      assertNotNull(jsonArray0);
      
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonArray0, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      Object object0 = gson0.fromJson((JsonElement) null, (Type) class0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Class<String> class0 = String.class;
      JsonReader jsonReader0 = gson0.newJsonReader(stringReader0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      Excluder excluder0 = gson0.fromJson(jsonReader0, (Type) class0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(jsonReader0.isLenient());
      assertNull(excluder0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      // Undeclared exception!
      try { 
        gson0.newJsonWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // out == null
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      TypeAdapter<AtomicLongArray> typeAdapter0 = gson0.getAdapter(class0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(typeAdapter0);
      
      TypeToken<AtomicLongArray> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      TypeAdapter<AtomicLongArray> typeAdapter1 = gson0.getAdapter(typeToken0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertSame(typeAdapter1, typeAdapter0);
      assertNotNull(typeAdapter1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      long[] longArray0 = new long[4];
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, atomicLongArray0.length());
      assertEquals("[0, 0, 0, 0]", atomicLongArray0.toString());
      assertNotNull(atomicLongArray0);
      
      JsonArray jsonArray0 = (JsonArray)gson0.toJsonTree((Object) atomicLongArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals(4, atomicLongArray0.length());
      assertEquals("[0, 0, 0, 0]", atomicLongArray0.toString());
      assertFalse(jsonArray0.isJsonPrimitive());
      assertTrue(jsonArray0.isJsonArray());
      assertEquals(4, jsonArray0.size());
      assertFalse(jsonArray0.isJsonObject());
      assertFalse(jsonArray0.isJsonNull());
      assertNotNull(jsonArray0);
      
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) jsonArray0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      // Undeclared exception!
      try { 
        gson0.newJsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      Class<Float> class0 = Float.TYPE;
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) null, (Type) class0, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      MockDate mockDate0 = new MockDate((-3131), (-3131), (-3131));
      assertNotNull(mockDate0);
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) mockDate0, (Type) class0, (Appendable) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockDate cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$7", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      Class<BigDecimal> class0 = BigDecimal.class;
      TypeToken<BigDecimal> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class class1 = (Class)typeToken0.getType();
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.math.BigDecimal", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertNotNull(class1);
      
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, (Type) class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertNotNull(class0);
      
      Gson.FutureTypeAdapter<Type> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Type>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.toJsonTree(class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Gson.FutureTypeAdapter<Byte> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Byte>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      Gson.FutureTypeAdapter<Byte> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<Byte>();
      assertFalse(gson_FutureTypeAdapter1.equals((Object)gson_FutureTypeAdapter0));
      assertNotNull(gson_FutureTypeAdapter1);
      
      gson_FutureTypeAdapter0.setDelegate(gson_FutureTypeAdapter1);
      assertNotSame(gson_FutureTypeAdapter0, gson_FutureTypeAdapter1);
      assertNotSame(gson_FutureTypeAdapter1, gson_FutureTypeAdapter0);
      assertFalse(gson_FutureTypeAdapter0.equals((Object)gson_FutureTypeAdapter1));
      assertFalse(gson_FutureTypeAdapter1.equals((Object)gson_FutureTypeAdapter0));
      
      PipedReader pipedReader0 = new PipedReader(1);
      assertNotNull(pipedReader0);
      
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      try { 
        gson0.fromJson("%t1V:VW1(AR4og'v", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 6 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      Gson.FutureTypeAdapter<String> gson_FutureTypeAdapter0 = gson0.fromJson((String) null, (Type) class0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNull(gson_FutureTypeAdapter0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) "null", (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) null, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      String string0 = gson0.toJson((Object) null);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      TypeToken<Integer> typeToken0 = TypeToken.get(class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(typeToken0);
      
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) null, typeToken0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // GSON cannot serialize int
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      Excluder excluder0 = Excluder.DEFAULT;
      assertNotNull(excluder0);
      
      Class<String> class0 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      TypeAdapter<String> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(typeAdapter0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      Excluder excluder0 = new Excluder();
      assertNotNull(excluder0);
      
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, (TypeToken<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      Gson gson0 = new Gson();
      // Undeclared exception!
      gson0.toJsonTree((Object) pipedReader0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.getAdapter((TypeToken<Date>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      JsonArray jsonArray0 = new JsonArray();
      BigInteger bigInteger0 = BigInteger.TEN;
      jsonArray0.add((Number) bigInteger0);
      gson0.fromJson((JsonElement) jsonArray0, (Type) class0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      JsonArray jsonArray0 = new JsonArray();
      Boolean boolean0 = Boolean.valueOf(false);
      jsonArray0.add(boolean0);
      try { 
        gson0.fromJson((JsonElement) jsonArray0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected NUMBER but was BOOLEAN at path $[0]
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Gson gson0 = new Gson();
      long[] longArray0 = new long[4];
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(longArray0);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) atomicLongArray0);
      // Undeclared exception!
      try { 
        gson0.toJson(jsonElement0, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.TYPE;
      gson0.toJsonTree((Object) null, (Type) class0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Gson gson0 = new Gson();
      Float float0 = new Float((-538.0F));
      gson0.toJsonTree((Object) float0);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      Class<Float> class0 = Float.class;
      gson0.fromJson(jsonElement0, class0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson("oBCiY)K>x7", (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      String string0 = gson0.toJson((Object) null, (Type) class0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) gson0);
      Class<Float> class0 = Float.class;
      try { 
        gson0.fromJson(jsonElement0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected NUMBER but was BEGIN_OBJECT at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      gson0.fromJson("null", (Type) class0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.fieldNamingStrategy();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.newBuilder();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.excluder();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Gson gson0 = new Gson();
      boolean boolean0 = gson0.htmlSafe();
      assertTrue(boolean0);
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.class;
      gson0.fromJson("", class0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      // Undeclared exception!
      gson0.toJson((Object) mockFileWriter0, (Appendable) mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicLong atomicLong0 = new AtomicLong((-1515L));
      gson0.toJson((Object) atomicLong0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Date> class0 = Date.class;
      TypeToken<Date> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Date> typeAdapter0 = gson0.getAdapter(typeToken0);
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) typeAdapter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class java.text.DecimalFormat declares multiple JSON fields named maximumFractionDigits
         //
         verifyException("com.google.gson.internal.bind.ReflectiveTypeAdapterFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((JsonElement) null);
      assertEquals("null", string0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Gson gson0 = new Gson();
      boolean boolean0 = gson0.serializeNulls();
      assertFalse(boolean0);
      assertTrue(gson0.htmlSafe());
  }
}
