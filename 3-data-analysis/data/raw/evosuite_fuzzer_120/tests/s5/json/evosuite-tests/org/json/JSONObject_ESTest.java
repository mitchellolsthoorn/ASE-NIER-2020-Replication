/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 22:50:45 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Dialog;
import java.awt.GraphicsDevice;
import java.awt.MultipleGradientPaint;
import java.awt.TrayIcon;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterInputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.net.Proxy;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.security.KeyRep;
import java.sql.ClientInfoStatus;
import java.sql.JDBCType;
import java.sql.RowIdLifetime;
import java.time.DayOfWeek;
import java.time.Month;
import java.util.Collection;
import java.util.Enumeration;
import java.util.Formatter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import java.util.function.Predicate;
import javax.annotation.Resource;
import javax.jws.WebParam;
import javax.smartcardio.CardTerminals;
import javax.swing.DropMode;
import javax.swing.JTable;
import javax.swing.LayoutStyle;
import jdk.net.SocketFlow;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("org.json.JSONPointerException", jSONArray0);
      LinkedList<DropMode> linkedList0 = new LinkedList<DropMode>();
      JSONObject jSONObject2 = jSONObject1.put("*DTMw3xU]~Hm", (Collection<?>) linkedList0);
      double double0 = jSONObject0.optDouble("\\", 664.8);
      assertEquals(664.8, double0, 0.01);
      
      boolean boolean0 = jSONObject0.optBoolean("M?o/fF9P$5FR");
      assertFalse(boolean0);
      
      float float0 = jSONObject2.optFloat("mar", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Expected a ',' or '}'";
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or '}'", (Collection<?>) null);
      jSONObject1.put("VSK1xurkn", (-1286.8097F));
      jSONObject1.optDouble("j+", 0.0);
      jSONObject0.put("Expected a ',' or '}'", (-1322.783F));
      jSONObject0.optBoolean("Wl>rt:oIyT");
      jSONObject0.optFloat("j+", 3800.7F);
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Resource.AuthenticationType, Proxy.Type> hashMap0 = new HashMap<Resource.AuthenticationType, Proxy.Type>();
      Resource.AuthenticationType resource_AuthenticationType0 = Resource.AuthenticationType.CONTAINER;
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      hashMap0.put(resource_AuthenticationType0, proxy_Type0);
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject2 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("org.json.JSONPointer$Builder");
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONObject2.optQuery(jSONPointer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "has";
      JSONObject jSONObject1 = jSONObject0.putOpt("has", "has");
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject1.getDouble("has");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("has", "has");
      assertFalse(jSONObject0.isEmpty());
      
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Class<MultipleGradientPaint.CycleMethod> class0 = MultipleGradientPaint.CycleMethod.class;
      jSONObject0.optEnum(class0, "has");
      Object object0 = jSONObject1.opt("has");
      assertEquals("has", object0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("' and instead saw '", (-1.0F));
      jSONObject1.getDouble("' and instead saw '");
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.getDouble("|TU4mz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("", "has");
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Class<MultipleGradientPaint.CycleMethod> class0 = MultipleGradientPaint.CycleMethod.class;
      jSONObject1.optEnum(class0, "has");
      JSONObject.quote("");
      try { 
        jSONObject1.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"toUpperCase\":\"Apple\",\"size\":{},\"getintValue\":true,\"istoString\":\"a string\",\"value2\":\"a string\",\"number\":\"1\"}");
      jSONObject0.put("{\"toUpperCase\":\"Apple\",\"size\":{},\"getintValue\":true,\"istoString\":\"a string\",\"value2\":\"a string\",\"number\":\"1\"}", 734L);
      jSONObject0.increment("{\"toUpperCase\":\"Apple\",\"size\":{},\"getintValue\":true,\"istoString\":\"a string\",\"value2\":\"a string\",\"number\":\"1\"}");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      LinkedList<Character.UnicodeScript> linkedList0 = new LinkedList<Character.UnicodeScript>();
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("{\"toUpperCase\":\"Apple\",\"size\":{},\"getintValue\":true,\"istoString\":\"a string\",\"value2\":\"a string\",\"number\":\"1\"}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "has");
      JSONObject jSONObject1 = jSONObject0.putOpt("has", "has");
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Class<MultipleGradientPaint.CycleMethod> class0 = MultipleGradientPaint.CycleMethod.class;
      jSONObject0.optEnum(class0, "has");
      jSONObject1.get("has");
      JSONObject jSONObject2 = jSONObject0.put("has", (-504.6362F));
      assertSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optQuery("/tLP~\"F<#RDz~T<Ty[0");
      jSONObject0.increment("/tLP~\"F<#RDz~T<Ty[0");
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject0.getBigDecimal("/tLP~\"F<#RDz~T<Ty[0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      JSONObject jSONObject1 = new JSONObject("", stringArray0);
      jSONObject0.putOpt("", "");
      Integer integer0 = new Integer(13);
      jSONObject0.optNumber("", (Number) integer0);
      jSONObject0.optLong("", (-2613L));
      StringWriter stringWriter0 = new StringWriter();
      HashMap<FilterOutputStream, Dialog.ModalityType> hashMap0 = new HashMap<FilterOutputStream, Dialog.ModalityType>();
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject2.getBigInteger("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5");
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "5";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "5";
      stringArray0[5] = "";
      JSONObject jSONObject1 = new JSONObject("", stringArray0);
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject2.optLong("5", 0L);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('_');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      mockPrintWriter0.append('q');
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      String[] stringArray1 = new String[0];
      JSONObject jSONObject3 = new JSONObject((Object) jSONObject2, stringArray1);
      Number number0 = JSONObject.stringToNumber("0");
      assertEquals(0, number0);
      
      float float0 = jSONObject2.optFloat((String) null, (float) 0L);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "5";
      JSONObject jSONObject0 = new JSONObject();
      long long0 = 0L;
      jSONObject0.optLong("5", 0L);
      String string1 = "";
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, "5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader(1394);
      String[] stringArray0 = new String[7];
      stringArray0[0] = " line ";
      JSONObject jSONObject1 = jSONObject0.put("isintern", 0.0F);
      jSONObject1.getDouble("isintern");
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.getDouble(" line ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      String string0 = "getgetUnicodeLocaleKeys";
      JSONObject.stringToValue("getgetUnicodeLocaleKeys");
      JSONObject jSONObject1 = jSONObject0.putOpt("getgetUnicodeLocaleKeys", "getgetUnicodeLocaleKeys");
      jSONObject1.optNumber("getgetUnicodeLocaleKeys", (Number) bigInteger0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3727);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(55);
      jSONObject0.similar(charArrayWriter0);
      PipedWriter pipedWriter0 = new PipedWriter();
      char[] charArray0 = new char[6];
      try { 
        JSONObject.writeValue(pipedWriter0, jSONObject0, (-3422), 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5");
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "5";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "5";
      stringArray0[5] = "";
      JSONObject jSONObject1 = new JSONObject("", stringArray0);
      jSONObject0.putOpt("", "5");
      Integer integer0 = new Integer(13);
      jSONObject0.optNumber("", (Number) integer0);
      jSONObject0.optLong("", (-2613L));
      StringWriter stringWriter0 = new StringWriter();
      char char0 = '_';
      stringWriter0.append((CharSequence) "");
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "VC8KPbqnojY", 100, 100);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(fileSystemHandling0);
      String string0 = "-3478.063966.";
      String string1 = "~$?mQftlnBXUDWT2mW";
      jSONObject0.optNumber("~$?mQftlnBXUDWT2mW", (Number) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.optBigInteger("e=w- Fz)x&36yB{z", bigInteger0);
      JSONObject jSONObject1 = jSONObject0.put("-3478.063966.", 773.16);
      // Undeclared exception!
      try { 
        jSONObject1.query("e=w- Fz)x&36yB{z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader(1394);
      String[] stringArray0 = new String[7];
      stringArray0[0] = " line ";
      stringArray0[1] = " line ";
      stringArray0[2] = " line ";
      stringArray0[3] = " line ";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = " line ";
      JSONObject jSONObject1 = new JSONObject(pipedReader0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.putOpt(" line ", jSONObject1);
      jSONObject0.optLong("VC8KPbqnojY", 0L);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('_');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      mockPrintWriter0.append('_');
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      JSONObject jSONObject3 = new JSONObject(dataInputStream0, stringArray0);
      JSONObject jSONObject4 = jSONObject2.getJSONObject(" line ");
      assertEquals(0, jSONObject4.length());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5");
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "5";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      JSONObject jSONObject1 = new JSONObject("", stringArray0);
      jSONObject0.putOpt("", "5");
      jSONObject0.optLong("", (-2613L));
      StringWriter stringWriter0 = new StringWriter();
      char char0 = '_';
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "VC8KPbqnojY", 100, 100);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5");
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "5";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "5";
      stringArray0[5] = "";
      JSONObject jSONObject1 = new JSONObject("", stringArray0);
      jSONObject0.putOpt("", "5");
      Integer integer0 = new Integer(13);
      Number number0 = jSONObject0.optNumber("", (Number) integer0);
      assertEquals(5, number0);
      
      long long0 = jSONObject0.optLong("", (-2613L));
      assertEquals(5L, long0);
      
      StringWriter stringWriter0 = new StringWriter();
      boolean boolean0 = jSONObject0.has("Gv7SsFV:5s]oY");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      jSONObject0.putOnce("^uW*-XC:>OO0YKoN", bigInteger0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte)65;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = jSONObject0.optBigInteger("^uW*-XC:>OO0YKoN", bigInteger1);
      assertEquals((short)10, bigInteger2.shortValue());
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      PipedReader pipedReader0 = new PipedReader((byte)65);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject1 = new JSONObject(stringWriter0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "41+/=b]';";
      MockFile mockFile0 = new MockFile("41+/=b]';");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0QiF T38j{%l");
      String string1 = "bT.!";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "bT.!");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      mockFileWriter0.close();
      try { 
        JSONObject.writeValue(mockFileWriter0, mockFile0, 633, 633);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      linkedList0.iterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Dialog.ModalExclusionType> linkedList1 = new LinkedList<Dialog.ModalExclusionType>();
      LinkedList<Dialog.ModalExclusionType> linkedList2 = new LinkedList<Dialog.ModalExclusionType>();
      JSONObject jSONObject1 = jSONObject0.put("5EIQ(!?-Z:W", (Collection<?>) linkedList0);
      jSONObject1.toMap();
      LinkedList<ProcessBuilder.Redirect.Type> linkedList3 = new LinkedList<ProcessBuilder.Redirect.Type>();
      Byte byte0 = new Byte((byte) (-26));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-96);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-26);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Number number0 = jSONObject0.optNumber("5EIQ(!?-Z:W", (Number) bigInteger0);
      assertEquals((short) (-24346), number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("p", "hks");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.optNumber("p");
      JSONObject.quote("p");
      jSONObject0.optBigDecimal("~0", (BigDecimal) null);
      try { 
        jSONObject1.getBoolean("p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<BufferedInputStream, SocketFlow.Status> hashMap0 = new HashMap<BufferedInputStream, SocketFlow.Status>();
      JSONObject jSONObject0 = new JSONObject();
      Object[] objectArray0 = new Object[8];
      JSONObject.stringToValue("uWgaB");
      objectArray0[0] = (Object) "uWgaB";
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("has", "has");
      LinkedList<ByteArrayInputStream> linkedList0 = new LinkedList<ByteArrayInputStream>();
      JSONObject jSONObject1 = jSONObject0.put("@705LsB.>ax8My1", (Collection<?>) linkedList0);
      jSONObject0.optInt("has", 8);
      Class<RoundingMode> class0 = RoundingMode.class;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@705LsB.>ax8My1";
      stringArray0[1] = "fl";
      stringArray0[2] = "] is not a JSONArray.";
      stringArray0[3] = "@705LsB.>ax8My1";
      stringArray0[4] = "fl";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      try { 
        jSONObject2.getEnum(class0, "has");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000029] is not an enum of type java.io.StringWriter@0000000030.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject jSONObject1 = jSONObject0.increment("uv`plicate key \"");
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.toString();
      try { 
        jSONObject1.getBigDecimal("uv`plicate key \"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = "getgetUnicodeLocaleKeys";
      JSONObject.stringToValue("getgetUnicodeLocaleKeys");
      jSONObject0.putOpt("getgetUnicodeLocaleKeys", "getgetUnicodeLocaleKeys");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      try { 
        jSONObject0.getDouble("getgetUnicodeLocaleKeys");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^8wFSFM@?#,_o@Gw");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\\", 366.0F);
      jSONObject1.getDouble("\\");
      jSONObject1.optLong("\\");
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      LinkedList<ProcessBuilder.Redirect.Type> linkedList1 = new LinkedList<ProcessBuilder.Redirect.Type>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedList<Character.UnicodeScript> linkedList2 = new LinkedList<Character.UnicodeScript>();
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.TAGALOG;
      linkedList2.add(character_UnicodeScript0);
      linkedList2.poll();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject2 = new JSONObject();
      JSONObject.testValidity(stringReader0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      String string0 = jSONObject2.toString(80);
      JSONObject jSONObject3 = new JSONObject();
      jSONObject3.toMap();
      String string1 = JSONObject.valueToString(linkedList0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("G;", 366.0F);
      jSONObject1.getDouble("G;");
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(125);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float(Float.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject jSONObject1 = jSONObject0.increment(")gB yctBZQV'B#99a+C");
      jSONObject1.optLong(")gB yctBZQV'B#99a+C", 0L);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.toString();
      try { 
        jSONObject1.getBigDecimal("toU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote(":F,NK=?SG<J3]QIZR");
      JSONObject jSONObject1 = new JSONObject((Object) "java.io.StringWriter@0000000002");
      jSONObject0.optBoolean(":F,NK=?SG<J3]QIZR");
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-884));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("[y{Jkx<", 366.0F);
      jSONObject1.toMap();
      String string0 = jSONObject1.optString("[y{Jkx<", "5");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\\", 366.0F);
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      LinkedList<ProcessBuilder.Redirect.Type> linkedList1 = new LinkedList<ProcessBuilder.Redirect.Type>();
      Byte byte0 = new Byte((byte) (-96));
      Number number0 = jSONObject0.optNumber("\\", (Number) byte0);
      assertEquals(366.0F, number0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<KeyRep.Type, Dialog.ModalExclusionType> hashMap0 = new HashMap<KeyRep.Type, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      String string0 = null;
      boolean boolean0 = true;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("3a%*ty", 0.0F);
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      boolean boolean0 = jSONObject0.has("5");
      boolean boolean1 = JSONObject.isDecimalNotation("false");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "getshortValue";
      JSONObject.isDecimalNotation("getshortValue");
      String string1 = "";
      MockFile mockFile0 = new MockFile("", "getshortValue");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(mockFileOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.increment("uv`plicate key \"");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.toString();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      String string0 = jSONObject1.optString(" }9G2AV9G?jS*ab@", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "uv`plicate key \"");
      jSONObject0.append("uv`plicate key \"", charArrayWriter1);
      try { 
        JSONObject.stringToNumber("uv`plicate key \"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [uv`plicate key \"] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<BufferedInputStream, SocketFlow.Status> hashMap0 = new HashMap<BufferedInputStream, SocketFlow.Status>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "isstripExtensions";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("isstripExtensions");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      LinkedList<BufferedOutputStream> linkedList0 = new LinkedList<BufferedOutputStream>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject0.optNumber("isstripExtensions");
      jSONObject0.increment("isstripExtensions");
      try { 
        jSONObject0.append("isstripExtensions", "isstripExtensions");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[isstripExtensions] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      LinkedList<MockFileInputStream> linkedList1 = new LinkedList<MockFileInputStream>();
      linkedList1.iterator();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      PushbackReader pushbackReader0 = new PushbackReader(mockFileReader0);
      boolean boolean0 = JSONObject.isDecimalNotation("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(13);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      LinkedList<FilterInputStream> linkedList0 = new LinkedList<FilterInputStream>();
      String string0 = JSONObject.doubleToString((-2609.5329));
      assertEquals("-2609.5329", string0);
      
      Locale locale0 = Locale.FRENCH;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject1 = new JSONObject();
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, false);
      Object object0 = JSONObject.stringToValue("-2609.5329");
      assertEquals((-2609.5329), object0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      linkedList0.iterator();
      JSONObject.isDecimalNotation("5EIQ(!?-Z:W");
      LinkedList<Dialog.ModalExclusionType> linkedList1 = new LinkedList<Dialog.ModalExclusionType>();
      linkedList1.removeAll(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("5EIQ(!?-Z:W", (Collection<?>) linkedList0);
      LinkedList<ProcessBuilder.Redirect.Type> linkedList2 = new LinkedList<ProcessBuilder.Redirect.Type>();
      jSONObject1.optJSONObject("");
      JSONArray jSONArray0 = jSONObject0.getJSONArray("5EIQ(!?-Z:W");
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = 366.0F;
      JSONObject jSONObject1 = jSONObject0.put("\\", 366.0F);
      jSONObject1.similar("\\");
      jSONObject1.toMap();
      jSONObject0.optInt("] is not a boolean.", (-434));
      LinkedList<Character.UnicodeScript> linkedList0 = new LinkedList<Character.UnicodeScript>();
      linkedList0.poll();
      jSONObject1.getNumber("\\");
      Random.setNextRandom((-434));
      String string0 = "] could not be converted to BigDecimal.";
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = '_';
      charArray0[2] = 'T';
      charArray0[3] = '2';
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader(charArray0, 371, 371);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject.quote("h'");
      Locale locale0 = Locale.FRANCE;
      JSONObject.doubleToString(Double.NaN);
      Object object0 = JSONObject.NULL;
      LinkedList<Character.UnicodeScript> linkedList0 = new LinkedList<Character.UnicodeScript>();
      LinkedList<Character.UnicodeScript> linkedList1 = new LinkedList<Character.UnicodeScript>();
      linkedList1.poll();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      linkedList0.iterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Dialog.ModalExclusionType> linkedList1 = new LinkedList<Dialog.ModalExclusionType>();
      linkedList1.removeAll(linkedList0);
      LinkedList<Dialog.ModalExclusionType> linkedList2 = new LinkedList<Dialog.ModalExclusionType>();
      JSONObject jSONObject1 = jSONObject0.put("5EIQ(!?-Z:W", (Collection<?>) linkedList0);
      jSONObject1.toMap();
      jSONObject1.optInt("5EIQ(!?-Z:W", (-434));
      LinkedList<Character.UnicodeScript> linkedList3 = new LinkedList<Character.UnicodeScript>();
      linkedList3.poll();
      try { 
        jSONObject1.getNumber("5EIQ(!?-Z:W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Double double0 = new Double((-221.0));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ishashCode");
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("ishashCode");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream1);
      JSONObject jSONObject1 = jSONObject0.putOpt("B4;ot{k}.r", objectOutputStream0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("B4;ot{k}.r");
      MockFile mockFile1 = new MockFile("ishashCode");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile1, false);
      JSONObject.quote("getspliterator", (Writer) mockFileWriter0);
      jSONObject0.optFloat("ishashCode", 776.175F);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      jSONObject0.optQuery(jSONPointer0);
      JSONObject.stringToValue("uXcD");
      JSONObject.wrap(fileSystemHandling0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONObject1.optBigDecimal("ishashCode", bigDecimal0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      LinkedList<Thread.State> linkedList0 = new LinkedList<Thread.State>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject.stringToValue("C@cy");
      LinkedList<Character.UnicodeScript> linkedList1 = new LinkedList<Character.UnicodeScript>();
      linkedList1.poll();
      Number number0 = jSONObject0.optNumber("C@cy", (Number) bigDecimal0);
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^8wFSFM@?#,_o@Gw");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.put("", (Object) "");
      JSONPointer jSONPointer0 = new JSONPointer("");
      jSONObject1.optQuery(jSONPointer0);
      LinkedList<DropMode> linkedList0 = new LinkedList<DropMode>();
      JSONObject jSONObject2 = jSONObject1.put("\\", (Collection<?>) linkedList0);
      double double0 = jSONObject2.optDouble("", Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("M?o/fF9P$5FR", "\\");
      LinkedList<DropMode> linkedList0 = new LinkedList<DropMode>();
      JSONObject jSONObject2 = jSONObject1.put("FKwd1~,3,:", (Collection<?>) linkedList0);
      jSONObject1.optDouble("M?o/fF9P$5FR", 0.0);
      jSONObject2.optBoolean("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":[],\"value2\":false,\"number\":\"1\"}");
      float float0 = jSONObject0.optFloat("ot.t~qgS", 3800.7F);
      assertEquals(2, jSONObject0.length());
      assertEquals(3800.7F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) null);
      LinkedList<JTable.PrintMode> linkedList0 = new LinkedList<JTable.PrintMode>();
      RowIdLifetime rowIdLifetime0 = RowIdLifetime.ROWID_VALID_FOREVER;
      LinkedList<RowIdLifetime> linkedList1 = new LinkedList<RowIdLifetime>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSONObject0);
      Predicate<Object> predicate1 = predicate0.negate();
      linkedList1.removeIf(predicate1);
      RowIdLifetime rowIdLifetime1 = RowIdLifetime.ROWID_VALID_FOREVER;
      linkedList1.add(rowIdLifetime1);
      JSONObject jSONObject2 = jSONObject1.putOnce((String) null, rowIdLifetime0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)25;
      byteArray0[7] = (byte)66;
      byteArray0[8] = (byte)65;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject2.optBigInteger("getgetISO3Country", bigInteger0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject3 = new JSONObject();
      JSONObject jSONObject4 = jSONObject3.optJSONObject((String) null);
      assertNull(jSONObject4);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      String string0 = "floatValue";
      StringReader stringReader0 = new StringReader("floatValue");
      JSONObject.wrap("floatValue");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      JSONObject jSONObject1 = new JSONObject(stringWriter0);
      jSONObject0.optFloat("$;|;J~0vl,&(t");
      try { 
        JSONObject.stringToNumber("9\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader(1394);
      String[] stringArray0 = new String[7];
      stringArray0[0] = " line ";
      stringArray0[1] = " line ";
      stringArray0[2] = " line ";
      stringArray0[3] = " line ";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = " line ";
      JSONObject jSONObject1 = new JSONObject(pipedReader0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.putOpt(" line ", jSONObject1);
      jSONObject0.optLong("VC8KPbqnojY", 0L);
      assertFalse(jSONObject0.isEmpty());
      
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('_');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      mockPrintWriter0.append('_');
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      JSONObject jSONObject3 = new JSONObject(dataInputStream0, stringArray0);
      Number number0 = JSONObject.stringToNumber("-99");
      assertEquals((-99), number0);
      
      float float0 = jSONObject2.optFloat(" line ", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
      
      boolean boolean0 = jSONObject0.similar(jSONObject3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\\", 366.0F);
      boolean boolean0 = jSONObject1.similar(jSONObject0);
      assertTrue(boolean0);
      
      String[] stringArray0 = JSONObject.getNames((Object) "\\");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.stringToValue("5");
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      jSONObject0.putOpt("3a%*ty", roundingMode0);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.optJSONObject("M'\".NX^");
      // Undeclared exception!
      try { 
        jSONObject1.write((Writer) null, 8, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("has", "has");
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      LinkedList<Component.BaselineResizeBehavior> linkedList1 = new LinkedList<Component.BaselineResizeBehavior>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList1);
      Class<MultipleGradientPaint.CycleMethod> class0 = MultipleGradientPaint.CycleMethod.class;
      jSONObject1.optEnum(class0, "cY=j");
      String string0 = jSONObject0.getString("has");
      assertEquals("has", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      linkedList0.iterator();
      String string0 = "5EIQ(!?-Z:W";
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Dialog.ModalExclusionType> linkedList1 = new LinkedList<Dialog.ModalExclusionType>();
      linkedList1.removeAll(linkedList0);
      try { 
        JSONObject.stringToNumber("5EIQ(!?-Z:W");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject.quote("*x5");
      Double double0 = new Double(0.7067738910482391);
      Locale locale0 = Locale.FRANCE;
      JSONObject.quote("java.io.StringWriter@0000000001");
      Double double1 = new Double(0.7067738910482391);
      JSONObject.wrap(double1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MockFile mockFile0 = new MockFile((File) null, "java.io.StringWriter@0000000001");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(13);
      JSONObject jSONObject1 = new JSONObject(13);
      JSONObject.getNames(jSONObject1);
      LinkedList<FilterInputStream> linkedList0 = new LinkedList<FilterInputStream>();
      jSONObject1.remove("3Hr0.{?x,");
      HashMap<Formatter.BigDecimalLayoutForm, Short> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Short>();
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm0 = Formatter.BigDecimalLayoutForm.DECIMAL_FLOAT;
      Short short0 = new Short((short)139);
      Short short1 = new Short((short)139);
      HashMap<Formatter.BigDecimalLayoutForm, Short> hashMap1 = new HashMap<Formatter.BigDecimalLayoutForm, Short>();
      Short short2 = new Short((short) (-359));
      hashMap1.put(formatter_BigDecimalLayoutForm0, short2);
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject2.isEmpty();
      jSONObject1.remove("3Hr0.{?x,");
      Map<String, Object> map0 = jSONObject2.toMap();
      jSONObject0.names();
      jSONObject1.toJSONArray((JSONArray) null);
      JSONObject.stringToValue("3Hr0.{?x,");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject jSONObject3 = new JSONObject((Object) map0);
      try { 
        JSONObject.stringToNumber("3Hr0.{?x,");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("6h&+FERiO");
      assertEquals("6h&+FERiO", object0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      linkedList0.iterator();
      String string0 = "5EIQ(!?-Z:W";
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Dialog.ModalExclusionType> linkedList1 = new LinkedList<Dialog.ModalExclusionType>();
      linkedList1.removeAll(linkedList0);
      LinkedList<Dialog.ModalExclusionType> linkedList2 = new LinkedList<Dialog.ModalExclusionType>();
      linkedList0.stream();
      JSONObject jSONObject1 = jSONObject0.put("5EIQ(!?-Z:W", (Collection<?>) linkedList0);
      jSONObject1.toMap();
      int int0 = (-394);
      SocketFlow.Status socketFlow_Status0 = SocketFlow.Status.OK;
      Class<SocketFlow.Status> class0 = SocketFlow.Status.class;
      jSONObject0.optEnum(class0, "5EIQ(!?-Z:W", socketFlow_Status0);
      try { 
        jSONObject1.getFloat("5EIQ(!?-Z:W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      linkedList0.iterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Dialog.ModalExclusionType> linkedList1 = new LinkedList<Dialog.ModalExclusionType>();
      linkedList1.removeAll(linkedList0);
      LinkedList<Dialog.ModalExclusionType> linkedList2 = new LinkedList<Dialog.ModalExclusionType>();
      JSONObject jSONObject1 = jSONObject0.put("5EIQ(!?-Z:W", (Collection<?>) linkedList0);
      jSONObject1.toMap();
      int int0 = jSONObject1.optInt("5EIQ(!?-Z:W", (-394));
      assertEquals((-394), int0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      MockFile mockFile0 = new MockFile("5EIQ(!?-Z:W", "Null pointer");
      MockFile mockFile1 = new MockFile(mockFile0, "to");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(dataInputStream0);
      JSONObject jSONObject2 = new JSONObject(bufferedInputStream1);
      float float0 = jSONObject0.optFloat("5EIQ(!?-Z:W");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1002);
      assertTrue(jSONObject0.isEmpty());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject1 = jSONObject0.put("istrim", (Object) "istrim");
      byte[] byteArray0 = new byte[5];
      LinkedList<RowIdLifetime> linkedList0 = new LinkedList<RowIdLifetime>();
      JSONObject jSONObject2 = jSONObject0.put("istrim", (Collection<?>) linkedList0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)25;
      JSONObject jSONObject3 = new JSONObject(jSONObject0);
      LinkedList<MockFileInputStream> linkedList1 = new LinkedList<MockFileInputStream>();
      JSONObject jSONObject4 = new JSONObject(jSONObject3);
      jSONObject1.keySet();
      float float0 = jSONObject2.optFloat("istrim");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("M?o/fF9P$5FR", "\\");
      LinkedList<DropMode> linkedList0 = new LinkedList<DropMode>();
      JSONObject jSONObject2 = jSONObject1.put("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":[],\"value2\":false,\"number\":\"1\"}", (Collection<?>) linkedList0);
      jSONObject0.optDouble((String) null, 0.0);
      jSONObject2.optBoolean("\\");
      float float0 = jSONObject0.optFloat("M?o/fF9P$5FR", 3800.7F);
      assertEquals(2, jSONObject0.length());
      assertEquals(3800.7F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<RowIdLifetime, RoundingMode> hashMap0 = new HashMap<RowIdLifetime, RoundingMode>();
      Long long0 = new Long((-3453L));
      hashMap0.remove((Object) long0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optInt("try", (-2842));
      jSONObject0.length();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Random.setNextRandom(2279);
      jSONObject0.optDouble("try", 0.0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = Locale.ITALY;
      locale0.getDisplayName(locale1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/pyC2)x&c\"R4!mY3mw");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      jSONObject0.optQuery(jSONPointer0);
      try { 
        jSONObject0.getInt("|F<%te3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Dialog.ModalExclusionType> linkedList0 = new LinkedList<Dialog.ModalExclusionType>();
      jSONObject0.put("has", (Collection<?>) linkedList0);
      jSONObject0.optInt("has", (-434));
      Object object0 = new Object();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("fl");
      JSONObject jSONObject1 = new JSONObject(mockFileOutputStream0);
      JSONObject jSONObject2 = new JSONObject();
      HashMap<KeyRep.Type, Desktop.Action> hashMap0 = new HashMap<KeyRep.Type, Desktop.Action>();
      jSONObject0.put("UM6$", (Map<?, ?>) hashMap0);
      long long0 = jSONObject0.optLong("has", (long) (-434));
      assertEquals((-434L), long0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      linkedList0.iterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Dialog.ModalExclusionType> linkedList1 = new LinkedList<Dialog.ModalExclusionType>();
      linkedList1.removeAll(linkedList0);
      LinkedList<Dialog.ModalExclusionType> linkedList2 = new LinkedList<Dialog.ModalExclusionType>();
      JSONObject jSONObject1 = jSONObject0.put("5EIQ(!?-Z:W", (Collection<?>) linkedList0);
      Map<String, Object> map0 = jSONObject1.toMap();
      jSONObject1.optInt("5EIQ(!?-Z:W", (-394));
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      MockFile mockFile0 = new MockFile("5EIQ(!?-Z:W", "Null pointer");
      MockFile mockFile1 = new MockFile(mockFile0, "to");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      JSONObject jSONObject2 = new JSONObject(mockPrintStream0);
      JSONObject jSONObject3 = new JSONObject();
      jSONObject1.put("has", map0);
      long long0 = jSONObject0.optLong("has", (long) (-394));
      assertEquals((-394L), long0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Locale locale0 = Locale.FRANCE;
      JSONObject.quote("ko0YGb^ZS`EKX^K_BH");
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JSONObject.wrap(bigInteger0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      jSONObject0.query(jSONPointer0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      JSONObject jSONObject1 = new JSONObject(sequenceInputStream0);
      float float0 = jSONObject0.optFloat("ko0YGb^ZS`EKX^K_BH");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ONE;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JSONObject.wrap(bigInteger0);
      String string0 = "v#wk";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("v#wk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^8wFSFM@?#,_o@Gw");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("^8wFSFM@?#,_o@Gw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<BufferedInputStream, SocketFlow.Status> hashMap0 = new HashMap<BufferedInputStream, SocketFlow.Status>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("8|[z~?P");
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.doubleValue();
      bigInteger0.bitLength();
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      LinkedList<ProcessBuilder.Redirect.Type> linkedList1 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList1);
      jSONObject1.increment("8|[z~?P");
      boolean boolean0 = jSONObject1.has("8|[z~?P");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "uv`plicate key \"";
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "uv`plicate key \"");
      jSONObject0.append("uv`plicate key \"", charArrayWriter1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      jSONObject0.optBoolean("uv`plicate key \"", true);
      try { 
        jSONObject0.getLong("uv`plicate key \"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject.quote("h'");
      Double double0 = new Double((-221.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("h'", "java.io.StringWriter@0000000001");
      jSONObject1.optBigDecimal("java.io.StringWriter@0000000001", (BigDecimal) null);
      try { 
        jSONObject1.getJSONObject("h'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000014] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("Unable to write JSONObject value for key: ", (-22693976));
      JSONObject jSONObject1 = jSONObject0.put("org.e", (-1400.908F));
      jSONObject1.optLong("org.e");
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      LinkedList<ProcessBuilder.Redirect.Type> linkedList1 = new LinkedList<ProcessBuilder.Redirect.Type>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedList<Character.UnicodeScript> linkedList2 = new LinkedList<Character.UnicodeScript>();
      linkedList2.poll();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList2);
      JSONObject jSONObject2 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      Object object0 = JSONObject.NULL;
      jSONObject0.put("byt", object0);
      LinkedList<RowIdLifetime> linkedList0 = new LinkedList<RowIdLifetime>();
      JSONObject jSONObject1 = jSONObject0.put("istrim", (Collection<?>) linkedList0);
      RowIdLifetime rowIdLifetime0 = RowIdLifetime.ROWID_VALID_SESSION;
      linkedList0.add(rowIdLifetime0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      jSONObject0.putOnce("!vY{RyK.CpgC#zv~", pipedOutputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)65;
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      jSONObject1.optBigInteger("isNaN", bigInteger2);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject1.toString();
      assertEquals(3, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      linkedList0.iterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Dialog.ModalExclusionType> linkedList1 = new LinkedList<Dialog.ModalExclusionType>();
      linkedList1.removeAll(linkedList0);
      LinkedList<Dialog.ModalExclusionType> linkedList2 = new LinkedList<Dialog.ModalExclusionType>();
      JSONObject jSONObject1 = jSONObject0.put("5EIQ(!?-Z:W", (Collection<?>) linkedList0);
      jSONObject1.toMap();
      LinkedList<Character.UnicodeScript> linkedList3 = new LinkedList<Character.UnicodeScript>();
      linkedList3.poll();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList1);
      JSONObject jSONObject2 = new JSONObject();
      Double double0 = new Double(0.0);
      JSONObject.testValidity((Object) null);
      try { 
        jSONObject1.getJSONObject("Misplaced endObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      linkedList0.iterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Dialog.ModalExclusionType> linkedList1 = new LinkedList<Dialog.ModalExclusionType>();
      linkedList1.removeAll(linkedList0);
      LinkedList<Dialog.ModalExclusionType> linkedList2 = new LinkedList<Dialog.ModalExclusionType>();
      JSONObject jSONObject1 = jSONObject0.put("5EIQ(!?-Z:W", (Collection<?>) linkedList0);
      jSONObject1.toMap();
      jSONObject1.optInt("5EIQ(!?-Z:W", (-394));
      LinkedList<ProcessBuilder.Redirect.Type> linkedList3 = new LinkedList<ProcessBuilder.Redirect.Type>();
      Byte byte0 = new Byte((byte) (-26));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-96);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-26);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Number number0 = jSONObject0.optNumber("5EIQ(!?-Z:W", (Number) bigInteger0);
      assertEquals((byte) (-26), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("getnames", "getnames");
      Class<MultipleGradientPaint.CycleMethod> class0 = MultipleGradientPaint.CycleMethod.class;
      jSONObject0.optEnum(class0, "getnames");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      linkedList0.iterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Dialog.ModalExclusionType> linkedList1 = new LinkedList<Dialog.ModalExclusionType>();
      linkedList1.removeAll(linkedList0);
      LinkedList<Dialog.ModalExclusionType> linkedList2 = new LinkedList<Dialog.ModalExclusionType>();
      JSONObject jSONObject1 = jSONObject0.put("5EIQ(!?-Z:W", (Collection<?>) linkedList0);
      jSONObject1.toMap();
      jSONObject1.optInt("5EIQ(!?-Z:W", (-394));
      Class<RoundingMode> class0 = RoundingMode.class;
      try { 
        jSONObject0.getEnum(class0, "5EIQ(!?-Z:W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not an enum of type java.io.StringWriter@0000000011.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append((CharSequence) "uv`plicate key \"");
      String string0 = null;
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("Unable to write JSONObject value for key: ", (-22693976));
      JSONObject jSONObject1 = jSONObject0.put("org.e", 0.0F);
      jSONObject1.optLong("org.e");
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      LinkedList<ProcessBuilder.Redirect.Type> linkedList1 = new LinkedList<ProcessBuilder.Redirect.Type>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedList<Character.UnicodeScript> linkedList2 = new LinkedList<Character.UnicodeScript>();
      linkedList2.poll();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList2);
      JSONObject jSONObject2 = new JSONObject();
      Double double0 = new Double(0.0F);
      JSONObject.testValidity(double0);
      try { 
        jSONObject2.getJSONObject("size");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"getintValue\":true,\"value\":null,\"value2\":99,\"number\":\"1\"}");
      JSONObject jSONObject1 = jSONObject0.increment("{\"fruit\":\"Apple\",\"size\":\"Large\",\"getintValue\":true,\"value\":null,\"value2\":99,\"number\":\"1\"}");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jSONObject1.optBoolean("{\"fruit\":\"Apple\",\"size\":\"Large\",\"getintValue\":true,\"value\":null,\"value2\":99,\"number\":\"1\"}", true);
      jSONObject1.getLong("{\"fruit\":\"Apple\",\"size\":\"Large\",\"getintValue\":true,\"value\":null,\"value2\":99,\"number\":\"1\"}");
      LinkedList<Character.UnicodeScript> linkedList0 = new LinkedList<Character.UnicodeScript>();
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("{\"fruit\":\"Apple\",\"size\":\"Large\",\"getintValue\":true,\"value\":null,\"value2\":99,\"number\":\"1\"}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject1 = jSONObject0.increment("] not a string.");
      boolean boolean0 = jSONObject1.has("] not a string.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) null);
      jSONObject1.increment("");
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Float float0 = new Float(0.0);
      JSONObject.wrap(float0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(mockFileReader0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      float float1 = jSONObject1.optFloat("");
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      JSONObject.quote((String) null);
      Double double0 = new Double(0.0);
      Locale locale0 = Locale.FRANCE;
      String string0 = "islock";
      String string1 = "#uG**2+G";
      JSONObject.quote("#uG**2+G");
      Float float0 = new Float(Double.NaN);
      JSONObject.wrap(float0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1002);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "istrim";
      JSONObject jSONObject1 = jSONObject0.put("istrim", (Object) "istrim");
      byte[] byteArray0 = new byte[5];
      LinkedList<RowIdLifetime> linkedList0 = new LinkedList<RowIdLifetime>();
      jSONObject0.put("Vl&ze^$]u8<URFL6DA", (Collection<?>) linkedList0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)50;
      RowIdLifetime rowIdLifetime0 = RowIdLifetime.ROWID_VALID_FOREVER;
      linkedList0.add(rowIdLifetime0);
      jSONObject0.putOnce("^uW*-XC:>OO0YKoN", fileSystemHandling0);
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)65;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject0.optBigInteger("Vl&ze^$]u8<URFL6DA", bigInteger0);
      JSONObject.quote("istrim");
      jSONObject0.opt("D[7");
      jSONObject1.put("]L9(:X", (Collection<?>) linkedList0);
      jSONObject1.keys();
      jSONObject0.opt("java.io.StringWriter@0000000022");
      JSONObject.wrap(jSONObject1);
      jSONObject1.optString("java.io.StringWriter@0000000022");
      // Undeclared exception!
      try { 
        jSONObject1.query("istrim");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockFileWriter mockFileWriter0 = new MockFileWriter("ke");
      jSONObject0.put("ke", (Object) mockFileWriter0);
      LinkedList<RowIdLifetime> linkedList0 = new LinkedList<RowIdLifetime>();
      RowIdLifetime rowIdLifetime0 = RowIdLifetime.ROWID_VALID_TRANSACTION;
      linkedList0.add(rowIdLifetime0);
      JSONObject jSONObject1 = jSONObject0.putOnce("^uW*-XC:>OO0YKoN", "^uW*-XC:>OO0YKoN");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)89;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject1.optBigInteger("ke", bigInteger0);
      assertEquals(2, jSONObject0.length());
      
      Object object0 = JSONObject.stringToValue("ke");
      assertEquals("ke", object0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"L)rge\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"number\":\"1\"}");
      jSONObject0.increment("8|[z~?P");
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JSONObject.wrap(locale0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(mockFileReader0);
      JSONObject jSONObject1 = new JSONObject(lineNumberReader0);
      float float0 = jSONObject0.optFloat("8|[z~?P");
      assertEquals(7, jSONObject0.length());
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\\", 366.0F);
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      JSONObject jSONObject2 = new JSONObject(byteArrayOutputStream0);
      float float0 = jSONObject1.optFloat("\\");
      assertEquals(366.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Short> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Short>();
      String string0 = "false";
      String string1 = ".";
      JSONObject.stringToValue("false");
      String string2 = "Unable to write JSONArray value at index: 0";
      Locale locale0 = Locale.US;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("Unable to write JSONArray value at index: 0", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name Unable to write JSONArray value at index: 0, locale en_US
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "^8wFSFM@?#,_o@Gw";
      StringReader stringReader0 = new StringReader("^8wFSFM@?#,_o@Gw");
      JSONObject jSONObject0 = new JSONObject();
      String string1 = "\\\\";
      JSONObject jSONObject1 = jSONObject0.put("\\", 366.0F);
      String string2 = "";
      JSONObject jSONObject2 = jSONObject1.put("", (Object) "");
      jSONObject1.putOpt("\\", "istrim");
      jSONObject2.put("^8wFSFM@?#,_o@Gw", (-1L));
      JSONPointer jSONPointer0 = new JSONPointer("");
      JSONPointer.builder();
      jSONObject1.optQuery(jSONPointer0);
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      linkedList0.iterator();
      HashMap<Formatter.BigDecimalLayoutForm, Short> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Short>();
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm0 = Formatter.BigDecimalLayoutForm.SCIENTIFIC;
      hashMap0.put(formatter_BigDecimalLayoutForm0, (Short) null);
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject1.isEmpty());
      
      Locale locale0 = Locale.FRANCE;
      JSONObject.quote("ePb'b");
      RoundingMode roundingMode0 = RoundingMode.UP;
      JSONObject.wrap(roundingMode0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      bufferedInputStream0.available();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 44);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pushbackInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      MockFile mockFile0 = new MockFile("ePb'b", "] is not a JSONArray.");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 117);
      JSONObject jSONObject2 = new JSONObject(bufferedWriter0);
      float float0 = jSONObject0.optFloat("iG;`");
      assertEquals(Float.NaN, float0, 0.01F);
      
      boolean boolean0 = JSONObject.isDecimalNotation("] is not a JSONArray.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"number\":\"1\"}");
      jSONObject0.increment("8|[z~?P");
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.bitLength();
      Boolean boolean0 = new Boolean("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"number\":\"1\"}");
      LinkedList<Character.UnicodeScript> linkedList0 = new LinkedList<Character.UnicodeScript>();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("3a%*ty", 0.0F);
      JSONArray jSONArray0 = jSONObject1.names();
      jSONObject1.toJSONArray(jSONArray0);
      String string0 = jSONObject1.optString("3a%*ty");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader(1394);
      String[] stringArray0 = new String[7];
      stringArray0[0] = " line ";
      JSONObject jSONObject1 = jSONObject0.increment(",_~3:Z8");
      jSONObject1.optBoolean((String) null, false);
      jSONObject1.optInt("", 1394);
      jSONObject0.optString(",_~3:Z8");
      LinkedList<Character.UnicodeScript> linkedList0 = new LinkedList<Character.UnicodeScript>();
      try { 
        jSONObject1.getBigDecimal(" line ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"number\":\"1\"}");
      jSONObject0.increment("8|[z~?P");
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.bitLength();
      LinkedList<Dialog.ModalExclusionType> linkedList0 = new LinkedList<Dialog.ModalExclusionType>();
      LinkedList<MockFileOutputStream> linkedList1 = new LinkedList<MockFileOutputStream>();
      linkedList0.removeAll(linkedList1);
      LinkedList<Dialog.ModalExclusionType> linkedList2 = new LinkedList<Dialog.ModalExclusionType>(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("D?L", (Collection<?>) linkedList1);
      jSONObject1.toMap();
      int int0 = jSONObject1.optInt("w4)E[FCHE1N\"k7 r=", 0);
      assertEquals(8, jSONObject0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<BufferedInputStream, SocketFlow.Status> hashMap0 = new HashMap<BufferedInputStream, SocketFlow.Status>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 31;
      String string0 = "0";
      JSONObject.stringToValue("0");
      LinkedList<Character.UnicodeScript> linkedList0 = new LinkedList<Character.UnicodeScript>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 31);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      LinkedList<Thread.State> linkedList0 = new LinkedList<Thread.State>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject.stringToValue("true");
      LinkedList<Character.UnicodeScript> linkedList1 = new LinkedList<Character.UnicodeScript>();
      linkedList1.poll();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList1);
      try { 
        jSONArray0.getJSONObject(23);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[23] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("has", "has");
      JSONObject.stringToValue("1&aIoR~~2Y&[W%");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.getNames(jSONObject1);
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^8wFSFM@?#,_o@Gw");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\\", 366.0F);
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      String string0 = "BrJp&a2-E@:;9X&MA";
      MockFile.createTempFile("^8wFSFM@?#,_o@Gw", "BrJp&a2-E@:;9X&MA");
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^8wFSFM@?#,_o@Gw");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\\", 366.0F);
      String string0 = "";
      JSONObject jSONObject2 = jSONObject1.put("", (Object) "");
      jSONObject1.putOpt("istrim", "istrim");
      jSONObject2.put("^8wFSFM@?#,_o@Gw", (-1L));
      JSONPointer jSONPointer0 = new JSONPointer("");
      JSONObject jSONObject3 = (JSONObject)jSONObject1.optQuery(jSONPointer0);
      jSONObject3.putOpt("\\", stringReader0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject1.write((Writer) charArrayWriter0, (-3134), 160);
      Character character0 = new Character('n');
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("pop", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^8wFSFM@?#,_o@Gw");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\\", 366.0F);
      jSONObject1.optLong("\\");
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      LinkedList<ProcessBuilder.Redirect.Type> linkedList1 = new LinkedList<ProcessBuilder.Redirect.Type>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedList<Character.UnicodeScript> linkedList2 = new LinkedList<Character.UnicodeScript>();
      linkedList2.poll();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject2 = new JSONObject();
      JSONObject.testValidity(stringReader0);
      try { 
        jSONObject2.getJSONObject("\\");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      String string0 = "Duv`plicate key \"";
      stringArray0[2] = "Duv`plicate key \"";
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)111;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      JSONObject jSONObject1 = new JSONObject(dataInputStream0);
      JSONObject jSONObject2 = jSONObject0.putOpt("true", (Object) null);
      try { 
        jSONObject2.getJSONObject("Duv`plicate key \"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<BufferedInputStream, SocketFlow.Status> hashMap0 = new HashMap<BufferedInputStream, SocketFlow.Status>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("has", (Object) null);
      try { 
        jSONObject1.getJSONObject("Y{v'7H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject.quote("h'");
      Double double0 = new Double((-221.0));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ishashCode");
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      JSONObject jSONObject1 = jSONObject0.putOpt("B4;ot{k}.r", objectOutputStream0);
      jSONObject1.increment("h'");
      JSONObject.getNames((Object) "java.io.StringWriter@0000000001");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("B4;ot{k}.r");
      JSONArray jSONArray0 = jSONObject0.names();
      jSONArray0.put(1.0F);
      try { 
        jSONObject1.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[4] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^8wFSFM@?#,_o@Gw");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\\", 366.0F);
      JSONObject jSONObject2 = jSONObject1.put("", (Object) "");
      jSONObject1.putOpt("istrim", "istrim");
      jSONObject2.put("^8wFSFM@?#,_o@Gw", (-1L));
      JSONPointer jSONPointer0 = new JSONPointer("");
      JSONObject jSONObject3 = (JSONObject)jSONObject1.optQuery(jSONPointer0);
      jSONObject3.putOpt("", "\\");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject2.write((Writer) charArrayWriter0, 1180, 1);
      Character character0 = new Character('n');
      JSONObject.getNames((Object) character0);
      JSONObject jSONObject4 = new JSONObject();
      int int0 = jSONObject2.length();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject.quote("h'");
      Double double0 = new Double((-221.0));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("isFahCoe");
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      StringReader stringReader0 = new StringReader("DYv25KqWb:t-EUS7");
      JSONObject jSONObject1 = jSONObject0.putOpt("DYv25KqWb:t-EUS7", stringReader0);
      JSONObject jSONObject2 = jSONObject1.increment("java.io.StringWriter@0000000001");
      JSONObject.getNames((Object) stringReader0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("DYv25KqWb:t-EUS7");
      MockFile mockFile1 = new MockFile("D9fNqsz0?B^kW`/ Z");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      JSONObject.quote("B4;ot+{k}.r", (Writer) mockFileWriter0);
      jSONObject1.optFloat("getspliterator", 776.175F);
      JSONObject.quote("].Y|/-!]VVu(", (Writer) mockFileWriter0);
      try { 
        jSONObject2.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\\", 366.0F);
      boolean boolean0 = new Boolean("\\");
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      JSONObject jSONObject1 = jSONObject0.increment("\\");
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^8wFSFM@?#,_o@Gw");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\\", 366.0F);
      jSONObject1.toMap();
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      LinkedList<ProcessBuilder.Redirect.Type> linkedList1 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject1.increment("\\");
      LinkedList<Thread.State> linkedList2 = new LinkedList<Thread.State>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList2);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject1.toString();
      try { 
        jSONObject1.getBigDecimal("\\");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000019] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("'ojOLTOR[yd86");
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject0.getBigDecimal("'ojOLTOR[yd86");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("8ujOLTOR[yd86");
      JSONObject jSONObject1 = jSONObject0.putOnce("|S/!", "8ujOLTOR[yd86");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)53;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject1.optBigInteger("8ujOLTOR[yd86", bigInteger0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = JSONObject.quote("Unable to increment [");
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        JSONObject.quote("Unable to increment [", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      linkedList0.iterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Dialog.ModalExclusionType> linkedList1 = new LinkedList<Dialog.ModalExclusionType>();
      linkedList1.removeAll(linkedList0);
      LinkedList<Dialog.ModalExclusionType> linkedList2 = new LinkedList<Dialog.ModalExclusionType>();
      JSONObject jSONObject1 = jSONObject0.put("5EIQ(!?-Z:W", (Collection<?>) linkedList0);
      LinkedList<ProcessBuilder.Redirect.Type> linkedList3 = new LinkedList<ProcessBuilder.Redirect.Type>();
      jSONObject1.optJSONObject("");
      jSONObject0.getJSONArray("5EIQ(!?-Z:W");
      JSONObject jSONObject2 = new JSONObject();
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getDisplayName");
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "has";
      JSONObject jSONObject1 = jSONObject0.putOpt("has", "has");
      try { 
        jSONObject1.getJSONArray("has");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^8wFSFM@?#,_o@Gw");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\\", 366.0F);
      JSONObject jSONObject2 = jSONObject1.put("", (Object) "");
      jSONObject1.putOpt("\\", "istrim");
      jSONObject2.put("^8wFSFM@?#,_o@Gw", (-1L));
      JSONPointer jSONPointer0 = new JSONPointer("");
      JSONPointer.builder();
      JSONObject jSONObject3 = (JSONObject)jSONObject1.optQuery(jSONPointer0);
      jSONObject3.putOpt("", "\\");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject2.write((Writer) charArrayWriter0, 1180, 1);
      Character character0 = new Character('n');
      JSONObject.getNames((Object) character0);
      jSONObject1.optJSONObject("^8wFSFM@?#,_o@Gw");
      try { 
        jSONObject2.getJSONArray("^8wFSFM@?#,_o@Gw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000045] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      stringArray0[2] = "Duv`plicate key \"";
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      JSONObject.getNames((Object) hashMap0);
      StringReader stringReader0 = new StringReader("jYE{^3--5/(S!aBTUh8");
      Character character0 = new Character('I');
      JSONObject.wrap(character0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1488);
      pipedOutputStream0.connect(pipedInputStream0);
      JSONObject jSONObject1 = new JSONObject(bufferedOutputStream0);
      bufferedOutputStream0.write(1092);
      jSONObject1.optFloat("J[S)F.^YZh");
      PipedInputStream pipedInputStream1 = new PipedInputStream(160);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream(pipedInputStream1);
      JSONObject.valueToString(pipedOutputStream1);
      JSONObject jSONObject2 = jSONObject0.put("9i~2Yp:'lZ]h^A&.'>", (Map<?, ?>) hashMap0);
      assertSame(jSONObject2, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      String string0 = "Duv`plicate key \"";
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONObject0.optNumber("j9z(wcfc8MZfr;f UPy", (Number) bigDecimal0);
      jSONObject0.put("org.ev", true);
      stringArray0[1] = "Duv`plicate key \"";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getDouble("Duv`plicate key \"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^8wFSFM@?#,_o@Gw");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\\", 366.0F);
      BigDecimal bigDecimal0 = new BigDecimal((double) (-1L));
      jSONObject0.optBigDecimal("", bigDecimal0);
      jSONObject1.putOpt("istrim", "istrim");
      jSONObject0.put("^8wFSFM@?#,_o@Gw", (-1L));
      JSONPointer jSONPointer0 = new JSONPointer("");
      JSONObject jSONObject2 = (JSONObject)jSONObject1.optQuery(jSONPointer0);
      jSONObject2.putOpt("", "\\");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.write((Writer) charArrayWriter0, 1180, 1);
      Character character0 = new Character('n');
      JSONObject.getNames((Object) character0);
      long long0 = jSONObject0.getLong("^8wFSFM@?#,_o@Gw");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^8wFSFM@?#,_o@Gw");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.put("", (Object) "");
      jSONObject1.putOpt("\\", "istrim");
      JSONObject jSONObject3 = jSONObject2.put("^8wFSFM@?#,_o@Gw", (-1L));
      jSONObject3.getString("");
      JSONPointer jSONPointer0 = new JSONPointer("");
      JSONObject jSONObject4 = (JSONObject)jSONObject1.optQuery(jSONPointer0);
      jSONObject4.putOpt("", "\\");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      Character character0 = new Character('n');
      JSONObject.getNames((Object) character0);
      jSONObject0.optJSONObject("istrim");
      JSONObject jSONObject5 = new JSONObject();
      assertFalse(jSONObject5.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject.quote("h'");
      Double double0 = new Double((-221.0));
      String string0 = "ishashCode";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ishashCode");
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      JSONObject jSONObject1 = jSONObject0.putOpt("B4;ot{k}.r", objectOutputStream0);
      JSONObject jSONObject2 = jSONObject1.increment("h'");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject2.put("B4;ot{k}.r", (Collection<?>) linkedList0);
      JSONObject.getNames((Object) "java.io.StringWriter@0000000001");
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject2.toJSONArray(jSONArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("B4;ot{k}.r");
      MockFile mockFile1 = new MockFile("ishashCode");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile1, true);
      JSONObject.quote("getspliterator", (Writer) mockFileWriter0);
      jSONObject0.optFloat("ishashCode", 776.175F);
      String string1 = "0000";
      JSONObject.quote("0000", (Writer) mockFileWriter0);
      try { 
        jSONObject2.getString("B4;ot{k}.r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000055] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<BufferedInputStream, SocketFlow.Status> hashMap0 = new HashMap<BufferedInputStream, SocketFlow.Status>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("8|[z~?P");
      try { 
        jSONObject0.getString("8|[z~?P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject.quote("h'");
      Double double0 = new Double((-221.0));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ishashCode");
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      JSONObject jSONObject1 = jSONObject0.putOpt("B4;ot{k}.r", objectOutputStream0);
      JSONObject jSONObject2 = jSONObject1.increment("h'");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject2.put("B4;ot{k}.r", (Collection<?>) linkedList0);
      JSONObject.getNames((Object) "java.io.StringWriter@0000000001");
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject2.toJSONArray(jSONArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("B4;ot{k}.r");
      MockFile mockFile1 = new MockFile("ishashCode");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile1, true);
      JSONObject.quote("getspliterator", (Writer) mockFileWriter0);
      jSONObject0.optFloat("ishashCode", 776.175F);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      jSONObject0.optQuery(jSONPointer0);
      jSONObject2.optDouble("is");
      JSONObject.stringToValue("cD");
      jSONObject2.optQuery(jSONPointer0);
      jSONObject2.optBigDecimal("h'", (BigDecimal) null);
      assertEquals(4, jSONObject1.length());
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "uv`plicate key \"");
      jSONObject0.append("uv`plicate key \"", charArrayWriter1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      jSONObject0.optBoolean("uv`plicate key \"", true);
      try { 
        jSONObject0.getLong("uv`plicate key \"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"number\":\"1\"}");
      JSONObject jSONObject1 = jSONObject0.increment("8|[z~?P");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jSONObject1.optBoolean("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"number\":\"1\"}", true);
      jSONObject1.getLong("8|[z~?P");
      LinkedList<Character.UnicodeScript> linkedList0 = new LinkedList<Character.UnicodeScript>();
      // Undeclared exception!
      try { 
        jSONObject1.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^8wFSFM@?#,_o@Gw");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\\", 366.0F);
      JSONObject jSONObject2 = jSONObject1.put("", (Object) "");
      jSONObject1.putOpt("istrim", "istrim");
      jSONObject2.put("^8wFSFM@?#,_o@Gw", (-1L));
      JSONPointer jSONPointer0 = new JSONPointer("");
      JSONObject jSONObject3 = (JSONObject)jSONObject1.optQuery(jSONPointer0);
      jSONObject3.putOpt("", "\\");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject2.write((Writer) charArrayWriter0, 1180, 1);
      Character character0 = new Character('n');
      JSONObject.getNames((Object) character0);
      jSONObject0.getLong("^8wFSFM@?#,_o@Gw");
      JSONArray jSONArray0 = jSONObject1.optJSONArray("length");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5");
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "5";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      JSONObject jSONObject1 = new JSONObject("", stringArray0);
      JSONObject jSONObject2 = jSONObject0.putOpt("", "5");
      JSONObject jSONObject3 = jSONObject2.put("6D.u(73|.", 0.0F);
      String string0 = jSONObject3.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Short> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Short>();
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm0 = Formatter.BigDecimalLayoutForm.DECIMAL_FLOAT;
      Short short0 = new Short((short)0);
      hashMap0.putIfAbsent(formatter_BigDecimalLayoutForm0, short0);
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm1 = Formatter.BigDecimalLayoutForm.DECIMAL_FLOAT;
      Short short1 = new Short((short) (-223));
      hashMap0.put(formatter_BigDecimalLayoutForm1, (Short) null);
      hashMap0.put(formatter_BigDecimalLayoutForm1, short1);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.isEmpty();
      jSONObject0.remove((String) null);
      Map<String, Object> map0 = jSONObject0.toMap();
      JSONArray jSONArray0 = jSONObject0.names();
      jSONObject0.toJSONArray(jSONArray0);
      MockFile mockFile0 = new MockFile("token cannot be null");
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm2 = Formatter.BigDecimalLayoutForm.SCIENTIFIC;
      hashMap0.put(formatter_BigDecimalLayoutForm2, (Short) null);
      File file0 = MockFile.createTempFile("Unable to write JSONArray value at index: ", "\"kjh2*e^dILZYi");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      Writer writer0 = jSONObject0.write((Writer) mockFileWriter0, (int) (short)0, (int) (short)0);
      JSONObject.quote("Unable to write JSONArray value at index: ", writer0);
      JSONObject jSONObject1 = new JSONObject((Object) map0);
      jSONObject1.optFloat("\"kjh2*e^dILZYi");
      String string0 = JSONObject.valueToString(short0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Short> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Short>();
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm0 = Formatter.BigDecimalLayoutForm.DECIMAL_FLOAT;
      Short short0 = new Short((short) (-223));
      hashMap0.put(formatter_BigDecimalLayoutForm0, short0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Locale locale0 = Locale.FRANCE;
      JSONObject.quote("] is not a JSONArray.");
      JSONObject.wrap(short0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      JSONObject jSONObject1 = new JSONObject(dataInputStream0);
      float float0 = jSONObject0.optFloat("java.io.StringWriter@0000000002");
      assertEquals(1, jSONObject0.length());
      assertEquals(Float.NaN, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        jSONObject0.query("8WryDAANF,mysCO+39");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) "trim");
      // Undeclared exception!
      try { 
        jSONObject1.query("trim");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Thread.State thread_State0 = Thread.State.WAITING;
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      hashMap0.put(thread_State0, dayOfWeek0);
      hashMap0.keySet();
      Thread.State thread_State1 = Thread.State.TERMINATED;
      hashMap0.put(thread_State1, dayOfWeek0);
      JSONObject.stringToValue("Nu");
      jSONObject0.optBigInteger("] is not an enum of type ", (BigInteger) null);
      jSONObject0.toString(34);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm0 = Formatter.BigDecimalLayoutForm.DECIMAL_FLOAT;
      Short short0 = new Short((short) (-223));
      HashMap<Formatter.BigDecimalLayoutForm, Short> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Short>();
      Short short1 = new Short((short) (-1243));
      hashMap0.put(formatter_BigDecimalLayoutForm0, short1);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Locale locale0 = Locale.FRANCE;
      JSONObject.quote((String) null);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject.wrap(boolean0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toMap();
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      linkedList0.iterator();
      jSONObject0.putOpt((String) null, linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (Collection<?>) linkedList0);
      assertFalse(jSONObject0.isEmpty());
      
      jSONObject1.put("SNPPas/(", false);
      try { 
        jSONObject0.getFloat("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000017] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^8wFSFM@?#,_o@Gw");
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\\\";
      JSONObject jSONObject1 = new JSONObject((Object) "\\");
      JSONPointer jSONPointer0 = new JSONPointer("");
      JSONObject jSONObject2 = (JSONObject)jSONObject1.optQuery(jSONPointer0);
      int int0 = jSONObject2.optInt("longValue");
      assertEquals(0, int0);
      
      jSONObject2.toString(2038);
      String string1 = "fl";
      String string2 = "] is not an int.";
      jSONObject1.optString(string1, string2);
      jSONObject0.optString(string0);
      String[] stringArray0 = JSONObject.getNames(jSONObject2);
      assertEquals(2, jSONObject2.length());
      assertNotNull(stringArray0);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.remove("r_#}x'mRZ~LE");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      LinkedList<StringReader> linkedList0 = new LinkedList<StringReader>();
      MockFile mockFile0 = new MockFile("\"f]&");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      JSONObject.quote("\"f]&", (Writer) mockFileWriter0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("r_#}x'mRZ~LE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(2724);
      JSONObject.getNames(jSONObject1);
      LinkedList<FilterInputStream> linkedList0 = new LinkedList<FilterInputStream>();
      JSONObject jSONObject2 = jSONObject1.put("", (Collection<?>) linkedList0);
      jSONObject2.put("", (-1176.99F));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-16), 114);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      linkedList0.add((FilterInputStream) pushbackInputStream0);
      JSONObject.stringToValue("");
      JSONObject jSONObject3 = new JSONObject(2724);
      LinkedList<Character.UnicodeScript> linkedList1 = new LinkedList<Character.UnicodeScript>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject3.toJSONArray(jSONArray0);
      MockFile mockFile0 = new MockFile("Unable to write JSONArray value at index: ");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      JSONObject.quote("", (Writer) mockFileWriter0);
      jSONObject0.optFloat("^Mw*L_>}G1!W", (float) 2724);
      // Undeclared exception!
      try { 
        jSONObject3.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONObject.doubleToString(0.7067738910482391);
      Locale locale0 = Locale.FRENCH;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      JSONObject jSONObject0 = new JSONObject(45);
      jSONObject0.putOnce("0.7067738910482391", "0.7067738910482391");
      PipedReader pipedReader0 = new PipedReader(45);
      try { 
        jSONObject0.putOnce("0.7067738910482391", pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"0.7067738910482391\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      JSONObject jSONObject0 = new JSONObject("{\"Null pointer\":{},\"size\":\"Large\",\"-0\":99,\"value\":null,\"] is not a JSONArray.\":{\"0\":true},\"0\":-99,\"Unable to increment [\":{}}");
      jSONObject0.toMap();
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      LinkedList<ProcessBuilder.Redirect.Type> linkedList1 = new LinkedList<ProcessBuilder.Redirect.Type>();
      LinkedList<CharArrayReader> linkedList2 = new LinkedList<CharArrayReader>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList2);
      JSONObject.quote("nktIHH2he`ZKY\u0003");
      Integer integer0 = new Integer(92);
      JSONObject.wrap(integer0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      float float0 = jSONObject0.optFloat("v*@HFHU9RIb99O");
      assertEquals(7, jSONObject0.length());
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("3a%*ty", 0.0F);
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      JSONObject.getNames((Object) jSONObject0);
      JSONObject.stringToValue("5");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = ")zw6\\eQ6";
      LinkedList<DataOutputStream> linkedList0 = new LinkedList<DataOutputStream>();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject.stringToValue(")zw6eQ6");
      jSONArray0.put((Collection<?>) linkedList0);
      LinkedList<Character.UnicodeScript> linkedList1 = new LinkedList<Character.UnicodeScript>();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "{\"Null pointer\":{\"x\":null},\"size\":\"longValue\",\"-0\":99,\"Duplicate key \"\":-99,\"] is not a JSONArray.\":{\"Missing value\":99},\"Unable to increment [\":[]}";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"Null pointer\":{\"x\":null},\"size\":\"longValue\",\"-0\":99,\"Duplicate key \"\":-99,\"] is not a JSONArray.\":{\"Missing value\":99},\"Unable to increment [\":[]}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 71 [character 72 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\\", 366.0F);
      jSONObject1.getDouble("\\");
      jSONObject1.optLong("\\");
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      String[] stringArray0 = JSONObject.getNames((Object) dataOutputStream0);
      assertNull(stringArray0);
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.not();
      bigInteger0.bitCount();
      JSONObject.testValidity(bigInteger0);
      String string0 = null;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "^8wFSFM@?#,_o@Gw";
      StringReader stringReader0 = new StringReader("^8wFSFM@?#,_o@Gw");
      JSONObject jSONObject0 = new JSONObject();
      String string1 = "\\\\";
      JSONObject jSONObject1 = jSONObject0.put("\\", 366.0F);
      JSONObject jSONObject2 = jSONObject1.put("", (Object) "");
      jSONObject2.put("^8wFSFM@?#,_o@Gw", (-1L));
      JSONPointer jSONPointer0 = new JSONPointer("");
      JSONObject jSONObject3 = (JSONObject)jSONObject1.optQuery(jSONPointer0);
      jSONObject3.get("\\");
      jSONObject2.append("dou", jSONObject3);
      int int0 = (-563);
      jSONObject0.optInt("^8wFSFM@?#,_o@Gw", (-563));
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-563));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("");
      MockFile mockFile0 = new MockFile("u7w?qrA'HDnQP}^_");
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter("", true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(115);
      JSONObject jSONObject1 = jSONObject0.increment("A JSONObject text must begin with '{'");
      boolean boolean0 = jSONObject1.optBoolean("A JSONObject text must begin with '{'");
      assertFalse(boolean0);
      
      JSONPointer jSONPointer0 = new JSONPointer("");
      Locale locale0 = Locale.FRANCE;
      JSONObject.quote("");
      Byte byte0 = new Byte((byte) (-17));
      JSONObject.wrap(byte0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      JSONObject jSONObject2 = new JSONObject(pipedInputStream0);
      float float0 = jSONObject2.optFloat("#Tw7^Q!");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<TrayIcon.MessageType, DataInputStream> hashMap0 = new HashMap<TrayIcon.MessageType, DataInputStream>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has("] i  not an int.");
      JSONObject.quote("] i  not an int.");
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      linkedList0.iterator();
      LinkedList<Dialog.ModalExclusionType> linkedList1 = new LinkedList<Dialog.ModalExclusionType>();
      LinkedList<Dialog.ModalExclusionType> linkedList2 = new LinkedList<Dialog.ModalExclusionType>(linkedList1);
      JSONObject jSONObject1 = jSONObject0.put("5EIQ(!?-Z:W", (Collection<?>) linkedList2);
      jSONObject1.toMap();
      jSONObject1.optInt("5EIQ(!?-Z:W", (-394));
      jSONObject1.isEmpty();
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("java.io.StringWriter@0000000002");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("x=QdZ~j fViB*u");
      Double double0 = new Double((-712.60153603516));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("x=QdZ~j fViB*u");
      JSONObject jSONObject1 = new JSONObject(double0);
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      linkedList0.iterator();
      jSONObject0.put("ishashCode", false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("H:M/iqTL/vf~zW", false);
      Object object0 = new Object();
      try { 
        jSONObject0.getFloat("lCy-z/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      stringArray0[2] = "Duv`plicate key \"";
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      JSONObject.getNames((Object) hashMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      MockFile.createTempFile("my+", "Duv`plicate key \"");
      MockFile mockFile0 = new MockFile("DA");
      mockFile0.setReadOnly();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      JSONObject jSONObject2 = jSONObject1.putOnce("null", hashMap0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(63);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('!');
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) "Duv`plicate key \"");
      Writer writer0 = jSONObject0.write((Writer) charArrayWriter2, 63, 63);
      jSONObject2.write(writer0, 63, 991);
      assertEquals(1, jSONObject1.length());
      
      double double0 = jSONObject0.optDouble("DA");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      stringArray0[2] = "Duv`plicate key \"";
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      JSONObject.getNames((Object) hashMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      MockFile.createTempFile("my+", "Duv`plicate key \"");
      MockFile mockFile0 = new MockFile("W6;eUrgI%ZFNh");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      JSONObject jSONObject2 = jSONObject1.putOnce("null", hashMap0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(63);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('!');
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) "Duv`plicate key \"");
      Writer writer0 = jSONObject0.write((Writer) charArrayWriter2, 63, 63);
      jSONObject2.write(writer0, 63, 991);
      JSONObject.getNames(jSONObject2);
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "getdoubleValue";
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote("getdoubleValue", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\\", 366.0F);
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      LinkedList<ProcessBuilder.Redirect.Type> linkedList1 = new LinkedList<ProcessBuilder.Redirect.Type>();
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.PIPE;
      linkedList1.add(processBuilder_Redirect_Type0);
      Byte byte0 = new Byte((byte) (-19));
      Number number0 = jSONObject1.optNumber("\\", (Number) byte0);
      assertEquals(366.0F, number0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Short> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Short>();
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm0 = Formatter.BigDecimalLayoutForm.DECIMAL_FLOAT;
      Short short0 = new Short((short) (-223));
      hashMap0.put(formatter_BigDecimalLayoutForm0, short0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Locale locale0 = Locale.FRANCE;
      JSONObject.quote("] is not a JSONArray.");
      JSONObject.wrap(short0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MockFile mockFile0 = new MockFile("] is not a JSONArray.");
      mockFile0.setReadOnly();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      char[] charArray0 = new char[6];
      charArray0[0] = '{';
      charArray0[1] = 'S';
      charArray0[2] = '$';
      charArray0[3] = 'C';
      charArray0[4] = '<';
      charArray0[5] = 'V';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      jSONObject0.putOnce((String) null, charArrayReader0);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      JSONObject jSONObject1 = jSONObject0.putOnce("*n2orWh@kji", byteArrayOutputStream1);
      Float float0 = new Float(885.2F);
      jSONObject1.optNumber("len", (Number) float0);
      try { 
        jSONObject0.get("j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^8wFSFM@?#,_o@Gw");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\\", 366.0F);
      JSONObject jSONObject2 = jSONObject1.put("", (Object) "");
      jSONObject2.put("^8wFSFM@?#,_o@Gw", (-1L));
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject2.write((Writer) charArrayWriter0, 1180, 1);
      assertEquals(3735, charArrayWriter0.size());
      
      Character character0 = new Character('n');
      String[] stringArray0 = JSONObject.getNames((Object) character0);
      assertEquals(66, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.multiply(bigInteger0);
      bigInteger2.intValueExact();
      jSONObject0.similar(bigInteger0);
      bigInteger0.subtract(bigInteger1);
      jSONObject0.optBigInteger("yxS]E@'", bigInteger0);
      jSONObject0.toMap();
      jSONObject0.toString(8448);
      JSONObject.numberToString(bigInteger2);
      jSONObject0.optString("q)pw\"g\"");
      JSONObject jSONObject1 = jSONObject0.put("java.math.BigInteger@0000000003", 0.0F);
      Object object0 = jSONObject1.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      JSONObject.getNames((Object) dataOutputStream0);
      JSONObject jSONObject0 = new JSONObject(dataOutputStream0);
      Boolean boolean0 = Boolean.TRUE;
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "c'PKF";
      StringReader stringReader0 = new StringReader("c'PKF");
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.put("get", (-441.14334F));
      String string1 = null;
      // Undeclared exception!
      try { 
        jSONObject1.put((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.multiply(bigInteger0);
      jSONObject0.similar(bigInteger0);
      bigInteger0.subtract(bigInteger1);
      jSONObject0.optBigInteger("yxS]E@'", bigInteger0);
      jSONObject0.toString(8448);
      LinkedList<PipedInputStream> linkedList0 = new LinkedList<PipedInputStream>();
      JSONObject jSONObject1 = jSONObject0.put("java.io.StringWriter@0000000002", (Collection<?>) linkedList0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject1.write((Writer) charArrayWriter0, 6, 2234);
      assertEquals(37, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.multiply(bigInteger0);
      boolean boolean0 = jSONObject0.similar(bigInteger0);
      assertFalse(boolean0);
      
      bigInteger0.subtract(bigInteger1);
      Long long0 = new Long((-2651L));
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      int int0 = jSONObject0.optInt("yxS]E@'");
      assertEquals(0, int0);
      
      jSONObject0.toString(34);
      String string1 = jSONObject0.optString("{", "7%UrfXy?+u !q|{Q9E#");
      assertEquals("7%UrfXy?+u !q|{Q9E#", string1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject.quote("h'");
      Double double0 = new Double((-221.0));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ishashCode");
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      JSONObject jSONObject1 = jSONObject0.putOpt("B4;ot{k}.r", objectOutputStream0);
      JSONObject jSONObject2 = jSONObject1.increment("h'");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject3 = jSONObject2.put("B4;ot{k}.r", (Collection<?>) linkedList0);
      JSONObject.getNames((Object) "java.io.StringWriter@0000000001");
      LinkedList<MockFileInputStream> linkedList1 = new LinkedList<MockFileInputStream>();
      linkedList1.iterator();
      jSONObject3.put("g<:R~Bq_p", (Collection<?>) linkedList0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      jSONObject0.write((Writer) charArrayWriter0, 2234, 1180);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader(1394);
      String[] stringArray0 = new String[7];
      stringArray0[1] = " line ";
      stringArray0[2] = " line ";
      stringArray0[3] = " line ";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = " line ";
      JSONObject jSONObject1 = new JSONObject(pipedReader0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.putOpt(" line ", jSONObject1);
      JSONObject jSONObject3 = new JSONObject(pipedReader0);
      String string0 = jSONObject2.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject.quote("h'");
      Double double0 = new Double((-221.0));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ishashCode");
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      JSONObject jSONObject1 = jSONObject0.putOpt("B4;ot{k}.r", objectOutputStream0);
      JSONObject jSONObject2 = jSONObject1.increment("h'");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject2.put("B4;ot{k}.r", (Collection<?>) linkedList0);
      JSONObject.getNames((Object) "java.io.StringWriter@0000000001");
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject2.toJSONArray(jSONArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("B4;ot{k}.r");
      MockFile mockFile1 = new MockFile("ishashCode");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile1, true);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 31);
      jSONObject2.accumulate("h'", pushbackInputStream0);
      jSONObject2.toString();
      int int0 = jSONObject2.optInt("isread", (-1896));
      assertEquals(4, jSONObject1.length());
      assertEquals((-1896), int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.multiply(bigInteger0);
      jSONObject0.similar(bigInteger0);
      bigInteger0.subtract(bigInteger1);
      jSONObject0.optBigInteger("yxS]E@'", bigInteger0);
      JSONObject.valueToString(bigInteger2);
      JSONObject.numberToString(bigInteger2);
      File file0 = MockFile.createTempFile("96G?n6J</_AF9&S#6", "p|~^Gu");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      JSONObject.quote("available", (Writer) mockPrintWriter0);
      jSONObject0.optFloat("96G?n6J</_AF9&S#6", 0.0F);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList1);
      jSONObject0.optQuery(jSONPointer0);
      jSONObject0.optDouble("Misplaced key.");
      JSONObject.stringToValue("#ashCode");
      PipedReader pipedReader0 = new PipedReader(8448);
      JSONObject.wrap(pipedReader0);
      JSONObject jSONObject1 = jSONObject0.put("java.math.BigInteger@0000000002", (Object) "java.io.PipedReader@0000000006");
      Object object0 = jSONObject1.opt("96G?n6J</_AF9&S#6");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.multiply(bigInteger0);
      jSONObject0.similar(bigInteger0);
      bigInteger0.subtract(bigInteger1);
      jSONObject0.optBigInteger("yxS]E@'", bigInteger0);
      JSONObject.valueToString(bigInteger2);
      JSONObject.numberToString(bigInteger2);
      JSONObject jSONObject1 = jSONObject0.accumulate("96G?n6J</_AF9&S#6", "java.math.BigInteger@0000000002");
      Class<SocketFlow.Status> class0 = SocketFlow.Status.class;
      SocketFlow.Status socketFlow_Status0 = SocketFlow.Status.OK;
      jSONObject1.optEnum(class0, "java.io.StringWriter@0000000003", socketFlow_Status0);
      jSONObject1.toString();
      jSONObject0.optInt((String) null, 8448);
      Object object0 = JSONObject.wrap(jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int int0 = 13;
      JSONObject jSONObject0 = new JSONObject(13);
      JSONObject jSONObject1 = new JSONObject(13);
      JSONObject.getNames(jSONObject1);
      LinkedList<FilterInputStream> linkedList0 = new LinkedList<FilterInputStream>();
      JSONObject jSONObject2 = jSONObject0.put("eM'Yq]7$", (Collection<?>) linkedList0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject2.optBigDecimal("eM'Yq]7$", bigDecimal0);
      jSONObject1.toJSONArray(jSONArray0);
      JSONObject.stringToValue("");
      LinkedList<Character.UnicodeScript> linkedList1 = new LinkedList<Character.UnicodeScript>();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      jSONObject1.toJSONArray(jSONArray1);
      MockFile mockFile0 = new MockFile("org.json.JSONObject$1");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      JSONObject.quote("org.json.JSONObject$1", (Writer) mockFileWriter0);
      jSONObject2.optFloat("getdoubleValue", (float) 13);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<DataOutputStream> linkedList0 = new LinkedList<DataOutputStream>();
      jSONObject0.put(")zw6eQ6", (Collection<?>) linkedList0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject0.optBigDecimal(")zw6eQ6", bigDecimal0);
      JSONArray jSONArray0 = jSONObject0.names();
      JSONObject jSONObject1 = new JSONObject();
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      linkedList0.iterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Dialog.ModalExclusionType> linkedList1 = new LinkedList<Dialog.ModalExclusionType>();
      LinkedList<Dialog.ModalExclusionType> linkedList2 = new LinkedList<Dialog.ModalExclusionType>();
      linkedList2.removeAll(linkedList1);
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "h'";
      JSONObject.quote("h'");
      Double double0 = new Double((-221.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.put("java.io.StringWriter@0000000001", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<DataOutputStream> linkedList0 = new LinkedList<DataOutputStream>();
      String string0 = null;
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = "E[>@3ZuVwGi?&.~M";
      JSONObject.quote("E[>@3ZuVwGi?&.~M");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toMap();
      JSONObject.quote("E[>@3ZuVwGi?&.~M");
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      linkedList0.iterator();
      String string1 = "] is not a JSONArray.";
      jSONObject0.put("] is not a JSONArray.", (Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-3672L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("\\");
      MockFile mockFile0 = new MockFile("u7w?qrA'HDnQP}^_");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      JSONObject.quote("\\", (Writer) mockFileWriter0);
      jSONObject0.optFloat(" line ", 825.0F);
      Integer integer0 = new Integer(4015);
      Integer integer1 = new Integer(4015);
      Integer integer2 = new Integer(111);
      jSONObject0.optString(" at ");
      try { 
        jSONObject0.put("=BORkucKF.HsK]V@`", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3248);
      jSONObject0.keys();
      try { 
        jSONObject0.put("HZj0_hBB", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = "+/jy)YN$";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\\\";
      JSONObject jSONObject1 = jSONObject0.put("\\", 366.0F);
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      LinkedList<ProcessBuilder.Redirect.Type> linkedList1 = new LinkedList<ProcessBuilder.Redirect.Type>();
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.PIPE;
      linkedList1.add(processBuilder_Redirect_Type0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject2 = jSONObject1.increment("\\");
      try { 
        jSONObject2.append("\\", linkedList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\\] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      Thread.State thread_State0 = Thread.State.TIMED_WAITING;
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      hashMap0.put(thread_State0, dayOfWeek0);
      JSONObject jSONObject0 = new JSONObject();
      hashMap0.keySet();
      jSONObject0.append("0", "0");
      JSONObject.getNames((Object) "0");
      int int0 = (-1053);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((-1053));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1053
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      Iterator<MockFileInputStream> iterator0 = linkedList0.iterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Dialog.ModalExclusionType> linkedList1 = new LinkedList<Dialog.ModalExclusionType>();
      Boolean boolean0 = new Boolean(true);
      LinkedList<Dialog.ModalExclusionType> linkedList2 = new LinkedList<Dialog.ModalExclusionType>();
      JSONObject jSONObject1 = jSONObject0.put("5EIQ(!?-Z:W", (Collection<?>) linkedList0);
      jSONObject1.toMap();
      int int0 = jSONObject1.optInt("5EIQ(!?-Z:W", (-434));
      assertEquals((-434), int0);
      
      jSONObject0.append("5EIQ(!?-Z:W", iterator0);
      boolean boolean1 = jSONObject1.has("5EIQ(!?-Z:W");
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^8wFSFM@?#,_o@Gw");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("\\");
      MockFile mockFile0 = new MockFile("u7w?qrA'HDnQP}^_");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.stringToValue("isNaN");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      jSONObject0.names();
      jSONObject0.toJSONArray((JSONArray) null);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      JSONObject jSONObject0 = new JSONObject("{\"Null pointer\":{},\"size\":\"Large\",\"-0\":99,\"value\":null,\"] is not a JSONArray.\":{\"x\":{}},\"x\":-99,\"Unable to increment [\":{}}");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(7, map0.size());
      
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      LinkedList<ProcessBuilder.Redirect.Type> linkedList1 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList1);
      JSONObject.quote("nktIHH2he`ZKY\u0003");
      JSONObject.wrap(jSONArray0);
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JSONObject jSONObject1 = new JSONObject(sequenceInputStream0);
      float float0 = jSONObject1.optFloat("java.io.StringWriter@0000000064");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("has", "has");
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Object object0 = JSONObject.wrap(jSONArray0);
      assertSame(jSONArray0, object0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.multiply(bigInteger0);
      JSONObject jSONObject0 = new JSONObject(2592);
      jSONObject0.similar(bigInteger1);
      BigInteger bigInteger3 = bigInteger2.subtract(bigInteger1);
      jSONObject0.optBigInteger("T[FkeSJyf!wC9%'", bigInteger3);
      int int0 = (-1);
      jSONObject0.putOpt("T[FkeSJyf!wC9%'", "T[FkeSJyf!wC9%'");
      jSONObject0.toString((-1));
      JSONObject.numberToString(bigInteger3);
      jSONObject0.accumulate("96G?n6J</_AF9&S#6", "96G?n6J</_AF9&S#6");
      Class<SocketFlow.Status> class0 = SocketFlow.Status.class;
      SocketFlow.Status socketFlow_Status0 = SocketFlow.Status.ALREADY_CREATED;
      jSONObject0.optEnum(class0, "java.io.StringWriter@0000000008", socketFlow_Status0);
      JSONArray jSONArray0 = new JSONArray();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(dataOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject.quote("h'");
      Double double0 = new Double((-221.0));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ishashCode");
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      JSONObject jSONObject1 = jSONObject0.putOpt("B4;ot{k}.r", objectOutputStream0);
      JSONObject jSONObject2 = jSONObject1.increment("h'");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject2.put("B4;ot{k}.r", (Collection<?>) linkedList0);
      String[] stringArray0 = JSONObject.getNames((Object) "java.io.StringWriter@0000000001");
      JSONObject jSONObject3 = new JSONObject(jSONObject1, stringArray0);
      MockFile.createTempFile("Duplicate key \"", "Duplicate key \"");
      MockFile mockFile0 = new MockFile("h'");
      mockFile0.setReadOnly();
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0);
      jSONObject0.putOnce("ishashCode", (Object) null);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("\\");
      String string0 = "u7w?qrA'HDnQP}^_";
      MockFile mockFile0 = new MockFile("u7w?qrA'HDnQP}^_");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      JSONObject.quote("\\", (Writer) mockFileWriter0);
      jSONObject0.optFloat(" line ", 825.0F);
      Integer integer0 = new Integer(4015);
      Integer integer1 = new Integer(4015);
      Integer integer2 = new Integer(111);
      Integer.getInteger(" at ", integer2);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) " at ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\"";
      stringArray0[1] = "RI:E";
      stringArray0[2] = "gethashCode";
      stringArray0[3] = "0";
      stringArray0[4] = "<;3Y1vqc:u";
      stringArray0[5] = "my+";
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      double double0 = jSONObject0.optDouble("gethashCode", (-478.16749175541));
      assertEquals((-478.16749175541), double0, 0.01);
      
      float float0 = jSONObject0.optFloat("\"", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("G;", 366.0F);
      jSONObject1.getDouble("G;");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.getDouble("G;");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONObject0.optBigDecimal("G;", bigDecimal0);
      try { 
        jSONObject1.getInt("hRn4-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("isNaN");
      HashMap<Long, Dialog.ModalExclusionType> hashMap0 = new HashMap<Long, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONObject0.optBigDecimal("isNaN", bigDecimal0);
      String string0 = jSONObject0.toString();
      assertFalse(string0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = "^8wFSFM@?#,_o@Gw";
      StringReader stringReader0 = new StringReader("^8wFSFM@?#,_o@Gw");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\\", 366.0F);
      jSONObject1.put("", (Object) "");
      JSONPointer jSONPointer0 = new JSONPointer("");
      JSONObject jSONObject2 = (JSONObject)jSONObject1.optQuery(jSONPointer0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject1.optBigDecimal("^8wFSFM@?#,_o@Gw", bigDecimal0);
      try { 
        jSONObject2.getBigInteger("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "has";
      String string1 = null;
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("&\"](f]LgbnMp3Hn~RU[", true);
      String[] stringArray0 = new String[3];
      String string0 = "Duv`plicate key \"";
      stringArray0[2] = "Duv`plicate key \"";
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Unterminated string", true);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject.stringToValue("isNaN");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isNaN", (-1894L));
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^8wFSFM@?#,_o@Gw");
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\\\";
      JSONObject jSONObject1 = jSONObject0.put("\\", 366.0F);
      JSONObject jSONObject2 = jSONObject1.put("", (Object) "");
      jSONObject2.put("^8wFSFM@?#,_o@Gw", (-1L));
      JSONPointer jSONPointer0 = new JSONPointer("");
      jSONObject1.optQuery(jSONPointer0);
      jSONObject0.optInt("^8wFSFM@?#,_o@Gw", (-563));
      StringWriter stringWriter0 = new StringWriter(0);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "^8wFSFM@?#,_o@Gw", (-563), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^8wFSFM@?#,_o@Gw");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\\", 366.0F);
      JSONObject jSONObject2 = jSONObject1.put("", (Object) "");
      jSONObject2.put("^8wFSFM@?#,_o@Gw", (-1L));
      JSONPointer jSONPointer0 = new JSONPointer("");
      jSONObject1.optQuery(jSONPointer0);
      jSONObject0.optInt("^8wFSFM@?#,_o@Gw", (-563));
      assertFalse(jSONObject0.isEmpty());
      
      float float0 = jSONObject2.getFloat("\\");
      assertEquals(366.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<BufferedOutputStream, CardTerminals.State> hashMap0 = new HashMap<BufferedOutputStream, CardTerminals.State>();
      jSONObject0.put("org.json.JSONWriter", (Map<?, ?>) hashMap0);
      jSONObject0.optInt("org.json.JSONWriter", 117);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      Thread.State thread_State0 = Thread.State.TIMED_WAITING;
      DayOfWeek dayOfWeek0 = DayOfWeek.SATURDAY;
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      hashMap0.put(thread_State0, dayOfWeek0);
      hashMap0.keySet();
      Thread.State thread_State1 = Thread.State.TERMINATED;
      DayOfWeek dayOfWeek1 = DayOfWeek.SATURDAY;
      hashMap0.put(thread_State1, dayOfWeek1);
      JSONObject jSONObject1 = new JSONObject(101);
      JSONObject.getNames((Object) jSONObject1);
      JSONObject jSONObject2 = jSONObject1.put("h'", false);
      JSONObject jSONObject3 = new JSONObject(1715);
      jSONObject3.toMap();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)118;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONObject3.optString("get");
      jSONObject1.put("h'", (float) 1715);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = jSONObject3.keySet();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      jSONObject2.optQuery(jSONPointer0);
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.multiply(bigInteger0);
      jSONObject0.similar(bigInteger0);
      BigInteger bigInteger3 = BigInteger.ZERO;
      jSONObject0.toString(8448);
      JSONObject.numberToString(bigInteger2);
      JSONObject jSONObject1 = jSONObject0.accumulate("96G?n6J</_AF9&S#6", "java.math.BigInteger@0000000003");
      jSONObject1.toString();
      int int0 = jSONObject0.optInt((String) null, 8448);
      assertEquals(1, jSONObject0.length());
      assertEquals(8448, int0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^8wFSFM@?#,_o@Gw");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("\\");
      MockFile mockFile0 = new MockFile("u7w?qrA'HDnQP}^_");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      JSONObject.quote("u7w?qrA'HDnQP}^_", (Writer) mockFileWriter0);
      jSONObject0.optFloat("getdoubleValue", 0.0F);
      Integer integer0 = new Integer(4015);
      Integer integer1 = new Integer(4015);
      Integer.getInteger("nam", integer1);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject.stringToValue("E[>@3ZuVwGi?&.~M");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toMap();
      jSONObject0.optBoolean("E[>@3ZuVwGi?&.~M");
      JSONObject.quote("E[>@3ZuVwGi?&.~M");
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      linkedList0.iterator();
      JSONObject jSONObject1 = jSONObject0.put("-0", (Collection<?>) linkedList0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2183);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      jSONObject0.write((Writer) charArrayWriter1, (-1404), 64);
      File file0 = MockFile.createTempFile("qz]o>eB_>`\"t9Z", "qz]o>eB_>`\"t9Z");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      jSONObject1.putOpt("isisEmpty", dataOutputStream0);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader(1394);
      String[] stringArray0 = new String[7];
      stringArray0[4] = "";
      stringArray0[5] = "";
      JSONObject jSONObject1 = new JSONObject(pipedReader0, stringArray0);
      jSONObject0.optLong("VC8KPbqnojY", 0L);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('_');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      mockPrintWriter0.append('_');
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      JSONObject jSONObject2 = new JSONObject(dataInputStream0, stringArray0);
      jSONObject2.write((Writer) stringWriter1);
      JSONObject.quote(stringArray0[0], (Writer) mockPrintWriter0);
      assertEquals("__{}\"\"", stringWriter1.toString());
      assertEquals("__{}\"\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2990);
      try { 
        jSONObject0.getBoolean("hashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      try { 
        jSONObject0.getFloat("istryLock");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject.stringToValue("E[>@3ZuVwGi?&.~M");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toMap();
      jSONObject0.optBoolean("E[>@3ZuVwGi?&.~M");
      JSONObject.quote("E[>@3ZuVwGi?&.~M");
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      linkedList0.iterator();
      JSONObject jSONObject1 = jSONObject0.put("-0", (Collection<?>) linkedList0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[99],\"b\":{}}", true);
      JSONObject.indent(mockFileWriter0, 2201);
      jSONObject0.toMap();
      try { 
        jSONObject1.getFloat("java.io.StringWriter@0000000002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      jSONObject0.similar(" line ");
      BigInteger bigInteger3 = bigInteger2.subtract(bigInteger1);
      bigInteger2.flipBit(47);
      jSONObject0.optBigInteger((String) null, bigInteger1);
      jSONObject0.toString(13);
      JSONObject.numberToString(bigInteger3);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      locale0.getUnicodeLocaleAttributes();
      JSONObject jSONObject0 = new JSONObject(locale0);
      assertEquals(14, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<KeyRep.Type> linkedList0 = new LinkedList<KeyRep.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject1 = new JSONObject(mockFileInputStream0);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(mockFileReader0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("+/jy)YN$");
      assertNull(jSONArray0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject1 = new JSONObject(bigInteger0);
      jSONObject1.toString();
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Null key.", false);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("Null key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = "E[>@3ZuVwGi?&.~M";
      JSONObject.stringToValue("E[>@3ZuVwGi?&.~M");
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = false;
      try { 
        jSONObject0.get("E[>@3ZuVwGi?&.~M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-1.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Thread.State thread_State0 = Thread.State.WAITING;
      jSONObject0.remove("r_#}x'mRZ~LE");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      JSONObject.getNames((Object) mockPrintStream0);
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      hashMap0.put(thread_State0, dayOfWeek0);
      jSONObject0.toMap();
      jSONObject0.optString("r_#}x'mRZ~LE");
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      String string0 = null;
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = "{\"Null pointer\":{},\"size\":\"Large\",\"-0\":99,\"value\":null,\"] is not a JSONArray.\":{\"x\":{}},\"x\":-99}";
      Locale locale0 = Locale.FRENCH;
      JSONObject jSONObject0 = new JSONObject("{\"Null pointer\":{},\"size\":\"Large\",\"-0\":99,\"value\":null,\"] is not a JSONArray.\":{\"x\":{}},\"x\":-99}");
      jSONObject0.toMap();
      JSONObject.quote("nktIHH2he`ZKY\u0003");
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      String string1 = "_V!}27Pw68";
      File file0 = MockFile.createTempFile("get", "_V!}27Pw68");
      try { 
        MockFile.createTempFile("nktIHH2he`ZKY\u0003", "toCharArray", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashMap<TrayIcon.MessageType, DataInputStream> hashMap0 = new HashMap<TrayIcon.MessageType, DataInputStream>();
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.ERROR;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      dataInputStream0.close();
      hashMap0.put(trayIcon_MessageType0, dataInputStream0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.has("] is not an int.");
      String string0 = "\"\"";
      long long0 = 0L;
      jSONObject0.toString(1576);
      Long long1 = new Long(199L);
      Long long2 = new Long(1681L);
      Long.getLong("f*34&", long2);
      Class<MultipleGradientPaint.CycleMethod> class0 = MultipleGradientPaint.CycleMethod.class;
      try { 
        jSONObject0.getEnum(class0, "h*_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000006] is not an enum of type java.io.StringWriter@0000000007.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.TOOLKIT_MODAL;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONObject0.optEnum(class0, "mA+", dialog_ModalityType0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(34);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "mA+");
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer0);
      jSONObject1.write((Writer) charArrayWriter1, 34, 64);
      File file0 = MockFile.createTempFile("L'H(2hhRDz", "t|x$)buUrw9");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      JSONObject jSONObject2 = new JSONObject();
      assertTrue(jSONObject2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader(1394);
      String[] stringArray0 = new String[7];
      stringArray0[0] = " line ";
      stringArray0[1] = " line ";
      stringArray0[2] = " line ";
      stringArray0[3] = " line ";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = " line ";
      JSONObject jSONObject1 = new JSONObject(pipedReader0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.putOpt(" line ", jSONObject1);
      jSONObject0.optLong("VC8KPbqnojY", 0L);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('_');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      mockPrintWriter0.append('_');
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      JSONObject jSONObject3 = new JSONObject(dataInputStream0, stringArray0);
      jSONObject3.write((Writer) stringWriter1);
      JSONObject.quote(" line ", (Writer) mockPrintWriter0);
      assertEquals("__{}\" line \"", stringWriter1.toString());
      assertEquals("__{}\" line \"", stringWriter0.toString());
      
      double double0 = jSONObject2.optDouble((String) null);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Short> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Short>();
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm0 = Formatter.BigDecimalLayoutForm.DECIMAL_FLOAT;
      Short short0 = new Short((short) (-223));
      hashMap0.put(formatter_BigDecimalLayoutForm0, short0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "] is not a JSONArray.";
      Locale locale0 = Locale.FRANCE;
      try { 
        jSONObject0.getString("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader(1394);
      LinkedList<FilterInputStream> linkedList0 = new LinkedList<FilterInputStream>();
      JSONObject jSONObject1 = jSONObject0.put("#", (Collection<?>) linkedList0);
      JSONObject.stringToValue("#");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      boolean boolean0 = new Boolean("");
      JSONObject jSONObject2 = jSONObject1.put(" line ", 1394);
      jSONObject2.remove("Zef#-");
      try { 
        jSONObject1.getNumber("Null key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000014] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<RoundingMode> class0 = RoundingMode.class;
      String string0 = null;
      try { 
        jSONObject0.getEnum(class0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject.stringToValue("isNaN");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONObject.stringToValue("E[>@3ZuVwGi?&.~M");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("E[>@3ZuVwGi?&.~M");
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      Iterator<MockFileInputStream> iterator0 = linkedList0.iterator();
      JSONObject jSONObject1 = new JSONObject(iterator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      JSONObject.wrap(locale_FilteringMode0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject jSONObject2 = new JSONObject(byteArrayOutputStream0);
      float float0 = jSONObject1.optFloat("] not found.");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("\"\"");
      assertEquals("\"\"", object0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      JSONObject jSONObject0 = new JSONObject("{\"Null pointer\":{},\"size\":\"Large\",\"-0\":99,\"value\":null,\"] is not a JSONArray.\":{\"x\":{}},\"x\":-99}");
      Map<String, Object> map0 = jSONObject0.toMap();
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      assertEquals(0, linkedList0.size());
      
      LinkedList<ProcessBuilder.Redirect.Type> linkedList1 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Object object0 = JSONObject.stringToValue("{\"Null pointer\":{},\"size\":\"Large\",\"-0\":99,\"value\":null,\"] is not a JSONArray.\":{\"x\":{}},\"x\":-99}");
      assertEquals("{\"Null pointer\":{},\"size\":\"Large\",\"-0\":99,\"value\":null,\"] is not a JSONArray.\":{\"x\":{}},\"x\":-99}", object0);
      
      Object object1 = JSONObject.wrap(map0);
      assertFalse(map0.isEmpty());
      assertNotNull(object1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject jSONObject1 = new JSONObject();
      float float0 = jSONObject1.optFloat("nktIHH2he`ZKY\u0003");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      JSONObject jSONObject0 = new JSONObject("{\"Null pointer\":{},\"size\":\"Large\",\"color\":99,\"value\":null,\"] is not a JSONArray.\":{},\"x\":-99}");
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.accumulate("", "{\"Null pointer\":{},\"size\":\"Large\",\"color\":99,\"value\":null,\"] is not a JSONArray.\":{},\"x\":-99}");
      jSONObject1.remove((String) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String string1 = "3b3;2&";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)12;
      try { 
        pipedOutputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\"";
      stringArray0[1] = "RI:E";
      stringArray0[2] = "gethashCode";
      stringArray0[3] = "0";
      stringArray0[4] = "<;3Y1vqc:u";
      stringArray0[5] = "my+";
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      File file0 = MockFile.createTempFile("null", "\"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      jSONObject0.putOnce("0", mockFileOutputStream0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      HashMap<Thread.State, DayOfWeek> hashMap1 = new HashMap<Thread.State, DayOfWeek>();
      Thread.State thread_State0 = Thread.State.TERMINATED;
      hashMap1.put(thread_State0, dayOfWeek0);
      hashMap0.keySet();
      LinkedList<FilterInputStream> linkedList0 = new LinkedList<FilterInputStream>();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)102;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-35), 42);
      JSONObject.wrap(byteArrayInputStream0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      char[] charArray0 = new char[1];
      charArray0[0] = ';';
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader(charArray0, 511, (-1067));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      JSONObject jSONObject3 = jSONObject0.putOpt((String) null, jSONObject2);
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertTrue(jSONObject3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, (Object) null, 949, 949);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Thread.State thread_State0 = Thread.State.WAITING;
      DayOfWeek dayOfWeek0 = DayOfWeek.SATURDAY;
      hashMap0.put(thread_State0, dayOfWeek0);
      hashMap0.keySet();
      File file0 = MockFile.createTempFile("org.json.JSONObject", "Bad value from toJSONString: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.FRENCH;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "Bad value from toJSONString: ", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      JSONObject.writeValue(mockPrintWriter1, (Object) null, (-2108), (-1481));
      JSONObject jSONObject1 = jSONObject0.accumulate("0aZMW*~8gvPl9=", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("getnames", "getnames");
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashMap<TrayIcon.MessageType, DataInputStream> hashMap0 = new HashMap<TrayIcon.MessageType, DataInputStream>();
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.ERROR;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      hashMap0.put(trayIcon_MessageType0, dataInputStream0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.has("] is not an int.");
      String string0 = "\"\"";
      jSONObject0.toString((-79));
      Long long0 = new Long(0L);
      Long.getLong("\"\"", long0);
      Class<MultipleGradientPaint.CycleMethod> class0 = MultipleGradientPaint.CycleMethod.class;
      String string1 = "lon";
      try { 
        jSONObject0.getEnum(class0, "val [");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000006] is not an enum of type java.io.StringWriter@0000000007.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toMap();
      JSONObject.quote("E[>@3ZuVwGi?&.~M");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "to");
      jSONObject0.put("hRWv3j@", (Object) "");
      File file0 = MockFile.createTempFile("' and instead saw ''", ",:]}/\"[{;=#");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Writer writer0 = JSONObject.writeValue(mockPrintWriter0, locale_Category0, 0, 0);
      Writer writer1 = JSONObject.writeValue(mockPrintWriter0, "java.io.StringWriter@0000000002", 0, 0);
      assertSame(writer1, writer0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      HashMap<Resource.AuthenticationType, Proxy.Type> hashMap0 = new HashMap<Resource.AuthenticationType, Proxy.Type>();
      Resource.AuthenticationType resource_AuthenticationType0 = Resource.AuthenticationType.CONTAINER;
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      hashMap0.put(resource_AuthenticationType0, proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.has("javax.");
      assertFalse(boolean0);
      
      jSONObject0.toString(1735);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Thread.State thread_State0 = Thread.State.WAITING;
      DayOfWeek dayOfWeek0 = DayOfWeek.SATURDAY;
      hashMap0.put(thread_State0, dayOfWeek0);
      hashMap0.keySet();
      Thread.State thread_State1 = Thread.State.TERMINATED;
      hashMap0.put(thread_State1, dayOfWeek0);
      JSONObject.getNames((Object) dayOfWeek0);
      jSONObject0.put("\b", false);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((-1053));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1053
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.stringToValue("trim");
      JSONObject.getNames((Object) "trim");
      jSONObject0.put("trim", false);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Thread.State thread_State0 = Thread.State.BLOCKED;
      DayOfWeek dayOfWeek0 = DayOfWeek.MONDAY;
      hashMap0.put(thread_State0, dayOfWeek0);
      HashMap<Thread.State, DayOfWeek> hashMap1 = new HashMap<Thread.State, DayOfWeek>();
      Set<Thread.State> set0 = hashMap1.keySet();
      LinkedList<FilterInputStream> linkedList0 = new LinkedList<FilterInputStream>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      Object object0 = JSONObject.stringToValue(">l0");
      assertEquals(">l0", object0);
      
      Object object1 = JSONObject.wrap(">l0");
      assertTrue(object1.equals((Object)object0));
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject jSONObject1 = new JSONObject();
      float float0 = jSONObject1.optFloat(">l0");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = "p~iusq?UiRu|";
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "p~iusq?UiRu|";
      stringArray0[2] = "Duv`plicate key \"";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optLong("ha", 42L);
      try { 
        jSONObject1.getDouble("Duv`plicate key \"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Short> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Short>();
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm0 = Formatter.BigDecimalLayoutForm.DECIMAL_FLOAT;
      Short short0 = new Short((short)0);
      hashMap0.putIfAbsent(formatter_BigDecimalLayoutForm0, short0);
      String string0 = "ha";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ha";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      jSONObject0.optLong("ha", (long) (short) (-223));
      try { 
        jSONObject0.getDouble("ha");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(115);
      JSONObject jSONObject1 = jSONObject0.increment("A JSONObject text must begin with '{'");
      jSONObject1.optBoolean("A JSONObject text must begin with '{'");
      JSONTokener jSONTokener0 = new JSONTokener("A JSONObject text must begin with '{'");
      JSONPointer jSONPointer0 = new JSONPointer("");
      jSONObject1.query(jSONPointer0);
      String string0 = "A JSONObject text must end with '}'";
      Long long0 = new Long(115);
      Long.getLong("A JSONObject text must end with '}'", long0);
      Class<MultipleGradientPaint.CycleMethod> class0 = MultipleGradientPaint.CycleMethod.class;
      String string1 = "lon";
      try { 
        jSONObject1.getEnum(class0, "lon");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] is not an enum of type java.io.StringWriter@0000000016.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Resource.AuthenticationType, Proxy.Type> hashMap0 = new HashMap<Resource.AuthenticationType, Proxy.Type>();
      Resource.AuthenticationType resource_AuthenticationType0 = Resource.AuthenticationType.APPLICATION;
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      hashMap0.put(resource_AuthenticationType0, proxy_Type0);
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = "\\c";
      JSONObject.stringToValue("c");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("c", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Double double0 = new Double((-221.0));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(375);
      linkedList0.add(integer0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("i%h'", true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(filterOutputStream0);
      JSONObject.indent(outputStreamWriter0, (-1723085226));
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONObject.doubleToString(0.7067738910482391);
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      Thread.State thread_State0 = Thread.State.TERMINATED;
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      hashMap0.put(thread_State0, dayOfWeek0);
      String string0 = "{\"] could not convert to BigInteger.\":false}";
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getNumber("0.7067738910482391");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":{},\"size\":\"Large\",\"color\":99,\"value\":null,\"value2\":false,\"] is not a JSONArray.\":{}}");
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.accumulate("", "{\"fruit\":{},\"size\":\"Large\",\"color\":99,\"value\":null,\"value2\":false,\"] is not a JSONArray.\":{}}");
      jSONObject1.remove((String) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String string1 = "3b3;2&";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)12;
      try { 
        pipedOutputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Thread.State thread_State0 = Thread.State.WAITING;
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      hashMap0.put(thread_State0, dayOfWeek0);
      hashMap0.keySet();
      LinkedList<FilterInputStream> linkedList0 = new LinkedList<FilterInputStream>();
      Object object0 = JSONObject.wrap(linkedList0);
      assertNotNull(object0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject jSONObject1 = new JSONObject(byteArrayOutputStream0);
      assertEquals(0, jSONObject1.length());
      
      float float0 = jSONObject0.optFloat("8e=F%t<sRV6hB@(v");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONObject.stringToValue("E[>@3ZuVwGi?&.~M");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toMap();
      JSONObject.quote("E[>@3ZuVwGi?&.~M");
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      linkedList0.iterator();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (Collection<?>) linkedList0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("E[>@3ZuVwGi?&.~M", false);
      Object object0 = new Object();
      jSONObject1.accumulate("] is not a JSONArray.", object0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\\", 366.0F);
      jSONObject1.accumulate("\\", (Object) null);
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      LinkedList<ProcessBuilder.Redirect.Type> linkedList1 = new LinkedList<ProcessBuilder.Redirect.Type>();
      Object object0 = JSONObject.stringToValue("null");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        JSONObject.stringToNumber("'");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val ['] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Thread.State thread_State0 = Thread.State.WAITING;
      DayOfWeek dayOfWeek0 = DayOfWeek.SATURDAY;
      hashMap0.put(thread_State0, dayOfWeek0);
      hashMap0.keySet();
      String string0 = "!zZcSqjoB4n";
      try { 
        JSONObject.stringToNumber("!zZcSqjoB4n");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [!zZcSqjoB4n] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Thread.State thread_State0 = Thread.State.WAITING;
      DayOfWeek dayOfWeek0 = DayOfWeek.SATURDAY;
      hashMap0.put(thread_State0, dayOfWeek0);
      jSONObject0.remove("r_#}x'mRZ~LE");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      JSONObject.getNames((Object) mockPrintStream0);
      int int0 = (-1053);
      JSONObject jSONObject1 = new JSONObject(1585);
      jSONObject0.toMap();
      jSONObject0.optString("islongValue");
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(115);
      String string0 = "HU3U>f";
      Short short0 = new Short((short)4);
      String string1 = "f";
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 92);
      JSONObject jSONObject1 = jSONObject0.putOpt("f", pushbackInputStream0);
      try { 
        jSONObject1.getInt("f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      JSONObject.stringToValue("nfalse");
      Object object0 = JSONObject.wrap((Object) null);
      jSONObject0.putOpt((String) null, object0);
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "HU3U>f";
      Short short0 = new Short((short)4);
      JSONObject jSONObject1 = jSONObject0.putOpt("HU3U>f", short0);
      jSONObject1.getInt("HU3U>f");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      Class<RoundingMode> class0 = RoundingMode.class;
      Class<RoundingMode> class1 = RoundingMode.class;
      jSONObject0.optEnum(class1, "org.json.JSONPointer$Builder");
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      HashMap<Month, Authenticator.RequestorType> hashMap0 = new HashMap<Month, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject0.isEmpty());
      
      jSONObject0.optLong("T:In4!];", 0L);
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      LinkedList<DropMode> linkedList0 = new LinkedList<DropMode>();
      jSONObject1.put("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":[],\"value2\":false,\"number\":\"1\"}", (Collection<?>) linkedList0);
      double double0 = jSONObject1.optDouble("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":[],\"value2\":false,\"number\":\"1\"}", 0.0);
      assertEquals(2, jSONObject1.length());
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(jSONObject0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONObject.stringToValue("RIeT");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      LinkedList<DropMode> linkedList0 = new LinkedList<DropMode>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("g,$", (Collection<?>) linkedList0);
      jSONObject0.optDouble("RIeT", 0.0);
      boolean boolean0 = jSONObject1.optBoolean("g,$");
      assertFalse(jSONObject0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("has", "has");
      jSONObject1.optBoolean("has");
      JSONObject.testValidity(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      int int0 = 115;
      JSONObject jSONObject0 = new JSONObject(115);
      JSONObject jSONObject1 = jSONObject0.increment("A JSONObject text must begin with '{'");
      jSONObject1.optBoolean("A JSONObject text must begin with '{'");
      JSONTokener jSONTokener0 = new JSONTokener("A JSONObject text must begin with '{'");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":{},\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"lon\":\"1\"}");
      JSONObject jSONObject1 = jSONObject0.increment("8|[z~?P");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "8|[z~?P";
      stringArray0[1] = "{\"fruit\":{},\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"lon\":\"1\"}";
      stringArray0[2] = "{\"fruit\":{},\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"lon\":\"1\"}";
      stringArray0[3] = "{\"fruit\":{},\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"lon\":\"1\"}";
      stringArray0[4] = "8|[z~?P";
      stringArray0[5] = ";@}-!e~HKkO'";
      stringArray0[6] = "{\"fruit\":{},\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"lon\":\"1\"}";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("8|[z~?P", "] is not an enum of type ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ] is not an enum of type 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      jSONObject0.has("trim");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.putOnce("trim", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1002);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONObject0.put("istrim", (Object) "istrim");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "istrim";
      stringArray0[1] = "g-E";
      stringArray0[2] = "istrim";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String[] stringArray1 = Locale.getISOCountries();
      assertEquals(250, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.wrap((Object) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("org.json.JSONPointer", object0);
      JSONObject.valueToString(jSONObject1);
      jSONObject1.remove("Illegal escape.");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        JSONObject.stringToNumber("org.json.JSONPointer");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [org.json.JSONPointer] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      LinkedList<Thread.State> linkedList0 = new LinkedList<Thread.State>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject.stringToValue("true");
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      linkedList0.iterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Dialog.ModalExclusionType> linkedList1 = new LinkedList<Dialog.ModalExclusionType>();
      linkedList1.removeAll(linkedList0);
      try { 
        JSONObject.stringToNumber("5EIQ(!?-Z:W");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("7");
      assertEquals(7, object0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Resource.AuthenticationType, Proxy.Type> hashMap0 = new HashMap<Resource.AuthenticationType, Proxy.Type>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      Number number0 = JSONObject.stringToNumber("-99");
      assertEquals((-99), number0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":{},\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"lon\":\"1\"}");
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.accumulate("", "{\"fruit\":{},\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"lon\":\"1\"}");
      jSONObject1.remove((String) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String string1 = "3b3;2&";
      pipedOutputStream0.close();
      try { 
        JSONObject.stringToNumber("3b3;2&");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3b3;2&\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader(1394);
      String[] stringArray0 = new String[7];
      stringArray0[0] = " line ";
      JSONObject jSONObject1 = jSONObject0.increment(",_~3:Z8");
      jSONObject1.optBoolean((String) null, false);
      LinkedList<Character.UnicodeScript> linkedList0 = new LinkedList<Character.UnicodeScript>();
      try { 
        jSONObject1.getBigDecimal(" line ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "p~iusq?UiRu|";
      stringArray0[1] = "p~iusq?UiRu|";
      stringArray0[2] = "Duv`plicate key \"";
      jSONObject0.optBoolean("Duv`plicate key \"");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "iskeys");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // iskeys
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      HashMap<Formatter.BigDecimalLayoutForm, Short> hashMap1 = new HashMap<Formatter.BigDecimalLayoutForm, Short>();
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm0 = Formatter.BigDecimalLayoutForm.SCIENTIFIC;
      Short short0 = new Short((short) (-567));
      hashMap1.putIfAbsent(formatter_BigDecimalLayoutForm0, short0);
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm1 = Formatter.BigDecimalLayoutForm.DECIMAL_FLOAT;
      short short1 = (short)2192;
      Short short2 = new Short((short)2192);
      hashMap1.put(formatter_BigDecimalLayoutForm1, (Short) null);
      HashMap<Formatter.BigDecimalLayoutForm, Short> hashMap2 = new HashMap<Formatter.BigDecimalLayoutForm, Short>();
      hashMap2.put(formatter_BigDecimalLayoutForm0, short2);
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.isEmpty();
      String string0 = null;
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      linkedList0.iterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Dialog.ModalExclusionType> linkedList1 = new LinkedList<Dialog.ModalExclusionType>();
      linkedList1.removeAll(linkedList0);
      LinkedList<Dialog.ModalExclusionType> linkedList2 = new LinkedList<Dialog.ModalExclusionType>(linkedList1);
      JSONObject jSONObject1 = jSONObject0.put("5EIQ(!?-Z:W", (Collection<?>) linkedList0);
      jSONObject1.toMap();
      boolean boolean0 = jSONObject1.has("5EIQ(!?-Z:W");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("javax.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      Object object0 = JSONObject.wrap(locale0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashMap<TrayIcon.MessageType, DataInputStream> hashMap0 = new HashMap<TrayIcon.MessageType, DataInputStream>();
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.ERROR;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      hashMap0.put(trayIcon_MessageType0, dataInputStream0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "] is not an int.";
      jSONObject0.has("] is not an int.");
      try { 
        jSONObject0.getLong("] is not an int.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"Null pointer\":{},\"size\":\"Large\",\"-0\":99,\"false\":null,\"] is not a JSONArray.\":{\"getfloatValue\":true},\"Unable to increment [\":true}");
      jSONObject0.toMap();
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONObject.quote("{\"Null pointer\":{},\"size\":\"Large\",\"-0\":99,\"false\":null,\"] is not a JSONArray.\":{\"getfloatValue\":true},\"Unable to increment [\":true}");
      Locale locale0 = Locale.KOREA;
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("java.io.StringWriter@0000000049", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name java.io.StringWriter@0000000049, locale ko_KR
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":{},\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"lon\":\"1\"}");
      jSONObject0.remove("");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      pipedOutputStream0.flush();
      jSONObject0.toMap();
      jSONObject0.names();
      jSONObject0.optFloat((String) null);
      Class<RowIdLifetime> class0 = RowIdLifetime.class;
      try { 
        jSONObject0.getEnum(class0, ",[mXKD0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000050] is not an enum of type java.io.StringWriter@0000000051.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.multiply(bigInteger0);
      jSONObject0.similar(bigInteger0);
      bigInteger0.subtract(bigInteger1);
      jSONObject0.optBigInteger("yxS]E@'", bigInteger0);
      jSONObject0.toString(8448);
      JSONObject.numberToString(bigInteger2);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger2);
      jSONObject0.similar(bigDecimal0);
      DayOfWeek dayOfWeek0 = DayOfWeek.WEDNESDAY;
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      Thread.State thread_State0 = Thread.State.WAITING;
      hashMap0.put(thread_State0, dayOfWeek0);
      jSONObject0.entrySet();
      jSONObject0.put("l", (Map<?, ?>) hashMap0);
      jSONObject0.toMap();
      jSONObject0.isNull((String) null);
      DayOfWeek dayOfWeek1 = DayOfWeek.TUESDAY;
      Thread.State thread_State1 = Thread.State.TIMED_WAITING;
      hashMap0.put(thread_State1, dayOfWeek1);
      jSONObject0.optNumber("{\"value\":true,\"fruit\":\"Apple\",\"value2\":false,\"\":\"Red\",\"size\":\"Large\"}");
      JSONObject.numberToString(bigInteger1);
      jSONObject0.remove("java.math.BigInteger@0000000003");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(13);
      JSONObject.getNames(jSONObject0);
      LinkedList<FilterInputStream> linkedList0 = new LinkedList<FilterInputStream>();
      JSONObject jSONObject1 = jSONObject0.put("eM'Y=q]7$", (Collection<?>) linkedList0);
      JSONObject.stringToValue("");
      String string0 = ">l0";
      JSONObject jSONObject2 = jSONObject1.put(">l0", 114);
      jSONObject1.remove("eM'Y=q]7$");
      try { 
        jSONObject2.getNumber("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)4);
      JSONObject jSONObject1 = jSONObject0.putOpt("HU3U>f", short0);
      String string0 = "] is not an enum of type ";
      jSONObject1.getInt("HU3U>f");
      String string1 = "QG";
      try { 
        jSONObject0.getBigInteger("QG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\\", 366.0F);
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      LinkedList<ProcessBuilder.Redirect.Type> linkedList1 = new LinkedList<ProcessBuilder.Redirect.Type>();
      jSONObject0.optDouble("\\", Double.NaN);
      jSONObject0.optBoolean("Unable to write JSONArray value at index: 0");
      try { 
        jSONObject0.getBigInteger(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Short> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Short>();
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm0 = Formatter.BigDecimalLayoutForm.DECIMAL_FLOAT;
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      hashMap0.putIfAbsent(formatter_BigDecimalLayoutForm0, short1);
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm1 = Formatter.BigDecimalLayoutForm.DECIMAL_FLOAT;
      Short short2 = new Short((short) (-223));
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm2 = Formatter.BigDecimalLayoutForm.SCIENTIFIC;
      hashMap0.put(formatter_BigDecimalLayoutForm2, (Short) null);
      hashMap0.put(formatter_BigDecimalLayoutForm1, short2);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "\"";
      jSONObject0.optInt("\"");
      jSONObject0.optDouble("byteValue", 613.79705680227);
      jSONObject0.names();
      Class<TrayIcon.MessageType> class0 = TrayIcon.MessageType.class;
      try { 
        jSONObject0.getEnum(class0, "[\"S]RE{|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] is not an enum of type java.io.StringWriter@0000000006.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONObject.stringToValue("isNaN");
      JSONObject jSONObject0 = new JSONObject((Object) "isNaN");
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("isNaN");
      assertEquals("isNaN", object0);
      
      Object object1 = JSONObject.wrap("isNaN");
      assertTrue(object1.equals((Object)object0));
      
      StringWriter stringWriter0 = new StringWriter();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.parse("isNaN");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list1 = Locale.LanguageRange.mapEquivalents(list0, hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list2 = Locale.filterTags(list1, (Collection<String>) linkedList0);
      JSONObject.writeValue(stringWriter0, list2, (-1106), (-1106));
      assertEquals("[]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONObject.quote("tolowercase");
      JSONObject jSONObject0 = new JSONObject((Object) "tolowercase");
      try { 
        jSONObject0.getDouble("java.io.StringWriter@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000016] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader(1394);
      String[] stringArray0 = new String[7];
      stringArray0[0] = " line ";
      stringArray0[1] = " line ";
      stringArray0[2] = " line ";
      stringArray0[3] = " line ";
      String string0 = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = " line ";
      JSONObject jSONObject1 = new JSONObject(pipedReader0, stringArray0);
      try { 
        jSONObject0.getDouble(" line ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = "{\"Null pointer\":{},\"size\":\"Large\",\"-0\":99,\"value\":null,\"] is not a JSONArray.\":{0\":true},\"0\":-99,\"Unable to increment [\":{}}";
      Locale locale0 = Locale.FRENCH;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"Null pointer\":{},\"size\":\"Large\",\"-0\":99,\"value\":null,\"] is not a JSONArray.\":{0\":true},\"0\":-99,\"Unable to increment [\":{}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 82 [character 83 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("mV&%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"number\":\"1\"}");
      JSONObject jSONObject1 = jSONObject0.increment("8|[z~?P");
      jSONObject1.optBoolean("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"number\":\"1\"}", true);
      LinkedList<Character.UnicodeScript> linkedList0 = new LinkedList<Character.UnicodeScript>();
      // Undeclared exception!
      try { 
        jSONObject1.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      Object object0 = JSONObject.stringToValue("false");
      assertEquals(false, object0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = "h'";
      JSONObject.quote("h'");
      Double double0 = new Double((-221.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("h'", "java.io.StringWriter@0000000001");
      try { 
        jSONObject1.getJSONObject("h'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000014] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Thread.State thread_State0 = Thread.State.WAITING;
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      hashMap0.put(thread_State0, dayOfWeek0);
      hashMap0.keySet();
      LinkedList<FilterInputStream> linkedList0 = new LinkedList<FilterInputStream>();
      jSONObject0.put("false", (Collection<?>) linkedList0);
      JSONObject.stringToValue("Nu");
      jSONObject0.put("false", 2390);
      JSONObject.wrap(linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject jSONObject1 = new JSONObject(byteArrayOutputStream0);
      jSONObject1.optJSONObject(">l0");
      try { 
        jSONObject0.getJSONArray("Nu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(13);
      JSONObject.getNames(jSONObject0);
      LinkedList<FilterInputStream> linkedList0 = new LinkedList<FilterInputStream>();
      JSONObject jSONObject1 = jSONObject0.put("eM'Y=q]7$", (Collection<?>) linkedList0);
      JSONObject.stringToValue("");
      jSONObject0.increment("#ke.@iz|G");
      LinkedList<Character.UnicodeScript> linkedList1 = new LinkedList<Character.UnicodeScript>();
      jSONObject1.put(">l0", (Collection<?>) linkedList1);
      assertEquals(3, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Null key.");
      Class<DayOfWeek> class0 = DayOfWeek.class;
      try { 
        jSONObject0.getEnum(class0, "Null key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] is not an enum of type java.io.StringWriter@0000000014.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<MultipleGradientPaint.CycleMethod> class0 = MultipleGradientPaint.CycleMethod.class;
      jSONObject0.optEnum(class0, (String) null);
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<MultipleGradientPaint.CycleMethod> class0 = MultipleGradientPaint.CycleMethod.class;
      jSONObject0.optEnum(class0, "] is not a JSONObject.");
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("] is not a JSONObject.", true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      mockFileOutputStream0.flush();
      JSONObject jSONObject0 = new JSONObject(objectOutputStream0);
      jSONObject0.optInt("false");
      jSONObject0.optDouble("] is not a JSONObject.", (double) 0);
      jSONObject0.names();
      Class<TrayIcon.MessageType> class0 = TrayIcon.MessageType.class;
      try { 
        jSONObject0.getEnum(class0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = "h'";
      JSONObject.quote("h'");
      Double double0 = new Double((-221.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("h'", "java.io.StringWriter@0000000001");
      try { 
        jSONObject1.increment("h'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000014].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("has", "has");
      try { 
        jSONObject1.increment("has");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000007].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("SBI`CF");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(13);
      JSONObject.getNames(jSONObject0);
      LinkedList<FilterInputStream> linkedList0 = new LinkedList<FilterInputStream>();
      JSONObject jSONObject1 = jSONObject0.put("eM'Y=q]7$", (Collection<?>) linkedList0);
      JSONObject.stringToValue("");
      jSONObject1.put(">l0", 114);
      jSONObject1.remove("ki[9tip ");
      jSONObject0.optJSONObject("E-1H'GB");
      try { 
        jSONObject1.getJSONArray("ki[9tip ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000014] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBigDecimal("h[OJ&/&ZfA_bIo[k=t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<SocketFlow.Status, String> hashMap0 = new HashMap<SocketFlow.Status, String>();
      jSONObject0.put("Value out of sequence.", (Map<?, ?>) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Jy]W");
      JSONObject jSONObject0 = new JSONObject(stringReader0);
      JSONObject jSONObject1 = jSONObject0.put("\\", 366.0F);
      HashMap<RoundingMode, MockPrintStream> hashMap0 = new HashMap<RoundingMode, MockPrintStream>();
      String string0 = "gsdK=i";
      jSONObject1.put("gsdK=i", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getBigDecimal("Jy]W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000014] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Long long0 = new Long((-1147L));
      JSONObject.numberToString(long0);
      BigDecimal bigDecimal0 = new BigDecimal((-1147L));
      assertEquals((short) (-1147), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.remove("r_#}x'mRZ~LE");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      JSONObject.getNames((Object) mockPrintStream0);
      Long long0 = new Long((-99L));
      JSONObject.numberToString(long0);
      jSONObject0.put("to", 1.0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.multiply(bigInteger0);
      jSONObject0.similar(bigInteger0);
      bigInteger0.subtract(bigInteger1);
      jSONObject0.optBigInteger("yxS]E@'", bigInteger0);
      int int0 = 8448;
      jSONObject0.toString(8448);
      JSONObject.numberToString(bigInteger2);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^8wFSFM@?#,_o@Gw");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\\", 366.0F);
      JSONObject jSONObject2 = jSONObject1.put("", (Object) "");
      jSONObject2.put("^8wFSFM@?#,_o@Gw", (-1L));
      JSONPointer jSONPointer0 = new JSONPointer("");
      JSONObject jSONObject3 = (JSONObject)jSONObject1.optQuery(jSONPointer0);
      jSONObject3.putOpt("", "\\");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject2.write((Writer) charArrayWriter0, 1180, 1);
      assertEquals(3735, charArrayWriter0.size());
      
      Character character0 = new Character('n');
      String[] stringArray0 = JSONObject.getNames((Object) character0);
      assertEquals(66, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONObject.stringToValue("E[>@3ZuVwGi?&.~M");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toMap();
      JSONObject.quote("E[>@3ZuVwGi?&.~M");
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      linkedList0.iterator();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (Collection<?>) linkedList0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("E[>@3ZuVwGi?&.~M", false);
      JSONObject.indent(mockFileWriter0, 2207);
      jSONObject1.toMap();
      int int0 = jSONObject0.optInt("toM", 2207);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2207, int0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^8wFSFM@?#,_o@Gw");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\\", 366.0F);
      jSONObject1.put("", (Object) "");
      JSONPointer jSONPointer0 = new JSONPointer("");
      jSONObject1.optQuery(jSONPointer0);
      jSONObject0.optInt("^8wFSFM@?#,_o@Gw", (-563));
      StringWriter stringWriter0 = new StringWriter(0);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "^8wFSFM@?#,_o@Gw", (-563), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("Null key.");
      assertEquals("Null key.", object0);
      
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject("Null key.", stringArray0);
      try { 
        jSONObject0.getNumber("Null key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.toString();
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      HashMap<Resource.AuthenticationType, Proxy.Type> hashMap0 = new HashMap<Resource.AuthenticationType, Proxy.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = JSONObject.wrap(jSONObject0);
      jSONObject0.keySet();
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("true", (-1.0));
      String[] stringArray0 = new String[3];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader(1394);
      String[] stringArray0 = new String[7];
      stringArray0[0] = " line ";
      stringArray0[1] = " line ";
      stringArray0[2] = " line ";
      stringArray0[3] = " line ";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = " line ";
      JSONObject jSONObject1 = new JSONObject(pipedReader0, stringArray0);
      jSONObject0.putOpt(" line ", jSONObject1);
      jSONObject0.optLong("VC8KPbqnojY", 0L);
      jSONObject0.keys();
      jSONObject0.put("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":{},\"value\":true,\"value2\":false,\"number\":\"1\"}", 1931.0235988);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Double double0 = new Double((-221.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject.testValidity(double0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      JSONObject.quote("h'");
      Double double0 = new Double((-221.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("h'", "java.io.StringWriter@0000000001");
      jSONObject0.isNull("6m |>AATzWC");
      jSONObject1.remove("(lW009(");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(13);
      JSONObject jSONObject1 = new JSONObject(13);
      JSONObject.getNames(jSONObject1);
      LinkedList<FilterInputStream> linkedList0 = new LinkedList<FilterInputStream>();
      jSONObject1.remove("3Hr0.{?x,");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject.getNames((Object) boolean0);
      Long long0 = new Long(13);
      JSONObject.numberToString(long0);
      try { 
        JSONObject.stringToNumber("3Hr0.{?x,");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      try { 
        JSONObject.stringToNumber(";");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [;] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.wrap((Object) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("org.json.JSONPointer", object0);
      jSONObject1.remove("Illegal escape.");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        JSONObject.stringToNumber("org.json.JSONPointer");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [org.json.JSONPointer] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      JSONObject.stringToValue("isNaN");
      JSONObject.getNames((Object) "isNaN");
      JSONObject jSONObject0 = new JSONObject(1867);
      try { 
        jSONObject0.getInt("isNaN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      String[] stringArray0 = new String[7];
      Short short0 = new Short((short)0);
      Object object0 = JSONObject.wrap(short0);
      assertEquals((short)0, object0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      HashMap<Resource.AuthenticationType, Proxy.Type> hashMap0 = new HashMap<Resource.AuthenticationType, Proxy.Type>();
      Resource.AuthenticationType resource_AuthenticationType0 = Resource.AuthenticationType.CONTAINER;
      hashMap0.put(resource_AuthenticationType0, proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Short> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Short>();
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm0 = Formatter.BigDecimalLayoutForm.DECIMAL_FLOAT;
      Short short0 = new Short((short)0);
      hashMap0.putIfAbsent(formatter_BigDecimalLayoutForm0, short0);
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm1 = Formatter.BigDecimalLayoutForm.DECIMAL_FLOAT;
      short short1 = (short) (-223);
      Short short2 = new Short((short) (-223));
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm2 = Formatter.BigDecimalLayoutForm.SCIENTIFIC;
      hashMap0.put(formatter_BigDecimalLayoutForm2, (Short) null);
      hashMap0.put(formatter_BigDecimalLayoutForm1, short2);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.isEmpty();
      String string0 = null;
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("hases", "hases");
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":{},\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"true\":false,\"lon\":\"1\",\"x\":true}");
      JSONObject jSONObject1 = jSONObject0.increment("8|[z~?P");
      jSONObject1.optBoolean("{\"fruit\":{},\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"true\":false,\"lon\":\"1\",\"x\":true}", true);
      LinkedList<Character.UnicodeScript> linkedList0 = new LinkedList<Character.UnicodeScript>();
      // Undeclared exception!
      try { 
        jSONObject1.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Null key.");
      try { 
        jSONObject0.toString(2405);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      JSONObject.quote("tolowercase");
      JSONObject jSONObject0 = new JSONObject((Object) "tolowercase");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      JSONObject.stringToValue("E[>@3ZuVwGi?&.~M");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toMap();
      JSONObject.quote("E[>@3ZuVwGi?&.~M");
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      linkedList0.iterator();
      jSONObject0.put("-0", (Collection<?>) linkedList0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[99],\"b\":{}}", true);
      JSONObject.indent(mockFileWriter0, 2207);
      jSONObject0.toMap();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale locale0 = Locale.FRANCE;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = JSONObject.wrap(bigDecimal0);
      assertSame(bigDecimal0, object0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      JSONObject.quote("h'");
      Double double0 = new Double((-221.0));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ishashCode");
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      JSONObject jSONObject1 = jSONObject0.putOpt("B4;ot{k}.r", objectOutputStream0);
      JSONObject jSONObject2 = jSONObject1.increment("h'");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject2.put("B4;ot{k}.r", (Collection<?>) linkedList0);
      Integer integer0 = new Integer(375);
      linkedList0.add(integer0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("java.io.StringWriter@0000000001", true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      objectOutputStream0.writeDouble(375);
      BufferedOutputStream bufferedOutputStream0 = null;
      try {
        bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, (-1168));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = " line ";
      String[] stringArray0 = new String[7];
      stringArray0[0] = " line ";
      JSONObject jSONObject1 = new JSONObject((Object) " line ");
      String string1 = "A JSONObject text must end with '}'";
      try { 
        jSONObject1.getJSONArray("A JSONObject text must end with '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBigInteger("gethashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      HashMap<Character.UnicodeScript, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Character.UnicodeScript, GraphicsDevice.WindowTranslucency>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String string0 = "B";
      try { 
        jSONObject0.getBigInteger("B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.7067738910482391);
      assertEquals("0.7067738910482391", string0);
      
      Object object0 = JSONObject.stringToValue("0.7067738910482391");
      assertEquals(0.7067738910482391, object0);
      
      LinkedList<Character.UnicodeScript> linkedList0 = new LinkedList<Character.UnicodeScript>();
      linkedList0.poll();
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject jSONObject1 = jSONObject0.putOpt("bxBY4AayDqr,z", bigInteger0);
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject2 = jSONObject1.increment("bxBY4AayDqr,z");
      jSONObject2.has("1");
      jSONObject0.optBigInteger("1", bigInteger0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("getScript");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("has", "has");
      jSONObject1.toString();
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      HashMap<Month, Authenticator.RequestorType> hashMap0 = new HashMap<Month, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optLong("T:In4!];", 0L);
      JSONObject jSONObject1 = jSONObject0.accumulate("T:In4!];", "T:In4!];");
      LinkedList<DropMode> linkedList0 = new LinkedList<DropMode>();
      jSONObject1.put("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":[],\"value2\":false,\"number\":\"1\"}", (Collection<?>) linkedList0);
      jSONObject1.optDouble("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":[],\"value2\":false,\"number\":\"1\"}", 0.0);
      jSONObject0.optBoolean("T:In4!];");
      float float0 = jSONObject0.optFloat("T:In4!];", (-1.0F));
      assertFalse(jSONObject0.isEmpty());
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      JSONObject.quote("tolowercase");
      JSONObject jSONObject0 = new JSONObject((Object) "tolowercase");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("%t]$SQM");
      Class<RoundingMode> class0 = RoundingMode.class;
      try { 
        jSONObject0.getEnum(class0, "has");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optQuery("");
      jSONObject0.optNumber(":W*Pm\"zX^MYt.;}$p");
      JSONObject jSONObject1 = jSONObject0.put("", (Object) null);
      File file0 = MockFile.createTempFile("' and instead saw ''", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Writer writer0 = JSONObject.writeValue(mockPrintWriter0, "' and instead saw ''", 0, 0);
      JSONObject.writeValue(writer0, file0, 0, 0);
      float float0 = jSONObject1.optFloat("N^$Uz+KV", 1.0F);
      assertEquals(1.0F, float0, 0.01F);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Number number0 = jSONObject0.optNumber("3r^3>]a,N]");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<WebParam.Mode, InputStreamReader> hashMap0 = new HashMap<WebParam.Mode, InputStreamReader>(75, 75);
      jSONObject0.put("Misplaced key.", (Map<?, ?>) hashMap0);
      jSONObject0.put("'ojOLTOR[yd86", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      HashMap<LayoutStyle.ComponentPlacement, BigInteger> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, BigInteger>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      float float0 = jSONObject0.optFloat("\\");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getNumber("/@a-Dwr!.j|Suk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Thread.State thread_State0 = Thread.State.WAITING;
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      hashMap0.put(thread_State0, dayOfWeek0);
      hashMap0.keySet();
      JSONObject.getNames((Object) null);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((-1053));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1053
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1279);
      JSONObject jSONObject0 = new JSONObject(byteArrayOutputStream0);
      try { 
        jSONObject0.getString("\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.quote("XNZO8w HkltBgL/", (Writer) charArrayWriter0);
      assertEquals(17, charArrayWriter0.size());
      assertEquals("\"XNZO8w HkltBgL/\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      HashMap<Thread.State, DayOfWeek> hashMap0 = new HashMap<Thread.State, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Thread.State thread_State0 = Thread.State.WAITING;
      DayOfWeek dayOfWeek0 = DayOfWeek.SATURDAY;
      hashMap0.put(thread_State0, dayOfWeek0);
      hashMap0.keySet();
      Thread.State thread_State1 = Thread.State.TIMED_WAITING;
      DayOfWeek dayOfWeek1 = DayOfWeek.SATURDAY;
      JSONObject.getNames((Object) dayOfWeek1);
      hashMap0.put(thread_State1, dayOfWeek1);
      String string0 = "{\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}";
      try { 
        jSONObject0.getNumber("{\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      JSONObject.stringToValue("E[>@3ZuVwGi?&.~M");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("E[>@3ZuVwGi?&.~M");
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      Iterator<MockFileInputStream> iterator0 = linkedList0.iterator();
      JSONObject jSONObject1 = new JSONObject(iterator0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("E[>@3ZuVwGi?&.~M", true);
      Object object0 = new Object();
      jSONObject1.accumulate("] is not a JSONArray.", object0);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      LinkedList<MockFileInputStream> linkedList1 = new LinkedList<MockFileInputStream>();
      linkedList1.add((MockFileInputStream) null);
      linkedList1.add((MockFileInputStream) null);
      linkedList1.iterator();
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      HashMap<Character, Month> hashMap0 = new HashMap<Character, Month>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("':{^W-\"N", 1388.3193F);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = "Jy]W";
      StringReader stringReader0 = new StringReader("Jy]W");
      JSONObject jSONObject0 = new JSONObject(stringReader0);
      JSONObject jSONObject1 = jSONObject0.put("\\", 366.0F);
      jSONObject1.put("l", (Object) "l");
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)4);
      jSONObject0.putOpt("HU3U>f", short0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("] is not an enum of type ");
      mockFileWriter0.close();
      try { 
        jSONObject0.write((Writer) mockFileWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stream closed
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "HU3U>f";
      short short0 = (short)4;
      Short short1 = new Short((short)4);
      jSONObject0.putOpt("HU3U>f", short1);
      String string1 = "] is not an enum of type ";
      MockFileWriter mockFileWriter0 = new MockFileWriter("] is not an enum of type ");
      mockFileWriter0.close();
      try { 
        jSONObject0.write((Writer) mockFileWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stream closed
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      boolean boolean0 = jSONObject0.similar(bigInteger0);
      assertFalse(boolean0);
      
      bigInteger0.subtract(bigInteger1);
      jSONObject0.optJSONObject((String) null);
      JSONObject.valueToString(bigInteger0);
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      HashMap<Resource.AuthenticationType, Proxy.Type> hashMap0 = new HashMap<Resource.AuthenticationType, Proxy.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = new JSONObject(27);
      int int0 = jSONObject1.optInt("javax.", 27);
      assertEquals(27, int0);
      
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ")]nq\\: k~qerc";
      String string1 = "org.json.JSONObject";
      jSONObject0.optInt("org.json.JSONObject");
      MockFile mockFile0 = new MockFile((File) null, ")]nq: k~qerc");
      mockFile0.delete();
      File file0 = MockFile.createTempFile("org.json.JSONObject", ")]nq: k~qerc", (File) mockFile0);
      mockFile0.setLastModified(0);
      mockFile0.setLastModified(0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "org.json.JSONObject");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.json.JSONObject
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("Illegal escape.", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name Illegal escape., locale ko_KR
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("et]vWS.mq}1tN<-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0, charset0);
      int int0 = (-1834);
      ByteBuffer byteBuffer0 = charset0.encode("A JSONObject text must begin with '{'");
      charset0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("VG^WH`v#[eD8vszNU;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONTokener jSONTokener0 = new JSONTokener(mockFileInputStream0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      InputStream inputStream0 = null;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      JSONTokener jSONTokener0 = new JSONTokener(bufferedInputStream0);
      bufferedInputStream0.close();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stream closed
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1.0));
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-1053));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1053
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\\\";
      JSONObject jSONObject1 = jSONObject0.put("\\", 366.0F);
      jSONObject1.similar(jSONObject0);
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      LinkedList<ProcessBuilder.Redirect.Type> linkedList1 = new LinkedList<ProcessBuilder.Redirect.Type>();
      byte byte0 = (byte)20;
      Byte byte1 = new Byte((byte)20);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("\\");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"number\":\"1\"}");
      JSONObject jSONObject1 = jSONObject0.increment("8|[z~?P");
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.bitLength();
      jSONObject1.optBigInteger("8|[z~?P", bigInteger0);
      jSONObject1.optBoolean("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"number\":\"1\"}", true);
      LinkedList<Character.UnicodeScript> linkedList0 = new LinkedList<Character.UnicodeScript>();
      Integer integer0 = new Integer(31);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("ADs", "ADs");
      boolean boolean0 = jSONObject0.similar("ADs");
      assertFalse(jSONObject0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "y\\xS]E@'";
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.multiply(bigInteger0);
      jSONObject0.similar(bigInteger0);
      bigInteger0.subtract(bigInteger1);
      jSONObject0.optBigInteger("yxS]E@'", bigInteger0);
      int int0 = 8448;
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":-99,\"value\":true,\"value2\":false,\"number\":\"1\"}");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("oyq9PG[sy]Q", bigInteger0);
      assertEquals((byte)1, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("3a%*ty", 0.0F);
      jSONObject0.names();
      Object object0 = new Object();
      Locale.getISOCountries();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONObject1.optBigInteger("3a%*ty", bigInteger0);
      assertEquals(1, jSONObject0.length());
      assertNotSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("jM?@s7x8'iXXyzD76|9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.multiply(bigInteger0);
      jSONObject0.similar(bigInteger0);
      bigInteger0.subtract(bigInteger1);
      jSONObject0.optBigInteger("yxS]E@'", bigInteger0);
      jSONObject0.toString(8448);
      JSONObject.numberToString(bigInteger2);
      JSONObject jSONObject1 = jSONObject0.accumulate("96G?n6J</_AF9&S#6", "java.math.BigInteger@0000000003");
      Class<SocketFlow.Status> class0 = SocketFlow.Status.class;
      SocketFlow.Status socketFlow_Status0 = SocketFlow.Status.OK;
      jSONObject1.optEnum(class0, "Bad value from toJSONString: ", socketFlow_Status0);
      jSONObject1.toString();
      int int0 = jSONObject0.optInt((String) null, 8448);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(8448, int0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      JSONObject.stringToValue("#");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.getNames((Object) "#");
      JSONObject jSONObject0 = new JSONObject(2590);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      JSONObject.quote("/");
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      linkedList0.iterator();
      MockFileWriter mockFileWriter0 = new MockFileWriter("toCharArray", false);
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("3a%*ty", 0.0F);
      JSONArray jSONArray0 = jSONObject0.names();
      jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) null);
      jSONObject1.increment(">izl/M==");
      boolean boolean0 = jSONObject1.has("+/jy)YN$");
      assertEquals(1, jSONObject1.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      JSONObject.quote("E[>@3ZuVwGi?&.~M");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toMap();
      JSONObject.quote("E[>@3ZuVwGi?&.~M");
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      jSONObject0.toJSONArray((JSONArray) null);
      linkedList0.iterator();
      Class<SocketFlow.Status> class0 = SocketFlow.Status.class;
      SocketFlow.Status socketFlow_Status0 = SocketFlow.Status.IN_PROGRESS;
      jSONObject0.optEnum(class0, "java.io.StringWriter@0000000001", socketFlow_Status0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      
      int int0 = jSONObject0.optInt("java.io.StringWriter@0000000004", (-775));
      assertEquals((-775), int0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      jSONObject0.toJSONArray(jSONArray0);
      String string0 = "bi=OPK";
      try { 
        jSONObject0.getJSONArray("bi=OPK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("has", "has");
      try { 
        jSONObject1.getJSONObject("has");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Short> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Short>();
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm0 = Formatter.BigDecimalLayoutForm.DECIMAL_FLOAT;
      Short short0 = new Short((short)0);
      hashMap0.putIfAbsent(formatter_BigDecimalLayoutForm0, short0);
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm1 = Formatter.BigDecimalLayoutForm.DECIMAL_FLOAT;
      Short short1 = new Short((short) (-223));
      hashMap0.put(formatter_BigDecimalLayoutForm1, (Short) null);
      hashMap0.put(formatter_BigDecimalLayoutForm1, short1);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.isEmpty();
      String string0 = null;
      jSONObject0.remove((String) null);
      jSONObject0.toMap();
      jSONObject0.names();
      Class<RowIdLifetime> class0 = RowIdLifetime.class;
      hashMap0.put(formatter_BigDecimalLayoutForm1, (Short) null);
      try { 
        jSONObject0.getEnum(class0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] is not an enum of type java.io.StringWriter@0000000006.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.getNames((Object) byteArrayOutputStream0);
      String string0 = JSONObject.quote("");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("hs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(128);
      Class<JDBCType> class0 = JDBCType.class;
      String string0 = "";
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      String string0 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":true}";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) null, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.lookup(linkedList0, list1);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":true}", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("0", 0L);
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      LinkedList<ProcessBuilder.Redirect.Type> linkedList1 = new LinkedList<ProcessBuilder.Redirect.Type>();
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("toM");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "tolowercase");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      HashMap<Month, Authenticator.RequestorType> hashMap0 = new HashMap<Month, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optLong("T:In4!];", 0L);
      JSONObject jSONObject1 = jSONObject0.accumulate("T:In4!];", "T:In4!];");
      jSONObject1.toString();
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<DropMode> linkedList0 = new LinkedList<DropMode>();
      JSONObject jSONObject1 = jSONObject0.put("{\"fruit\":\"Apple\",\"size\":[],\"color\":\"get\",\"value\":[],\"value2\":false,\"number\":\"1\"}", (Collection<?>) linkedList0);
      jSONObject1.optDouble("{\"fruit\":\"Apple\",\"size\":[],\"color\":\"get\",\"value\":[],\"value2\":false,\"number\":\"1\"}", 0.0);
      jSONObject1.optBoolean("{\"fruit\":\"Apple\",\"size\":[],\"color\":\"get\",\"value\":[],\"value2\":false,\"number\":\"1\"}");
      float float0 = jSONObject0.optFloat("?gX;s:F'l!wJ|", (-1.0F));
      assertFalse(jSONObject0.isEmpty());
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      JSONObject.stringToValue("isNaN");
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<RoundingMode> linkedList0 = new LinkedList<RoundingMode>();
      jSONObject0.put("isNaN", (Collection<?>) linkedList0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-2834));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2834
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "getlength";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      String string0 = "p~iusq?UiRu|";
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "p~iusq?UiRu|";
      stringArray0[1] = "p~iusq?UiRu|";
      stringArray0[2] = "Duplicate key \"";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("C\"(", "true");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // true
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("rHU#$*J(w>'[T.d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"Null pointer\":{\"x\":null},\"size\":\"longValue\",\"-0\":99,\"false\":[],\"] is not a JSONArray.\":{\"0\":true},\"Unable to increment [\":{\"x\":null}}");
      jSONObject0.toMap();
      StringReader stringReader0 = new StringReader("{\"Null pointer\":{\"x\":null},\"size\":\"longValue\",\"-0\":99,\"false\":[],\"] is not a JSONArray.\":{\"0\":true},\"Unable to increment [\":{\"x\":null}}");
      JSONObject jSONObject1 = new JSONObject(stringReader0);
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      JSONObject jSONObject2 = new JSONObject(stringReader0);
      assertEquals(0, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      String string0 = "i;Fv#vJw=!K^oF";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("i;Fv#vJw=!K^oF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      try { 
        pipedInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
}
