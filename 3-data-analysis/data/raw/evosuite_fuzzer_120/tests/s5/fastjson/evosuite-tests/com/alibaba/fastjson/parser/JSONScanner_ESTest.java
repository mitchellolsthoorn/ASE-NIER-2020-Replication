/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 23:03:51 GMT 2020
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONScanner_ESTest extends JSONScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextToken(2529);
      long[] longArray0 = new long[4];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"v^^8eu\":7,\"xxxx\":null,\"\"@type\":\"{\"com.alibaba.fastjson.parser.JSONScanner\":false,\"com.google.common.collect.LinkedListMultimap\":99,\"\"@type\":\"can not cast to char, value : \":{\"x\":false},\"Ljava/lan\":[],\"x\":null}\":true,\"illegal json.\":-99,\"illegal state. \":null,\"com.alibaba.fastjson.util.IdentityHashMap$Entry\":[],\"b\":\"a string\",\"yyyy\u5E74M\u6708d\u65E5 HH:mm:ss\":{}}", 0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      jSONScanner0.next();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(1163L, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"v^^8eu\":[],\"value\":true,\"illegal state. \":[],\"\"@type\":\"\":\"a string\"}");
      jSONScanner0.token = 108;
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 108, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unknown
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.parser.JSONScanner\":false,\"com.google.common.collect.LinkedListMultimap\":true,\"value\":true,\"com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec\":[],\"x\":99}");
      jSONScanner0.token = 108;
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":z%VbO<", 1239);
      jSONScanner0.nextTokenWithColon(2);
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals(1, jSONScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldStringArray(charArray0, 105, (SymbolTable) null);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanDate('e');
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0000-0|-0", (-93));
      long long0 = jSONScanner0.scanLong('7');
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1, 1651);
      long long0 = jSONScanner0.scanLong('0');
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanDate('-');
      jSONScanner0.scanLong('-');
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Ce");
      jSONScanner0.bp = 45;
      double double0 = jSONScanner0.scanDouble('Z');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"v^^8eu\":7,\"xxxx\":null,\"\"@type\":\"{\"com.alibaba.fastjson.parser.JSONScanner\":false,\"com.google.common.collect.LinkedListMultimap\":99,\"\"@type\":\"can not cast to char, value : \":{\"x\":false},\"Ljava/lan\":[],\"x\":null}\":true,\"illegal jCon.\":-99,\"illegal state. \":null,\"com.alibaba.fastjson.util.IdentityHashMap$Entry\":[],\"b\":\"a string\",\"yyyy\u5E74M\u6708d\u65E5 HH:mm:ss\":{}}", 10);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" m,fd=F@", 7);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("22>\"{*a{XE");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"clazz is null\":-99,\"com.alibaba.fastjson.parser.JSONScanner\":{\"illegal json.\":null}}");
      jSONScanner0.nextToken((int) '1');
      long[] longArray0 = new long[8];
      jSONScanner0.seekObjectToField(longArray0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals(13, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 1003);
      char[] charArray1 = new char[0];
      long long0 = jSONScanner0.scanFieldSymbol(charArray1);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 4);
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1);
      boolean boolean0 = jSONScanner0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('1', '1', '1', '1', '1', '1', 763, 763);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('2', '9', '9', '9', '2', '2', 2028, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('0', '9', 'j', 'K', '9', 'K', (-376), 116);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('9', 'p', 'L', 'p', 'L', ' ', 0, 6);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"", (-254));
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('%', 'r', 'a', 'a', 'a');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/2UX!(TE)qp[xx=");
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9;TGr8%.Uq`Gt");
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.sp = 31;
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      jSONScanner0.token = 108;
      byte[] byteArray0 = jSONScanner0.bytesValue();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"null\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"\"@type\":\"null\":{}},\"xx\":\"a string\"}", 0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'i';
      jSONScanner0.nextToken(15);
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#Xh\u0007^fT]i-@G'");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1#Xh\u0007^fT]i-@G'
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"null\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"\"@type\":\"null\":{}},\"xx\":\"a string\"}");
      jSONScanner0.skipObject();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9%Q:", 92);
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 19%Q:
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("s,jr", 108);
      TimeZone timeZone0 = jSONScanner0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONScanner0.setTimeZone('J', 'J', 'E');
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("s-,jr", 108);
      TimeZone timeZone0 = jSONScanner0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONScanner0.setTime('#', 'n', 'T', 'p', 'Y', 'T');
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.copyTo(0, 0, charArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.parser.JSONScanner\":false,\"com.google.common.collect.LinkedListMultimap\":99,\"\"@type\":\"can not cast to char, value : \":{\"x\":false},\"Ljava/lan\":[],\"x\":null}");
      char[] charArray0 = new char[6];
      jSONScanner0.arrayCopy(0, charArray0, 0, 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.parser.JSONScanner\":-99,\"deserialize inet adress error\":-99,\"B+U^}<w@*\":-99,\"\"@type\":\"{\"com.alibaba.fastjson.parser.JSONScanner\":false,\"com.google.common.collect.LinkedListMultimap\":[99],\"value\":{},\"Ljava/lan\":[],\"\"{\"\"@type\":null}\":[],\"pos \":true,\"x\":null}");
      char[] charArray0 = jSONScanner0.sub_chars(111, 45);
      assertEquals(45, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"(S)Ljava/\":200,\"{\"fruit\":\":false}");
      char[] charArray0 = jSONScanner0.sub_chars(0, 0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"parseInt error : \":[],\"illegal json.\":[],\"illegal state. \":true,\"com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec\":{\"9%Q:P\":false}}", 2533);
      String string0 = jSONScanner0.subString(76, 26);
      assertEquals("ba.fastjson.parser.deseria", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"null\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"\"@type\":\"null\":{}},\"xx\":\"a string\"}");
      String string0 = jSONScanner0.subString(3, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e\"6Gt7f*nu]eHQN");
      jSONScanner0.scanNumber();
      String string0 = jSONScanner0.stringVal();
      assertEquals("\"", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("|aL#h!27q<HS", (-1576));
      char[] charArray0 = new char[8];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"", (-254));
      jSONScanner0.nextIdent();
      String string0 = jSONScanner0.numberString();
      assertEquals("\"a strin", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".2ap$>\"{*a{XE");
      char char0 = jSONScanner0.next();
      assertEquals('2', char0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"null\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"\"@type\":\"null\":{}},\"xx\":\"a string\"}", 0);
      int int0 = jSONScanner0.indexOf('i', 15);
      assertEquals(83, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("49c7s!J*H");
      jSONScanner0.nextToken(0);
      BigDecimal bigDecimal0 = jSONScanner0.decimalValue();
      assertEquals((byte)49, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      jSONScanner0.nextToken(2529);
      jSONScanner0.decimalValue();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      char char0 = jSONScanner0.charAt(1023);
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.parser.JSONScanner\":-99,\"deserialize inet adress error\":-99,\"B+U^}<w@*\":-99,\"\"@type\":\"{\"com.alibaba.fastjson.parser.JSONScanner\":false,\"com.google.common.collect.LinkedListMultimap\":[99],\"value\":{},\"Ljava/lan\":[],\"\"{\"\"@type\":null}\":[],\"pos \":true,\"x\":null}");
      char char0 = jSONScanner0.charAt(16);
      assertEquals('s', char0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" m,fd=F@", 7);
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"", (-254));
      char[] charArray0 = new char[8];
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec\":99,\"size\":\"a string\",\"$VALUES\":\"ull1111\"}");
      jSONScanner0.nextToken(0);
      long[] longArray0 = new long[5];
      longArray0[3] = 5614464919154503228L;
      jSONScanner0.seekObjectToField(longArray0);
      jSONScanner0.bytesValue();
      assertEquals(3, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"v^^8eu\":7,\"xxxx\":null,\"\"@type\":\"{\"com.alibaba.fastjson.parser.JSONScanner\":false,\"com.google.common.collect.LinkedListMultimap\":99,\"\"@type\":\"can not cast to char, value : \":{\"x\":false},\"Ljava/lan\":[],\"x\":null}\":true,\"illegal json.\":-99,\"illegal tate. \":null,\"com.alibaba.fastjson.util.IdentityHashMap$Entry\":[],\"b\":\"a string\",\"yyyy\u5E74M\u6708d\u65E5 HH:mm:ss\":{}}", 55);
      SymbolTable symbolTable0 = new SymbolTable(55);
      String string0 = jSONScanner0.addSymbol(55, 55, 55, symbolTable0);
      assertEquals("ba.fastjson.parser.JSONScanner\":false,\"com.google.commo", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0000-0oo0", (-93));
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(88, (-267));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"", 2529);
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"\"@type\":\"{\"fruit\":\"\"@type\":\"\",\"size\":\"a string\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":-99}");
      jSONScanner0.skipString();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      jSONScanner0.next();
      // Undeclared exception!
      try { 
        jSONScanner0.scanTypeName((SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java/util/ArrayList");
      char[] charArray0 = new char[0];
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.reflect.Method
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 4);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 4);
      SymbolTable symbolTable0 = new SymbolTable(4);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, 121, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibabafastjson.util.GenericLrrayTypeImpl");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("@%z=EPKg|", 26344);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" m,fd=F@");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"\"@type\":\"null\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"\"@type\":\"null\":{}},\"xx\":\"a string\"}", (-1782));
      char[] charArray0 = new char[4];
      jSONScanner0.bp = (-550);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBoolean(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fasAjson.seriulizer.JSONSe)ializaleferializer", 2541);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.serializer.JSONSerializableferializer", 30);
      jSONScanner0.bp = (-1610);
      // Undeclared exception!
      try { 
        jSONScanner0.scanDate('B');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 4);
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"");
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.next();
      // Undeclared exception!
      try { 
        jSONScanner0.info();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"[boolean\":\"Apple\",\"size\":\"a string\",\"color\":\"\"@type\":\"{\"fruit\":\"Apple\",\"size\":\"a string\",\"\"@type\":\"\":\"Red\",\"illegal json.\":\"a string\",\"illegal state. \":null,\"com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec\":-99}\",\"illegal json.\":[],\"illegal state. \":null,\"com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec\":{}}");
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"\"@type\":\"\",\"size\":\"a string\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":-99}", (-3820));
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(0, 13, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("|)s79,ye4r:9M*i");
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-373));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("unclosed str, ", (-168), (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7,\"xxxx\":", 500);
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(1, charArray0, 500, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("index must > 0, but ", 102);
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("index must > 0, but ", parserConfig0);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(102, 102, 102, defaultJSONParser0.symbolTable);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":nll");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("org.joda.time.LocalDateTime");
      // Undeclared exception!
      jSONScanner0.addSymbol(1459, 1443168256, 2362, defaultJSONParser0.symbolTable);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"\"a string\"", (-320));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol((-128), (-320), (-16), defaultJSONParser0.symbolTable);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 0, 1723);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 29);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, (-327));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"parseInt error : \":[],\"illegal json.\":[],\"illegal state. \":true,\"com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec\":{\"9%Q:P\":false}}", 2533);
      jSONScanner0.nextToken(91);
      jSONScanner0.seekObjectToField((long) 2533, false);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      char char0 = jSONScanner0.next();
      assertEquals('\u001A', char0);
      
      jSONScanner0.skipArray(false);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"null\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"\"@type\":\"null\":{}},\"xx\":\"a string\"}", 0);
      jSONScanner0.nextToken(15);
      jSONScanner0.skipObject(false);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"6@]Gka0A+\":{},\":false,\"c\":{}}");
      jSONScanner0.nextToken(0);
      String string0 = jSONScanner0.info();
      assertEquals("pos 1, line 1, column 2{\"6@]Gka0A+\":{},\":false,\"c\":{}}", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("zk}6{U#pc+8.v");
      // Undeclared exception!
      try { 
        jSONScanner0.subString(47, 47);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      boolean boolean0 = JSONScanner.charArrayCompare("null", 0, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = JSONScanner.charArrayCompare("cxRBGj9Zw#*l]k`rz.", (-3820), charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("\"@type\":\"", (-4602), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = JSONScanner.charArrayCompare("7xl]", 57, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"", (-254));
      int int0 = jSONScanner0.indexOf('o', 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"\"@type\":\"{\"fruit\":\"\"@type\":\"\",\"size\":\"a string\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":-99}");
      jSONScanner0.skipString();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      jSONScanner0.next();
      jSONScanner0.scanTypeName(defaultJSONParser0.symbolTable);
      assertEquals(17, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"");
      String string0 = jSONScanner0.scanTypeName((SymbolTable) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@tye\":\"");
      String string0 = jSONScanner0.scanTypeName((SymbolTable) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer\":{},\"illegal str, \":\"a string\"}");
      jSONScanner0.nextToken((int) '1');
      long[] longArray0 = new long[8];
      jSONScanner0.seekObjectToField(longArray0);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"[boolean\":\"Apple\",\"size\":\"a string\",\"color\":\"\"@type\":\"{\"fruit\":\"Apple\",\"size\":\"a string\",\"\"@type\":\"\":\"Red\",\"illegal json.\":\"a string\",\"illegal state. \":null,\"com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec\":-99}\",\"illegal json.\":[],\"illegal state. \":null,\"com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec\":{}}");
      jSONScanner0.nextToken(98);
      long[] longArray0 = new long[2];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.util.IOUtils\":100.0}");
      jSONScanner0.nextToken(2529);
      long[] longArray0 = new long[0];
      int int0 = jSONScanner0.seekObjectToField(longArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"v^^8eu\":7,\"xxxx\":null,\"\"@type\":\"{\"com.alibaba.fastjson.parser.JSONScanner\":false,\"com.google.common.collect.LinkedListMultimap\":99,\"\"@type\":\"can not cast to char, value : \":{\"x\":false},\"Ljava/lan\":[],\"x\":null}\":true,\"illegal jCon.\":-99,\"illegal state. \":null,\"com.alibaba.fastjson.util.IdentityHashMap$Entry\":[],\"b\":\"a string\",\"yyyy\u5E74M\u6708d\u65E5 HH:mm:ss\":{}}", 10);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      long[] longArray0 = new long[6];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"MiscCodec not support \":3392903,\"unclosed str, \":-99}");
      jSONScanner0.nextToken(2529);
      long[] longArray0 = new long[8];
      int int0 = jSONScanner0.seekObjectToField(longArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"(S)Ljava/\":200,\"{\"fruit\":\":false}");
      jSONScanner0.nextToken(0);
      long[] longArray0 = new long[2];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 20, line 1, column 21{\"(S)Ljava/\":200,\"{\"fruit\":\":false}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\", field : \":5347909877633654828,\"\":\"a string\",\", column \":99,\"unclosed str\":[]}");
      jSONScanner0.nextToken(0);
      long[] longArray0 = new long[8];
      jSONScanner0.seekObjectToField(longArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"size\":99,\"parseInt error : \":\"$VALUES\",\"illegal json.\":\"a string\",\"illegal state. \":true,\"com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec\":{\", method : \":99},\"index must > 0, but \":-99}", 2529);
      jSONScanner0.nextToken(91);
      long[] longArray0 = new long[2];
      longArray0[0] = 5614464919154503228L;
      int int0 = jSONScanner0.seekObjectToField(longArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"6@]Gka0");
      jSONScanner0.nextToken(97);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.util.IOUtils\":100.0,\"parseInt error : \":{\"-99\":\"a string\"},\"xx\":-99}");
      jSONScanner0.nextToken(2529);
      long[] longArray0 = new long[0];
      int int0 = jSONScanner0.seekObjectToField(longArray0);
      assertEquals(91, jSONScanner0.pos());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ", 2529);
      jSONScanner0.nextToken(2529);
      long[] longArray0 = new long[9];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0000-00-00T00:00:00.000", 26326);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\", line \":[],\"parseInt error : \":{\"\"@type\":\"\"@te\":\"\":null},\"illegal state. \":true,\"com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec\":{\"\":[],\", column \":99,\"illegal str, \":{}}}", 18);
      jSONScanner0.nextToken(0);
      int int0 = jSONScanner0.seekObjectToField(1398L, true);
      assertEquals(14, jSONScanner0.token());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.util.IeUtils\":R00.0}");
      jSONScanner0.nextToken(0);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) (-1), false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"6@]Gka0A+\":{},\":false,\"c\":{}}");
      jSONScanner0.nextToken(0);
      int int0 = jSONScanner0.seekObjectToField(99L, true);
      assertEquals(12, jSONScanner0.token());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.parser.JSONScanner\":false,\"com.google.common.collect.LinkedListMultimap\":99,\"\"@type\":\"can not cast to char, value : \":{\"x\":false},\"Ljava/lan\":[],\"x\":null}");
      jSONScanner0.nextToken(2529);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 12, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 101, line 1, column 102{\"com.alibaba.fastjson.parser.JSONScanner\":false,\"com.google.common.collect.LinkedListMultimap\":99,\"\"@type\":\"can not cast to char, value : \":{\"x\":false},\"Ljava/lan\":[],\"x\":null}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal state. \":null}");
      jSONScanner0.nextToken(0);
      int int0 = jSONScanner0.seekObjectToField(1665182880425912667L, false);
      assertEquals(24, jSONScanner0.pos());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"parseInt error : \":99,\"illegal json.\":\"a string\",\"illegal state. \":tue,\"com.albaba.fasjson.parser.deserializer.Jdk8DateCodec:{},\"index must > 0, but \":-99}", 2529);
      jSONScanner0.nextToken(91);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 2529, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\", line \":\"parseInt error : \"}");
      jSONScanner0.nextToken(0);
      jSONScanner0.seekObjectToField((long) (-1), true);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"[boolean\":\"Apple\",\"size\":\"a string\",\"color\":\"\"@type\":\"{\"fruit\":\"Apple\",\"size\":\"a string\",\"\"@type\":\"\":\"Red\",\"illegal json.\":\"a string\",\"illegal state. \":null,\"com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec\":-99}\",\"illegal json.\":[],\"illegal state. \":null,\"com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec\":{}}");
      jSONScanner0.nextToken(0);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(99L, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"java/util/List\":10.0}", 2533);
      jSONScanner0.nextToken((-3789));
      int int0 = jSONScanner0.seekObjectToField(8529140977849157651L, false);
      assertEquals(20, jSONScanner0.token());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\", field : \":5347909877633654828}");
      jSONScanner0.nextToken(0);
      int int0 = jSONScanner0.seekObjectToField(8188005057204060930L, true);
      assertEquals(20, jSONScanner0.token());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"v^^8eu\":7,\"xxxx\":null,\"\"@type\":\"{\"com.alibaba.fastjson.parser.JSONScanner\":false,\"com.google.common.collect.LinkedListMultimap\":99,\"\"@type\":\"can not cast to char, value : \":{\"x\":false},\"Ljava/lan\":[],\"x\":null}\":true,\"illegal jCon.\":-99,\"illegal state. \":null,\"com.alibaba.fastjson.util.IdentityHashMap$Entry\":[],\"b\":\"a string\",\"yyyy\u5E74M\u6708d\u65E5 HH:mm:ss\":{}}", 10);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 10, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 27, line 1, column 28{\"v^^8eu\":7,\"xxxx\":null,\"\"@type\":\"{\"com.alibaba.fastjson.parser.JSONScanner\":false,\"com.google.common.collect.LinkedListMultimap\":99,\"\"@type\":\"can not cast to char, value : \":{\"x\":false},\"Ljava/lan\":[],\"x\":null}\":true,\"illegal jCon.\":-99,\"illegal state. \":null,\"com.alibaba.fastjson.util.IdentityHashMap$Entry\":[],\"b\":\"a string\",\"yyyy\u5E74M\u6708d\u65E5 HH:mm:ss\":{}}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\", field : \":5347909877633654828,\"\":{},\", column \":99,\"unclosed str\":[]}");
      jSONScanner0.nextToken(0);
      jSONScanner0.seekObjectToField((long) 0, false);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"(S)Ljava/\":200,\"{\"fruit\":\":false}");
      jSONScanner0.nextToken(125);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 20, line 1, column 21{\"(S)Ljava/\":200,\"{\"fruit\":\":false}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed str, \":\"a string\",\"\":99}");
      jSONScanner0.nextToken(0);
      int int0 = jSONScanner0.seekObjectToField((-3750763034362895579L), true);
      assertEquals(32, jSONScanner0.pos());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed str, \":-99,\"\"@type\":\"{\"clazz is null\":-99,\"com.alibaba.fastjson.parser.JSONScanner\":{}}\":null}");
      jSONScanner0.nextToken(0);
      int int0 = jSONScanner0.seekObjectToField((-3750763034362895579L), false);
      assertEquals(12, jSONScanner0.token());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\", line \":[],\"parseInt error : \":{\"\"@type\":\"\"@te\":\"\":null},\"illegal state. \":true,\"com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec\":{\"\":[],\", column \":99,\"illegal str, \":{}}}", 18);
      jSONScanner0.nextToken(63);
      int int0 = jSONScanner0.seekObjectToField((-4364643377068746929L), false);
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"6@]Gka0", 655);
      jSONScanner0.nextToken(0);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 1, line 1, column 2{\"6@]Gka0
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"java/util/List\":10.0", 2533);
      jSONScanner0.nextToken((-3789));
      int int0 = jSONScanner0.seekObjectToField((long) 'l', false);
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.util.IOUtils\":100.0,\"syntax error\":true}");
      jSONScanner0.nextToken((-1035));
      int int0 = jSONScanner0.seekObjectToField(2830L, false);
      assertEquals(20, jSONScanner0.token());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", line ");
      jSONScanner0.nextToken(108);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(1665182880425912667L, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".2ap$>\"{*a{XE");
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unknown
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[]");
      jSONScanner0.nextToken((-1110));
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.seekObjectToField((-1L), false);
      assertEquals(20, jSONScanner0.token());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer\":{}}");
      jSONScanner0.nextToken((int) '1');
      long[] longArray0 = new long[8];
      jSONScanner0.seekObjectToField(longArray0);
      jSONScanner0.seekObjectToField(5614464919154503228L, false);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanDate('-');
      int int0 = jSONScanner0.seekObjectToField((-3623L), false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[[[{\"\"@type\":\".2ap$>\"{*a{XE\":[]}]],null]");
      jSONScanner0.nextToken(2522);
      jSONScanner0.nextToken(2522);
      boolean boolean0 = jSONScanner0.seekArrayToItem(2522);
      assertEquals(1, jSONScanner0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[]");
      jSONScanner0.nextToken(0);
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(66);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json.
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{},null,\"a string\"]", 2529);
      jSONScanner0.nextToken(91);
      boolean boolean0 = jSONScanner0.seekArrayToItem(91);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[\"a string\",null,false]", 2529);
      jSONScanner0.nextToken(91);
      boolean boolean0 = jSONScanner0.seekArrayToItem(91);
      assertTrue(jSONScanner0.isEOF());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[-99]");
      jSONScanner0.nextToken(6);
      boolean boolean0 = jSONScanner0.seekArrayToItem(0);
      assertEquals(2, jSONScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 36);
      assertTrue(jSONScanner0.isEOF());
      
      jSONScanner0.nextToken(36);
      boolean boolean0 = jSONScanner0.seekArrayToItem(0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("CRn09yqI@trrC", (-1893));
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem((-1893));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -1893
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\"db:\"");
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(89);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string");
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.util.GenericArrayTypeImpl");
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Ce");
      jSONScanner0.bp = 45;
      jSONScanner0.skipArray();
      assertEquals('C', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"v^^8eu\":7,\"xxxx\":null,\"\"@type\":\"{\"com.alibaba.fastjson.parser.JSONScanner\":false,\"com.google.common.collect.LinkedListMultimap\":99,\"\"@type\":\"can not cast to char, value : \":{\"x\":false},\"Ljava/lan\":[],\"x\":null}\":true,\"illegal json.\":-99,\"illegal state. \":null,\"com.alibaba.fastjson.util.IdentityHashMap$Entry\":[],\"b\":\"a string\",\"yyyy\u5E74M\u6708d\u65E5 HH:mm:ss\":{}}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"v^^8eu\":7,\"xxxx\":null,\"\"@type\":\"{\"com.alibaba.fastjson.parser.JSONScanner\":false,\"com.google.common.collect.LinkedListMultimap\":99,\"\"@type\":\"can not cast to char, value : \":{\"x\":false},\"Ljava/lan\":[],\"x\":null}\":true,\"illegal json.\":-99,\"illegal state. \":null,\"com.alibaba.fastjson.util.IdentityHashMap$Entry\":[],\"b\":\"a string\",\"yyyy\u5E74M\u6708d\u65E5 HH:mm:ss\":{}}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"(S)Ljava/\":200,\"{\"fruit\":\":false}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanDate('-');
      jSONScanner0.skipObject(true);
      assertEquals(4, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" m,fd=F@");
      jSONScanner0.next();
      jSONScanner0.skipObject(false);
      assertEquals('m', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{}]");
      jSONScanner0.nextToken(2529);
      jSONScanner0.skipArray(true);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"(S)Ljava/\":200,\"{\"fruit\":\":false}");
      jSONScanner0.next();
      jSONScanner0.skipObject(false);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("zk}6{U#pc+8.v");
      jSONScanner0.skipObject(false);
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"v^^8eu\":7,\"xxxx\":null,\"\"@type\":\"{\"com.alibaba.fastjson.parser.JSONScanner\":false,\"com.google.common.collect.LinkedListMultimap\":99,\"\"@type\":\"can not cast to char, value : \":{\"x\":false},\"Ljava/lan\":[],\"x\":null}\":true,\"illegal json.\":-99,\"illegal state. \":null,\"com.alibaba.fastjson.util.IdentityHashMap$Entry\":[],\"b\":\"a string\",\"yyyy\u5E74M\u6708d\u65E5 HH:mm:ss\":{}}", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"v^^8eu\":7,\"xxxx\":null,\"\"@type\":\"{\"com.alibaba.fastjson.parser.JSONScanner\":false,\"com.google.common.collect.LinkedListMultimap\":99,\"\"@type\":\"can not cast to char, value : \":{\"x\":false},\"Ljava/lan\":[],\"x\":null}\":true,\"illegal json.\":-99,\"illegal state. \":null,\"com.alibaba.fastjson.util.IdentityHashMap$Entry\":[],\"b\":\"a string\",\"yyyy\u5E74M\u6708d\u65E5 HH:mm:ss\":{}}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":nll");
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals('n', jSONScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[\"a string\",-99]");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray((char[]) null, 94, (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null]");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0.matchStat, jSONScanner0, parserConfig0);
      jSONScanner0.scanFieldStringArray((char[]) null, 697, parserConfig0.symbolTable);
      assertEquals(14, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,null]");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      jSONScanner0.scanFieldStringArray((char[]) null, 0, parserConfig0.symbolTable);
      assertEquals('[', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"");
      jSONScanner0.scanFieldStringArray(charArray0, (int) '\u0000', (SymbolTable) null);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string");
      ParserConfig parserConfig0 = new ParserConfig();
      jSONScanner0.scanFieldStringArray((char[]) null, 14, parserConfig0.symbolTable);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" m,fd=F@", 7);
      char[] charArray0 = new char[0];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      jSONScanner0.scanFieldStringArray(charArray0, 87, parserConfig0.symbolTable);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":nll");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldStringArray(charArray0, (-1), (SymbolTable) null);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Bn/AnIdm@<,5=}O<R");
      jSONScanner0.nextToken(0);
      jSONScanner0.scanDate('5');
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec\":99,\"size\":[-99],\"$VALUES\":\"\"@type\":\"{\"v^^8eu\":7,\"xxxx\":null,\"\"@type\":\"{\"com.alibaba.fastjson.parser.JSONScanner\":false,\"com.google.common.collect.LinkedListMultimap\":99,\"\"@type\":\"can not cast to char, value : \":{\"x\":false},\"Ljava/lan\":[],\"x\":null}\":true,\"illegal json.\":-99,\"illegal state. \":null,\"com.alibaba.fastjson.util.IdentityHashMap$Entry\":[],\"b\":\"a string\",\"yyyy\u5E74M\u6708d\u65E5 HH:mm:ss\":{}}\"}");
      jSONScanner0.nextToken(65279);
      long[] longArray0 = new long[5];
      longArray0[2] = 5614464919154503228L;
      jSONScanner0.seekObjectToField(longArray0);
      jSONScanner0.scanDate('M');
      assertEquals(4, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,\"a string\",-99]");
      jSONScanner0.nextToken(0);
      jSONScanner0.scanDate('s');
      assertEquals(14, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("309p;Cvdi4");
      jSONScanner0.scanDate('M');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("s-,jr", 108);
      jSONScanner0.nextToken((int) (byte) (-37));
      jSONScanner0.scanDate('0');
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-N", 105);
      jSONScanner0.scanDate('x');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string");
      // Undeclared exception!
      try { 
        jSONScanner0.scanDate('\'');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      long long0 = jSONScanner0.scanLong('9');
      assertEquals(0L, long0);
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Bn/AnIdm@<,5=}O<R");
      jSONScanner0.nextToken(0);
      jSONScanner0.scanLong('m');
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"6@]Gka0A+\":{},\":false,\"c\":{}}");
      jSONScanner0.nextToken(0);
      long long0 = jSONScanner0.scanLong('6');
      assertEquals(12, jSONScanner0.token());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99Y g:hS");
      long long0 = jSONScanner0.scanLong('i');
      assertEquals(99L, long0);
      assertEquals('9', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-", 0);
      jSONScanner0.scanLong('n');
      assertFalse(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1");
      double double0 = jSONScanner0.scanDouble('');
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null]");
      jSONScanner0.nextToken(0);
      double double0 = jSONScanner0.scanDouble('g');
      assertEquals(5, jSONScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 4273);
      double double0 = jSONScanner0.scanDouble('g');
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Bn/AnIdm@<,5=}O<R");
      jSONScanner0.nextToken(0);
      double double0 = jSONScanner0.scanDouble('\\');
      assertEquals(1, jSONScanner0.token());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"6@]Gka0A+\":{},\":false,\"c\":{}}");
      jSONScanner0.nextToken(97);
      jSONScanner0.scanDouble('R');
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0000-00-00T00:00:00.000", 26326);
      double double0 = jSONScanner0.scanDouble('l');
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[-99]");
      jSONScanner0.nextToken(6);
      double double0 = jSONScanner0.scanDouble('1');
      assertEquals(14, jSONScanner0.token());
      assertEquals((-99.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":nll");
      jSONScanner0.nextToken(706);
      jSONScanner0.scanInt('h');
      assertEquals(17, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      int int0 = jSONScanner0.scanInt('\'');
      assertEquals(0, int0);
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"6@]Gka0A+\":{},\":false,\"c\":{}}");
      jSONScanner0.nextToken(0);
      int int0 = jSONScanner0.scanInt('6');
      assertEquals(12, jSONScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3QQP1tjKJ,s7<^", (-123008));
      int int0 = jSONScanner0.scanInt('O');
      assertEquals(3, int0);
      assertEquals('3', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      jSONScanner0.nextToken(0);
      int int0 = jSONScanner0.scanInt('M');
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      int int0 = jSONScanner0.scanInt('g');
      assertEquals((-99), int0);
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str");
      jSONScanner0.nextToken((-942));
      int int0 = jSONScanner0.scanInt('I');
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0000-0|-0", (-93));
      int int0 = jSONScanner0.scanInt('(');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"\"@type\":\"\",\"size\":\"a string\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":-99}", (-3853));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals(12, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner("tb`'PZ$ZS");
      boolean boolean0 = jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec\":99,\"size\":[-99],\"$VALUES\":\"\"@type\":\"{\"v^^8eu\":7,\"xxxx\":null,\"\"@type\":\"{\"com.alibaba.fastjson.parser.JSONScanner\":false,\"com.google.common.collect.LinkedListMultimap\":99,\"\"@type\":\"can not cast to char, value : \":{\"x\":false},\"Ljava/lan\":[],\"x\":null}\":true,\"illegal json.\":-99,\"illegal state. \":null,\"com.alibaba.fastjson.util.IdentityHashMap$Entry\":[],\"b\":\"a string\",\"yyyy\u5E74M\u6708d\u65E5 HH:mm:ss\":{}}\"}");
      jSONScanner0.nextToken(65279);
      long[] longArray0 = new long[5];
      longArray0[2] = 5614464919154503228L;
      jSONScanner0.seekObjectToField(longArray0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.serializer.JSONSerializableSerializer");
      char[] charArray0 = new char[10];
      long long0 = jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"");
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(" m,fd=F@");
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#Xh\u0007^fT]i-@G'");
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"(S)Ljava/\":200,\"{\"fruit\":\":false}");
      char[] charArray0 = new char[0];
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#Xh\u0007^fT]i-@G'");
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"clazz is null\":-99,\"com.alibaba.fastjson.parser.JSONScanner\":{\"com.alibaba.fastjson.serializer.Labels\":-99}}", 138);
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0000-00-00T00:00:00.000", 26367);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7ge3<??=N+");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals('7', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(" m,fd=F@");
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-", 967);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals(4, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"v^^8eu\":7,\"xxxx\":null,\"\"@type\":\"{\"com.alibaba.fastjson.parser.JSONScanner\":false,\"com.google.common.collect.LinkedListMultimap\":99,\"\"@type\":\"can not cast to char, value : \":{\"x\":false},\"Ljava/lan\":[],\"x\":null}\":true,\"illegal json.\":-99,\"illegal state. \":null,\"com.alibaba.fastjson.util.IdentityHashMap$Entry\":[],\"b\":\"a string\",\"yyyy\u5E74M\u6708d\u65E5 HH:mm:ss\":{}}", 122);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONScanner jSONScanner0 = new JSONScanner(".2>\"{*a{XE");
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Bn/AnIdm@<,5=}O<R");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"\"@type\":\"\"@type\":\"{\"fruit\":\"\"@type\":\"\",\"size\":\"a string\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":-99}");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" m,fd=F@");
      char[] charArray0 = new char[2];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("illegal state. ", 432);
      jSONScanner0.scanFieldString(charArray0);
      assertEquals('i', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#Xh\u0007^fT]i-@G'");
      jSONScanner0.skipArray(true);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\", line \":[],\"parseInt error : \":{\"\"@type\":\"\"@te\":\"\":null},\"illegal state. \":true,\"com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec\":{\"\":[],\", column \":99,\"illegal str, \":{}}}", 18);
      jSONScanner0.nextToken(0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7xl]");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanDate('-');
      boolean boolean0 = jSONScanner0.isEOF();
      assertEquals(4, jSONScanner0.matchStat);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('1', '1', '1', '1', '1', '1', (-1788), (-1788));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('1', '1', '1', '1', '1', '1', '1', '1');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('1', '1', '1', '1', '0', '0', '0', '0');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('0', '0', '0', '0', 'l', '0', (-19), 52);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('0', '0', '0', 'a', 'a', '0', 57, (-3604));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('5', '5', '5', '(', '(', 'z', 54, 3445);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('5', '5', ')', ')', '>', '>', (-74), (-74));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('3', '*', 'D', 'I', 'D', '*', 46, (-3775));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('U', 'R', 'R', 'U', 'd', 'd', 11, 11);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("s,jr", 108);
      TimeZone timeZone0 = jSONScanner0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONScanner0.setTimeZone('J', 'J', 'J', 'J', 'J');
      jSONScanner0.setTimeZone('J', 'J', 'E');
      assertEquals('s', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#Xh\u0007^wfT]i-@G'");
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('-', '\"', '-', 'y', 'n');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#Xh\u0007^fT]i-@G'");
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('#', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.serializer.JSONSerializableferializer", 30);
      jSONScanner0.nextToken(0);
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('o', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java/util/ArrayList");
      jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals('j', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,-99,null,\"a string\"]");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('[', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0000-0|-0");
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('0', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(<GOZ`.Hp6u\"A]<Ac");
      jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals('(', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/6sn}4vM@T|7h71U", 0);
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('/', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.parser.JSONScanner\":false,\"com.google.common.collect.LinkedListMultimap\":99,\"\"@type\":\"can not cast to char, value : \":{\"x\":false},\"Ljava/lan\":[],\"x\":null}");
      jSONScanner0.nextToken(0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Bn/AnIdm@<,5=}O<R");
      assertEquals('B', jSONScanner0.getCurrent());
      
      jSONScanner0.scanNumber();
      jSONScanner0.numberString();
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".T~UncxE<?_s");
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(8, 8);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("F!{x", 97);
      String string0 = jSONScanner0.stringVal();
      assertEquals('F', jSONScanner0.getCurrent());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"\"@type\":\"\"@type\":\"{\"fruit\":\"\"@type\":\"\",\"size\":\"a string\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":-99}");
      jSONScanner0.hasSpecial = true;
      String string0 = jSONScanner0.stringVal();
      assertEquals("", string0);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"\"@type\":\"\"@type\":\"{\"fruit\":\"\"@type\":\"\",\"size\":\"a string\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":-99}");
      jSONScanner0.hasSpecial = true;
      jSONScanner0.bytesValue();
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1);
      int int0 = jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" m,fd=F@", 7);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(7, 26, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" m,fd=F@", 7);
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("|y:$aUNy:qn{QQxbI");
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('F', '[', '[');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-65), 61);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("zk}6{U#pc+8.v");
      // Undeclared exception!
      try { 
        jSONScanner0.setTime(')', '.', ')', '.', ')', '.');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("moduleVersion", (-3820));
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(339, charArray0, 1, 3822);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%vQU,{jCX6R@P~:;");
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol((-889), (-889), (-889), (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"");
      jSONScanner0.scanDate('v');
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7xl]");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 17xl]
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" m,fd=F@", 7);
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals(' ', jSONScanner0.getCurrent());
  }
}
