/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 22:29:34 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Desktop;
import java.awt.Dialog;
import java.awt.TrayIcon;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.time.Month;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.annotation.Resource;
import javax.jws.WebParam;
import javax.swing.LayoutStyle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("%.WN<");
      assertEquals("%.WN<", object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("2423.125732279");
      assertEquals(2423.125732279, number0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [\"] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("%m)Opa<R/#1LI{JoA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("~x");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("4", false);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(outputStreamWriter0);
      JSONObject.indent(bufferedWriter0, 128);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"A JSONArray text must start with '['\":\"JSONObject[\",\"y\":7,\"z\":\"a string\",\"a\":[[]],\"b\":[],\"xx\":[\"a string\"]}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(6, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0[;nrg");
      assertEquals("0[;nrg", object0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, Character.UnicodeScript> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, Character.UnicodeScript>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.increment("\\");
      try { 
        jSONObject1.getBigInteger("\\");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("[]", 0L);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "[]";
      stringArray0[2] = "[]";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      String[] stringArray0 = JSONObject.getNames((Object) locale_FilteringMode0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0, stringArray0);
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Double, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Double, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.write((Writer) charArrayWriter0);
      assertEquals("{}", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(21);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("0.5624323491379407");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("1.7405391843498603");
      assertEquals((short)1, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-2059.921834671");
      assertEquals((byte) (-11), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<ByteArrayInputStream, Character> hashMap0 = new HashMap<ByteArrayInputStream, Character>();
      JSONObject jSONObject1 = jSONObject0.put("false", (Map<?, ?>) hashMap0);
      Object object0 = jSONObject1.remove("false");
      assertNotSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<OutputStreamWriter> linkedList0 = new LinkedList<OutputStreamWriter>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONPointer jSONPointer0 = new JSONPointer("/MV.");
      jSONObject0.query(jSONPointer0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Float float0 = Float.valueOf(430.75388F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONPointer jSONPointer0 = new JSONPointer("");
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query(jSONPointer0);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<ObjectOutputStream, Character> hashMap0 = new HashMap<ObjectOutputStream, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = jSONObject0.optString("KT!-?9kCGY DCO\u0004Td", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("*8", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", false);
      String string0 = jSONObject1.optString("");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONPointer jSONPointer0 = new JSONPointer("/zUvRu*[K#/d");
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Float, Locale.FilteringMode> hashMap0 = new HashMap<Float, Locale.FilteringMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery("");
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Number number0 = jSONObject0.optNumber("r9SM1&',%L1Dt4[g", (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      Number number0 = jSONObject0.optNumber("0", (Number) bigDecimal0);
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<TrayIcon.MessageType, WebParam.Mode> hashMap0 = new HashMap<TrayIcon.MessageType, WebParam.Mode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal(128);
      Number number0 = jSONObject0.optNumber("Unable to read the next character from the stream", (Number) bigDecimal0);
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"getfloatValue\",\"color\":false,\"value\":true,\"value2\":false,\"number\":[]}");
      JSONObject jSONObject1 = jSONObject0.increment("{\"fruit\":\"Apple\",\"size\":\"getfloatValue\",\"color\":false,\"value\":true,\"value2\":false,\"number\":[]}");
      long long0 = jSONObject1.optLong("{\"fruit\":\"Apple\",\"size\":\"getfloatValue\",\"color\":false,\"value\":true,\"value2\":false,\"number\":[]}");
      assertEquals(7, jSONObject0.length());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Double, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Double, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("i", (-539));
      long long0 = jSONObject1.optLong("i");
      assertEquals((-539L), long0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      WebParam.Mode webParam_Mode0 = WebParam.Mode.OUT;
      HashMap<TrayIcon.MessageType, WebParam.Mode> hashMap0 = new HashMap<TrayIcon.MessageType, WebParam.Mode>();
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.NONE;
      hashMap0.put(trayIcon_MessageType0, webParam_Mode0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("yJzM0C '5ab", (Map<?, ?>) hashMap0);
      jSONObject0.optJSONObject("yJzM0C '5ab");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      int int0 = jSONObject0.optInt(">,D*S^`V%WY&", 0);
      assertEquals(0, int0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      double double0 = jSONObject0.optDouble("A JSONArray text must start with '['", (double) 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("mJq", (double) (-770L));
      assertEquals((-770.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"org.json.JSONTokener\",\"size\":\"getfloatValue\",\"color\":false,\"value\":false,\"number\":[false],\"x\":true}");
      jSONObject0.put("{\"fruit\":\"org.json.JSONTokener\",\"size\":\"getfloatValue\",\"color\":false,\"value\":false,\"number\":[false],\"x\":true}", 1378.09838292);
      double double0 = jSONObject0.optDouble("{\"fruit\":\"org.json.JSONTokener\",\"size\":\"getfloatValue\",\"color\":false,\"value\":false,\"number\":[false],\"x\":true}");
      assertEquals(7, jSONObject0.length());
      assertEquals(1378.09838292, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("_$e?Et;Im5pt=p", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<Double, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Double, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = jSONObject0.optBigInteger("N.G", (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Float float0 = Float.valueOf(430.75388F);
      JSONObject jSONObject0 = new JSONObject(float0);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-3);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject0.optBigInteger("", bigInteger0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Double double0 = new Double(644.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.put("QOAvF/EHRl", 644.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject1.optBigInteger("QOAvF/EHRl", bigInteger0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal("\t", (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"getfloatValue\",\"color\":false,\"value\":true,\"value2\":false,\"number\":[]}");
      BigDecimal bigDecimal0 = BigDecimal.valueOf((-99L));
      jSONObject0.optBigDecimal("tri", bigDecimal0);
      assertEquals(6, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal(1180);
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("]", bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Float float0 = Float.valueOf(430.75388F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "java.io.StringWriter@0000000003");
      boolean boolean0 = jSONObject1.isNull("");
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("KT!-?9kCGY DCO\u0004Td");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      jSONObject0.put("java.io.StringWriter@0000000003", 0.0F);
      jSONObject0.getInt("java.io.StringWriter@0000000003");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<ByteArrayInputStream, Character> hashMap0 = new HashMap<ByteArrayInputStream, Character>();
      JSONObject jSONObject1 = jSONObject0.put("false", (Map<?, ?>) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("2!C!oc|", 2119);
      MockFileWriter mockFileWriter0 = new MockFileWriter("getbyteValue", false);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);
      // Undeclared exception!
      JSONObject.writeValue(mockPrintWriter0, jSONObject2, 2119, 2475);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Character character0 = new Character('u');
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, character0, 136, 136);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":99,\"a JSON pointer should start with '/' or '#/'\":7,\"org.json.JSONArray\":-99,\"a\":-99,\"b\":-99}");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      jSONObject0.write((Writer) stringWriter0, 8448, 8448);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 2089, 2089);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject jSONObject0 = new JSONObject((Object) "' and instead saw '");
      try { 
        jSONObject0.write((Writer) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter(":L`{");
      mockFileWriter0.close();
      try { 
        JSONObject.quote("/", (Writer) mockFileWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 2525);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      try { 
        jSONObject0.put("j~]^k%t,gW(R1@", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-703.68F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Double double0 = new Double(627.0843432377081);
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 61);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.indent(pipedWriter0, (byte)86);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("p,J1*:g>}7fd");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"hello\",\"Unable to write JSONObject value for key: \":7,\"z\":true,\"b\":\"a string\",\"xx\":99}");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("iV+4nJoKdA", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name iV+4nJoKdA, locale zh
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("getDeclaringClass", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Float float0 = Float.valueOf(430.75388F);
      JSONObject jSONObject0 = new JSONObject(float0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1800);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      jSONObject0.write((Writer) mockPrintWriter0, 24, 98);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "' and instead saw '");
      MockFileWriter mockFileWriter0 = new MockFileWriter("#-{h", false);
      try { 
        jSONObject0.write((Writer) mockFileWriter0, 1913, 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockFileWriter mockFileWriter0 = new MockFileWriter("ava", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0, 0, 46);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "[;nrg");
      String[] stringArray0 = new String[4];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject2 = jSONObject1.put("", (Object) stringWriter0);
      jSONObject2.write((Writer) stringWriter0, (-998), 0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("isI", false);
      jSONObject0.write((Writer) mockFileWriter0, 128, 58);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<OutputStreamWriter> linkedList0 = new LinkedList<OutputStreamWriter>();
      MockFile mockFile0 = new MockFile("@hvy-X[");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      linkedList0.add((OutputStreamWriter) mockFileWriter0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Object object0 = JSONObject.wrap(pipedWriter0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Object object0 = JSONObject.wrap(boolean0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Object object0 = JSONObject.wrap(byte0);
      assertEquals((byte)0, object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object object0 = JSONObject.wrap("{\"fruit\":{},\"size\":\".\",\"color\":false,\"gettoString\":false,\",:]}/\"[{;=#\":[-99],\"x\":null,\"xx\":-99}");
      assertEquals("{\"fruit\":{},\"size\":\".\",\"color\":false,\"gettoString\":false,\",:]}/\"[{;=#\":[-99],\"x\":null,\"xx\":-99}", object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.ERROR;
      Object object0 = JSONObject.wrap(trayIcon_MessageType0);
      assertEquals(TrayIcon.MessageType.ERROR, object0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.testValidity(stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1643, (Object) null);
      assertEquals(1644, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("644");
      assertEquals(644, object0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("W c");
      assertEquals("W c", object0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("null");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("false");
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.quote("{\"ishashCode\":\"hello\",\"index %d is out of bounds - the array has %d elements\":7,\"z\":null,\"a\":[-99],\"b\":{\"ishashCode\":false}}", (Writer) charArrayWriter0);
      assertEquals(140, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.quote("KT!-?9kCGY DCO\u0004Td", (Writer) charArrayWriter0);
      assertEquals(24, charArrayWriter0.size());
      assertEquals("\"KT!-?9kCGY DCO\\u0004Td\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.quote("", (Writer) charArrayWriter0);
      assertEquals(2, charArrayWriter0.size());
      assertEquals("\"\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter(":L`{");
      Writer writer0 = JSONObject.quote("/", (Writer) mockFileWriter0);
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote((String) null, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] not a string.\":null,\"z\":\"a string\",\"shortValueExact\":[\"a string\"],\"{\":{\"x\":[]},\"intValue\":99,\"x\":true}");
      JSONObject jSONObject1 = jSONObject0.putOnce("{\"] not a string.\":null,\"z\":\"a string\",\"shortValueExact\":[\"a string\"],\"{\":{\"x\":[]},\"intValue\":99,\"x\":true}", (Object) null);
      assertEquals(6, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(12);
      MockFileWriter mockFileWriter0 = new MockFileWriter("toString", true);
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, mockFileWriter0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Double, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Double, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("4]", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Double double0 = new Double(644.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("@\u0002hk", "Zo4T");
      assertEquals("Zo4T", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"y\":null,\"z\":true,\"shortValueExact\":[],\"{\":{\"x\":[]},\"xx\":99,\"x\":true}");
      BigDecimal bigDecimal0 = new BigDecimal((-3005));
      jSONObject0.optNumber("{\"y\":null,\"z\":true,\"shortValueExact\":[],\"{\":{\"x\":[]},\"xx\":99,\"x\":true}", (Number) bigDecimal0);
      assertEquals(6, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("?rXJ^?W`(PW*TPfT", (-770L));
      assertEquals((-770L), long0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("false", (-1));
      int int0 = jSONObject1.optInt("false", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Float float0 = Float.valueOf(430.75388F);
      JSONObject jSONObject0 = new JSONObject(float0);
      float float1 = jSONObject0.optFloat("java.io.StringWriter@0000000003", 430.75388F);
      assertEquals(430.75388F, float1, 0.01F);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("2091", 2091.0);
      assertEquals(2091.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("%.WN<", jSONObject0);
      boolean boolean0 = jSONObject1.optBoolean("%.WN<", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("tri", 2602.087F);
      LayoutStyle.ComponentPlacement layoutStyle_ComponentPlacement0 = LayoutStyle.ComponentPlacement.RELATED;
      Class<LayoutStyle.ComponentPlacement> class0 = LayoutStyle.ComponentPlacement.class;
      LayoutStyle.ComponentPlacement layoutStyle_ComponentPlacement1 = jSONObject0.optEnum(class0, "tri", layoutStyle_ComponentPlacement0);
      assertEquals(LayoutStyle.ComponentPlacement.RELATED, layoutStyle_ComponentPlacement1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      Class<Thread.State> class0 = Thread.State.class;
      Thread.State thread_State0 = Thread.State.BLOCKED;
      jSONObject0.optEnum(class0, "F -96M", thread_State0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      Object object1 = jSONObject0.opt("%s is not an array index");
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<Double, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Double, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      
      jSONObject0.put("{\".\":-1.0}", 0L);
      boolean boolean0 = jSONObject0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("*/A[;\"", (Map<?, ?>) null);
      Object object0 = jSONObject1.get("*/A[;\"");
      assertNotSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "' and instead saw '");
      try { 
        jSONObject0.get("' and instead saw '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000023] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Resource.AuthenticationType, InputStreamReader> hashMap0 = new HashMap<Resource.AuthenticationType, InputStreamReader>();
      Resource.AuthenticationType resource_AuthenticationType0 = Resource.AuthenticationType.CONTAINER;
      hashMap0.put(resource_AuthenticationType0, (InputStreamReader) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"y\":null,\"z\":true,\"shortValueExact\":[],\"{\":{\"x\":[]},\"xx\":99,\"x\":true}");
      int int0 = jSONObject0.length();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("w+RlHN\u0001}5<E");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":99,\"a JSON pointer should start with '/' or '#/'\":{},\"org.json.JSONArray\":[],\"intValue\":null,\"Unable to write JSONArray value at index: 0\":-99}");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(5, map0.size());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Float float0 = Float.valueOf(430.75388F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(123);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      jSONObject0.putOpt("] is not an enum of type ", set0);
      jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"toUpperCase\":99,\"y\":7,\"javax.\":\"a string\",\"a\":[],\"Null pointer\":{},\"Value out of sequence.\":[],\"le\":{\"x\":false}}");
      // Undeclared exception!
      jSONObject0.toString(1814);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"getfloatValue\",\"\":false,\"value\":true,\"value2\":null,\"number\":[]}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}y1IWEm:>)=djb");
      jSONObject0.write((Writer) mockPrintWriter0, (-1454008519), (-32646308));
      assertEquals(6, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.writeValue(stringWriter0, (Object) null, 1, 1);
      assertEquals("null", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      JSONArray jSONArray0 = (JSONArray)JSONObject.wrap(set0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Object object0 = JSONObject.wrap(bigDecimal0);
      assertSame(bigDecimal0, object0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = (BigInteger)JSONObject.wrap(bigInteger0);
      assertEquals((short)1, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("2682.1650602860627");
      Object object1 = JSONObject.wrap(object0);
      assertEquals(2682.1650602860627, object1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Float float0 = Float.valueOf(1031.34F);
      Object object0 = JSONObject.wrap(float0);
      assertEquals(1031.34F, object0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Long long0 = Long.valueOf(2451L);
      Object object0 = JSONObject.wrap(long0);
      assertEquals(2451L, object0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-99");
      Object object0 = JSONObject.wrap(number0);
      assertEquals((-99), object0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Short short0 = new Short((short)4221);
      Object object0 = JSONObject.wrap(short0);
      assertEquals((short)4221, object0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Character character0 = Character.valueOf('%');
      Object object0 = JSONObject.wrap(character0);
      assertEquals('%', object0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = (JSONArray)JSONObject.wrap(jSONArray0);
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"hello\",\"istoString\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":[\"a string\"],\"xxx\":null}");
      jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(7, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Float float0 = new Float(Float.NaN);
      try { 
        JSONObject.writeValue(stringWriter0, float0, 2164, 2164);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<TrayIcon.MessageType, WebParam.Mode> hashMap0 = new HashMap<TrayIcon.MessageType, WebParam.Mode>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      try { 
        jSONObject0.put("getDeclaringClass", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0000");
      assertEquals("0000", object0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-2099.396");
      assertEquals((-2099.396), object0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"Null pointer\":{\"Unable to write JSONArray value at index: 0\":[\"a string\"],\"x\":-99},\"color\":false,\"longValue\":false,\",:]}/\"[{;=#\":false,\"in\":false,\"\n\":-99}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 125 [character 126 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-0");
      assertEquals(-0.0, number0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("84|<)6nj`EEKIZBg_");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("Duplicate key \"");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<MockPrintStream, Desktop.Action> hashMap0 = new HashMap<MockPrintStream, Desktop.Action>();
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.similar(hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"intValue\":99,\"y\":7,\"z\":{\"x\":\"a string\",\"] not a string.\":99},\"a\":[],\"Null pointer\":\"a string\",\"floatValue\":[],\"x\":true}");
      boolean boolean0 = jSONObject0.similar(jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("z*k_EVa;/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("\f", false);
      jSONObject0.append("\f", mockFileWriter0);
      String string0 = jSONObject0.toString(0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("RYA_&m=3%", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Double double0 = new Double(644.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("is", 644.0);
      try { 
        jSONObject0.putOnce("is", "is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"is\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Double double0 = new Double(644.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.putOnce("is", "is");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<ByteArrayInputStream, Character> hashMap0 = new HashMap<ByteArrayInputStream, Character>();
      jSONObject0.put("false", (Map<?, ?>) hashMap0);
      String string0 = jSONObject0.optString("false", "java.java.lang");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.putOpt("/MV.", "/MV.");
      jSONObject0.optNumber("/MV.");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Dialog.ModalExclusionType> linkedList0 = new LinkedList<Dialog.ModalExclusionType>();
      jSONObject0.put("6MKy9", (Collection<?>) linkedList0);
      Long long0 = new Long(1199L);
      Number number0 = jSONObject0.optNumber("6MKy9", (Number) long0);
      assertEquals(1199L, number0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("{\"y\":7,\"z\":true,\"getBuffer\":[],\"b\":{},\"xx\":99,\"x\":true}", 0L);
      BigDecimal bigDecimal0 = new BigDecimal((-3005));
      Number number0 = jSONObject0.optNumber("{\"y\":7,\"z\":true,\"getBuffer\":[],\"b\":{},\"xx\":99,\"x\":true}", (Number) bigDecimal0);
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("nsK_", stringWriter0);
      long long0 = jSONObject1.optLong("nsK_", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("false", "false");
      long long0 = jSONObject1.optLong("false", (-2346L));
      assertFalse(jSONObject0.isEmpty());
      assertEquals((-2346L), long0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1787);
      JSONObject jSONObject1 = jSONObject0.increment("' and instead saw '");
      long long0 = jSONObject1.optLong("' and instead saw '", (long) 1787);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HashMap<TrayIcon.MessageType, WebParam.Mode> hashMap0 = new HashMap<TrayIcon.MessageType, WebParam.Mode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("yJzM0C '5ab", (Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("yJzM0C '5ab");
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("jvax.");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("^u}3ccMg&:msr$v]aP");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":99,\"y\":7,\"z\":true,\" [character \":[],\"xx\":[]}");
      JSONObject jSONObject1 = jSONObject0.accumulate("{\"x\":99,\"y\":7,\"z\":true,\" [character \":[],\"xx\":[]}", "{\"x\":99,\"y\":7,\"z\":true,\" [character \":[],\"xx\":[]}");
      int int0 = jSONObject1.optInt("{\"x\":99,\"y\":7,\"z\":true,\" [character \":[],\"xx\":[]}");
      assertEquals(6, jSONObject0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.put("A JSONObject text must begin with '{'", 2602.087F);
      int int0 = jSONObject0.optInt("A JSONObject text must begin with '{'");
      assertEquals(2, jSONObject0.length());
      assertEquals(2602, int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Dialog.ModalExclusionType> linkedList0 = new LinkedList<Dialog.ModalExclusionType>();
      jSONObject0.put("xMKy9", (Collection<?>) linkedList0);
      int int0 = jSONObject0.optInt("xMKy9", 2);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("[;nrg");
      JSONObject jSONObject1 = jSONObject0.put("j/>)gm", (Object) mockFileWriter0);
      float float0 = jSONObject1.optFloat("j/>)gm", (float) (-3277));
      assertEquals((-3277.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Float float0 = Float.valueOf(430.75388F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("java.io.StringWriter@0000000003", (Object) "java.io.StringWriter@0000000003");
      float float1 = jSONObject1.optFloat("java.io.StringWriter@0000000003", 430.75388F);
      assertEquals(3, jSONObject0.length());
      assertEquals(430.75388F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"a string\"", 0L);
      float float0 = jSONObject1.optFloat("\"a string\"", 833.3F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale locale0 = Locale.GERMANY;
      JSONObject jSONObject1 = jSONObject0.putOpt("re", locale0);
      double double0 = jSONObject1.optDouble("re", 1.0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HashMap<Double, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Double, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("i", (-539));
      double double0 = jSONObject0.optDouble("i");
      assertEquals((-539.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"toUpperCase\":99,\"org.json.JSONArray\":7,\"Unable to read the next character from the stream\":{\"Bad value from toJSONString: \":\"a string\"},\"Null pointer\":false,\"JSON does not allow non-finite numbers.\":[],\"Bad value from toJSONString: \":\"a string\",\"x\":{}}");
      jSONObject0.accumulate("{\"toUpperCase\":99,\"org.json.JSONArray\":7,\"Unable to read the next character from the stream\":{\"Bad value from toJSONString: \":\"a string\"},\"Null pointer\":false,\"JSON does not allow non-finite numbers.\":[],\"Bad value from toJSONString: \":\"a string\",\"x\":{}}", "{\"toUpperCase\":99,\"org.json.JSONArray\":7,\"Unable to read the next character from the stream\":{\"Bad value from toJSONString: \":\"a string\"},\"Null pointer\":false,\"JSON does not allow non-finite numbers.\":[],\"Bad value from toJSONString: \":\"a string\",\"x\":{}}");
      jSONObject0.optDouble("{\"toUpperCase\":99,\"org.json.JSONArray\":7,\"Unable to read the next character from the stream\":{\"Bad value from toJSONString: \":\"a string\"},\"Null pointer\":false,\"JSON does not allow non-finite numbers.\":[],\"Bad value from toJSONString: \":\"a string\",\"x\":{}}", Double.NaN);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("%.WN<", jSONObject0);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONObject0.optBigInteger("%.WN<", bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("7R)YnEumg4", bigInteger0);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("[]", 0L);
      BigDecimal bigDecimal0 = new BigDecimal((-2330));
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("[]", bigDecimal0);
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal(",", bigDecimal0);
      assertEquals((byte)1, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"ApKle\",\"size\":true,\"color\":\"Red\",\"] not a string.\":true,\"value2\":false,\"number\":null}");
      jSONObject0.put("{\"fruit\":\"ApKle\",\"size\":true,\"color\":\"Red\",\"] not a string.\":true,\"value2\":false,\"number\":null}", 63);
      jSONObject0.optBigDecimal("{\"fruit\":\"ApKle\",\"size\":true,\"color\":\"Red\",\"] not a string.\":true,\"value2\":false,\"number\":null}", (BigDecimal) null);
      assertEquals(7, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] not a string.\":null,\"z\":\"a string\",\"shortValueExact\":[\"a string\"],\"{\":{\"x\":[]},\"intValue\":99,\"x\":true}");
      JSONObject jSONObject1 = jSONObject0.put("{\"] not a string.\":null,\"z\":\"a string\",\"shortValueExact\":[\"a string\"],\"{\":{\"x\":[]},\"intValue\":99,\"x\":true}", true);
      boolean boolean0 = jSONObject1.optBoolean("{\"] not a string.\":null,\"z\":\"a string\",\"shortValueExact\":[\"a string\"],\"{\":{\"x\":[]},\"intValue\":99,\"x\":true}");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"Expected a ',' or '}'\":-99,\"y\":7,\"z\":true,\"/\":[false],\"Null pointer\":{},\"Value out of sequence.\":true,\"istoMap\":{\"x\":99}}");
      JSONObject jSONObject1 = jSONObject0.accumulate("{\"Expected a ',' or '}'\":-99,\"y\":7,\"z\":true,\"/\":[false],\"Null pointer\":{},\"Value out of sequence.\":true,\"istoMap\":{\"x\":99}}", "{\"Expected a ',' or '}'\":-99,\"y\":7,\"z\":true,\"/\":[false],\"Null pointer\":{},\"Value out of sequence.\":true,\"istoMap\":{\"x\":99}}");
      Class<Month> class0 = Month.class;
      jSONObject1.optEnum(class0, "{\"Expected a ',' or '}'\":-99,\"y\":7,\"z\":true,\"/\":[false],\"Null pointer\":{},\"Value out of sequence.\":true,\"istoMap\":{\"x\":99}}");
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("do");
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      String string0 = JSONObject.valueToString(mockFileOutputStream0);
      Float float0 = new Float((double) (-970));
      jSONObject0.put("D?ts", (Object) float0);
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Integer integer0 = new Integer(6296);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Double double0 = new Double(644.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.put("QOA_vF/EHRl", 644.0);
      boolean boolean0 = jSONObject1.has("QOA_vF/EHRl");
      assertEquals(3, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"intValue\":99,\"y\":7,\"z\":[],\"a\":[],\"Null pointer\":false,\"floatValue\":[],\"java.lang.Float@00000000040\":true}");
      boolean boolean0 = jSONObject0.has("{\"intValue\":99,\"y\":7,\"z\":[],\"a\":[],\"Null pointer\":false,\"floatValue\":[],\"java.lang.Float@00000000040\":true}");
      assertFalse(boolean0);
      assertEquals(7, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      JSONObject jSONObject1 = jSONObject0.put("A JSONObject text must begin with '{'", 2602.087F);
      try { 
        jSONObject1.getString("A JSONObject text must begin with '{'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Float float0 = Float.valueOf(430.75388F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("", (Object) "java.io.StringWriter@0000000003");
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"toUpperCase\":99,\"y\":7,\"z\":true,\"a\":[],\"Null pointer\":{},\"Value out of sequence.\":true,\"istoMap\":{}}");
      JSONObject jSONObject1 = jSONObject0.accumulate("{\"toUpperCase\":99,\"y\":7,\"z\":true,\"a\":[],\"Null pointer\":{},\"Value out of sequence.\":true,\"istoMap\":{}}", "{\"toUpperCase\":99,\"y\":7,\"z\":true,\"a\":[],\"Null pointer\":{},\"Value out of sequence.\":true,\"istoMap\":{}}");
      try { 
        jSONObject1.getJSONObject("{\"toUpperCase\":99,\"y\":7,\"z\":true,\"a\":[],\"Null pointer\":{},\"Value out of sequence.\":true,\"istoMap\":{}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000070] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("size", 3049.8298F);
      int int0 = jSONObject0.getInt("size");
      assertEquals(1, jSONObject0.length());
      assertEquals(3049, int0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("false", "false");
      try { 
        jSONObject1.getInt("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"hello\",\"shortValueExact\":7,\"z\":true,\"a\":[false],\"b\":{},\"xx\":[]}");
      jSONObject0.put("{\"x\":\"hello\",\"shortValueExact\":7,\"z\":true,\"a\":[false],\"b\":{},\"xx\":[]}", 1150);
      float float0 = jSONObject0.getFloat("{\"x\":\"hello\",\"shortValueExact\":7,\"z\":true,\"a\":[false],\"b\":{},\"xx\":[]}");
      assertEquals(7, jSONObject0.length());
      assertEquals(1150.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"\"", true);
      try { 
        jSONObject1.getFloat("\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Double double0 = new Double(644.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("QOA_vF/EHRl", 644.0);
      double double1 = jSONObject0.getDouble("QOA_vF/EHRl");
      assertEquals(3, jSONObject0.length());
      assertEquals(644.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("org.json.JSONException", "false");
      try { 
        jSONObject1.getDouble("org.json.JSONException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Float float0 = Float.valueOf(430.75388F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "java.io.StringWriter@0000000003");
      boolean boolean0 = jSONObject1.optBoolean("");
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"toUpperCase\":99,\"org.json.JSONArray\":7,\"z\":{},\"a\":[],\"Null pointer\":{\"x\":{}},\"floatValue\":[]}");
      jSONObject0.accumulate("{\"toUpperCase\":99,\"org.json.JSONArray\":7,\"z\":{},\"a\":[],\"Null pointer\":{\"x\":{}},\"floatValue\":[]}", "{\"toUpperCase\":99,\"org.json.JSONArray\":7,\"z\":{},\"a\":[],\"Null pointer\":{\"x\":{}},\"floatValue\":[]}");
      try { 
        jSONObject0.getNumber("{\"toUpperCase\":99,\"org.json.JSONArray\":7,\"z\":{},\"a\":[],\"Null pointer\":{\"x\":{}},\"floatValue\":[]}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000067] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("enD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-2099.396));
      assertEquals("-2099.396", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"iskeySet\":99,\"y\":7,\"z\":{},\"org.json.JSONWriter\":[],\"Null pointer\":{\"x\":\"a string\"},\"Value out of sequence.\":\"a string\",\"x\":{\"x\":-99}}");
      JSONObject jSONObject1 = jSONObject0.accumulate("{\"iskeySet\":99,\"y\":7,\"z\":{},\"org.json.JSONWriter\":[],\"Null pointer\":{\"x\":\"a string\"},\"Value out of sequence.\":\"a string\",\"x\":{\"x\":-99}}", "{\"iskeySet\":99,\"y\":7,\"z\":{},\"org.json.JSONWriter\":[],\"Null pointer\":{\"x\":\"a string\"},\"Value out of sequence.\":\"a string\",\"x\":{\"x\":-99}}");
      jSONObject1.accumulate("{\"iskeySet\":99,\"y\":7,\"z\":{},\"org.json.JSONWriter\":[],\"Null pointer\":{\"x\":\"a string\"},\"Value out of sequence.\":\"a string\",\"x\":{\"x\":-99}}", "{\"iskeySet\":99,\"y\":7,\"z\":{},\"org.json.JSONWriter\":[],\"Null pointer\":{\"x\":\"a string\"},\"Value out of sequence.\":\"a string\",\"x\":{\"x\":-99}}");
      jSONObject1.append("{\"iskeySet\":99,\"y\":7,\"z\":{},\"org.json.JSONWriter\":[],\"Null pointer\":{\"x\":\"a string\"},\"Value out of sequence.\":\"a string\",\"x\":{\"x\":-99}}", "{\"iskeySet\":99,\"y\":7,\"z\":{},\"org.json.JSONWriter\":[],\"Null pointer\":{\"x\":\"a string\"},\"Value out of sequence.\":\"a string\",\"x\":{\"x\":-99}}");
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("owLdk", "owLdk");
      try { 
        jSONObject0.getBoolean("owLdk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Double double0 = new Double(644.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.put("QOA_vF/EHRl", 644.0);
      try { 
        jSONObject0.append("QOA_vF/EHRl", jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[QOA_vF/EHRl] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("false", jSONArray0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(roundingMode0, stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<ByteArrayInputStream, Character> hashMap0 = new HashMap<ByteArrayInputStream, Character>();
      Character character0 = Character.valueOf('T');
      hashMap0.put((ByteArrayInputStream) null, character0);
      // Undeclared exception!
      try { 
        jSONObject0.put("false", (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      WebParam.Mode webParam_Mode0 = WebParam.Mode.OUT;
      HashMap<TrayIcon.MessageType, WebParam.Mode> hashMap0 = new HashMap<TrayIcon.MessageType, WebParam.Mode>();
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.NONE;
      hashMap0.put(trayIcon_MessageType0, webParam_Mode0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.toString((-266));
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"x\":\"hello\"\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":[]}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at 13 [character 14 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],zb\":{},\"xx\":[]}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 38 [character 39 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.wrap(object0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("a4]41GzYM|v *'teT", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery(jSONPointer0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "true");
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("-0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1787);
      String string0 = jSONObject0.optString("' and instead saw '");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<ByteArrayInputStream, Character> hashMap0 = new HashMap<ByteArrayInputStream, Character>();
      jSONObject0.put("false", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getBigDecimal("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      try { 
        jSONObject0.getEnum(class0, "lL\"#ZE6&lmtVz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query("");
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-1559));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1559
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query(".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      jSONObject0.putOpt("value [%s] is not an array or object therefore its key %s cannot be resolved", set0);
      try { 
        jSONObject0.getJSONArray("value [%s] is not an array or object therefore its key %s cannot be resolved");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("%.WN<", 2602.087F);
      assertFalse(jSONObject0.isEmpty());
      
      long long0 = jSONObject1.getLong("%.WN<");
      assertEquals(2602L, long0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      HashMap<Double, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Double, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      boolean boolean0 = jSONObject0.isNull("_0Oc8B.NXn");
      assertTrue(boolean0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat("wt?/");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<String> set0 = jSONObject0.keySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("Expected a ':' after a key");
      assertEquals(0L, long0);
  }
}
