/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 01:20:54 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONReader;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import java.util.concurrent.ConcurrentHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONReader_ESTest extends JSONReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":99}");
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.IgnoreAutoType;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = featureArray0[0];
      featureArray0[4] = feature0;
      featureArray0[5] = featureArray0[1];
      featureArray0[6] = featureArray0[0];
      featureArray0[7] = featureArray0[2];
      JSONReader jSONReader0 = new JSONReader(stringReader0, featureArray0);
      assertEquals(12, jSONReader0.peek());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{\"\":false},\"z\":{},\"contxt i ull\":tue}");
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      jSONReader0.startObject();
      jSONReader0.readInteger();
      jSONReader0.readString();
      // Undeclared exception!
      try { 
        jSONReader0.startObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[]");
      JSONReader jSONReader0 = new JSONReader(stringReader0);
      jSONReader0.startArray();
      assertEquals(15, jSONReader0.peek());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{\"fruit\":-99,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      JSONReader jSONReader0 = new JSONReader(jSONReaderScanner0);
      jSONReader0.readObject((Object) jSONReaderScanner0);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":[],\"y\":7,\"z\":false,\"context is null\":true,\"b\":{\"\":true}}", 5864);
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      jSONReader0.close();
      assertEquals(12, jSONReader0.peek());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      String string0 = jSONReader0.readString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"\":\"hello\",\"\":{},\"z\":-99,\"a\":[],\"b\":true}");
      JSONReader jSONReader0 = new JSONReader(stringReader0);
      Class<String> class0 = String.class;
      Class<Field> class1 = Field.class;
      Type type0 = FieldInfo.getFieldType((Class<?>) class1, (Type) class0, (Type) class0, (Map<TypeVariable, Type>) null);
      Object object0 = jSONReader0.readObject(type0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 5825);
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      Object object0 = jSONReader0.readObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0wu{x\"Orzc{\tH>pS");
      JSONReader jSONReader0 = new JSONReader(defaultJSONParser0);
      Long long0 = jSONReader0.readLong();
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2~vuwxa63IoudT00");
      JSONReader jSONReader0 = new JSONReader(stringReader0);
      Long long0 = jSONReader0.readLong();
      assertEquals(2L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":7,\"context is null\":[],\"\":{\"x\":\"a string\"}}", 5864);
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      jSONReader0.startObject();
      jSONReader0.readString();
      Integer integer0 = jSONReader0.readInteger();
      assertEquals(7, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-99");
      JSONReader jSONReader0 = new JSONReader(jSONReaderScanner0);
      Integer integer0 = jSONReader0.readInteger();
      assertEquals((-99), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONReader jSONReader0 = new JSONReader((DefaultJSONParser) null);
      // Undeclared exception!
      try { 
        jSONReader0.startObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONReader jSONReader0 = new JSONReader((DefaultJSONParser) null);
      // Undeclared exception!
      try { 
        jSONReader0.startArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONReader jSONReader0 = new JSONReader((DefaultJSONParser) null);
      TimeZone timeZone0 = TimeZone.getTimeZone("0a$/J^3A*U[x");
      // Undeclared exception!
      try { 
        jSONReader0.setTimzeZone(timeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONReader jSONReader0 = new JSONReader((DefaultJSONParser) null);
      Locale locale0 = Locale.US;
      // Undeclared exception!
      try { 
        jSONReader0.setLocale(locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{\"\":false},\"z\":{},\"contxt i ull\":tue}");
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONReader0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONReader jSONReader0 = new JSONReader((DefaultJSONParser) null);
      // Undeclared exception!
      try { 
        jSONReader0.readString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConcurrentHashMap<Integer, Object> concurrentHashMap0 = new ConcurrentHashMap<Integer, Object>();
      JSONReader jSONReader0 = new JSONReader((DefaultJSONParser) null);
      // Undeclared exception!
      try { 
        jSONReader0.readObject((Map) concurrentHashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{\"\":false},\"z\":{},\"contxt i ull\":tue}");
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONReader0.readObject((Map) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONReader jSONReader0 = new JSONReader((DefaultJSONParser) null);
      Class<String> class0 = String.class;
      Type type0 = FieldInfo.getFieldType((Class<?>) class0, (Type) class0, (Type) class0, (Map<TypeVariable, Type>) null);
      // Undeclared exception!
      try { 
        jSONReader0.readObject(type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0wu{x\"Orzc{\tH>pS");
      JSONReader jSONReader0 = new JSONReader(defaultJSONParser0);
      // Undeclared exception!
      jSONReader0.readObject((Object) defaultJSONParser0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{\"x\":\"hello\",\"y\":99,\"z\":true,\"a\":[],\"b\":{}}", 0);
      JSONReader jSONReader0 = new JSONReader(jSONReaderScanner0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONReader0.readObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // setter not found, class java.lang.Object, property x
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JSONReader jSONReader0 = new JSONReader((DefaultJSONParser) null);
      // Undeclared exception!
      try { 
        jSONReader0.readObject(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{}");
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      jSONReader0.startObject();
      // Undeclared exception!
      try { 
        jSONReader0.readObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3{}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{\"com.alibaba.fastjson.JSONReader\":true,\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":false,\"illegal state : \":true,\"a\":[{}],\"andIncrement\":{\"com.alibaba.fastjson.JSONReader\":-99,\"xx\":-99,\"xxx\":-99}}", 0);
      JSONReader jSONReader0 = new JSONReader(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        jSONReader0.readLong();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {\"a\":[{}],\"andIncrement\":{\"xx\":{},\"xxx\":{\"$ref\":\"$.java\\\\.lang\\\\.String\\\\@0000000013.java\\\\.lang\\\\.String\\\\@0000000025\"},\"com.alibaba.fastjson.JSONReader\":{\"$ref\":\"$.java\\\\.lang\\\\.String\\\\@0000000013.java\\\\.lang\\\\.String\\\\@0000000025\"}},\"com.alibaba.fastjson.JSONReader\":{},\"illegal state : \":{\"$ref\":\"$.java\\\\.lang\\\\.String\\\\@0000000028\"},\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":{}}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal state : \":false}");
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      jSONReader0.startObject();
      // Undeclared exception!
      try { 
        jSONReader0.readInteger();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"illegal state : \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"\":[],\"context is null\":null,\"com.alibaba.fastjson.util.FieldInfo\":null}");
      JSONReader jSONReader0 = new JSONReader(stringReader0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      JSONReader jSONReader1 = new JSONReader(jSONReaderScanner0);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReader1.readInteger();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONReader jSONReader0 = new JSONReader((DefaultJSONParser) null);
      // Undeclared exception!
      try { 
        jSONReader0.getLocal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      Feature[] featureArray0 = new Feature[0];
      JSONReader jSONReader0 = null;
      try {
        jSONReader0 = new JSONReader(pipedReader0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(921);
      JSONReader jSONReader0 = null;
      try {
        jSONReader0 = new JSONReader(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONReader jSONReader0 = null;
      try {
        jSONReader0 = new JSONReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      jSONReader0.readString();
      JSONReader jSONReader1 = null;
      try {
        jSONReader1 = new JSONReader(jSONScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONReader jSONReader0 = null;
      try {
        jSONReader0 = new JSONReader((JSONLexer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"\":{\"\":99,\"(DZ)V\":false,\", column \":-99,\"x\":\"a string\"},\"context is null\":\"a string\",\"/**/\":true}");
      JSONReader jSONReader0 = new JSONReader(stringReader0);
      jSONReader0.startObject();
      Class<Object> class0 = Object.class;
      jSONReader0.readObject(class0);
      jSONReader0.readObject((Object) "{\"\":{\"\":99,\"(DZ)V\":false,\", column \":-99,\"x\":\"a string\"},\"context is null\":\"a string\",\"/**/\":true}");
      ConcurrentHashMap<Method, Type> concurrentHashMap0 = new ConcurrentHashMap<Method, Type>();
      // Undeclared exception!
      try { 
        jSONReader0.readObject((Map) concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"\":{\"\":99,\"(DZ)V\":false,\", column \":-99,\"x\":\"a string\"},\"context is null\":\"a string\",\"/**/\":true}");
      JSONReader jSONReader0 = new JSONReader(stringReader0);
      jSONReader0.startObject();
      ConcurrentHashMap<Method, Type> concurrentHashMap0 = new ConcurrentHashMap<Method, Type>();
      ConcurrentHashMap concurrentHashMap1 = (ConcurrentHashMap)jSONReader0.readObject((Map) concurrentHashMap0);
      assertTrue(concurrentHashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{\"\":false},\"z\":{},\"contxt i ull\":tue}");
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      jSONReader0.startObject();
      jSONReader0.readInteger();
      jSONReader0.readString();
      Object object0 = jSONReader0.readObject();
      assertEquals("z", object0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{\"\":false},\"z\":{},\"contxt i ull\":tue}");
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      jSONReader0.startObject();
      jSONReader0.readString();
      JSONObject jSONObject0 = (JSONObject)jSONReader0.readObject();
      assertEquals(1, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{\"\":false},\"z\":{},\"contxt i ull\":tue}");
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONReader0.readObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{\"\":false},\"z\":{},\"context is null\":true}", 5864);
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      jSONReader0.startObject();
      // Undeclared exception!
      try { 
        jSONReader0.readObject((Object) "{\"\":{\"\":false},\"z\":{},\"context is null\":true}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{\"\":false},\"context is null\":false,\"/**/\":-99}");
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      Class<Object> class0 = Object.class;
      Object object0 = jSONReader0.readObject(class0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":null,\"illegal state : \":-99,\"context is null\":true,\"\":\"a string\"}", 5864);
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[9];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      // Undeclared exception!
      try { 
        jSONReader0.readObject((Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // setter not found, class java.lang.String, property 
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{\"\":false},\"z\":{},\"contxt i ull\":tue}");
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      jSONReader0.startObject();
      Class<Object> class0 = Object.class;
      Annotation annotation0 = jSONReader0.readObject((Type) class0);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONReader jSONReader0 = new JSONReader((DefaultJSONParser) null);
      // Undeclared exception!
      try { 
        jSONReader0.readLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{\"\":false},\"z\":{},\"contxt i ull\":tue}");
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      jSONReader0.startObject();
      Long long0 = jSONReader0.readLong();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"\":[],\"context is null\":null,\"com.alibaba.fastjson.util.FieldInfo\":null}");
      JSONReader jSONReader0 = new JSONReader(stringReader0);
      // Undeclared exception!
      try { 
        jSONReader0.readInteger();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {\"\":[]}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{}");
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      jSONReader0.startObject();
      boolean boolean0 = jSONReader0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{\"\":false},\"z\":{},\"contxt i ull\":tue}");
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      jSONReader0.startObject();
      jSONReader0.readInteger();
      jSONReader0.readString();
      boolean boolean0 = jSONReader0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{\"\":false},\"z\":{},\"contxt i ull\":tue}");
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      jSONReader0.startObject();
      jSONReader0.readInteger();
      // Undeclared exception!
      try { 
        jSONReader0.hasNext();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state : 1002
         //
         verifyException("com.alibaba.fastjson.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONReader jSONReader0 = new JSONReader((DefaultJSONParser) null);
      // Undeclared exception!
      try { 
        jSONReader0.hasNext();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // context is null
         //
         verifyException("com.alibaba.fastjson.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{\"\":false},\"z\":{},\"contxt i ull\":tue}");
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      jSONReader0.startObject();
      boolean boolean0 = jSONReader0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":0}");
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      jSONReader0.startObject();
      jSONReader0.readObject();
      jSONReader0.readInteger();
      // Undeclared exception!
      try { 
        jSONReader0.startArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect ,, actual }
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{\"\":false},\"z\":{},\"contxt i ull\":tue}");
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      jSONReader0.startObject();
      jSONReader0.readString();
      jSONReader0.startObject();
      assertEquals(4, jSONReader0.peek());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":0}");
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      jSONReader0.startObject();
      // Undeclared exception!
      try { 
        jSONReader0.startArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual string
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Feature[] featureArray0 = new Feature[5];
      JSONReader jSONReader0 = null;
      try {
        jSONReader0 = new JSONReader(stringReader0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 5825);
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      Locale locale0 = jSONReader0.getLocal();
      assertEquals("en", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"\":false,\"illegal state : \":{\"\":99},\"context is null\":\"a string\",\"/**/\":null}");
      JSONReader jSONReader0 = new JSONReader(stringReader0);
      // Undeclared exception!
      try { 
        jSONReader0.readObject((TypeReference<Method>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{\"\":false},\"z\":{},\"contxt i ull\":tue}");
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      TimeZone timeZone0 = jSONReader0.getTimzeZone();
      jSONReader0.setTimzeZone(timeZone0);
      assertEquals("GMT", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReader jSONReader0 = new JSONReader(stringReader0);
      Feature feature0 = Feature.DisableFieldSmartMatch;
      jSONReader0.config(feature0, false);
      assertEquals(20, jSONReader0.peek());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{\"fruit\":-99,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      JSONReader jSONReader0 = new JSONReader(jSONReaderScanner0);
      int int0 = jSONReader0.peek();
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{\"\":false},\"z\":},\"contxt i ull\":tue}");
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONReader0.endObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect }, actual {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{\"\":null},\"error parse null or new\":{\"\":{},\"xx\":-99},\"context is null\":true}", 5864);
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      Locale locale0 = new Locale("{\"\":{\"\":null},\"error parse null or new\":{\"\":{},\"xx\":-99},\"context is null\":true}", "");
      jSONReader0.setLocale(locale0);
      assertEquals("{\"\":{\"\":null},\"error parse null or new\":{\"\":{},\"xx\":-99},\"context is null\":true}", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":[],\"y\":7,\"\":false,\"context is null\":null,\"b\":{\"\":true}}");
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONReader0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReader jSONReader0 = new JSONReader(stringReader0);
      // Undeclared exception!
      try { 
        jSONReader0.endArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect ], actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }
}
