/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 01:11:14 GMT 2020
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import java.time.chrono.ChronoLocalDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONScanner_ESTest extends JSONScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("]wIl8$NivBn0");
      jSONScanner0.setToken(159);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("89m^/)FLv");
      jSONScanner0.setToken(1382);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((-445L), true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unknown
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";c#nJ9");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(76);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed str\":{\"ull\":null},0\"@type\":\"{\"org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthen{icationToken\":\"a string\",\"xx\":\"a string\",\"x\":false}\":{},\"color\":\"illegal state. \",\"value\":\"a string\",\"illegal state. \":-99,\"number\":false,\"index must > 0, but \":\"a string\",\"x\":false}", 19);
      jSONScanner0.nextToken();
      jSONScanner0.skipString();
      assertEquals(':', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("yyyy\u5E74M\u6708d\u65E5", 71);
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1yyyy\u5E74M\u6708d\u65E5
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.serializer.StringCodec");
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ullm@", 686);
      char[] charArray0 = new char[0];
      SymbolTable symbolTable0 = new SymbolTable(1565);
      jSONScanner0.scanFieldStringArray(charArray0, (-449), symbolTable0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("])kTKS", (-32));
      jSONScanner0.bp = (-2285);
      String string0 = jSONScanner0.info();
      assertEquals("pos -2285, line 1, column 1])kTKS", string0);
      assertEquals(']', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("float overflow : ");
      jSONScanner0.nextIdent();
      jSONScanner0.scanDate('y');
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = '5';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 4, 4);
      long long0 = jSONScanner0.scanLong(':');
      assertEquals(75L, long0);
      assertEquals('7', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0<cX E");
      long long0 = jSONScanner0.scanLong('4');
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 91);
      jSONScanner0.scanLong('!');
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = '5';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 4, 4);
      double double0 = jSONScanner0.scanDouble('!');
      assertEquals(75.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0<cX E");
      double double0 = jSONScanner0.scanDouble('v');
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = '5';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 4, 4);
      int int0 = jSONScanner0.scanInt('7');
      assertEquals('7', jSONScanner0.getCurrent());
      assertEquals(75, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0<cX E");
      int int0 = jSONScanner0.scanInt('v');
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-1301));
      jSONScanner0.scanInt('_');
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("3GvI6</XiLbdTY\"");
      jSONScanner0.scanString();
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1, (-3076));
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ");
      jSONScanner0.scanIdent();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99", (-2244));
      char[] charArray0 = new char[0];
      jSONScanner0.nextIdent();
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99", (-2244));
      char[] charArray0 = new char[0];
      jSONScanner0.nextIdent();
      jSONScanner0.scanFieldString(charArray0);
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99", (-2244));
      char[] charArray0 = new char[0];
      jSONScanner0.nextToken((-2244));
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1, (-3076));
      boolean boolean0 = jSONScanner0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("eKQlB?:`Qx8RA|X1");
      jSONScanner0.bp = 69;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      assertEquals(1, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('1', '1', '1', '1', '1', '1', (-3058), 322);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('1', '1', '1', '9', 'G', '+', 5748, 5748);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("89m^S)SL", 2031);
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('8', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('9', 'V', ' ', 'S', 'H', 'H', 714, (-3945));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"size\":\"\"@type\":\"\",\"color\":false,\"value\":\"a string\",\"value2\":false,\"number\":\"1\",\"index must > 0, but \":\"a string\"}", (-1575));
      jSONScanner0.nextIdent();
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals(12, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal json.");
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('i', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("yyyy\u5E74M\u6708d\u65E5", 71);
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#xrjw 4");
      jSONScanner0.sp = 1066;
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str", 81);
      jSONScanner0.token = 81;
      jSONScanner0.bytesValue();
      assertEquals('u', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/Z/n5FLmcfWUg8ny-", 686);
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1/Z/n5FLmcfWUg8ny-
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("enull]");
      jSONScanner0.skipArray();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8EZzDU)");
      char[] charArray0 = new char[2];
      jSONScanner0.sbuf = charArray0;
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("]wIl8$NivBn0", (-636));
      char[] charArray0 = new char[3];
      jSONScanner0.copyTo(0, 0, charArray0);
      assertEquals(']', jSONScanner0.getCurrent());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("*UQB/L g>");
      char[] charArray0 = new char[0];
      jSONScanner0.arrayCopy(0, charArray0, 0, 0);
      assertEquals('*', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"size\":\"\"@type\":\"\",\"color\":false,\"value\":\"a string\",\"value2\":false,\"number\":\"1\",\"index must > 0, but \":\"a string\"}", (-1575));
      char[] charArray0 = jSONScanner0.sub_chars(0, 1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'{'}, charArray0);
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"\":\"Large\",\"color\":null,\"value\":true,\"value2\":false,\"\"@type\":\"\":false,\"x\":\"a string\"}");
      char[] charArray0 = jSONScanner0.sub_chars(1, 0);
      assertEquals(0, charArray0.length);
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\"u\"\":\"Large\",\"color\":null,\"value\":true,\"value2\":false,\"\"@type\":\"\":false,\"x\":\"a string\"}");
      String string0 = jSONScanner0.subString(34, 34);
      assertEquals("\":null,\"value\":true,\"value2\":false", string0);
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 4, 4);
      String string0 = jSONScanner0.subString(4, 0);
      assertEquals("", string0);
      assertEquals('\u0000', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", line ");
      jSONScanner0.scanIdent();
      jSONScanner0.stringVal();
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"\"@type\":\"ava.util.OptionalLng");
      String string0 = jSONScanner0.stringVal();
      assertEquals("", string0);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed str\":{}}", 65279);
      char[] charArray0 = new char[2];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"size\":\"\"@t1pe\":\"\",\"color\":false,\"value\":\"a string\",\"value2\":false,\"number\":\"1\",\"index must > 0, but \":\"a string\"}", 459);
      jSONScanner0.bp = 99;
      jSONScanner0.scanIdent();
      jSONScanner0.numberString();
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("89m^/)FLv");
      char char0 = jSONScanner0.next();
      assertEquals('9', jSONScanner0.getCurrent());
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-2244));
      jSONScanner0.indexOf('U', (-1617));
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1j", (-2259));
      jSONScanner0.putChar('i');
      jSONScanner0.decimalValue();
      assertEquals('1', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3Gv2I6</XiLbdT,Y\"");
      char char0 = jSONScanner0.charAt(0);
      assertEquals('3', char0);
      assertEquals('3', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str");
      char char0 = jSONScanner0.charAt(0);
      assertEquals('u', char0);
      assertEquals('u', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/Z/n5FLmcfWUg8ny-", 686);
      char[] charArray0 = new char[9];
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertFalse(boolean0);
      assertEquals('/', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8EZzDU)");
      jSONScanner0.scanNumber();
      jSONScanner0.bytesValue();
      assertEquals('Z', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"size\":\"\"@type\"\"\",\"color\":false,\"value\":\"a string\",\"value2\":false,\"number\":\"1\"\"index must > 0, but \":\"a string\"}");
      ParserConfig parserConfig0 = new ParserConfig(false);
      String string0 = jSONScanner0.addSymbol(34, 52, 16, parserConfig0.symbolTable);
      assertEquals("value\":\"a string\",\"value2\":false,\"number\":\"1\"\"index ", string0);
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99", (-2261));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      String string0 = jSONScanner0.addSymbol(0, 0, 1965, parserConfig0.symbolTable);
      assertEquals('9', jSONScanner0.getCurrent());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(0, 116);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99", (-2244));
      jSONScanner0.nextToken((-2244));
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3Gv2I\"<tXiLbdT,Y\"");
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("X+=Q`w%a", 97);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('\'', '\'', '\'', '\'', '.');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"size\":\"\"@type\"\"\",\"color\":false,\"salue\"Z\"a string\",\"value2\":false,\"number\":\"1\"\"index must > 0, but \":\"a string\"}");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8EZzDU)", (-1301));
      jSONScanner0.bp = (-357);
      // Undeclared exception!
      try { 
        jSONScanner0.scanLong('!');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("89m^/)FLv");
      jSONScanner0.bp = (-315);
      // Undeclared exception!
      try { 
        jSONScanner0.scanISO8601DateIfMatch();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("setResolveStatus", 34);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8EZzDU)");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1j", (-2259));
      char[] charArray0 = new char[0];
      jSONScanner0.bp = (-2259);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldLong(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1%|i2{^Y1");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("_pp ^sFrII3%t_m^3f");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99", (-2259));
      jSONScanner0.bp = (-2259);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8EZzDU)");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"clazz is null");
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 91);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ullm@", 686);
      jSONScanner0.bp = 686;
      // Undeclared exception!
      try { 
        jSONScanner0.info();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8EZzDU)");
      jSONScanner0.nextToken();
      jSONScanner0.close();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"\":\"Large\",\"color\":null,\"value\":true,\"value2\":false,\"\"@type\":\"\":false,\"x\":\"a string\"}");
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(57, 29, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Ko?HUkh[6$");
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-1265));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8DU)", (-1301));
      // Undeclared exception!
      try { 
        jSONScanner0.charArrayCompare((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare((String) null, 4, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1j", (-2311));
      jSONScanner0.sp = (-2311);
      // Undeclared exception!
      try { 
        jSONScanner0.bytesValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error, expect ");
      char[] charArray0 = new char[19];
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(0, charArray0, 50, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"\"@type\":\"java.util.OptionalLong");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\"@type\":\"\"@type\":\"java.util.OptionalLong");
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(68, 68, 55, defaultJSONParser0.symbolTable);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-521));
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol((-521), (-521), 79, parserConfig0.symbolTable);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 2245, '0');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 26);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, 57344);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[[false,{\"\":-99}]]");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1[[false,{\"\":-99}]]
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99", (-2259));
      jSONScanner0.scanIdent();
      jSONScanner0.next();
      jSONScanner0.skipObject(true);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"null\":true,\"array level > 512\":7,\"\":[],\"char\":{},\"b\":{\"\"@type\":\"null\":null},\"xx\":99,\"xxx\":null}");
      jSONScanner0.skipObject(false);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/Z/n5FLmcfWUg8ny-", 686);
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1/Z/n5FLmcfWUg8ny-
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~g%MRO r(/", 828);
      // Undeclared exception!
      try { 
        jSONScanner0.subString(828, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '8';
      boolean boolean0 = JSONScanner.charArrayCompare("8J~", 0, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = JSONScanner.charArrayCompare("S%<cA?-O@s%mh", 0, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = JSONScanner.charArrayCompare("m@|", 65251, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char char0 = jSONScanner0.charAt(0);
      assertEquals('\u001A', char0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo((-2537), (-2537), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":{},\"size\":\"Large\",\"color\":\"illegal state. \",\"value\":\"a string\",\"value2\":false,\"number\":\"1\",\"index must > 0, but \":\"a string\"}", (-1575));
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertEquals('{', jSONScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"size\":\"\"@type\":\"\",\"color5:false,\"value\":\"a string\",\"value2\":fa;se,\"number\":\"1\",\"index must > 0, but \":\"a string\"}", (-1575));
      int int0 = jSONScanner0.indexOf('}', (-1));
      assertEquals(114, int0);
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"npF]rSKVQBJB|e8('\"(");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("|[u");
      jSONScanner0.scanTypeName(defaultJSONParser0.symbolTable);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"java.util.OptionalLong");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\"@type\":\"WriteNullStringAsEmpty");
      jSONScanner0.scanTypeName(defaultJSONParser0.symbolTable);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"\"@type\":\"ava.util.OptionalLng");
      assertFalse(jSONScanner0.isEOF());
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("<[lvP=xH9?>vw");
      jSONScanner0.scanTypeName(defaultJSONParser0.symbolTable);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"size\":\"\"@type\"\"\",\"color\":false,\"salue\"Z\"a string\",\"value2\":false,\"number\":\"1\"\"index must > 0, but \":\"a string\"}");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"size\":\"\"@type\"\"\",\"color\":false,\"salue\"Z\"a string\",\"value2\":false,\"number\":\"1\"\"index must > 0, but \":\"a string\"}");
      jSONScanner0.scanTypeName(defaultJSONParser0.symbolTable);
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#xN7");
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"size\":\"\"@type\"\"\",\"color\":false,\"value\":\"a string\",\"value2\":false,\"number\":\"1\"\"index must > 0, but \":\"a string\"}");
      jSONScanner0.nextIdent();
      long[] longArray0 = new long[7];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"size\":\"\"@type\"\"\",\"color\":false,\"value\":\"a string\",\"value2\":false,\"number\":\"1\"\"index must > 0, but \":\"a string\"}", (-1575));
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) (-1575), false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unknown
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-1575));
      jSONScanner0.nextIdent();
      jSONScanner0.seekArrayToItem('M');
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("47VDr+(s3|", (-870));
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem((-870));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -870
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("FQAv@4VbxX");
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"org.spri");
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nn/rGuN.1");
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("enull]");
      jSONScanner0.skipArray(true);
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("])zmkTKS", (-32));
      jSONScanner0.skipArray(true);
      assertEquals(11, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Hw\"NenPEv-%]");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1Hw\"NenPEv-%]
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"02^ 5[cq70E!:");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1\"@type\":\"02^ 5[cq70E!:
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"size\":\"\"@type\"\"\",\"color\":false,\"value\":\"a string\",\"value2\":false,\"number\":\"1\"\"index must > 0, but \":\"a string\"}");
      jSONScanner0.skipObject();
      jSONScanner0.skipObject(true);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("rINB6AXP|]+-6u}}n", 84);
      jSONScanner0.skipObject(true);
      assertEquals(13, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\"tre\"y\":7\"\":false,\"char\":[],\"b\":{\"x\":null},\"xx\":99,\"\":[]}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M+1}<b\"4T<IYkL0*j");
      jSONScanner0.skipObject(true);
      assertEquals(4, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"", 40);
      jSONScanner0.skipString();
      assertEquals(':', jSONScanner0.getCurrent());
      
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!F5jSK%fv7^C?k", (-736));
      char[] charArray0 = new char[4];
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("npF]rSKVQBJB|e8('\"(");
      jSONScanner0.scanFieldStringArray((char[]) null, 24180, (SymbolTable) null);
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4gY.-X@%");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldStringArray(charArray0, 24180, (SymbolTable) null);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      char[] charArray0 = new char[3];
      jSONScanner0.scanFieldStringArray(charArray0, 0, defaultJSONParser0.symbolTable);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4nkZ:%P");
      jSONScanner0.scanFieldStringArray((char[]) null, 90, (SymbolTable) null);
      assertEquals('4', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8DU)");
      jSONScanner0.scanDate('P');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("no support type : ");
      jSONScanner0.scanDate('z');
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99", 65279);
      jSONScanner0.scanDate('u');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"org.spri");
      // Undeclared exception!
      try { 
        jSONScanner0.scanDate('W');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8DU");
      long long0 = jSONScanner0.scanLong('D');
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nul");
      long long0 = jSONScanner0.scanLong('D');
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nn/rGuN.1", 9);
      long long0 = jSONScanner0.scanLong('4');
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99", 65279);
      long long0 = jSONScanner0.scanLong('9');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(99L, long0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"^D9org.pri");
      long long0 = jSONScanner0.scanLong('D');
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8DU", (-1301));
      double double0 = jSONScanner0.scanDouble('D');
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(8.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nul");
      jSONScanner0.scanDouble('D');
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not support type : ");
      double double0 = jSONScanner0.scanDouble('J');
      assertEquals(0.0, double0, 0.01);
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8EZB@ekU)");
      // Undeclared exception!
      try { 
        jSONScanner0.scanDouble('a');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9");
      double double0 = jSONScanner0.scanDouble('`');
      assertFalse(jSONScanner0.isEOF());
      assertEquals(9.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("89m^/)FLv");
      double double0 = jSONScanner0.scanDouble('<');
      assertEquals('8', jSONScanner0.getCurrent());
      assertEquals(89.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-WM0H!e$ukb", (-2084));
      jSONScanner0.scanDouble('f');
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"org.spri");
      jSONScanner0.scanDouble('N');
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" *H) Ok|<K/");
      double double0 = jSONScanner0.scanDouble('o');
      assertEquals(0.0, double0, 0.01);
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8DU", (-1301));
      jSONScanner0.scanInt('D');
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) (-1301), false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("enull]", 705);
      jSONScanner0.scanNumber();
      int int0 = jSONScanner0.scanInt('d');
      assertEquals(5, jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nn/rGuN.1", 9);
      int int0 = jSONScanner0.scanInt('@');
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99", 65279);
      int int0 = jSONScanner0.scanInt('{');
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals((-99), int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed str\":{\"ull\":null},0\"@type\":\"{\"org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthen{icationToken\":\"a string\",\"xx\":\"a string\",\"x\":false}\":{},\"color\":\"illegal state. \",\"value\":\"a string\",\"illegal state. \":-99,\"number\":false,\"index must > 0, but \":\"a string\",\"x\":false}");
      jSONScanner0.scanIdent();
      jSONScanner0.scanInt('5');
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("no support type : ");
      jSONScanner0.nextIdent();
      jSONScanner0.scanInt('\u0081');
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("|1%|i4{^Y1%", (-1301));
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("enull]");
      char[] charArray0 = new char[4];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("|1%|i4{^Y1%");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99", (-2218));
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1j", (-2259));
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"size\":\"\"@t1pe\":\"\",\"color\":false,\"value\":\"a string\",\"value2\":false,\"number\":\"1\",\"index must > 0, but \":\"a string\"}");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONScanner jSONScanner0 = new JSONScanner("/Z/n5FLmcfWUg8ny-", 278);
      long long0 = jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{nV>IkQr}+zT5;%_");
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", line ");
      jSONScanner0.scanIdent();
      char[] charArray0 = new char[0];
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8EZB@U)");
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"org.spri");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"\"org.spri");
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONScanner jSONScanner0 = new JSONScanner("/Z/n5FLmcfWUg8ny-");
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("dwa&-N6Lxi");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals(4, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99", (-2259));
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ullm@");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals('u', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4gY.-X@%");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"org.spri");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"^D9org.spri");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      char[] charArray0 = new char[3];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4gY.-X@%");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8DU");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-2244));
      jSONScanner0.isEOF();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('0', '0', '0', '0', '1', '0', '0', (-3058));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('0', '0', '0', '0', '0', 'k', (-831), (-1649));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('0', '0', '0', '0', '0', '7', 1182, 103);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('6', '6', '6', ':', ':', '6', (-2259), (-2558));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('4', '4', '4', '#', '4', '4', 4, 4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('4', '6', '&', '=', '6', '4', 65251, 282);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('0', '0', '0', '0', '0', '0', 3530, 3530);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('6', '&', '6', '&', 'j', '\\', 83, 544);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('H', 'H', 'P', 'H', 'H', 'P', 56, 56);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.JSONObject", (-2244));
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('-', '\u0000', 'q');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3Gv2I\"<tXiLbdT,Y\"");
      jSONScanner0.scanIdent();
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("s;.}ju@4g4.u]", (-2948));
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('s', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java/lang/String");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('j', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("dwa&-N6Lxi");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('d', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4gY.-X@%");
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('4', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".UaPZXvlny{TtRQns", (-1301));
      assertEquals('.', jSONScanner0.getCurrent());
      
      jSONScanner0.next();
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('U', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("*{{iNgm@|qjl|");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("eKQlB?:`Qx8RA|X1");
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('e', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/Z/n5FLmcfWUg8ny-", 686);
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('/', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#xrjw 4");
      jSONScanner0.sp = 1066;
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8EZzDU)");
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%Oej9FI/8C/");
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("*QBw// cu");
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("LQ{z$rB", 76);
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8DU)");
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("RvTSM");
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ");
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars((-4106), (-4106));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"size\":\"\"@type\"\"\",\"color\":false,\"salue\"Z\"a string\",\"value2\":false,\"number\":\"1\"\"index must > 0, but \":\"a string\"}");
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \", info : pos 15, line 1, column 16{\"size\":\"\"@type\"\"\",\"color\":false,\"salue\"Z\"a string\",\"value2\":false,\"number\":\"1\"\"index must > 0, but \":\"a string\"}
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!F5jSK%fv7^C?k", (-736));
      char[] charArray0 = new char[0];
      jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9");
      char[] charArray0 = new char[3];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("TODO : ", (-2887), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9");
      jSONScanner0.scanDate('Z');
      int int0 = jSONScanner0.seekObjectToField((-631L), false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal state. ", 72);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('0', '0', '0');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"xtre,\"y\":7\"\"false,\"char\":[],\"b\":{\"x\":null},\"x\":99,\"\":[]}");
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('-', '-', '-', '-', '-', '-');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/Z/n5FLmcfWUg8ny-");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(110, charArray0, (-185), 110);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("F", 1073741824);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(1073741824, 1073741824, 1073741824, (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@typeP\":\"");
      jSONScanner0.scanDate('/');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
