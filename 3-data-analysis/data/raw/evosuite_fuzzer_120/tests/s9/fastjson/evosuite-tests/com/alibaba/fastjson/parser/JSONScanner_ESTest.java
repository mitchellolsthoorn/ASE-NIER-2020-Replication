/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 00:23:43 GMT 2020
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import java.math.BigDecimal;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONScanner_ESTest extends JSONScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99", 0);
      jSONScanner0.nextToken((-2));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      long[] longArray0 = new long[3];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal str, \":\"a string\",\"ns5hm_yw\":{\"W$sCvo[;\":\"a striog.},\", column \":{}}");
      jSONScanner0.nextToken(57);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 268435456, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";C)Ljava/lang/Enum;");
      jSONScanner0.nextToken(57);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 57, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ;
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3-!yLp75!/DN5qH#7$v");
      jSONScanner0.setToken(990);
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(1786);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-1));
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-99\":-99,\"illegal json, \":\"a string\",\"\":[99,-99],\"8' XQBJbD\":\"a string\",\"illegal str, \":true}");
      char[] charArray0 = new char[0];
      jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\t", 0);
      jSONScanner0.nextToken(66);
      jSONScanner0.info();
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"(Ljava/lang/reflect/Type;)Ljava/lang/Object;\":\"Apple\",\"org.joda.time.DateTimeZone\":{\"\":\"a string\",\"\"@type\":\"-99\":[]},\"com.alibaba.fastjson.serializer.PrimitiveArraySerializer\":false,\"illegal state. \":false,\"value2\":true,\"\":null,\"x\":false}");
      jSONScanner0.bp = (-728);
      String string0 = jSONScanner0.info();
      assertEquals("pos -728, line 1, column 1{\"(Ljava/lang/reflect/Type;)Ljava/lang/Object;\":\"Apple\",\"org.joda.time.DateTimeZone\":{\"\":\"a string\",\"\"@type\":\"-99\":[]},\"com.alibaba.fastjson.serializer.PrimitiveArraySerializer\":false,\"illegal state. \":false,\"value2\":true,\"\":null,\"x\":false}", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = '3';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 5, 0);
      long long0 = jSONScanner0.scanLong('I');
      assertEquals(33L, long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0U]h5Bbx'");
      long long0 = jSONScanner0.scanLong('8');
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".000000000", 4);
      jSONScanner0.nextToken(40);
      double double0 = jSONScanner0.scanDouble('8');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0U]h5Bbx'");
      double double0 = jSONScanner0.scanDouble('e');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".000000000", 4);
      jSONScanner0.nextToken(40);
      int int0 = jSONScanner0.scanInt('1');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0U]h5Bbx'");
      int int0 = jSONScanner0.scanInt('{');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"\"@type\":\"\":7,\"z\":true,\"a\":[[]],\"b\":{}}", 37);
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONScanner jSONScanner0 = new JSONScanner("\t");
      Class<Locale> class0 = Locale.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"_-j");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals(':', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("i|2q,");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      char[] charArray0 = new char[0];
      jSONScanner0.nextToken(82);
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0U]h5Bbx'");
      char[] charArray0 = new char[0];
      int int0 = jSONScanner0.scanFieldInt(charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 5, 0);
      jSONScanner0.nextToken();
      assertEquals(5, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('1', '1', '1', '1', '1', '1', 3600, 3600);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('7', '7', '7', '7', '(', '(', 0, 14);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('9', '9', '9', '', ' ', '9', 1, 351);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('9', 'v', 'l', '3', '&', '3', 4, 4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-99\":-99,\"illegal json, \":{\"pos \":true},\"\":\"a string\",\"8' XQBJbD\":\"a string\",\"illegal str, \":{}}");
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('\'', '\'', '\'');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",8' XQBJbD<vlI`_");
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'x}X8stc[k\"I", 69);
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1Z");
      jSONScanner0.token = 58;
      byte[] byteArray0 = jSONScanner0.bytesValue();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("O`.l)$f<$Z Y~20ulH", (-1587));
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"0U]h5Bbx'");
      jSONScanner0.skipString();
      assertNull(jSONScanner0.stringDefaultValue());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Mv\nN", 8);
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1Mv
         // N
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/}$:%M");
      jSONScanner0.skipObject();
      assertFalse(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",8'xXQBJbD<vI`_");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1,8'xXQBJbD<vI`_
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"parseInt error : \":-99,\"illegal json, \":-99,\"\":99,\"8' XQBJbD\":{},\"illegal str, \":true}");
      char[] charArray0 = new char[0];
      jSONScanner0.nextToken(63);
      Date date0 = jSONScanner0.scanFieldDate(charArray0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("YJe-}-4l", 79);
      char[] charArray0 = new char[8];
      jSONScanner0.copyTo(0, 5, charArray0);
      assertArrayEquals(new char[] {'Y', 'J', 'e', '-', '}', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\"N\"y\":g,\"z\":true,\"a\":[-99],\"b\":{}}", 0);
      char[] charArray0 = new char[23];
      jSONScanner0.arrayCopy(18, charArray0, 18, 0);
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      char[] charArray0 = jSONScanner0.sub_chars(0, 1);
      assertArrayEquals(new char[] {'-'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      char[] charArray1 = jSONScanner0.sub_chars(0, 0);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("?6--QBR83{fB$1UQe", 70);
      String string0 = jSONScanner0.subString(4, 4);
      assertEquals("QBR8", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"y\":7,\"\"@type\":\"\":true,\"a\":{},\"b\":false}");
      String string0 = jSONScanner0.subString(0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("pos ");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      jSONScanner0.scanSymbol(parserConfig0.symbolTable);
      jSONScanner0.stringVal();
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", class ");
      String string0 = jSONScanner0.stringVal();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"@8R.gHZDjq3pN^gO");
      char[] charArray0 = new char[8];
      jSONScanner0.stringDefaultValue = "l:K0_hkEb(";
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"org.joda.time.DateTimeZone\":{},\"color\":99,\"value\":true,\"value2\":false,\"number\":null}", (-2682));
      char[] charArray0 = new char[9];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"illegal \":0.0}");
      jSONScanner0.nextToken(128);
      jSONScanner0.nextToken((-850));
      String string0 = jSONScanner0.numberString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99", 0);
      jSONScanner0.nextToken((-2));
      char char0 = jSONScanner0.next();
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",8'xXQBJbD<vI`_");
      char char0 = jSONScanner0.next();
      assertEquals('8', char0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(Ljava/lang/Object;Ljava/lang/String;)V");
      char char0 = jSONScanner0.next();
      assertEquals('L', char0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" \"ruzRc]y~E.ERNdUa ");
      boolean boolean0 = jSONScanner0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.util.Collections$UnmodifiableMap");
      int int0 = jSONScanner0.indexOf('%', 65535);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0U]h5Bbx'");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      BigDecimal bigDecimal0 = jSONScanner0.decimalValue();
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=6) &*|0Tk@A):/@");
      jSONScanner0.nextToken();
      assertEquals(1, jSONScanner0.token());
      
      jSONScanner0.nextToken(0);
      jSONScanner0.decimalValue();
      assertFalse(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      BigDecimal bigDecimal0 = jSONScanner0.decimalValue();
      assertEquals((short) (-99), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      char char0 = jSONScanner0.charAt(0);
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"(Ljava/lang/reflect/Type;)Ljava/lang/Object;\":\"Apple\",\"org.joda.time.DateTimeZone\":{},\"com.alibaba.fastjson.serializer.PrimitiveArraySerializer\":99,\"value\":{},\"value2\":false,\"\":null}", (-2682));
      char char0 = jSONScanner0.charAt(44);
      assertEquals('t', char0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONScanner jSONScanner0 = new JSONScanner("", 19);
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"pos 0, line 1, column 1{\"(Ljava/lang/reflect/Type;)Ljava/lang/Object;\":\"Apple\",\"org.joda.time.DateTimeZone\":{\"\":\"a string\",\"\"@type\":\"-99\":[]},\"com.alibaba.fastjson.serializer.PrimitiveArraySerializer\":false,\"illegal state. \":false,\"value2\":true,\"\":null,\"x\":false}");
      jSONScanner0.scanString();
      byte[] byteArray0 = jSONScanner0.bytesValue();
      assertArrayEquals(new byte[] {(byte) (-73), (byte)42, (byte)94}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.serializer.AtomicCodec\":\"hello\",\"\"@type\":\"{}\":-99,\"illegal json, \":true,\"\":[{}],\"8' XQBJbD\":\"a string\",\"9\":-99}");
      SymbolTable symbolTable0 = new SymbolTable(1);
      String string0 = jSONScanner0.addSymbol(2, 39, 76, symbolTable0);
      assertEquals("com.alibaba.fastjson.serializer.AtomicC", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99", 0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      jSONScanner0.addSymbol(0, 0, 2396, defaultJSONParser0.symbolTable);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-99\":99,\"illegal json, \":{},\"\":[{},\"a string\",false,true],\"8' XQBJbD\":\"a string\",\"illegal str, \":false,\":\"hello\",\":-99}", (-1038));
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars((-1038), (-1038));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" \"ruzRc]y~E.ERNdUa ");
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('3', '3', 'n', 'n', 'n');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal str, \":\"a string\",\"\"@type\":\"\"1=\"\":null}");
      jSONScanner0.nextToken(57);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 30, line 1, column 31{\"illegal str, \":\"a string\",\"\"@type\":\"\"1=\"\":null}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.serializer.AtomicCodec\":\"hello\",\"\"@type\":\"{}\":-99,\"illegal json, \":true,\"\":[{}],\"8' XQBJbD\":\"a string\",\"9\":-99}");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"pos 0, line 1, column 1{\"(Ljava/lang/reflect/Type;)Ljava/lang/Object;\":\"Apple\",\"org.joda.time.DateTimeZone\":{\"\":\"a string\",\"\"@type\":\"-99\":[]},\"com.alibaba.fastjson.serializer.PrimitiveArraySerializer\":false,\"illegal state. \":false,\"value2\":true,\"\":null,\"x\":false}");
      // Undeclared exception!
      try { 
        jSONScanner0.scanTypeName((SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99", (-1828));
      jSONScanner0.bp = (-1828);
      // Undeclared exception!
      try { 
        jSONScanner0.scanLong('\u0000');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",8' XQBJbD<vlI`_");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 41);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.serializer.SerializeConfig\":-99,\"illegal json, \":\"a string\",\"\":[99],\"8' XQBJbD\":\"a string\",\"illegal str, \":true}");
      char[] charArray0 = new char[0];
      jSONScanner0.nextToken(57);
      jSONScanner0.skipObject(false);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("*K");
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 18);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("?((Q");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, 18, defaultJSONParser0.symbolTable);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"W$sCvo[;qPH3P9Q}m");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ffT*EpN=T)}?");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("QXl");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"1a =tring\"");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal json, \":\"a string\",\"\":true,\"8' XQBJbD\":\"a string\",\"illegal str, \":true}");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%pK>x+5");
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal json.");
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'x}X8stc");
      jSONScanner0.bp = 108;
      // Undeclared exception!
      try { 
        jSONScanner0.info();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.JSONScanner");
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"not suppo\",\"org.joda.time.DateTimeZone\":{\"x\":true},\"unclosed str, \":[null],\"value\":true,\"value2\":false,\"java.util.Collections$Unmodifiable\":null}", (-2682));
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(4, 'T', charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-969", 73);
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-1427));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",8' XQBJbD<vlI`_");
      // Undeclared exception!
      try { 
        jSONScanner0.charArrayCompare((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("0U]h5Bbx'", (-1), (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5999", 30);
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.bytesValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"$q*@xxl8jNfIb", (-202));
      SymbolTable symbolTable0 = new SymbolTable(1270);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol((-202), 46, 34, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\t");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      jSONScanner0.addSymbol(34, Integer.MAX_VALUE, 34, parserConfig0.symbolTable);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"\"@type\":\"pos 0, line 1, column 1{\"(Ljava/lang/reflect/Type;)Ljava/lang/Object;\":\"Apple\",\"org.joda.time.DateTimeZone\":{\"\":\"a string\",\"\"@type\":\"-99\":[]},\"com.alibaba.fastjson.serializer.PrimitiveArraySerializer\":false,\"illegal state. \":false,\"value2\":true,\"\":null,\"x\":false}");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(2, (-763), (-763), parserConfig0.symbolTable);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-4130), (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 45, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, '7');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, '{');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal str, \":1.0,\"ns5hm_yw\":{\"ns5hm_yw\":\"a string\"}}");
      jSONScanner0.nextToken(57);
      long[] longArray0 = new long[8];
      jSONScanner0.seekObjectToField(longArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"1a =tring\"", (-2682));
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("F~`RdZRv$4n]", 0);
      jSONScanner0.skipArray(true);
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0U]h5Bbx'");
      jSONScanner0.skipArray(false);
      assertEquals(3, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ull\"@type\":\"pos 0, line 1, column 1{\"(Ljava/lang/reflect/Type;)Ljava/lang/Object;\":\"Apple\",\"org.joda.time.DateTimeZone\":{\"\":\"a string\",\"\"@type\":\"-99\":[]},\"com.alibaba.fastjson.serializer.PrimitiveArraySerializer\":false,\"illegal state. \":false,\"value2\":true,\"\":null,\"x\":false}", (-1145));
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1ull\"@type\":\"pos 0, line 1, column 1{\"(Ljava/lang/reflect/Type;)Ljava/lang/Object;\":\"Apple\",\"org.joda.time.DateTimeZone\":{\"\":\"a string\",\"\"@type\":\"-99\":[]},\"com.alibaba.fastjson.serializer.PrimitiveArraySerializer\":false,\"illegal state. \":false,\"value2\":true,\"\":null,\"x\":false}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5m`}}4UjqXGxAG");
      jSONScanner0.skipObject(false);
      assertEquals(13, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ffT*EpN=T)}?", 1931);
      // Undeclared exception!
      try { 
        jSONScanner0.subString(1931, 1931);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      boolean boolean0 = JSONScanner.charArrayCompare("fastjson.parser.autoTypeSupport", 0, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("CNTi_A taky", (-60), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = JSONScanner.charArrayCompare("com.alibaba.fastjson.JSONReader", (-60), charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      char char0 = jSONScanner0.charAt(65);
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.isEOF();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("K0Uh5Bbx'");
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo((-1704), (-1704), (char[]) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"pos 0, line , column 1{\"(Ljava/lang/reflect/Type;)Ljava/lang/Object;\":\"Apple\",\"org.joda.time.DateTimeZone\":{\"\":\"a string\",\"\"@type\":\"-99\":[]},\"com.alibaba.fastjson.serializer.PrimitiveArraySerializer\":false,\"illegal state. \":false,\"value2\":true,\"\":null,\"x\":false}");
      int int0 = jSONScanner0.indexOf('r', 32);
      assertEquals(45, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"pos 0, line 1, column 1{\"(Ljava/lang/r<flect/Type;Ljava/lang/Object;\":\"Apple\",\"org.joda.time.DateTimeZone\":{\":\"a string\",\"\"@type\":\"-99\":[]},\"com.alibaba.fastjson.serializer.PrimitiveArraySerializer\":fale,\"illegal state. \":false,\"value2\":true,\"\":null,\"x\":false}");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\"@type\":\"pos 0, line 1, column 1{\"(Ljava/lang/r<flect/Type;Ljava/lang/Object;\":\"Apple\",\"org.joda.time.DateTimeZone\":{\":\"a string\",\"\"@type\":\"-99\":[]},\"com.alibaba.fastjson.serializer.PrimitiveArraySerializer\":fale,\"illegal state. \":false,\"value2\":true,\"\":null,\"x\":false}");
      String string0 = jSONScanner0.scanTypeName(defaultJSONParser0.symbolTable);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"_-j");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\"@type\":\"_-j");
      String string0 = jSONScanner0.scanTypeName(defaultJSONParser0.symbolTable);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",8' XQBJbD<vlI`_");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",8' XQBJbD<vlI`_");
      String string0 = jSONScanner0.scanTypeName(defaultJSONParser0.symbolTable);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal str, \":1.0}");
      jSONScanner0.nextToken(57);
      long[] longArray0 = new long[8];
      jSONScanner0.seekObjectToField(longArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal str, \":\"a string\",\"ns5hm_yw\":{},\"illegal state. \":99}");
      jSONScanner0.nextToken(57);
      long[] longArray0 = new long[0];
      jSONScanner0.seekObjectToField(longArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal str, \":1.0,\"ns5hm_yw\":true,\"rg.\":null,\"x\":true,\"@*M\":null}");
      jSONScanner0.nextToken(93);
      long[] longArray0 = new long[2];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ns5hm_yw\":{\"W$sCvo[;\":\"a string\"},\", column \":{},\", column \":[]}");
      jSONScanner0.nextToken(57);
      long[] longArray0 = new long[0];
      jSONScanner0.seekObjectToField(longArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ns5hm_yw\":false,\"\":99}");
      jSONScanner0.nextToken(57);
      long[] longArray0 = new long[8];
      jSONScanner0.bp = 268435467;
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal str, \":\"a string\"}");
      jSONScanner0.nextToken(57);
      long[] longArray0 = new long[0];
      int int0 = jSONScanner0.seekObjectToField(longArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",8'xXQBJbD<vI`_");
      jSONScanner0.nextToken(2935);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ns5hm_yw\":{\"illegal str, \":99,\"ullnot support type :\":false},\"unclosed str, \":[]}");
      jSONScanner0.nextToken(57);
      jSONScanner0.seekObjectToField((long) 268435456, false);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"1<:ViB5[~\":0.0,\"L{@U%6@=Y\":[]}");
      jSONScanner0.nextToken(128);
      int int0 = jSONScanner0.seekObjectToField(1242L, true);
      assertEquals(14, jSONScanner0.token());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal str, \":\"a string\",\"ns5hm_yw\":{\"index must > 0, but \":\"a string\"},\"illegal json.\":99,\"index must > 0, but \":false,\"com.alibaba.fastjson.parser.JSONScanner\":true,\", column \":null}");
      jSONScanner0.nextToken(0);
      int int0 = jSONScanner0.seekObjectToField((long) 0, false);
      assertEquals(20, jSONScanner0.token());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"1<:ViB5[~\":{},\"ullnot su\":\"a string\",\"unclosed str\":true}");
      jSONScanner0.nextToken(0);
      jSONScanner0.seekObjectToField((-762L), false);
      jSONScanner0.scanDate('n');
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal str, \":-99,\"ns5hm_yw\":{\"\"@type\":\"\"@type\":\"pos 0, line 1, column 1{\"(Ljava/lang/reflect/Type;)Ljava/lang/Object;\":\"Apple\",\"org.joda.time.DateTimeZone\":{\":\"a string\",\"\"@type\":\"-99\":[]},\"com.alibaba.fastjson.serializer.PrimitiveArraySerializer\":fale,\"illegal state. \":false,\"value2\":true,\"\":null,\"x\":false}\":true},\"illegal json.\":99,\"com.alibaba.fastjson.parser.JSONScanner\":true,\"(Ljava/lang/reflect/Type;Ljava/lang/Object;)Z\":\"a string\"}");
      jSONScanner0.nextToken(9);
      jSONScanner0.seekObjectToField((long) 9, false);
      assertEquals(446, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ns5hm_yw\":{\"index must > 0, but \":\"a string\"},\"illegal json.\":99,\"index must > 0, but \":false,\"com.alibaba.fastjson.parser.JSONScanner\":true,\", column \":null,\"beanInfo\":99}");
      jSONScanner0.nextToken(0);
      int int0 = jSONScanner0.seekObjectToField((long) 0, false);
      assertEquals(20, jSONScanner0.token());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal str, \":-99,\"ns5hm_yw\":{\"W$sCvo[;\":\"a string\"},\", column \":{}}");
      jSONScanner0.nextToken(57);
      int int0 = jSONScanner0.seekObjectToField((long) 2441, true);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-!yL~75!/\":0.0}");
      jSONScanner0.nextToken(26085);
      jSONScanner0.seekObjectToField(1051L, false);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal str, \":\"a string\",\"ns5hm_yw\":{\"index must > 0, but \":\"a string\",\"\"@type\":\"=bq\":99},\"illegal json.\":99,\"index must > 0, but \":false,\"com.alibaba.fastjson.parser.JSONScanner\":true,\", column \":null}");
      jSONScanner0.nextToken(0);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 76, line 1, column 77{\"illegal str, \":\"a string\",\"ns5hm_yw\":{\"index must > 0, but \":\"a string\",\"\"@type\":\"=bq\":99},\"illegal json.\":99,\"index must > 0, but \":false,\"com.alibaba.fastjson.parser.JSONScanner\":true,\", column \":null}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.serializer.AtomicCodec\":\">E],>-v6k\",\"8'xXQBJbD\":null,\"illegal json, \":true,\"\":[]}");
      jSONScanner0.nextToken(0);
      int int0 = jSONScanner0.seekObjectToField((-3750763034362895579L), false);
      assertEquals(14, jSONScanner0.token());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.serializer.AtomicCodec\":\">E],>-v6k\",\"\"@type\":\"{\"ns5hm_yw\":{\"\"@type\":\"{\"illegal str, \":\"a string\",\"ns5hm_yw\":{}}\":99},\"\"@type\":\"{\"illegal str, \":\"a string\",\"ns5hm_yw\":{}}\":{}}\":99,\"illegal json, \":true,\"\":null,\"8' XQBJbD\":\"a string\",\"ullullnot support type :\":null}");
      jSONScanner0.nextToken(57);
      int int0 = jSONScanner0.seekObjectToField((-3750763034362895579L), false);
      assertEquals(12, jSONScanner0.token());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.serializer.AtomicCodec\":true,\"8'xXQBJD\":99,\"illegal json, \":true,\"\":99,\"ullullnot support type :\":99}");
      jSONScanner0.nextToken(0);
      int int0 = jSONScanner0.seekObjectToField((-3750763034362895579L), false);
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ns5hm_yw\":{\"\"@type\":\"{\"illegal str, \":\"a string\",\"ns5hm_yw\":{}}\":99},\"\"@type\":\"{\"illegal str, \":\"a string\",\"ns5hm_yw\":{}}\":{}}");
      jSONScanner0.nextToken(57);
      assertEquals(12, jSONScanner0.token());
      
      int int0 = jSONScanner0.seekObjectToField((-26639035867733124L), false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",8'xXQBJbD<vI`_");
      jSONScanner0.nextToken(26085);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 26085, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\" XQ\":7,\"z\":{},\"a\":[],\", line \":false}");
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((-6976602508726000783L), false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unknown
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"1<:ViB5[~\":{},\"ullnot su\":\"a string\",\"unclosed str\":true,\"b+#{]\u0001\":false,\"xx\":true}");
      jSONScanner0.token = 15;
      int int0 = jSONScanner0.seekObjectToField((-762L), false);
      assertEquals(12, jSONScanner0.token());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal str, \":-99,\"ns5hm_yw\":{\"W$sCvo[;\":\"a string\"},\", column \":{}}");
      jSONScanner0.nextToken(57);
      long[] longArray0 = new long[0];
      jSONScanner0.seekObjectToField(longArray0);
      int int0 = jSONScanner0.seekObjectToField((long) 268435456, false);
      assertEquals(72, jSONScanner0.pos());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 57);
      jSONScanner0.nextToken(57);
      int int0 = jSONScanner0.seekObjectToField((long) 57, false);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M[p5L3");
      jSONScanner0.nextToken((-2697));
      jSONScanner0.nextToken((-2697));
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json.
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99", 19);
      jSONScanner0.nextToken(0);
      assertEquals(2, jSONScanner0.token());
      
      jSONScanner0.nextToken(19);
      boolean boolean0 = jSONScanner0.seekArrayToItem(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("22v-DOh9j");
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem((-1114));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -1114
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",8' XQBJbD<vlI`_", 34);
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(34);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"com.alib");
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",8'xXQBJbD<vI`_");
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"pos 0, line 1, column 1{\"(Ljava/lang/reflect/Type;)Ljava/lang/Object;\":\"Apple\",\"org.joda.time.DateTimeZone\":{\"\":\"a string\",\"\"@type\":\"-99\":[]},\"com.alibaba.fastjson.serializer.PrimitiveArraySerializer\":false,\"illegal state. \":false,\"value2\":true,\"\":null,\"x\":false}");
      jSONScanner0.bp = 1004;
      jSONScanner0.skipArray(true);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("`RdZRv$4n]", 0);
      jSONScanner0.skipArray();
      long long0 = jSONScanner0.scanLong('e');
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal str, \":1.0,\"ns5hm_yw\":[true,[true],null],\"rg.\":false}");
      jSONScanner0.nextToken(2441);
      int int0 = jSONScanner0.seekObjectToField((long) 2441, false);
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":true,\"y\":7,\"\"x\":\"hell\":true,\"a\":[-99],\"b\":{}}", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"x\":true,\"y\":7,\"\"x\":\"hell\":true,\"a\":[-99],\"b\":{}}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2+y|hmy|");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 12+y|hmy|
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal str, \":false,\"ns5hm_yw\":{},\"illegal json.\":-99,\"(Ljava/lang/reflect/Type;Ljava/lang/Object;)Z\":\"a string\"\"\"@type\":\"\"@type\":\"pos 0, line 1, column 1{\"(Ljava/lang/reflect/Type;)Ljava/lang/Object;\":\"Apple\",\"org.joda.time.DateTimeZone\":{\":\"a string\",\"\"@type\":\"-99\":[]},\"com.alibaba.fastjson.serializer.PrimitiveArraySerializer\":fale,\"illegal state. \":false,\"value2\":true,\"\":null,\"x\":false}\":null}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ffT*EpN=T)}?");
      jSONScanner0.bp = 15;
      jSONScanner0.skipObject(false);
      assertFalse(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal str, \":\"a string\",\"ns5hm_yw\":{\"W$sCvo[;\":\"a string\"},\", column \":{}}");
      jSONScanner0.nextToken(57);
      jSONScanner0.seekObjectToField((long) 268435456, false);
      assertEquals(13, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"pos 0, line 1, column 1{\"(Ljava/lang/reflect/Type;)Ljava/lang/Object;\":\"Apple\",\"org.joda.time.DateTimeZone\":{\"\":\"a string\",\"\"@type\":\"-99\":[]},\"com.alibaba.fastjson.serializer.PrimitiveArraySerializer\":false,\"illegal state. \":false,\"value2\":true,\"\":null,\"x\":false}");
      jSONScanner0.skipObject(true);
      assertEquals(16, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"1<:ViB5[~\":{\"-!yL~75!/\":null},\"ullnot su\":[],\"unclosed str\":true}");
      jSONScanner0.nextToken(0);
      jSONScanner0.skipObject(true);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ns5hm_yw\":{\"\"@type\":\"{\"illegal str, \":\"a string\",\"ns5hm_yw\":{}}\":99},\"\"@type\":\"{\"illegal str, \":\"a string\",\"ns5hm_yw\":{}}\":{}}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"ns5hm_yw\":{\"\"@type\":\"{\"illegal str, \":\"a string\",\"ns5hm_yw\":{}}\":99},\"\"@type\":\"{\"illegal str, \":\"a string\",\"ns5hm_yw\":{}}\":{}}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ff*EpN=T)}?");
      jSONScanner0.skipObject(true);
      assertEquals(10, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",8'xXQBJbD<vI`_");
      char[] charArray0 = new char[8];
      jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\t");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.serializer.AtomicCodec\":\"hello\",\"\"@type\":\"{}\":-99,\"illegal json, \":true,\"\":[{}],\"8' XQBJbD\":\"a string\",\"9\":-99}");
      jSONScanner0.nextToken(0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldStringArray(charArray0, (-1), defaultJSONParser0.symbolTable);
      assertEquals(4, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.serializer.AtomicCodec\":\"hello\",\"\"@type\":\"{}\":-99,\"illegal json, \":true,\"\":[{}],\"8' XQBJbD\":\"a string\",\"9\":-99}");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldStringArray(charArray0, (-2), defaultJSONParser0.symbolTable);
      assertEquals(12, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1Z");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      jSONScanner0.scanFieldStringArray((char[]) null, 1, defaultJSONParser0.symbolTable);
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldStringArray(charArray0, (-1274), defaultJSONParser0.symbolTable);
      jSONScanner0.skipObject(false);
      assertEquals('c', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.serializer.AtomicCodec\":\"hello\",\"\"@type\":\"{}\":-99,\"illegal json, \":true,\"\":[{}],\"8' XQBJbD\":\"a string\",\"9\":-99}");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldStringArray(charArray0, (-1), defaultJSONParser0.symbolTable);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1");
      jSONScanner0.scanDate(';');
      assertEquals(4, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nL(}!e<}cxM2_0");
      jSONScanner0.scanDate('P');
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("05]h5Bbx'");
      jSONScanner0.scanDate(';');
      assertEquals('0', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("YJe-}-4l");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\"@type\":\"GH|'MPT/suTfpf7", parserConfig0, (-72));
      jSONScanner0.scanSymbolUnQuoted(defaultJSONParser0.symbolTable);
      jSONScanner0.scanDate('D');
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"po");
      // Undeclared exception!
      try { 
        jSONScanner0.scanDate('}');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not support type :");
      long long0 = jSONScanner0.scanLong(' ');
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"1a =ing\"");
      long long0 = jSONScanner0.scanLong('[');
      assertEquals(0L, long0);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99", (-1828));
      long long0 = jSONScanner0.scanLong('E');
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals(99L, long0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 5, 51);
      double double0 = jSONScanner0.scanDouble('\u0000');
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 0);
      double double0 = jSONScanner0.scanDouble('!');
      assertEquals(0.0, double0, 0.01);
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not support type :");
      double double0 = jSONScanner0.scanDouble('L');
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-99\":-99,\"illegal json, \":{\"pos \":true},\"\":\"a string\",\"8' XQBJbD\":\"a string\",\"illegal str, \":true}");
      jSONScanner0.nextToken(57);
      double double0 = jSONScanner0.scanDouble('S');
      assertEquals(12, jSONScanner0.token());
      assertEquals((-99.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ffT*EpN=T)}?");
      jSONScanner0.scanDouble('z');
      assertEquals('f', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\t");
      double double0 = jSONScanner0.scanDouble('#');
      assertEquals('\t', jSONScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"1a =in\"");
      double double0 = jSONScanner0.scanDouble('w');
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",8' XQBJbD<vlI`w");
      jSONScanner0.nextToken(52);
      int int0 = jSONScanner0.scanInt('\'');
      assertEquals(16, jSONScanner0.token());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not support type :");
      int int0 = jSONScanner0.scanInt(' ');
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-99\":99,\"illegal json, \":{},\"\":[{},\"a string\",false,true],\"8' XQBJbD\":\"a string\",\"illegal str, \":false,\":\"hello\",\":-99}", 52);
      jSONScanner0.nextToken((-1038));
      int int0 = jSONScanner0.scanInt('\'');
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals((-99), int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"1a =in\"");
      int int0 = jSONScanner0.scanInt('w');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"pos 0, line 1, column 1{\"(Ljava/lang/reflect/Type;)Ljava/lang/Object;\":\"Apple\",\"org.joda.time.DateTimeZone\":{\"\":\"a string\",\"\"@type\":\"-99\":[]},\"com.alibaba.fastjson.serializer.PrimitiveArraySerializer\":false,\"illegal state. \":false,\"value2\":true,\"\":null,\"x\":false}", 17);
      jSONScanner0.scanInt('f');
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\t");
      jSONScanner0.scanInt(';');
      assertEquals('\t', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0U]h5Bbx'");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1<:ViB5[~&S");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"1a=tEing\"");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 41);
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"1a =in\"", (-2666));
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99", 79);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"_-j");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONScanner jSONScanner0 = new JSONScanner("$s");
      long long0 = jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 82);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      Class<Object> class0 = Object.class;
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals(16, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      JSONScanner jSONScanner0 = new JSONScanner("ullnot support type :", (-351));
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\t\":\"a string\",\"illegal json, \":\"a string\",\"\":[\"a string\"],\"8' XQBJbD\":\"a string\",\"illegal str, \":true,\"parseInt error : \":false,\"unclosed \":null,\"Path deserialize erorr\":\"a string\"}");
      jSONScanner0.nextToken(57);
      char[] charArray0 = new char[0];
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":true,\"\":7,\"z\":true,\"a\":[]}", 0);
      char[] charArray0 = new char[2];
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 18);
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("YJe-}-4l");
      char[] charArray0 = new char[0];
      ParserConfig parserConfig0 = ParserConfig.global;
      jSONScanner0.scanSymbolUnQuoted(parserConfig0.symbolTable);
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3y`&");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3-!yL~75!/DN5qH#7$v");
      char[] charArray0 = new char[0];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal str, \":[]}");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"3`P&", (-2228));
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"");
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\t\":\"a string\",\"illegal json, \":\"a string\",\"\":[\"a string\"],\"8' XQBJbD\":\"a string\",\"illegal str, \":true,\"parseInt error : \":false,\"unclosed \":null,\"Path deserialize erorr\":\"a string\"}");
      jSONScanner0.nextToken(57);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals(12, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"po");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" \"ruzRc]y~E.ERNdUa ", 52);
      char[] charArray0 = new char[9];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("[z", 0);
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"1<:ViB5[~\":-99,\"\"@type\":\"$s\":\"a string\"}");
      jSONScanner0.nextToken(0);
      char[] charArray0 = new char[0];
      jSONScanner0.nextToken((-209));
      jSONScanner0.matchField2(charArray0);
      int int0 = jSONScanner0.scanFieldInt(charArray0);
      assertEquals(1, jSONScanner0.pos());
      assertEquals((-99), int0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("zXeo");
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"1a=tEing\"");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('0', '1', '0', '0', '1', '1', (-2450), (-2450));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('7', '7', '7', '7', 'm', '7', 'm', 'm');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('0', '0', '0', '0', '0', '0', '0', '0');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('0', '0', '0', '&', '&', '&', 0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('0', '0', '\\', '?', 'P', '?', 0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('0', '1', '*', '1', ' ', 'a', (-2450), 9);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('2', '/', 'D', 'R', '2', 'v', 77, 44);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('0', '0', '0', '0', '1', '0', 44, 44);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate(')', '\\', ',', '\\', '\\', '\\', 49, ')');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99", 57);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('-', 'X', 'Z');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ffT*EpN=T)}?");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('f', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-99\":99,\"illegal json, \":\"a string\",\"\":[[true],{},false],\"8' XQBJbD\":\"a string\",\"illegal str, \":false}", (-1038));
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal str, \":1.0,\"ns5hm_yw\":\"a string\",\"\"@type\":\"0U]h5Bbx'\":[]}");
      jSONScanner0.nextToken(0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(Ljava/util/Collection;C)V");
      jSONScanner0.nextToken(17);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("json-path can not be null or empty");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('j', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"1a =in\"", (-2666));
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WnUT&_V=q2Q3_", 1829);
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('W', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.serializer.AtomicCodec\":\"hello\",\"\"type\":\"{}\":-99,\"illegal json, \":true,\"\":[{],\"' XQBJbD\":\"a strin\",\"9\":-99}");
      jSONScanner0.nextToken(0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal str, \":1.0,\"ns5hm_yw\":\"a string\",\"\"@type\":\"0U]h5Bbx'\":[]}");
      jSONScanner0.nextToken(0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      jSONScanner0.numberString();
      assertEquals(4, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ");
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(51, 51);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("UNp8OH\"@tS");
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      boolean boolean0 = jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",8'xXQBJbD<DvI`_");
      char[] charArray0 = new char[7];
      int int0 = jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = JSONScanner.charArrayCompare(">+Vw=FEr", 1864, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ffT*EpN=T)}?");
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('u', 'u', 'u', 'u', 'u', 'u');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ull");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(1819, charArray0, 1819, 102);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal str, \":1.0,\"ns5hm_yw\":[true,[true],null],\"rg.\":false,\"e~PW<(t R\":99}");
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(4, (-2985), 3368, (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"1a =tring\"");
      jSONScanner0.scanDate(';');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("@@%r!x52s%-kKgb>", 926);
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1@@%r!x52s%-kKgb>
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
