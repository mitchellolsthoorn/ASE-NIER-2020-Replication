/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 22:24:49 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.JSONValidator;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.ObjectSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.spi.Module;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.io.BufferedOutputStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.ZoneId;
import java.time.chrono.ThaiBuddhistDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TimeZone;
import java.util.UUID;
import java.util.function.Consumer;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(90);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(4263);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath0 = new JSONPath("Zevx,n{;!bD}(03-", serializeConfig0, parserConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("Zevx,n{;!bD}(03-", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      jSONPath0.deepSet(bigDecimal0, "fastjson.parser.safeMode", 1438188964080769615L, classLoader0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("Zevx,n{;!bD}(03-", jSONPath0.getPath());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      SerializeConfig serializeConfig1 = SerializeConfig.globalInstance;
      assertEquals("@type", serializeConfig1.getTypeKey());
      assertTrue(serializeConfig1.isAsmEnable());
      assertFalse(serializeConfig1.equals((Object)serializeConfig0));
      assertNotNull(serializeConfig1);
      assertNotSame(serializeConfig1, serializeConfig0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("l);8%");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath jSONPath1 = new JSONPath("\\-");
      assertEquals("\\-", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("l);8%");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Float float0 = new Float(1000.0);
      assertEquals(1000.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/9");
      assertEquals("/stackTrace/9", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      JSONPath jSONPath1 = JSONPath.compile("kotlin.ranges.CharRange");
      assertEquals("kotlin.ranges.CharRange", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      String string0 = "VJFD)YpO:Xe1";
      Collection<Object> collection0 = jSONPath1.getPropertyValues(parserConfig0);
      assertFalse(collection0.contains("/stackTrace/9"));
      assertEquals("kotlin.ranges.CharRange", jSONPath1.getPath());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(collection0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertNotSame(jSONPath1, jSONPath0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("VJFD)YpO:Xe1", parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      assertEquals("*", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("*", parserConfig0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("fastjson.parser.deny.internal");
      assertNotNull(jSONPath_NotNullSegement0);
      
      Float float0 = new Float((float) 1);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny.internal");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath1 = JSONPath.compile("Code");
      assertEquals("Code", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement(".");
      assertNotNull(jSONPath_Segment0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      Byte byte0 = new Byte((byte)16);
      assertEquals((byte)16, (byte)byte0);
      assertNotNull(byte0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("Code", byte0, false);
      assertNotNull(jSONPath_ValueSegment0);
      
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('a', char0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("/stackTrace/12", "Zr|_$/_9", sQLTransientConnectionException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: /stackTrace/12", sQLFeatureNotSupportedException0.toString());
      assertEquals("Zr|_$/_9", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("/stackTrace/12", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLTimeoutException", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException((String) null, sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: /stackTrace/12", sQLFeatureNotSupportedException0.toString());
      assertEquals("Zr|_$/_9", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("/stackTrace/12", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertNull(sQLTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertNotNull(sQLTransientConnectionException1);
      
      SQLWarning sQLWarning0 = new SQLWarning("*");
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("*", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: *", sQLWarning0.toString());
      assertNotNull(sQLWarning0);
      
      Set<?> set0 = jSONPath0.keySet((Object) sQLWarning0);
      assertEquals("*", jSONPath0.getPath());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("*", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: *", sQLWarning0.toString());
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNull(set0);
      assertNotSame(jSONPath0, jSONPath1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Code";
      stringArray0[1] = "fastjson.parser.deny.internal";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(aSMDeserializerFactory0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.size());
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      long long0 = 108L;
      Long long1 = new Long(108L);
      assertEquals(108L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      String string0 = "/stackTrace/6";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/6");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.next();
      String string1 = "Nxu,/C+X(ca=x5X";
      String string2 = "-";
      // Undeclared exception!
      try { 
        JSONPath.extract("Nxu,/C+X(ca=x5X", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -3
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      assertEquals("*", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("*", "*", 120);
      assertEquals("java.sql.SQLFeatureNotSupportedException: *", sQLFeatureNotSupportedException0.toString());
      assertEquals(120, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("*", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("*", sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      boolean boolean0 = jSONPath0.contains((Object) sQLFeatureNotSupportedException0);
      assertEquals("*", jSONPath0.getPath());
      assertEquals("java.sql.SQLFeatureNotSupportedException: *", sQLFeatureNotSupportedException0.toString());
      assertEquals(120, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("*", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("*", sQLFeatureNotSupportedException0.getSQLState());
      assertTrue(boolean0);
      
      Long long0 = new Long(3571L);
      assertEquals(3571L, (long)long0);
      assertNotNull(long0);
      
      Object object0 = JSONPath.eval((Object) jSONPath0, "/beanInfo/clazz/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type");
      assertEquals("*", jSONPath0.getPath());
      assertNull(object0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 120;
      intArray0[1] = (-2202);
      intArray0[2] = (-2202);
      intArray0[3] = 90;
      intArray0[4] = 120;
      intArray0[5] = 120;
      intArray0[6] = 120;
      intArray0[7] = (-2202);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("/beanInfo/clazz/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type", "YEiY", (-2202), intArray0);
      assertEquals(8, intArray0.length);
      assertEquals("YEiY", batchUpdateException0.getSQLState());
      assertEquals("/beanInfo/clazz/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: /beanInfo/clazz/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type", batchUpdateException0.toString());
      assertEquals((-2202), batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {120, (-2202), (-2202), 90, 120, 120, 120, (-2202)}, intArray0);
      assertNotNull(batchUpdateException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("-");
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: -", sQLFeatureNotSupportedException1.toString());
      assertEquals("-", sQLFeatureNotSupportedException1.getMessage());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertNotNull(sQLFeatureNotSupportedException1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-2202);
      objectArray0[1] = (Object) "WY+F6i@";
      objectArray0[2] = (Object) (-2202);
      objectArray0[3] = (Object) batchUpdateException0;
      objectArray0[4] = (Object) 90;
      objectArray0[5] = (Object) 90;
      objectArray0[6] = (Object) "-";
      jSONPath0.arrayAdd((Object) sQLFeatureNotSupportedException1, objectArray0);
      assertEquals(7, objectArray0.length);
      assertEquals("*", jSONPath0.getPath());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: -", sQLFeatureNotSupportedException1.toString());
      assertEquals("-", sQLFeatureNotSupportedException1.getMessage());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("MM6g{1");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath jSONPath1 = new JSONPath("/beanInfo/clazz/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type");
      assertEquals("/beanInfo/clazz/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("YEiY");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      JSONPath jSONPath0 = JSONPath.compile("");
      assertEquals("", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Meq\"U:y\u0007~");
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: Meq\"U:y\u0007~", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("Meq\"U:y\u0007~", sQLSyntaxErrorException0.getMessage());
      assertNotNull(sQLSyntaxErrorException0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      String[] stringArray0 = new String[9];
      stringArray0[2] = "";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Meq\"U:y\u0007~");
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Meq\"U:y\u0007~", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("Meq\"U:y\u0007~", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      Short short0 = new Short((short)3495);
      assertEquals((short)3495, (short)short0);
      assertNotNull(short0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, short0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      JSONPath jSONPath0 = JSONPath.compile("");
      assertEquals("", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Meq\"U:y\u0007~");
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("Meq\"U:y\u0007~", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: Meq\"U:y\u0007~", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      Short short0 = new Short((short)3495);
      assertEquals((short)3495, (short)short0);
      assertNotNull(short0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, short0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("D");
      assertEquals("D", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String string0 = jSONPath0.getPath();
      assertEquals("D", jSONPath0.getPath());
      assertEquals("D", string0);
      assertNotNull(string0);
      
      String string1 = "'/ lN|+aE-0A3\\";
      JSONPath jSONPath1 = new JSONPath("bR");
      assertEquals("bR", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      
      JSONPath jSONPath2 = JSONPath.compile("h");
      assertEquals("h", jSONPath2.getPath());
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertNotNull(jSONPath2);
      assertNotSame(jSONPath2, jSONPath1);
      assertNotSame(jSONPath2, jSONPath0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("'/ lN|+aE-0A3");
      assertEquals("'/ lN|+aE-0A3", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: '/ lN|+aE-0A3", sQLNonTransientException0.toString());
      assertNotNull(sQLNonTransientException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("D", "D", (-599));
      assertEquals((-599), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("D", sQLSyntaxErrorException0.getMessage());
      assertEquals("D", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: D", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("h", "D", sQLNonTransientException0);
      assertEquals("'/ lN|+aE-0A3", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: '/ lN|+aE-0A3", sQLNonTransientException0.toString());
      assertEquals("h", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: h", sQLNonTransientConnectionException0.toString());
      assertEquals("D", sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("=k|g\":UIB,p^", sQLNonTransientException0);
      assertEquals("'/ lN|+aE-0A3", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: '/ lN|+aE-0A3", sQLNonTransientException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: =k|g\":UIB,p^", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("=k|g\":UIB,p^", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[?_dS");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("com.alibaba.fastjson.util.ASMClassLoader$1");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '(, but '_'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Pattern pattern0 = Pattern.compile("b|eeP");
      assertEquals(0, pattern0.flags());
      assertEquals("b|eeP", pattern0.pattern());
      assertEquals("b|eeP", pattern0.toString());
      assertNotNull(pattern0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      assertNotNull(jSONPath_MultiIndexSegment0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("b|eeP", jSONPath_MultiIndexSegment0, false);
      assertNotNull(jSONPath_ValueSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("V:){");
      assertEquals("V:){", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("b|eeP", "V:){");
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("b|eeP", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: b|eeP", sQLNonTransientConnectionException0.toString());
      assertEquals("V:){", sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      boolean boolean1 = jSONPath_ValueSegment0.apply(jSONPath0, sQLNonTransientConnectionException0, (Object) null, sQLTimeoutException0);
      assertEquals("V:){", jSONPath0.getPath());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("b|eeP", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: b|eeP", sQLNonTransientConnectionException0.toString());
      assertEquals("V:){", sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_ValueSegment0, jSONPath_ValueSegment0, true);
      assertNotNull(jSONPath_FilterGroup0);
      
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(sQLTimeoutException0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      // Undeclared exception!
      jSONPath0.removePropertyValue(bigInteger0, "q~&VjV_VAG@#i**HI", false);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "XU_]";
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("XU_]");
      assertNotNull(jSONPath_NullSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      Long long0 = new Long(5L);
      assertEquals(5L, (long)long0);
      assertNotNull(long0);
      
      String string1 = "/beanInfo/clazz/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      DataTruncation dataTruncation0 = new DataTruncation(13, false, true, (-3620), 13, sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(dataTruncation0);
      
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) dataTruncation0, "Fzc/n(iO5`y#8.?Mu|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : Fzc/n(iO5`y#8.?Mu|
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("XU_]");
      assertNotNull(jSONPath_NullSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      Long long0 = new Long(5L);
      assertEquals(5L, (long)long0);
      assertNotNull(long0);
      
      String string0 = "/beanInfo/clazz/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      DataTruncation dataTruncation0 = new DataTruncation(13, false, true, (-3620), 13, sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertNotNull(dataTruncation0);
      
      String string1 = dataTruncation0.getLocalizedMessage();
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) dataTruncation0, "Fzc/n(iO5`y#8.?Mu|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : Fzc/n(iO5`y#8.?Mu|
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      String string0 = "eX0ln";
      String string1 = "P";
      JSONPath jSONPath0 = JSONPath.compile("eX0ln");
      assertEquals("eX0ln", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0, serializeConfig0);
      assertEquals("eX0ln", jSONPath0.getPath());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotNull(map0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1101);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1101)}, intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(jSONPath_WildCardSegment0, (String) null, (long) longArray0[0], jSONPath_MultiIndexSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      int int0 = 473;
      mockGregorianCalendar0.set(2442, 2442, 473);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2442,MONTH=2442,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=473,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertFalse(set0.isEmpty());
      assertEquals(3, set0.size());
      assertNotNull(set0);
      
      JSONPath jSONPath0 = new JSONPath("'/ lN|+aE-As3!");
      assertEquals("'/ lN|+aE-As3!", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String string0 = "lang";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=k|g\":UIB,p^");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.readOp();
      String string1 = "TkL?xE 8Bt-am^";
      JSONPath jSONPath1 = new JSONPath("TkL?xE 8Bt-am^");
      assertEquals("TkL?xE 8Bt-am^", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      
      // Undeclared exception!
      try { 
        jSONPath1.size((Object) mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : TkL?xE 8Bt-am^
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "*";
      JSONPath jSONPath0 = new JSONPath("*");
      assertEquals("*", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertEquals("*", jSONPath0.getPath());
      assertFalse(boolean0);
      
      long long0 = (-5194641081268104286L);
      Long long1 = new Long((-5194641081268104286L));
      assertEquals((-5194641081268104286L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(javaBeanSerializer0);
      
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, javaBeanSerializer0, hashMap0);
      assertEquals("*", jSONPath0.getPath());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(object0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_WildCardSegment0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      String string1 = "m";
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("m");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath jSONPath1 = new JSONPath("com.alibaba.fastjson.JSONPath$DoubleOpSegement");
      assertEquals("com.alibaba.fastjson.JSONPath$DoubleOpSegement", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!z<;vsu:B(f3)gdVDGq");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but 'z'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      JSONPath jSONPath0 = JSONPath.compile("0");
      assertEquals("0", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      boolean boolean0 = jSONPath0.isRef();
      assertEquals("0", jSONPath0.getPath());
      assertTrue(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("eX0ln");
      assertNotNull(jSONPath_JSONPathParser0);
      
      SQLException sQLException0 = new SQLException("0", "_7dgRi[R\"D[aY", (Throwable) null);
      assertEquals("0", sQLException0.getMessage());
      assertEquals("_7dgRi[R\"D[aY", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: 0", sQLException0.toString());
      assertNotNull(sQLException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Hx@_{Bik");
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("Hx@_{Bik", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Hx@_{Bik", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      Short short0 = new Short((short)3495);
      assertEquals((short)3495, (short)short0);
      assertNotNull(short0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      boolean boolean1 = JSONPath.eqNotNull(longArray0[0], bigDecimal0);
      assertEquals(2, longArray0.length);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = JSONPath.size((Object) "eX0ln", "0");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      assertEquals("*", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("*", "*", 122);
      assertEquals(122, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: *", sQLFeatureNotSupportedException0.toString());
      assertEquals("*", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("*", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      boolean boolean0 = jSONPath0.contains((Object) sQLFeatureNotSupportedException0);
      assertEquals("*", jSONPath0.getPath());
      assertEquals(122, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: *", sQLFeatureNotSupportedException0.toString());
      assertEquals("*", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("*", sQLFeatureNotSupportedException0.getMessage());
      assertTrue(boolean0);
      
      Long long0 = new Long(3571L);
      assertEquals(3571L, (long)long0);
      assertNotNull(long0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "*";
      stringArray0[1] = "*";
      stringArray0[2] = "*";
      stringArray0[3] = "*";
      stringArray0[4] = "*";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertEquals(5, stringArray0.length);
      assertNotNull(jSONPath_MultiPropertySegment0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 122;
      intArray0[1] = 122;
      intArray0[2] = (-1715);
      intArray0[3] = 122;
      intArray0[4] = 122;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(">g", "*", intArray0);
      assertEquals(5, intArray0.length);
      assertEquals("java.sql.BatchUpdateException: >g", batchUpdateException0.toString());
      assertEquals("*", batchUpdateException0.getSQLState());
      assertEquals(">g", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {122, 122, (-1715), 122, 122}, intArray0);
      assertNotNull(batchUpdateException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLFeatureNotSupportedException0);
      assertEquals(122, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: *", sQLFeatureNotSupportedException0.toString());
      assertEquals("*", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("*", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLFeatureNotSupportedException: *", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: *", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      Integer integer0 = new Integer(122);
      assertEquals(122, (int)integer0);
      assertNotNull(integer0);
      
      jSONPath0.deepSet("*", "*", 8121814285880789523L, integer0);
      assertEquals("*", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      assertEquals("*", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("*", parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      JSONPath jSONPath1 = JSONPath.compile("qN)ndjwpTK");
      assertEquals("qN)ndjwpTK", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) jSONPath1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      JSONPath jSONPath0 = JSONPath.compile("");
      assertEquals("", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Meq\"U:y\u0007~");
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("Meq\"U:y\u0007~", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: Meq\"U:y\u0007~", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "/stackTrace/0";
      stringArray0[2] = "";
      stringArray0[3] = "YEiY";
      stringArray0[4] = "H=;a$";
      stringArray0[5] = "YEiY";
      stringArray0[6] = "YEiY";
      stringArray0[7] = "";
      stringArray0[8] = "Meq\"U:y\u0007~";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(sQLSyntaxErrorException0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : H=;a$
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "b|eeP";
      Pattern pattern0 = Pattern.compile("b|eeP");
      assertEquals("b|eeP", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("b|eeP", pattern0.toString());
      assertNotNull(pattern0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      assertNotNull(jSONPath_MultiIndexSegment0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("b|eeP", jSONPath_MultiIndexSegment0, false);
      assertNotNull(jSONPath_ValueSegment0);
      
      String string1 = "V\\:){";
      JSONPath jSONPath0 = JSONPath.compile("V:){");
      assertEquals("V:){", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("b|eeP", "V:){");
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: b|eeP", sQLNonTransientConnectionException0.toString());
      assertEquals("V:){", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("b|eeP", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      Short short0 = new Short((short)3);
      assertEquals((short)3, (short)short0);
      assertNotNull(short0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException1.toString());
      assertNull(sQLClientInfoException1.getSQLState());
      assertNull(sQLClientInfoException1.getMessage());
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException1);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Float float0 = new Float(2105.739);
      assertEquals(2105.739F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = JSONPath.eqNotNull(short0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Long[] longArray0 = new Long[8];
      String string2 = "jj(W.<|";
      try { 
        Long.valueOf("jj(W.<|");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"jj(W.<|\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("D");
      assertEquals("D", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String string0 = jSONPath0.getPath();
      assertEquals("D", jSONPath0.getPath());
      assertEquals("D", string0);
      assertNotNull(string0);
      
      JSONPath jSONPath1 = new JSONPath("bR");
      assertEquals("bR", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      
      JSONPath jSONPath2 = JSONPath.compile("h");
      assertEquals("h", jSONPath2.getPath());
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertNotNull(jSONPath2);
      assertNotSame(jSONPath2, jSONPath0);
      assertNotSame(jSONPath2, jSONPath1);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("'/ lN|+aE-As3!");
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: '/ lN|+aE-As3!", sQLNonTransientException0.toString());
      assertEquals("'/ lN|+aE-As3!", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNotNull(sQLNonTransientException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("D", "D", (-586));
      assertEquals((-586), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: D", sQLSyntaxErrorException0.toString());
      assertEquals("D", sQLSyntaxErrorException0.getMessage());
      assertEquals("D", sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("h", "D", sQLNonTransientException0);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: '/ lN|+aE-As3!", sQLNonTransientException0.toString());
      assertEquals("'/ lN|+aE-As3!", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: h", sQLNonTransientConnectionException0.toString());
      assertEquals("D", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("h", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("=k|g\":UIB,p^", sQLNonTransientException0);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: '/ lN|+aE-As3!", sQLNonTransientException0.toString());
      assertEquals("'/ lN|+aE-As3!", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: =k|g\":UIB,p^", sQLRecoverableException0.toString());
      assertEquals("=k|g\":UIB,p^", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[?_dS");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("com.alibaba.fastjson.util.ASMClassLoader$1");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser1.explain();
      assertEquals(5, jSONPath_SegmentArray0.length);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_SegmentArray0);
      assertNotSame(jSONPath_JSONPathParser1, jSONPath_JSONPathParser0);
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      assertNotNull(jSONPath_SizeSegment0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("D", "0000-00-00", sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: '/ lN|+aE-As3!", sQLNonTransientException0.toString());
      assertEquals("'/ lN|+aE-As3!", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: h", sQLNonTransientConnectionException0.toString());
      assertEquals("D", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("h", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("0000-00-00", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("D", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: D", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      Short short0 = new Short((short)74);
      assertEquals((short)74, (short)short0);
      assertNotNull(short0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      Class<Double> class0 = Double.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath1.getJavaBeanDeserializer(class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      assertEquals("bR", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath2));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(javaBeanDeserializer0);
      assertNotSame(jSONPath1, jSONPath2);
      assertNotSame(jSONPath1, jSONPath0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) "0000-00-00");
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotNull(map0);
      
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      assertNotNull(map1);
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map1);
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      assertNotNull(javaBeanSerializer0);
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(128);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues(jSONPath_ArrayAccessSegment0);
      assertFalse(list0.contains("D"));
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(class0, "[?_dS", list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "{\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}x";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}x");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-683L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "{\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}x";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}x");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-1559L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("D");
      assertEquals("D", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String string0 = jSONPath0.getPath();
      assertEquals("D", jSONPath0.getPath());
      assertEquals("D", string0);
      assertNotNull(string0);
      
      boolean boolean0 = jSONPath0.isRef();
      assertEquals("D", jSONPath0.getPath());
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(47);
      assertEquals(47, (int)integer0);
      assertNotNull(integer0);
      
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      boolean boolean1 = JSONPath.isDouble(class0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "D";
      stringArray0[1] = "kotlin.ranges.CharRange";
      stringArray0[2] = "kotlin.ranges.CharRange";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(jSONPath_MultiPropertySegment0);
      
      JSONPath jSONPath1 = JSONPath.compile("kcCwrdY");
      assertEquals("kcCwrdY", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject((Object) null, stringArray0);
      assertEquals(3, stringArray0.length);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertNotNull(jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      JSONPath jSONPath2 = new JSONPath("D");
      assertEquals("D", jSONPath2.getPath());
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertNotNull(jSONPath2);
      
      Set<?> set0 = jSONPath2.keySet((Object) null);
      assertEquals("D", jSONPath2.getPath());
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertNull(set0);
      assertNotSame(jSONPath2, jSONPath0);
      assertNotSame(jSONPath2, jSONPath1);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("kotlin.ranges.CharRange");
      assertNotNull(jSONPath_JSONPathParser0);
      
      boolean boolean2 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1, hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(javaBeanSerializer0);
      
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues(class0);
      assertFalse(list0.contains("kotlin.ranges.CharRange"));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        jSONPath1.deepGetPropertyValues((Object) null, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("OWb{6LL}%xp0K*<9V<", (-495799323323797221L), 8121814285880789523L, true);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      JSONPath jSONPath0 = JSONPath.compile("]j1");
      assertEquals("]j1", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("beanInfo", (String) null);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: beanInfo", sQLNonTransientConnectionException0.toString());
      assertEquals("beanInfo", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      SQLDataException sQLDataException0 = new SQLDataException("OXxYcr@", sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLDataException: OXxYcr@", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("OXxYcr@", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("YY[h>v5z Li5{", sQLDataException0, true);
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLDataException: OXxYcr@", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("OXxYcr@", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNotNull(jSONPath_ValueSegment0);
      
      SQLDataException sQLDataException1 = new SQLDataException(sQLDataException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLDataException: OXxYcr@", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("OXxYcr@", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException1.getSQLState());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.sql.SQLDataException: OXxYcr@", sQLDataException1.toString());
      assertEquals("java.sql.SQLDataException: OXxYcr@", sQLDataException1.getMessage());
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertNotNull(sQLDataException1);
      
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, (Object) null, sQLDataException1, "YY[h>v5z Li5{");
      assertEquals("]j1", jSONPath0.getPath());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLDataException: OXxYcr@", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("OXxYcr@", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException1.getSQLState());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.sql.SQLDataException: OXxYcr@", sQLDataException1.toString());
      assertEquals("java.sql.SQLDataException: OXxYcr@", sQLDataException1.getMessage());
      assertFalse(boolean0);
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertNotSame(sQLDataException0, sQLDataException1);
      assertNotSame(sQLDataException1, sQLDataException0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_ValueSegment0, jSONPath_IntBetweenSegement0, true);
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLDataException: OXxYcr@", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("OXxYcr@", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertNotNull(jSONPath_FilterGroup0);
      
      DataTruncation dataTruncation0 = new DataTruncation(32, false, true, (-1086068042), (-1086068042), sQLDataException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLDataException: OXxYcr@", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("OXxYcr@", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertNotNull(dataTruncation0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "YY[h>v5z Li5{";
      stringArray0[1] = "OWb{6LL}%xp0K*<9V<";
      stringArray0[2] = "]j1";
      stringArray0[3] = "beanInfo";
      stringArray0[4] = "OXxYcr@";
      stringArray0[5] = null;
      stringArray0[6] = null;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("YY[h>v5z Li5{");
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('Y', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      Locale locale0 = jSONReaderScanner0.getLocale();
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('Y', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean1 = jSONPath_ValueSegment0.apply(jSONPath0, stringArray0[5], mockGregorianCalendar0, sQLNonTransientConnectionException0);
      assertEquals(9, stringArray0.length);
      assertEquals("]j1", jSONPath0.getPath());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('Y', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: beanInfo", sQLNonTransientConnectionException0.toString());
      assertEquals("beanInfo", sQLNonTransientConnectionException0.getMessage());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("java.sql.SQLDataException: OXxYcr@", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("OXxYcr@", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertFalse(boolean1);
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(sQLDataException0, sQLDataException1);
      
      stringArray0[7] = "]j1";
      stringArray0[8] = "]j1";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(dataTruncation0, stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.set(2442, 2442, 473);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2442,MONTH=2442,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=473,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertEquals(3, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      Long long0 = new Long(8129946290599006616L);
      assertEquals(8129946290599006616L, (long)long0);
      assertNotNull(long0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/5");
      assertNotNull(jSONPath_JSONPathParser0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(",`<~Va", "/stackTrace/5");
      assertEquals(",`<~Va", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("/stackTrace/5", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ,`<~Va", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.serializer.JSONLibDataFormatSerializer");
      assertEquals("com.alibaba.fastjson.serializer.JSONLibDataFormatSerializer", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("/stackTrace/5", hashMap0, sQLFeatureNotSupportedException0);
      assertEquals(",`<~Va", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("/stackTrace/5", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ,`<~Va", sQLFeatureNotSupportedException0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("/stackTrace/5", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: /stackTrace/5", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "S5GyLP``De8");
      assertFalse(boolean0);
      
      jSONPath0.deepSet(sQLClientInfoException0, "Byte", (-586), set0);
      assertFalse(set0.contains(",`<~Va"));
      assertEquals(3, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(",`<~Va", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("/stackTrace/5", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ,`<~Va", sQLFeatureNotSupportedException0.toString());
      assertEquals("com.alibaba.fastjson.serializer.JSONLibDataFormatSerializer", jSONPath0.getPath());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("/stackTrace/5", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: /stackTrace/5", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement(",`<~Va");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath jSONPath1 = new JSONPath("annotatedInterfaces");
      assertEquals("annotatedInterfaces", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. /stackTrace/5
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}x");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.next();
      jSONPath_JSONPathParser0.skipWhitespace();
      Throwable throwable0 = null;
      SQLException sQLException0 = new SQLException("{\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}x", "{\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}x", (Throwable) null);
      assertEquals("java.sql.SQLException: {\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}x", sQLException0.toString());
      assertEquals("{\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}x", sQLException0.getMessage());
      assertEquals("{\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}x", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertNotNull(sQLException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("{\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}x");
      assertEquals("{\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}x", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: {\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}x", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLException0);
      assertEquals("java.sql.SQLException: {\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}x", sQLException0.toString());
      assertEquals("{\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}x", sQLException0.getMessage());
      assertEquals("{\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}x", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLException: {\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}x", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLException: {\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}x", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("parseInt error : ", sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: parseInt error : ", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("parseInt error : ", sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      JSONPath jSONPath0 = new JSONPath("parseInt error : ", (SerializeConfig) null, parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("parseInt error : ", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      Class<Date> class0 = Date.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath1.getJavaBeanSerializer(class0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNull(javaBeanSerializer0);
      assertNotSame(jSONPath1, jSONPath0);
      
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("parseInt error : ", jSONPath0.getPath());
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNull(set0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotSame(jSONPath0, jSONPath1);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-437), (short)3495, (short)3495);
      assertNotNull(jSONPath_RangeSegment0);
      
      SQLWarning sQLWarning0 = new SQLWarning("fastjson.parser.deny", "parseInt error : ", (short)3495);
      assertEquals("java.sql.SQLWarning: fastjson.parser.deny", sQLWarning0.toString());
      assertEquals("parseInt error : ", sQLWarning0.getSQLState());
      assertEquals(3495, sQLWarning0.getErrorCode());
      assertEquals("fastjson.parser.deny", sQLWarning0.getMessage());
      assertNotNull(sQLWarning0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLWarning0);
      assertEquals("java.sql.SQLWarning: fastjson.parser.deny", sQLWarning0.toString());
      assertEquals("parseInt error : ", sQLWarning0.getSQLState());
      assertEquals(3495, sQLWarning0.getErrorCode());
      assertEquals("fastjson.parser.deny", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: fastjson.parser.deny", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLWarning: fastjson.parser.deny", sQLFeatureNotSupportedException1.toString());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertNotNull(sQLFeatureNotSupportedException1);
      
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath1, sQLWarning0, sQLFeatureNotSupportedException1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      String string0 = "java.util.concurrent.atomic.DoubleAdder";
      String string1 = "ZHtMa#TW'V";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("ZHtMa#TW'V", "R~IB+");
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ZHtMa#TW'V", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("ZHtMa#TW'V", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("R~IB+", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("java.util.concurrent.atomic.DoubleAdder", sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ZHtMa#TW'V", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("ZHtMa#TW'V", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("R~IB+", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("java.util.concurrent.atomic.DoubleAdder", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.util.concurrent.atomic.DoubleAdder", sQLInvalidAuthorizationSpecException1.toString());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "java.util.concurrent.atomic.DoubleAdder";
      JSONPath jSONPath0 = JSONPath.compile("N>");
      assertEquals("N>", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_WildCardSegment0, (Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "DenYu\\+I0";
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DenYu+I0");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("DenYu+I0");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string1 = "[";
      String string2 = "fastjson.parser.autoTypeSupport";
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "[";
      stringArray0[1] = "DenYu+I0";
      stringArray0[2] = "[";
      stringArray0[3] = "[";
      stringArray0[4] = "fastjson.parser.autoTypeSupport";
      stringArray0[5] = "[";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(jSONPath_JSONPathParser0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      String string0 = "eX0ln";
      String string1 = "[";
      JSONPath jSONPath0 = JSONPath.compile("");
      assertEquals("", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/0");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/5");
      assertEquals("/stackTrace/5", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String string0 = jSONPath0.getPath();
      assertEquals("/stackTrace/5", jSONPath0.getPath());
      assertEquals("/stackTrace/5", string0);
      assertNotNull(string0);
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(41);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/stackTrace/5", ")");
      assertEquals("/stackTrace/5", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: /stackTrace/5", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(")", sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      boolean boolean0 = JSONPath.set((Object) sQLTransientConnectionException0, "/stackTrace/5", (Object) null);
      assertEquals("/stackTrace/5", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: /stackTrace/5", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(")", sQLTransientConnectionException0.getSQLState());
      assertTrue(boolean0);
      
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("S_XA!F's", "/stackTrace", (String) null, (String[]) null, true);
      assertNotNull(jSONPath_MatchSegement0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.RLIKE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("U,iJhw&KU)mV6", jSONPath_ArrayAccessSegment0, jSONPath_Operator1);
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotNull(jSONPath_RefOpSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment0);
      
      boolean boolean1 = jSONPath_MatchSegement0.apply(jSONPath0, jSONPath_SizeSegment0, jSONPath_Operator1, jSONPath_RefOpSegement0);
      assertEquals("/stackTrace/5", jSONPath0.getPath());
      assertFalse(boolean1);
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(jSONPath_Operator1, jSONPath_Operator0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      Set<?> set0 = jSONPath0.evalKeySet(bigInteger0);
      assertFalse(set0.contains("/stackTrace/5"));
      assertEquals("/stackTrace/5", jSONPath0.getPath());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      assertEquals("*", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertEquals("*", jSONPath0.getPath());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        JSONPath.size((Object) jSONPath0, "*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$RangeSegment");
      assertEquals("com.alibaba.fastjson.JSONPath$RangeSegment", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte)6;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)63, (byte)11, (byte) (-125), (byte)73, (byte)71, (byte) (-1), (byte)86, (byte)6}, byteArray0);
      
      Double double0 = new Double((-190.8018864360719));
      assertEquals((-190.8018864360719), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean1 = jSONPath_FilterSegment0.remove(jSONPath0, double0, (Object) null);
      assertEquals("com.alibaba.fastjson.JSONPath$RangeSegment", jSONPath0.getPath());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 9007199254740991L;
      longArray0[0] = 0L;
      longArray0[2] = 10000000000L;
      longArray0[3] = 25L;
      JSONPath jSONPath0 = JSONPath.compile("B}8b:l8aLQ");
      assertEquals("B}8b:l8aLQ", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup((JSONPath.Filter) null, (JSONPath.Filter) null, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      assertNotNull(jSONPath_FilterSegment0);
      
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, double0, (Object) null);
      assertEquals("B}8b:l8aLQ", jSONPath0.getPath());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("kV`gtJzx&nf");
      assertNotNull(jSONPath_NullSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/6");
      assertEquals("/stackTrace/6", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, (Object) null);
      assertEquals("/stackTrace/6", jSONPath0.getPath());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Pattern pattern0 = Pattern.compile("b|eeP");
      assertEquals(0, pattern0.flags());
      assertEquals("b|eeP", pattern0.pattern());
      assertEquals("b|eeP", pattern0.toString());
      assertNotNull(pattern0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      assertNotNull(jSONPath_MultiIndexSegment0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("b|eeP", jSONPath_MultiIndexSegment0, false);
      assertNotNull(jSONPath_ValueSegment0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("L", sQLClientInfoException0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: L", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("L", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/0");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("b|eeP");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(2, jSONPath_SegmentArray0.length);
      assertFalse(jSONPath_JSONPathParser0.equals((Object)jSONPath_JSONPathParser1));
      assertNotNull(jSONPath_SegmentArray0);
      assertNotSame(jSONPath_JSONPathParser0, jSONPath_JSONPathParser1);
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      assertNotNull(jSONPath_SizeSegment0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("L", "YNV9>,aar(IV@y", (Throwable) null);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: L", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("L", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("YNV9>,aar(IV@y", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      Short short0 = new Short((short)10157);
      assertEquals((short)10157, (short)short0);
      assertNotNull(short0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      Class<SQLException> class0 = SQLException.class;
      JSONPath jSONPath0 = new JSONPath("XX[");
      assertEquals("XX[", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      assertEquals("XX[", jSONPath0.getPath());
      assertNotNull(javaBeanDeserializer0);
      
      UUID uUID0 = MockUUID.randomUUID();
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNotNull(uUID0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) uUID0);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertFalse(map0.isEmpty());
      assertEquals(3, map0.size());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      long long0 = 108L;
      Long long1 = new Long(108L);
      assertEquals(108L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      String string0 = "/stackTrace/6";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/6");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.next();
      // Undeclared exception!
      try { 
        JSONPath.extract("Nxu,/C+X(ca=x5X", "I");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ident
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[99]");
      assertNotNull(jSONPath_JSONPathParser0);
      
      SQLException sQLException0 = new SQLException("[99]", "[99]", (Throwable) null);
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("[99]", sQLException0.getMessage());
      assertEquals("[99]", sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: [99]", sQLException0.toString());
      assertNotNull(sQLException0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      SerializeConfig serializeConfig1 = new SerializeConfig(false);
      assertEquals("@type", serializeConfig1.getTypeKey());
      assertTrue(serializeConfig1.isAsmEnable());
      assertFalse(serializeConfig1.equals((Object)serializeConfig0));
      assertNotNull(serializeConfig1);
      
      JSONPath jSONPath0 = new JSONPath("[99]", serializeConfig1, parserConfig0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("@type", serializeConfig1.getTypeKey());
      assertTrue(serializeConfig1.isAsmEnable());
      assertEquals("[99]", jSONPath0.getPath());
      assertFalse(serializeConfig1.equals((Object)serializeConfig0));
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Class<Calendar> class0 = Calendar.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      assertNotNull(javaBeanDeserializer0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      int int0 = jSONPath0.size((Object) null);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("@type", serializeConfig1.getTypeKey());
      assertTrue(serializeConfig1.isAsmEnable());
      assertEquals("[99]", jSONPath0.getPath());
      assertEquals((-1), int0);
      assertFalse(serializeConfig1.equals((Object)serializeConfig0));
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotSame(serializeConfig1, serializeConfig0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("fastjson.parser.autoTypeSupport", 2234.0527587957, jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("in", (-2438L), jSONPath_Operator0);
      assertNotNull(jSONPath_IntOpSegement0);
      
      JSONPath jSONPath1 = new JSONPath("u_!`E", serializeConfig0, parserConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("u_!`E", jSONPath1.getPath());
      assertFalse(serializeConfig0.equals((Object)serializeConfig1));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath1, parserConfig0, "u_!`E", (Object) null);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("u_!`E", jSONPath1.getPath());
      assertFalse(boolean0);
      assertFalse(serializeConfig0.equals((Object)serializeConfig1));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(ParserConfig.SAFE_MODE);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotSame(serializeConfig0, serializeConfig1);
      assertNotSame(jSONPath1, jSONPath0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = null;
      try {
        jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" I");
      assertEquals(" I", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath jSONPath1 = JSONPath.compile(" I");
      assertEquals(" I", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("max", "max", (-2502));
      assertEquals("java.sql.SQLRecoverableException: max", sQLRecoverableException0.toString());
      assertEquals("max", sQLRecoverableException0.getSQLState());
      assertEquals("max", sQLRecoverableException0.getMessage());
      assertEquals((-2502), sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      SQLWarning sQLWarning0 = new SQLWarning(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: max", sQLRecoverableException0.toString());
      assertEquals("max", sQLRecoverableException0.getSQLState());
      assertEquals("max", sQLRecoverableException0.getMessage());
      assertEquals((-2502), sQLRecoverableException0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: max", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.sql.SQLRecoverableException: max", sQLWarning0.toString());
      assertNotNull(sQLWarning0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: max", sQLRecoverableException0.toString());
      assertEquals("max", sQLRecoverableException0.getSQLState());
      assertEquals("max", sQLRecoverableException0.getMessage());
      assertEquals((-2502), sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLRecoverableException: max", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.sql.SQLRecoverableException: max", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      int int0 = jSONPath1.size((Object) null);
      assertEquals(" I", jSONPath1.getPath());
      assertEquals((-1), int0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      ParserConfig parserConfig1 = ParserConfig.global;
      assertFalse(parserConfig1.isSafeMode());
      assertFalse(parserConfig1.isJacksonCompatible());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertNotSame(parserConfig1, parserConfig0);
      
      JSONPath jSONPath2 = new JSONPath("fastjson.parser.deny");
      assertEquals("fastjson.parser.deny", jSONPath2.getPath());
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertNotNull(jSONPath2);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1369), 42, (-1369));
      assertNotNull(jSONPath_RangeSegment0);
      
      JSONPath jSONPath3 = new JSONPath("+>[*", serializeConfig0, parserConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("+>[*", jSONPath3.getPath());
      assertFalse(parserConfig0.equals((Object)parserConfig1));
      assertFalse(jSONPath3.equals((Object)jSONPath0));
      assertFalse(jSONPath3.equals((Object)jSONPath1));
      assertFalse(jSONPath3.equals((Object)jSONPath2));
      assertNotNull(jSONPath3);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      int int1 = jSONPath3.evalSize(jSONPath2);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("fastjson.parser.deny", jSONPath2.getPath());
      assertEquals("+>[*", jSONPath3.getPath());
      assertEquals((-1), int1);
      assertFalse(parserConfig0.equals((Object)parserConfig1));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath3));
      assertFalse(jSONPath3.equals((Object)jSONPath0));
      assertFalse(jSONPath3.equals((Object)jSONPath1));
      assertFalse(jSONPath3.equals((Object)jSONPath2));
      assertTrue(int1 == int0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotSame(parserConfig0, parserConfig1);
      assertNotSame(jSONPath2, jSONPath1);
      assertNotSame(jSONPath2, jSONPath0);
      assertNotSame(jSONPath2, jSONPath3);
      assertNotSame(jSONPath3, jSONPath0);
      assertNotSame(jSONPath3, jSONPath1);
      assertNotSame(jSONPath3, jSONPath2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.safeMode");
      assertNotNull(jSONPath_JSONPathParser0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      assertNotNull(jSONPath_MaxSegment0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add((Object) "jsonpath error, path ");
      assertTrue(arrayList0.contains("jsonpath error, path "));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("b<UNW7KxDZ$3t8", "CW8\"'z7<|[H/[s^N");
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: b<UNW7KxDZ$3t8", sQLRecoverableException0.toString());
      assertEquals("CW8\"'z7<|[H/[s^N", sQLRecoverableException0.getSQLState());
      assertEquals("b<UNW7KxDZ$3t8", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      Stream<Object> stream0 = arrayList0.stream();
      assertTrue(arrayList0.contains("jsonpath error, path "));
      assertFalse(arrayList0.contains("b<UNW7KxDZ$3t8"));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNotNull(stream0);
      
      JSONPath jSONPath0 = JSONPath.compile("K");
      assertEquals("K", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("b<UNW7KxDZ$3t8", arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      assertEquals("*", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("*", "*", 92);
      assertEquals("java.sql.SQLFeatureNotSupportedException: *", sQLFeatureNotSupportedException0.toString());
      assertEquals(92, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("*", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("*", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      boolean boolean0 = jSONPath0.contains((Object) sQLFeatureNotSupportedException0);
      assertEquals("*", jSONPath0.getPath());
      assertEquals("java.sql.SQLFeatureNotSupportedException: *", sQLFeatureNotSupportedException0.toString());
      assertEquals(92, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("*", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("*", sQLFeatureNotSupportedException0.getMessage());
      assertTrue(boolean0);
      
      Long long0 = new Long(3571L);
      assertEquals(3571L, (long)long0);
      assertNotNull(long0);
      
      String string0 = "/beanInfo/clazz/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type";
      Object object0 = JSONPath.eval((Object) jSONPath0, "/beanInfo/clazz/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type");
      assertEquals("*", jSONPath0.getPath());
      assertNull(object0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.alibaba.fastjson.JSONPath$IntObjInSegement", "com.alibaba.fastjson.JSONPath$IntObjInSegement", sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: *", sQLFeatureNotSupportedException0.toString());
      assertEquals(92, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("*", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("*", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("com.alibaba.fastjson.JSONPath$IntObjInSegement", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: com.alibaba.fastjson.JSONPath$IntObjInSegement", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONPath$IntObjInSegement", sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      Class<SQLWarning> class0 = SQLWarning.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertEquals("*", jSONPath0.getPath());
      assertNotNull(javaBeanSerializer0);
      
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = JSONPath.compile("[");
      assertEquals("[", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Object object0 = jSONPath0.eval((Object) long0);
      assertEquals("[", jSONPath0.getPath());
      assertEquals((-3851359326990528739L), object0);
      assertNotNull(object0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.alibaba.fastjson.serializer.ASMSerializerFactory");
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: com.alibaba.fastjson.serializer.ASMSerializerFactory", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("com.alibaba.fastjson.serializer.ASMSerializerFactory", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath1 = new JSONPath("[", serializeConfig0, parserConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("[", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("b|eeP", (Pattern) null, jSONPath_Operator0);
      assertNotNull(jSONPath_RegMatchSegement0);
      
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
      
      Class<JSONValidator.Type> class1 = JSONValidator.Type.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class1);
      assertEquals("[", jSONPath0.getPath());
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNull(javaBeanDeserializer0);
      assertNotSame(jSONPath0, jSONPath1);
      
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath1, javaBeanSerializer0, (Object) null, long0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("[", jSONPath1.getPath());
      assertFalse(boolean0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotSame(jSONPath1, jSONPath0);
      
      Object object1 = JSONPath.reserveToObject(longArray0[0], (String[]) null);
      assertEquals(9, longArray0.length);
      assertEquals((-3851359326990528739L), object1);
      assertTrue(object1.equals((Object)long0));
      assertTrue(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = jSONPath1.getPath();
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("[", jSONPath1.getPath());
      assertEquals("[", string0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(string0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotSame(jSONPath1, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.set(2442, 2442, 473);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2442,MONTH=2442,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=473,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertEquals(3, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("$bR5;JG7*6P<", 473, jSONPath_Operator0);
      assertNotNull(jSONPath_IntOpSegement0);
      
      boolean boolean0 = false;
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Class<Double> class0 = Double.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      assertNotNull(javaBeanDeserializer0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      int int0 = jSONPath0.size((Object) parserConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      assertEquals((-1), int0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      boolean boolean1 = jSONPath_IntOpSegement0.apply(jSONPath0, "mjM?4G3+}FKq_b8|", jSONPath_Operator0, (Object) null);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      ObjectDeserializer objectDeserializer0 = parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(2, objectDeserializer0.getFastMatchToken());
      assertNotNull(objectDeserializer0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.autoTypeSupport");
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("fastjson.parser.autoTypeSupport", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: fastjson.parser.autoTypeSupport", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      // Undeclared exception!
      try { 
        JSONPath.set((Object) jSONPath_WildCardSegment0, "gWE", (Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("D");
      assertEquals("D", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String string0 = jSONPath0.getPath();
      assertEquals("D", jSONPath0.getPath());
      assertEquals("D", string0);
      assertNotNull(string0);
      
      boolean boolean0 = jSONPath0.isRef();
      assertEquals("D", jSONPath0.getPath());
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(47);
      assertEquals(47, (int)integer0);
      assertNotNull(integer0);
      
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      boolean boolean1 = JSONPath.isDouble(class0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "D";
      stringArray0[1] = "D";
      stringArray0[2] = "D";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(jSONPath_MultiPropertySegment0);
      
      jSONPath0.deepSet("D", "D", 4647432019745535567L, "D");
      assertEquals("D", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("7b%k\"_@9xz:TtMMr%qg");
      assertNotNull(jSONPath_JSONPathParser0);
      
      double double0 = jSONPath_JSONPathParser0.readDoubleValue(4647432019745535567L);
      assertEquals(4.647432019745536E18, double0, 0.01);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      Integer integer0 = new Integer(7);
      assertEquals(7, (int)integer0);
      assertNotNull(integer0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(7, (-60), 1004);
      assertNotNull(mockGregorianCalendar0);
      
      boolean boolean0 = JSONPath.remove((Object) null, "eX0ln");
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = JSONPath.compile(".");
      assertEquals(".", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Object object0 = jSONPath0.eval((Object) "eX0ln");
      assertEquals(".", jSONPath0.getPath());
      assertEquals("eX0ln", object0);
      assertNotNull(object0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("invalid comment", "size", false);
      assertNotNull(jSONPath_ValueSegment0);
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_ValueSegment0);
      assertNotNull(jSONPath_Filter0);
      assertSame(jSONPath_ValueSegment0, jSONPath_Filter0);
      assertSame(jSONPath_Filter0, jSONPath_ValueSegment0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_Filter0);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("invalid comment", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "eX0ln";
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      boolean boolean1 = JSONPath.eqNotNull(integer0, long0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath.Filter jSONPath_Filter1 = jSONPath_JSONPathParser0.filterRest(jSONPath_Filter0);
      assertNotNull(jSONPath_Filter1);
      assertSame(jSONPath_ValueSegment0, jSONPath_Filter1);
      assertSame(jSONPath_ValueSegment0, jSONPath_Filter0);
      assertSame(jSONPath_Filter0, jSONPath_Filter1);
      assertSame(jSONPath_Filter0, jSONPath_ValueSegment0);
      assertSame(jSONPath_Filter1, jSONPath_ValueSegment0);
      assertSame(jSONPath_Filter1, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      Integer integer0 = new Integer(7);
      assertEquals(7, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = "eX0ln";
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(7, (-60), (-60), 973, (-60), 973);
      assertNotNull(mockGregorianCalendar0);
      
      boolean boolean0 = JSONPath.remove((Object) integer0, "eX0ln");
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string1 = "\\.";
      JSONPath jSONPath0 = JSONPath.compile(".");
      assertEquals(".", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Object object0 = jSONPath0.eval((Object) "eX0ln");
      assertEquals(".", jSONPath0.getPath());
      assertEquals("eX0ln", object0);
      assertTrue(object0.equals((Object)string0));
      assertFalse(object0.equals((Object)string1));
      assertNotNull(object0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("autoTypeSupport");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      JSONPath jSONPath1 = JSONPath.compile("+?FH8,*,(1");
      assertEquals("+?FH8,*,(1", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      Integer integer1 = new Integer(973);
      assertEquals(973, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(973);
      assertEquals(973, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("JA-Fxle%-hA3qtL%>k", "eX0ln");
      assertEquals("java.sql.SQLRecoverableException: JA-Fxle%-hA3qtL%>k", sQLRecoverableException0.toString());
      assertEquals("JA-Fxle%-hA3qtL%>k", sQLRecoverableException0.getMessage());
      assertEquals("eX0ln", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException((String) null, "Jufh(:]'O*#VY&[f", 1141048066, sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: JA-Fxle%-hA3qtL%>k", sQLRecoverableException0.toString());
      assertEquals("JA-Fxle%-hA3qtL%>k", sQLRecoverableException0.getMessage());
      assertEquals("eX0ln", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException1.toString());
      assertNull(sQLRecoverableException1.getMessage());
      assertEquals(1141048066, sQLRecoverableException1.getErrorCode());
      assertEquals("Jufh(:]'O*#VY&[f", sQLRecoverableException1.getSQLState());
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertNotNull(sQLRecoverableException1);
      
      int int0 = jSONPath1.evalSize(integer2);
      assertEquals("+?FH8,*,(1", jSONPath1.getPath());
      assertEquals(0, int0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, (-1158), 17);
      assertNotNull(jSONPath_RangeSegment0);
      
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, sQLRecoverableException0, integer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -67
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "T9h";
      stringArray0[1] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}";
      stringArray0[2] = "T9h";
      stringArray0[4] = "T9h";
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("T9h");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}");
      assertEquals("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}", 355);
      assertEquals(355, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      Byte byte0 = new Byte((byte)28);
      assertEquals((byte)28, (byte)byte0);
      assertNotNull(byte0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      JSONPath jSONPath1 = JSONPath.compile("T9h");
      assertEquals("T9h", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      Integer integer0 = new Integer((-2141));
      assertEquals((-2141), (int)integer0);
      assertNotNull(integer0);
      
      Short short0 = new Short((byte)28);
      assertEquals((short)28, (short)short0);
      assertNotNull(short0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Float float0 = new Float(2105.739);
      assertEquals(2105.739F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, float0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      assertEquals("*", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("*", parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      boolean boolean0 = JSONPath.contains((Object) (byte)0, "fastjson.parser.safeMode");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2*
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      assertEquals("*", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("*", "*", 92);
      assertEquals("*", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("*", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: *", sQLFeatureNotSupportedException0.toString());
      assertEquals(92, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      boolean boolean0 = jSONPath0.contains((Object) sQLFeatureNotSupportedException0);
      assertEquals("*", jSONPath0.getPath());
      assertEquals("*", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("*", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: *", sQLFeatureNotSupportedException0.toString());
      assertEquals(92, sQLFeatureNotSupportedException0.getErrorCode());
      assertTrue(boolean0);
      
      Long long0 = new Long(3571L);
      assertEquals(3571L, (long)long0);
      assertNotNull(long0);
      
      Object object0 = JSONPath.eval((Object) jSONPath0, "/beanInfo/clazz/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type");
      assertEquals("*", jSONPath0.getPath());
      assertNull(object0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("WY+F6i@");
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: WY+F6i@", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("WY+F6i@", sQLSyntaxErrorException0.getMessage());
      assertNotNull(sQLSyntaxErrorException0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("0");
      assertNotNull(mockThrowable0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("YEiY", "com.alibaba.fastjson.serializer.BeanContext", 753, mockThrowable0);
      assertEquals("0", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: 0", mockThrowable0.toString());
      assertEquals(753, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: YEiY", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("YEiY", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("com.alibaba.fastjson.serializer.BeanContext", sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      boolean boolean1 = JSONPath.eq(bigInteger0, sQLIntegrityConstraintViolationException0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals("0", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: 0", mockThrowable0.toString());
      assertEquals(753, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: YEiY", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("YEiY", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("com.alibaba.fastjson.serializer.BeanContext", sQLIntegrityConstraintViolationException0.getSQLState());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Pattern pattern0 = Pattern.compile("b|eeP");
      assertEquals(0, pattern0.flags());
      assertEquals("b|eeP", pattern0.pattern());
      assertEquals("b|eeP", pattern0.toString());
      assertNotNull(pattern0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("b|eeP", pattern0, jSONPath_Operator0);
      assertEquals(0, pattern0.flags());
      assertEquals("b|eeP", pattern0.pattern());
      assertEquals("b|eeP", pattern0.toString());
      assertNotNull(jSONPath_RegMatchSegement0);
      
      JSONPath jSONPath0 = new JSONPath("max");
      assertEquals("max", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_Operator0);
      assertEquals("max", jSONPath0.getPath());
      assertNull(set0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("b|eeP");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement(").~#2JHeRHEoh t");
      assertNotNull(jSONPath_Segment0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("b|eeP", "b|eeP", 791);
      assertEquals("b|eeP", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: b|eeP", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(791, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("b|eeP", sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      JSONPath jSONPath1 = JSONPath.compile("max");
      assertEquals("max", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath1.removeArrayItem(jSONPath0, (Object) null, 791);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("OwivOgz*E^g");
      assertEquals("OwivOgz*E^g", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertFalse(stack0.contains("OwivOgz*E^g"));
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        jSONPath0.deepScan("OwivOgz*E^g", "OwivOgz*E^g", stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path OwivOgz*E^g, segement OwivOgz*E^g
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      assertNotNull(jSONPath_MaxSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("L/ZjuBG");
      assertEquals("L/ZjuBG", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Byte byte0 = new Byte((byte) (-57));
      assertEquals((byte) (-57), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = jSONPath0.remove((Object) byte0);
      assertEquals("L/ZjuBG", jSONPath0.getPath());
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("];:,.H@x5])!O");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath_Segment0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("L/ZjuBG", "fastjson.parser.autoTypeSupport", 46);
      assertEquals("L/ZjuBG", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(46, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: L/ZjuBG", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("fastjson.parser.autoTypeSupport", sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      JSONPath jSONPath1 = JSONPath.compile("&gbx%g-c<a1");
      assertEquals("&gbx%g-c<a1", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      String string0 = null;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("];:,.H@x5])!O", "];:,.H@x5])!O", jSONPath_Operator0);
      assertNotNull(jSONPath_StringOpSegement0);
      
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Float float0 = new Float(1000.0);
      assertEquals(1000.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      JSONPath jSONPath0 = new JSONPath("/stackTrace/9");
      assertEquals("/stackTrace/9", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String string0 = jSONPath0.getPath();
      assertEquals("/stackTrace/9", jSONPath0.getPath());
      assertEquals("/stackTrace/9", string0);
      assertNotNull(string0);
      
      boolean boolean0 = jSONPath0.isRef();
      assertEquals("/stackTrace/9", jSONPath0.getPath());
      assertTrue(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/9");
      assertNotNull(jSONPath_JSONPathParser0);
      
      int int0 = jSONPath0.evalSize((Object) null);
      assertEquals("/stackTrace/9", jSONPath0.getPath());
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        JSONPath.extract("/stackTrace/9", "/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("D");
      assertEquals("D", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String string0 = jSONPath0.getPath();
      assertEquals("D", jSONPath0.getPath());
      assertEquals("D", string0);
      assertNotNull(string0);
      
      boolean boolean0 = jSONPath0.isRef();
      assertEquals("D", jSONPath0.getPath());
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(47);
      assertEquals(47, (int)integer0);
      assertNotNull(integer0);
      
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      boolean boolean1 = JSONPath.isDouble(class0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "D";
      stringArray0[1] = "kotlin.ranges.CharRange";
      stringArray0[2] = "kotlin.ranges.CharRange";
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 47;
      longArray0[1] = (long) 47;
      longArray0[2] = (long) 47;
      longArray0[3] = (long) 47;
      longArray0[4] = (long) 47;
      longArray0[5] = (long) 47;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("kotlin.ranges.CharRange", longArray0, false);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {47L, 47L, 47L, 47L, 47L, 47L}, longArray0);
      assertNotNull(jSONPath_IntInSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntInSegement0, jSONPath_IntInSegement0, false);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {47L, 47L, 47L, 47L, 47L, 47L}, longArray0);
      assertNotNull(jSONPath_FilterGroup0);
      
      boolean boolean2 = jSONPath0.set((Object) "D", (Object) null);
      assertEquals("D", jSONPath0.getPath());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      JSONPath jSONPath1 = JSONPath.compile("Zbjf&tfB");
      assertEquals("Zbjf&tfB", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      Double double0 = new Double(47L);
      assertEquals(47.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("M^d", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      SQLDataException sQLDataException0 = new SQLDataException("lzi%e");
      assertEquals("java.sql.SQLDataException: lzi%e", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("lzi%e", sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntInSegement0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {47L, 47L, 47L, 47L, 47L, 47L}, longArray0);
      assertNotNull(jSONPath_FilterSegment0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLDataException0);
      assertEquals("java.sql.SQLDataException: lzi%e", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("lzi%e", sQLDataException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: lzi%e", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLDataException: lzi%e", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertNotNull(sQLTransientException0);
      
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath1, sQLTransientException0, "D");
      assertEquals(6, longArray0.length);
      assertEquals("Zbjf&tfB", jSONPath1.getPath());
      assertEquals("java.sql.SQLDataException: lzi%e", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("lzi%e", sQLDataException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: lzi%e", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLDataException: lzi%e", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertArrayEquals(new long[] {47L, 47L, 47L, 47L, 47L, 47L}, longArray0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNull(object0);
      assertNotSame(jSONPath1, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("D");
      assertEquals("D", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String string0 = jSONPath0.getPath();
      assertEquals("D", jSONPath0.getPath());
      assertEquals("D", string0);
      assertNotNull(string0);
      
      boolean boolean0 = jSONPath0.isRef();
      assertEquals("D", jSONPath0.getPath());
      assertTrue(boolean0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2705), 1748, 2379);
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
      JSONPath.remove((Object) jSONPath0, "D");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"l\":null,\"z\":true,\"a\":null,\"b\":{\"x\":\"a string\"}}");
      assertNotNull(jSONPath_JSONPathParser0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`I=");
      assertFalse(boolean0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("Wex}5ZAzQ//96=)");
      assertEquals("Wex}5ZAzQ//96=)", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath0, jSONPath_JSONPathParser0);
      assertEquals("Wex}5ZAzQ//96=)", jSONPath0.getPath());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("{\"x\":\"hello\",\"l\":null,\"z\":true,\"a\":null,\"b\":{\"x\":\"a string\"}}", arrayList0, false);
      assertEquals("Wex}5ZAzQ//96=)", jSONPath0.getPath());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(jSONPath_ValueSegment0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment1 = (JSONPath.ValueSegment)jSONPath_JSONPathParser0.filterRest(jSONPath_ValueSegment0);
      assertEquals("Wex}5ZAzQ//96=)", jSONPath0.getPath());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(jSONPath_ValueSegment1);
      assertSame(jSONPath_ValueSegment0, jSONPath_ValueSegment1);
      assertSame(jSONPath_ValueSegment1, jSONPath_ValueSegment0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("Wex}5ZAzQ//96=)", "w", jSONPath_Operator0);
      assertNotNull(jSONPath_StringOpSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("NOT_BETWEEN", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = null;
      try {
        jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "*";
      JSONPath jSONPath0 = new JSONPath("*");
      assertEquals("*", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertEquals("*", jSONPath0.getPath());
      assertFalse(boolean0);
      
      Long long0 = new Long((-560L));
      assertEquals((-560L), (long)long0);
      assertNotNull(long0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("''", "k+rbn!hTL)", (Throwable) null);
      assertEquals("''", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ''", sQLTransactionRollbackException0.toString());
      assertEquals("k+rbn!hTL)", sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLTransactionRollbackException0);
      assertEquals("''", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ''", sQLTransactionRollbackException0.toString());
      assertEquals("k+rbn!hTL)", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ''", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLTransactionRollbackException: ''", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertNotNull(sQLTransientException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("*", hashMap0, sQLTransientException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("''", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ''", sQLTransactionRollbackException0.toString());
      assertEquals("k+rbn!hTL)", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ''", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLTransactionRollbackException: ''", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: *", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("*", sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("''", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ''", sQLTransactionRollbackException0.toString());
      assertEquals("k+rbn!hTL)", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ''", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLTransactionRollbackException: ''", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: *", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("*", sQLClientInfoException0.getMessage());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("k+rbn!hTL)", "''", 561, hashMap0, sQLTransactionRollbackException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("''", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ''", sQLTransactionRollbackException0.toString());
      assertEquals("k+rbn!hTL)", sQLTransactionRollbackException0.getSQLState());
      assertEquals("k+rbn!hTL)", sQLClientInfoException1.getMessage());
      assertEquals("''", sQLClientInfoException1.getSQLState());
      assertEquals(561, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: k+rbn!hTL)", sQLClientInfoException1.toString());
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException1);
      
      JSONPath jSONPath1 = JSONPath.compile("''");
      assertEquals("''", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      Double double0 = new Double((-1210.522));
      assertEquals((-1210.522), (double)double0, 0.01);
      assertNotNull(double0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("15HD`37", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("I");
      assertNotNull(jSONPath_NullSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, true);
      assertNotNull(jSONPath_FilterGroup0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("''", "''", (-2187), map0);
      assertEquals("java.sql.SQLClientInfoException: ''", sQLClientInfoException2.toString());
      assertEquals((-2187), sQLClientInfoException2.getErrorCode());
      assertEquals("''", sQLClientInfoException2.getSQLState());
      assertEquals("''", sQLClientInfoException2.getMessage());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("''", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ''", sQLTransactionRollbackException0.toString());
      assertEquals("k+rbn!hTL)", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ''", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLTransactionRollbackException: ''", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: *", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("*", sQLClientInfoException0.getMessage());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertNotNull(sQLClientInfoException2);
      
      boolean boolean1 = jSONPath_FilterGroup0.apply(jSONPath0, "''", (Object) null, "15HD`37");
      assertEquals("*", jSONPath0.getPath());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNotSame(jSONPath0, jSONPath1);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("%%");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      assertNotNull(jSONPath_FilterSegment0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("I", "''", (-2187), sQLTransactionRollbackException0);
      assertEquals("I", sQLTimeoutException0.getMessage());
      assertEquals("''", sQLTimeoutException0.getSQLState());
      assertEquals((-2187), sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: I", sQLTimeoutException0.toString());
      assertEquals("''", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ''", sQLTransactionRollbackException0.toString());
      assertEquals("k+rbn!hTL)", sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      // Undeclared exception!
      try { 
        jSONPath1.size((Object) sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ''
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(90);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1228), (-1228), 90, (-1228), (-1228));
      assertNotNull(mockGregorianCalendar0);
      
      JSONPath jSONPath0 = new JSONPath("{\"b\":null,\"z\":true,\"NOT_BETWEEN\":\"hello\",\"a\":false,\"toCharArray\":7,\"xx\":null}");
      assertEquals("{\"b\":null,\"z\":true,\"NOT_BETWEEN\":\"hello\",\"a\":false,\"toCharArray\":7,\"xx\":null}", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "=k|g\":UIB,p^";
      stringArray0[1] = "*";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONPath_MultiPropertySegment0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "serializer";
      JSONPath jSONPath1 = JSONPath.compile("com.alibaba.fastjson.JSONPath$ArrayAccessSegment");
      assertEquals("com.alibaba.fastjson.JSONPath$ArrayAccessSegment", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      Long long0 = new Long(8963398325558730460L);
      assertEquals(8963398325558730460L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-1228));
      assertEquals((-1228L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long long2 = Long.getLong("=k|g\":UIB,p^", long1);
      assertEquals((-1228L), (long)long2);
      assertFalse(long1.equals((Object)long0));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1228), 90, 39);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      
      // Undeclared exception!
      try { 
        jSONPath1.set((Object) mockGregorianCalendar1, (Object) jSONPath_ArrayAccessSegment0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "fastjson";
      JSONPath jSONPath0 = JSONPath.compile("fastjson");
      assertEquals("fastjson", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String string1 = "length";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson", "length");
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("fastjson", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("length", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("fastjson", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("length", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLInvalidAuthorizationSpecException: fastjson", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("length");
      assertNotNull(mockPrintWriter0);
      
      sQLInvalidAuthorizationSpecException0.printStackTrace((PrintWriter) mockPrintWriter0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("fastjson", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("length", sQLInvalidAuthorizationSpecException0.getSQLState());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fastjson", sQLTimeoutException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("fastjson", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("length", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLInvalidAuthorizationSpecException: fastjson", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: fastjson", sQLSyntaxErrorException0.toString());
      assertEquals("fastjson", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("fastjson", "fastjson", sQLSyntaxErrorException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("fastjson", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("length", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLInvalidAuthorizationSpecException: fastjson", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: fastjson", sQLSyntaxErrorException0.toString());
      assertEquals("fastjson", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("fastjson", sQLSyntaxErrorException1.getSQLState());
      assertEquals("fastjson", sQLSyntaxErrorException1.getMessage());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: fastjson", sQLSyntaxErrorException1.toString());
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertNotNull(sQLSyntaxErrorException1);
      
      SQLDataException sQLDataException0 = new SQLDataException("fastjson", "fastjson", sQLSyntaxErrorException1);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("fastjson", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("length", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLInvalidAuthorizationSpecException: fastjson", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: fastjson", sQLSyntaxErrorException0.toString());
      assertEquals("fastjson", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("fastjson", sQLSyntaxErrorException1.getSQLState());
      assertEquals("fastjson", sQLSyntaxErrorException1.getMessage());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: fastjson", sQLSyntaxErrorException1.toString());
      assertEquals("java.sql.SQLDataException: fastjson", sQLDataException0.toString());
      assertEquals("fastjson", sQLDataException0.getSQLState());
      assertEquals("fastjson", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertNotNull(sQLDataException0);
      
      sQLDataException0.setNextException(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("fastjson", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("length", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLInvalidAuthorizationSpecException: fastjson", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: fastjson", sQLSyntaxErrorException0.toString());
      assertEquals("fastjson", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("fastjson", sQLSyntaxErrorException1.getSQLState());
      assertEquals("fastjson", sQLSyntaxErrorException1.getMessage());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: fastjson", sQLSyntaxErrorException1.toString());
      assertEquals("java.sql.SQLDataException: fastjson", sQLDataException0.toString());
      assertEquals("fastjson", sQLDataException0.getSQLState());
      assertEquals("fastjson", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertNotSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StackTraceElement[] stackTraceElementArray0 = sQLInvalidAuthorizationSpecException0.getStackTrace();
      assertEquals(13, stackTraceElementArray0.length);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("fastjson", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("length", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(stackTraceElementArray0);
      
      sQLDataException0.forEach(consumer0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("fastjson", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("length", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLInvalidAuthorizationSpecException: fastjson", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: fastjson", sQLSyntaxErrorException0.toString());
      assertEquals("fastjson", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("fastjson", sQLSyntaxErrorException1.getSQLState());
      assertEquals("fastjson", sQLSyntaxErrorException1.getMessage());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: fastjson", sQLSyntaxErrorException1.toString());
      assertEquals("java.sql.SQLDataException: fastjson", sQLDataException0.toString());
      assertEquals("fastjson", sQLDataException0.getSQLState());
      assertEquals("fastjson", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertNotSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("c<6]fAG3-", "fastjson");
      assertEquals("c<6]fAG3-", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("fastjson", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: c<6]fAG3-", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      boolean boolean0 = jSONPath0.containsValue((Object) sQLDataException0, (Object) sQLRecoverableException0);
      assertEquals("fastjson", jSONPath0.getPath());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("fastjson", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("length", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLInvalidAuthorizationSpecException: fastjson", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: fastjson", sQLSyntaxErrorException0.toString());
      assertEquals("fastjson", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("fastjson", sQLSyntaxErrorException1.getSQLState());
      assertEquals("fastjson", sQLSyntaxErrorException1.getMessage());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: fastjson", sQLSyntaxErrorException1.toString());
      assertEquals("java.sql.SQLDataException: fastjson", sQLDataException0.toString());
      assertEquals("fastjson", sQLDataException0.getSQLState());
      assertEquals("fastjson", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("c<6]fAG3-", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("fastjson", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: c<6]fAG3-", sQLRecoverableException0.toString());
      assertFalse(boolean0);
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertNotSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      
      boolean boolean1 = jSONPath0.set((Object) null, (Object) sQLRecoverableException0, false);
      assertEquals("fastjson", jSONPath0.getPath());
      assertEquals("c<6]fAG3-", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("fastjson", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: c<6]fAG3-", sQLRecoverableException0.toString());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("/stackTrace/4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("D");
      assertEquals("D", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Integer integer0 = new Integer(47);
      assertEquals(47, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        JSONPath.extract("I''Fo%#Gbp<Rfy-a", ")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2I''Fo%#Gbp<Rfy-a
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("D");
      assertEquals("D", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      boolean boolean0 = jSONPath0.isRef();
      assertEquals("D", jSONPath0.getPath());
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(47);
      assertEquals(47, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = "illegal json : ";
      String string1 = "I''Fo%#Gbp<Rfy-a";
      String string2 = ")";
      // Undeclared exception!
      try { 
        JSONPath.extract("I''Fo%#Gbp<Rfy-a", ")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2I''Fo%#Gbp<Rfy-a
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("z_");
      assertNotNull(jSONPath_NullSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("z_");
      assertEquals("z_", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      boolean boolean0 = JSONPath.eq("z_", "z_");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(90, 90, 90, 90, 90);
      assertNotNull(mockGregorianCalendar0);
      
      JSONPath jSONPath0 = new JSONPath("{\"b\":null,\"S30\":true,\"NOT_BETWEEN\":99,\"a\":false,\"toCharArray\":7,\"xx\":null}");
      assertEquals("{\"b\":null,\"S30\":true,\"NOT_BETWEEN\":99,\"a\":false,\"toCharArray\":7,\"xx\":null}", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      Short short0 = new Short((short)687);
      assertEquals((short)687, (short)short0);
      assertNotNull(short0);
      
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, short0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("z_");
      assertNotNull(jSONPath_NullSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("z_");
      assertEquals("z_", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("null");
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("null", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: null", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      assertNotNull(thaiBuddhistDate0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      MockThrowable mockThrowable0 = new MockThrowable("jsonpath error, path ");
      assertNotNull(mockThrowable0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("null", mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: jsonpath error, path ", mockThrowable0.toString());
      assertEquals("jsonpath error, path ", mockThrowable0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: null", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("null", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLWarning sQLWarning0 = new SQLWarning("-.0k", "and", sQLTransactionRollbackException0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: jsonpath error, path ", mockThrowable0.toString());
      assertEquals("jsonpath error, path ", mockThrowable0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: null", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("null", sQLTransactionRollbackException0.getMessage());
      assertEquals("-.0k", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("and", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: -.0k", sQLWarning0.toString());
      assertNotNull(sQLWarning0);
      
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, sQLTransactionRollbackException0, sQLWarning0, jSONPath_FilterSegment0);
      assertEquals("z_", jSONPath0.getPath());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: jsonpath error, path ", mockThrowable0.toString());
      assertEquals("jsonpath error, path ", mockThrowable0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: null", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("null", sQLTransactionRollbackException0.getMessage());
      assertEquals("-.0k", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("and", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: -.0k", sQLWarning0.toString());
      assertTrue(boolean0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      JSONPath jSONPath1 = new JSONPath("2gG'IymZ65H", serializeConfig0, (ParserConfig) null);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("2gG'IymZ65H", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}");
      assertNotNull(jSONPath_JSONPathParser0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.autoTypeAccept", "fastjson.parser.deny.internal", "com.alibaba.fastjson.JSONPath$Context", (String[]) null, false);
      assertNotNull(jSONPath_MatchSegement0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("S30)zAc7/kwgD", 2592.829, jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$Context");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_DoubleOpSegement0, jSONPath_NotNullSegement0, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath jSONPath1 = JSONPath.compile("feX=Q");
      assertEquals("feX=Q", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      Double double0 = new Double((-3811.99151558519));
      assertEquals((-3811.99151558519), (double)double0, 0.01);
      assertNotNull(double0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com.alibaba.fastjson.JSONPath$Context", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      SQLDataException sQLDataException0 = new SQLDataException("feX=Q");
      assertEquals("java.sql.SQLDataException: feX=Q", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("feX=Q", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLDataException0);
      assertEquals("java.sql.SQLDataException: feX=Q", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("feX=Q", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLDataException: feX=Q", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLDataException: feX=Q", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, double0, "S30)zAc7/kwgD", sQLIntegrityConstraintViolationException0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      assertEquals("java.sql.SQLDataException: feX=Q", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("feX=Q", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLDataException: feX=Q", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLDataException: feX=Q", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertFalse(boolean0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertNotSame(jSONPath0, jSONPath1);
      
      JSONPath jSONPath2 = new JSONPath("Pr<I<=9K_X[-W7vV|#", serializeConfig0, parserConfig0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("Pr<I<=9K_X[-W7vV|#", jSONPath2.getPath());
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertNotNull(jSONPath2);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      // Undeclared exception!
      try { 
        jSONPath2.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : Pr<I<=9K_X[-W7vV|#
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"com.alibaba.fastjson.serializer.CalendarCodec\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":true}");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = new JSONPath("\":");
      assertEquals("\":", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Byte byte0 = new Byte((byte) (-57));
      assertEquals((byte) (-57), (byte)byte0);
      assertNotNull(byte0);
      
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("D", (byte) (-57), (byte) (-89), true);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, (Object) null, jSONPath_JSONPathParser0, byte0);
      assertEquals("\":", jSONPath0.getPath());
      assertFalse(boolean0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntBetweenSegement0, jSONPath_IntBetweenSegement0, false);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      boolean boolean1 = jSONPath_FilterGroup0.apply(jSONPath0, (Object) null, "{\"com.alibaba.fastjson.serializer.CalendarCodec\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":true}", jSONPath_WildCardSegment0);
      assertEquals("\":", jSONPath0.getPath());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Integer integer0 = new Integer(7);
      assertEquals(7, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = "]:{ Y";
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("]:{ Y", 1840L, (long) longArray0[0], true);
      assertEquals(9, longArray0.length);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      JSONPath jSONPath0 = new JSONPath("]:{ Y");
      assertEquals("]:{ Y", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Byte byte0 = new Byte((byte) (-89));
      assertEquals((byte) (-89), (byte)byte0);
      assertNotNull(byte0);
      
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath jSONPath1 = new JSONPath("SV_=xG9%)pjF", (SerializeConfig) null, parserConfig0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("SV_=xG9%)pjF", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("+o)", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      // Undeclared exception!
      try { 
        jSONPath1.getJavaBeanSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" I");
      assertEquals(" I", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      JSONPath jSONPath1 = new JSONPath("YJs#GV57z8kDw3o['r");
      assertEquals("YJs#GV57z8kDw3o['r", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Wxvk\"/[T-E:YfH");
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("Wxvk\"/[T-E:YfH", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Wxvk\"/[T-E:YfH", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)97;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((byte)97, bigInteger0.byteValue());
      assertEquals((short)2657, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)10, (byte)97}, byteArray0);
      assertNotNull(bigInteger0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" I");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      assertEquals("*", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertEquals("*", jSONPath0.getPath());
      assertFalse(boolean0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_WildCardSegment0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotNull(map0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$JSONPathParser");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath jSONPath1 = new JSONPath("com.alibaba.fastjson.JSONPath$DoubleOpSegement");
      assertEquals("com.alibaba.fastjson.JSONPath$DoubleOpSegement", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!z<;vsu:B(f3)gdVDGq");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but 'z'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      assertEquals("*", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertEquals("*", jSONPath0.getPath());
      assertFalse(boolean0);
      
      Long long0 = new Long((-560L));
      assertEquals((-560L), (long)long0);
      assertNotNull(long0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_WildCardSegment0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotNull(map0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.JSONPath$JSONPathParser");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath jSONPath1 = new JSONPath("com.alibaba.fastjson.JSONPath$DoubleOpSegement");
      assertEquals("com.alibaba.fastjson.JSONPath$DoubleOpSegement", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!z<;vsu:B(f3)gdVDGq");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but 'z'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "java/lang/Byte";
      JSONPath jSONPath0 = new JSONPath("java/lang/Byte");
      assertEquals("java/lang/Byte", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("java/lang/Byte", "r-}");
      assertEquals("java.sql.SQLTimeoutException: java/lang/Byte", sQLTimeoutException0.toString());
      assertEquals("java/lang/Byte", sQLTimeoutException0.getMessage());
      assertEquals("r-}", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLTimeoutException0, (Object) "r-}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("/stackTrace/10", "/stackTrace/10", true);
      assertNotNull(jSONPath_ValueSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/10");
      assertEquals("/stackTrace/10", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, sQLClientInfoException0, sQLClientInfoException0, "/stackTrace/10");
      assertEquals("/stackTrace/10", jSONPath0.getPath());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      assertNotNull(javaBeanDeserializer0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      boolean boolean1 = jSONPath0.contains((Object) sQLRecoverableException0);
      assertEquals("/stackTrace/10", jSONPath0.getPath());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Long long0 = new Long((-1158L));
      assertEquals((-1158L), (long)long0);
      assertNotNull(long0);
      
      Object object0 = JSONPath.eval((Object) "4", "like");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("-", "can not cast to byte, value : ", (-2725), (Throwable) null);
      assertEquals("can not cast to byte, value : ", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: -", sQLTransientConnectionException0.toString());
      assertEquals("-", sQLTransientConnectionException0.getMessage());
      assertEquals((-2725), sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[K>f?g;+H", "(>i7", 0, sQLTransientConnectionException0);
      assertEquals("can not cast to byte, value : ", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: -", sQLTransientConnectionException0.toString());
      assertEquals("-", sQLTransientConnectionException0.getMessage());
      assertEquals((-2725), sQLTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: [K>f?g;+H", sQLTimeoutException0.toString());
      assertEquals("(>i7", sQLTimeoutException0.getSQLState());
      assertEquals("[K>f?g;+H", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) "can not cast to byte, value : ");
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotNull(map0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("WcZ");
      assertNotNull(jSONPath_NotNullSegement0);
      
      Float float0 = new Float((float) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[K>f?g;+H");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/12");
      assertEquals("/stackTrace/12", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("(>i7");
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: (>i7", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("(>i7", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("can not cast to byte, value : ");
      assertNotNull(jSONPath_NullSegement0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      boolean boolean1 = jSONPath_NullSegement0.apply(jSONPath0, mockGregorianCalendar0, (Object) null, (Object) null);
      assertEquals("/stackTrace/12", jSONPath0.getPath());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(90);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath jSONPath0 = new JSONPath("{\"b\":null,\"z\":true,\"NOT_BETWEEN\":\"hello\",\"a\":false,\"toCharArray\":7,\"xx\":null}");
      assertEquals("{\"b\":null,\"z\":true,\"NOT_BETWEEN\":\"hello\",\"a\":false,\"toCharArray\":7,\"xx\":null}", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath jSONPath1 = JSONPath.compile("writeBefore");
      assertEquals("writeBefore", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("=k|g\":UIB,p^");
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: =k|g\":UIB,p^", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("=k|g\":UIB,p^", sQLNonTransientException0.getMessage());
      assertNotNull(sQLNonTransientException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("=k|g\":UIB,p^", "{\"b\":null,\"z\":true,\"NOT_BETWEEN\":\"hello\",\"a\":false,\"toCharArray\":7,\"xx\":null}", sQLNonTransientException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: =k|g\":UIB,p^", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("=k|g\":UIB,p^", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: =k|g\":UIB,p^", sQLNonTransientConnectionException0.toString());
      assertEquals("{\"b\":null,\"z\":true,\"NOT_BETWEEN\":\"hello\",\"a\":false,\"toCharArray\":7,\"xx\":null}", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("=k|g\":UIB,p^", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("=k|g\":UIB,p^", sQLNonTransientException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: =k|g\":UIB,p^", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("=k|g\":UIB,p^", sQLNonTransientException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("=k|g\":UIB,p^", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: =k|g\":UIB,p^", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("e");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(1, jSONPath_SegmentArray0.length);
      assertNotNull(jSONPath_SegmentArray0);
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      assertNotNull(jSONPath_SizeSegment0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      Float float0 = new Float((double) 90);
      assertEquals(90.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      Long long0 = new Long(108L);
      assertEquals(108L, (long)long0);
      assertNotNull(long0);
      
      Integer integer0 = new Integer(5);
      assertEquals(5, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("/beanInfo", "M^FpW$", 2899);
      assertEquals("java.sql.SQLSyntaxErrorException: /beanInfo", sQLSyntaxErrorException0.toString());
      assertEquals("/beanInfo", sQLSyntaxErrorException0.getMessage());
      assertEquals(2899, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("M^FpW$", sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      Byte byte0 = new Byte((byte)115);
      assertEquals((byte)115, (byte)byte0);
      assertNotNull(byte0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("k3dGDa!O_P~;mf;");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = JSONPath.compile("k3dGDa!O_P~;mf;");
      assertEquals("k3dGDa!O_P~;mf;", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Integer integer1 = new Integer(2142);
      assertEquals(2142, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Short short0 = new Short((short)524);
      assertEquals((short)524, (short)short0);
      assertNotNull(short0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Float float0 = new Float((double) (short)524);
      assertEquals(524.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = JSONPath.eqNotNull(integer1, float0);
      assertFalse(boolean1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" I");
      assertEquals(" I", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = " I";
      Short short0 = new Short((short)2191);
      assertEquals((short)2191, (short)short0);
      assertNotNull(short0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      Float float0 = new Float((float) (short)3495);
      assertEquals(3495.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = JSONPath.eqNotNull(short0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      String string0 = "eX0ln";
      JSONPath jSONPath0 = JSONPath.compile("0");
      assertEquals("0", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) longArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.Long
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      assertNotNull(jSONPath_MaxSegment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(116, true);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      JSONPath jSONPath0 = new JSONPath("n-51FB*2 R", serializeConfig0, parserConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("n-51FB*2 R", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, jSONPath0, jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Float float0 = new Float(1000.0);
      assertEquals(1000.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      int int0 = JSONPath.size((Object) float0, "JSONPath$JSONPathParser");
      assertEquals((-1), int0);
      
      boolean boolean0 = JSONPath.contains((Object) "JSONPath$JSONPathParser", "fastjson.parser.autoTypeSupport");
      assertFalse(boolean0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1287), 105, (-1287));
      assertNotNull(jSONPath_RangeSegment0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      Short short0 = new Short((short) (-43));
      assertEquals((short) (-43), (short)short0);
      assertNotNull(short0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      sQLTimeoutException0.printStackTrace();
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      
      boolean boolean1 = JSONPath.contains((Object) sQLTimeoutException0, "/stackTrace/3");
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      assertNotNull(jSONPath_MaxSegment0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("JSONPath$JSONPathParser");
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: JSONPath$JSONPathParser", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("JSONPath$JSONPathParser", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLDataException sQLDataException0 = new SQLDataException("zhtma", "vm/&FY 4sImC", 126, sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLDataException: zhtma", sQLDataException0.toString());
      assertEquals(126, sQLDataException0.getErrorCode());
      assertEquals("zhtma", sQLDataException0.getMessage());
      assertEquals("vm/&FY 4sImC", sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, sQLInvalidAuthorizationSpecException0, sQLDataException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("D");
      assertEquals("D", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String string0 = jSONPath0.getPath();
      assertEquals("D", jSONPath0.getPath());
      assertEquals("D", string0);
      assertNotNull(string0);
      
      boolean boolean0 = jSONPath0.isRef();
      assertEquals("D", jSONPath0.getPath());
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(47);
      assertEquals(47, (int)integer0);
      assertNotNull(integer0);
      
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      boolean boolean1 = JSONPath.isDouble(class0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "D";
      stringArray0[1] = "kotlin.ranges.CharRange";
      stringArray0[2] = "kotlin.ranges.CharRange";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(jSONPath_MultiPropertySegment0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      JSONPath jSONPath1 = JSONPath.compile("kcCwrdY");
      assertEquals("kcCwrdY", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(",");
      assertNotNull(jSONPath_JSONPathParser0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains(47));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("RLIKE");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("RLIKE", "RLIKE", false);
      assertNotNull(jSONPath_ValueSegment0);
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_ValueSegment0);
      assertNotNull(jSONPath_Filter0);
      assertSame(jSONPath_ValueSegment0, jSONPath_Filter0);
      assertSame(jSONPath_Filter0, jSONPath_ValueSegment0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_Filter0);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("RLIKE");
      assertEquals("RLIKE", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "RLIKE", "RLIKE");
      assertEquals("RLIKE", jSONPath0.getPath());
      assertEquals("RLIKE", object0);
      assertNotNull(object0);
      assertSame(jSONPath_ValueSegment0, jSONPath_Filter0);
      assertSame(jSONPath_Filter0, jSONPath_ValueSegment0);
      
      Set<?> set0 = JSONPath.keySet((Object) jSONPath_Filter0, "RLIKE");
      assertNull(set0);
      assertSame(jSONPath_ValueSegment0, jSONPath_Filter0);
      assertSame(jSONPath_Filter0, jSONPath_ValueSegment0);
      
      Object object1 = JSONPath.read("", "");
      assertNull(object1);
      
      char[] charArray0 = new char[15];
      char char0 = 'k';
      charArray0[0] = char0;
      char char1 = '3';
      charArray0[1] = char1;
      char char2 = 'B';
      charArray0[2] = char2;
      char char3 = 'h';
      charArray0[3] = char3;
      char char4 = '$';
      charArray0[4] = char4;
      char char5 = 'T';
      charArray0[5] = char5;
      int int0 = 72;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      int int1 = 176;
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(charArray0, int0, parserConfig0, int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("D");
      assertEquals("D", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String string0 = jSONPath0.getPath();
      assertEquals("D", jSONPath0.getPath());
      assertEquals("D", string0);
      assertNotNull(string0);
      
      boolean boolean0 = jSONPath0.isRef();
      assertEquals("D", jSONPath0.getPath());
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(47);
      assertEquals(47, (int)integer0);
      assertNotNull(integer0);
      
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      boolean boolean1 = JSONPath.isDouble(class0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "D";
      stringArray0[1] = "kotlin.ranges.CharRange";
      stringArray0[2] = "kotlin.ranges.CharRange";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(jSONPath_MultiPropertySegment0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      JSONPath jSONPath1 = JSONPath.compile("kcCwrdY");
      assertEquals("kcCwrdY", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(",");
      assertNotNull(jSONPath_JSONPathParser0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains("D"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("D", "SuX");
      assertEquals("D", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: D", sQLTimeoutException0.toString());
      assertEquals("SuX", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("SuX", "illegal", 47, sQLTimeoutException0);
      assertEquals("illegal", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("SuX", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: SuX", sQLFeatureNotSupportedException0.toString());
      assertEquals(47, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("D", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: D", sQLTimeoutException0.toString());
      assertEquals("SuX", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject(sQLFeatureNotSupportedException0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals("illegal", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("SuX", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: SuX", sQLFeatureNotSupportedException0.toString());
      assertEquals(47, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("D", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: D", sQLTimeoutException0.toString());
      assertEquals("SuX", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      String string1 = jSONPath1.getPath();
      assertEquals("kcCwrdY", jSONPath1.getPath());
      assertEquals("kcCwrdY", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(string1);
      assertNotSame(jSONPath1, jSONPath0);
      
      Pattern pattern0 = Pattern.compile("kcCwrdY", 3);
      assertEquals(3, pattern0.flags());
      assertEquals("kcCwrdY", pattern0.pattern());
      assertEquals("kcCwrdY", pattern0.toString());
      assertNotNull(pattern0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("i\"a!6pOE|]a;R)-,", pattern0, jSONPath_Operator0);
      assertEquals(3, pattern0.flags());
      assertEquals("kcCwrdY", pattern0.pattern());
      assertEquals("kcCwrdY", pattern0.toString());
      assertNotNull(jSONPath_RegMatchSegement0);
      
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement1 = (JSONPath.RegMatchSegement)jSONPath_JSONPathParser0.filterRest(jSONPath_RegMatchSegement0);
      assertEquals(3, pattern0.flags());
      assertEquals("kcCwrdY", pattern0.pattern());
      assertEquals("kcCwrdY", pattern0.toString());
      assertNotNull(jSONPath_RegMatchSegement1);
      assertSame(jSONPath_RegMatchSegement0, jSONPath_RegMatchSegement1);
      assertSame(jSONPath_RegMatchSegement1, jSONPath_RegMatchSegement0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("D");
      assertEquals("D", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String string0 = jSONPath0.getPath();
      assertEquals("D", jSONPath0.getPath());
      assertEquals("D", string0);
      assertNotNull(string0);
      
      boolean boolean0 = jSONPath0.isRef();
      assertEquals("D", jSONPath0.getPath());
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(47);
      assertEquals(47, (int)integer0);
      assertNotNull(integer0);
      
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      boolean boolean1 = JSONPath.isDouble(class0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("Y!)9H-@>~lF>", Double.NaN, jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath jSONPath1 = JSONPath.compile("jNj3} =Q#c");
      assertEquals("jNj3} =Q#c", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      Double double0 = new Double(1879.46152325);
      assertEquals(1879.46152325, (double)double0, 0.01);
      assertNotNull(double0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("_G;3&@Eop7$S,_2=rKq", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      Short short0 = new Short((short) (-15312));
      assertEquals((short) (-15312), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-15312));
      assertEquals((short) (-15312), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("jNj3} =Q#c");
      assertNotNull(jSONPath_NotNullSegement0);
      
      Integer integer1 = new Integer((short) (-15312));
      assertEquals((-15312), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean2 = jSONPath_NotNullSegement0.apply(jSONPath1, (Object) null, integer1, short0);
      assertEquals("jNj3} =Q#c", jSONPath1.getPath());
      assertFalse(boolean2);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertTrue(short0.equals((Object)short1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      boolean boolean3 = JSONPath.eqNotNull(short0, integer1);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(short0.equals((Object)short1));
      assertFalse(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      Integer integer0 = new Integer(5);
      assertEquals(5, (int)integer0);
      assertNotNull(integer0);
      
      SQLException sQLException0 = new SQLException("can not create ASMParser", "can not create ASMParser", (Throwable) null);
      assertEquals("can not create ASMParser", sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: can not create ASMParser", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("can not create ASMParser", sQLException0.getMessage());
      assertNotNull(sQLException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("ASMClassLoader$1");
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("ASMClassLoader$1", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ASMClassLoader$1", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      Short short0 = new Short((short)3495);
      assertEquals((short)3495, (short)short0);
      assertNotNull(short0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      boolean boolean0 = JSONPath.eqNotNull(short0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "like";
      JSONPath jSONPath0 = JSONPath.compile("like");
      assertEquals("like", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String string1 = jSONPath0.getPath();
      assertEquals("like", jSONPath0.getPath());
      assertEquals("like", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = jSONPath0.isRef();
      assertEquals("like", jSONPath0.getPath());
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(61);
      assertEquals(61, (int)integer0);
      assertNotNull(integer0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("like", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      byte byte0 = (byte)95;
      Byte byte1 = new Byte((byte)95);
      assertEquals((byte)95, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(javaBeanSerializer0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "rlike";
      stringArray0[1] = "kotlin.ranges.CharRange";
      stringArray0[2] = "YEiY;R?kC~*uo";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(class0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      Long long0 = new Long(108L);
      assertEquals(108L, (long)long0);
      assertNotNull(long0);
      
      Integer integer0 = new Integer(7);
      assertEquals(7, (int)integer0);
      assertNotNull(integer0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2379, 163, 2379);
      assertNotNull(mockGregorianCalendar0);
      
      String string0 = "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer";
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      MockThrowable mockThrowable0 = new MockThrowable("com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer");
      assertNotNull(mockThrowable0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer", mockThrowable0);
      assertEquals("com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer", mockThrowable0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer", sQLRecoverableException0.toString());
      assertEquals("com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLRecoverableException0);
      assertEquals("com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer", mockThrowable0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer", sQLRecoverableException0.toString());
      assertEquals("com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLRecoverableException: com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer", "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer", 2379);
      assertEquals("com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(2379, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval((JSONPath) null, sQLSyntaxErrorException0, sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$WildCardSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath jSONPath0 = new JSONPath("L8iS(7");
      assertEquals("L8iS(7", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath jSONPath1 = null;
      Long long0 = new Long(2197L);
      assertEquals(2197L, (long)long0);
      assertNotNull(long0);
      
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval((JSONPath) null, long0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$WildCardSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Integer integer0 = new Integer(7);
      assertEquals(7, (int)integer0);
      assertNotNull(integer0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2379, 7, 7);
      assertNotNull(mockGregorianCalendar0);
      
      boolean boolean0 = JSONPath.remove((Object) mockGregorianCalendar0, "eX0ln");
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2379,MONTH=7,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=7,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = JSONPath.compile("[");
      assertEquals("[", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Short short0 = new Short((short) (-1976));
      assertEquals((short) (-1976), (short)short0);
      assertNotNull(short0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("r,@Lmc3J", "com.alibaba.fastjson.JSONPath$PropertySegment", (-43), (Throwable) null);
      assertEquals("com.alibaba.fastjson.JSONPath$PropertySegment", sQLTransientException0.getSQLState());
      assertEquals((-43), sQLTransientException0.getErrorCode());
      assertEquals("r,@Lmc3J", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: r,@Lmc3J", sQLTransientException0.toString());
      assertNotNull(sQLTransientException0);
      
      SQLWarning sQLWarning0 = new SQLWarning(sQLTransientException0);
      assertEquals("com.alibaba.fastjson.JSONPath$PropertySegment", sQLTransientException0.getSQLState());
      assertEquals((-43), sQLTransientException0.getErrorCode());
      assertEquals("r,@Lmc3J", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: r,@Lmc3J", sQLTransientException0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.sql.SQLTransientException: r,@Lmc3J", sQLWarning0.toString());
      assertEquals("java.sql.SQLTransientException: r,@Lmc3J", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertNotNull(sQLWarning0);
      
      boolean boolean1 = JSONPath.contains((Object) sQLWarning0, "eX0ln");
      assertEquals("com.alibaba.fastjson.JSONPath$PropertySegment", sQLTransientException0.getSQLState());
      assertEquals((-43), sQLTransientException0.getErrorCode());
      assertEquals("r,@Lmc3J", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: r,@Lmc3J", sQLTransientException0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.sql.SQLTransientException: r,@Lmc3J", sQLWarning0.toString());
      assertEquals("java.sql.SQLTransientException: r,@Lmc3J", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = jSONPath0.contains((Object) sQLWarning0);
      assertEquals("[", jSONPath0.getPath());
      assertEquals("com.alibaba.fastjson.JSONPath$PropertySegment", sQLTransientException0.getSQLState());
      assertEquals((-43), sQLTransientException0.getErrorCode());
      assertEquals("r,@Lmc3J", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: r,@Lmc3J", sQLTransientException0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.sql.SQLTransientException: r,@Lmc3J", sQLWarning0.toString());
      assertEquals("java.sql.SQLTransientException: r,@Lmc3J", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Integer integer0 = new Integer(7);
      assertEquals(7, (int)integer0);
      assertNotNull(integer0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1804), 224, (-541));
      assertNotNull(mockGregorianCalendar0);
      
      boolean boolean0 = JSONPath.remove((Object) integer0, "eX0ln");
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[");
      assertNotNull(jSONPath_JSONPathParser0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("AxRT/>&TMNq?bo=", "[h(1-n03M-y`c1");
      assertEquals("[h(1-n03M-y`c1", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("AxRT/>&TMNq?bo=", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: AxRT/>&TMNq?bo=", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      Spliterator<Throwable> spliterator0 = sQLInvalidAuthorizationSpecException0.spliterator();
      assertEquals("[h(1-n03M-y`c1", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("AxRT/>&TMNq?bo=", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: AxRT/>&TMNq?bo=", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(spliterator0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) sQLInvalidAuthorizationSpecException0);
      assertEquals("[h(1-n03M-y`c1", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("AxRT/>&TMNq?bo=", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: AxRT/>&TMNq?bo=", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals(83, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("l]c|U0]gX2Jo8*_g");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath jSONPath0 = new JSONPath("):S>@5^L");
      assertEquals("):S>@5^L", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Float float0 = new Float((double) (-1804));
      assertEquals((-1804.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = JSONPath.reserveToObject(float0, (String[]) null);
      assertEquals((-1804.0F), object0);
      assertNotNull(object0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("t", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      Object object1 = JSONPath.eval((Object) jSONPath_PropertySegment0, "[");
      assertNotNull(object1);
      assertSame(jSONPath_PropertySegment0, object1);
      assertSame(object1, jSONPath_PropertySegment0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      Integer integer0 = new Integer(7);
      assertEquals(7, (int)integer0);
      assertNotNull(integer0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(7, (-60), 1004);
      assertNotNull(mockGregorianCalendar0);
      
      boolean boolean0 = JSONPath.remove((Object) null, "eX0ln");
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = JSONPath.compile(".");
      assertEquals(".", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Object object0 = jSONPath0.eval((Object) "eX0ln");
      assertEquals(".", jSONPath0.getPath());
      assertEquals("eX0ln", object0);
      assertNotNull(object0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("autoTypeSupport");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      String string0 = "+?FH8,*,(1";
      JSONPath jSONPath1 = JSONPath.compile("+?FH8,*,(1");
      assertEquals("+?FH8,*,(1", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      Integer integer1 = new Integer(1004);
      assertEquals(1004, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(1004);
      assertEquals(1004, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "autoTypeSupport";
      stringArray0[1] = ".";
      stringArray0[2] = ".";
      stringArray0[3] = "eX0ln";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(integer2, stringArray0);
      assertEquals(4, stringArray0.length);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(4, jSONArray0.size());
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      // Undeclared exception!
      try { 
        jSONPath1.eval((Object) jSONPath_WildCardSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. +?FH8,*,(1
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("z_");
      assertNotNull(jSONPath_NullSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      Long long0 = new Long(5L);
      assertEquals(5L, (long)long0);
      assertNotNull(long0);
      
      Object object0 = JSONPath.eval((Object) "/beanInfo/clazz/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type", "/beanInfo/clazz/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type");
      assertNull(object0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("/beanInfo/clazz/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type");
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("/beanInfo/clazz/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: /beanInfo/clazz/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "z_";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(long0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      boolean boolean0 = JSONPath.eqNotNull(3089, 3089);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(90);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1228), (-1228), 90, (-1228), (-1228));
      assertNotNull(mockGregorianCalendar0);
      
      JSONPath jSONPath0 = new JSONPath("{\"b\":null,\"z\":true,\"NOT_BETWEEN\":\"hello\",\"a\":false,\"toCharArray\":7,\"xx\":null}");
      assertEquals("{\"b\":null,\"z\":true,\"NOT_BETWEEN\":\"hello\",\"a\":false,\"toCharArray\":7,\"xx\":null}", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath jSONPath1 = JSONPath.compile("writeBefore");
      assertEquals("writeBefore", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      boolean boolean0 = jSONPath1.remove((Object) "=k|g\":UIB,p^");
      assertEquals("writeBefore", jSONPath1.getPath());
      assertFalse(boolean0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte) (-53);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)42, (byte)8, (byte) (-36), (byte) (-53)}, byteArray0);
      assertTrue(boolean1 == boolean0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("=k|g\":UIB,p^");
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("=k|g\":UIB,p^", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: =k|g\":UIB,p^", sQLNonTransientException0.toString());
      assertNotNull(sQLNonTransientException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("=k|g\":UIB,p^", "{\"b\":null,\"z\":true,\"NOT_BETWEEN\":\"hello\",\"a\":false,\"toCharArray\":7,\"xx\":null}", sQLNonTransientException0);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("=k|g\":UIB,p^", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: =k|g\":UIB,p^", sQLNonTransientException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: =k|g\":UIB,p^", sQLNonTransientConnectionException0.toString());
      assertEquals("{\"b\":null,\"z\":true,\"NOT_BETWEEN\":\"hello\",\"a\":false,\"toCharArray\":7,\"xx\":null}", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("=k|g\":UIB,p^", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("=k|g\":UIB,p^", sQLNonTransientException0);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("=k|g\":UIB,p^", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: =k|g\":UIB,p^", sQLNonTransientException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: =k|g\":UIB,p^", sQLRecoverableException0.toString());
      assertEquals("=k|g\":UIB,p^", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("e");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(1, jSONPath_SegmentArray0.length);
      assertNotNull(jSONPath_SegmentArray0);
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      assertNotNull(jSONPath_SizeSegment0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("eT_pgJpP");
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: eT_pgJpP", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("eT_pgJpP", sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("dDSlF{ZB8/<(c{`", sQLRecoverableException0, false);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("=k|g\":UIB,p^", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: =k|g\":UIB,p^", sQLNonTransientException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: =k|g\":UIB,p^", sQLRecoverableException0.toString());
      assertEquals("=k|g\":UIB,p^", sQLRecoverableException0.getMessage());
      assertNotNull(jSONPath_ValueSegment0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("<!_^e$%~l+T>iB");
      assertNotNull(jSONPath_NotNullSegement0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.getNextChar();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      assertNotNull(jSONPath_SizeSegment0);
      
      String string0 = "&6";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("&6");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(90);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1228), (-1228), 90, (-1228), (-1228));
      assertNotNull(mockGregorianCalendar0);
      
      JSONPath jSONPath0 = new JSONPath("{\"/stackTrace/6\":null,\"z\":true,\"x\":\"hello\",\"a\":[],\"Pv5N?crzpwg5\":7}");
      assertEquals("{\"/stackTrace/6\":null,\"z\":true,\"x\":\"hello\",\"a\":[],\"Pv5N?crzpwg5\":7}", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String string0 = jSONPath0.getPath();
      assertEquals("{\"/stackTrace/6\":null,\"z\":true,\"x\":\"hello\",\"a\":[],\"Pv5N?crzpwg5\":7}", jSONPath0.getPath());
      assertEquals("{\"/stackTrace/6\":null,\"z\":true,\"x\":\"hello\",\"a\":[],\"Pv5N?crzpwg5\":7}", string0);
      assertNotNull(string0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath jSONPath1 = JSONPath.compile("writeBefore");
      assertEquals("writeBefore", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath1, "=k|g\":UIB,p^", jSONPath_ArrayAccessSegment0);
      assertEquals("writeBefore", jSONPath1.getPath());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(arrayList0);
      assertNotSame(jSONPath1, jSONPath0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("=k|g\":UIB,p^");
      assertEquals("=k|g\":UIB,p^", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: =k|g\":UIB,p^", sQLNonTransientException0.toString());
      assertNotNull(sQLNonTransientException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("=k|g\":UIB,p^", "{\"/stackTrace/6\":null,\"z\":true,\"x\":\"hello\",\"a\":[],\"Pv5N?crzpwg5\":7}", sQLNonTransientException0);
      assertEquals("=k|g\":UIB,p^", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: =k|g\":UIB,p^", sQLNonTransientException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: =k|g\":UIB,p^", sQLNonTransientConnectionException0.toString());
      assertEquals("{\"/stackTrace/6\":null,\"z\":true,\"x\":\"hello\",\"a\":[],\"Pv5N?crzpwg5\":7}", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("=k|g\":UIB,p^", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("=k|g\":UIB,p^", sQLNonTransientException0);
      assertEquals("=k|g\":UIB,p^", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: =k|g\":UIB,p^", sQLNonTransientException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("=k|g\":UIB,p^", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: =k|g\":UIB,p^", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("e");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String[] stringArray0 = new String[0];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("{\"/stackTrace/6\":null,\"z\":true,\"x\":\"hello\",\"a\":[],\"Pv5N?crzpwg5\":7}", "`0U5htwl/90xlw`JR+", (String) null, stringArray0, true);
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONPath_MatchSegement0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("`0U5htwl/90xlw`JR+", jSONPath_WildCardSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "/stackTrace/0";
      JSONPath jSONPath0 = new JSONPath("/stackTrace/0");
      assertEquals("/stackTrace/0", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jSONPath0;
      objectArray0[1] = (Object) "/stackTrace/0";
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "/stackTrace/0", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path /stackTrace/0
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      JSONPath jSONPath0 = JSONPath.compile("");
      assertEquals("", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/0");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("eX0ln");
      assertNotNull(jSONPath_Segment0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("*ytjUCGqB;&", "[", false);
      assertNotNull(jSONPath_ValueSegment0);
      
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('s', char0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLTimeoutException", sQLRecoverableException0.toString());
      assertEquals("java.sql.SQLTimeoutException", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("eX0ln", sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: eX0ln", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("eX0ln", sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath_ValueSegment0, "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" I");
      assertEquals(" I", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Throwable throwable0 = null;
      String string0 = "|9Uj '/";
      SQLException sQLException0 = new SQLException(" I", "|9Uj '/", (Throwable) null);
      assertEquals(" I", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("|9Uj '/", sQLException0.getSQLState());
      assertEquals("java.sql.SQLException:  I", sQLException0.toString());
      assertNotNull(sQLException0);
      
      String string1 = "AucuY< ln8?Zdbfc[/t";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("AucuY< ln8?Zdbfc[/t", "AucuY< ln8?Zdbfc[/t", (Throwable) null);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("AucuY< ln8?Zdbfc[/t", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: AucuY< ln8?Zdbfc[/t", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("AucuY< ln8?Zdbfc[/t", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      Short short0 = new Short((short)3495);
      assertEquals((short)3495, (short)short0);
      assertNotNull(short0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      JSONPath jSONPath1 = JSONPath.compile("|9Uj '/");
      assertEquals("|9Uj '/", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      Class<BigInteger> class0 = BigInteger.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      Pattern pattern0 = Pattern.compile("b|eeP");
      assertEquals(0, pattern0.flags());
      assertEquals("b|eeP", pattern0.pattern());
      assertEquals("b|eeP", pattern0.toString());
      assertNotNull(pattern0);
      
      Matcher matcher0 = pattern0.matcher("b|eeP");
      assertEquals(0, pattern0.flags());
      assertEquals("b|eeP", pattern0.pattern());
      assertEquals("b|eeP", pattern0.toString());
      assertFalse(matcher0.hasTransparentBounds());
      assertTrue(matcher0.hasAnchoringBounds());
      assertEquals(0, matcher0.groupCount());
      assertEquals("java.util.regex.Matcher[pattern=b|eeP region=0,7 lastmatch=]", matcher0.toString());
      assertNotNull(matcher0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("b|eeP", pattern0, jSONPath_Operator0);
      assertEquals(0, pattern0.flags());
      assertEquals("b|eeP", pattern0.pattern());
      assertEquals("b|eeP", pattern0.toString());
      assertNotNull(jSONPath_RegMatchSegement0);
      
      JSONPath jSONPath0 = new JSONPath("max");
      assertEquals("max", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1630, 1630, 1630);
      assertNotNull(mockGregorianCalendar0);
      
      jSONPath0.init();
      assertEquals("max", jSONPath0.getPath());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string0 = "?2Y";
      JSONPath jSONPath1 = JSONPath.compile("?2Y");
      assertEquals("?2Y", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath1.eval((Object) jSONPath0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ?2Y
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.set(2442, 2442, 473);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2442,MONTH=2442,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=473,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertEquals(3, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      Date date0 = mockGregorianCalendar0.getTime();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2442,MONTH=2442,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=473,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      mockGregorianCalendar0.set((-586), (-586), 2442, 113, 2442, 0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=-586,MONTH=-586,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=2442,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=113,MINUTE=2442,SECOND=0,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      int int0 = mockGregorianCalendar0.getMaximum(0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=-586,MONTH=-586,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=2442,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=113,MINUTE=2442,SECOND=0,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, int0);
      
      int int1 = mockGregorianCalendar0.get(0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-81989849879680,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=630,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=12,DAY_OF_YEAR=316,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=0,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-81989849879680,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=630,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=12,DAY_OF_YEAR=316,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=0,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotNull(map0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("");
      assertNotNull(jSONPath_NotNullSegement0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      
      SQLWarning sQLWarning0 = new SQLWarning("");
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertNotNull(sQLWarning0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLWarning0);
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLWarning: ", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.SQLWarning: ", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, sQLTransactionRollbackException0, date0);
      assertEquals(1, intArray0.length);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-81989849879680,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=630,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=12,DAY_OF_YEAR=316,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=0,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLWarning: ", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.SQLWarning: ", sQLTransactionRollbackException0.getMessage());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("LE", 0, jSONPath_Operator0);
      assertNotNull(jSONPath_IntOpSegement0);
      
      Float float0 = new Float((float) 113);
      assertEquals(113.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.LIKE;
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotSame(jSONPath_Operator1, jSONPath_Operator0);
      
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, float0, parserConfig0, jSONPath_Operator1);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("fastjson.parser.deny.internal", jSONPath0.getPath());
      assertFalse(boolean0);
      assertFalse(jSONPath_Operator0.equals((Object)jSONPath_Operator1));
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotSame(jSONPath_Operator0, jSONPath_Operator1);
      assertNotSame(jSONPath_Operator1, jSONPath_Operator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" I");
      assertEquals(" I", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = " I";
      JSONPath jSONPath1 = JSONPath.compile("1;~v;H=Gl[i6");
      assertEquals("1;~v;H=Gl[i6", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNull(sQLNonTransientException0.getMessage());
      assertNotNull(sQLNonTransientException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(" I", sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException:  I", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(" I", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLTransientConnectionException", sQLRecoverableException0.toString());
      assertEquals("java.sql.SQLTransientConnectionException", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("unsupported set operation.", sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: unsupported set operation.", sQLTransientConnectionException1.toString());
      assertEquals("unsupported set operation.", sQLTransientConnectionException1.getMessage());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertNotNull(sQLTransientConnectionException1);
      
      JSONPath jSONPath2 = JSONPath.compile("{10b6Omnn/'$>k");
      assertEquals("{10b6Omnn/'$>k", jSONPath2.getPath());
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertNotNull(jSONPath2);
      assertNotSame(jSONPath2, jSONPath1);
      assertNotSame(jSONPath2, jSONPath0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(16, (-521), 103);
      assertNotNull(jSONPath_RangeSegment0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath2, (Object) null, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -4
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long long0 = JSONPath.LENGTH;
      assertEquals((-1580386065683472715L), long0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "rlike");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Byte byte0 = new Byte((byte)25);
      assertEquals((byte)25, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean3 = JSONPath.eqNotNull((-1580386065683472715L), byte0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      JSONPath jSONPath0 = JSONPath.compile("fastjson.serializerFeatures.MapSortField");
      assertEquals("fastjson.serializerFeatures.MapSortField", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath jSONPath1 = new JSONPath("rlike");
      assertEquals("rlike", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertEquals("fastjson.serializerFeatures.MapSortField", jSONPath0.getPath());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNotNull(javaBeanDeserializer0);
      assertNotSame(jSONPath0, jSONPath1);
      
      Float float0 = new Float((-1.0));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean4 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      
      boolean boolean5 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      
      Object object0 = jSONPath0.getArrayItem((Object) null, (-1982848356));
      assertEquals("fastjson.serializerFeatures.MapSortField", jSONPath0.getPath());
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNull(object0);
      assertNotSame(jSONPath0, jSONPath1);
      
      jSONPath0.arrayAdd((Object) null, (Object[]) null);
      assertEquals("fastjson.serializerFeatures.MapSortField", jSONPath0.getPath());
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNotSame(jSONPath0, jSONPath1);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("/stackTrace/13", "Jufh(:]'O*#VY&[f");
      assertEquals("java.sql.SQLRecoverableException: /stackTrace/13", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("Jufh(:]'O*#VY&[f", sQLRecoverableException0.getSQLState());
      assertEquals("/stackTrace/13", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("/stackTrace/13", "/stackTrace/13", 32, sQLRecoverableException0);
      assertEquals("/stackTrace/13", sQLRecoverableException1.getSQLState());
      assertEquals(32, sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: /stackTrace/13", sQLRecoverableException1.toString());
      assertEquals("/stackTrace/13", sQLRecoverableException1.getMessage());
      assertEquals("java.sql.SQLRecoverableException: /stackTrace/13", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("Jufh(:]'O*#VY&[f", sQLRecoverableException0.getSQLState());
      assertEquals("/stackTrace/13", sQLRecoverableException0.getMessage());
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertNotNull(sQLRecoverableException1);
      
      int int0 = jSONPath0.evalSize(sQLRecoverableException1);
      assertEquals("/stackTrace/13", sQLRecoverableException1.getSQLState());
      assertEquals(32, sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: /stackTrace/13", sQLRecoverableException1.toString());
      assertEquals("/stackTrace/13", sQLRecoverableException1.getMessage());
      assertEquals("fastjson.serializerFeatures.MapSortField", jSONPath0.getPath());
      assertEquals("java.sql.SQLRecoverableException: /stackTrace/13", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("Jufh(:]'O*#VY&[f", sQLRecoverableException0.getSQLState());
      assertEquals("/stackTrace/13", sQLRecoverableException0.getMessage());
      assertEquals(6, int0);
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException1));
      assertNotSame(sQLRecoverableException1, sQLRecoverableException0);
      assertNotSame(jSONPath0, jSONPath1);
      assertNotSame(sQLRecoverableException0, sQLRecoverableException1);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(8, (-1846), 6);
      assertNotNull(jSONPath_RangeSegment0);
      
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath1, (Object) null, "Jufh(:]'O*#VY&[f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -307
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      assertNotNull(jSONPath_MaxSegment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(116, true);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = JSONPath.eqNotNull(byte0, byte0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("/stackTrace/10", "/stackTrace/10", true);
      assertNotNull(jSONPath_ValueSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/10");
      assertEquals("/stackTrace/10", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, sQLClientInfoException0, sQLClientInfoException0, "/stackTrace/10");
      assertEquals("/stackTrace/10", jSONPath0.getPath());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("/stackTrace/10");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("< $)x#&!Oo");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Operator jSONPath_Operator0 = jSONPath_JSONPathParser0.readOp();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte)11;
      byteArray0[8] = (byte)117;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals((short)2933, bigInteger0.shortValue());
      assertEquals((byte)117, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte)124, (byte)48, (byte)124, (byte)72, (byte)124, (byte) (-67), (byte)117, (byte)11, (byte)117}, byteArray0);
      assertNotNull(bigInteger0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig((byte)11, false);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertFalse(parserConfig1.isJacksonCompatible());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(parserConfig1.isSafeMode());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      ParserConfig parserConfig2 = new ParserConfig(classLoader1);
      assertFalse(parserConfig2.isAutoTypeSupport());
      assertTrue(parserConfig2.isAsmEnable());
      assertFalse(parserConfig2.isJacksonCompatible());
      assertFalse(parserConfig2.isSafeMode());
      assertFalse(parserConfig2.equals((Object)parserConfig1));
      assertFalse(parserConfig2.equals((Object)parserConfig0));
      assertNotNull(parserConfig2);
      assertFalse(parserConfig2.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig2.compatibleWithJavaBean);
      
      JSONPath jSONPath1 = new JSONPath("javax.xml.bind.annotation.XmlAccessorType", serializeConfig0, parserConfig2);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig2.isAutoTypeSupport());
      assertTrue(parserConfig2.isAsmEnable());
      assertFalse(parserConfig2.isJacksonCompatible());
      assertFalse(parserConfig2.isSafeMode());
      assertEquals("javax.xml.bind.annotation.XmlAccessorType", jSONPath1.getPath());
      assertFalse(parserConfig2.equals((Object)parserConfig1));
      assertFalse(parserConfig2.equals((Object)parserConfig0));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(parserConfig2.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig2.compatibleWithJavaBean);
      
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.LIKE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("fastjson.parser.autoTypeAccept", (byte)11, jSONPath_Operator1);
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotNull(jSONPath_IntOpSegement0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)124;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("/stackTrace/8", intArray0, sQLClientInfoException0);
      assertEquals(1, intArray0.length);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: /stackTrace/8", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("/stackTrace/8", batchUpdateException0.getMessage());
      assertArrayEquals(new int[] {124}, intArray0);
      assertNotNull(batchUpdateException0);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte)124;
      intArray1[1] = (int) (byte) (-67);
      intArray1[2] = (int) (byte) (-67);
      intArray1[3] = (int) (byte)124;
      intArray1[4] = (int) (byte)11;
      intArray1[5] = (int) (byte)48;
      intArray1[6] = (int) (byte) (-67);
      intArray1[7] = (-5049);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray1);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {124, (-67), (-67), 124, 11, 48, (-67), (-5049)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(jSONPath_MultiIndexSegment0);
      
      SQLWarning sQLWarning0 = new SQLWarning("/stackTrace/5");
      assertEquals("java.sql.SQLWarning: /stackTrace/5", sQLWarning0.toString());
      assertEquals("/stackTrace/5", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNotNull(sQLWarning0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLWarning0);
      assertEquals("java.sql.SQLWarning: /stackTrace/5", sQLWarning0.toString());
      assertEquals("/stackTrace/5", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: /stackTrace/5", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLWarning: /stackTrace/5", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      // Undeclared exception!
      try { 
        jSONPath_MultiIndexSegment0.eval(jSONPath0, sQLTransactionRollbackException0, "[J");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "/stackTrace/10";
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("/stackTrace/10", "/stackTrace/10", true);
      assertNotNull(jSONPath_ValueSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/10");
      assertEquals("/stackTrace/10", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, sQLClientInfoException0, sQLClientInfoException0, "/stackTrace/10");
      assertEquals("/stackTrace/10", jSONPath0.getPath());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("/stackTrace/10");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("< $)x#&!Oo");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.readOp();
      Integer integer0 = new Integer((-2033));
      assertEquals((-2033), (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("\"< RIwr7<Q?q:pYDn}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"< RIwr7<Q?q\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Wxvk");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONPath jSONPath0 = new JSONPath("l]c|U0]gX2Jo8*_g");
      assertEquals("l]c|U0]gX2Jo8*_g", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "l]c|U0]gX2Jo8*_g";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("autoTypeSupport", stringArray0, true);
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONPath_StringInSegement0);
      
      JSONPath jSONPath1 = JSONPath.compile(".null");
      assertEquals(".null", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(176, 0, 176);
      assertNotNull(mockGregorianCalendar0);
      
      SQLDataException sQLDataException0 = new SQLDataException("NOT_BETWEEN", ".MhhOn#g", 61, sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(".MhhOn#g", sQLDataException0.getSQLState());
      assertEquals(61, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: NOT_BETWEEN", sQLDataException0.toString());
      assertEquals("NOT_BETWEEN", sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      SQLException sQLException0 = new SQLException("l]c|U0]gX2Jo8*_g", sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: l]c|U0]gX2Jo8*_g", sQLException0.toString());
      assertEquals("l]c|U0]gX2Jo8*_g", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertNotNull(sQLException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "eX0");
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("eX0", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      boolean boolean2 = jSONPath_StringInSegement0.apply(jSONPath0, "-", sQLException0, sQLSyntaxErrorException0);
      assertEquals(1, stringArray0.length);
      assertEquals("l]c|U0]gX2Jo8*_g", jSONPath0.getPath());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: l]c|U0]gX2Jo8*_g", sQLException0.toString());
      assertEquals("l]c|U0]gX2Jo8*_g", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("eX0", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertTrue(boolean2);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(jSONPath0, jSONPath1);
      
      int[] intArray0 = new int[3];
      intArray0[1] = 0;
      intArray0[2] = 61;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 61}, intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/beanInfo/clazz/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type/annotatedInterfaces/1/type/rawType/declaredMethods");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NOT_IN");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("NOT_IN");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = JSONPath.compile("DQI/k");
      assertEquals("DQI/k", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      boolean boolean2 = jSONPath0.remove((Object) null);
      assertEquals("DQI/k", jSONPath0.getPath());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("string");
      assertNotNull(jSONPath_Segment0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("value not found in path ", "/", (-794));
      assertEquals("value not found in path ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: value not found in path ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals((-794), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("/", sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      JSONPath jSONPath1 = JSONPath.compile("string");
      assertEquals("string", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      boolean boolean3 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("a6U*2X;Nx9N@}");
      assertNotNull(jSONPath_NullSegement0);
      
      Float float0 = new Float((float) (-794));
      assertEquals((-794.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray((Object) null, stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Float float0 = new Float(1000.0);
      assertEquals(1000.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      String string0 = "/stackTrace/9";
      JSONPath jSONPath0 = new JSONPath("/stackTrace/9");
      assertEquals("/stackTrace/9", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String string1 = jSONPath0.getPath();
      assertEquals("/stackTrace/9", jSONPath0.getPath());
      assertEquals("/stackTrace/9", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertEquals("/stackTrace/9", jSONPath0.getPath());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      assertNotNull(javaBeanDeserializer0);
      
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) javaBeanDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("D");
      assertEquals("D", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String string0 = jSONPath0.getPath();
      assertEquals("D", jSONPath0.getPath());
      assertEquals("D", string0);
      assertNotNull(string0);
      
      boolean boolean0 = jSONPath0.isRef();
      assertEquals("D", jSONPath0.getPath());
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(47);
      assertEquals(47, (int)integer0);
      assertNotNull(integer0);
      
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      boolean boolean1 = JSONPath.isDouble(class0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "D";
      stringArray0[1] = "kotlin.ranges.CharRange";
      stringArray0[2] = "kotlin.ranges.CharRange";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(jSONPath_MultiPropertySegment0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      JSONPath jSONPath1 = JSONPath.compile("kcCwrdY");
      assertEquals("kcCwrdY", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNull(sQLNonTransientException0.getMessage());
      assertNotNull(sQLNonTransientException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("D", sQLNonTransientException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: D", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("D", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTimeoutException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: D", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("D", sQLTimeoutException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLTimeoutException: D", sQLRecoverableException0.toString());
      assertEquals("java.sql.SQLTimeoutException: D", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{10b6Omnn/'$>k", sQLTimeoutException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: {10b6Omnn/'$>k", sQLTransientConnectionException0.toString());
      assertEquals("{10b6Omnn/'$>k", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: D", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("D", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      Set<?> set0 = jSONPath0.keySet((Object) "kotlin.ranges.CharRange");
      assertEquals("D", jSONPath0.getPath());
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNull(set0);
      assertNotSame(jSONPath0, jSONPath1);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-521), 47, 47);
      assertNotNull(jSONPath_RangeSegment0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath1, bigInteger0, (Object) null);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(arrayList0.isEmpty());
      assertEquals(12, arrayList0.size());
      assertEquals("kcCwrdY", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(arrayList0);
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject(arrayList0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(arrayList0.isEmpty());
      assertEquals(12, arrayList0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.size());
      assertEquals("kcCwrdY", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNotSame(jSONPath1, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      assertEquals(PropertyNamingStrategy.NoChange, propertyNamingStrategy0);
      
      String[] stringArray0 = new String[0];
      JSONPath jSONPath0 = new JSONPath(" I");
      assertEquals(" I", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(" I");
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(" I", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException:  I", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(" I", (String) null, sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(" I", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException:  I", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(" I", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException:  I", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      boolean boolean0 = jSONPath0.containsValue((Object) " I", (Object) sQLTimeoutException0);
      assertEquals(" I", jSONPath0.getPath());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(" I", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException:  I", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(" I", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException:  I", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertFalse(boolean0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(122, 1516, (-816), 26, 3392903, 1527);
      assertNotNull(mockGregorianCalendar0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      Byte byte0 = new Byte((byte) (-128));
      assertEquals((byte) (-128), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = JSONPath.reserveToObject("com", stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("com", object0);
      assertNotNull(object0);
      
      String string0 = jSONPath0.getPath();
      assertEquals(" I", jSONPath0.getPath());
      assertEquals(" I", string0);
      assertFalse(string0.equals((Object)object0));
      assertNotNull(string0);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      assertNotNull(jSONPath_MultiIndexSegment0);
      
      UUID uUID0 = MockUUID.randomUUID();
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNotNull(uUID0);
      
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.PascalCase;
      assertEquals(PropertyNamingStrategy.PascalCase, propertyNamingStrategy1);
      assertFalse(propertyNamingStrategy1.equals((Object)propertyNamingStrategy0));
      assertNotSame(propertyNamingStrategy1, propertyNamingStrategy0);
      
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(propertyNamingStrategy1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(propertyNamingStrategy1.equals((Object)propertyNamingStrategy0));
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertNotSame(propertyNamingStrategy1, propertyNamingStrategy0);
      
      Short short0 = new Short((short)4483);
      assertEquals((short)4483, (short)short0);
      assertNotNull(short0);
      
      JSONPath.arrayAdd((Object) short0, "com", (Object[]) stringArray0);
      assertEquals(0, stringArray0.length);
      
      Long[] longArray0 = new Long[7];
      Long long0 = new Long(26);
      assertEquals(26L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(26);
      assertEquals(26L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(1090L);
      assertEquals(1090L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long(6607618197526598121L);
      assertEquals(6607618197526598121L, (long)long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      
      longArray0[3] = long3;
      Long long4 = new Long(4956L);
      assertEquals(4956L, (long)long4);
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertNotNull(long4);
      
      longArray0[4] = long4;
      Long long5 = Long.valueOf(370L);
      assertEquals(370L, (long)long5);
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long1));
      assertNotNull(long5);
      
      longArray0[5] = long5;
      Long long6 = new Long((long) longArray0[0]);
      assertEquals(7, longArray0.length);
      assertEquals(26L, (long)long6);
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long2));
      assertTrue(long6.equals((Object)long0));
      assertTrue(long6.equals((Object)long1));
      assertNotNull(long6);
      
      longArray0[6] = long6;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("1.2.68", longArray0, false);
      assertEquals(7, longArray0.length);
      assertNotNull(jSONPath_IntObjInSegement0);
      
      JSONPath jSONPath1 = JSONPath.compile(",");
      assertEquals(",", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONPath_MultiPropertySegment0);
      
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "JW42Xl$*#u", 26, sQLTransientConnectionException0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals("JW42Xl$*#u", sQLWarning0.getSQLState());
      assertEquals(26, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(" I", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException:  I", sQLTransientConnectionException0.toString());
      assertNotNull(sQLWarning0);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, sQLWarning0, longArray0[5]);
      assertEquals(7, longArray0.length);
      assertEquals(0, stringArray0.length);
      assertEquals(" I", jSONPath0.getPath());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals("JW42Xl$*#u", sQLWarning0.getSQLState());
      assertEquals(26, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(" I", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException:  I", sQLTransientConnectionException0.toString());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNotNull(arrayList0);
      assertNotSame(jSONPath0, jSONPath1);
      
      boolean boolean1 = jSONPath_IntObjInSegement0.apply(jSONPath0, "com", jSONPath1, arrayList0);
      assertEquals(7, longArray0.length);
      assertEquals(0, stringArray0.length);
      assertEquals(",", jSONPath1.getPath());
      assertEquals(" I", jSONPath0.getPath());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals("JW42Xl$*#u", sQLWarning0.getSQLState());
      assertEquals(26, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(" I", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException:  I", sQLTransientConnectionException0.toString());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(boolean1);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(jSONPath1, jSONPath0);
      assertNotSame(jSONPath0, jSONPath1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Integer integer0 = new Integer(7);
      assertEquals(7, (int)integer0);
      assertNotNull(integer0);
      
      Long long0 = new Long((-1034L));
      assertEquals((-1034L), (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = JSONPath.remove((Object) long0, "like");
      assertFalse(boolean0);
      
      String string0 = "eX0";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      assertEquals(PropertyNamingStrategy.NoChange, propertyNamingStrategy0);
      
      // Undeclared exception!
      try { 
        JSONPath.set((Object) propertyNamingStrategy0, "like", (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "/stackTrace/10";
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("/stackTrace/10", "/stackTrace/10", true);
      assertNotNull(jSONPath_ValueSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/10");
      assertEquals("/stackTrace/10", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, sQLClientInfoException0, sQLClientInfoException0, "/stackTrace/10");
      assertEquals("/stackTrace/10", jSONPath0.getPath());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      assertNotNull(javaBeanDeserializer0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Double double0 = new Double(3629.1349);
      assertEquals(3629.1349, (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = jSONPath0.size((Object) parserConfig0);
      assertEquals("/stackTrace/10", jSONPath0.getPath());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals((-1), int0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(290);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("NE", jSONPath_ArrayAccessSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("fastjson.parser.deny.internal", 290, jSONPath_Operator1);
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotNull(jSONPath_IntOpSegement0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      JSONPath.RefOpSegement jSONPath_RefOpSegement1 = new JSONPath.RefOpSegement("fastjson.parser.autoTypeAccept", jSONPath_ArrayAccessSegment0, jSONPath_Operator1);
      assertFalse(jSONPath_RefOpSegement1.equals((Object)jSONPath_RefOpSegement0));
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotNull(jSONPath_RefOpSegement1);
      
      JSONPath.FilterSegment jSONPath_FilterSegment1 = new JSONPath.FilterSegment(jSONPath_RefOpSegement1);
      assertFalse(jSONPath_RefOpSegement1.equals((Object)jSONPath_RefOpSegement0));
      assertFalse(jSONPath_FilterSegment1.equals((Object)jSONPath_FilterSegment0));
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotNull(jSONPath_FilterSegment1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/stackTrace/8");
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: /stackTrace/8", sQLNonTransientConnectionException0.toString());
      assertEquals("/stackTrace/8", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1), 44, (-1718154296));
      assertNotNull(jSONPath_RangeSegment0);
      
      // Undeclared exception!
      try { 
        JSONPath.set((Object) jSONPath_Operator0, "fastjson.parser.deny", (Object) "/stackTrace/10");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      String string0 = "(>i7";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("-", "can not cast to byte, value : ", (-2725), (Throwable) null);
      assertEquals("java.sql.SQLTransientConnectionException: -", sQLTransientConnectionException0.toString());
      assertEquals("-", sQLTransientConnectionException0.getMessage());
      assertEquals("can not cast to byte, value : ", sQLTransientConnectionException0.getSQLState());
      assertEquals((-2725), sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[K>f?g;+H", "(>i7", 0, sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException: -", sQLTransientConnectionException0.toString());
      assertEquals("-", sQLTransientConnectionException0.getMessage());
      assertEquals("can not cast to byte, value : ", sQLTransientConnectionException0.getSQLState());
      assertEquals((-2725), sQLTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("[K>f?g;+H", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: [K>f?g;+H", sQLTimeoutException0.toString());
      assertEquals("(>i7", sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) "can not cast to byte, value : ");
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotNull(map0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("WcZ");
      assertNotNull(jSONPath_NotNullSegement0);
      
      Float float0 = new Float((-2026.96F));
      assertEquals((-2026.96F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[K>f?g;+H");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/12");
      assertEquals("/stackTrace/12", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.alibaba.fastjson.JSONArray", sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException: -", sQLTransientConnectionException0.toString());
      assertEquals("-", sQLTransientConnectionException0.getMessage());
      assertEquals("can not cast to byte, value : ", sQLTransientConnectionException0.getSQLState());
      assertEquals((-2725), sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("com.alibaba.fastjson.JSONArray", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: com.alibaba.fastjson.JSONArray", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("com.alibaba.fastjson.serializer.AnnotationSerializer");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.set(2442, 2442, 473);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2442,MONTH=2442,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=473,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertFalse(set0.isEmpty());
      assertEquals(3, set0.size());
      assertNotNull(set0);
      
      Date date0 = mockGregorianCalendar0.getTime();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2442,MONTH=2442,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=473,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      mockGregorianCalendar0.set((-586), (-586), 2442, 113, 2442, 0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=-586,MONTH=-586,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=2442,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=113,MINUTE=2442,SECOND=0,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      int int0 = mockGregorianCalendar0.getMaximum(0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=-586,MONTH=-586,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=2442,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=113,MINUTE=2442,SECOND=0,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, int0);
      
      int int1 = mockGregorianCalendar0.get(0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-81989849879680,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=630,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=12,DAY_OF_YEAR=316,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=0,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-81989849879680,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=630,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=12,DAY_OF_YEAR=316,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=0,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotNull(map0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("");
      assertNotNull(jSONPath_NotNullSegement0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      JSONPath jSONPath0 = new JSONPath("!z<;vsu:B(f3)gdVDGq");
      assertEquals("!z<;vsu:B(f3)gdVDGq", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Short short0 = new Short((short)48);
      assertEquals((short)48, (short)short0);
      assertNotNull(short0);
      
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) "", "N3H)vr!V{", (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : N3H)vr!V{
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      JSONPath jSONPath0 = JSONPath.compile("");
      assertEquals("", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/0");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("eX0ln");
      assertNotNull(jSONPath_Segment0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("*ytjUCGqB;&", "[", false);
      assertNotNull(jSONPath_ValueSegment0);
      
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('s', char0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLTimeoutException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("eX0ln", sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("eX0ln", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: eX0ln", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      Set<?> set0 = jSONPath0.keySet((Object) sQLTimeoutException0);
      assertFalse(set0.contains("/stackTrace/0"));
      assertEquals("", jSONPath0.getPath());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      int int0 = 97;
      Integer integer0 = new Integer(97);
      assertEquals(97, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Long long0 = new Long(97);
      assertEquals(97L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = JSONPath.remove((Object) long0, "com.alibaba.fastjson.JSONPath$RangeSegment");
      assertFalse(boolean0);
      
      String string0 = "/stackTrace/6";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("NOT_BETWEEN");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        JSONPath.extract("/stackTrace/6", "(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Pattern pattern0 = Pattern.compile("b|eeP");
      assertEquals("b|eeP", pattern0.toString());
      assertEquals("b|eeP", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertNotNull(pattern0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("unzip bytes error.", pattern0, jSONPath_Operator0);
      assertEquals("b|eeP", pattern0.toString());
      assertEquals("b|eeP", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertNotNull(jSONPath_RegMatchSegement0);
      
      JSONPath jSONPath0 = new JSONPath("unzip bytes error.");
      assertEquals("unzip bytes error.", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      assertNotNull(jSONPath_KeySetSegment0);
      
      HashSet hashSet0 = (HashSet)jSONPath_KeySetSegment0.eval(jSONPath0, "unzip bytes error.", jSONPath_RegMatchSegement0);
      assertEquals("b|eeP", pattern0.toString());
      assertEquals("b|eeP", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("unzip bytes error.", jSONPath0.getPath());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Set<?> set0 = jSONPath0.evalKeySet(hashSet0);
      assertEquals("b|eeP", pattern0.toString());
      assertEquals("b|eeP", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("unzip bytes error.", jSONPath0.getPath());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNull(set0);
      
      SQLWarning sQLWarning0 = new SQLWarning("unzip bytes error.");
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("unzip bytes error.", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: unzip bytes error.", sQLWarning0.toString());
      assertNotNull(sQLWarning0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(33);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      String[] stringArray0 = new String[1];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = null;
      try {
        jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      String string0 = "ufZ.'hRy{A(.";
      JSONPath jSONPath0 = new JSONPath("ufZ.'hRy{A(.");
      assertEquals("ufZ.'hRy{A(.", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) jSONPath_WildCardSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ufZ.'hRy{A(.
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(")Z[39IHi%Yv");
      assertEquals(")Z[39IHi%Yv", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String string0 = jSONPath0.getPath();
      assertEquals(")Z[39IHi%Yv", jSONPath0.getPath());
      assertEquals(")Z[39IHi%Yv", string0);
      assertNotNull(string0);
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(41);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      boolean boolean0 = JSONPath.set((Object) jSONPath0, ")", (Object) ")");
      assertEquals(")Z[39IHi%Yv", jSONPath0.getPath());
      assertFalse(boolean0);
      
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement(")Z[39IHi%Yv", "-mVJgbeJMK~wc'ig]t", "U,iJhw&KU)mV6", (String[]) null, true);
      assertNotNull(jSONPath_MatchSegement0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement(", but '", jSONPath_ArrayAccessSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      boolean boolean1 = jSONPath_MatchSegement0.apply(jSONPath0, jSONPath_Operator0, "U,iJhw&KU)mV6", jSONPath_FilterSegment0);
      assertEquals(")Z[39IHi%Yv", jSONPath0.getPath());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_ArrayAccessSegment0);
      assertFalse(set0.contains("U,iJhw&KU)mV6"));
      assertEquals(")Z[39IHi%Yv", jSONPath0.getPath());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(")Z[39IHi%Yv");
      assertEquals(")Z[39IHi%Yv", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String string0 = jSONPath0.getPath();
      assertEquals(")Z[39IHi%Yv", jSONPath0.getPath());
      assertEquals(")Z[39IHi%Yv", string0);
      assertNotNull(string0);
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(41);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      boolean boolean0 = JSONPath.set((Object) jSONPath0, ")", (Object) ")");
      assertEquals(")Z[39IHi%Yv", jSONPath0.getPath());
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/6");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("/stackTrace/6", jSONPath_JSONPathParser0, false);
      assertNotNull(jSONPath_ValueSegment0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("n`f");
      assertNotNull(jSONPath_NotNullSegement0);
      
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('s', char0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(977, false);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath jSONPath0 = new JSONPath(".", serializeConfig0, parserConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(".", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("745[RC|).'", "fastjson.parser.autoTypeAccept", 3973);
      assertEquals("fastjson.parser.autoTypeAccept", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: 745[RC|).'", sQLSyntaxErrorException0.toString());
      assertEquals("745[RC|).'", sQLSyntaxErrorException0.getMessage());
      assertEquals(3973, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      ObjectSerializer objectSerializer0 = serializeConfig0.getObjectWriter(class0, false);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(objectSerializer0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains(false));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      jSONPath0.deepScan(sQLSyntaxErrorException0, "e2(=t81V1+GC#bp", arrayList0);
      assertFalse(arrayList0.contains(false));
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(".", jSONPath0.getPath());
      assertEquals("fastjson.parser.autoTypeAccept", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: 745[RC|).'", sQLSyntaxErrorException0.toString());
      assertEquals("745[RC|).'", sQLSyntaxErrorException0.getMessage());
      assertEquals(3973, sQLSyntaxErrorException0.getErrorCode());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "dKf}";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = false;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("dKf}", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("write");
      assertEquals("write", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("`", (String) null, (Throwable) null);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("`", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: `", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      sQLTimeoutException0.setNextException(sQLClientInfoException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("`", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: `", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("2M ZWlyd*Gm!@", sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("`", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: `", sQLTimeoutException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("2M ZWlyd*Gm!@", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: 2M ZWlyd*Gm!@", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      Spliterator<Throwable> spliterator0 = sQLRecoverableException0.spliterator();
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("`", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: `", sQLTimeoutException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("2M ZWlyd*Gm!@", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: 2M ZWlyd*Gm!@", sQLRecoverableException0.toString());
      assertNotNull(spliterator0);
      
      boolean boolean2 = jSONPath_PropertySegment0.remove(jSONPath0, sQLRecoverableException0);
      assertEquals("write", jSONPath0.getPath());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("`", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: `", sQLTimeoutException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("2M ZWlyd*Gm!@", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: 2M ZWlyd*Gm!@", sQLRecoverableException0.toString());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      JSONPath jSONPath1 = null;
      String string1 = null;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("E-GtZMd:b{DMbu", (String) null);
      assertEquals("E-GtZMd:b{DMbu", sQLTimeoutException1.getMessage());
      assertNull(sQLTimeoutException1.getSQLState());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: E-GtZMd:b{DMbu", sQLTimeoutException1.toString());
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertNotNull(sQLTimeoutException1);
      
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.remove((JSONPath) null, sQLTimeoutException1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$PropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("utf8 decode error, ", "Tw)-NoqAcp[D#pU5vd", jSONPath_Operator0);
      assertNotNull(jSONPath_StringOpSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("Tw)-NoqAcp[D#pU5vd");
      assertEquals("Tw)-NoqAcp[D#pU5vd", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, sQLTransactionRollbackException0, "Tw)-NoqAcp[D#pU5vd");
      assertEquals("Tw)-NoqAcp[D#pU5vd", jSONPath0.getPath());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("RLIKE");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("RLIKE", "RLIKE", true);
      assertNotNull(jSONPath_ValueSegment0);
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_ValueSegment0);
      assertNotNull(jSONPath_Filter0);
      assertSame(jSONPath_ValueSegment0, jSONPath_Filter0);
      assertSame(jSONPath_Filter0, jSONPath_ValueSegment0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_Filter0);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("rlike");
      assertEquals("rlike", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "rlike", "rlike");
      assertEquals("rlike", jSONPath0.getPath());
      assertNull(object0);
      assertSame(jSONPath_ValueSegment0, jSONPath_Filter0);
      assertSame(jSONPath_Filter0, jSONPath_ValueSegment0);
      
      Set<?> set0 = JSONPath.keySet((Object) jSONPath_Filter0, "BrowserCompatible");
      assertNull(set0);
      assertSame(jSONPath_ValueSegment0, jSONPath_Filter0);
      assertSame(jSONPath_Filter0, jSONPath_ValueSegment0);
      
      Object object1 = JSONPath.read("", "");
      assertNull(object1);
      
      char[] charArray0 = new char[6];
      char char0 = 'k';
      charArray0[0] = char0;
      char char1 = '3';
      charArray0[1] = char1;
      char char2 = 'B';
      charArray0[2] = char2;
      char char3 = 'h';
      charArray0[3] = char3;
      char char4 = '$';
      charArray0[4] = char4;
      char char5 = 'T';
      charArray0[5] = char5;
      int int0 = 72;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      
      int int1 = 176;
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(charArray0, int0, parserConfig0, int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      Class<JSONPath.SizeSegment> class0 = JSONPath.SizeSegment.class;
      ObjectSerializer objectSerializer0 = serializeConfig0.getObjectWriter(class0, true);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(objectSerializer0);
      
      Map<String, Object> map0 = JSONPath.paths(objectArray0[0], serializeConfig0);
      assertEquals(2, objectArray0.length);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(1193);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("n");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      Integer integer0 = new Integer(7);
      assertEquals(7, (int)integer0);
      assertNotNull(integer0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(7, (-60), 1004);
      assertNotNull(mockGregorianCalendar0);
      
      boolean boolean0 = JSONPath.remove((Object) null, "eX0ln");
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = JSONPath.compile(".");
      assertEquals(".", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Object object0 = jSONPath0.eval((Object) "eX0ln");
      assertEquals(".", jSONPath0.getPath());
      assertEquals("eX0ln", object0);
      assertNotNull(object0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("invalid comment", "size", false);
      assertNotNull(jSONPath_ValueSegment0);
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_ValueSegment0);
      assertNotNull(jSONPath_Filter0);
      assertSame(jSONPath_ValueSegment0, jSONPath_Filter0);
      assertSame(jSONPath_Filter0, jSONPath_ValueSegment0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_Filter0);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("invalid comment", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "size";
      stringArray0[1] = "&/z/!e5xic%?1dkSU|";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONPath_MultiPropertySegment0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("&/z/!e5xic%?1dkSU|", "eX0ln");
      assertEquals("java.sql.SQLFeatureNotSupportedException: &/z/!e5xic%?1dkSU|", sQLFeatureNotSupportedException0.toString());
      assertEquals("eX0ln", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("&/z/!e5xic%?1dkSU|", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, sQLInvalidAuthorizationSpecException0, jSONPath_ValueSegment0);
      assertEquals(2, stringArray0.length);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(".", jSONPath0.getPath());
      assertNotNull(arrayList0);
      assertSame(jSONPath_ValueSegment0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Float float0 = new Float(1000.0);
      assertEquals(1000.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      String string0 = "JSONPath$JSONPathParser";
      int int0 = JSONPath.size((Object) float0, "JSONPath$JSONPathParser");
      assertEquals((-1), int0);
      
      boolean boolean0 = JSONPath.contains((Object) "JSONPath$JSONPathParser", "fastjson.parser.autoTypeSupport");
      assertFalse(boolean0);
      
      int int1 = 163;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 163, 163);
      assertNotNull(mockGregorianCalendar0);
      
      String string1 = "*";
      BigDecimal bigDecimal0 = new BigDecimal(101);
      assertEquals((short)101, bigDecimal0.shortValue());
      assertEquals((byte)101, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      String string2 = "\\\\\\.";
      // Undeclared exception!
      JSONPath.remove((Object) bigDecimal0, "\\.");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("/stackprce/10", "/stackprce/10", true);
      assertNotNull(jSONPath_ValueSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("/stackprce/10");
      assertEquals("/stackprce/10", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      assertNotNull(javaBeanDeserializer0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      Double double0 = new Double(3629.1349);
      assertEquals(3629.1349, (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = jSONPath0.size((Object) parserConfig0);
      assertEquals("/stackprce/10", jSONPath0.getPath());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals((-1), int0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(290);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("NE", jSONPath_ArrayAccessSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("fastjson.parser.deny.internal", 290, jSONPath_Operator1);
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotNull(jSONPath_IntOpSegement0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment1 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
      assertFalse(jSONPath_FilterSegment1.equals((Object)jSONPath_FilterSegment0));
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotNull(jSONPath_FilterSegment1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(38, mockRandom0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      boolean boolean1 = jSONPath_IntOpSegement0.apply(jSONPath0, classLoader0, jSONPath_FilterSegment1, bigInteger0);
      assertEquals("/stackprce/10", jSONPath0.getPath());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertFalse(boolean1);
      assertFalse(jSONPath_FilterSegment1.equals((Object)jSONPath_FilterSegment0));
      assertFalse(boolean1 == boolean0);
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotSame(jSONPath_FilterSegment1, jSONPath_FilterSegment0);
      assertNotSame(jSONPath_Operator1, jSONPath_Operator0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.safeMode", "fastjson.parser.deny.internal");
      assertEquals("fastjson.parser.safeMode", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson.parser.safeMode", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("fastjson.parser.deny.internal", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("NE");
      assertEquals("NE", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: NE", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(290, 38, (-1982292595));
      assertNotNull(jSONPath_RangeSegment0);
      
      // Undeclared exception!
      JSONPath.set((Object) jSONPath0, "/stackprce/10", (Object) jSONPath_RangeSegment0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(90);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(90, true);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.BETWEEN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("fastjson.parser.deny", 58, jSONPath_Operator1);
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotNull(jSONPath_IntOpSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntOpSegement0, jSONPath_IntOpSegement0, true);
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotNull(jSONPath_FilterGroup0);
      
      SerializeConfig serializeConfig1 = SerializeConfig.globalInstance;
      assertTrue(serializeConfig1.isAsmEnable());
      assertEquals("@type", serializeConfig1.getTypeKey());
      assertFalse(serializeConfig1.equals((Object)serializeConfig0));
      assertNotNull(serializeConfig1);
      assertNotSame(serializeConfig1, serializeConfig0);
      
      ParserConfig parserConfig1 = new ParserConfig((ASMDeserializerFactory) null);
      assertFalse(parserConfig1.isSafeMode());
      assertFalse(parserConfig1.isJacksonCompatible());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      SerializeConfig serializeConfig2 = new SerializeConfig(2724, true);
      assertEquals("@type", serializeConfig2.getTypeKey());
      assertTrue(serializeConfig2.isAsmEnable());
      assertFalse(serializeConfig2.equals((Object)serializeConfig1));
      assertFalse(serializeConfig2.equals((Object)serializeConfig0));
      assertNotNull(serializeConfig2);
      
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.deny.internal", serializeConfig2, parserConfig1);
      assertFalse(parserConfig1.isSafeMode());
      assertFalse(parserConfig1.isJacksonCompatible());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertEquals("@type", serializeConfig2.getTypeKey());
      assertTrue(serializeConfig2.isAsmEnable());
      assertEquals("fastjson.parser.deny.internal", jSONPath1.getPath());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(serializeConfig2.equals((Object)serializeConfig1));
      assertFalse(serializeConfig2.equals((Object)serializeConfig0));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath2 = JSONPath.compile("s(7Pk4a7C\"2s");
      assertEquals("s(7Pk4a7C\"2s", jSONPath2.getPath());
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertNotNull(jSONPath2);
      assertNotSame(jSONPath2, jSONPath0);
      assertNotSame(jSONPath2, jSONPath1);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fastjson.parser.safeMode", "-^AQl4hV");
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: fastjson.parser.safeMode", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("fastjson.parser.safeMode", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("-^AQl4hV", sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      DataTruncation dataTruncation0 = new DataTruncation((-1896), true, true, 90, 2724);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertNotNull(dataTruncation0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jSONPath1.arrayAdd((Object) jSONPath_Operator0, (Object[]) null);
      assertFalse(parserConfig1.isSafeMode());
      assertFalse(parserConfig1.isJacksonCompatible());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertEquals("@type", serializeConfig2.getTypeKey());
      assertTrue(serializeConfig2.isAsmEnable());
      assertEquals("fastjson.parser.deny.internal", jSONPath1.getPath());
      assertFalse(jSONPath_Operator0.equals((Object)jSONPath_Operator1));
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(serializeConfig2.equals((Object)serializeConfig1));
      assertFalse(serializeConfig2.equals((Object)serializeConfig0));
      assertFalse(jSONPath1.equals((Object)jSONPath2));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotSame(jSONPath_Operator0, jSONPath_Operator1);
      assertNotSame(parserConfig1, parserConfig0);
      assertNotSame(serializeConfig2, serializeConfig1);
      assertNotSame(serializeConfig2, serializeConfig0);
      assertNotSame(jSONPath1, jSONPath2);
      assertNotSame(jSONPath1, jSONPath0);
      
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      boolean boolean1 = JSONPath.isDouble(class0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = JSONPath.compile("[");
      assertEquals("[", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Byte byte0 = new Byte((byte)102);
      assertEquals((byte)102, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = jSONPath0.eval((Object) byte0);
      assertEquals("[", jSONPath0.getPath());
      assertEquals((byte)102, object0);
      assertNotNull(object0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("rlike");
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("rlike", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: rlike", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      Class<JSONPath.FilterSegment> class0 = JSONPath.FilterSegment.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Field field0 = ParserConfig.getFieldFromCache(",ve&!{", hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(field0);
      
      FieldInfo fieldInfo0 = new FieldInfo("fAe[OH", class0, class0, class0, (Field) null, 5, (-1842956027), 5);
      assertEquals("fAe[OH", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertNotNull(fieldInfo0);
      assertEquals((-1842956027), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertEquals(5, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.isEnum);
      
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      assertEquals("fAe[OH", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("fAe[OH", beanContext0.getName());
      assertNull(beanContext0.getFormat());
      assertEquals("", beanContext0.getLabel());
      assertEquals((-1842956027), beanContext0.getFeatures());
      assertNotNull(beanContext0);
      assertEquals((-1842956027), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertEquals(5, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.isEnum);
      
      Method method0 = beanContext0.getMethod();
      assertEquals("fAe[OH", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("fAe[OH", beanContext0.getName());
      assertNull(beanContext0.getFormat());
      assertEquals("", beanContext0.getLabel());
      assertEquals((-1842956027), beanContext0.getFeatures());
      assertNull(method0);
      assertEquals((-1842956027), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertEquals(5, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.isEnum);
      
      jSONPath0.arrayAdd((Object) null, (Object[]) longArray0);
      assertEquals(9, longArray0.length);
      assertEquals("[", jSONPath0.getPath());
      
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('o', char0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1039);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      JSONPath jSONPath0 = new JSONPath("}*m)B5BhF", serializeConfig0, parserConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("}*m)B5BhF", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      jSONPath0.arrayAdd((Object) serializeConfig0, (Object[]) null);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("}*m)B5BhF", jSONPath0.getPath());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-3025));
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      jSONPath0.arrayAdd((Object) jSONPath_ArrayAccessSegment0, (Object[]) null);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("}*m)B5BhF", jSONPath0.getPath());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      String string0 = jSONPath0.getPath();
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("}*m)B5BhF", jSONPath0.getPath());
      assertEquals("}*m)B5BhF", string0);
      assertNotNull(string0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) serializeConfig0, "hB^vQWmE$-c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : hB^vQWmE$-c
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-1511L));
      assertEquals((-1511L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((long) longArray0[0]);
      assertEquals(9, longArray0.length);
      assertEquals((-3851359326990528739L), (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((-3412L));
      assertEquals((-3412L), (long)long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      
      longArray0[3] = long3;
      int int0 = 81;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-595), 81, (-1997));
      assertNotNull(mockGregorianCalendar0);
      
      String string0 = "end must greater than or equals start. start ";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "end must greater than or equals start. start ");
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("end must greater than or equals start. start ", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      String string1 = "/stackTrace";
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) sQLNonTransientConnectionException0, "/stackTrace");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // set property error, java.sql.SQLNonTransientConnectionException#stackTrace
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.FieldDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Long[] longArray0 = new Long[5];
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      longArray0[1] = longArray0[0];
      Long long1 = new Long((long) longArray0[0]);
      assertEquals(5, longArray0.length);
      assertEquals((-3851359326990528739L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long long2 = new Long((-3412L));
      assertEquals((-3412L), (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray0[3] = long2;
      String string0 = "end must greater than or equals start. start ";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("nin", "end must greater than or equals start. start ");
      assertEquals("java.sql.SQLNonTransientConnectionException: nin", sQLNonTransientConnectionException0.toString());
      assertEquals("end must greater than or equals start. start ", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("nin", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) sQLNonTransientConnectionException0, "/stackTrace");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // set property error, java.sql.SQLNonTransientConnectionException#stackTrace
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.FieldDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(90);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      String string0 = "=k|g\":UIB,p^";
      JSONPath jSONPath0 = new JSONPath("{\"b\":null,\"z\":true,\"NOT_BETWEEN\":\"hello\",\"a\":false,\"toCharArray\":7,\"xx\":null}");
      assertEquals("{\"b\":null,\"z\":true,\"NOT_BETWEEN\":\"hello\",\"a\":false,\"toCharArray\":7,\"xx\":null}", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String string1 = "writeBefore";
      JSONPath jSONPath1 = JSONPath.compile("writeBefore");
      assertEquals("writeBefore", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("=k|g\":UIB,p^");
      assertEquals("java.sql.SQLNonTransientException: =k|g\":UIB,p^", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("=k|g\":UIB,p^", sQLNonTransientException0.getMessage());
      assertNotNull(sQLNonTransientException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("=k|g\":UIB,p^", "{\"b\":null,\"z\":true,\"NOT_BETWEEN\":\"hello\",\"a\":false,\"toCharArray\":7,\"xx\":null}", sQLNonTransientException0);
      assertEquals("java.sql.SQLNonTransientException: =k|g\":UIB,p^", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("=k|g\":UIB,p^", sQLNonTransientException0.getMessage());
      assertEquals("{\"b\":null,\"z\":true,\"NOT_BETWEEN\":\"hello\",\"a\":false,\"toCharArray\":7,\"xx\":null}", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: =k|g\":UIB,p^", sQLNonTransientConnectionException0.toString());
      assertEquals("=k|g\":UIB,p^", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("=k|g\":UIB,p^", sQLNonTransientException0);
      assertEquals("java.sql.SQLNonTransientException: =k|g\":UIB,p^", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("=k|g\":UIB,p^", sQLNonTransientException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: =k|g\":UIB,p^", sQLRecoverableException0.toString());
      assertEquals("=k|g\":UIB,p^", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string2 = "serializer";
      JSONPath jSONPath2 = JSONPath.compile("{\"b\":null,\"z\":true,\"NOT_BETWEEN\":\"hello\",\"a\":false,\"toCharArray\":7,\"xx\":null}");
      assertEquals("{\"b\":null,\"z\":true,\"NOT_BETWEEN\":\"hello\",\"a\":false,\"toCharArray\":7,\"xx\":null}", jSONPath2.getPath());
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertNotNull(jSONPath2);
      assertNotSame(jSONPath2, jSONPath0);
      assertNotSame(jSONPath2, jSONPath1);
      
      Long long0 = new Long(135L);
      assertEquals(135L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1534L);
      assertEquals(1534L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long long2 = Long.getLong("S", long1);
      assertEquals(1534L, (long)long2);
      assertFalse(long1.equals((Object)long0));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "writeBefore", (Object) "S", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"b\":null,\"z\":true,\"NOT_BETWEEN\":\"hello\",\"a\":false,\"toCharArray\":7,\"xx\":null}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = "write";
      SerializeConfig serializeConfig0 = null;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath0 = new JSONPath("write", (SerializeConfig) null, parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("write", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      String string1 = "T*YP(zkK";
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) aSMDeserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "com.alibaba.fastjson.serializer.SimplePropertyPreFilter";
      stringArray0[1] = "$*'5P:/-ijT,Vl";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONPath_MultiPropertySegment0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("':");
      assertNotNull(jSONPath_JSONPathParser0);
      
      Long[] longArray0 = new Long[6];
      Long long0 = new Long((-2147483648L));
      assertEquals((-2147483648L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(5614464919154503228L);
      assertEquals(5614464919154503228L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(5614464919154503228L);
      assertEquals(5614464919154503228L, (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long(1638L);
      assertEquals(1638L, (long)long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      
      JSONPath jSONPath0 = JSONPath.compile("$*'5P:/-ijT,Vl");
      assertEquals("$*'5P:/-ijT,Vl", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (Throwable) null);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      Object object0 = jSONPath0.eval((Object) null);
      assertEquals("$*'5P:/-ijT,Vl", jSONPath0.getPath());
      assertNull(object0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(5276, 17, (-1241));
      assertNotNull(jSONPath_RangeSegment0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("<uNiM-L", (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" I");
      assertEquals(" I", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(13, 13, 13);
      assertNotNull(jSONPath_RangeSegment0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "oP4efKbTeS5";
      stringArray0[1] = "1;~v;H=Gl[i6";
      stringArray0[2] = "/stackTrace/3";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("1;~v;H=Gl[i6", stringArray0, true);
      assertEquals(3, stringArray0.length);
      assertNotNull(jSONPath_StringInSegement0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("fastjson.parser.safeMode", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      SQLWarning sQLWarning0 = new SQLWarning("trim", "fastjson.parser.autoTypeAccept", sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLWarning: trim", sQLWarning0.toString());
      assertEquals("fastjson.parser.autoTypeAccept", sQLWarning0.getSQLState());
      assertEquals("trim", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      // Undeclared exception!
      try { 
        jSONPath1.set((Object) jSONPath1, (Object) sQLInvalidAuthorizationSpecException0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("/stackTrace/10", "/stackTrace/10", true);
      assertNotNull(jSONPath_ValueSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/10");
      assertEquals("/stackTrace/10", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, sQLClientInfoException0, sQLClientInfoException0, "/stackTrace/10");
      assertEquals("/stackTrace/10", jSONPath0.getPath());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      assertNotNull(javaBeanDeserializer0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      Double double0 = new Double(3629.1349);
      assertEquals(3629.1349, (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = jSONPath0.size((Object) parserConfig0);
      assertEquals("/stackTrace/10", jSONPath0.getPath());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals((-1), int0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(290);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("NE", jSONPath_ArrayAccessSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("fastjson.parser.deny.internal", 290, jSONPath_Operator1);
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotNull(jSONPath_IntOpSegement0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment1 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
      assertFalse(jSONPath_FilterSegment1.equals((Object)jSONPath_FilterSegment0));
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotNull(jSONPath_FilterSegment1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("NE");
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: NE", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("NE", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(290, 38, (-1982292595));
      assertNotNull(jSONPath_RangeSegment0);
      
      // Undeclared exception!
      JSONPath.set((Object) jSONPath0, "/stackTrace/10", (Object) jSONPath_RangeSegment0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-1511L));
      assertEquals((-1511L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((long) longArray0[0]);
      assertEquals(9, longArray0.length);
      assertEquals((-3851359326990528739L), (long)long2);
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((-3412L));
      assertEquals((-3412L), (long)long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      
      longArray0[3] = long3;
      Long long4 = new Long(204L);
      assertEquals(204L, (long)long4);
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertNotNull(long4);
      
      longArray0[4] = long4;
      SerializeConfig serializeConfig0 = new SerializeConfig(183, true);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      SerializeConfig serializeConfig1 = new SerializeConfig();
      assertTrue(serializeConfig1.isAsmEnable());
      assertEquals("@type", serializeConfig1.getTypeKey());
      assertFalse(serializeConfig1.equals((Object)serializeConfig0));
      assertNotNull(serializeConfig1);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig1, parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(serializeConfig1.isAsmEnable());
      assertEquals("@type", serializeConfig1.getTypeKey());
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      assertFalse(serializeConfig1.equals((Object)serializeConfig0));
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.safeMode", "fastjson.parser.deny", "As#)85", (String[]) null, true);
      assertNotNull(jSONPath_MatchSegement0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("feX=Q", (-3412L), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_DoubleOpSegement0, jSONPath_DoubleOpSegement0, true);
      assertNotNull(jSONPath_FilterGroup0);
      
      Object object0 = JSONPath.reserveToObject((Object) null, (String[]) null);
      assertNull(object0);
      
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Wxvk");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONPath jSONPath0 = new JSONPath("l]c|U0]gX2Jo8*_g");
      assertEquals("l]c|U0]gX2Jo8*_g", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      boolean boolean2 = JSONPath.set((Object) null, "eX0", (Object) sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "l]c|U0]gX2Jo8*_g";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("autoTypeSupport", stringArray0, false);
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONPath_StringInSegement0);
      
      JSONPath jSONPath1 = JSONPath.compile(".null");
      assertEquals(".null", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      Byte byte0 = new Byte((byte) (-105));
      assertEquals((byte) (-105), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains("l]c|U0]gX2Jo8*_g"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      jSONPath1.deepGetPropertyValues(arrayList0, arrayList0);
      assertFalse(arrayList0.contains("l]c|U0]gX2Jo8*_g"));
      assertEquals(".null", jSONPath1.getPath());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      boolean boolean3 = JSONPath.set((Object) arrayList0, "l]c|U0]gX2Jo8*_g", (Object) "eX0");
      assertFalse(arrayList0.contains("l]c|U0]gX2Jo8*_g"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      String string0 = "\\8G";
      JSONPath jSONPath0 = new JSONPath("8G");
      assertEquals("8G", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertEquals("8G", jSONPath0.getPath());
      assertFalse(boolean0);
      
      long long0 = (-3283115145468250678L);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("OA-%xoZU>R! aw3", "8G", (-294), hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: OA-%xoZU>R! aw3", sQLClientInfoException0.toString());
      assertEquals("OA-%xoZU>R! aw3", sQLClientInfoException0.getMessage());
      assertEquals("8G", sQLClientInfoException0.getSQLState());
      assertEquals((-294), sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("OA-%xoZU>R! aw3", sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: OA-%xoZU>R! aw3", sQLClientInfoException0.toString());
      assertEquals("OA-%xoZU>R! aw3", sQLClientInfoException0.getMessage());
      assertEquals("8G", sQLClientInfoException0.getSQLState());
      assertEquals((-294), sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: OA-%xoZU>R! aw3", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("OA-%xoZU>R! aw3", sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      Collection<Object> collection0 = jSONPath0.getPropertyValues(sQLIntegrityConstraintViolationException0);
      assertFalse(collection0.contains("8G"));
      assertTrue(collection0.contains("OA-%xoZU>R! aw3"));
      assertEquals("8G", jSONPath0.getPath());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: OA-%xoZU>R! aw3", sQLClientInfoException0.toString());
      assertEquals("OA-%xoZU>R! aw3", sQLClientInfoException0.getMessage());
      assertEquals("8G", sQLClientInfoException0.getSQLState());
      assertEquals((-294), sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: OA-%xoZU>R! aw3", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("OA-%xoZU>R! aw3", sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(collection0);
      
      DataTruncation dataTruncation0 = new DataTruncation((-4036), false, false, (-4036), 9, sQLIntegrityConstraintViolationException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: OA-%xoZU>R! aw3", sQLClientInfoException0.toString());
      assertEquals("OA-%xoZU>R! aw3", sQLClientInfoException0.getMessage());
      assertEquals("8G", sQLClientInfoException0.getSQLState());
      assertEquals((-294), sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: OA-%xoZU>R! aw3", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("OA-%xoZU>R! aw3", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertNotNull(dataTruncation0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains("8G"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(dataTruncation0, arrayList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(90);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath jSONPath0 = new JSONPath("{\"b\":null,\"z\":true,\"NOT_BETWEEN\":\"hello\",\"a\":false,\"toCharArray\":7,\"xx\":null}");
      assertEquals("{\"b\":null,\"z\":true,\"NOT_BETWEEN\":\"hello\",\"a\":false,\"toCharArray\":7,\"xx\":null}", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String string0 = "writeBefore";
      JSONPath jSONPath1 = JSONPath.compile("writeBefore");
      assertEquals("writeBefore", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("=k|g\":UIB,p^");
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: =k|g\":UIB,p^", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("=k|g\":UIB,p^", sQLNonTransientException0.getMessage());
      assertNotNull(sQLNonTransientException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("=k|g\":UIB,p^", "{\"b\":null,\"z\":true,\"NOT_BETWEEN\":\"hello\",\"a\":false,\"toCharArray\":7,\"xx\":null}", sQLNonTransientException0);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: =k|g\":UIB,p^", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("=k|g\":UIB,p^", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: =k|g\":UIB,p^", sQLNonTransientConnectionException0.toString());
      assertEquals("{\"b\":null,\"z\":true,\"NOT_BETWEEN\":\"hello\",\"a\":false,\"toCharArray\":7,\"xx\":null}", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("=k|g\":UIB,p^", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("=k|g\":UIB,p^", sQLNonTransientException0);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: =k|g\":UIB,p^", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("=k|g\":UIB,p^", sQLNonTransientException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("=k|g\":UIB,p^", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: =k|g\":UIB,p^", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertFalse(stack0.contains("=k|g\":UIB,p^"));
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        jSONPath1.deepGetPropertyValues(sQLNonTransientConnectionException0, stack0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      JSONPath jSONPath0 = new JSONPath("|0BJ(", serializeConfig0, parserConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("|0BJ(", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertFalse(stack0.contains("|0BJ("));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      jSONPath0.deepGetPropertyValues(parserConfig0, stack0);
      assertTrue(stack0.contains(true));
      assertFalse(stack0.contains("|0BJ("));
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("|0BJ(", jSONPath0.getPath());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(7, stack0.size());
      assertEquals("[true, false, false, true, false, null, false]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      int int0 = jSONPath0.evalSize(parserConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("|0BJ(", jSONPath0.getPath());
      assertEquals(9, int0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Integer integer0 = new Integer(7);
      assertEquals(7, (int)integer0);
      assertNotNull(integer0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2379, 7, 7);
      assertNotNull(mockGregorianCalendar0);
      
      boolean boolean0 = JSONPath.remove((Object) mockGregorianCalendar0, "eX0ln");
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2379,MONTH=7,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=7,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("eX0ln");
      assertNotNull(jSONPath_JSONPathParser0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("[");
      assertEquals("[", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Object object0 = jSONPath0.eval((Object) long0);
      assertEquals("[", jSONPath0.getPath());
      assertEquals((-3851359326990528739L), object0);
      assertNotNull(object0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("[", longArray0[0], false);
      assertEquals(9, longArray0.length);
      assertNotNull(jSONPath_ValueSegment0);
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_ValueSegment0);
      assertEquals(9, longArray0.length);
      assertNotNull(jSONPath_Filter0);
      assertSame(jSONPath_ValueSegment0, jSONPath_Filter0);
      assertSame(jSONPath_Filter0, jSONPath_ValueSegment0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      assertEquals(9, longArray0.length);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("[", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "[";
      stringArray0[1] = "eX0ln";
      stringArray0[2] = "eX0ln";
      stringArray0[3] = "[";
      stringArray0[4] = "L";
      stringArray0[5] = "[";
      stringArray0[6] = "[";
      stringArray0[7] = "eX0ln";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertEquals(8, stringArray0.length);
      assertNotNull(jSONPath_MultiPropertySegment0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[", "O?KKC3IfOhz;E");
      assertEquals("java.sql.SQLFeatureNotSupportedException: [", sQLFeatureNotSupportedException0.toString());
      assertEquals("[", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("O?KKC3IfOhz;E", sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, jSONPath_PropertySegment0, sQLFeatureNotSupportedException0);
      assertEquals(8, stringArray0.length);
      assertEquals("java.sql.SQLFeatureNotSupportedException: [", sQLFeatureNotSupportedException0.toString());
      assertEquals("[", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("O?KKC3IfOhz;E", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("[", jSONPath0.getPath());
      assertEquals(8, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(javaBeanSerializer0);
      
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      assertFalse(arrayList1.contains("["));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(javaBeanSerializer0, arrayList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      assertEquals(PropertyNamingStrategy.NoChange, propertyNamingStrategy0);
      
      String[] stringArray0 = new String[0];
      JSONPath jSONPath0 = new JSONPath(" I");
      assertEquals(" I", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(" I");
      assertEquals(" I", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException:  I", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(" I", (String) null, sQLTransientConnectionException0);
      assertEquals(" I", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException:  I", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLTimeoutException:  I", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(" I", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      boolean boolean0 = jSONPath0.containsValue((Object) " I", (Object) sQLTimeoutException0);
      assertEquals(" I", jSONPath0.getPath());
      assertEquals(" I", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException:  I", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLTimeoutException:  I", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(" I", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertFalse(boolean0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(122, 1516, (-816), 26, 3392903, 1527);
      assertNotNull(mockGregorianCalendar0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      Byte byte0 = new Byte((byte) (-128));
      assertEquals((byte) (-128), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = JSONPath.reserveToObject("com", stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("com", object0);
      assertNotNull(object0);
      
      String string0 = jSONPath0.getPath();
      assertEquals(" I", jSONPath0.getPath());
      assertEquals(" I", string0);
      assertFalse(string0.equals((Object)object0));
      assertNotNull(string0);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      assertNotNull(jSONPath_MultiIndexSegment0);
      
      UUID uUID0 = MockUUID.randomUUID();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertNotNull(uUID0);
      
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.PascalCase;
      assertEquals(PropertyNamingStrategy.PascalCase, propertyNamingStrategy1);
      assertFalse(propertyNamingStrategy1.equals((Object)propertyNamingStrategy0));
      assertNotSame(propertyNamingStrategy1, propertyNamingStrategy0);
      
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(propertyNamingStrategy1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertFalse(propertyNamingStrategy1.equals((Object)propertyNamingStrategy0));
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNotSame(propertyNamingStrategy1, propertyNamingStrategy0);
      
      Short short0 = new Short((short)4483);
      assertEquals((short)4483, (short)short0);
      assertNotNull(short0);
      
      JSONPath.arrayAdd((Object) short0, "com", (Object[]) stringArray0);
      assertEquals(0, stringArray0.length);
      
      PropertyNamingStrategy propertyNamingStrategy2 = PropertyNamingStrategy.SnakeCase;
      assertEquals(PropertyNamingStrategy.SnakeCase, propertyNamingStrategy2);
      assertFalse(propertyNamingStrategy2.equals((Object)propertyNamingStrategy1));
      assertFalse(propertyNamingStrategy2.equals((Object)propertyNamingStrategy0));
      assertNotSame(propertyNamingStrategy2, propertyNamingStrategy1);
      assertNotSame(propertyNamingStrategy2, propertyNamingStrategy0);
      
      boolean boolean1 = jSONPath0.set((Object) uUID0, (Object) propertyNamingStrategy2, true);
      assertEquals(" I", jSONPath0.getPath());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertTrue(boolean1);
      assertFalse(propertyNamingStrategy2.equals((Object)propertyNamingStrategy1));
      assertFalse(propertyNamingStrategy2.equals((Object)propertyNamingStrategy0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(propertyNamingStrategy2, propertyNamingStrategy1);
      assertNotSame(propertyNamingStrategy2, propertyNamingStrategy0);
      
      Short short1 = new Short((short)4483);
      assertEquals((short)4483, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      jSONPath0.deepSet((Object) null, "-=&'+*b3Wf4", 580772045163143161L, short1);
      assertEquals(" I", jSONPath0.getPath());
      assertTrue(short1.equals((Object)short0));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Integer integer0 = new Integer(7);
      assertEquals(7, (int)integer0);
      assertNotNull(integer0);
      
      Long long0 = new Long((-1034L));
      assertEquals((-1034L), (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = JSONPath.remove((Object) long0, "like");
      assertFalse(boolean0);
      
      String string0 = "/stackTrace/6";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("like");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        JSONPath.extract("illegal json : ", "/stackTrace/8");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/6");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.next();
      // Undeclared exception!
      try { 
        JSONPath.extract("R]h/LY2~{'RKQNp*", "/stackTrace/6");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      Long long0 = new Long(108L);
      assertEquals(108L, (long)long0);
      assertNotNull(long0);
      
      int int0 = 7;
      Integer integer0 = new Integer(7);
      assertEquals(7, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      int int1 = 2379;
      int int2 = 163;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2379, 163, 2379);
      assertNotNull(mockGregorianCalendar0);
      
      String string0 = "*";
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) mockGregorianCalendar0, "*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      Long long0 = new Long(108L);
      assertEquals(108L, (long)long0);
      assertNotNull(long0);
      
      int int0 = 5;
      Integer integer0 = new Integer(5);
      assertEquals(5, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 5);
      assertNotNull(mockGregorianCalendar0);
      
      String string0 = "*";
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) mockGregorianCalendar0, "*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-16));
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(58, false);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath jSONPath0 = new JSONPath("\\-", serializeConfig0, parserConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("\\-", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      ParserConfig parserConfig1 = ParserConfig.global;
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isSafeMode());
      assertFalse(parserConfig1.isJacksonCompatible());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertSame(parserConfig1, parserConfig0);
      
      ParserConfig.global = parserConfig1;
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isSafeMode());
      assertFalse(parserConfig1.isJacksonCompatible());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(ParserConfig.global.isAutoTypeSupport());
      assertFalse(ParserConfig.global.isSafeMode());
      assertFalse(ParserConfig.global.isJacksonCompatible());
      assertTrue(ParserConfig.global.isAsmEnable());
      
      Class<DataTruncation> class0 = DataTruncation.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      assertNotNull(javaBeanDeserializer0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      Double double0 = new Double(3629.1349);
      assertEquals(3629.1349, (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = jSONPath0.size((Object) double0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("\\-", jSONPath0.getPath());
      assertEquals((-1), int0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertSame(parserConfig0, parserConfig1);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("R4na", jSONPath_ArrayAccessSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.LT;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("fastjson.parser.autoTypeAccept", (-1), jSONPath_Operator1);
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotNull(jSONPath_IntOpSegement0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, sQLTransactionRollbackException0, sQLTransactionRollbackException0, parserConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("\\-", jSONPath0.getPath());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertFalse(boolean0);
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertSame(parserConfig0, parserConfig1);
      assertNotSame(jSONPath_Operator1, jSONPath_Operator0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      JSONPath.Operator jSONPath_Operator2 = JSONPath.Operator.NOT_BETWEEN;
      assertFalse(jSONPath_Operator2.equals((Object)jSONPath_Operator0));
      assertFalse(jSONPath_Operator2.equals((Object)jSONPath_Operator1));
      assertNotSame(jSONPath_Operator2, jSONPath_Operator0);
      assertNotSame(jSONPath_Operator2, jSONPath_Operator1);
      
      boolean boolean1 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_Operator2, sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("\\-", jSONPath0.getPath());
      assertTrue(boolean1);
      assertFalse(jSONPath_Operator2.equals((Object)jSONPath_Operator0));
      assertFalse(jSONPath_Operator2.equals((Object)jSONPath_Operator1));
      assertFalse(boolean1 == boolean0);
      assertFalse(jSONPath_Operator0.equals((Object)jSONPath_Operator2));
      assertFalse(jSONPath_Operator0.equals((Object)jSONPath_Operator1));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertSame(parserConfig0, parserConfig1);
      assertNotSame(jSONPath_Operator2, jSONPath_Operator0);
      assertNotSame(jSONPath_Operator2, jSONPath_Operator1);
      assertNotSame(jSONPath_Operator0, jSONPath_Operator2);
      assertNotSame(jSONPath_Operator0, jSONPath_Operator1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Integer integer0 = new Integer(7);
      assertEquals(7, (int)integer0);
      assertNotNull(integer0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2379, 7, 7);
      assertNotNull(mockGregorianCalendar0);
      
      boolean boolean0 = JSONPath.remove((Object) mockGregorianCalendar0, "eX0ln");
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2379,MONTH=7,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=7,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = JSONPath.compile("[");
      assertEquals("[", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("eX0ln");
      assertNotNull(jSONPath_NotNullSegement0);
      
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('o', char0);
      
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
      
      // Undeclared exception!
      try { 
        jSONPath_NotNullSegement0.apply(jSONPath0, integer0, "not", javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("-", "can not cast to byte, value : ", (-2725), (Throwable) null);
      assertEquals((-2725), sQLTransientConnectionException0.getErrorCode());
      assertEquals("can not cast to byte, value : ", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: -", sQLTransientConnectionException0.toString());
      assertEquals("-", sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[K>f?g;+H", "(>i7", 0, sQLTransientConnectionException0);
      assertEquals((-2725), sQLTransientConnectionException0.getErrorCode());
      assertEquals("can not cast to byte, value : ", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: -", sQLTransientConnectionException0.toString());
      assertEquals("-", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: [K>f?g;+H", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("(>i7", sQLTimeoutException0.getSQLState());
      assertEquals("[K>f?g;+H", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) "can not cast to byte, value : ");
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("WcZ");
      assertNotNull(jSONPath_NotNullSegement0);
      
      Float float0 = new Float((-2026.96F));
      assertEquals((-2026.96F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[K>f?g;+H");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/12");
      assertEquals("/stackTrace/12", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("com.alibaba.fastjson.JSONPath$DoubleOpSegement", "2%", sQLTimeoutException0);
      assertEquals((-2725), sQLTransientConnectionException0.getErrorCode());
      assertEquals("can not cast to byte, value : ", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: -", sQLTransientConnectionException0.toString());
      assertEquals("-", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: [K>f?g;+H", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("(>i7", sQLTimeoutException0.getSQLState());
      assertEquals("[K>f?g;+H", sQLTimeoutException0.getMessage());
      assertEquals("com.alibaba.fastjson.JSONPath$DoubleOpSegement", sQLTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: com.alibaba.fastjson.JSONPath$DoubleOpSegement", sQLTransientConnectionException1.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("2%", sQLTransientConnectionException1.getSQLState());
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertNotNull(sQLTransientConnectionException1);
      
      StackTraceElement stackTraceElement0 = (StackTraceElement)jSONPath0.eval((Object) sQLTransientConnectionException1);
      assertEquals((-2725), sQLTransientConnectionException0.getErrorCode());
      assertEquals("can not cast to byte, value : ", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: -", sQLTransientConnectionException0.toString());
      assertEquals("-", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: [K>f?g;+H", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("(>i7", sQLTimeoutException0.getSQLState());
      assertEquals("[K>f?g;+H", sQLTimeoutException0.getMessage());
      assertEquals("/stackTrace/12", jSONPath0.getPath());
      assertEquals("com.alibaba.fastjson.JSONPath$DoubleOpSegement", sQLTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: com.alibaba.fastjson.JSONPath$DoubleOpSegement", sQLTransientConnectionException1.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("2%", sQLTransientConnectionException1.getSQLState());
      assertEquals("java.lang.Thread", stackTraceElement0.getClassName());
      assertEquals(748, stackTraceElement0.getLineNumber());
      assertEquals("run", stackTraceElement0.getMethodName());
      assertEquals("Thread.java", stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("java.lang.Thread.run(Thread.java:748)", stackTraceElement0.toString());
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertNotNull(stackTraceElement0);
      assertNotSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertNotSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("~t7\"zX3ue", bigInteger0, false);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(jSONPath_ValueSegment0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement1 = new JSONPath.NotNullSegement("/cause/stackTrace/9");
      assertFalse(jSONPath_NotNullSegement1.equals((Object)jSONPath_NotNullSegement0));
      assertNotNull(jSONPath_NotNullSegement1);
      
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('K', char0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      assertFalse(jSONPath_NotNullSegement0.equals((Object)jSONPath_NotNullSegement1));
      assertNotNull(jSONPath_FilterSegment0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLTransientConnectionException: -", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: -", sQLSyntaxErrorException0.getMessage());
      assertEquals((-2725), sQLTransientConnectionException0.getErrorCode());
      assertEquals("can not cast to byte, value : ", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: -", sQLTransientConnectionException0.toString());
      assertEquals("-", sQLTransientConnectionException0.getMessage());
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException1));
      assertNotNull(sQLSyntaxErrorException0);
      
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, "WcZ", sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLTransientConnectionException: -", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: -", sQLSyntaxErrorException0.getMessage());
      assertEquals((-2725), sQLTransientConnectionException0.getErrorCode());
      assertEquals("can not cast to byte, value : ", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: -", sQLTransientConnectionException0.toString());
      assertEquals("-", sQLTransientConnectionException0.getMessage());
      assertEquals("/stackTrace/12", jSONPath0.getPath());
      assertTrue(boolean0);
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException1));
      assertFalse(jSONPath_NotNullSegement0.equals((Object)jSONPath_NotNullSegement1));
      assertNotSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertNotSame(jSONPath_NotNullSegement0, jSONPath_NotNullSegement1);
      
      System.setCurrentTimeMillis((-2725));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{Xb'qS`]iO'qC");
      assertEquals("{Xb'qS`]iO'qC", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Integer integer0 = new Integer((-2040109463));
      assertEquals((-2040109463), (int)integer0);
      assertNotNull(integer0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains("{Xb'qS`]iO'qC"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      jSONPath0.deepGetPropertyValues(integer0, arrayList0);
      assertFalse(arrayList0.contains("{Xb'qS`]iO'qC"));
      assertEquals("{Xb'qS`]iO'qC", jSONPath0.getPath());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Map<String, Object> map0 = JSONPath.paths((Object) integer0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotNull(map0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement(")V!r)Uc`", (-2040109463), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/cause/stackTrace/5", ")V!r)Uc`", 3881);
      assertEquals("java.sql.SQLTimeoutException: /cause/stackTrace/5", sQLTimeoutException0.toString());
      assertEquals(3881, sQLTimeoutException0.getErrorCode());
      assertEquals(")V!r)Uc`", sQLTimeoutException0.getSQLState());
      assertEquals("/cause/stackTrace/5", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: /cause/stackTrace/5", sQLTimeoutException0.toString());
      assertEquals(3881, sQLTimeoutException0.getErrorCode());
      assertEquals(")V!r)Uc`", sQLTimeoutException0.getSQLState());
      assertEquals("/cause/stackTrace/5", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLTimeoutException: /cause/stackTrace/5", sQLSyntaxErrorException0.toString());
      assertEquals("java.sql.SQLTimeoutException: /cause/stackTrace/5", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, sQLSyntaxErrorException0, arrayList0);
      assertFalse(arrayList0.contains("{Xb'qS`]iO'qC"));
      assertEquals("{Xb'qS`]iO'qC", jSONPath0.getPath());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("java.sql.SQLTimeoutException: /cause/stackTrace/5", sQLTimeoutException0.toString());
      assertEquals(3881, sQLTimeoutException0.getErrorCode());
      assertEquals(")V!r)Uc`", sQLTimeoutException0.getSQLState());
      assertEquals("/cause/stackTrace/5", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLTimeoutException: /cause/stackTrace/5", sQLSyntaxErrorException0.toString());
      assertEquals("java.sql.SQLTimeoutException: /cause/stackTrace/5", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "/cause/stackTrace/5";
      stringArray0[1] = "/cause/stackTrace/5";
      stringArray0[2] = "{Xb'qS`]iO'qC";
      stringArray0[3] = "{Xb'qS`]iO'qC";
      stringArray0[4] = ")V!r)Uc`";
      stringArray0[5] = "/cause/stackTrace/9";
      stringArray0[6] = ")V!r)Uc`";
      stringArray0[7] = "{Xb'qS`]iO'qC";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertEquals(8, stringArray0.length);
      assertNotNull(jSONPath_MultiPropertySegment0);
      
      ArrayList arrayList1 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, ")V!r)Uc`", jSONPath0);
      assertEquals(8, stringArray0.length);
      assertEquals("{Xb'qS`]iO'qC", jSONPath0.getPath());
      assertFalse(arrayList1.isEmpty());
      assertEquals(8, arrayList1.size());
      assertNotNull(arrayList1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Integer integer0 = new Integer(7);
      assertEquals(7, (int)integer0);
      assertNotNull(integer0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2379, 7, 7);
      assertNotNull(mockGregorianCalendar0);
      
      boolean boolean0 = JSONPath.remove((Object) mockGregorianCalendar0, "eX0ln");
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2379,MONTH=7,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=7,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = JSONPath.compile("[");
      assertEquals("[", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Object object0 = jSONPath0.eval((Object) long0);
      assertEquals("[", jSONPath0.getPath());
      assertEquals((-3851359326990528739L), object0);
      assertNotNull(object0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("[", object0, false);
      assertEquals("[", jSONPath0.getPath());
      assertNotNull(jSONPath_ValueSegment0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.alibaba.fastjson.serializer.ASMSerializerFactory");
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: com.alibaba.fastjson.serializer.ASMSerializerFactory", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.serializer.ASMSerializerFactory", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath_JSONPathParser0, (Object[]) longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class com.alibaba.fastjson.JSONPath$JSONPathParser
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("like");
      assertEquals("like", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String string0 = jSONPath0.getPath();
      assertEquals("like", jSONPath0.getPath());
      assertEquals("like", string0);
      assertNotNull(string0);
      
      Class<JSONPath.RangeSegment> class0 = JSONPath.RangeSegment.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0, serializeConfig0);
      assertEquals("like", jSONPath0.getPath());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("yUSKD\"fq5I_b`?-9");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.skipWhitespace();
      jSONPath_JSONPathParser0.next();
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
      
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      assertNotNull(jSONPath_KeySetSegment0);
      
      int[] intArray0 = new int[18];
      intArray0[0] = (-880);
      intArray0[1] = (-2256);
      intArray0[2] = 0;
      intArray0[3] = (-763);
      intArray0[5] = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("like");
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("error", jSONReaderScanner0.tokenName());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, DefaultJSONParser.NONE);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com.alibaba.fastjson.JSONPath$NotNullSegement", false);
      assertFalse(jSONPath_PropertySegment0.equals((Object)jSONPath_Segment0));
      assertNotNull(jSONPath_PropertySegment0);
      
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.parser.safeMode", (-413L), 2697L, false);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      boolean boolean1 = jSONPath_FilterSegment0.remove(jSONPath0, class0, jSONPath_Segment0);
      assertEquals("like", jSONPath0.getPath());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(jSONPath_Segment0.equals((Object)jSONPath_PropertySegment0));
      assertNotSame(jSONPath_Segment0, jSONPath_PropertySegment0);
      
      Object object0 = JSONPath.reserveToObject(jSONPath_FilterSegment0, (String[]) null);
      assertNotNull(object0);
      assertSame(jSONPath_FilterSegment0, object0);
      assertSame(object0, jSONPath_FilterSegment0);
      
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_JSONPathParser0);
      assertFalse(set0.contains("fastjson.parser.safeMode"));
      assertEquals("like", jSONPath0.getPath());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("evalKeySet error : ", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      int int0 = JSONPath.size((Object) jSONPath_PropertySegment0, "org.hibernate.proxy.HibernateProxy");
      assertEquals((-1), int0);
      
      String string0 = "com.alibaba.fastjson.JSONPath$JSONPathParser";
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      int int1 = 2460;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("org.hibernate.proxy.HibernateProxy", parserConfig0, (-493));
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      
      JSONPath jSONPath0 = new JSONPath("JSONPath$JSONPathParser");
      assertEquals("JSONPath$JSONPathParser", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Float float0 = new Float(1000.0);
      assertEquals(1000.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Long long0 = new Long(367L);
      assertEquals(367L, (long)long0);
      assertNotNull(long0);
      
      String string0 = "GE";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("GE", "GE");
      assertEquals("GE", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("GE", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: GE", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/cause/stackTrace/11", "/cause/stackTrace/11", 2379, sQLIntegrityConstraintViolationException0);
      assertEquals("GE", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("GE", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: GE", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("/cause/stackTrace/11", sQLTransactionRollbackException0.getMessage());
      assertEquals("/cause/stackTrace/11", sQLTransactionRollbackException0.getSQLState());
      assertEquals(2379, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: /cause/stackTrace/11", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/cause/stackTrace/11", "eX0ln", sQLTransactionRollbackException0);
      assertEquals("GE", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("GE", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: GE", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("/cause/stackTrace/11", sQLTransactionRollbackException0.getMessage());
      assertEquals("/cause/stackTrace/11", sQLTransactionRollbackException0.getSQLState());
      assertEquals(2379, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: /cause/stackTrace/11", sQLTransactionRollbackException0.toString());
      assertEquals("eX0ln", sQLTransientConnectionException0.getSQLState());
      assertEquals("/cause/stackTrace/11", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: /cause/stackTrace/11", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      String string1 = "/stackTrace/11";
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) sQLTransientConnectionException0, "/stackTrace/11");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"x\":\"hello\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.set(2442, 2442, 473);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2442,MONTH=2442,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=473,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertFalse(set0.isEmpty());
      assertEquals(3, set0.size());
      assertNotNull(set0);
      
      JSONPath jSONPath0 = new JSONPath("'/ lN|+aE-As3!");
      assertEquals("'/ lN|+aE-As3!", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath jSONPath1 = JSONPath.compile(":");
      assertEquals(":", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("=k|g\":UIB,p^");
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("=k|g\":UIB,p^", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: =k|g\":UIB,p^", sQLNonTransientException0.toString());
      assertNotNull(sQLNonTransientException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(":", "0000-00-00", (-586));
      assertEquals((-586), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: :", sQLSyntaxErrorException0.toString());
      assertEquals(":", sQLSyntaxErrorException0.getMessage());
      assertEquals("0000-00-00", sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("0000-00-00", "{\"b\":null,\"z\":true,\"NOT_BETWEEN\":\"hello\",\"a\":false,\"toCharArray\":7,\"xx\":null}", sQLSyntaxErrorException0);
      assertEquals((-586), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: :", sQLSyntaxErrorException0.toString());
      assertEquals(":", sQLSyntaxErrorException0.getMessage());
      assertEquals("0000-00-00", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("0000-00-00", sQLNonTransientConnectionException0.getMessage());
      assertEquals("{\"b\":null,\"z\":true,\"NOT_BETWEEN\":\"hello\",\"a\":false,\"toCharArray\":7,\"xx\":null}", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: 0000-00-00", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("/cause", sQLSyntaxErrorException0);
      assertEquals((-586), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: :", sQLSyntaxErrorException0.toString());
      assertEquals(":", sQLSyntaxErrorException0.getMessage());
      assertEquals("0000-00-00", sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: /cause", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("/cause", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("0000-00-00");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("/cause");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser1.explain();
      assertEquals(1, jSONPath_SegmentArray0.length);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_SegmentArray0);
      assertNotSame(jSONPath_JSONPathParser1, jSONPath_JSONPathParser0);
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      assertNotNull(jSONPath_SizeSegment0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.alibaba.fastjson.JSONArray", "in", sQLNonTransientConnectionException0);
      assertEquals((-586), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: :", sQLSyntaxErrorException0.toString());
      assertEquals(":", sQLSyntaxErrorException0.getMessage());
      assertEquals("0000-00-00", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("0000-00-00", sQLNonTransientConnectionException0.getMessage());
      assertEquals("{\"b\":null,\"z\":true,\"NOT_BETWEEN\":\"hello\",\"a\":false,\"toCharArray\":7,\"xx\":null}", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: 0000-00-00", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: com.alibaba.fastjson.JSONArray", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("in", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("com.alibaba.fastjson.JSONArray", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      Short short0 = new Short((short)111);
      assertEquals((short)111, (short)short0);
      assertNotNull(short0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      Class<SQLException> class0 = SQLException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath1.getJavaBeanDeserializer(class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      assertEquals(":", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(javaBeanDeserializer0);
      assertNotSame(jSONPath1, jSONPath0);
      
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) javaBeanDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-16));
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(58, false);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath0 = new JSONPath("\\-", serializeConfig0, parserConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("\\-", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Class<DataTruncation> class0 = DataTruncation.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      assertNotNull(javaBeanDeserializer0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Double double0 = new Double(3629.1349);
      assertEquals(3629.1349, (double)double0, 0.01);
      assertNotNull(double0);
      
      long[] longArray0 = new long[0];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("com.alibaba.fastjson.JSONPath$RangeSegment", longArray0, false);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(jSONPath_IntInSegement0);
      
      JSONPath jSONPath1 = new JSONPath("IN");
      assertEquals("IN", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNotNull(sQLTransientException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("IN", "fastjson.parser.autoTypeSupport", sQLTransientException0);
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: IN", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("fastjson.parser.autoTypeSupport", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("IN", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.deny.internal", "fastjson.parser.deny.internal", sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: IN", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("fastjson.parser.autoTypeSupport", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("IN", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: fastjson.parser.deny.internal", sQLTimeoutException0.toString());
      assertEquals("fastjson.parser.deny.internal", sQLTimeoutException0.getMessage());
      assertEquals("fastjson.parser.deny.internal", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath1, class0, jSONPath1, sQLTimeoutException0);
      assertEquals(0, longArray0.length);
      assertEquals("IN", jSONPath1.getPath());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: IN", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("fastjson.parser.autoTypeSupport", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("IN", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: fastjson.parser.deny.internal", sQLTimeoutException0.toString());
      assertEquals("fastjson.parser.deny.internal", sQLTimeoutException0.getMessage());
      assertEquals("fastjson.parser.deny.internal", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertFalse(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      jSONPath1.deepSet(sQLTransientException0, "fastjson.parser.autoTypeSupport", 58, sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("IN", jSONPath1.getPath());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(jSONPath1, jSONPath0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTransientException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLTransientException", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLTransientException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      BigDecimal bigDecimal1 = new BigDecimal(3629.1349);
      assertEquals((short)3629, bigDecimal1.shortValue());
      assertEquals((byte)45, bigDecimal1.byteValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      
      boolean boolean1 = jSONPath1.set((Object) sQLInvalidAuthorizationSpecException0, (Object) bigDecimal1, false);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLTransientException", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLTransientException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals((short)3629, bigDecimal1.shortValue());
      assertEquals((byte)45, bigDecimal1.byteValue());
      assertEquals("IN", jSONPath1.getPath());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertTrue(boolean1);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(boolean1 == boolean0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(jSONPath1, jSONPath0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-16);
      intArray0[1] = 58;
      intArray0[2] = 58;
      intArray0[3] = (-16);
      intArray0[4] = 58;
      intArray0[5] = 49;
      intArray0[6] = 58;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-16), 58, 58, (-16), 58, 49, 58}, intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      
      // Undeclared exception!
      try { 
        jSONPath_MultiIndexSegment0.eval(jSONPath0, javaBeanDeserializer0, parserConfig0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.set(2442, 2442, 473);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2442,MONTH=2442,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=473,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertFalse(set0.isEmpty());
      assertEquals(3, set0.size());
      assertNotNull(set0);
      
      String string0 = "{\"b\":null,\"z\":true,\"NOT_BETWEEN\":\"hello\",\"a\":false,\"toCharArray\":7,\"xx\":null}";
      Long long0 = new Long(8129946290599006616L);
      assertEquals(8129946290599006616L, (long)long0);
      assertNotNull(long0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/5");
      assertNotNull(jSONPath_JSONPathParser0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(",`<~Va", "/stackTrace/5");
      assertEquals("java.sql.SQLFeatureNotSupportedException: ,`<~Va", sQLFeatureNotSupportedException0.toString());
      assertEquals("/stackTrace/5", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(",`<~Va", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.serializer.JSONLibDataFormatSerializer");
      assertEquals("com.alibaba.fastjson.serializer.JSONLibDataFormatSerializer", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("/stackTrace/5", hashMap0, sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: ,`<~Va", sQLFeatureNotSupportedException0.toString());
      assertEquals("/stackTrace/5", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(",`<~Va", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("/stackTrace/5", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: /stackTrace/5", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "S5GyLP``De8");
      assertFalse(boolean0);
      
      jSONPath0.deepSet(sQLClientInfoException0, "Byte", (-586), set0);
      assertFalse(set0.contains("/stackTrace/5"));
      assertFalse(set0.isEmpty());
      assertEquals(3, set0.size());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ,`<~Va", sQLFeatureNotSupportedException0.toString());
      assertEquals("/stackTrace/5", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(",`<~Va", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.serializer.JSONLibDataFormatSerializer", jSONPath0.getPath());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("/stackTrace/5", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: /stackTrace/5", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      String string1 = "-mVJgbeJMK~wc'ig]t";
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      serializeConfig0.clearSerializers();
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      JSONPath jSONPath1 = new JSONPath(",`<~Va", serializeConfig0, parserConfig0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(",`<~Va", jSONPath1.getPath());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      // Undeclared exception!
      try { 
        jSONPath1.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ,`<~Va
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Float float0 = new Float(1000.0);
      assertEquals(1000.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      int int0 = JSONPath.size((Object) float0, "JSONPath$JSONPathParser");
      assertEquals((-1), int0);
      
      boolean boolean0 = JSONPath.contains((Object) "JSONPath$JSONPathParser", "fastjson.parser.autoTypeSupport");
      assertFalse(boolean0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      Short short0 = new Short((short) (-43));
      assertEquals((short) (-43), (short)short0);
      assertNotNull(short0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      sQLTimeoutException0.printStackTrace();
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      
      boolean boolean1 = JSONPath.contains((Object) sQLTimeoutException0, "/stackTrace/3");
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      assertNotNull(jSONPath_MaxSegment0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("JSONPath$JSONPathParser");
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("JSONPath$JSONPathParser", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: JSONPath$JSONPathParser", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      MockDate mockDate0 = new MockDate((short) (-43), (short) (-43), (short) (-43), (-2525), 431, (-1));
      assertNotNull(mockDate0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath_JSONPathParser0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      jSONPath0.deepSet(sQLInvalidAuthorizationSpecException0, "/stackTrace/3", (-2525), bigDecimal0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("JSONPath$JSONPathParser", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: JSONPath$JSONPathParser", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)63}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$JSONPathParser");
      assertEquals("com.alibaba.fastjson.JSONPath$JSONPathParser", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSON.DEFAULT_PARSER_FEATURE = 890;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$JSONPathParser");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string0 = jSONPath_JSONPathParser0.readName();
      assertEquals("com", string0);
      assertNotNull(string0);
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      assertNotNull(jSONPath_SizeSegment0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("D");
      assertEquals("D", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String string0 = jSONPath0.getPath();
      assertEquals("D", jSONPath0.getPath());
      assertEquals("D", string0);
      assertNotNull(string0);
      
      boolean boolean0 = jSONPath0.isRef();
      assertEquals("D", jSONPath0.getPath());
      assertTrue(boolean0);
      
      boolean boolean1 = jSONPath0.contains((Object) "D");
      assertEquals("D", jSONPath0.getPath());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Long long0 = new Long(246L);
      assertEquals(246L, (long)long0);
      assertNotNull(long0);
      
      String string1 = "/beanInfo/clazz/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type";
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("D", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("D", ")/");
      assertEquals("java.sql.SQLTimeoutException: D", sQLTimeoutException0.toString());
      assertEquals(")/", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("D", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: D", sQLTimeoutException0.toString());
      assertEquals(")/", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("D", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLTimeoutException: D", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: D", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("7R^", "D", sQLRecoverableException0);
      assertEquals("java.sql.SQLTimeoutException: D", sQLTimeoutException0.toString());
      assertEquals(")/", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("D", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLTimeoutException: D", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: D", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("7R^", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: 7R^", sQLTransientConnectionException0.toString());
      assertEquals("D", sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTimeoutException: D", sQLTimeoutException0.toString());
      assertEquals(")/", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("D", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLTimeoutException: D", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: D", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("7R^", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: 7R^", sQLTransientConnectionException0.toString());
      assertEquals("D", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLTransientConnectionException: 7R^", sQLTransientConnectionException1.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: 7R^", sQLTransientConnectionException1.getMessage());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertNotNull(sQLTransientConnectionException1);
      
      jSONPath_PropertySegment0.setValue(jSONPath0, "D", sQLTransientConnectionException1);
      assertEquals("D", jSONPath0.getPath());
      assertEquals("java.sql.SQLTimeoutException: D", sQLTimeoutException0.toString());
      assertEquals(")/", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("D", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLTimeoutException: D", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: D", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("7R^", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: 7R^", sQLTransientConnectionException0.toString());
      assertEquals("D", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLTransientConnectionException: 7R^", sQLTransientConnectionException1.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: 7R^", sQLTransientConnectionException1.getMessage());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertNotSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertNotSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) jSONPath_PropertySegment0, "3Ervf<Sz7&KU.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 3Ervf<Sz7&KU.
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-149L);
      longArray0[1] = (-1580386065683472715L);
      longArray0[2] = 7048426940343117278L;
      longArray0[3] = 0L;
      longArray0[4] = 837L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("$dKf}>Yg)Oo!wz", longArray0, true);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-149L), (-1580386065683472715L), 7048426940343117278L, 0L, 837L}, longArray0);
      assertNotNull(jSONPath_IntInSegement0);
      
      JSONPath jSONPath0 = new JSONPath("~y8P.s");
      assertEquals("~y8P.s", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNotNull(sQLTransientException0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("zLNl)9cK");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string0 = jSONPath_JSONPathParser0.readName();
      assertEquals("zLNl", string0);
      assertNotNull(string0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("zLNl)9cK", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("NE");
      assertEquals("java.sql.SQLFeatureNotSupportedException: NE", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("NE", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      jSONPath_PropertySegment0.setValue(jSONPath0, "zLNl)9cK", sQLFeatureNotSupportedException0);
      assertEquals("~y8P.s", jSONPath0.getPath());
      assertEquals("java.sql.SQLFeatureNotSupportedException: NE", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("NE", sQLFeatureNotSupportedException0.getMessage());
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(85, (-6430), (-6430));
      assertNotNull(jSONPath_RangeSegment0);
      
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath_RangeSegment0, "$dKf}>Yg)Oo!wz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : $dKf}>Yg)Oo!wz
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DenYu+I0");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("DenYu+I0");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath_Segment0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[", "DenYu+I0", 41);
      assertEquals("[", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("DenYu+I0", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: [", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(41, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("~y8P.s", sQLIntegrityConstraintViolationException0, false);
      assertEquals("[", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("DenYu+I0", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: [", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(41, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(jSONPath_ValueSegment0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("P`:x!-VNP");
      assertNotNull(jSONPath_NotNullSegement0);
      
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('e', char0);
      
      Short short0 = new Short((short)216);
      assertEquals((short)216, (short)short0);
      assertNotNull(short0);
      
      Class<SQLDataException> class0 = SQLDataException.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(javaBeanSerializer0);
      
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) javaBeanSerializer0, "/stackTrace/7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Integer integer0 = new Integer(7);
      assertEquals(7, (int)integer0);
      assertNotNull(integer0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2379, 7, 7);
      assertNotNull(mockGregorianCalendar0);
      
      boolean boolean0 = JSONPath.remove((Object) mockGregorianCalendar0, "eX0ln");
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2379,MONTH=7,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=7,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      assertNotNull(jSONPath_JSONPathParser0);
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(7, 2379, (-104154851));
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      
      boolean boolean1 = JSONPath.remove((Object) integer0, "L");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("L");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      JSONPath jSONPath0 = JSONPath.compile("L");
      assertEquals("L", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      MockGregorianCalendar mockGregorianCalendar2 = new MockGregorianCalendar(timeZone0);
      assertFalse(mockGregorianCalendar2.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar2.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar2);
      
      Object object0 = jSONPath0.eval((Object) mockGregorianCalendar2);
      assertEquals("L", jSONPath0.getPath());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, mockGregorianCalendar2.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar2.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar2.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar2.toString());
      assertFalse(mockGregorianCalendar2.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar2.equals((Object)mockGregorianCalendar0));
      assertNull(object0);
      assertNotSame(mockGregorianCalendar2, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar2, mockGregorianCalendar0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("eX0ln", "L", false);
      assertNotNull(jSONPath_ValueSegment0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("not");
      assertNotNull(jSONPath_NotNullSegement0);
      
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('o', char0);
      assertFalse(jSONPath_JSONPathParser0.equals((Object)jSONPath_JSONPathParser1));
      assertNotSame(jSONPath_JSONPathParser0, jSONPath_JSONPathParser1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      JSONPath jSONPath0 = JSONPath.compile("");
      assertEquals("", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/0");
      assertNotNull(jSONPath_JSONPathParser0);
      
      Long long1 = new Long((-4270347329889690746L));
      assertEquals((-4270347329889690746L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(19, 19, 19, 19, (-675), 19);
      assertNotNull(mockGregorianCalendar0);
      
      Object object0 = JSONPath.eval((Object) mockGregorianCalendar0, "between");
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=19,MONTH=19,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=19,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=-675,SECOND=19,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("xn9MNi8me");
      assertEquals("xn9MNi8me", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("+");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      String[] stringArray0 = new String[0];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("+", "(CLjava/lang/String;Ljava/lang/String;)V", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":false}", stringArray0, false);
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONPath_MatchSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONPath_FilterSegment0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"EQ\",\"y\":7,\"z\":true,\"a\":\"a string\",\"b\":{\"x\":null}}");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      assertNotNull(jSONPath_KeySetSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("{\"x\":\"EQ\",\"y\":7,\"z\":true,\"a\":\"a string\",\"b\":{\"x\":null}}");
      assertEquals("{\"x\":\"EQ\",\"y\":7,\"z\":true,\"a\":\"a string\",\"b\":{\"x\":null}}", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "REG_MATCH";
      stringArray0[1] = "REG_MATCH";
      stringArray0[2] = "/stackTrace/3";
      stringArray0[3] = "autoTypeSupport";
      stringArray0[4] = "a?LC4";
      stringArray0[5] = "autoTypeSupport";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("/stackTrace/3", "{\"x\":\"EQ\",\"y\":7,\"z\":true,\"a\":\"a string\",\"b\":{\"x\":null}}", "REG_MATCH", stringArray0, false);
      assertEquals(6, stringArray0.length);
      assertNotNull(jSONPath_MatchSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      assertEquals(6, stringArray0.length);
      assertNotNull(jSONPath_FilterSegment0);
      
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException();
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertNull(sQLTransientConnectionException1.getMessage());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertNotNull(sQLTransientConnectionException1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" I");
      assertEquals(" I", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = " I";
      stringArray0[1] = "stackTrace/`";
      stringArray0[2] = " I";
      stringArray0[3] = " I";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("1;~v;H=Gl[i6", "stackTrace/`", "1;~v;H=Gl[i6", stringArray0, true);
      assertEquals(4, stringArray0.length);
      assertNotNull(jSONPath_MatchSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      assertEquals(4, stringArray0.length);
      assertNotNull(jSONPath_FilterSegment0);
      
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException();
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertNull(sQLTransientConnectionException1.getMessage());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertNotNull(sQLTransientConnectionException1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-16));
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(58, false);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      
      JSONPath jSONPath0 = new JSONPath("\\-", serializeConfig0, parserConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("\\-", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      
      Class<DataTruncation> class0 = DataTruncation.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      assertNotNull(javaBeanDeserializer0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      
      Double double0 = new Double(3629.1349);
      assertEquals(3629.1349, (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = jSONPath0.size((Object) double0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("\\-", jSONPath0.getPath());
      assertEquals((-1), int0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("R4na", jSONPath_ArrayAccessSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.LT;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("fastjson.parser.autoTypeAccept", (-1), jSONPath_Operator1);
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotNull(jSONPath_IntOpSegement0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, sQLTransactionRollbackException0, sQLTransactionRollbackException0, parserConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("\\-", jSONPath0.getPath());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertFalse(boolean0);
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertNotSame(jSONPath_Operator1, jSONPath_Operator0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/stackTrace/4");
      assertEquals("/stackTrace/4", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: /stackTrace/4", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      boolean boolean1 = JSONPath.set((Object) sQLNonTransientConnectionException0, "F", (Object) jSONPath_IntOpSegement0);
      assertEquals("/stackTrace/4", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: /stackTrace/4", sQLNonTransientConnectionException0.toString());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotSame(jSONPath_Operator1, jSONPath_Operator0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\\-");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
      
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertFalse(object0.equals((Object)jSONPath_Segment0));
      assertNotNull(object0);
      assertNotSame(object0, jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      Long long0 = new Long((-2643L));
      assertEquals((-2643L), (long)long0);
      assertNotNull(long0);
      
      Integer integer0 = new Integer(7);
      assertEquals(7, (int)integer0);
      assertNotNull(integer0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1154), 2379, 2379);
      assertNotNull(mockGregorianCalendar0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("`iv-X");
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('`', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = '2';
      charArray0[2] = 'l';
      charArray0[3] = 'V';
      charArray0[4] = 'J';
      charArray0[5] = 'E';
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('`', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'|', '2', 'l', 'V', 'J', 'E'}, charArray0);
      assertNull(uUID0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      boolean boolean0 = JSONPath.remove((Object) null, "eX0ln");
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("#RUz");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string0 = "[";
      JSONPath jSONPath0 = JSONPath.compile("L");
      assertEquals("L", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      BigDecimal bigDecimal0 = new BigDecimal((int) 'J');
      assertEquals((short)74, bigDecimal0.shortValue());
      assertEquals((byte)74, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Object object0 = jSONPath0.eval((Object) bigDecimal0);
      assertEquals("L", jSONPath0.getPath());
      assertEquals((short)74, bigDecimal0.shortValue());
      assertEquals((byte)74, bigDecimal0.byteValue());
      assertNull(object0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("rlike", (Object) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Integer integer0 = new Integer(7);
      assertEquals(7, (int)integer0);
      assertNotNull(integer0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2379, 7, 7);
      assertNotNull(mockGregorianCalendar0);
      
      boolean boolean0 = JSONPath.remove((Object) mockGregorianCalendar0, "eX0ln");
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2379,MONTH=7,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=7,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$ArrayAccessSegment";
      stringArray0[1] = "eX0ln";
      stringArray0[2] = "eX0ln";
      stringArray0[3] = "eX0ln";
      stringArray0[4] = "not";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertEquals(5, stringArray0.length);
      assertNotNull(jSONPath_MultiPropertySegment0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("serializer");
      assertEquals("serializer", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Long long1 = new Long(135L);
      assertEquals(135L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long long2 = Long.getLong("com.alibaba.fastjson.JSONPath$ArrayAccessSegment", long1);
      assertEquals(135L, (long)long2);
      assertFalse(long1.equals((Object)long0));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      boolean boolean2 = jSONPath0.set((Object) long2, (Object) integer0, true);
      assertEquals("serializer", jSONPath0.getPath());
      assertTrue(boolean2);
      assertFalse(long1.equals((Object)long0));
      assertFalse(long2.equals((Object)long0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      UUID uUID0 = MockUUID.randomUUID();
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNotNull(uUID0);
      
      boolean boolean3 = jSONPath0.contains((Object) uUID0);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals("serializer", jSONPath0.getPath());
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("eX0ln");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but 'n'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("_asm_fieldType");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("asm", string0);
      assertNotNull(string0);
      
      jSONPath_JSONPathParser0.skipWhitespace();
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"com.alibaba.fastjson.JSONPath$MaxSegment\":\"Large\",\"color\":{\"x\":99},\"-\":true,\"value2\":false,\"number\":\"1\"}");
      assertEquals("{\"fruit\":\"Apple\",\"com.alibaba.fastjson.JSONPath$MaxSegment\":\"Large\",\"color\":{\"x\":99},\"-\":true,\"value2\":false,\"number\":\"1\"}", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("fastjson.parser.autoTypeSupport");
      assertNotNull(jSONPath_NullSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      int int0 = jSONPath0.evalSize(jSONPath_FilterSegment0);
      assertEquals("{\"fruit\":\"Apple\",\"com.alibaba.fastjson.JSONPath$MaxSegment\":\"Large\",\"color\":{\"x\":99},\"-\":true,\"value2\":false,\"number\":\"1\"}", jSONPath0.getPath());
      assertEquals(0, int0);
      
      Throwable throwable0 = null;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("{\"fruit\":\"Apple\",\"com.alibaba.fastjson.JSONPath$MaxSegment\":\"Large\",\"color\":{\"x\":99},\"-\":true,\"value2\":false,\"number\":\"1\"}", "asm", (Throwable) null);
      assertEquals("asm", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("{\"fruit\":\"Apple\",\"com.alibaba.fastjson.JSONPath$MaxSegment\":\"Large\",\"color\":{\"x\":99},\"-\":true,\"value2\":false,\"number\":\"1\"}", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: {\"fruit\":\"Apple\",\"com.alibaba.fastjson.JSONPath$MaxSegment\":\"Large\",\"color\":{\"x\":99},\"-\":true,\"value2\":false,\"number\":\"1\"}", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("asm", sQLNonTransientConnectionException0);
      assertEquals("asm", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("{\"fruit\":\"Apple\",\"com.alibaba.fastjson.JSONPath$MaxSegment\":\"Large\",\"color\":{\"x\":99},\"-\":true,\"value2\":false,\"number\":\"1\"}", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: {\"fruit\":\"Apple\",\"com.alibaba.fastjson.JSONPath$MaxSegment\":\"Large\",\"color\":{\"x\":99},\"-\":true,\"value2\":false,\"number\":\"1\"}", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: asm", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("asm", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("H}Y\"");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : H}Y\"
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Integer integer0 = new Integer(7);
      assertEquals(7, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = "eX0ln";
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2379, 7, 7);
      assertNotNull(mockGregorianCalendar0);
      
      boolean boolean0 = JSONPath.remove((Object) mockGregorianCalendar0, "eX0ln");
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2379,MONTH=7,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=7,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string1 = "[";
      JSONPath jSONPath0 = JSONPath.compile("[");
      assertEquals("[", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("[");
      assertNotNull(jSONPath_Segment0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("[", longArray0[0], false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{}");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace");
      assertEquals("/stackTrace", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Object object0 = jSONPath0.eval((Object) "/stackTrace");
      assertEquals("/stackTrace", jSONPath0.getPath());
      assertNull(object0);
      
      String string0 = null;
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment((String) null, (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Pattern pattern0 = Pattern.compile("b|eeP");
      assertEquals(0, pattern0.flags());
      assertEquals("b|eeP", pattern0.toString());
      assertEquals("b|eeP", pattern0.pattern());
      assertNotNull(pattern0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      assertNotNull(jSONPath_MultiIndexSegment0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("b|eeP", jSONPath_MultiIndexSegment0, false);
      assertNotNull(jSONPath_ValueSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("V:){");
      assertEquals("V:){", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("b|eeP", "V:){");
      assertEquals("b|eeP", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: b|eeP", sQLNonTransientConnectionException0.toString());
      assertEquals("V:){", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      boolean boolean1 = jSONPath_ValueSegment0.apply(jSONPath0, sQLNonTransientConnectionException0, (Object) null, sQLTimeoutException0);
      assertEquals("V:){", jSONPath0.getPath());
      assertEquals("b|eeP", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: b|eeP", sQLNonTransientConnectionException0.toString());
      assertEquals("V:){", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_ValueSegment0, jSONPath_ValueSegment0, true);
      assertNotNull(jSONPath_FilterGroup0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      JSONPath jSONPath1 = new JSONPath("VaF1Oh@Ryh.NBLK", serializeConfig0, parserConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("VaF1Oh@Ryh.NBLK", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      JSONPath jSONPath2 = JSONPath.compile("~55=6_9/ Bq5&$r");
      assertEquals("~55=6_9/ Bq5&$r", jSONPath2.getPath());
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertNotNull(jSONPath2);
      assertNotSame(jSONPath2, jSONPath0);
      assertNotSame(jSONPath2, jSONPath1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ']';
      charArray0[1] = '?';
      charArray0[2] = 't';
      charArray0[3] = 'v';
      charArray0[4] = '%';
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = null;
      try {
        bigDecimal0 = new BigDecimal(charArray0, mathContext0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Integer integer0 = new Integer(7);
      assertEquals(7, (int)integer0);
      assertNotNull(integer0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2379, 7, 7);
      assertNotNull(mockGregorianCalendar0);
      
      boolean boolean0 = JSONPath.remove((Object) mockGregorianCalendar0, "eX0ln");
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2379,MONTH=7,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=7,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      assertNotNull(jSONPath_JSONPathParser0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) "not");
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("l]c|U0]gX2Jo8*_g");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath jSONPath0 = new JSONPath("l]c|U0]gX2Jo8*_g");
      assertEquals("l]c|U0]gX2Jo8*_g", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("geIName");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2379, 7, 7);
      assertNotNull(mockGregorianCalendar0);
      
      boolean boolean0 = JSONPath.remove((Object) mockGregorianCalendar0, "eX0ln");
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2379,MONTH=7,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=7,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      assertNotNull(jSONPath_JSONPathParser0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) "not");
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("l]c|U0]gX2Jo8*_g");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath jSONPath0 = new JSONPath("l]c|U0]gX2Jo8*_g");
      assertEquals("l]c|U0]gX2Jo8*_g", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("geIName");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.set(2442, 2442, 473);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2442,MONTH=2442,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=473,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertEquals(3, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      Date date0 = mockGregorianCalendar0.getTime();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2442,MONTH=2442,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=473,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      mockGregorianCalendar0.set((-586), (-586), 2442, 113, 2442, 0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=-586,MONTH=-586,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=2442,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=113,MINUTE=2442,SECOND=0,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      int int0 = mockGregorianCalendar0.getMaximum(0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=-586,MONTH=-586,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=2442,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=113,MINUTE=2442,SECOND=0,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, int0);
      
      int int1 = mockGregorianCalendar0.get(0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-81989849879680,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=630,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=12,DAY_OF_YEAR=316,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=0,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      JSONPath jSONPath0 = JSONPath.compile("[");
      assertEquals("[", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)jSONPath0.eval((Object) mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-81989849879680,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=630,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=12,DAY_OF_YEAR=316,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=0,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("[", jSONPath0.getPath());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-81989849879680,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=630,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=12,DAY_OF_YEAR=316,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=0,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertNotNull(mockGregorianCalendar1);
      assertSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertSame(mockGregorianCalendar1, mockGregorianCalendar0);
      
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("w2zIh8z/Uv", double0, true);
      assertNotNull(jSONPath_ValueSegment0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com.alibaba.fastjson.serializer.FloatCodec");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.serializer.FloatCodec");
      assertNotNull(jSONPath_JSONPathParser0);
      
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('o', char0);
      
      Short short0 = new Short((short)161);
      assertEquals((short)161, (short)short0);
      assertNotNull(short0);
      
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) "com.alibaba.fastjson.serializer.FloatCodec", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-149L);
      longArray0[1] = (-1580386065683472715L);
      longArray0[2] = 7048426940343117278L;
      longArray0[3] = 0L;
      longArray0[4] = 837L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("$dKf}>Yg)Oo!wz", longArray0, true);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-149L), (-1580386065683472715L), 7048426940343117278L, 0L, 837L}, longArray0);
      assertNotNull(jSONPath_IntInSegement0);
      
      JSONPath jSONPath0 = new JSONPath("~y8P.s");
      assertEquals("~y8P.s", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertNotNull(sQLTransientException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("$dKf}>Yg)Oo!wz", "~y8P.s", sQLTransientException0);
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("$dKf}>Yg)Oo!wz", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("~y8P.s", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: $dKf}>Yg)Oo!wz", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, jSONPath_Operator0, jSONPath_Operator0, sQLFeatureNotSupportedException0);
      assertEquals(5, longArray0.length);
      assertEquals("~y8P.s", jSONPath0.getPath());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("$dKf}>Yg)Oo!wz", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("~y8P.s", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: $dKf}>Yg)Oo!wz", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertFalse(boolean0);
      assertArrayEquals(new long[] {(-149L), (-1580386065683472715L), 7048426940343117278L, 0L, 837L}, longArray0);
      
      BigDecimal bigDecimal0 = new BigDecimal((-4480.0150986));
      assertEquals((byte) (-128), bigDecimal0.byteValue());
      assertEquals((short) (-4480), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      // Undeclared exception!
      jSONPath0.deepSet(bigDecimal0, "$dKf}>Yg)Oo!wz", (-1580386065683472715L), jSONPath_Operator0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)63}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)63}, byteArray0);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$JSONPathParser");
      assertEquals("com.alibaba.fastjson.JSONPath$JSONPathParser", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSON.DEFAULT_PARSER_FEATURE = 890;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$JSONPathParser");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string0 = jSONPath_JSONPathParser0.readName();
      assertEquals("com", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((byte)63);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DenYu+I0");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("~y8P.s", "P`:x!-VNP", true);
      assertNotNull(jSONPath_RlikeSegement0);
      
      JSONPath jSONPath0 = JSONPath.compile("P`:x!-VNP");
      assertEquals("P`:x!-VNP", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Object object0 = JSONPath.eval((Object) "P`:x!-VNP", "m_");
      assertNull(object0);
      
      boolean boolean2 = jSONPath_RlikeSegement0.apply(jSONPath0, jSONPath0, jSONPath0, (Object) null);
      assertEquals("P`:x!-VNP", jSONPath0.getPath());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_RlikeSegement0);
      assertNotNull(jSONPath_Filter0);
      assertSame(jSONPath_RlikeSegement0, jSONPath_Filter0);
      assertSame(jSONPath_Filter0, jSONPath_RlikeSegement0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DenYu+I0");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("~y8P.s", "P`:x!-VNP", true);
      assertNotNull(jSONPath_RlikeSegement0);
      
      JSONPath jSONPath0 = JSONPath.compile("P`:x!-VNP");
      assertEquals("P`:x!-VNP", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Object object0 = JSONPath.eval((Object) "P`:x!-VNP", "m_");
      assertNull(object0);
      
      boolean boolean2 = jSONPath_RlikeSegement0.apply(jSONPath0, jSONPath0, jSONPath0, (Object) null);
      assertEquals("P`:x!-VNP", jSONPath0.getPath());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_RlikeSegement0);
      assertNotNull(jSONPath_Filter0);
      assertSame(jSONPath_RlikeSegement0, jSONPath_Filter0);
      assertSame(jSONPath_Filter0, jSONPath_RlikeSegement0);
      
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem("P`:x!-VNP", 4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("'s*,s*'", 548L, 645955766733898183L, false);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      int int0 = 42;
      SerializeConfig serializeConfig0 = new SerializeConfig(42, false);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath0 = new JSONPath("'s*,s*'", serializeConfig0, parserConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("'s*,s*'", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "l";
      JSONPath jSONPath0 = new JSONPath("l");
      assertEquals("l", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Pattern pattern0 = Pattern.compile("M|eeP");
      assertEquals(0, pattern0.flags());
      assertEquals("M|eeP", pattern0.toString());
      assertEquals("M|eeP", pattern0.pattern());
      assertNotNull(pattern0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("M|eeP", pattern0, jSONPath_Operator0);
      assertEquals(0, pattern0.flags());
      assertEquals("M|eeP", pattern0.toString());
      assertEquals("M|eeP", pattern0.pattern());
      assertNotNull(jSONPath_RegMatchSegement0);
      
      JSONPath jSONPath0 = new JSONPath("max");
      assertEquals("max", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_Operator0);
      assertEquals("max", jSONPath0.getPath());
      assertNull(set0);
      
      SQLWarning sQLWarning0 = new SQLWarning("M|eeP");
      assertEquals("M|eeP", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: M|eeP", sQLWarning0.toString());
      assertNotNull(sQLWarning0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(33);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.deny", "fastjson.parser.autoTypeAccept", sQLWarning0);
      assertEquals("M|eeP", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: M|eeP", sQLWarning0.toString());
      assertEquals("fastjson.parser.autoTypeAccept", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("fastjson.parser.deny", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson.parser.deny", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      Short short0 = new Short((short)433);
      assertEquals((short)433, (short)short0);
      assertNotNull(short0);
      
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.RLIKE;
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotSame(jSONPath_Operator1, jSONPath_Operator0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("_asm_fieldType");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("asm", string0);
      assertNotNull(string0);
      
      jSONPath_JSONPathParser0.skipWhitespace();
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
      
      String string1 = "{\"fruit\":\"Apple\",\"com.alibaba.fastjson.JSONPath$MaxSegment\":\"Large\",\"color\":{\"x\":true},\"value\":true,\"value2\":false,\"number\":\"1\"}";
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"com.alibaba.fastjson.JSONPath$MaxSegment\":\"Large\",\"color\":{\"x\":true},\"value\":true,\"value2\":false,\"number\":\"1\"}");
      assertEquals("{\"fruit\":\"Apple\",\"com.alibaba.fastjson.JSONPath$MaxSegment\":\"Large\",\"color\":{\"x\":true},\"value\":true,\"value2\":false,\"number\":\"1\"}", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      boolean boolean1 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("_asm_fieldType");
      assertNotNull(jSONPath_NullSegement0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("{\"fruit\":\"Apple\",\"com.alibaba.fastjson.JSONPath$MaxSegment\":\"Large\",\"color\":{\"x\":true},\"value\":true,\"value2\":false,\"number\":\"1\"}");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      String string2 = jSONPath_JSONPathParser0.readName();
      assertEquals("fieldType", string2);
      assertFalse(jSONPath_JSONPathParser0.equals((Object)jSONPath_JSONPathParser1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(jSONPath_JSONPathParser0, jSONPath_JSONPathParser1);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(93L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = "java/lang/Byte";
      ASMDeserializerFactory aSMDeserializerFactory0 = null;
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)124;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)124}, byteArray0);
      
      JSONPath jSONPath0 = new JSONPath("java/lang/Byte", (SerializeConfig) null, parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("java/lang/Byte", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      int int0 = JSONPath.size((Object) null, "java/lang/Byte");
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer(2660);
      assertEquals(2660, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      boolean boolean1 = JSONPath.eq((Object) null, integer0);
      assertFalse(boolean1);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.JSONPath$JSONPathParser", parserConfig0, (-350));
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((long) longArray0[0]);
      assertEquals(9, longArray0.length);
      assertEquals((-3851359326990528739L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      assertNotNull(jSONPath_SizeSegment0);
      
      Object object0 = JSONPath.eval((Object) jSONPath_SizeSegment0, "com.alibaba.fastjson.JSONPath$IntBetweenSegement");
      assertNull(object0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("a`h");
      assertEquals("a`h", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: a`h", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("json-path can not be null or empty");
      assertNotNull(mockThrowable0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("YY[h>v5z Li5{", "/cause/stackTrace/4", (-2507), mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: json-path can not be null or empty", mockThrowable0.toString());
      assertEquals("json-path can not be null or empty", mockThrowable0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: YY[h>v5z Li5{", sQLIntegrityConstraintViolationException0.toString());
      assertEquals((-2507), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("/cause/stackTrace/4", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("YY[h>v5z Li5{", sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      Float float0 = new Float((double) (-2507));
      assertEquals((-2507.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = JSONPath.eq((Object) null, float0);
      assertFalse(boolean0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_SizeSegment0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("java/lang/Byte");
      assertEquals("java/lang/Byte", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("|3)Mx>v+", "r-}");
      assertEquals("|3)Mx>v+", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: |3)Mx>v+", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("r-}", sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      Long long0 = new Long(5410L);
      assertEquals(5410L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1502845958873959152L);
      assertEquals(1502845958873959152L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long[] longArray0 = new Long[8];
      longArray0[0] = long1;
      longArray0[1] = long1;
      longArray0[2] = long1;
      longArray0[3] = long1;
      longArray0[4] = long0;
      longArray0[5] = long0;
      Long long2 = new Long((-1014497654951707614L));
      assertEquals((-1014497654951707614L), (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[6] = long2;
      longArray0[7] = long1;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("java/lang/Byte", longArray0, true);
      assertEquals(8, longArray0.length);
      assertNotNull(jSONPath_IntObjInSegement0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("+.3b1qZqvl07TR(");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntObjInSegement0);
      assertEquals(8, longArray0.length);
      assertNotNull(jSONPath_Filter0);
      assertSame(jSONPath_Filter0, jSONPath_IntObjInSegement0);
      assertSame(jSONPath_IntObjInSegement0, jSONPath_Filter0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_Filter0);
      assertEquals(8, longArray0.length);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("|3)Mx>v+", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "j$0%XUj";
      stringArray0[1] = "r-}";
      stringArray0[2] = "r-}";
      stringArray0[3] = "|3)Mx>v+";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(jSONPath_MultiPropertySegment0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTimeoutException0);
      assertEquals("|3)Mx>v+", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: |3)Mx>v+", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("r-}", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: |3)Mx>v+", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLTimeoutException: |3)Mx>v+", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, jSONPath_IntObjInSegement0, sQLRecoverableException0);
      assertEquals(4, stringArray0.length);
      assertEquals(8, longArray0.length);
      assertEquals("java/lang/Byte", jSONPath0.getPath());
      assertEquals("|3)Mx>v+", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: |3)Mx>v+", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("r-}", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: |3)Mx>v+", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLTimeoutException: |3)Mx>v+", sQLRecoverableException0.toString());
      assertFalse(arrayList0.isEmpty());
      assertEquals(4, arrayList0.size());
      assertNotNull(arrayList0);
      assertSame(jSONPath_IntObjInSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = JSONPath.compile("[");
      assertEquals("[", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Object object0 = jSONPath0.eval((Object) long0);
      assertEquals("[", jSONPath0.getPath());
      assertEquals((-3851359326990528739L), object0);
      assertNotNull(object0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.alibaba.fastjson.serializer.ASMSerializerFactory");
      assertEquals("java.sql.SQLTransactionRollbackException: com.alibaba.fastjson.serializer.ASMSerializerFactory", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.serializer.ASMSerializerFactory", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath_JSONPathParser0, (Object[]) longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class com.alibaba.fastjson.JSONPath$JSONPathParser
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("/stackTAac`710", "/stackTAac`710", false);
      assertNotNull(jSONPath_ValueSegment0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_ValueSegment0, jSONPath_ValueSegment0, true);
      assertNotNull(jSONPath_FilterGroup0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      JSONPath jSONPath0 = new JSONPath("I#@TEr2CL(", serializeConfig0, parserConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("I#@TEr2CL(", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.deny.internal");
      assertEquals("fastjson.parser.deny.internal", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) sQLClientInfoException0;
      objectArray0[2] = (Object) jSONPath0;
      // Undeclared exception!
      try { 
        jSONPath1.arrayAdd((Object) serializeConfig0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path fastjson.parser.deny.internal
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("/stackTrace/10", "/stackTrace/10", true);
      assertNotNull(jSONPath_ValueSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/10");
      assertEquals("/stackTrace/10", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, sQLClientInfoException0, sQLClientInfoException0, "/stackTrace/10");
      assertEquals("/stackTrace/10", jSONPath0.getPath());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertFalse(boolean0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_ValueSegment0, jSONPath_ValueSegment0, true);
      assertNotNull(jSONPath_FilterGroup0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath jSONPath1 = new JSONPath("I#@TEr2CL(", serializeConfig0, parserConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("I#@TEr2CL(", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath jSONPath2 = JSONPath.compile("fastjson.parser.deny.internal");
      assertEquals("fastjson.parser.deny.internal", jSONPath2.getPath());
      assertFalse(jSONPath2.equals((Object)jSONPath1));
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertNotNull(jSONPath2);
      assertNotSame(jSONPath2, jSONPath1);
      assertNotSame(jSONPath2, jSONPath0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) sQLClientInfoException0;
      objectArray0[1] = (Object) jSONPath0;
      objectArray0[2] = (Object) jSONPath1;
      // Undeclared exception!
      try { 
        jSONPath2.arrayAdd((Object) serializeConfig0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path fastjson.parser.deny.internal
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = "*";
      JSONPath jSONPath0 = new JSONPath("*");
      assertEquals("*", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("*", "*", 122);
      assertEquals("*", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(122, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: *", sQLFeatureNotSupportedException0.toString());
      assertEquals("*", sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      boolean boolean0 = jSONPath0.contains((Object) sQLFeatureNotSupportedException0);
      assertEquals("*", jSONPath0.getPath());
      assertEquals("*", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(122, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: *", sQLFeatureNotSupportedException0.toString());
      assertEquals("*", sQLFeatureNotSupportedException0.getSQLState());
      assertTrue(boolean0);
      
      JSONPath jSONPath1 = new JSONPath("*");
      assertEquals("*", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("NOT_RLIKE");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Integer integer0 = new Integer(7);
      assertEquals(7, (int)integer0);
      assertNotNull(integer0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2379, 7, 7);
      assertNotNull(mockGregorianCalendar0);
      
      boolean boolean0 = JSONPath.remove((Object) mockGregorianCalendar0, "eX0ln");
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2379,MONTH=7,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=7,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = JSONPath.compile("[");
      assertEquals("[", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Object object0 = jSONPath0.eval((Object) long0);
      assertEquals("[", jSONPath0.getPath());
      assertEquals((-3851359326990528739L), object0);
      assertNotNull(object0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("[", object0, false);
      assertEquals("[", jSONPath0.getPath());
      assertNotNull(jSONPath_ValueSegment0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("eX0ln");
      assertNotNull(jSONPath_NotNullSegement0);
      
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('o', char0);
      
      Short short0 = new Short((short)10);
      assertEquals((short)10, (short)short0);
      assertNotNull(short0);
      
      boolean boolean1 = JSONPath.contains((Object) short0, "[");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" I");
      assertEquals(" I", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(13, 13, 13);
      assertNotNull(jSONPath_RangeSegment0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = " I";
      stringArray0[1] = "/stackTrace/3";
      stringArray0[2] = " I";
      stringArray0[3] = " I";
      Short short0 = new Short((short)76);
      assertEquals((short)76, (short)short0);
      assertNotNull(short0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      boolean boolean0 = JSONPath.contains((Object) sQLTimeoutException0, "/stackTrace/3");
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = "D";
      JSONPath jSONPath0 = new JSONPath("D");
      assertEquals("D", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String string1 = jSONPath0.getPath();
      assertEquals("D", jSONPath0.getPath());
      assertEquals("D", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = jSONPath0.isRef();
      assertEquals("D", jSONPath0.getPath());
      assertTrue(boolean0);
      
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("(I)Ljava/lang/Integer;");
      assertEquals("(I)Ljava/lang/Integer;", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "(I)Ljava/lang/Integer;";
      objectArray0[1] = (Object) "(I)Ljava/lang/Integer;";
      objectArray0[2] = (Object) "(I)Ljava/lang/Integer;";
      objectArray0[3] = (Object) "(I)Ljava/lang/Integer;";
      objectArray0[4] = (Object) jSONPath0;
      objectArray0[5] = (Object) jSONPath0;
      objectArray0[6] = (Object) "(I)Ljava/lang/Integer;";
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "(I)Ljava/lang/Integer;", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. (I)Ljava/lang/Integer;
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/5");
      assertEquals("/stackTrace/5", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Object[] objectArray0 = new Object[0];
      JSONPath.arrayAdd((Object) jSONPath0, "/stackTrace/5", objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals("/stackTrace/5", jSONPath0.getPath());
      
      String string0 = jSONPath0.getPath();
      assertEquals("/stackTrace/5", jSONPath0.getPath());
      assertEquals("/stackTrace/5", string0);
      assertNotNull(string0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/stackTrace/5", ")");
      assertEquals("/stackTrace/5", sQLTransientConnectionException0.getMessage());
      assertEquals(")", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: /stackTrace/5", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      boolean boolean0 = JSONPath.set((Object) sQLTransientConnectionException0, "/stackTrace/5", (Object) null);
      assertEquals("/stackTrace/5", sQLTransientConnectionException0.getMessage());
      assertEquals(")", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: /stackTrace/5", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertTrue(boolean0);
      
      Long long0 = new Long((-2475L));
      assertEquals((-2475L), (long)long0);
      assertNotNull(long0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-878), (-878), 18, (-675), (-675), 39);
      assertNotNull(mockGregorianCalendar0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("between", "JbC", 38);
      assertEquals("java.sql.SQLTimeoutException: between", sQLTimeoutException0.toString());
      assertEquals("JbC", sQLTimeoutException0.getSQLState());
      assertEquals(38, sQLTimeoutException0.getErrorCode());
      assertEquals("between", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) sQLTimeoutException0, "N`ie`UPE$q6}:z$qO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : N`ie`UPE$q6}:z$qO
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Wxvk");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONPath jSONPath0 = new JSONPath("l]c|U0]gX2Jo8*_g");
      assertEquals("l]c|U0]gX2Jo8*_g", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      boolean boolean2 = JSONPath.set((Object) null, "eX0", (Object) sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "l]c|U0]gX2Jo8*_g";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("autoTypeSupport", stringArray0, false);
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONPath_StringInSegement0);
      
      JSONPath jSONPath1 = JSONPath.compile(".null");
      assertEquals(".null", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(18, 0, 176);
      assertNotNull(mockGregorianCalendar0);
      
      SQLDataException sQLDataException0 = new SQLDataException("NOT_BETWEEN", ".MhhOn#g", 61, sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(61, sQLDataException0.getErrorCode());
      assertEquals("NOT_BETWEEN", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: NOT_BETWEEN", sQLDataException0.toString());
      assertEquals(".MhhOn#g", sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      SQLException sQLException0 = new SQLException("l]c|U0]gX2Jo8*_g", sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLException: l]c|U0]gX2Jo8*_g", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("l]c|U0]gX2Jo8*_g", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertNotNull(sQLException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "eX0");
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("eX0", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      boolean boolean3 = jSONPath_StringInSegement0.apply(jSONPath0, "-", sQLException0, sQLSyntaxErrorException0);
      assertEquals(1, stringArray0.length);
      assertEquals("l]c|U0]gX2Jo8*_g", jSONPath0.getPath());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLException: l]c|U0]gX2Jo8*_g", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("l]c|U0]gX2Jo8*_g", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("eX0", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertFalse(boolean3);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertNotSame(jSONPath0, jSONPath1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 18;
      intArray0[1] = 61;
      intArray0[2] = 61;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {18, 61, 61}, intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath1, ".null", (Object) null);
      assertEquals(3, intArray0.length);
      assertEquals(3, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(".null", jSONPath1.getPath());
      assertArrayEquals(new int[] {18, 61, 61}, intArray0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNotSame(jSONPath1, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("ZHtMa#TW'V", "java.util.concurrent.atomic.DoubleAdder", 0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ZHtMa#TW'V", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.util.concurrent.atomic.DoubleAdder", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("ZHtMa#TW'V", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("java.util.concurrent.atomic.DoubleAdder", sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ZHtMa#TW'V", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.util.concurrent.atomic.DoubleAdder", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("ZHtMa#TW'V", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.util.concurrent.atomic.DoubleAdder", sQLInvalidAuthorizationSpecException1.toString());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("java.util.concurrent.atomic.DoubleAdder", sQLInvalidAuthorizationSpecException1.getMessage());
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "java.util.concurrent.atomic.DoubleAdder";
      JSONPath jSONPath0 = JSONPath.compile(">");
      assertEquals(">", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("R~IB+", (String) null, 0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: R~IB+", batchUpdateException0.toString());
      assertEquals("R~IB+", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(batchUpdateException0);
      
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("get", "", true);
      assertNotNull(jSONPath_RlikeSegement0);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      assertEquals(PropertyNamingStrategy.NoChange, propertyNamingStrategy0);
      
      String string0 = propertyNamingStrategy0.translate("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, "", propertyNamingStrategy0);
      assertEquals(1, intArray0.length);
      assertEquals(">", jSONPath0.getPath());
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("z_");
      assertNotNull(jSONPath_NullSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 18L;
      longArray0[1] = 18L;
      longArray0[2] = 18L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("/Jf", longArray0, false);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {18L, 18L, 18L}, longArray0);
      assertNotNull(jSONPath_IntInSegement0);
      
      JSONPath jSONPath0 = new JSONPath("/stackTrace/11");
      assertEquals("/stackTrace/11", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath jSONPath1 = JSONPath.compile("z_");
      assertEquals("z_", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment1 = new JSONPath.FilterSegment(jSONPath_IntInSegement0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {18L, 18L, 18L}, longArray0);
      assertFalse(jSONPath_FilterSegment1.equals((Object)jSONPath_FilterSegment0));
      assertNotNull(jSONPath_FilterSegment1);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLTimeoutException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLTimeoutException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath1, jSONPath_FilterSegment1, jSONPath_FilterSegment0, sQLClientInfoException0);
      assertEquals(3, longArray0.length);
      assertEquals("z_", jSONPath1.getPath());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLTimeoutException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLClientInfoException0.getMessage());
      assertFalse(boolean0);
      assertArrayEquals(new long[] {18L, 18L, 18L}, longArray0);
      assertFalse(jSONPath_FilterSegment0.equals((Object)jSONPath_FilterSegment1));
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(jSONPath_FilterSegment1.equals((Object)jSONPath_FilterSegment0));
      assertNotSame(jSONPath_FilterSegment0, jSONPath_FilterSegment1);
      assertNotSame(jSONPath1, jSONPath0);
      assertNotSame(jSONPath_FilterSegment1, jSONPath_FilterSegment0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      long[] longArray0 = new long[0];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("|0BJ(", longArray0, true);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(jSONPath_IntInSegement0);
      
      JSONPath jSONPath0 = new JSONPath("|0BJ(");
      assertEquals("|0BJ(", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. java.sql.SQLClientInfoException
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-149L);
      longArray0[1] = 2380202963256720577L;
      longArray0[2] = 7048426940343117278L;
      longArray0[3] = 837L;
      longArray0[4] = (-3021L);
      longArray0[5] = (-1580386065683472715L);
      longArray0[6] = (-855L);
      longArray0[7] = 702L;
      longArray0[8] = (-1014497654951707614L);
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("&", longArray0, false);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-149L), 2380202963256720577L, 7048426940343117278L, 837L, (-3021L), (-1580386065683472715L), (-855L), 702L, (-1014497654951707614L)}, longArray0);
      assertNotNull(jSONPath_IntInSegement0);
      
      JSONPath jSONPath0 = new JSONPath("&");
      assertEquals("&", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, "&", jSONPath0, "&");
      assertEquals(9, longArray0.length);
      assertEquals("&", jSONPath0.getPath());
      assertFalse(boolean0);
      assertArrayEquals(new long[] {(-149L), 2380202963256720577L, 7048426940343117278L, 837L, (-3021L), (-1580386065683472715L), (-855L), 702L, (-1014497654951707614L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Long long0 = new Long(33238344207745342L);
      assertEquals(33238344207745342L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = JSONPath.eqNotNull(long0, long0);
      assertTrue(boolean0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      JSONPath jSONPath0 = new JSONPath("writeFieldNameDirect", serializeConfig0, parserConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("writeFieldNameDirect", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      Integer integer0 = new Integer(14);
      assertEquals(14, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = jSONPath0.containsValue((Object) long0, (Object) integer0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("writeFieldNameDirect", jSONPath0.getPath());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("writeFieldNameDirect", jSONPath0.getPath());
      assertNotNull(javaBeanSerializer0);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 14;
      intArray0[1] = 33;
      intArray0[2] = 33;
      intArray0[3] = 33;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("writeFieldNameDirect", "+GM_c)zeE=o(M}Z?M@", 33, intArray0, (Throwable) null);
      assertEquals(4, intArray0.length);
      assertEquals("+GM_c)zeE=o(M}Z?M@", batchUpdateException0.getSQLState());
      assertEquals(33, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: writeFieldNameDirect", batchUpdateException0.toString());
      assertEquals("writeFieldNameDirect", batchUpdateException0.getMessage());
      assertArrayEquals(new int[] {14, 33, 33, 33}, intArray0);
      assertNotNull(batchUpdateException0);
      
      DataTruncation dataTruncation0 = new DataTruncation(14, false, false, 33, 33, batchUpdateException0);
      assertEquals(4, intArray0.length);
      assertEquals("+GM_c)zeE=o(M}Z?M@", batchUpdateException0.getSQLState());
      assertEquals(33, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: writeFieldNameDirect", batchUpdateException0.toString());
      assertEquals("writeFieldNameDirect", batchUpdateException0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertArrayEquals(new int[] {14, 33, 33, 33}, intArray0);
      assertNotNull(dataTruncation0);
      
      SQLWarning sQLWarning0 = dataTruncation0.getNextWarning();
      assertEquals(4, intArray0.length);
      assertEquals("+GM_c)zeE=o(M}Z?M@", batchUpdateException0.getSQLState());
      assertEquals(33, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: writeFieldNameDirect", batchUpdateException0.toString());
      assertEquals("writeFieldNameDirect", batchUpdateException0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertArrayEquals(new int[] {14, 33, 33, 33}, intArray0);
      assertNull(sQLWarning0);
      
      int int0 = jSONPath0.evalSize((Object) null);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("writeFieldNameDirect", jSONPath0.getPath());
      assertEquals((-1), int0);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("OWb{6LL}%xp0K*<9V<", (-495799323323797221L), 8121814285880789523L, true);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      JSONPath jSONPath1 = JSONPath.compile("OWb{6LL}%xp0K*<9V<");
      assertEquals("OWb{6LL}%xp0K*<9V<", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      jSONPath0.arrayAdd((Object) sQLClientInfoException0, (Object[]) null);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertNotSame(jSONPath0, jSONPath1);
      
      Class<Double> class0 = Double.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = "java/lang/Byte";
      ASMDeserializerFactory aSMDeserializerFactory0 = null;
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      JSONPath jSONPath0 = new JSONPath("java/lang/Byte", (SerializeConfig) null, parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("java/lang/Byte", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      int int0 = JSONPath.size((Object) null, "java/lang/Byte");
      assertEquals((-1), int0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object object0 = JSONPath.reserveToObject("java/lang/Byte", (String[]) null);
      assertEquals("java/lang/Byte", object0);
      assertTrue(object0.equals((Object)string0));
      assertNotNull(object0);
      
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      boolean boolean1 = JSONPath.isDouble(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = null;
      try {
        jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MultiPropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      assertEquals(PropertyNamingStrategy.NoChange, propertyNamingStrategy0);
      
      String[] stringArray0 = new String[0];
      String string0 = " I";
      JSONPath jSONPath0 = new JSONPath(" I");
      assertEquals(" I", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(" I");
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(" I", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException:  I", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(" I", (String) null, sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(" I", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException:  I", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(" I", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException:  I", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      boolean boolean0 = jSONPath0.containsValue((Object) " I", (Object) sQLTimeoutException0);
      assertEquals(" I", jSONPath0.getPath());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(" I", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException:  I", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(" I", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException:  I", sQLTimeoutException0.toString());
      assertFalse(boolean0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(122, 1516, (-816), 26, 3392903, 1527);
      assertNotNull(mockGregorianCalendar0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      Byte byte0 = new Byte((byte) (-128));
      assertEquals((byte) (-128), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = JSONPath.reserveToObject("com", stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("com", object0);
      assertFalse(object0.equals((Object)string0));
      assertNotNull(object0);
      
      String string1 = jSONPath0.getPath();
      assertEquals(" I", jSONPath0.getPath());
      assertEquals(" I", string1);
      assertFalse(string1.equals((Object)object0));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      assertNotNull(jSONPath_MultiIndexSegment0);
      
      UUID uUID0 = MockUUID.randomUUID();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertNotNull(uUID0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(" I", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException:  I", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLTransientConnectionException:  I", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException:  I", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      // Undeclared exception!
      try { 
        jSONPath_MultiIndexSegment0.eval(jSONPath0, uUID0, sQLRecoverableException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MultiIndexSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = "l]c|U0]gX2Jo8*_g";
      String string1 = "Wxvk";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Wxvk");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONPath jSONPath0 = new JSONPath("l]c|U0]gX2Jo8*_g");
      assertEquals("l]c|U0]gX2Jo8*_g", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      boolean boolean2 = JSONPath.set((Object) null, "l]c|U0]gX2Jo8*_g", (Object) jSONPath0);
      assertEquals("l]c|U0]gX2Jo8*_g", jSONPath0.getPath());
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(jSONPath_WildCardSegment0, "Wxvk", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath jSONPath0 = new JSONPath("|0BJ(", serializeConfig0, parserConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("|0BJ(", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertFalse(stack0.contains("|0BJ("));
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      jSONPath0.deepGetPropertyValues(parserConfig0, stack0);
      assertTrue(stack0.contains(true));
      assertFalse(stack0.contains("|0BJ("));
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("|0BJ(", jSONPath0.getPath());
      assertEquals(7, stack0.size());
      assertEquals("[true, false, false, true, false, null, false]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. |0BJ(
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.set(2442, 2442, 473);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2442,MONTH=2442,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=473,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertFalse(set0.isEmpty());
      assertEquals(3, set0.size());
      assertNotNull(set0);
      
      Date date0 = mockGregorianCalendar0.getTime();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2442,MONTH=2442,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=473,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      mockGregorianCalendar0.set((-586), (-586), 425, 113, 425, 0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=-586,MONTH=-586,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=425,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=113,MINUTE=425,SECOND=0,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      int int0 = mockGregorianCalendar0.getMaximum(0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=-586,MONTH=-586,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=425,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=113,MINUTE=425,SECOND=0,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, int0);
      
      int int1 = mockGregorianCalendar0.get(0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-82164239699680,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=635,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=4,DAY_OF_YEAR=124,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=5,SECOND=0,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-82164239699680,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=635,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=4,DAY_OF_YEAR=124,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=5,SECOND=0,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotNull(map0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("");
      assertNotNull(jSONPath_NotNullSegement0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      JSONPath jSONPath0 = new JSONPath("!z<;vsu:B(f3)gdVDGq");
      assertEquals("!z<;vsu:B(f3)gdVDGq", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("geIName");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.next();
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("zLNl)9cK");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      String string0 = jSONPath_JSONPathParser1.readName();
      assertEquals("zLNl", string0);
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(string0);
      assertNotSame(jSONPath_JSONPathParser1, jSONPath_JSONPathParser0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("Value", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      jSONPath_PropertySegment0.setValue(jSONPath0, "zLNl", date0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-82164239699680,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=635,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=4,DAY_OF_YEAR=124,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=5,SECOND=0,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("!z<;vsu:B(f3)gdVDGq", jSONPath0.getPath());
      
      boolean boolean0 = JSONPath.remove((Object) jSONPath_PropertySegment0, "/stackTrace/5");
      assertFalse(boolean0);
      
      boolean boolean1 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(jSONPath_JSONPathParser0.equals((Object)jSONPath_JSONPathParser1));
      assertNotSame(jSONPath_JSONPathParser0, jSONPath_JSONPathParser1);
      
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. !z<;vsu:B(f3)gdVDGq
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(90);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1228), (-1228), 90, (-1228), (-1228));
      assertNotNull(mockGregorianCalendar0);
      
      JSONPath jSONPath0 = new JSONPath("{\"b\":null,\"z\":true,\"x\":\"hello\",\"a\":[],\"toCharArray\":7}");
      assertEquals("{\"b\":null,\"z\":true,\"x\":\"hello\",\"a\":[],\"toCharArray\":7}", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String string0 = jSONPath0.getPath();
      assertEquals("{\"b\":null,\"z\":true,\"x\":\"hello\",\"a\":[],\"toCharArray\":7}", jSONPath0.getPath());
      assertEquals("{\"b\":null,\"z\":true,\"x\":\"hello\",\"a\":[],\"toCharArray\":7}", string0);
      assertNotNull(string0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath jSONPath1 = JSONPath.compile("writeBefore");
      assertEquals("writeBefore", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath1, "=k|g\":UIB,p^", jSONPath_ArrayAccessSegment0);
      assertEquals("writeBefore", jSONPath1.getPath());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(arrayList0);
      assertNotSame(jSONPath1, jSONPath0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("=k|g\":UIB,p^");
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: =k|g\":UIB,p^", sQLNonTransientException0.toString());
      assertEquals("=k|g\":UIB,p^", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNotNull(sQLNonTransientException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("=k|g\":UIB,p^", "{\"b\":null,\"z\":true,\"x\":\"hello\",\"a\":[],\"toCharArray\":7}", sQLNonTransientException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: =k|g\":UIB,p^", sQLNonTransientException0.toString());
      assertEquals("=k|g\":UIB,p^", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("{\"b\":null,\"z\":true,\"x\":\"hello\",\"a\":[],\"toCharArray\":7}", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: =k|g\":UIB,p^", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("=k|g\":UIB,p^", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("=k|g\":UIB,p^", sQLNonTransientException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: =k|g\":UIB,p^", sQLNonTransientException0.toString());
      assertEquals("=k|g\":UIB,p^", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: =k|g\":UIB,p^", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("=k|g\":UIB,p^", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "e");
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("e", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("writeBefore", (Throwable) null);
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: writeBefore", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals("writeBefore", sQLInvalidAuthorizationSpecException1.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("JAw5$gAi1Zb4J|Wr", "IoN'K'/mIEd}/]", sQLRecoverableException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: =k|g\":UIB,p^", sQLNonTransientException0.toString());
      assertEquals("=k|g\":UIB,p^", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: =k|g\":UIB,p^", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("=k|g\":UIB,p^", sQLRecoverableException0.getMessage());
      assertEquals("JAw5$gAi1Zb4J|Wr", sQLRecoverableException1.getMessage());
      assertEquals("java.sql.SQLRecoverableException: JAw5$gAi1Zb4J|Wr", sQLRecoverableException1.toString());
      assertEquals("IoN'K'/mIEd}/]", sQLRecoverableException1.getSQLState());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertNotNull(sQLRecoverableException1);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment1 = JSONPath.WildCardSegment.instance_deep;
      assertFalse(jSONPath_WildCardSegment1.equals((Object)jSONPath_WildCardSegment0));
      assertNotNull(jSONPath_WildCardSegment1);
      assertNotSame(jSONPath_WildCardSegment1, jSONPath_WildCardSegment0);
      
      boolean boolean0 = JSONPath.eq(jSONPath_WildCardSegment1, (Object) null);
      assertFalse(boolean0);
      assertFalse(jSONPath_WildCardSegment1.equals((Object)jSONPath_WildCardSegment0));
      assertNotSame(jSONPath_WildCardSegment1, jSONPath_WildCardSegment0);
      
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("writeBefore", 3547627781654598988L, (-1580386065683472715L), true);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      boolean boolean1 = jSONPath_IntBetweenSegement0.apply(jSONPath0, jSONPath0, "JAw5$gAi1Zb4J|Wr", jSONPath_Operator0);
      assertEquals("{\"b\":null,\"z\":true,\"x\":\"hello\",\"a\":[],\"toCharArray\":7}", jSONPath0.getPath());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertNotSame(jSONPath0, jSONPath1);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" I");
      assertEquals(" I", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      boolean boolean0 = jSONPath0.containsValue((Object) null, (Object) "ro's#cV");
      assertEquals(" I", jSONPath0.getPath());
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1527, 35, 2207, 1527, 1516, 75);
      assertNotNull(mockGregorianCalendar0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("zi", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      Byte byte0 = new Byte((byte) (-128));
      assertEquals((byte) (-128), (byte)byte0);
      assertNotNull(byte0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "com.alibaba.fastjson.asm.TypeCollector$1";
      stringArray0[1] = " I";
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = 'r';
      charArray0[2] = '5';
      charArray0[3] = 'Z';
      charArray0[4] = 'S';
      charArray0[5] = '}';
      charArray0[6] = 'W';
      charArray0[7] = 'V';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 35, (byte) (-128));
      assertEquals(8, charArray0.length);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('&', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-128), jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'&', 'r', '5', 'Z', 'S', '}', 'W', 'V'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('$');
      assertEquals(8, charArray0.length);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('&', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-128), jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'&', 'r', '5', 'Z', 'S', '}', 'W', 'V'}, charArray0);
      assertNull(uUID0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, mockGregorianCalendar0, (Object) null);
      assertEquals(" I", jSONPath0.getPath());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1527,MONTH=35,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2207,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1527,HOUR_OF_DAY=1527,MINUTE=1516,SECOND=75,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNull(object0);
      
      stringArray0[2] = "ro's#cV";
      stringArray0[3] = "ro's#cV";
      stringArray0[4] = "com.alibaba.fastjson.asm.TypeCollector$1";
      stringArray0[5] = "rlike";
      stringArray0[6] = "com.alibaba.fastjson.asm.TypeCollector$1";
      stringArray0[7] = "com.alibaba.fastjson.asm.TypeCollector$1";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(jSONPath_PropertySegment0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : ro's#cV
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" I");
      assertEquals(" I", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(13, 13, 13);
      assertNotNull(jSONPath_RangeSegment0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      Long long0 = new Long(37L);
      assertEquals(37L, (long)long0);
      assertNotNull(long0);
      
      Object object0 = JSONPath.eval((Object) "/stackTrace/3", " I");
      assertNull(object0);
      
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("stackTrace", 37L, 13, true);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_Operator0, "/stackTrace/3");
      assertEquals(" I", jSONPath0.getPath());
      assertFalse(boolean0);
      
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement(";s?%", "/stackTrace/3", true);
      assertNotNull(jSONPath_RlikeSegement0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("stackTrace", " I", sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: stackTrace", sQLTransactionRollbackException0.toString());
      assertEquals(" I", sQLTransactionRollbackException0.getSQLState());
      assertEquals("stackTrace", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      Locale locale0 = Locale.US;
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("zevx", "Wxvk", 33, sQLTransactionRollbackException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: stackTrace", sQLTransactionRollbackException0.toString());
      assertEquals(" I", sQLTransactionRollbackException0.getSQLState());
      assertEquals("stackTrace", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("zevx", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(33, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("Wxvk", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: zevx", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      boolean boolean1 = jSONPath_RlikeSegement0.apply(jSONPath0, sQLTransactionRollbackException0, mockGregorianCalendar0, sQLIntegrityConstraintViolationException0);
      assertEquals(" I", jSONPath0.getPath());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: stackTrace", sQLTransactionRollbackException0.toString());
      assertEquals(" I", sQLTransactionRollbackException0.getSQLState());
      assertEquals("stackTrace", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("zevx", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(33, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("Wxvk", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: zevx", sQLIntegrityConstraintViolationException0.toString());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Byte";
      int int0 = JSONPath.compare("Byte", "Byte");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      Integer integer0 = new Integer(5);
      assertEquals(5, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("kotlin.ranges.CharRange");
      assertEquals("kotlin.ranges.CharRange", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("kotlin.ranges.CharRange", parserConfig0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      assertEquals("*", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("fastjson.parser.deny", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2830;
      intArray0[1] = 2830;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("/cause/cause/stackTrace/11", "/stackTrace/2", 2830, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals("/cause/cause/stackTrace/11", batchUpdateException0.getMessage());
      assertEquals(2830, batchUpdateException0.getErrorCode());
      assertEquals("/stackTrace/2", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: /cause/cause/stackTrace/11", batchUpdateException0.toString());
      assertArrayEquals(new int[] {2830, 2830}, intArray0);
      assertNotNull(batchUpdateException0);
      
      SQLException sQLException0 = batchUpdateException0.getNextException();
      assertEquals(2, intArray0.length);
      assertEquals("/cause/cause/stackTrace/11", batchUpdateException0.getMessage());
      assertEquals(2830, batchUpdateException0.getErrorCode());
      assertEquals("/stackTrace/2", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: /cause/cause/stackTrace/11", batchUpdateException0.toString());
      assertArrayEquals(new int[] {2830, 2830}, intArray0);
      assertNull(sQLException0);
      
      int int0 = jSONPath1.evalSize((Object) null);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("fastjson.parser.deny", jSONPath1.getPath());
      assertEquals((-1), int0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertNotSame(jSONPath1, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = "java/lang/Byte";
      ASMDeserializerFactory aSMDeserializerFactory0 = null;
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath jSONPath0 = new JSONPath("java/lang/Byte", (SerializeConfig) null, parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("java/lang/Byte", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      
      int int0 = JSONPath.size((Object) null, "java/lang/Byte");
      assertEquals((-1), int0);
      
      String string1 = "com.alibaba.fastjson.JSONPath$JSONPathParser";
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.JSONPath$JSONPathParser", parserConfig0, (-350));
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = "[]";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[]");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readSegement();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[{\"I\":null}]");
      assertNotNull(jSONPath_JSONPathParser0);
      
      SQLException sQLException0 = new SQLException("[{\"I\":null}]", "[{\"I\":null}]", (Throwable) null);
      assertEquals("[{\"I\":null}]", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: [{\"I\":null}]", sQLException0.toString());
      assertEquals("[{\"I\":null}]", sQLException0.getMessage());
      assertNotNull(sQLException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[{\"I\":null}]", "[{\"I\":null}]", sQLException0);
      assertEquals("[{\"I\":null}]", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: [{\"I\":null}]", sQLException0.toString());
      assertEquals("[{\"I\":null}]", sQLException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: [{\"I\":null}]", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("[{\"I\":null}]", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("[{\"I\":null}]", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      Short short0 = new Short((short)3495);
      assertEquals((short)3495, (short)short0);
      assertNotNull(short0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      Class<SQLException> class0 = SQLException.class;
      JSONPath jSONPath0 = JSONPath.compile("[{\"I\":null}]");
      assertEquals("[{\"I\":null}]", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertEquals("[{\"I\":null}]", jSONPath0.getPath());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      assertNotNull(javaBeanDeserializer0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("[{\"I\":null}]", "[{\"I\":null}]", (Throwable) null);
      assertEquals("[{\"I\":null}]", sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("[{\"I\":null}]", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: [{\"I\":null}]", sQLInvalidAuthorizationSpecException1.toString());
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) sQLException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"I\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.set(2442, 2442, 473);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2442,MONTH=2442,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=473,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertEquals(3, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      Date date0 = mockGregorianCalendar0.getTime();
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2442,MONTH=2442,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=473,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      mockGregorianCalendar0.set((-586), (-586), 2442, 113, 2442, 0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=-586,MONTH=-586,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=2442,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=113,MINUTE=2442,SECOND=0,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      int int0 = mockGregorianCalendar0.getMaximum(0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=-586,MONTH=-586,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=2442,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=113,MINUTE=2442,SECOND=0,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, int0);
      
      int int1 = mockGregorianCalendar0.get(0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-81989849879680,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=630,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=12,DAY_OF_YEAR=316,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=0,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-81989849879680,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=630,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=12,DAY_OF_YEAR=316,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=0,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("");
      assertNotNull(jSONPath_NotNullSegement0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("/stackTrace/12", jSONPath_WildCardSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("between", (String) null, "Hbkrl!`9", stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      Long long0 = new Long(108L);
      assertEquals(108L, (long)long0);
      assertNotNull(long0);
      
      Integer integer0 = new Integer(5);
      assertEquals(5, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = JSONPath.compile("kotlin.ranges.CharRange");
      assertEquals("kotlin.ranges.CharRange", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      boolean boolean1 = jSONPath0.contains((Object) propertyNamingStrategy0);
      assertEquals("kotlin.ranges.CharRange", jSONPath0.getPath());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.autoTypeAccept", (String) null, "fastjson.parser.deny", (String[]) null, false);
      assertNotNull(jSONPath_MatchSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-3166));
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("com.alibaba.fastjson.JSONPath$NotNullSegement", jSONPath_ArrayAccessSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$NotNullSegement");
      assertEquals("com.alibaba.fastjson.JSONPath$NotNullSegement", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath jSONPath1 = JSONPath.compile("5MS");
      assertEquals("5MS", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.alibaba.fastjson.JSONPath$NotNullSegement", "LE;SpF&ey");
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONPath$NotNullSegement", sQLSyntaxErrorException0.getMessage());
      assertEquals("LE;SpF&ey", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: com.alibaba.fastjson.JSONPath$NotNullSegement", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("a", hashMap0, sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONPath$NotNullSegement", sQLSyntaxErrorException0.getMessage());
      assertEquals("LE;SpF&ey", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: com.alibaba.fastjson.JSONPath$NotNullSegement", sQLSyntaxErrorException0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: a", sQLClientInfoException0.toString());
      assertEquals("a", sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONPath$NotNullSegement", sQLSyntaxErrorException0.getMessage());
      assertEquals("LE;SpF&ey", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: com.alibaba.fastjson.JSONPath$NotNullSegement", sQLSyntaxErrorException0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: a", sQLClientInfoException0.toString());
      assertEquals("a", sQLClientInfoException0.getMessage());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("LE;SpF&ey", "/stackTrace/1", (-3166), map0, sQLClientInfoException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.JSONPath$NotNullSegement", sQLSyntaxErrorException0.getMessage());
      assertEquals("LE;SpF&ey", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: com.alibaba.fastjson.JSONPath$NotNullSegement", sQLSyntaxErrorException0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: a", sQLClientInfoException0.toString());
      assertEquals("a", sQLClientInfoException0.getMessage());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals((-3166), sQLClientInfoException1.getErrorCode());
      assertEquals("LE;SpF&ey", sQLClientInfoException1.getMessage());
      assertEquals("java.sql.SQLClientInfoException: LE;SpF&ey", sQLClientInfoException1.toString());
      assertEquals("/stackTrace/1", sQLClientInfoException1.getSQLState());
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException1);
      
      JSONPath jSONPath2 = JSONPath.compile("5MS");
      assertEquals("5MS", jSONPath2.getPath());
      assertFalse(jSONPath2.equals((Object)jSONPath0));
      assertNotNull(jSONPath2);
      assertSame(jSONPath2, jSONPath1);
      assertNotSame(jSONPath2, jSONPath0);
      
      Double double0 = new Double((-1714.214234891));
      assertEquals((-1714.214234891), (double)double0, 0.01);
      assertNotNull(double0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("LE;SpF&ey", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_RefOpSegement0, jSONPath_RefOpSegement0, true);
      assertNotNull(jSONPath_FilterGroup0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("LE;SpF&ey", "LE;SpF&ey", (-3166), hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("LE;SpF&ey", sQLClientInfoException2.getMessage());
      assertEquals("java.sql.SQLClientInfoException: LE;SpF&ey", sQLClientInfoException2.toString());
      assertEquals("LE;SpF&ey", sQLClientInfoException2.getSQLState());
      assertEquals((-3166), sQLClientInfoException2.getErrorCode());
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException2);
      
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, (Object) null, sQLTransientConnectionException0, sQLClientInfoException2);
      assertEquals("com.alibaba.fastjson.JSONPath$NotNullSegement", jSONPath0.getPath());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("LE;SpF&ey", sQLClientInfoException2.getMessage());
      assertEquals("java.sql.SQLClientInfoException: LE;SpF&ey", sQLClientInfoException2.toString());
      assertEquals("LE;SpF&ey", sQLClientInfoException2.getSQLState());
      assertEquals((-3166), sQLClientInfoException2.getErrorCode());
      assertFalse(boolean0);
      assertFalse(jSONPath0.equals((Object)jSONPath2));
      assertFalse(jSONPath0.equals((Object)jSONPath1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertNotSame(jSONPath0, jSONPath2);
      assertNotSame(jSONPath0, jSONPath1);
      assertNotSame(sQLClientInfoException2, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException2, sQLClientInfoException0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("a");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-3851359326990528739L));
      assertEquals((-3851359326990528739L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-1511L));
      assertEquals((-1511L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((long) longArray0[0]);
      assertEquals(9, longArray0.length);
      assertEquals((-3851359326990528739L), (long)long2);
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((-3412L));
      assertEquals((-3412L), (long)long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      
      longArray0[3] = long3;
      Long long4 = new Long(204L);
      assertEquals(204L, (long)long4);
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertNotNull(long4);
      
      longArray0[4] = long4;
      SerializeConfig serializeConfig0 = new SerializeConfig(183, true);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      SerializeConfig serializeConfig1 = new SerializeConfig();
      assertEquals("@type", serializeConfig1.getTypeKey());
      assertTrue(serializeConfig1.isAsmEnable());
      assertFalse(serializeConfig1.equals((Object)serializeConfig0));
      assertNotNull(serializeConfig1);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig1, parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("@type", serializeConfig1.getTypeKey());
      assertTrue(serializeConfig1.isAsmEnable());
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      assertFalse(serializeConfig1.equals((Object)serializeConfig0));
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.safeMode", "fastjson.parser.deny", "As#)85", (String[]) null, true);
      assertNotNull(jSONPath_MatchSegement0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("feX=Q", (-3412L), jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_DoubleOpSegement0, jSONPath_DoubleOpSegement0, true);
      assertNotNull(jSONPath_FilterGroup0);
      
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.deny.internal");
      assertEquals("fastjson.parser.deny.internal", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("]};V~i_+<WEbJ=", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath1, longArray0[1], serializeConfig0, jSONPath_PropertySegment0);
      assertEquals(9, longArray0.length);
      assertEquals("fastjson.parser.deny.internal", jSONPath1.getPath());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(boolean0);
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertFalse(serializeConfig0.equals((Object)serializeConfig1));
      assertNotSame(jSONPath1, jSONPath0);
      assertNotSame(serializeConfig0, serializeConfig1);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("fastjson.parser.deny");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      assertNotNull(jSONPath_FilterSegment0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" I");
      assertEquals(" I", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = " I";
      stringArray0[2] = " I";
      stringArray0[3] = " I";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("1;~v;H=Gl[i6", "/stackTrace/3", "oP4efKbTeS5", stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      assertNotNull(jSONPath_SizeSegment0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("qEl<");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("Zevx,n{;!bD}(03-");
      assertFalse(jSONPath_JSONPathParser1.equals((Object)jSONPath_JSONPathParser0));
      assertNotNull(jSONPath_JSONPathParser1);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("qEl<");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath jSONPath0 = new JSONPath("qEl<");
      assertEquals("qEl<", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}");
      assertNotNull(jSONPath_JSONPathParser0);
      
      int int0 = 110;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(110, 36, (-283));
      assertNotNull(jSONPath_RangeSegment0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertNotNull(sQLWarning0);
      
      Integer integer0 = new Integer((-283));
      assertEquals((-283), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, sQLWarning0, integer0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(arrayList0);
      
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(parserConfig1.isSafeMode());
      assertFalse(parserConfig1.isJacksonCompatible());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      
      Class<JSONPath.ArrayAccessSegment> class0 = JSONPath.ArrayAccessSegment.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig1, class0);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(parserConfig1.isSafeMode());
      assertFalse(parserConfig1.isJacksonCompatible());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(javaBeanDeserializer0);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      
      boolean boolean0 = jSONPath0.setPropertyValue("7T3G_3ta!C", "7T3G_3ta!C", 110, javaBeanDeserializer0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(parserConfig1.isSafeMode());
      assertFalse(parserConfig1.isJacksonCompatible());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      assertFalse(boolean0);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig1.compatibleWithJavaBean);
      assertNotSame(parserConfig1, parserConfig0);
      
      ArrayList arrayList1 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, class0, arrayList0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(integer0.equals((Object)int0));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(arrayList1);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(arrayList1, arrayList0);
      
      String string1 = "com.alibaba.fastjson.JSONPath$IntOpSegement";
      String string2 = "/stackTrace/10";
      int int1 = 1552;
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = null;
      try {
        stackTraceElement0 = new StackTraceElement((String) null, (String) null, "", 36);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" I");
      assertEquals(" I", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      int int0 = JSONPath.size((Object) jSONPath0, "between");
      assertEquals(" I", jSONPath0.getPath());
      assertEquals((-1), int0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(13, 13, 13);
      assertNotNull(jSONPath_RangeSegment0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = " I";
      stringArray0[1] = "/stackTrace/3";
      stringArray0[2] = " I";
      stringArray0[3] = " I";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject(" I", stringArray0);
      assertEquals(4, stringArray0.length);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertNotNull(jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath0, "&.#A3:Dl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. &.#A3:Dl
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" I");
      assertEquals(" I", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = " I";
      Map<String, Object> map0 = JSONPath.paths((Object) " I");
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotNull(map0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("W~ M&r&p");
      assertNotNull(jSONPath_NotNullSegement0);
      
      JSONPath jSONPath1 = new JSONPath("java/util/ArrayList");
      assertEquals("java/util/ArrayList", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" I");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" I");
      assertEquals(" I", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      boolean boolean0 = jSONPath0.containsValue((Object) null, (Object) "ro's#cV");
      assertEquals(" I", jSONPath0.getPath());
      assertFalse(boolean0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1527, 35, 2207, 1527, 1516, 75);
      assertNotNull(mockGregorianCalendar0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("zi", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      Byte byte0 = new Byte((byte) (-128));
      assertEquals((byte) (-128), (byte)byte0);
      assertNotNull(byte0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "com.alibaba.fastjson.asm.TypeCollector$1";
      stringArray0[1] = " I";
      stringArray0[2] = "ro's#cV";
      stringArray0[3] = "ro's#cV";
      stringArray0[4] = "com.alibaba.fastjson.asm.TypeCollector$1";
      stringArray0[5] = "rlike";
      stringArray0[6] = "com.alibaba.fastjson.asm.TypeCollector$1";
      stringArray0[7] = "com.alibaba.fastjson.asm.TypeCollector$1";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(jSONPath_PropertySegment0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : ro's#cV
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Pattern pattern0 = Pattern.compile("b|eeP");
      assertEquals(0, pattern0.flags());
      assertEquals("b|eeP", pattern0.toString());
      assertEquals("b|eeP", pattern0.pattern());
      assertNotNull(pattern0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      assertNotNull(jSONPath_MultiIndexSegment0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*ytjUCGqB;&");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("b|eeP");
      assertNotNull(jSONPath_Segment0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("*ytjUCGqB;&", propertyNamingStrategy0, false);
      assertNotNull(jSONPath_ValueSegment0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLClientInfoException0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLClientInfoException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      JSONPath jSONPath0 = new JSONPath("can not cast to : ");
      assertEquals("can not cast to : ", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertEquals("can not cast to : ", jSONPath0.getPath());
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("OWb{6LL}%xp0K*<9V<", (-495799323323797221L), 8121814285880789523L, true);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      JSONPath jSONPath0 = new JSONPath("YY[h>v5z Li5{");
      assertEquals("YY[h>v5z Li5{", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Byte byte0 = new Byte((byte) (-89));
      assertEquals((byte) (-89), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, byte0, "YY[h>v5z Li5{", byte0);
      assertEquals("YY[h>v5z Li5{", jSONPath0.getPath());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) byte0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}x");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.skipWhitespace();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("{\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}x");
      assertEquals("{\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}x", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: {\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}x", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      Short short0 = new Short((short)3495);
      assertEquals((short)3495, (short)short0);
      assertNotNull(short0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      boolean boolean0 = JSONPath.eqNotNull(short0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      assertEquals(PropertyNamingStrategy.NoChange, propertyNamingStrategy0);
      
      String[] stringArray0 = new String[0];
      Long long0 = new Long(33238344207745342L);
      assertEquals(33238344207745342L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(33238344207745342L);
      assertEquals(33238344207745342L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(4017, false);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      SerializeConfig serializeConfig1 = new SerializeConfig();
      assertEquals("@type", serializeConfig1.getTypeKey());
      assertTrue(serializeConfig1.isAsmEnable());
      assertFalse(serializeConfig1.equals((Object)serializeConfig0));
      assertNotNull(serializeConfig1);
      
      JSONPath jSONPath0 = new JSONPath("N}:q", serializeConfig0, parserConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("N}:q", jSONPath0.getPath());
      assertFalse(serializeConfig0.equals((Object)serializeConfig1));
      assertNotNull(jSONPath0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      assertNotNull(jSONPath_SizeSegment0);
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(4017);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      boolean boolean0 = JSONPath.eqNotNull(long1, long1);
      assertTrue(boolean0);
      assertTrue(long1.equals((Object)long0));
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : N}:q
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = "Wxvk";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Wxvk");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONPath jSONPath0 = new JSONPath("l]c|U0]gX2Jo8*_g");
      assertEquals("l]c|U0]gX2Jo8*_g", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String string1 = "eX0";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      boolean boolean2 = JSONPath.set((Object) null, "eX0", (Object) sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1499);
      intArray0[1] = (-249);
      intArray0[2] = (-4174);
      intArray0[3] = (-1262);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1499), (-249), (-4174), (-1262)}, intArray0);
      assertNotNull(jSONPath_MultiIndexSegment0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean3 = jSONPath0.removePropertyValue(double0, "l]c|U0]gX2Jo8*_g", false);
      assertEquals("l]c|U0]gX2Jo8*_g", jSONPath0.getPath());
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      JSONPath jSONPath1 = JSONPath.compile("l16'n#8V-#`sJV");
      assertEquals("l16'n#8V-#`sJV", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(jSONPath1);
      assertNotSame(jSONPath1, jSONPath0);
      
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath1.getJavaBeanDeserializer(class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      assertEquals("l16'n#8V-#`sJV", jSONPath1.getPath());
      assertFalse(jSONPath1.equals((Object)jSONPath0));
      assertNotNull(javaBeanDeserializer0);
      assertNotSame(jSONPath1, jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath1.contains((Object) "w|T'o-Fs#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : l16'n#8V-#`sJV
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("OWb{6LL}%xp0K*<9V<", (-495799323323797221L), 8121814285880789523L, true);
      assertNotNull(jSONPath_IntBetweenSegement0);
      
      JSONPath jSONPath0 = new JSONPath("YY[h>v5z Li5{");
      assertEquals("YY[h>v5z Li5{", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("x$XZXm-:RY");
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("x$XZXm-:RY", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: x$XZXm-:RY", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("YY[h>v5z Li5{", sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("x$XZXm-:RY", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: x$XZXm-:RY", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: YY[h>v5z Li5{", sQLTimeoutException0.toString());
      assertEquals("YY[h>v5z Li5{", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      SQLDataException sQLDataException0 = new SQLDataException("OWb{6LL}%xp0K*<9V<", "/cause/stackTrace/8", (-152877814), sQLTimeoutException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("x$XZXm-:RY", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: x$XZXm-:RY", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: YY[h>v5z Li5{", sQLTimeoutException0.toString());
      assertEquals("YY[h>v5z Li5{", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals((-152877814), sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: OWb{6LL}%xp0K*<9V<", sQLDataException0.toString());
      assertEquals("/cause/stackTrace/8", sQLDataException0.getSQLState());
      assertEquals("OWb{6LL}%xp0K*<9V<", sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "x$XZXm-:RY", sQLDataException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("x$XZXm-:RY", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: x$XZXm-:RY", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: YY[h>v5z Li5{", sQLTimeoutException0.toString());
      assertEquals("YY[h>v5z Li5{", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals((-152877814), sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: OWb{6LL}%xp0K*<9V<", sQLDataException0.toString());
      assertEquals("/cause/stackTrace/8", sQLDataException0.getSQLState());
      assertEquals("OWb{6LL}%xp0K*<9V<", sQLDataException0.getMessage());
      assertEquals("x$XZXm-:RY", sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      boolean boolean0 = jSONPath0.removePropertyValue(sQLIntegrityConstraintViolationException0, "/stackTrace/5", true);
      assertEquals("YY[h>v5z Li5{", jSONPath0.getPath());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("x$XZXm-:RY", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: x$XZXm-:RY", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: YY[h>v5z Li5{", sQLTimeoutException0.toString());
      assertEquals("YY[h>v5z Li5{", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals((-152877814), sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: OWb{6LL}%xp0K*<9V<", sQLDataException0.toString());
      assertEquals("/cause/stackTrace/8", sQLDataException0.getSQLState());
      assertEquals("OWb{6LL}%xp0K*<9V<", sQLDataException0.getMessage());
      assertEquals("x$XZXm-:RY", sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertFalse(boolean0);
      
      Byte byte0 = new Byte((byte) (-89));
      assertEquals((byte) (-89), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean1 = jSONPath_IntBetweenSegement0.apply(jSONPath0, byte0, (Object) null, byte0);
      assertEquals("YY[h>v5z Li5{", jSONPath0.getPath());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(":!G o", ":!G o", 34);
      assertEquals(34, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: :!G o", sQLNonTransientConnectionException0.toString());
      assertEquals(":!G o", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(":!G o", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      Set<?> set0 = jSONPath0.evalKeySet(sQLNonTransientConnectionException0);
      assertFalse(set0.contains("OWb{6LL}%xp0K*<9V<"));
      assertEquals("YY[h>v5z Li5{", jSONPath0.getPath());
      assertEquals(34, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: :!G o", sQLNonTransientConnectionException0.toString());
      assertEquals(":!G o", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(":!G o", sQLNonTransientConnectionException0.getMessage());
      assertFalse(set0.isEmpty());
      assertEquals(5, set0.size());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = "autoTypeAccept";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("autoTypeAccept");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = "rlike";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("rlike");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-3166));
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("com.alibaba.fastjson.JSONPath$NotNullSegement", jSONPath_ArrayAccessSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$NotNullSegement");
      assertEquals("com.alibaba.fastjson.JSONPath$NotNullSegement", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.alibaba.fastjson.JSONPath$NotNullSegement", "LE;SpF&ey");
      assertEquals("com.alibaba.fastjson.JSONPath$NotNullSegement", sQLSyntaxErrorException0.getMessage());
      assertEquals("LE;SpF&ey", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: com.alibaba.fastjson.JSONPath$NotNullSegement", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("a", hashMap0, sQLSyntaxErrorException0);
      assertEquals("com.alibaba.fastjson.JSONPath$NotNullSegement", sQLSyntaxErrorException0.getMessage());
      assertEquals("LE;SpF&ey", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: com.alibaba.fastjson.JSONPath$NotNullSegement", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("a", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: a", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertEquals("com.alibaba.fastjson.JSONPath$NotNullSegement", sQLSyntaxErrorException0.getMessage());
      assertEquals("LE;SpF&ey", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: com.alibaba.fastjson.JSONPath$NotNullSegement", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("a", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: a", sQLClientInfoException0.toString());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("LE;SpF&ey", "/stackTrace/1", (-3166), map0, sQLClientInfoException0);
      assertEquals("com.alibaba.fastjson.JSONPath$NotNullSegement", sQLSyntaxErrorException0.getMessage());
      assertEquals("LE;SpF&ey", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: com.alibaba.fastjson.JSONPath$NotNullSegement", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("a", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: a", sQLClientInfoException0.toString());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("LE;SpF&ey", sQLClientInfoException1.getMessage());
      assertEquals((-3166), sQLClientInfoException1.getErrorCode());
      assertEquals("/stackTrace/1", sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: LE;SpF&ey", sQLClientInfoException1.toString());
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException1);
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = (SQLSyntaxErrorException)sQLSyntaxErrorException0.initCause(sQLClientInfoException1);
      assertEquals("com.alibaba.fastjson.JSONPath$NotNullSegement", sQLSyntaxErrorException0.getMessage());
      assertEquals("LE;SpF&ey", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: com.alibaba.fastjson.JSONPath$NotNullSegement", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("a", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: a", sQLClientInfoException0.toString());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("LE;SpF&ey", sQLClientInfoException1.getMessage());
      assertEquals((-3166), sQLClientInfoException1.getErrorCode());
      assertEquals("/stackTrace/1", sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: LE;SpF&ey", sQLClientInfoException1.toString());
      assertEquals("com.alibaba.fastjson.JSONPath$NotNullSegement", sQLSyntaxErrorException1.getMessage());
      assertEquals("LE;SpF&ey", sQLSyntaxErrorException1.getSQLState());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: com.alibaba.fastjson.JSONPath$NotNullSegement", sQLSyntaxErrorException1.toString());
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLSyntaxErrorException1);
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException1, sQLClientInfoException0);
      assertSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("&=;y7L");
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: &=;y7L", sQLNonTransientConnectionException0.toString());
      assertEquals("&=;y7L", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(110, 0, (-3255));
      assertNotNull(jSONPath_RangeSegment0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3166), (-1718154296), (-3166), (-3166), 3954);
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
      try { 
        JSONPath.set((Object) mockGregorianCalendar0, "fastjson.asmEnable", (Object) jSONPath_Operator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("/stackTrace/10", "/stackTrace/10", true);
      assertNotNull(jSONPath_ValueSegment0);
      
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/10");
      assertEquals("/stackTrace/10", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, sQLClientInfoException0, sQLClientInfoException0, "/stackTrace/10");
      assertEquals("/stackTrace/10", jSONPath0.getPath());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      assertNotNull(javaBeanDeserializer0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Double double0 = new Double(3629.1349);
      assertEquals(3629.1349, (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = jSONPath0.size((Object) parserConfig0);
      assertEquals("/stackTrace/10", jSONPath0.getPath());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals((-1), int0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(290);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("NE", jSONPath_ArrayAccessSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("fastjson.parser.deny.internal", 290, jSONPath_Operator1);
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotNull(jSONPath_IntOpSegement0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment1 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
      assertFalse(jSONPath_FilterSegment1.equals((Object)jSONPath_FilterSegment0));
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotNull(jSONPath_FilterSegment1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(38, mockRandom0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      boolean boolean1 = jSONPath_IntOpSegement0.apply(jSONPath0, classLoader0, jSONPath_FilterSegment1, bigInteger0);
      assertEquals("/stackTrace/10", jSONPath0.getPath());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertFalse(boolean1);
      assertFalse(jSONPath_FilterSegment1.equals((Object)jSONPath_FilterSegment0));
      assertTrue(boolean1 == boolean0);
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertNotSame(jSONPath_FilterSegment1, jSONPath_FilterSegment0);
      assertNotSame(jSONPath_Operator1, jSONPath_Operator0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("NE");
      assertEquals("NE", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: NE", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(290, 38, (-1982292595));
      assertNotNull(jSONPath_RangeSegment0);
      
      // Undeclared exception!
      JSONPath.set((Object) jSONPath0, "/stackTrace/10", (Object) jSONPath_RangeSegment0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      assertEquals("*", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Double double0 = new Double(3629.1349);
      assertEquals(3629.1349, (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = jSONPath0.size((Object) "*");
      assertEquals("*", jSONPath0.getPath());
      assertEquals(2, int0);
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(7);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("*", jSONPath_ArrayAccessSegment0, jSONPath_Operator0);
      assertNotNull(jSONPath_RefOpSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("*", 290, jSONPath_Operator0);
      assertFalse(jSONPath_Operator0.equals((Object)jSONPath_Operator1));
      assertNotNull(jSONPath_IntOpSegement0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment1 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
      assertFalse(jSONPath_Operator0.equals((Object)jSONPath_Operator1));
      assertFalse(jSONPath_FilterSegment1.equals((Object)jSONPath_FilterSegment0));
      assertNotNull(jSONPath_FilterSegment1);
      
      JSONPath.RefOpSegement jSONPath_RefOpSegement1 = new JSONPath.RefOpSegement("", jSONPath_FilterSegment1, jSONPath_Operator1);
      assertFalse(jSONPath_Operator0.equals((Object)jSONPath_Operator1));
      assertFalse(jSONPath_Operator1.equals((Object)jSONPath_Operator0));
      assertFalse(jSONPath_FilterSegment1.equals((Object)jSONPath_FilterSegment0));
      assertFalse(jSONPath_RefOpSegement1.equals((Object)jSONPath_RefOpSegement0));
      assertNotNull(jSONPath_RefOpSegement1);
      
      JSONPath.Operator jSONPath_Operator2 = JSONPath.Operator.RLIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("lF_T5N@2L$T_F", 3629.1349, jSONPath_Operator2);
      assertFalse(jSONPath_Operator2.equals((Object)jSONPath_Operator0));
      assertFalse(jSONPath_Operator2.equals((Object)jSONPath_Operator1));
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment2 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      assertFalse(jSONPath_Operator2.equals((Object)jSONPath_Operator0));
      assertFalse(jSONPath_Operator2.equals((Object)jSONPath_Operator1));
      assertFalse(jSONPath_FilterSegment2.equals((Object)jSONPath_FilterSegment1));
      assertFalse(jSONPath_FilterSegment2.equals((Object)jSONPath_FilterSegment0));
      assertNotNull(jSONPath_FilterSegment2);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      String string0 = "/stackTrace/8";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("lF_T5N@2L$T_F");
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("lF_T5N@2L$T_F", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: lF_T5N@2L$T_F", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(7, Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertNotNull(jSONPath_RangeSegment0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("lF_T5N@2L$T_F", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: lF_T5N@2L$T_F", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: lF_T5N@2L$T_F", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: lF_T5N@2L$T_F", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      // Undeclared exception!
      try { 
        JSONPath.set((Object) jSONPath_DoubleOpSegement0, "*", (Object) sQLSyntaxErrorException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)63}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)63}, byteArray0);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$JSONPathParser");
      assertEquals("com.alibaba.fastjson.JSONPath$JSONPathParser", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSON.DEFAULT_PARSER_FEATURE = 890;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("bzG*/tYyh_i(=G", "bzG*/tYyh_i(=G", (byte)63);
      assertEquals("java.sql.SQLNonTransientException: bzG*/tYyh_i(=G", sQLNonTransientException0.toString());
      assertEquals(63, sQLNonTransientException0.getErrorCode());
      assertEquals("bzG*/tYyh_i(=G", sQLNonTransientException0.getSQLState());
      assertEquals("bzG*/tYyh_i(=G", sQLNonTransientException0.getMessage());
      assertNotNull(sQLNonTransientException0);
      
      Throwable[] throwableArray0 = sQLNonTransientException0.getSuppressed();
      assertEquals(0, throwableArray0.length);
      assertEquals("java.sql.SQLNonTransientException: bzG*/tYyh_i(=G", sQLNonTransientException0.toString());
      assertEquals(63, sQLNonTransientException0.getErrorCode());
      assertEquals("bzG*/tYyh_i(=G", sQLNonTransientException0.getSQLState());
      assertEquals("bzG*/tYyh_i(=G", sQLNonTransientException0.getMessage());
      assertNotNull(throwableArray0);
      
      boolean boolean3 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{\"fruit\":\"Apple\",\"size\":-99,\"color\":\"Red\",\"(Ljava/lang/Class;)Ljava/util/Collection;\":true,\"value2\":true,\"number\":\"1\"}");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertEquals("com.alibaba.fastjson.JSONPath$JSONPathParser", jSONPath0.getPath());
      assertNull(object0);
      
      StackTraceElement[] stackTraceElementArray0 = sQLNonTransientException0.getStackTrace();
      assertEquals(13, stackTraceElementArray0.length);
      assertEquals("java.sql.SQLNonTransientException: bzG*/tYyh_i(=G", sQLNonTransientException0.toString());
      assertEquals(63, sQLNonTransientException0.getErrorCode());
      assertEquals("bzG*/tYyh_i(=G", sQLNonTransientException0.getSQLState());
      assertEquals("bzG*/tYyh_i(=G", sQLNonTransientException0.getMessage());
      assertNotNull(stackTraceElementArray0);
      
      boolean boolean4 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      
      Object object1 = jSONPath0.eval((Object) "com.alibaba.fastjson.JSONPath$JSONPathParser");
      assertEquals("com.alibaba.fastjson.JSONPath$JSONPathParser", jSONPath0.getPath());
      assertNull(object1);
      
      String string0 = "com.alibaba.fastjson.JSONPath$DoubleOpSegement";
      // Undeclared exception!
      try { 
        JSONPath.set((Object) sQLNonTransientException0, "com.alibaba.fastjson.JSONPath$DoubleOpSegement", (Object) "com.alibaba.fastjson.JSONPath$DoubleOpSegement");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("(CLjava/lang/String;Ljava/math/BigDecimal;)V", 0.0, jSONPath_Operator0);
      assertNotNull(jSONPath_DoubleOpSegement0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(99999999, false);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      JSONPath jSONPath0 = new JSONPath("(CLjava/lang/String;Ljava/math/BigDecimal;)V", serializeConfig0, parserConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("(CLjava/lang/String;Ljava/math/BigDecimal;)V", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath_DoubleOpSegement0, (String[]) null);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. (CLjava/lang/String;Ljava/math/BigDecimal;)V
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int0 = 2442;
      mockGregorianCalendar0.set(2442, 2442, 473);
      Calendar.getAvailableCalendarTypes();
      mockGregorianCalendar0.getTime();
      mockGregorianCalendar0.set((-586), (-586), 425, 113, 425, 0);
      mockGregorianCalendar0.getMaximum(0);
      mockGregorianCalendar0.get(0);
      JSONPath.paths((Object) mockGregorianCalendar0);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      String string0 = "Value";
      String string1 = "!z<;vsu:B(f3)gdVDGq";
      JSONPath jSONPath0 = new JSONPath("!z<;vsu:B(f3)gdVDGq");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("geIName");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = null;
      Integer integer0 = new Integer(7);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(7, 1520, (-2460));
      JSONPath jSONPath0 = new JSONPath("~n");
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, jSONPath0);
      // Undeclared exception!
      try { 
        JSONPath.remove(object0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pattern pattern0 = Pattern.compile("b|eeP");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("b|eeP", pattern0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("max");
      jSONPath0.evalKeySet(jSONPath_Operator0);
      SQLWarning sQLWarning0 = new SQLWarning("b|eeP");
      SerializeConfig serializeConfig0 = new SerializeConfig(33);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath1 = new JSONPath("bzG*/tYyh_i(=G", serializeConfig0, parserConfig0);
      jSONPath_RegMatchSegement0.apply(jSONPath0, jSONPath1, (Object) null, jSONPath0);
      JSONPath.reserveToObject(serializeConfig0, (String[]) null);
      String string0 = jSONPath0.getPath();
      assertEquals("max", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pattern pattern0 = Pattern.compile("b|eeP");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("b|eeP", pattern0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("max");
      jSONPath0.evalKeySet(jSONPath_Operator0);
      SQLWarning sQLWarning0 = new SQLWarning("b|eeP");
      SerializeConfig serializeConfig0 = new SerializeConfig(33);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath1 = new JSONPath("bzG*/tYyh_i(=G", serializeConfig0, parserConfig0);
      jSONPath_RegMatchSegement0.apply(jSONPath0, jSONPath1, (Object) null, jSONPath0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("u@5\"^Lg}kvU!xEq");
      jSONPath_JSONPathParser0.next();
      JSONPath.keySet((Object) jSONPath_Operator0, "fastjson.parser.autoTypeAccept");
      Set<?> set0 = jSONPath1.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      ClassLoader.getSystemClassLoader();
      jSONPath0.isRef();
      Integer integer0 = new Integer(1991);
      Class<Object> class0 = Object.class;
      JSONPath.isDouble(class0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "*";
      stringArray0[1] = "*";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment1 = new JSONPath.MultiPropertySegment(stringArray0);
      jSONPath0.deepSet("*", "fAe[OH", 4647432019745535567L, jSONPath_MultiPropertySegment1);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = null;
      try {
        jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      jSONPath0.containsValue((Object) "*", (Object) null);
      jSONPath0.contains((Object) null);
      Short short0 = new Short((short)13);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Float float0 = new Float(0.0F);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(short0, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Short cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "T9h";
      stringArray0[1] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}";
      stringArray0[2] = "T9h";
      stringArray0[4] = "T9h";
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("T9h");
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}", 355);
      Byte byte0 = new Byte((byte)28);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}");
      JSONPath.compile("T9h");
      Integer integer0 = new Integer((-2141));
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      Short short0 = new Short((byte)28);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Float float0 = new Float(2105.739);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Long long0 = new Long((-3851359326990528739L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Short short0 = new Short((short) (-436));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      boolean boolean0 = JSONPath.eqNotNull(long0, short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("0");
      SQLException sQLException0 = new SQLException("eX0ln", "36%eIQ_\"iQ8#0", (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Hx@_{Bik");
      Short short0 = new Short((short)3495);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONPath.eqNotNull(bigDecimal0, short0);
      int int0 = JSONPath.size((Object) "0", "0");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.reserveToObject(jSONPath_WildCardSegment0, (String[]) null);
      boolean boolean0 = JSONPath.remove((Object) null, ",");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Float float0 = new Float(1000.0);
      String string0 = "/stackTrace/9";
      JSONPath jSONPath0 = new JSONPath("/stackTrace/9");
      jSONPath0.getPath();
      jSONPath0.isRef();
      Integer integer0 = new Integer(2147);
      Class<Short> class0 = Short.class;
      JSONPath.isDouble(class0);
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = null;
      try {
        jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MultiPropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Integer integer0 = new Integer(14);
      boolean boolean0 = JSONPath.eqNotNull(14, 33);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-3851359326990528739L));
      longArray0[0] = long0;
      Long long1 = new Long((-1511L));
      longArray0[1] = long1;
      Long long2 = new Long((long) longArray0[0]);
      longArray0[2] = long2;
      Long long3 = new Long((-3412L));
      longArray0[3] = long3;
      Long long4 = new Long(204L);
      longArray0[4] = long4;
      SerializeConfig serializeConfig0 = new SerializeConfig(183, false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      SerializeConfig serializeConfig1 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig1, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-379));
      JSONPath.eqNotNull(longArray0[0], longArray0[4]);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      jSONPath0.isRef();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5]*==YhA@YK[%Ia&%w");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("rf-", false);
      Byte byte0 = new Byte((byte) (-108));
      Object object0 = JSONPath.reserveToObject(byte0, (String[]) null);
      assertEquals((byte) (-108), object0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-3851359326990528739L));
      longArray0[0] = long0;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "eX0ln";
      stringArray0[1] = "oP4efKbTeS5";
      stringArray0[2] = "oP4efKbTeS5";
      stringArray0[0] = "eX0ln";
      stringArray0[4] = "com";
      stringArray0[5] = "qU8$8dnB";
      stringArray0[6] = "com";
      stringArray0[7] = "eX0ln";
      stringArray0[8] = "eX0ln";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("com", stringArray0, true);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("`8/qt|?", serializeConfig0, parserConfig0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLWarning sQLWarning0 = new SQLWarning("!xU'y{eS", "fastjson.parser.autoTypeSupport", sQLNonTransientException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "eX0ln", "oP4efKbTeS5", "eX0ln");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "T9h";
      stringArray0[1] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}";
      stringArray0[2] = "T9h";
      stringArray0[3] = "T9h";
      stringArray0[4] = "T9h";
      stringArray0[5] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}";
      stringArray0[6] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}";
      stringArray0[7] = "T9h";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("T9h", stringArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("T9h");
      jSONPath_StringInSegement0.apply(jSONPath0, "T9h", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}", (Object) null);
      jSONPath_JSONPathParser0.filterRest(jSONPath_StringInSegement0);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"x\":\"hello\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Integer integer0 = new Integer(7);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("qU8$8dnB", stringArray0, false);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath(">d_)520p;pHf", serializeConfig0, parserConfig0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLWarning sQLWarning0 = new SQLWarning("fastjson.parser.autoTypeAccept", "jZIVlU=HW", sQLNonTransientException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      JSONPath.StringInSegement jSONPath_StringInSegement1 = new JSONPath.StringInSegement("V``", stringArray0, false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLInvalidAuthorizationSpecException0);
      boolean boolean0 = jSONPath_StringInSegement1.apply(jSONPath0, sQLFeatureNotSupportedException0, stringArray0[0], sQLNonTransientException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("ZHtMa#TW'V", "R~IBS+");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("java.util.concurrent.atomic.DoubleAdder", sQLInvalidAuthorizationSpecException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("{\"x\":true,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", "R~IBS+", sQLInvalidAuthorizationSpecException1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException0.forEach(consumer0);
      boolean boolean0 = JSONPath.eq(sQLInvalidAuthorizationSpecException1, sQLRecoverableException0);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("{\"x\":true,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", 1101L, 0, false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ZHtMa#TW'V";
      stringArray0[1] = "8:.CG:3T?lyRH/";
      stringArray0[2] = "{\"x\":true,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      stringArray0[3] = "{\"x\":true,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      stringArray0[4] = "{\"x\":true,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      stringArray0[5] = "8:.CG:3T?lyRH/";
      stringArray0[6] = "R~IBS+";
      stringArray0[7] = "R~IBS+";
      stringArray0[8] = "java.util.concurrent.atomic.DoubleAdder";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("8:.CG:3T?lyRH/", stringArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("NOT_BETWEEN");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 11, 176);
      SQLDataException sQLDataException0 = new SQLDataException("8:.CG:3T?lyRH/", "-", 3694, sQLInvalidAuthorizationSpecException0);
      boolean boolean1 = jSONPath_StringInSegement0.apply(jSONPath0, mockGregorianCalendar0, sQLDataException0, "ZHtMa#TW'V");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("like");
      jSONPath0.getPath();
      Class<JSONPath.RangeSegment> class0 = JSONPath.RangeSegment.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0, serializeConfig0);
      assertEquals(1, map0.size());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("yUSKD\"fq5I_b`?-9");
      jSONPath_JSONPathParser0.skipWhitespace();
      jSONPath_JSONPathParser0.skipWhitespace();
      jSONPath_JSONPathParser0.next();
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
      
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      ParserConfig parserConfig0 = ParserConfig.global;
      SerializeConfig serializeConfig1 = new SerializeConfig(791, false);
      JSONPath jSONPath1 = new JSONPath("rlike", serializeConfig0, parserConfig0);
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1);
      JSONPath jSONPath2 = new JSONPath("fastjson.parser.autoTypeSupport");
      int int0 = jSONPath2.evalSize(serializeConfig1);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("eX0");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Class<UUID> class0 = UUID.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNotNull(javaBeanDeserializer0);
      
      Object object0 = jSONPath0.eval((Object) javaBeanDeserializer0);
      assertNull(object0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("eX0", jSONPath_MinSegment0, jSONPath_Operator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.alibaba.fastjson.JSONPath$MaxSegment");
      sQLTransactionRollbackException0.getSuppressed();
      ParserConfig parserConfig0 = new ParserConfig();
      Class<JSONPath.MultiIndexSegment> class1 = JSONPath.MultiIndexSegment.class;
      JavaBeanDeserializer javaBeanDeserializer1 = new JavaBeanDeserializer(parserConfig0, class1);
      Double double0 = new Double(2553.4889569622);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("{\"fruit\":\"Apple\",\"size\":-99,\"color\":\"Red\",\"(Ljava/lang/Class;)Ljava/util/Collection;\":true,\"value2\":true,\"number\":\"1\"}", sQLTransactionRollbackException0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      ParserConfig parserConfig1 = new ParserConfig(true);
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig1.propertyNamingStrategy;
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, bigDecimal0, (Object) null, hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Wxvk");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath jSONPath0 = new JSONPath("l]c|U0]gX2Jo8*_g");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      JSONPath.set((Object) null, "eX0", (Object) sQLInvalidAuthorizationSpecException0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("w|T'o-Fs#");
      jSONPath_JSONPathParser0.readSegement();
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        JSONPath.extract("Wxvk", "getName", parserConfig0, 1024, (Feature[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      jSONPath0.contains((Object) null);
      JSONPath jSONPath1 = new JSONPath("*");
      assertFalse(jSONPath1.equals((Object)jSONPath0));
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath.read((String) null, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"getName\":[],\"value\":null,\"value2\":false,\"number\":\"1\"}");
      JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"getName\":[],\"value\":null,\"value2\":false,\"number\":\"1\"}");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("syntax error, expect [, actual ", (JSONLexer) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("EGY2v.mWg|\"");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem(jSONPath_SizeSegment0, 572);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("-", "can not cast to byte, value : ", (-2725), (Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[K>f?g;+H", "(>i7", 0, sQLTransientConnectionException0);
      JSONPath.paths((Object) "can not cast to byte, value : ");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("WcZ");
      Float float0 = new Float((-2026.96F));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-";
      stringArray0[1] = "";
      stringArray0[2] = "2%";
      stringArray0[3] = "~n";
      stringArray0[4] = "2%";
      stringArray0[5] = "WcZ";
      stringArray0[6] = "";
      stringArray0[7] = "[K>f?g;+H";
      stringArray0[8] = "2%";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(float0, stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Long long0 = new Long(108L);
      Integer integer0 = new Integer(5);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 163, 5);
      String string0 = "7";
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) mockGregorianCalendar0, "7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class org.evosuite.runtime.mock.java.util.MockGregorianCalendar
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("like");
      jSONPath0.getPath();
      Class<JSONPath.RangeSegment> class0 = JSONPath.RangeSegment.class;
      JSONPath.isInt(class0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath.paths((Object) jSONPath0, serializeConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("yUSKD\"fq5I_b`?-9");
      jSONPath_JSONPathParser0.skipWhitespace();
      jSONPath_JSONPathParser0.skipWhitespace();
      jSONPath_JSONPathParser0.next();
      jSONPath_JSONPathParser0.readSegement();
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      int[] intArray0 = new int[18];
      intArray0[0] = (-880);
      intArray0[1] = (-2256);
      intArray0[2] = 0;
      intArray0[3] = (-763);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("like");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "like";
      stringArray0[1] = "like";
      stringArray0[2] = "";
      stringArray0[3] = "like";
      stringArray0[4] = "";
      stringArray0[5] = "{\"x\":\"hello\",\", class \":{},\"z\":true,\"a\":[],\"b\":null}";
      stringArray0[6] = "";
      stringArray0[7] = "like";
      stringArray0[8] = "like";
      JSONPath.reserveToArray(jSONPath_JSONPathParser0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Float float0 = new Float(1000.0);
      Long long0 = new Long(367L);
      int int0 = 7;
      Integer integer0 = new Integer(7);
      int int1 = 2379;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1124075009, 2379, (-3808));
      String string0 = "getFieldValue error.";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("getFieldValue error.", "getFieldValue error.");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/cause/stackTrace/11", "/cause/stackTrace/11", 2379, sQLIntegrityConstraintViolationException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/cause/stackTrace/11", "eX0ln", sQLTransactionRollbackException0);
      String string1 = "/stackTrace/11";
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) sQLTransientConnectionException0, "/stackTrace/11");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}", false);
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}");
      jSONPath_PropertySegment0.setValue(jSONPath0, "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}", jSONPath_JSONPathParser0);
      boolean boolean0 = JSONPath.remove((Object) "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}", "IN");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("L/ZjuBG");
      Byte byte0 = new Byte((byte) (-57));
      jSONPath0.remove((Object) byte0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("];:,.H@x5])!O");
      jSONPath_JSONPathParser0.buildArraySegement("fastjson.parser.autoTypeSupport");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("L/ZjuBG", "fastjson.parser.autoTypeSupport", 46);
      JSONPath.compile("&gbx%g-c<a1");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("];:,.H@x5])!O", "];:,.H@x5])!O", jSONPath_Operator0);
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("java/lang/Byte");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("r-o");
      jSONPath0.isRef();
      Integer integer0 = new Integer(1174);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) integer0, "java/lang/Byte");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("/stackTrace/10", "/stackTrace/10", true);
      // Undeclared exception!
      try { 
        JSONPath.extract("step must greater than zero : ", "$ref");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("/stackTrace/10", "/stackTrace/10", true);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/10");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      jSONPath_ValueSegment0.apply(jSONPath0, sQLClientInfoException0, sQLClientInfoException0, "/stackTrace/10");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_ValueSegment0, jSONPath_ValueSegment0, true);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      JSONPath jSONPath1 = new JSONPath("I#@TEr2CL(", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath1.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : I#@TEr2CL(
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Integer integer0 = new Integer(7);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) propertyNamingStrategy0, "eX0ln");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("eX0");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Class<UUID> class0 = UUID.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNotNull(javaBeanDeserializer0);
      
      Object object0 = jSONPath0.eval((Object) javaBeanDeserializer0);
      assertNull(object0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("eX0", jSONPath_MinSegment0, jSONPath_Operator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.alibaba.fastjson.JSONPath$MaxSegment");
      sQLTransactionRollbackException0.getSuppressed();
      ParserConfig parserConfig0 = new ParserConfig();
      Class<Object> class1 = Object.class;
      JavaBeanDeserializer javaBeanDeserializer1 = new JavaBeanDeserializer(parserConfig0, class1);
      Double double0 = new Double((short)0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.deny", sQLTransactionRollbackException0);
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, sQLInvalidAuthorizationSpecException0, sQLTransactionRollbackException0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("/stackTrace/10", "/stackTrace/10", true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_ValueSegment0, jSONPath_ValueSegment0, true);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      JSONPath jSONPath0 = new JSONPath("I#@TEr2CL(", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : I#@TEr2CL(
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "com.alibaba.fastjson.serializer.SimplePropertyPreFilter";
      stringArray0[1] = "$*'5P:/-ijT,Vl";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("':");
      Long[] longArray0 = new Long[6];
      Long long0 = new Long((-2147483648L));
      longArray0[0] = long0;
      Long long1 = new Long(5614464919154503228L);
      longArray0[1] = long1;
      Long long2 = new Long(5614464919154503228L);
      longArray0[2] = long2;
      Long long3 = new Long(1638L);
      longArray0[3] = long3;
      Long long4 = new Long(5410L);
      longArray0[4] = long4;
      Long long5 = new Long((-1014497654951707614L));
      longArray0[5] = long5;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("<uNiM-L", longArray0, true);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntObjInSegement0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_Filter0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("<uNiM-L", true);
      // Undeclared exception!
      try { 
        jSONPath_MultiPropertySegment0.eval((JSONPath) null, jSONPath_FilterSegment0, jSONPath_PropertySegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MultiPropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BETWEEN");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("~y8P.s", "P`:x!-VNP", true);
      JSONPath.compile("P`:x!-VNP");
      JSONPath.eval((Object) "P`:x!-VNP", "m_");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[");
      jSONPath_JSONPathParser0.filterRest(jSONPath_RlikeSegement0);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      SQLWarning sQLWarning0 = new SQLWarning("");
      int int0 = JSONPath.size((Object) sQLWarning0, "");
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONPath.compile("eX0");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      SQLWarning sQLWarning0 = new SQLWarning("eX0");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("p_=}2O|@xr1Qrc", "*", (short)0);
      JSONPath.size((Object) sQLTransientConnectionException0, "bzG*/tYyh_i(=G");
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$Operator";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$Operator");
      Object object0 = jSONPath_MultiPropertySegment0.eval(jSONPath0, "com.alibaba.fastjson.JSONPath$Operator", jSONPath0);
      JSONPath jSONPath1 = JSONPath.compile("com.alibaba.fastjson.JSONPath$Operator");
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath1, "com.alibaba.fastjson.JSONPath$Operator", "com.alibaba.fastjson.JSONPath$Operator");
      assertTrue(arrayList0.equals((Object)object0));
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(90);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1228), (-1228), 90, (-1228), (-1228));
      String string0 = "=k|g\":UIB,p^";
      String string1 = "{\"b\":null,\"z\":true,\"x\":\"hello\",\"a\":[],\"toCharArray\":7}";
      JSONPath jSONPath0 = new JSONPath("{\"b\":null,\"z\":true,\"x\":\"hello\",\"a\":[],\"toCharArray\":7}");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "{\"b\":null,\"z\":true,\"x\":\"hello\",\"a\":[],\"toCharArray\":7}";
      stringArray0[1] = "{\"b\":null,\"z\":true,\"x\":\"hello\",\"a\":[],\"toCharArray\":7}";
      stringArray0[2] = "=k|g\":UIB,p^";
      stringArray0[3] = "=k|g\":UIB,p^";
      stringArray0[4] = "=k|g\":UIB,p^";
      stringArray0[5] = "=k|g\":UIB,p^";
      stringArray0[6] = "{\"b\":null,\"z\":true,\"x\":\"hello\",\"a\":[],\"toCharArray\":7}";
      stringArray0[7] = "{\"b\":null,\"z\":true,\"x\":\"hello\",\"a\":[],\"toCharArray\":7}";
      stringArray0[8] = "{\"b\":null,\"z\":true,\"x\":\"hello\",\"a\":[],\"toCharArray\":7}";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) jSONPath_MultiPropertySegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"b\":null,\"z\":true,\"x\":\"hello\",\"a\":[],\"toCharArray\":7}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Long long0 = new Long((-3851359326990528739L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stVackTrace/6");
      jSONPath_JSONPathParser0.next();
      // Undeclared exception!
      try { 
        JSONPath.extract("R]h/LY2~{'RKQNp*", "/stVackTrace/6");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(110, 36, (-283));
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("7T3G_3ta!C", serializeConfig0, parserConfig0);
      SQLWarning sQLWarning0 = new SQLWarning();
      Integer integer0 = new Integer((-283));
      jSONPath_RangeSegment0.eval(jSONPath0, sQLWarning0, integer0);
      Class<JSONPath.ArrayAccessSegment> class0 = JSONPath.ArrayAccessSegment.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue("7T3G_3ta!C", "7T3G_3ta!C", 110, javaBeanDeserializer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pattern pattern0 = Pattern.compile("b|eeP");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("b|eeP", pattern0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("max");
      jSONPath0.evalKeySet(jSONPath_Operator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("b|eeP", "between");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) propertyNamingStrategy0, (Object) jSONPath_RegMatchSegement0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}x");
      jSONPath_JSONPathParser0.next();
      jSONPath_JSONPathParser0.skipWhitespace();
      SQLException sQLException0 = new SQLException("{\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}x", "{\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}x", (Throwable) null);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1082508921), 2, (-1719884507));
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = JSONPath.compile("$VALUES");
      Double double0 = new Double(2);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, double0, (Object) null);
      assertNotNull(arrayList0);
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(110, 36, (-283));
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("7T3G_3ta!C", serializeConfig0, parserConfig0);
      SQLWarning sQLWarning0 = new SQLWarning();
      Integer integer0 = new Integer((-283));
      jSONPath_RangeSegment0.eval(jSONPath0, sQLWarning0, integer0);
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      Class<JSONPath.ArrayAccessSegment> class0 = JSONPath.ArrayAccessSegment.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig1, class0);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue("7T3G_3ta!C", "7T3G_3ta!C", 110, javaBeanDeserializer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3ZeWt%O(R7w,.%R");
      JSONPath jSONPath0 = new JSONPath("3ZeWt%O(R7w,.%R");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("eX0");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("dN9^", "dN9^", (short)0);
      boolean boolean0 = jSONPath0.contains((Object) sQLTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Short short0 = new Short((short) (-1307));
      JSONPath.contains((Object) null, (String) null);
      String string0 = "{}";
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("@78hEV1o|BbLGb[");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(13, 13, 40);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Short short0 = new Short((short)76);
      boolean boolean0 = JSONPath.contains((Object) null, "@78hEV1o|BbLGb[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(90);
      int int0 = 109;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(109, 1056, (-1228), 1056, (-2012));
      JSONPath jSONPath0 = new JSONPath("{\"b\":null,\"z\":true,\"x\":\"hello\",\"a\":[],\"toCharArray\":7}");
      jSONPath0.getPath();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath.compile("com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      jSONPath_WildCardSegment0.eval(jSONPath0, sQLSyntaxErrorException0, (Object) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("=k|g\":UIB,p^");
      String string0 = "seh'}U%$";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("seh'}U%$", "writeBefore", sQLNonTransientException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("{\"b\":null,\"z\":true,\"x\":\"hello\",\"a\":[],\"toCharArray\":7}", sQLNonTransientConnectionException0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("seh'}U%$");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : seh'}U%$
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("/CTM9iu<Y;Sx-^V", "/CTM9iu<Y;Sx-^V", jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("/CTM9iu<Y;Sx-^V");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/CTM9iu<Y;Sx-^V", "/CTM9iu<Y;Sx-^V");
      jSONPath_StringOpSegement0.apply(jSONPath0, "/CTM9iu<Y;Sx-^V", sQLTimeoutException0, "/CTM9iu<Y;Sx-^V");
      jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath_Operator0, (Object) null, jSONPath_Operator0);
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = "like";
      JSONPath jSONPath0 = JSONPath.compile("like");
      jSONPath0.getPath();
      Class<JSONPath.RangeSegment> class0 = JSONPath.RangeSegment.class;
      JSONPath.isInt(class0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath.paths((Object) jSONPath0, serializeConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("yUSKD\"fq5I_b`?-9");
      jSONPath_JSONPathParser0.skipWhitespace();
      jSONPath_JSONPathParser0.skipWhitespace();
      jSONPath_JSONPathParser0.next();
      jSONPath_JSONPathParser0.readSegement();
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      int[] intArray0 = new int[18];
      intArray0[0] = (-880);
      intArray0[1] = (-2256);
      intArray0[2] = 0;
      intArray0[3] = (-763);
      intArray0[5] = 0;
      intArray0[6] = 2772;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("illega str", "{\"x\":\"hello\",\", class \":{},\"z\":true,\"a\":[],\"b\":null}", intArray0);
      DataTruncation dataTruncation0 = new DataTruncation(97, false, false, 0, (-763), batchUpdateException0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("like", (-763), jSONPath_Operator0);
      // Undeclared exception!
      try { 
        jSONPath_DoubleOpSegement0.apply(jSONPath0, batchUpdateException0, jSONPath_KeySetSegment0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "{\"fruit\":\"com.alibaba.fastjson.parser.deserializer.JSONPDeserializer\",\"size\":null,\"color\":[],\"value\":true,\"value2\":false,\"number\":\"1\"}";
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("{\"fruit\":\"com.alibaba.fastjson.parser.deserializer.JSONPDeserializer\",\"size\":null,\"color\":[],\"value\":true,\"value2\":false,\"number\":\"1\"}", "{\"fruit\":\"com.alibaba.fastjson.parser.deserializer.JSONPDeserializer\",\"size\":null,\"color\":[],\"value\":true,\"value2\":false,\"number\":\"1\"}", jSONPath_Operator0);
      String string1 = "6V1AdHd'%y#;B`";
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("6V1AdHd'%y#;B`", serializeConfig0, parserConfig0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      int int0 = (-2561);
      HashMap<String, String> hashMap0 = null;
      try {
        hashMap0 = new HashMap<String, String>((-2561), (-2561));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2561
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Wxvk");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath jSONPath0 = new JSONPath("l]c|U0]gX2Jo8*_g");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      JSONPath.set((Object) null, "eX0", (Object) sQLInvalidAuthorizationSpecException0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("w|T'o-Fs#");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertFalse(object0.equals((Object)jSONPath_Segment0));
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(">Su_UObIKJk2Zu}");
      boolean boolean0 = jSONPath0.setPropertyValue(">Su_UObIKJk2Zu}", "iYA!RBa6)ao+#1lMiY0", (-2053L), "iYA!RBa6)ao+#1lMiY0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = "l]c|U0]gX2Jo8*_g";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Wxvk");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath jSONPath0 = new JSONPath("l]c|U0]gX2Jo8*_g");
      String string1 = "eX0";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      JSONPath.set((Object) null, "eX0", (Object) sQLInvalidAuthorizationSpecException0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(115, 115, 110);
      jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, jSONPath0);
      Object object0 = null;
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, "1zX],$.uI", 115, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/CTM9iu<Y;Sx-^V");
      assertEquals("/CTM9iu<Y;Sx-^V", jSONPath0.getPath());
      
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$ArrayAccessSegment");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('o', char0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(90);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(90, 90, 90);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("7T3G_3ta!C");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(90, (-148), 0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("next");
      jSONPath_JSONPathParser0.getNextChar();
      String string0 = "";
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) mockGregorianCalendar0, "");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("like");
      jSONPath0.getPath();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("like");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'l, but 'e'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = "{\"x\":\"hello\",\"y\":null,\"Or\":true,\"a\":true,\"b\":{},\"xx\":\"a string\"}";
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("{\"x\":\"hello\",\"y\":null,\"Or\":true,\"a\":true,\"b\":{},\"xx\":\"a string\"}", 1745.877, jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":null,\"Or\":true,\"a\":true,\"b\":{},\"xx\":\"a string\"}", serializeConfig0, parserConfig0);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      int int0 = 97;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(97, (-10), 97);
      Module module0 = mock(Module.class, new ViolatedAssumptionAnswer());
      serializeConfig0.register(module0);
      JSONPath jSONPath1 = JSONPath.compile("/stackTrace/3");
      JSONPath.keySet((Object) jSONPath1, "{\"fruit\":\"Apple\",\"size\":-99,\"color\":\"Red\",\"(Ljava/lang/Class;)Ljava/util/Collection;\":true,\"value2\":true,\"number\":\"1\"}");
      Class<SQLTransientException> class0 = SQLTransientException.class;
      jSONPath0.getJavaBeanDeserializer(class0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(string0);
      jSONPath_JSONPathParser0.next();
      Object object0 = JSONPath.reserveToArray(string0, parserConfig0.DENYS);
      jSONPath0.getArrayItem(object0, int0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "7T3G_3ta!C";
      stringArray0[1] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}";
      stringArray0[2] = "MQ<4c-Dj";
      stringArray0[3] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}";
      stringArray0[4] = "7T3G_3ta!C";
      stringArray0[5] = "7T3G_3ta!C";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("NE", stringArray0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("7T3G_3ta!C", jSONPath_FilterSegment0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/4");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("MQ<4c-Dj", "MQ<4c-Dj");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("LE;SpF&ey", (SerializeConfig) null, parserConfig0);
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, jSONPath1, jSONPath1, "NE");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "T9h";
      stringArray0[1] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}";
      stringArray0[2] = "T9h";
      stringArray0[3] = "T9h";
      stringArray0[4] = "T9h";
      stringArray0[5] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}";
      stringArray0[6] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}";
      stringArray0[7] = "T9h";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("T9h", stringArray0, true);
      jSONPath_JSONPathParser0.filterRest(jSONPath_StringInSegement0);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"x\":\"hello\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-3166));
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("com.alibaba.fastjson.JSONPath$NotNullSegement", jSONPath_ArrayAccessSegment0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$NotNullSegement");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.alibaba.fastjson.JSONPath$NotNullSegement", "LE;SpF&ey");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("a", hashMap0, sQLSyntaxErrorException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("LE;SpF&ey", "/stackTrace/1", (-3166), map0, sQLClientInfoException0);
      sQLSyntaxErrorException0.initCause(sQLClientInfoException1);
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, jSONPath_ArrayAccessSegment0, sQLSyntaxErrorException0, "com.alibaba.fastjson.JSONPath$NotNullSegement");
      assertFalse(boolean0);
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      Long long0 = new Long((-3166));
      JSONPath.SizeSegment jSONPath_SizeSegment1 = new JSONPath.SizeSegment();
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, long0, jSONPath_SizeSegment1);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = "S30)zAc7/kwgD";
      JSONPath jSONPath0 = JSONPath.compile("S30)zAc7/kwgD");
      jSONPath0.evalSize((Object) null);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "S30)zAc7/kwgD";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) javaBeanSerializer0, (Object) propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":[],\"number\":\"1\"}";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":[],\"number\":\"1\"}");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":[],\"number\":\"1\"}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '{, but '}'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = "_asm_fieldType";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("_asm_fieldType");
      jSONPath_JSONPathParser0.readString();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'f, but 'e'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Wxvk\"/[T-E:YfH");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      jSONPath0.contains((Object) sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("alibaba");
      jSONPath0.deepSet("alibaba", "denyu+i0", 4647432019745535567L, "denyu+i0");
      assertEquals("alibaba", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = "/stackTrace/6";
      JSONPath jSONPath0 = new JSONPath("/stackTrace/6");
      String string1 = "l]c|U0]gX2Jo8*_g";
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      // Undeclared exception!
      try { 
        JSONPath.compare(jSONPath0, javaBeanDeserializer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.compatibleWithJavaBean = true;
      JSONPath jSONPath0 = new JSONPath("d", serializeConfig0, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      jSONPath0.keySet((Object) "d");
      jSONPath0.setPropertyValue(jSONPath_SizeSegment0, "AX3\"X:_S);6h", 4647432019745535567L, parserConfig0);
      // Undeclared exception!
      try { 
        JSONPath.extract("AX3\"X:_S);6h", "fastjson.parser.deny.internal");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(90);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1228), (-1228), 90, (-1228), (-1228));
      String string0 = "=k|g\":UIB,p^";
      JSONPath jSONPath0 = new JSONPath("{\"b\":null,\"z\":true,\"x\":\"hello\",\"a\":[],\"toCharArray\":7}");
      jSONPath0.getPath();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath jSONPath1 = JSONPath.compile("writeBefore");
      jSONPath_WildCardSegment0.eval(jSONPath1, "=k|g\":UIB,p^", jSONPath_ArrayAccessSegment0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("=k|g\":UIB,p^");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("=k|g\":UIB,p^", "{\"b\":null,\"z\":true,\"x\":\"hello\",\"a\":[],\"toCharArray\":7}", sQLNonTransientException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("=k|g\":UIB,p^", sQLNonTransientException0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("e");
      jSONPath_JSONPathParser0.explain();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-1962L));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = "/";
      JSONPath jSONPath0 = JSONPath.compile("/");
      int[] intArray0 = new int[1];
      intArray0[0] = (-1446015185);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      UUID uUID0 = MockUUID.randomUUID();
      jSONPath0.eval((Object) uUID0);
      // Undeclared exception!
      try { 
        jSONPath_MultiIndexSegment0.eval(jSONPath0, (Object) null, jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 8, 0);
      JSONPath.keySet((Object) jSONPath_RangeSegment0, "");
      String string0 = "C`AU*z:9U#L-";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(string0);
      jSONPath_JSONPathParser0.next();
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/CTM9iu<Y;Sx-^V");
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, jSONPath0, jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = "getName";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{\"fruit\":\"Apple\",\"size\":null,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("getName", sQLFeatureNotSupportedException0);
      JSONPath.containsValue((Object) sQLTransactionRollbackException0, "getName", (Object) "getName");
      String string1 = "";
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      SerializeConfig serializeConfig0 = new SerializeConfig(91);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("getName", serializeConfig0, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("\\-", false);
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, jSONPath_PropertySegment0, jSONPath_PropertySegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("/CTM9iu<Y;Sx-^V", "/CTM9iu<Y;Sx-^V", jSONPath_Operator0);
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("):S>@5^L");
      JSONPath jSONPath0 = new JSONPath("):S>@5^L");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      Class<SQLException> class0 = SQLException.class;
      JSONPath jSONPath1 = JSONPath.compile("):S>@5^L");
      jSONPath0.getJavaBeanDeserializer(class0);
      SQLDataException sQLDataException0 = new SQLDataException("/stackTrace", "*", (-3295));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("):S>@5^L", "java.util.Collections$EmptyMap", sQLDataException0);
      JSONPath jSONPath2 = new JSONPath("toCharArray");
      JSONPath.paths((Object) jSONPath2);
      // Undeclared exception!
      try { 
        jSONPath1.remove((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DenYu+I0");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("DenYu+I0");
      String string0 = "[";
      String string1 = "fastjson.parser.autoTypeSupport";
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      jSONPath0.remove((Object) "DenYu+I0");
      jSONPath_JSONPathParser0.buildArraySegement("fastjson.parser.autoTypeSupport");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[", "DenYu+I0", 41);
      JSONPath.compile("80?g(/Fl*^,XP~$");
      jSONPath_JSONPathParser0.isEOF();
      JSONPath.NullSegement jSONPath_NullSegement0 = null;
      try {
        jSONPath_NullSegement0 = new JSONPath.NullSegement((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(90);
      String string0 = "7T3G_3ta!C";
      JSONPath jSONPath0 = new JSONPath("7T3G_3ta!C");
      int int0 = (-1228);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(90, 90, (-1228));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("7T3G_3ta!C");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 7T3G_3ta!C
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Feature feature0 = Feature.DisableFieldSmartMatch;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[2];
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      Class<Float> class0 = Float.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      javaBeanSerializer0.getPropertyFilters();
      Class<?> class1 = javaBeanSerializer0.getType();
      jSONPath0.getJavaBeanDeserializer(class1);
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      // Undeclared exception!
      try { 
        JSONPath.extract("can not cast to byte[], value : ", (String) null, parserConfig0, 116, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      JSONPath.compile("/CTM9iu<Y;Sx-^V");
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      Integer integer0 = Integer.valueOf(99999999);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) integer0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("false");
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      Feature feature0 = Feature.CustomMapDeserializer;
      Feature feature1 = Feature.SortFeidFastMatch;
      Feature[] featureArray0 = new Feature[4];
      featureArray0[0] = feature0;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowISO8601DateFormat;
      featureArray0[3] = feature2;
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.parser.deny.internal", "", parserConfig0, 0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SerializeConfig serializeConfig0 = null;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", (SerializeConfig) null, parserConfig0);
      Short short0 = new Short((short) (-1317));
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = null;
      try {
        jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement((String) null, (Pattern) null, jSONPath_Operator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("/beanInfo/clazz/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type/annotatedInterfaces/1/annotatedActualTypeArguments", 1);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("/beanInfo/clazz/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type/annotatedInterfaces/1/annotatedActualTypeArguments", pattern0, jSONPath_Operator0);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("/beanInfo/clazz/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/0/parameterTypes", (SerializeConfig) null, parserConfig0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("/beanInfo/clazz/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type/annotatedInterfaces/1/annotatedActualTypeArguments");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        jSONPath_RegMatchSegement0.apply(jSONPath0, "/beanInfo/clazz/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/0/parameterTypes", sQLTransientConnectionException0, jSONPath0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, true, false, 34, 34);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "~n";
      JSONPath jSONPath0 = JSONPath.compile("~n");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("eX0", parserConfig0, 0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2eX0
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(90);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(90, 90, (-1228));
      String string0 = "=k|g\":UIB,p^";
      JSONPath jSONPath0 = new JSONPath("{\"b\":{},\"z\":true,\"x\":\"hello\",\"a\":[],\"y\":7}");
      jSONPath0.getPath();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath jSONPath1 = JSONPath.compile("writeBefore");
      jSONPath_WildCardSegment0.eval(jSONPath1, "=k|g\":UIB,p^", jSONPath_ArrayAccessSegment0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("=k|g\":UIB,p^");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("=k|g\":UIB,p^", "{\"b\":{},\"z\":true,\"x\":\"hello\",\"a\":[],\"y\":7}", sQLNonTransientException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("=k|g\":UIB,p^", sQLNonTransientException0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = null;
      try {
        jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("ZHtMa#TW'V", "R~IBS+");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("java.util.concurrent.atomic.DoubleAdder", sQLInvalidAuthorizationSpecException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("{\"x\":true,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", "R~IBS+", sQLInvalidAuthorizationSpecException1);
      JSONPath.eq(sQLInvalidAuthorizationSpecException1, sQLRecoverableException0);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("{\"x\":true,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", 1101L, 0, false);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("OWb{6LL}%xp0K*<9V<", (-495799323323797221L), 8121814285880789523L, true);
      JSONPath jSONPath0 = new JSONPath("YY[h>v5z Li5{");
      Byte byte0 = new Byte((byte) (-89));
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, byte0, (Object) null, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("_asm_fieldType");
      jSONPath_JSONPathParser0.readString();
      jSONPath_JSONPathParser0.skipWhitespace();
      jSONPath_JSONPathParser0.isEOF();
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":[],\"value\":true,\"value2\":false,\"number\":\"1\"}");
      jSONPath_JSONPathParser0.isEOF();
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("_asm_fieldType");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      jSONPath_NullSegement0.apply(jSONPath0, jSONPath_JSONPathParser0, jSONPath_JSONPathParser0, sQLIntegrityConstraintViolationException0);
      int int0 = jSONPath0.size((Object) "asm");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(int0, int0, int0);
      jSONPath0.eval((Object) jSONPath_RangeSegment0);
      String string0 = null;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = null;
      try {
        jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement(string0, jSONPath_RangeSegment0, jSONPath_Operator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      String string0 = "*";
      JSONPath jSONPath0 = new JSONPath("*");
      jSONPath0.containsValue((Object) "*", (Object) null);
      jSONPath0.contains((Object) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Integer integer0 = new Integer((short)3495);
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, "*", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":[],\"number\":\"1\"}");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("2%", "ro's#cV", 35, (Throwable) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("ro's#cV", "(.`_vr", 58, (Map<String, ClientInfoStatus>) null, sQLTimeoutException0);
      JSONPath jSONPath0 = new JSONPath("2%");
      jSONPath0.containsValue((Object) null, (Object) jSONPath_JSONPathParser0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(65, (-3367), 65, 60, (-1188), 2207);
      // Undeclared exception!
      try { 
        JSONPath.compare((Object) null, "ro's#cV");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"step must greater than zero : \":null,\"y\":7,\"/stackTrace/3\":true,\"a\":true}");
      JSONPath jSONPath0 = new JSONPath("{\"step must greater than zero : \":null,\"y\":7,\"/stackTrace/3\":true,\"a\":true}");
      boolean boolean0 = JSONPath.remove((Object) "{\"step must greater than zero : \":null,\"y\":7,\"/stackTrace/3\":true,\"a\":true}", "IN");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = "{\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}}";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}}");
      jSONPath_JSONPathParser0.next();
      jSONPath_JSONPathParser0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":[],\"size\":\"Large\",\"color\":\"Red\",\"true\":true,\"value2\":[]}");
      JSONPath jSONPath0 = new JSONPath("2%");
      jSONPath0.containsValue((Object) null, (Object) jSONPath_JSONPathParser0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(65, (-3367), 65, 60, (-1188), 2207);
      // Undeclared exception!
      try { 
        JSONPath.compare((Object) null, "ro's#cV");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-3851359326990528739L));
      longArray0[0] = long0;
      JSONPath jSONPath0 = JSONPath.compile("");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/0");
      jSONPath_JSONPathParser0.buildArraySegement("eX0ln");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("*ytjUCGqB;&", "[", false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTimeoutException0);
      Set<?> set0 = jSONPath0.keySet((Object) sQLTimeoutException0);
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pattern pattern0 = Pattern.compile("b|eeP");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("unzip bytes error.", pattern0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("unzip bytes error.");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, "unzip bytes error.", jSONPath_RegMatchSegement0);
      jSONPath0.evalKeySet(object0);
      SQLWarning sQLWarning0 = new SQLWarning("unzip bytes error.");
      SerializeConfig serializeConfig0 = new SerializeConfig(33);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "fastjson.parser.deny";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      jSONPath_RegMatchSegement0.apply(jSONPath1, parserConfig0, jSONPath_MultiPropertySegment0, "fastjson.parser.deny");
      JSONPath.reserveToObject(jSONPath1, (String[]) null);
      String string0 = jSONPath0.getPath();
      assertEquals("unzip bytes error.", string0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      long long0 = JSONPath.LENGTH;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "rlike");
      Byte byte0 = new Byte((byte)25);
      JSONPath.eqNotNull((-1580386065683472715L), byte0);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.serializerFeatures.MapSortField");
      JSONPath jSONPath1 = new JSONPath("rlike");
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      jSONPath0.getJavaBeanDeserializer(class0);
      Float float0 = new Float((-1.0));
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath1, "fastjson.serializerFeatures.MapSortField", (byte)25, float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"EQ\",\"y\":7,\"z\":true,\"a\":\"a string\",\"b\":{\"x\":null}}");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("{\"x\":\"EQ\",\"y\":7,\"z\":true,\"a\":\"a string\",\"b\":{\"x\":null}}");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("autoTypeSupport", "REG_MATCH", sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("Byte", (String) null, sQLTimeoutException0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      jSONPath_KeySetSegment0.eval(jSONPath0, sQLTransientConnectionException1, propertyNamingStrategy0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Mb)0<3W4MLasLK2+-", "autoTypeSupport", (-95), hashMap0);
      HashSet hashSet0 = (HashSet)jSONPath_KeySetSegment0.eval(jSONPath0, "autoTypeSupport", sQLClientInfoException0);
      assertNotNull(hashSet0);
      assertEquals(6, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pattern pattern0 = Pattern.compile("b|eeP");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("b|eeP", pattern0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("max");
      jSONPath0.evalKeySet(jSONPath_Operator0);
      SQLWarning sQLWarning0 = new SQLWarning("b|eeP");
      ClassLoader.getSystemClassLoader();
      String string0 = jSONPath0.getPath();
      assertEquals("max", string0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("like");
      jSONPath0.getPath();
      Class<JSONPath.RangeSegment> class0 = JSONPath.RangeSegment.class;
      JSONPath.isInt(class0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath.paths((Object) jSONPath0, serializeConfig0);
      String string0 = "yUSKD\"fq5I_b`?-9";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("yUSKD\"fq5I_b`?-9");
      jSONPath_JSONPathParser0.skipWhitespace();
      jSONPath_JSONPathParser0.next();
      jSONPath_JSONPathParser0.readSegement();
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      int[] intArray0 = new int[7];
      intArray0[0] = (-880);
      intArray0[1] = (-2256);
      intArray0[2] = 0;
      intArray0[3] = (-763);
      intArray0[4] = (-623);
      intArray0[5] = 0;
      intArray0[6] = 2772;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("illega str", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":null}", intArray0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, (-763), 234);
      jSONPath_KeySetSegment0.eval(jSONPath0, batchUpdateException0, dataTruncation0);
      // Undeclared exception!
      try { 
        jSONPath_KeySetSegment0.eval(jSONPath0, class0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" I");
      Integer integer0 = new Integer((-599));
      String[] stringArray0 = new String[2];
      stringArray0[0] = " I";
      stringArray0[1] = "PD%}XNVV$";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath1 = new JSONPath(" I");
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment1 = new JSONPath.MultiPropertySegment(stringArray0);
      Long long0 = new Long((-2878));
      Object object0 = jSONPath_MultiPropertySegment0.eval(jSONPath0, jSONPath_MultiPropertySegment1, long0);
      JSONPath.reserveToObject(object0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String string0 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"b\":{}}";
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"b\":{}}");
      int int0 = 0;
      String string1 = "R~IBS+";
      jSONPath0.getPropertyValue("{\"x\":\"hello\",\"y\":7,\"z\":true,\"b\":{}}", "R~IBS+", 313864100207897507L);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("{\"x\":\"hello\",\"y\":7,\"z\":true,\"b\":{}}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"b\":{}}", 0, (Throwable) null);
      int int1 = 0;
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.serializerFeatures.MapSortField", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"b\":{}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(871);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":null}", serializeConfig0, parserConfig0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("|0BJ(", serializeConfig0, parserConfig0);
      int int0 = jSONPath0.evalSize(parserConfig0);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("9B,\"\"QI,?E)3P1V><i$");
      Long.getLong("MiscCodec not support ");
      boolean boolean0 = true;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("MiscCodec not support ", true);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("~55=6_9/ Bq5&$r", "MiscCodec not support ", 5);
      String string0 = "'WIqxNh";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("'WIqxNh", "OOr");
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.eval(jSONPath0, sQLIntegrityConstraintViolationException0, sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path 9B,\"\"QI,?E)3P1V><i$, segement MiscCodec not support 
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("A");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(8, (-1936), (-1936));
      ParserConfig parserConfig0 = new ParserConfig(true);
      ParserConfig.global = parserConfig0;
      jSONPath0.deepScan(jSONPath_RangeSegment0, "()", (List<Object>) null);
      assertEquals("A", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("9B,\"\"QI,?E)3P1V><i$");
      Long.getLong("MiscCodec not support ");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("MiscCodec not support ", true);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("~55=6_9/ Bq5&$r", "MiscCodec not support ", 5);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("O;-:bnu0}C.O(2", "Or");
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.eval(jSONPath0, sQLIntegrityConstraintViolationException0, sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path 9B,\"\"QI,?E)3P1V><i$, segement MiscCodec not support 
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("9B,\"\"QI,?E)3P1V><i$");
      Long.getLong("MiscCodec not support ");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("MiscCodec not support ", true);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("~55=6_9/ Bq5&$r", "MiscCodec not support ", 5);
      String string0 = "'WIqxNh";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("'WIqxNh", "Or");
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.eval(jSONPath0, sQLIntegrityConstraintViolationException0, sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path 9B,\"\"QI,?E)3P1V><i$, segement MiscCodec not support 
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String string0 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[{}],\"b\":{}}";
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[{}],\"b\":{}}", 1000000L, jSONPath_Operator0);
      // Undeclared exception!
      try { 
        Pattern.compile("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[{}],\"b\":{}}");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition
         // {\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[{}],\"b\":{}}
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String string0 = "X@t2<\"]vt.QxTrV9";
      JSONPath jSONPath0 = JSONPath.compile("X@t2<\"]vt.QxTrV9");
      JSONPath.containsValue((Object) null, "X@t2<\"]vt.QxTrV9", (Object) null);
      JSONPath.compile("xn9MNi8me");
      int int0 = 0;
      // Undeclared exception!
      JSONPath.set((Object) jSONPath0, "xn9MNi8me", (Object) jSONPath0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = "X@t2<\"]vt.QxTrV9";
      JSONPath jSONPath0 = JSONPath.compile("X@t2<\"]vt.QxTrV9");
      JSONPath.containsValue((Object) null, "X@t2<\"]vt.QxTrV9", (Object) null);
      JSONPath jSONPath1 = JSONPath.compile("xn9MNi8me");
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath1, jSONPath1, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      JSONPath jSONPath1 = new JSONPath("keySet");
      jSONPath1.contains((Object) "*");
      Long long0 = new Long(1652L);
      DataTruncation dataTruncation0 = new DataTruncation(853, false, false, 1303, 1303);
      dataTruncation0.getNextWarning();
      JSONPath.eval((Object) null, "keySet");
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath1, dataTruncation0, long0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$Operator";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$Operator");
      jSONPath_MultiPropertySegment0.eval(jSONPath0, "com.alibaba.fastjson.JSONPath$Operator", jSONPath0);
      JSONPath jSONPath1 = JSONPath.compile("com.alibaba.fastjson.JSONPath$Operator");
      jSONPath_MultiPropertySegment0.eval(jSONPath1, "com.alibaba.fastjson.JSONPath$Operator", "com.alibaba.fastjson.JSONPath$Operator");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath1, jSONPath_MultiPropertySegment0, 46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath$MultiPropertySegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      int int0 = 90;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(90);
      int int1 = (-1228);
      JSONPath jSONPath0 = new JSONPath("|hQ`90dCO`4aS|~EM6");
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, jSONPath0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      SerializeConfig serializeConfig0 = new SerializeConfig(58, false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("\\-", serializeConfig0, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, jSONPath_SizeSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath$SizeSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" I");
      jSONPath0.containsValue((Object) null, (Object) "ro's#cV");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1527, 35, 2207, 1527, 1516, 75);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("zi", "com.alibaba.fastjson.asm.TypeCollector$1", 46, (Throwable) null);
      // Undeclared exception!
      try { 
        JSONPath.compare(sQLTransientConnectionException0, " I");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLTransientConnectionException cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      boolean boolean0 = jSONPath0.containsValue((Object) "*", (Object) null);
      boolean boolean1 = jSONPath0.contains((Object) null);
      assertFalse(boolean1);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Short short0 = new Short((short)3495);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      boolean boolean2 = JSONPath.eqNotNull(short0, short0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("eX0");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("dN9^", "dN9^", (short)0);
      boolean boolean0 = jSONPath0.contains((Object) sQLTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("/CTM9iu<Y;Sx-^V", "/CTM9iu<Y;Sx-^V", jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("/CTM9iu<Y;Sx-^V");
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath_Operator0, (Object) null, jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      SerializeConfig serializeConfig0 = new SerializeConfig(116, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("n-51FB*2 R", serializeConfig0, parserConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = "s_Nx|";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("s_Nx|");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String string0 = "D";
      JSONPath jSONPath0 = new JSONPath("D");
      jSONPath0.getPath();
      // Undeclared exception!
      try { 
        JSONPath.read(";)Z", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("D");
      JSONPath jSONPath1 = new JSONPath("D");
      boolean boolean0 = jSONPath0.contains((Object) "D");
      Long long0 = new Long((-4421044888715141400L));
      Object object0 = JSONPath.eval((Object) "/beanInfo/clazz/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type", "D");
      assertNull(object0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("YEiY");
      boolean boolean1 = JSONPath.eq((Object) null, (Object) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Float float0 = new Float(1000.0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*");
      // Undeclared exception!
      try { 
        JSONPath.read("*", "*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2*
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.set(2442, 2442, 473);
      Calendar.getAvailableCalendarTypes();
      mockGregorianCalendar0.getTime();
      mockGregorianCalendar0.set((-586), (-586), 2442, 113, 2442, 0);
      mockGregorianCalendar0.getMaximum(0);
      mockGregorianCalendar0.get(0);
      Object object0 = JSONPath.eval((Object) mockGregorianCalendar0, "/beanInfo/clazz/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type");
      assertNull(object0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("P`:x!-VNP");
      boolean boolean0 = JSONPath.eq("P`:x!-VNP", "YEiY");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      boolean boolean0 = jSONPath0.contains((Object) null);
      Long long0 = new Long((-560L));
      Object object0 = JSONPath.eval((Object) long0, "/beanInfo/clazz/annotatedInterfaces/0/annotatedActualTypeArguments/0/type/annotatedSuperclass/type/declaredMethods/1/annotatedExceptionTypes/0/type/annotatedSuperclass/type/constructors/1/annotatedParameterTypes/0/type");
      assertNull(object0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("YEiY");
      boolean boolean1 = JSONPath.eq(jSONPath0, sQLSyntaxErrorException0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(875);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("n", serializeConfig0, parserConfig0);
      String string0 = jSONPath0.getPath();
      assertEquals("n", string0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(41);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.put("Fd,M#ME", clientInfoStatus0);
      int[] intArray0 = new int[5];
      intArray0[0] = 41;
      intArray0[1] = 41;
      intArray0[2] = 41;
      intArray0[3] = 41;
      intArray0[4] = 41;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(")Z[39IHi%Yv");
      jSONPath0.getPath();
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(41);
      String string0 = "Fd,M#ME";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Fd,M#ME", "Fd,M#ME", hashMap0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.put("Fd,M#ME", clientInfoStatus0);
      int[] intArray0 = new int[5];
      intArray0[0] = 41;
      intArray0[1] = 41;
      intArray0[2] = 41;
      intArray0[3] = 41;
      intArray0[4] = 41;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      jSONPath0.getPropertyValues(jSONPath_MultiIndexSegment0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, ")Z[39IHi%Yv", sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      String[] stringArray0 = new String[0];
      JSONPath.reserveToObject(propertyNamingStrategy0, stringArray0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      String string0 = "";
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("", serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = "&6";
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      String string1 = null;
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String string0 = null;
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null, serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("{\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}}");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      String string0 = "&AxjvO5e";
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("&AxjvO5e", 0.0, jSONPath_Operator0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("o2");
      jSONPath_JSONPathParser0.explain();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      jSONPath0.contains((Object) null);
      Long long0 = new Long((-560L));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("java.nio.file.Path");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, jSONPath0, sQLInvalidAuthorizationSpecException1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("(CLjava/lang/String;Ljava/math/BigDecimal;)V", 0.0, jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig(99999999, false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("(CLjava/lang/String;Ljava/math/BigDecimal;)V", serializeConfig0, parserConfig0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      jSONPath_DoubleOpSegement0.apply(jSONPath0, parserConfig0, "(CLjava/lang/String;Ljava/math/BigDecimal;)V", jSONPath_FilterSegment0);
      JSONPath jSONPath1 = JSONPath.compile("(CLjava/lang/String;Ljava/math/BigDecimal;)V");
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath1, jSONPath_Operator0, jSONPath_Operator0, jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String string0 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":\"a string\"}";
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":\"a string\"}", 1745.877, jSONPath_Operator0);
      boolean boolean0 = false;
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":\"a string\"}", serializeConfig0, parserConfig0);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = null;
      try {
        jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MultiPropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = "rlike";
      // Undeclared exception!
      try { 
        JSONPath.extract("rlike", "rlike");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      boolean boolean0 = false;
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement((String) null, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":[],\"value2\":false,\"number\":\"1\"}", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":[],\"value2\":false,\"number\":\"1\"}", (String[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("T[;I?eQ/", false);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("T[;I?eQ/", serializeConfig0, parserConfig0);
      parserConfig0.setAutoTypeSupport(false);
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      int int0 = (-771);
      SQLWarning sQLWarning0 = new SQLWarning("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":-99,\"value\":true,\"value2\":false,\"number\":\"1\"}");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":-99,\"value\":true,\"value2\":false,\"number\":\"1\"}", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":-99,\"value\":true,\"value2\":false,\"number\":\"1\"}");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":-99,\"value\":true,\"value2\":false,\"number\":\"1\"}
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/5");
      jSONPath0.getPath();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/stackTrace/5", ")");
      JSONPath.set((Object) sQLTransientConnectionException0, "/stackTrace/5", (Object) null);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("S_XA!F's", "/stackTrace", (String) null, (String[]) null, true);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      BigInteger bigInteger0 = BigInteger.TEN;
      Set<?> set0 = jSONPath0.evalKeySet(bigInteger0);
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(90);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimal0.toPlainString();
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      int int0 = 88;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(88);
      String string0 = ":";
      JSONPath jSONPath0 = new JSONPath(":");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(":", ":");
      JSONPath jSONPath1 = new JSONPath(":");
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, sQLIntegrityConstraintViolationException0, jSONPath1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLIntegrityConstraintViolationException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" I");
      JSONPath jSONPath1 = JSONPath.compile(" I");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath1, jSONPath1, (-2502), (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":[],\"value2\":false,\"number\":\"1\"}", jSONPath_MaxSegment0, jSONPath_Operator0);
      String string0 = "";
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("", serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-3166));
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("com.alibaba.fastjson.JSONPath$NotNullSegement", jSONPath_ArrayAccessSegment0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$NotNullSegement");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.alibaba.fastjson.JSONPath$NotNullSegement", "LE;SpF&ey");
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, jSONPath_ArrayAccessSegment0, sQLSyntaxErrorException0, "com.alibaba.fastjson.JSONPath$NotNullSegement");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = "getName";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("getName", sQLFeatureNotSupportedException0);
      JSONPath.containsValue((Object) sQLTransactionRollbackException0, "getName", (Object) "getName");
      String string1 = "";
      sQLFeatureNotSupportedException0.fillInStackTrace();
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("", "getName", true);
      JSONPath jSONPath0 = null;
      // Undeclared exception!
      try { 
        jSONPath_RlikeSegement0.apply((JSONPath) null, "", sQLTransactionRollbackException0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$RlikeSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$JSONPathParser");
      JSON.DEFAULT_PARSER_FEATURE = 890;
      String string0 = "bzG*/tYyh_i(=G";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("bzG*/tYyh_i(=G", "bzG*/tYyh_i(=G", (byte)63);
      sQLNonTransientException0.getSuppressed();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{\"fruit\":\"Apple\",\"size\":-99,\"color\":\"Red\",\"(Ljava/lang/Class;)Ljava/util/Collection;\":true,\"value2\":true,\"number\":\"1\"}");
      jSONPath0.extract((DefaultJSONParser) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONPath0.eval((Object) "com.alibaba.fastjson.JSONPath$JSONPathParser");
      String string1 = "com.alibaba.fastjson.JSONPath$DoubleOpSegement";
      // Undeclared exception!
      try { 
        JSONPath.set((Object) sQLNonTransientException0, "com.alibaba.fastjson.JSONPath$DoubleOpSegement", (Object) "com.alibaba.fastjson.JSONPath$DoubleOpSegement");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "com.alibaba.fastjson.serializer.SmplePropertyPreFilter";
      stringArray0[1] = "$*'5P:/-ijT,Vl";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("':");
      Long[] longArray0 = new Long[6];
      Long long0 = new Long((-2147483648L));
      longArray0[0] = long0;
      Long long1 = new Long(5614464919154503228L);
      longArray0[1] = long1;
      Long long2 = new Long(5614464919154503228L);
      longArray0[0] = long2;
      Long long3 = new Long(1638L);
      longArray0[3] = long3;
      Long long4 = new Long(5410L);
      longArray0[4] = long4;
      Long long5 = new Long((-1014497654951707614L));
      longArray0[5] = long5;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("<uNiM-L", longArray0, true);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntObjInSegement0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_Filter0);
      JSONPath jSONPath0 = new JSONPath("$*'5P:/-ijT,Vl");
      DataTruncation dataTruncation0 = new DataTruncation(105, true, true, 105, 132);
      jSONPath_Filter0.apply(jSONPath0, dataTruncation0, jSONPath0, jSONPath0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("<uNiM-L", true);
      // Undeclared exception!
      try { 
        jSONPath_MultiPropertySegment0.eval((JSONPath) null, jSONPath_FilterSegment0, jSONPath_PropertySegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MultiPropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "com.alibaba.fastjson.serializer.SimplePropertyPreFilter";
      stringArray0[1] = "$*'5P:/-ijT,Vl";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("':");
      Long[] longArray0 = new Long[6];
      Long long0 = new Long((-2147483648L));
      longArray0[0] = long0;
      Long long1 = new Long(5614464919154503228L);
      longArray0[1] = long1;
      Long long2 = new Long(5614464919154503228L);
      longArray0[2] = long2;
      Long long3 = new Long(1638L);
      longArray0[3] = long3;
      Long long4 = new Long(5410L);
      longArray0[4] = long4;
      Long long5 = new Long((-1014497654951707614L));
      longArray0[5] = long5;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("<uNiM-L", longArray0, true);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntObjInSegement0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_Filter0);
      JSONPath jSONPath0 = new JSONPath("$*'5P:/-ijT,Vl");
      DataTruncation dataTruncation0 = new DataTruncation(105, true, true, 105, 132);
      jSONPath_Filter0.apply(jSONPath0, dataTruncation0, jSONPath0, jSONPath0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("<uNiM-L", true);
      // Undeclared exception!
      try { 
        jSONPath_MultiPropertySegment0.eval((JSONPath) null, jSONPath_FilterSegment0, jSONPath_PropertySegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MultiPropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "com.alibaba.fastjson.serializer.SmplePropertyPreFilter";
      stringArray0[1] = "$*'5P:/-ijT,Vl";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("':");
      Long[] longArray0 = new Long[6];
      Long long0 = new Long((-2147483648L));
      longArray0[0] = long0;
      Long long1 = new Long(5614464919154503228L);
      longArray0[1] = long1;
      Long long2 = new Long(5614464919154503228L);
      longArray0[0] = long2;
      Long long3 = new Long(1638L);
      longArray0[3] = long3;
      Long long4 = new Long(5410L);
      longArray0[4] = long4;
      Long long5 = new Long((-1014497654951707614L));
      longArray0[5] = long5;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("<uNiM-L", longArray0, true);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntObjInSegement0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_Filter0);
      JSONPath jSONPath0 = new JSONPath("$*'5P:/-ijT,Vl");
      DataTruncation dataTruncation0 = new DataTruncation(105, true, true, 105, 132);
      jSONPath_Filter0.apply(jSONPath0, dataTruncation0, jSONPath0, jSONPath0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("<uNiM-L", true);
      // Undeclared exception!
      try { 
        jSONPath_MultiPropertySegment0.eval((JSONPath) null, jSONPath_FilterSegment0, jSONPath_PropertySegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MultiPropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("z_");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      JSONPath jSONPath0 = JSONPath.compile("z_");
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "z_", "z_");
      assertEquals("z_", object0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath jSONPath0 = new JSONPath("3Ervf<Sz7&KU.");
      boolean boolean0 = jSONPath0.removePropertyValue("3Ervf<Sz7&KU.", "3Ervf<Sz7&KU.", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "e");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "e");
      JSONPath.paths((Object) "e");
      String string0 = "xH";
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("xH");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("xH");
      Long[] longArray0 = new Long[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("NEV(", longArray0, false);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null, serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-3851359326990528739L));
      longArray0[0] = long0;
      Long long1 = new Long((-1511L));
      longArray0[1] = long1;
      Long long2 = new Long((long) longArray0[0]);
      longArray0[2] = long2;
      Long long3 = new Long((-3412L));
      longArray0[3] = long3;
      Long long4 = new Long(204L);
      longArray0[4] = long4;
      Long long5 = new Long(2027L);
      longArray0[5] = long5;
      Long long6 = new Long(1534439610567445754L);
      longArray0[6] = long6;
      Long long7 = new Long(1534439610567445754L);
      longArray0[7] = long7;
      Long long8 = new Long((-4270347329889690746L));
      longArray0[8] = long8;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("com.alibaba.fastjson.JSONValidator$UTF16Validator", longArray0, false);
      JSONPath jSONPath0 = new JSONPath("d50|/IcV!-pI*al[3");
      Short short0 = new Short((short)0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-1974);
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("d50|/IcV!-pI*al[3", intArray0, sQLInvalidAuthorizationSpecException0);
      SQLWarning sQLWarning0 = new SQLWarning("@P<z:0mV", "\"Bx=CM", batchUpdateException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.alibaba.fastjson.JSONValidator$UTF16Validator", "com.alibaba.fastjson.JSONValidator$UTF16Validator", sQLWarning0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("d50|/IcV!-pI*al[3", sQLNonTransientException0);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, short0, sQLSyntaxErrorException0, "\"Bx=CM");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":[],\"number\":\"1\"}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but '{'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, true, false, 34, 34);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "~n";
      stringArray0[2] = "~n";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(dataTruncation0, stringArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      // Undeclared exception!
      try { 
        JSONPath.extract("bCRXOH30w<vL", "%%");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2bCRXOH30w<vL
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("", "", false);
      String string0 = "~+my(tZeOoGrd#pKY)Y";
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("~+my(tZeOoGrd#pKY)Y", serializeConfig0, parserConfig0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, false, false, false);
      Class<JSONPath.SizeSegment> class1 = JSONPath.SizeSegment.class;
      Class<BigInteger> class2 = BigInteger.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.deny.internal", hashMap0);
      int int0 = 1003;
      int int1 = (-677);
      FieldInfo fieldInfo0 = null;
      try {
        fieldInfo0 = new FieldInfo((String) null, class1, class2, javaBeanInfo0.clazz, (Field) null, 1003, 1003, (-677));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.FieldInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("*", parserConfig0);
      byte byte0 = (byte)0;
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.parser.deny", "*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" I");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      String[] stringArray0 = new String[4];
      stringArray0[0] = " I";
      // Undeclared exception!
      try { 
        JSONPath.extract(" I", " I");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String string0 = "*";
      // Undeclared exception!
      try { 
        JSONPath.extract("", "*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.JSONPath$WildCardSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("java.beans.Tansient", "java.beans.Tansient");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Long long0 = new Long((-560L));
      // Undeclared exception!
      try { 
        JSONPath.extract("^*ZkiDMnD<-oz", "^*ZkiDMnD<-oz");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2^*ZkiDMnD<-oz
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "$<#19");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3?Z-");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("/cause/stackTrace/2", 4172L, 4172L, false);
      JSONPath jSONPath0 = new JSONPath("3?Z-");
      jSONPath_IntBetweenSegement0.apply(jSONPath0, "3?Z-", (Object) null, "3?Z-");
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      JSONPath.isInt(class0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "/cause/stackTrace/2", (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 3?Z-
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      String string0 = "java.lang.AutoCloseable";
      JSONPath.compile("java.lang.AutoCloseable");
      String string1 = "dX";
      Class<SQLDataException> class0 = SQLDataException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      try { 
        javaBeanSerializer0.getFieldValues("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":\"a string\"}}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"x\":\"hello\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      String string0 = "IeJ~vQtm;w";
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      serializeConfig0.setPropertyNamingStrategy(propertyNamingStrategy0);
      boolean boolean0 = false;
      JSONPath.compile("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":[]}");
      int[] intArray0 = new int[7];
      intArray0[0] = 16;
      intArray0[1] = (-375);
      intArray0[2] = 0;
      intArray0[3] = (-41);
      intArray0[4] = 63;
      intArray0[5] = 0;
      intArray0[6] = 7;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":true,\"b\":{}}", "[U'Ad", intArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":[]}", true);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      SerializeConfig serializeConfig0 = new SerializeConfig(791, false);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("", (String[]) null);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/:TM9iu<Y;Sx-^V");
      String[] stringArray0 = new String[0];
      JSONPath.reserveToArray("/:TM9iu<Y;Sx-^V", stringArray0);
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, jSONPath0, jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(58, false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("\\-", serializeConfig0, parserConfig0);
      JSONPath.paths((Object) jSONPath0, serializeConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.safeMode");
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("fastjson.parser.deny");
      JSONPath jSONPath0 = new JSONPath("java/lang/Byte");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny.internal");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Long long0 = new Long((-3851359326990528739L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("5!*.9!o1!J[8p7jD]?", sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("vmqAYN6", "5!*.9!o1!J[8p7jD]?", sQLTimeoutException0);
      Map<String, Object> map0 = JSONPath.paths((Object) "R]h/LY2~{'RKQNp*");
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "yo-0Y4H%\\EGyZ[ag:#";
      SQLWarning sQLWarning0 = new SQLWarning("step must greater than zero : ");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("yo-0Y4H%EGyZ[ag:#", "ZN", 37, sQLWarning0);
      sQLRecoverableException0.setNextException(sQLWarning0);
      JSONPath.paths((Object) sQLRecoverableException0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      String string1 = "WJc{BP tgR|NG;Z/";
      JSONPath jSONPath0 = new JSONPath("WJc{BP tgR|NG;Z/");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "WJc{BP tgR|NG;Z/");
      SQLWarning sQLWarning1 = new SQLWarning("fKDkB(", "fKDkB(", 37, sQLRecoverableException0);
      MockFile mockFile0 = new MockFile("step must greater than zero : ", "/stackTrace/2");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 37);
      // Undeclared exception!
      try { 
        Charset.forName("$");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // $
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String string0 = "]";
      JSONPath jSONPath0 = JSONPath.compile("]");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      jSONPath0.size((Object) propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        JSONPath.Operator.valueOf("\\-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.alibaba.fastjson.JSONPath.Operator.\\-
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[]");
      SQLException sQLException0 = new SQLException("[]", "[]", (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[]", (String) null, sQLException0);
      Short short0 = new Short((short)3495);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      Class<SQLException> class0 = SQLException.class;
      JSONPath jSONPath0 = JSONPath.compile("[]");
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      //  // Unstable assertion: assertNotNull(javaBeanDeserializer0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("[]", "[]", (Throwable) null);
      Map<String, Object> map0 = JSONPath.paths((Object) sQLInvalidAuthorizationSpecException1);
      //  // Unstable assertion: assertEquals(90, map0.size());
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      JSONPath.paths((Object) sQLWarning0);
      String string0 = "bv]n";
      JSONPath jSONPath0 = new JSONPath("bv]n");
      String string1 = "\"a string\"";
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"a string\"", "\"a string\"", (-1796), sQLClientInfoException0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : bv]n
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      String string0 = "*";
      JSONPath jSONPath0 = new JSONPath("*");
      jSONPath0.size((Object) "*");
      String string1 = "!d})Kr1t(D+u7O,^:";
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = null;
      try {
        jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("!d})Kr1t(D+u7O,^:", "*", true);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '*' near index 0
         // *
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String string0 = "^";
      Long long0 = new Long((-5194641081268104286L));
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath.paths((Object) jSONPath_WildCardSegment0);
      String string1 = null;
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = null;
      try {
        jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      JSONPath.paths((Object) null);
      try { 
        Short.valueOf(";?Z", 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 0 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("2/^To_8, 6BdF9MmXD");
      jSONPath_JSONPathParser0.readValue();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"length\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":[-99],\"number\":\"1\"}");
      JSONPath jSONPath0 = new JSONPath("{\"length\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":[-99],\"number\":\"1\"}");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) jSONPath_SizeSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"length\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":[-99],\"number\":\"1\"}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      String string0 = "qEl<";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("qEl<");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":99,\"number\":\"1\"}";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":99,\"number\":\"1\"}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readSegement();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":99,\"number\":\"1\"}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":\"Apple\",\"siz\":Large\",\"color\":\"Red\",\"value\":true,\"value2\":[],\"number\":\"1\"}");
      Feature feature0 = Feature.DisableFieldSmartMatch;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[2];
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      Class<Float> class0 = Float.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      javaBeanSerializer0.getPropertyFilters();
      Class<?> class1 = javaBeanSerializer0.getType();
      parserConfig0.getDeserializer((Type) class1);
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      // Undeclared exception!
      try { 
        JSONPath.extract("can not cast to byte[], value : ", (String) null, parserConfig0, 116, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("9B,\"\"QI,?E)3P1V><i$");
      Long.getLong("MiscCodec not support ");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("MiscCodec not support ", true);
      String string0 = "\\~55=6_9/ Bq5&$r";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("~55=6_9/ Bq5&$r", "MiscCodec not support ", 5);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("'WIqxNh", "OOr");
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.eval(jSONPath0, sQLIntegrityConstraintViolationException0, sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path 9B,\"\"QI,?E)3P1V><i$, segement MiscCodec not support 
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      JSONPath.compile("eX0");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("dN9^", "dN9^", (short)0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.SupportAutoType;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableSpecialKeyDetect;
      featureArray0[1] = feature1;
      // Undeclared exception!
      try { 
        JSONPath.extract("$0~[L.>B:+dI5D[6", "$0~[L.>B:+dI5D[6", parserConfig0, (-3420), featureArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2$0~[L.>B:+dI5D[6
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("-", "-", (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("-", "EpP_Rz#yYyoTu(d,", sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        JSONPath.compare(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLSyntaxErrorException cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$IntObjInSegement");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }
}
