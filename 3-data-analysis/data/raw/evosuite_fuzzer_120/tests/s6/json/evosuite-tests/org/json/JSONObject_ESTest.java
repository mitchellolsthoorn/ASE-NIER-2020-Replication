/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 23:29:31 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Dialog;
import java.awt.GraphicsDevice;
import java.awt.MultipleGradientPaint;
import java.awt.TrayIcon;
import java.awt.Window;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterInputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.security.CryptoPrimitive;
import java.security.KeyRep;
import java.sql.ClientInfoStatus;
import java.sql.JDBCType;
import java.sql.PseudoColumnUsage;
import java.sql.RowIdLifetime;
import java.text.Normalizer;
import java.time.Month;
import java.util.Collection;
import java.util.Enumeration;
import java.util.Formatter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.annotation.Resource;
import javax.smartcardio.CardTerminals;
import javax.swing.GroupLayout;
import javax.swing.SortOrder;
import javax.tools.DocumentationTool;
import javax.tools.JavaFileObject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      
      int int0 = jSONObject0.optInt("\"\"", (-1117));
      assertEquals((-1117), int0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject jSONObject1 = jSONObject0.put("JSON does not allow non-finite numbers.", (Object) pipedWriter0);
      JSONObject.valueToString(jSONObject0);
      double double0 = jSONObject1.optDouble("JSON does not allow non-finite numbers.", 1.0);
      assertEquals(1.0, double0, 0.01);
      
      try { 
        JSONObject.writeValue(pipedWriter0, "org.json.JSONObject@0000000001", (-1251), 10);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1504);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      JSONObject.quote((String) null, (Writer) mockPrintWriter0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1504);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      JSONObject.quote("", (Writer) mockPrintWriter0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{p:eDLKG6Y;H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 13 [character 14 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)73);
      BigDecimal bigDecimal0 = new BigDecimal((-676));
      jSONObject0.optBigDecimal(",:]}/\"[{;=#", bigDecimal0);
      jSONObject0.optNumber(",:]}/\"[{;=#", (Number) byte0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",:]}/\"[{;=#", false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(",:]}");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)73;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      mockFileOutputStream0.getChannel();
      JSONObject.wrap(mockFileOutputStream0);
      jSONObject0.optBoolean(",:]}/\"[{;=#");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"\"", (Object) "\"\"");
      jSONObject1.optInt("\"\"", (-1117));
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject jSONObject2 = jSONObject0.put("JSON does not allow non-finite numbers.", (Object) pipedWriter0);
      JSONObject.valueToString(jSONObject0);
      jSONObject2.optDouble("JSON does not allow non-finite numbers.", 1.0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Short short0 = new Short((short) (-3));
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("iterator");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONObject0.optBigDecimal("iterator", (BigDecimal) null);
      HashMap<PushbackInputStream, SortOrder> hashMap0 = new HashMap<PushbackInputStream, SortOrder>();
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put((float) (short) (-3));
      try { 
        jSONObject1.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((int) (short)5);
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JSONObject jSONObject1 = jSONObject0.put("0000", (Object) sequenceInputStream0);
      jSONObject0.optInt("6`c", 88);
      jSONObject1.optFloat("6`c", 0.0F);
      JSONObject.stringToValue("0000");
      String string0 = JSONObject.quote("yWt2k=Tim)`3$se>xIa");
      BigDecimal bigDecimal0 = new BigDecimal(88);
      jSONObject0.optNumber("", (Number) bigDecimal0);
      String string1 = jSONObject1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\"\"";
      JSONObject jSONObject1 = jSONObject0.put("\"\"", (Object) "\"\"");
      jSONObject1.optInt("\"\"", (-1117));
      jSONObject1.optFloat("\"\"", 0.0F);
      String string1 = "#j^J\\Vj?10A4G";
      try { 
        jSONObject0.getBoolean("\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<JSONObject, DataOutputStream> hashMap0 = new HashMap<JSONObject, DataOutputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.increment("&I8-0");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)10;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject0.optBigInteger((String) null, bigInteger0);
      jSONObject1.getLong("&I8-0");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.names();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("&I8-0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      assertEquals(2, jSONObject0.length());
      
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      Byte byte0 = new Byte((byte)60);
      Object object0 = JSONObject.wrap(byte0);
      JSONObject.testValidity(object0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("istoString");
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(mockFileWriter0);
      assertFalse(jSONObject1.isEmpty());
      
      boolean boolean0 = jSONObject0.optBoolean("getbyteValue");
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}");
      jSONObject1.similar(jSONObject0);
      Float float0 = new Float(Float.NaN);
      try { 
        jSONObject1.accumulate((String) null, float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      JSONArray jSONArray1 = jSONObject0.names();
      Class<Thread.State> class0 = Thread.State.class;
      char[] charArray0 = new char[9];
      charArray0[0] = 'X';
      charArray0[1] = 'R';
      charArray0[2] = ',';
      charArray0[3] = 'J';
      charArray0[4] = 'L';
      charArray0[5] = '0';
      charArray0[6] = 'H';
      charArray0[7] = 's';
      charArray0[8] = 'A';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      stringWriter0.append((CharSequence) charBuffer1);
      Thread.State thread_State0 = Thread.State.WAITING;
      jSONArray1.optEnum(class0, 26, thread_State0);
      // Undeclared exception!
      JSONObject.writeValue(stringWriter0, jSONArray1, 2923, 2923);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Desktop.Action, BigInteger> hashMap0 = new HashMap<Desktop.Action, BigInteger>();
      Desktop.Action desktop_Action0 = Desktop.Action.PRINT;
      hashMap0.put(desktop_Action0, (BigInteger) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("wm@sl>{?512A~[?+<", (Object) null);
      jSONObject1.opt((String) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"\"", (Object) "\"\"");
      jSONObject1.optInt("\"\"", (-1117));
      jSONObject1.optFloat("\"\"", 0.0F);
      JSONObject.stringToValue("#j^JVj?10A4G");
      JSONObject.quote("\"\"");
      BigDecimal bigDecimal0 = new BigDecimal(123);
      jSONObject1.optNumber("\"\"", (Number) bigDecimal0);
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Short short0 = new Short((short)65);
      Short short1 = new Short((short) (-238));
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((short) (-238));
      JSONObject jSONObject1 = jSONObject0.put("\"\"", (Object) long0);
      long long1 = jSONObject0.optLong("\"\"", (long) 18);
      assertEquals((-238L), long1);
      
      jSONObject1.toString((int) (short) (-238));
      assertTrue(long0.equals((Object)long1));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Byte byte0 = new Byte((byte)101);
      JSONObject.numberToString(byte0);
      JSONObject jSONObject0 = new JSONObject((int) (byte)101);
      String string0 = "org.json.JSONObject$Null";
      JSONObject.quote("JSONArray initial value should be a string or collection or array.");
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      jSONObject0.put("org.json.JSONObject$Null", (Map<?, ?>) hashMap0);
      jSONObject0.optInt("org.json.JSONObject$Null", 9);
      MockFileWriter mockFileWriter0 = new MockFileWriter("S>kKeU[$h`''", false);
      String string1 = "*'!kj=S@9+\"ZvM=OKP8";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("*'!kj=S@9+\"ZvM=OKP8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("D%*]vJh=4QBov/o=eBV", 0.0F);
      MockPrintStream mockPrintStream0 = new MockPrintStream("D%*]vJh=4QBov/o=eBV");
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charset0);
      JSONObject.quote("D%*]vJh=4QBov/o=eBV", (Writer) outputStreamWriter0);
      String string0 = "3;O}e5{CoeSM{7R";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("D%*]vJh=4QBov/o=eBV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      HashMap<Desktop.Action, BigInteger> hashMap0 = new HashMap<Desktop.Action, BigInteger>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Desktop.Action desktop_Action0 = Desktop.Action.MAIL;
      hashMap0.put(desktop_Action0, (BigInteger) null);
      jSONObject0.accumulate("ITSILd[2", "org.json.JSONArray@0000000001");
      jSONObject0.opt("org.json.JSONArray@0000000001");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      JSONArray jSONArray1 = jSONObject0.names();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      jSONObject0.toJSONArray(jSONArray1);
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Short short0 = new Short((short)4090);
      Long long0 = new Long((short)4090);
      JSONObject.wrap(long0);
      JSONObject jSONObject0 = new JSONObject();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-523));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((int) (short)0);
      Object object0 = JSONObject.stringToValue("000");
      assertEquals("000", object0);
      
      JSONObject.valueToString("000");
      double double0 = jSONObject0.optDouble("000");
      assertEquals(Double.NaN, double0, 0.01);
      
      HashMap<Character, Long> hashMap0 = new HashMap<Character, Long>();
      Character character0 = Character.valueOf('Y');
      Long long0 = new Long((short)0);
      hashMap0.put(character0, long0);
      JSONObject jSONObject1 = jSONObject0.put("000", (Map<?, ?>) hashMap0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      hashMap0.keySet();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject.getNames((Object) jSONObject0);
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject1 = jSONObject0.putOnce("x+OmpOU", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("~/>?u=pSGx]Ftc]y*", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Component.BaselineResizeBehavior, MockPrintStream> hashMap0 = new HashMap<Component.BaselineResizeBehavior, MockPrintStream>(18, 18);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject.wrap(object0);
      JSONObject jSONObject1 = jSONObject0.increment("y8");
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Short short0 = new Short((short)27);
      Short short1 = new Short((short)27);
      String string0 = JSONObject.numberToString(short0);
      JSONObject.stringToValue("true");
      String string1 = JSONObject.quote(" [character ");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<ByteArrayInputStream, Month> hashMap0 = new HashMap<ByteArrayInputStream, Month>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("zK\":boe?C@0U`Ck5", (-20.154213));
      LinkedList<PipedOutputStream> linkedList0 = new LinkedList<PipedOutputStream>();
      JSONObject.getNames(jSONObject1);
      // Undeclared exception!
      try { 
        jSONObject2.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"\"", (Object) "\"\"");
      int int0 = new Integer((-1117));
      jSONObject1.optFloat("\"\"", 0.0F);
      JSONObject jSONObject2 = jSONObject0.optJSONObject("P-ehrZYW|kb<i9theqr");
      assertNull(jSONObject2);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      JSONObject.quote("NHs|G>-ugyS");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.stringToValue("false");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("NHs|G>-ugyS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.has("isspliterator");
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Short short0 = new Short((short)27);
      Short short1 = new Short((short)27);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"\"", (Object) "\"\"");
      jSONObject1.optInt("\"\"", (-1117));
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.APPLICATION_MODAL;
      jSONObject1.optEnum(class0, "\"\"", dialog_ModalityType0);
      jSONObject0.optBoolean("\"\"", false);
      JSONObject jSONObject2 = jSONObject0.optJSONObject("qHIJ+rb7");
      assertNull(jSONObject2);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 18;
      HashMap<Component.BaselineResizeBehavior, MockPrintStream> hashMap0 = new HashMap<Component.BaselineResizeBehavior, MockPrintStream>(18, 18);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "gettri6m";
      Character character0 = Character.valueOf('i');
      JSONObject jSONObject1 = jSONObject0.put("gettri6m", (Object) character0);
      // Undeclared exception!
      try { 
        jSONObject1.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("6k9Jt0Ka}O]B?pe");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      PipedInputStream pipedInputStream0 = new PipedInputStream(28);
      JSONObject.testValidity(double0);
      jSONObject0.putOpt("1", "1");
      long long0 = jSONObject0.optLong("1");
      assertEquals(3, jSONObject0.length());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("org.json.JSONPointerException", "org.json.JSONPointerException");
      String string0 = "'KZr5}Q)k>XsLF*V";
      Boolean boolean0 = new Boolean("'KZr5}Q)k>XsLF*V");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      JSONObject.wrap(bigDecimal0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("' and instead saw '", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name ' and instead saw ', locale zh_CN
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<JSONObject, DataOutputStream> hashMap0 = new HashMap<JSONObject, DataOutputStream>();
      Double double0 = new Double(1845.06860561);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = JSONObject.wrap(bigDecimal0);
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toMap();
      JSONObject jSONObject1 = new JSONObject(object0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"\"", (Object) "\"\"");
      int int0 = jSONObject1.optInt("\"\"", (-1117));
      assertEquals((-1117), int0);
      
      float float0 = jSONObject1.optFloat("\"\"", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
      
      Object object0 = JSONObject.stringToValue("#j^JVj?10A4G");
      assertEquals("#j^JVj?10A4G", object0);
      
      Object object1 = JSONObject.wrap("#j^JVj?10A4G");
      assertTrue(object1.equals((Object)object0));
      
      boolean boolean0 = jSONObject1.optBoolean("\"\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<JSONObject, DataOutputStream> hashMap0 = new HashMap<JSONObject, DataOutputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.increment("&I8-0");
      String string0 = JSONObject.doubleToString(0L);
      assertEquals("0", string0);
      
      long long0 = jSONObject1.getLong("&I8-0");
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      JSONObject.quote("NHs|G>-ugyS");
      JSONArray jSONArray0 = new JSONArray();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<PipedWriter> linkedList0 = new LinkedList<PipedWriter>();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      JSONObject.getNames(jSONObject0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      jSONObject1.getLong("NHs|G>-ugyS");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 7L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      jSONObject0.query(jSONPointer0);
      jSONObject0.optFloat("<XS/e AQ7a>");
      JSONObject.stringToValue("m?S4qx!^<&<\"x'K");
      JSONObject jSONObject1 = jSONObject0.putOpt("m?S4qx!^<&<\"x'K", "m?S4qx!^<&<\"x'K");
      int int0 = jSONObject1.optInt("m?S4qx!^<&<\"x'K");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("`Wu", 1.0);
      jSONObject0.increment("`Wu");
      String string0 = "8~!{";
      BigInteger.valueOf(3687L);
      LinkedList<ClientInfoStatus> linkedList0 = new LinkedList<ClientInfoStatus>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)4);
      String string0 = "2";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("2");
      JSONObject.wrap(mockFileOutputStream0);
      JSONObject jSONObject1 = new JSONObject(mockFileOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<MockFileReader> linkedList1 = new LinkedList<MockFileReader>();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      LinkedList<MockFileReader> linkedList2 = new LinkedList<MockFileReader>();
      linkedList2.add(mockFileReader0);
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(fileDescriptor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)73);
      jSONObject0.optNumber(",:]}/\"[{;=#", (Number) byte0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",:]}/\"[{;=#", false);
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(mockFileOutputStream0);
      assertEquals(2, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = jSONObject0.optBoolean(",:]}/\"[{;=#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short1);
      try { 
        jSONObject1.increment("NHs|G>-ugyS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000005].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      JSONObject.wrap(short1);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "NHs|G>-ugyS\\";
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short1);
      jSONObject1.toString((int) (short)0);
      try { 
        jSONObject1.increment("NHs|G>-ugyS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000007].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Short short0 = new Short((short)27);
      Short short1 = new Short((short)27);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"\"", (Object) "\"\"");
      jSONObject1.optLong("\"\"", (long) (short)27);
      String string0 = jSONObject0.toString((int) (short)27);
      assertNotNull(string0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      jSONObject1.getString("\"\"");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      Locale locale0 = new Locale("\"\"", "Unable to increment [");
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        jSONObject1.getBigDecimal("\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<RoundingMode, String> hashMap0 = new HashMap<RoundingMode, String>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("o-*`T!adW", 563.40385907366);
      jSONObject0.optString("o-*`T!adW");
      Object object0 = jSONObject0.optQuery("");
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long.getLong("\"\"");
      jSONObject0.optNumber("\"\"", (Number) null);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<Component.BaselineResizeBehavior, MockPrintStream> hashMap0 = new HashMap<Component.BaselineResizeBehavior, MockPrintStream>(18, 18);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.increment("y8");
      BigInteger bigInteger0 = BigInteger.valueOf(18);
      jSONObject2.optNumber("y8", (Number) bigInteger0);
      try { 
        jSONObject1.getDouble("8~!{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<JSONObject, DataOutputStream> hashMap0 = new HashMap<JSONObject, DataOutputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Byte byte0 = new Byte((byte)101);
      String string0 = JSONObject.numberToString(byte0);
      JSONObject jSONObject0 = new JSONObject((int) (byte)101);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      Integer integer0 = new Integer(369);
      Float float0 = new Float((-595.394F));
      hashMap0.put(integer0, float0);
      jSONObject0.put("org.json.JSONObject$Null", (Map<?, ?>) hashMap0);
      jSONObject0.optInt("org.json.JSONObject$Null", 9);
      MockFileWriter mockFileWriter0 = new MockFileWriter("S>kKneU[$h`''", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)101;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)101;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      String string1 = JSONObject.quote("S>kKneU[$h`''");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("D%*]vJh=4QBov/o=eBV", 0.0F);
      HashMap<CardTerminals.State, TrayIcon.MessageType> hashMap0 = new HashMap<CardTerminals.State, TrayIcon.MessageType>();
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject2.optBoolean("D%*]vJh=4QBov/o=eBV", false);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      Long long0 = new Long((-466L));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject0.optBigDecimal("org.json.JSONObject$Null", bigDecimal0);
      try { 
        jSONObject1.append("D%*]vJh=4QBov/o=eBV", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[D%*]vJh=4QBov/o=eBV] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}");
      jSONObject1.similar(jSONObject0);
      jSONObject1.put("{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}", (Object) "{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}");
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        jSONObject1.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.stringToValue("flo");
      assertEquals("flo", object0);
      
      Object object1 = JSONObject.NULL;
      JSONObject.wrap(object1);
      boolean boolean0 = jSONObject0.optBoolean("&Z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Short short0 = new Short((short)17);
      Object object0 = JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      jSONObject0.optString("null");
      jSONObject0.optDouble("null");
      LinkedList<BufferedOutputStream> linkedList0 = new LinkedList<BufferedOutputStream>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      HashMap<FilterInputStream, Thread.State> hashMap0 = new HashMap<FilterInputStream, Thread.State>();
      JSONObject jSONObject2 = jSONObject0.accumulate("istoMap", object0);
      jSONObject2.optString("NHs|G>-ugyS", "");
      jSONObject2.append("", "istoMap");
      jSONObject2.optBigInteger("d^+T%z[B[;", (BigInteger) null);
      assertEquals(3, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "D%*]vJh=4QBov/o=eBV";
      JSONObject jSONObject1 = jSONObject0.put("D%*]vJh=4QBov/o=eBV", 0.0F);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      Long.getLong("D%*]vJh=4QBov/o=eBV");
      try { 
        jSONObject1.append("D%*]vJh=4QBov/o=eBV", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[D%*]vJh=4QBov/o=eBV] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<RoundingMode, String> hashMap0 = new HashMap<RoundingMode, String>();
      JSONObject jSONObject0 = new JSONObject();
      Character.valueOf('I');
      JSONObject jSONObject1 = jSONObject0.put("gettri6m", (Object) "gettri6m");
      String string0 = "null";
      jSONObject0.optString("9");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("gettri6m");
      jSONObject1.optNumber("gettri6m");
      try { 
        jSONObject0.getBigDecimal("lon");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Object, RowIdLifetime> hashMap0 = new HashMap<Object, RowIdLifetime>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "X*PV\"]:zcBq9";
      stringArray0[1] = "X5P q";
      stringArray0[2] = "getDeclaringClass";
      stringArray0[3] = "\"wI";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONObject jSONObject2 = (JSONObject)jSONObject1.query(jSONPointer0);
      assertEquals(0, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, "poll", 1696, (-1708));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(2, map0.size());
      
      jSONObject0.optBigDecimal("WV-ddR3)L`QFm", (BigDecimal) null);
      JSONObject jSONObject1 = jSONObject0.put("WV-ddR3)L`QFm", (Object) double0);
      jSONObject0.toString(767);
      jSONObject1.names();
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write((Writer) stringWriter0, (-1027), 13);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toMap();
      JSONObject jSONObject1 = jSONObject0.put("WV-ddR3)L`QFm", (Object) double0);
      LinkedList<FilterOutputStream> linkedList0 = new LinkedList<FilterOutputStream>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      jSONObject0.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.optNumber("WV-ddR3)L`QFm");
      jSONObject1.toJSONArray((JSONArray) null);
      stringWriter0.append('n');
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList1);
      jSONObject0.toJSONArray((JSONArray) null);
      float float0 = jSONObject1.optFloat("WV-ddR3)L`QFm");
      assertEquals(3, jSONObject0.length());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.put("\"\"", (Object) jSONObject0);
      jSONObject1.optLong("\"\"", 200L);
      Class<KeyRep.Type> class0 = KeyRep.Type.class;
      try { 
        jSONObject0.getEnum(class0, "\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000006] is not an enum of type java.io.StringWriter@0000000007.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Byte byte0 = new Byte((byte)101);
      JSONObject.numberToString(byte0);
      JSONObject jSONObject0 = new JSONObject((int) (byte)101);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject1 = jSONObject0.put("org.json.JSONObject$Null", (Map<?, ?>) hashMap0);
      int int0 = jSONObject0.optInt("org.json.JSONObject$Null", 9);
      assertEquals(9, int0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("S>kKneU[$h`''", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)101;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)101;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      jSONObject0.optBigInteger("org.json.JSONObject$Null", bigInteger2);
      long long0 = jSONObject1.optLong("org.json.JSONObject$Null", 99L);
      assertEquals(99L, long0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      Short short0 = new Short((short)1748);
      JSONObject.numberToString(short0);
      stringWriter0.append((CharSequence) "java.lang.Short@0000000003");
      PipedInputStream pipedInputStream0 = new PipedInputStream(28);
      JSONObject.testValidity(double0);
      boolean boolean0 = jSONObject0.similar(stringWriter0);
      assertFalse(boolean0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toMap();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)115;
      byteArray0[8] = (byte)53;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONObject jSONObject1 = jSONObject0.put("WV-ddR3)L`QFm", (Object) double0);
      Short short0 = new Short((short)8);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(34);
      jSONObject0.putOpt("NsG>-ugyS", byteArrayOutputStream0);
      jSONObject1.get("NsG>-ugyS");
      Object object0 = JSONObject.stringToValue("utf-8");
      String string0 = JSONObject.quote("getfloatValue");
      assertFalse(string0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Short short0 = new Short((short)17);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      PipedInputStream pipedInputStream0 = new PipedInputStream((short)17);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      JSONObject jSONObject1 = new JSONObject(dataInputStream0);
      jSONObject1.remove("R=\"XFnvy#hPMTiubyhd");
      HashMap<Dialog.ModalExclusionType, CharArrayWriter> hashMap0 = new HashMap<Dialog.ModalExclusionType, CharArrayWriter>();
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertNull(stringArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)15;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[4] = (byte) (-3);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.or(bigInteger0);
      jSONObject2.optBigInteger("R=\"XFnvy#hPMTiubyhd", bigInteger1);
      assertTrue(jSONObject2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toMap();
      JSONObject jSONObject1 = jSONObject0.put("WV-ddR3)L`QFm", (Object) double0);
      jSONObject0.toString(767);
      jSONObject1.names();
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject0.toJSONArray((JSONArray) null);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write((Writer) stringWriter0, 767, (-334));
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}");
      jSONObject1.similar(jSONObject0);
      jSONObject1.put("sho", (Object) "{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}");
      JSONObject.valueToString(jSONObject1);
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      try { 
        jSONObject0.getJSONObject("\"Q0r.8/}mLc.tG]n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = "toS";
      jSONObject0.put("toS", (Object) double0);
      StringWriter stringWriter0 = new StringWriter(737);
      char[] charArray0 = new char[3];
      charArray0[0] = '_';
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      jSONObject0.put("P'@*d=Y%R)", (long) 737);
      // Undeclared exception!
      jSONObject0.toString(2620);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String[] stringArray0 = JSONObject.getNames((Object) pipedOutputStream0);
      assertNull(stringArray0);
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Short short0 = new Short((short)40);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (int) (short)40);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      LinkedList<PipedOutputStream> linkedList2 = new LinkedList<PipedOutputStream>();
      Float float0 = new Float(863.4106803437417);
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, linkedList1);
      // Undeclared exception!
      try { 
        jSONObject1.put((String) null, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "gettoUpperCase";
      String[] stringArray0 = JSONObject.getNames((Object) "gettoUpperCase");
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      // Undeclared exception!
      try { 
        JSONObject.quote("gettoUpperCase", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger.valueOf(0L);
      jSONObject0.optNumber("=fU*A14+D*EE'YqA2", (Number) bigInteger0);
      JSONObject.stringToValue("=fU*A14+D*EE'YqA2");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      jSONObject0.optFloat("].", (float) 0L);
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        JSONObject.quote("Misplaced endObject.", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "+^INC";
      try { 
        JSONObject.stringToNumber("+^INC");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [+^INC] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      jSONObject0.increment("`utXu[O7lLd0eV%3");
      jSONObject0.similar(linkedList0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.toString();
      JSONObject.numberToString(bigInteger0);
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, (Object) null, 78, 78);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C");
      JSONObject jSONObject0 = new JSONObject((Object) "C");
      JSONObject jSONObject1 = jSONObject0.put("WV-ddR3)L`QFm", (Object) null);
      jSONObject0.toString(737);
      StringWriter stringWriter0 = new StringWriter(737);
      char[] charArray0 = new char[5];
      charArray0[0] = '_';
      charArray0[1] = '_';
      charArray0[2] = '_';
      charArray0[3] = 'D';
      charArray0[4] = '_';
      stringWriter0.write(charArray0);
      jSONObject1.optBoolean("C");
      JSONObject.stringToValue("JN@KC");
      try { 
        jSONObject0.getDouble("WV-ddR3)L`QFm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<Component.BaselineResizeBehavior, MockPrintStream> hashMap0 = new HashMap<Component.BaselineResizeBehavior, MockPrintStream>(18, 18);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "NHs|G>-ugyS\\";
      Character character0 = Character.valueOf('i');
      JSONObject jSONObject1 = jSONObject0.put("gettri6m", (Object) character0);
      jSONObject0.optString("null");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("gettri6m");
      jSONObject1.optNumber("gettri6m");
      try { 
        jSONObject0.getBigDecimal("NHs|G>-ugyS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Double double0 = new Double((-8.363278788764164));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.append("@K$o", (Object) null);
      JSONArray jSONArray0 = new JSONArray();
      PipedInputStream pipedInputStream0 = new PipedInputStream(28);
      JSONObject.testValidity(double0);
      jSONObject0.optNumber("@K$o", (Number) double0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}");
      jSONObject1.similar(jSONObject0);
      JSONObject jSONObject2 = jSONObject1.put("sho", (Object) "{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}");
      jSONObject1.optNumber("sho");
      try { 
        jSONObject2.getBigDecimal((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.valueOf((-9L));
      jSONObject0.optNumber("] is not a Boolean.", (Number) bigInteger1);
      try { 
        jSONObject0.getDouble("islength");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[1];
      charArray0[0] = 'P';
      stringWriter0.write(charArray0);
      JSONObject.stringToValue("val [");
      JSONObject.quote((String) null);
      Integer integer0 = new Integer(10);
      Object object0 = JSONObject.wrap(integer0);
      assertEquals(10, object0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Double double0 = new Double((-1908.575607092291));
      JSONObject.wrap(double0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("JwU%QE8", (Object) "{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}");
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.optNumber("gettoString");
      jSONObject0.toJSONArray((JSONArray) null);
      stringWriter0.append('&');
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      jSONObject0.toJSONArray((JSONArray) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}";
      stringArray0[1] = "JwU%QE8";
      stringArray0[2] = "gettoString";
      stringArray0[3] = "gettoString";
      stringArray0[4] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[5] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}";
      stringArray0[6] = "NHs|G>-ugyS";
      stringArray0[7] = "%C7rpsae";
      JSONObject jSONObject2 = new JSONObject("JwU%QE8", stringArray0);
      jSONObject2.optFloat("get");
      jSONObject1.putOnce("4{j", "%C7rpsae");
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      LinkedList<Formatter.BigDecimalLayoutForm> linkedList0 = new LinkedList<Formatter.BigDecimalLayoutForm>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Double double0 = new Double(1130.921538);
      Object object0 = JSONObject.wrap(double0);
      assertEquals(1130.921538, object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}");
      assertFalse(jSONObject0.isEmpty());
      
      int int0 = jSONObject1.getInt("{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}");
      assertEquals(1, int0);
      
      Integer integer0 = new Integer(1);
      jSONObject1.optJSONArray("getClass");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      jSONObject1.remove("{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}");
      PipedInputStream pipedInputStream0 = new PipedInputStream(12);
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject.wrap(hashMap0);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "NHs|G>-ugyS\\";
      String string1 = "";
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      Short short0 = new Short((short)128);
      JSONObject.wrap(hashMap0);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "NHs|G>-ugyS\\";
      String string1 = null;
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) "NHs|G>-ugyS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Component.BaselineResizeBehavior, MockPrintStream> hashMap0 = new HashMap<Component.BaselineResizeBehavior, MockPrintStream>(18, 18);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      StringWriter stringWriter0 = new StringWriter(18);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 9);
      jSONObject0.put("gethashCode", (Object) pushbackInputStream0);
      StringWriter stringWriter1 = new StringWriter();
      PipedInputStream pipedInputStream1 = new PipedInputStream(1339);
      JSONObject.testValidity(stringWriter1);
      jSONObject0.put("@Q=\"Ygj6}VX+;3m", 1644.22601761);
      JSONObject.quote("@Q=\"Ygj6}VX+;3m", (Writer) stringWriter0);
      assertEquals("\"@Q=\\\"Ygj6}VX+;3m\"", stringWriter0.toString());
      
      JSONObject.getNames(jSONObject0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Component.BaselineResizeBehavior, MockPrintStream> hashMap0 = new HashMap<Component.BaselineResizeBehavior, MockPrintStream>(3538, 3538);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      StringWriter stringWriter0 = new StringWriter(3538);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(16);
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = 'B';
      charArray0[5] = 'B';
      charArray0[6] = 'B';
      charArray0[7] = 'B';
      stringWriter0.write("LA8yPajcYH6");
      charArray0[8] = 'B';
      stringWriter0.write(charArray0);
      jSONObject0.optBoolean("{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}");
      JSONObject.stringToValue("{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      jSONObject0.optFloat("\\", (float) 3538);
      JSONObject.quote("\\", (Writer) stringWriter1);
      jSONObject0.write((Writer) stringWriter0);
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.close();
      JSONObject jSONObject1 = jSONObject0.putOnce("\\", pipedReader0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "gettoUpperCase";
      Locale locale0 = Locale.ITALIAN;
      Locale locale1 = Locale.GERMAN;
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote("jP3", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Short short0 = new Short((short) (-3));
      JSONObject.wrap(short0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-75);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      JSONObject.testValidity(bufferedWriter0);
      double double0 = jSONObject1.optDouble("B?G^", (double) (byte) (-118));
      assertEquals((-118.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Double double0 = new Double((-8.363278788764164));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      Long.getLong("dou");
      jSONObject0.append("to", "to");
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        jSONObject0.getDouble("to");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000017] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Short short0 = new Short((short) (-3));
      Short short1 = new Short((short) (-3));
      JSONObject jSONObject0 = new JSONObject();
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      String string0 = "t(6_6";
      try { 
        jSONObject0.put("t(6_6", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      JSONObject.wrap(short1);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "NHs|G>-ugyS\\";
      try { 
        jSONObject0.put("NHs|G>-ugyS", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Component.BaselineResizeBehavior, MockPrintStream> hashMap0 = new HashMap<Component.BaselineResizeBehavior, MockPrintStream>(18, 18);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      StringWriter stringWriter0 = new StringWriter(18);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(14);
      char[] charArray0 = new char[4];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      stringWriter1.write(charArray0);
      jSONObject0.optBoolean("\\");
      JSONObject.stringToValue("\\");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      jSONObject0.optFloat(".fI\"~lth.[C;6t", (float) 18);
      JSONObject.quote("Misplaced endObject.", (Writer) stringWriter0);
      jSONObject0.write((Writer) stringWriter0);
      assertEquals("\"Misplaced endObject.\"{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Character character0 = Character.valueOf('\"');
      JSONObject.getNames((Object) character0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject((-1117065308));
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("W3(J} su9.9pC", (-1452));
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      jSONObject1.putOpt((String) null, roundingMode0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(14);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("XjcTkO");
      char[] charArray0 = new char[0];
      mockPrintWriter0.println(charArray0);
      char[] charArray1 = new char[9];
      charArray1[6] = '%';
      charArray1[1] = 'n';
      charArray1[2] = '3';
      charArray1[3] = '=';
      charArray1[4] = 'a';
      charArray1[5] = 'M';
      charArray1[6] = '?';
      charArray1[7] = '=';
      charArray1[8] = 'u';
      mockPrintWriter0.println(charArray1);
      int int0 = jSONObject0.optInt("W3(J} su9.9pC");
      assertEquals((-1452), int0);
      
      Object object0 = JSONObject.stringToValue("W3(J} su9.9pC");
      assertEquals("W3(J} su9.9pC", object0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Short short0 = new Short((short)27);
      Short short1 = new Short((short)27);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"\"", (Object) "\"\"");
      jSONObject1.optLong("\"\"", (-4172L));
      jSONObject0.toString((int) (short)27);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      jSONObject1.getString("\"\"");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      JSONObject.valueToString(pushbackInputStream0);
      Locale locale0 = new Locale("java.io.StringWriter@0000000008", "Unable to increment [");
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        jSONObject1.getBigDecimal("\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Short short0 = Short.valueOf((short) (-3));
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCLET_PATH;
      hashMap0.put(documentationTool_Location0, authenticator_RequestorType0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject.doubleToString(0.0);
      jSONObject0.increment(";zh");
      Boolean boolean0 = Boolean.valueOf((String) null);
      Object object0 = JSONObject.wrap(boolean0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.length();
      String string0 = "Bad value from toJSONString: ";
      jSONObject0.optLong("4K!C", 0L);
      jSONObject0.remove((String) null);
      String string1 = "h(JGg9Gi~*l^o%4";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null, "h(JGg9Gi~*l^o%4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      PipedInputStream pipedInputStream0 = new PipedInputStream(28);
      jSONObject0.toString(28);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.similar(jSONObject0);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "gettoUpperCase");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean0 = jSONObject0.similar("gettoUpperCase");
      assertFalse(boolean0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "m|6cr}";
      stringArray0[1] = "[}88NOS=zo3p";
      stringArray0[2] = "U\"dopC'Hcxh";
      stringArray0[3] = "%8wuD6Cu+~9G~>";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      MockFile mockFile0 = new MockFile("%8wuD6Cu+~9G~>");
      MockFile mockFile1 = new MockFile(mockFile0, "des");
      File file0 = MockFile.createTempFile("U\"dopC'Hcxh", "m|6cr}", (File) mockFile1);
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      boolean boolean0 = jSONObject0.similar(mockFileReader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Short short0 = new Short((short) (-3));
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[9];
      charArray0[0] = '&';
      Number number0 = jSONObject1.optNumber("NHs|G>-ugyS");
      assertNotNull(number0);
      
      charArray0[3] = 'B';
      charArray0[2] = 'B';
      charArray0[5] = 'B';
      jSONObject0.toJSONArray((JSONArray) null);
      stringWriter0.append('B');
      JSONArray jSONArray2 = new JSONArray((Collection<?>) linkedList0);
      jSONObject0.toJSONArray((JSONArray) null);
      float float0 = jSONObject0.optFloat("NHs|G>-ugyS");
      assertEquals((-3.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      String string0 = null;
      Short short0 = new Short((short) (-31732));
      jSONObject0.putOpt("M7-0", short0);
      String string1 = "[|}D";
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Short short0 = new Short((short)200);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCLET_PATH;
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.SERVER;
      hashMap0.put(documentationTool_Location0, authenticator_RequestorType0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[7];
      charArray0[0] = 'P';
      charArray0[1] = 'y';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = 'B';
      charArray0[5] = 'y';
      charArray0[6] = 'P';
      stringWriter0.write(charArray0);
      boolean boolean0 = jSONObject1.optBoolean("Efpected a ',' or Z]'");
      assertFalse(boolean0);
      
      JSONObject.stringToValue("null");
      jSONObject0.getFloat("NHs|G>-ugyS");
      float float0 = jSONObject1.optFloat("javax.");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject1 = jSONObject0.put("-0", (Object) linkedList0);
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCLET_PATH;
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      DocumentationTool.Location documentationTool_Location1 = DocumentationTool.Location.DOCLET_PATH;
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      hashMap0.put(documentationTool_Location1, authenticator_RequestorType0);
      Authenticator.RequestorType authenticator_RequestorType1 = Authenticator.RequestorType.PROXY;
      hashMap0.put(documentationTool_Location0, authenticator_RequestorType1);
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList1);
      jSONObject1.toString(2219);
      jSONObject1.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-0");
      stringWriter1.write(2717);
      jSONObject1.keySet();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.NO_EXCLUDE;
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      jSONObject1.optEnum(class0, "-0", dialog_ModalExclusionType0);
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("\"\"", (-1117));
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      Long.getLong("SW[?/ecP");
      jSONObject0.append("SW[?/ecP", linkedList0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject.getNames((Object) null);
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toMap();
      jSONObject0.length();
      jSONObject0.optLong("Bad value from toJSONString: ", (long) 2);
      jSONObject0.remove("Av");
      String string0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.wrap(jSONArray0);
      JSONObject jSONObject1 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      JSONObject jSONObject2 = jSONObject0.put("NHs|G>-ugyS", (Object) pipedWriter0);
      jSONObject1.toString(51);
      jSONObject2.names();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      try { 
        jSONObject2.getString("pX~d@urAj `\"fwD`<)W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000012] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optInt(3994);
      JSONObject.wrap(jSONArray0);
      PipedReader pipedReader0 = new PipedReader();
      jSONObject0.toString(59);
      jSONObject0.names();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      try { 
        jSONObject0.getString("pX~d@urAj `\"fwD`<)W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      jSONArray0.put(3553, (-1.0));
      jSONObject0.putOpt((String) null, (Object) null);
      LinkedList<GroupLayout.Alignment> linkedList1 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("[|}D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Byte byte0 = new Byte((byte)101);
      JSONObject.numberToString(byte0);
      JSONObject jSONObject0 = new JSONObject((int) (byte)101);
      JSONObject jSONObject1 = new JSONObject();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(6);
      JSONObject jSONObject2 = jSONObject0.put("java.lang.Byte@0000000001", (Object) byteArrayOutputStream0);
      JSONObject jSONObject3 = jSONObject0.put("s", false);
      jSONObject3.optString("$|J^E8J?[U9-%W%");
      jSONObject2.optDouble(",$#9:&d34}g");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("NHs|G>-ugyS");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)84;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.or(bigInteger0);
      JSONObject jSONObject4 = new JSONObject(2160);
      jSONObject4.optBigInteger((String) null, bigInteger0);
      jSONObject3.length();
      JSONObject jSONObject5 = jSONObject2.put(",$#9:&d34}g", (float) (byte)84);
      assertSame(jSONObject2, jSONObject5);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String string0 = JSONObject.doubleToString(3070.3);
      JSONObject jSONObject1 = jSONObject0.put("3070.3", false);
      String string1 = jSONObject1.optString("null", "null");
      assertEquals(1, jSONObject0.length());
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Double double0 = new Double(1.9312897221629286);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "getsize";
      stringArray0[1] = "getsize";
      stringArray0[2] = "getsize";
      stringArray0[3] = "getsize";
      stringArray0[4] = "getsize";
      stringArray0[5] = "getsize";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("FCwW/<~=qp&T-@s,");
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Short short0 = new Short((short) (-3));
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCLET_PATH;
      hashMap0.put(documentationTool_Location0, authenticator_RequestorType0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.length();
      jSONObject1.keys();
      jSONObject1.isEmpty();
      String string0 = JSONObject.quote("NHs|G>-ugyS");
      assertNotNull(string0);
      
      jSONObject1.entrySet();
      assertFalse(jSONObject0.isEmpty());
      
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      StringWriter stringWriter0 = new StringWriter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("SNKl=1E\"'GT^n/", true);
      JSONObject.testValidity(jSONObject1);
      JSONObject.indent(stringWriter0, (-1905));
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Short short0 = new Short((short)200);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      jSONObject0.optInt("NHs|G>-ugyS", 2161);
      MockFileWriter mockFileWriter0 = new MockFileWriter("S>kKneU[$h`''", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)84;
      byteArray0[8] = (byte)84;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.or(bigInteger1);
      BigInteger bigInteger2 = jSONObject1.optBigInteger("] not a string.", bigInteger1);
      assertSame(bigInteger1, bigInteger2);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(1049);
      jSONObject0.put("-0", (Object) "-0");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject1 = jSONObject0.increment("' and instead saw ''");
      BigDecimal bigDecimal0 = new BigDecimal((double) 1049);
      JSONObject.getNames(jSONObject1);
      jSONObject0.toString();
      jSONObject0.optInt("' and instead saw ''");
      Number number0 = jSONObject1.optNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Byte byte0 = new Byte((byte)101);
      JSONObject.numberToString(byte0);
      JSONObject jSONObject0 = new JSONObject((int) (byte)101);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      jSONObject0.put("org.json.JSONObject$Null", (Map<?, ?>) hashMap0);
      jSONObject0.optInt("org.json.JSONObject$Null", 9);
      MockFileWriter mockFileWriter0 = new MockFileWriter("S>kKneU[$h`''", false);
      jSONObject0.toMap();
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "S>kKneU[$h`''";
      stringArray0[1] = "S>kKneU[$h`''";
      stringArray0[2] = "java.lang.Byte@0000000001";
      stringArray0[3] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.write((Writer) mockFileWriter0, 9, (int) (byte)101);
      // Undeclared exception!
      try { 
        jSONObject1.optQuery("S>kKneU[$h`''");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Short short0 = new Short((short) (-3));
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("iterator");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONObject0.optBigDecimal("iterator", (BigDecimal) null);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Short short0 = new Short((short) (-3));
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "NHs|G>-ugyS\\";
      jSONObject0.increment("iterator");
      jSONObject0.optBigDecimal("iterator", (BigDecimal) null);
      HashMap<PushbackInputStream, SortOrder> hashMap0 = new HashMap<PushbackInputStream, SortOrder>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject1.query("u<8F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("^W;", (-1142));
      MockFileWriter mockFileWriter0 = new MockFileWriter("^W;", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)84;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = BigInteger.ONE;
      BigInteger bigInteger3 = BigInteger.TEN;
      bigInteger2.or(bigInteger3);
      jSONObject0.optBigInteger("xUc/_/%b~rha$", bigInteger3);
      JSONObject.wrap(bigInteger2);
      JSONObject jSONObject1 = jSONObject0.put("sgy", 462);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject0.append("xUc/_/%b~rha$", "{\"fruit\":[],\"dou\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":{}}");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Short short0 = new Short((short)704);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ha", false);
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject.testValidity(pipedWriter0);
      try { 
        JSONObject.indent(pipedWriter0, 60);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Short short0 = new Short((short) (-263));
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      JSONObject jSONObject1 = new JSONObject(linkedList0);
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject3 = jSONObject2.append("A JSONObject text must begin with '{'", "n>|TIZ~Qru");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      float float0 = new Short((short) (-263));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("n>|TIZ~Qru", true);
      JSONObject.testValidity(jSONObject3);
      JSONObject.indent((Writer) null, (short) (-263));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Short short0 = new Short((short)40);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(".", (Object) short0);
      try { 
        jSONObject0.getJSONArray(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Short short0 = new Short((short) (-3));
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[9];
      charArray0[0] = '&';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "NHs|G>-ugyS");
      StringWriter stringWriter2 = stringWriter1.append('&');
      stringWriter2.append((CharSequence) "NHs|G>-ugyS");
      stringWriter2.write(2717);
      jSONObject1.keySet();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.NO_EXCLUDE;
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      jSONObject0.optEnum(class0, "NHs|G>-ugyS", dialog_ModalExclusionType0);
      try { 
        jSONObject0.getJSONArray("NHs|G>-ugyS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000006] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCLET_PATH;
      hashMap0.put(documentationTool_Location0, authenticator_RequestorType0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(8);
      char[] charArray0 = new char[1];
      charArray0[0] = 'B';
      stringWriter1.write(charArray0);
      JSONObject.stringToValue("NHs|G>-ugyS");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      float float0 = jSONObject0.optFloat("NHs|G>-ugyS", Float.NaN);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Short short0 = new Short((short) (-3));
          JSONObject.wrap(short0);
          JSONObject jSONObject0 = new JSONObject();
          JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
          HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
          LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
          JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
          jSONObject0.toJSONArray(jSONArray0);
          StringWriter stringWriter0 = new StringWriter();
          char[] charArray0 = new char[9];
          charArray0[0] = '&';
          jSONObject1.optNumber("NHs|G>-ugyS");
          charArray0[1] = 'B';
          charArray0[2] = 'B';
          charArray0[3] = 'B';
          charArray0[4] = 'D';
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor211.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:235)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:190)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:296)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:202)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}");
      jSONObject1.similar(jSONObject0);
      Byte byte0 = new Byte((byte)86);
      jSONObject1.optNumber("{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}", (Number) byte0);
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.TAGLET_PATH;
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      hashMap0.put(documentationTool_Location0, authenticator_RequestorType0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)84;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      BigInteger bigInteger3 = jSONObject1.optBigInteger("get", bigInteger2);
      assertTrue(bigInteger3.equals((Object)bigInteger0));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C");
      JSONObject jSONObject0 = new JSONObject((Object) "C");
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<MockFileReader> linkedList1 = new LinkedList<MockFileReader>();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      linkedList1.add(mockFileReader0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList1);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      JSONObject.doubleToString(Double.NaN);
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)38);
      JSONObject.numberToString(byte0);
      JSONObject jSONObject1 = new JSONObject(67);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject2 = jSONObject1.put("java.lang.Byte@0000000002", (Map<?, ?>) hashMap0);
      jSONObject2.optInt("java.lang.Byte@0000000002", 67);
      MockFileWriter mockFileWriter0 = new MockFileWriter("java.lang.Byte@0000000002", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)71;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.pow(1666);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger1.or(bigInteger0);
      bigInteger2.testBit(67);
      jSONObject0.optBigInteger("S>kKneU[$h`''", bigInteger2);
      StringWriter stringWriter0 = new StringWriter();
      String[] stringArray0 = JSONObject.getNames((Object) stringWriter0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCUMENTATION_OUTPUT;
      hashMap0.put(documentationTool_Location0, authenticator_RequestorType0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "null");
      stringWriter1.write((int) (short)0);
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject1.optBoolean("NHs|G>-ugyS", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("getDeclaringClass", true);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Short short0 = new Short((short)27);
      Short.valueOf((short)27);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("5coCH}EMelW-Yhg_", (Object) short0);
      jSONObject1.getFloat("5coCH}EMelW-Yhg_");
      jSONObject0.optString("5coCH}EMelW-Yhg_");
      try { 
        jSONObject0.getBigDecimal("5coCH}EMelW-Yhg_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Byte byte0 = new Byte((byte)101);
      JSONObject.numberToString(byte0);
      JSONObject jSONObject0 = new JSONObject((int) (byte)101);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject1 = jSONObject0.put("org.json.JSONObject$Null", (Map<?, ?>) hashMap0);
      jSONObject0.optInt("org.json.JSONObject$Null", 9);
      MockFileWriter mockFileWriter0 = new MockFileWriter("S>kKneU[$h`''", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)101;
      JSONArray jSONArray0 = new JSONArray();
      Writer writer0 = jSONArray0.write((Writer) mockFileWriter0);
      jSONObject1.write(writer0, (int) (byte)84, 2400);
      jSONObject1.optJSONObject("`;~.S~ug2>`4]\"\"Ev");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = jSONObject0.optBigInteger("java.lang.Byte@0000000001", bigInteger1);
      assertEquals((byte)0, bigInteger2.byteValue());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      JSONObject.valueToString(roundingMode0);
      jSONObject0.increment("{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}");
      jSONObject0.has("{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}");
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Character character0 = Character.valueOf('`');
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(character0, stringArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(110, bigDecimal0);
      JSONObject.valueToString(bigDecimal1);
      JSONObject jSONObject1 = jSONObject0.put("ae>#lNvN+s$?>?'^", true);
      HashMap<Normalizer.Form, Object> hashMap0 = new HashMap<Normalizer.Form, Object>();
      HashMap<Normalizer.Form, JavaFileObject.Kind> hashMap1 = new HashMap<Normalizer.Form, JavaFileObject.Kind>();
      Normalizer.Form normalizer_Form0 = Normalizer.Form.NFKC;
      JavaFileObject.Kind javaFileObject_Kind0 = JavaFileObject.Kind.HTML;
      hashMap1.put(normalizer_Form0, javaFileObject_Kind0);
      Normalizer.Form normalizer_Form1 = Normalizer.Form.NFKD;
      JavaFileObject.Kind javaFileObject_Kind1 = JavaFileObject.Kind.SOURCE;
      JavaFileObject.Kind javaFileObject_Kind2 = JavaFileObject.Kind.OTHER;
      hashMap1.put(normalizer_Form1, javaFileObject_Kind2);
      hashMap1.put(normalizer_Form1, javaFileObject_Kind1);
      hashMap0.putAll(hashMap1);
      JSONObject jSONObject2 = jSONObject1.put("java.io.StringWriter@0000000004", (Map<?, ?>) hashMap0);
      Object object0 = hashMap0.put(normalizer_Form1, jSONObject1);
      jSONObject2.has("ae>#lNvN+s$?>?'^");
      jSONObject2.putOnce((String) null, object0);
      jSONObject2.optBoolean((String) null);
      String string0 = "AI20;l$<`MNhwLBh";
      jSONObject2.optJSONObject("AI20;l$<`MNhwLBh");
      String string1 = ".wT=+cB!pxisdzaq";
      try { 
        jSONObject0.getBoolean(".wT=+cB!pxisdzaq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000032] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote((String) null);
      jSONObject0.put("getlongValue", true);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      jSONObject1.toString((int) (short)0);
      jSONObject1.names();
      jSONObject0.optBoolean("&XH{B", false);
      jSONObject1.getFloat("NHs|G>-ugyS");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("fT(V9o8g/a zP<r", true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 1928);
      JSONObject.testValidity(bufferedOutputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      String string0 = "-0";
      JSONObject jSONObject1 = jSONObject0.put("-0", (Object) linkedList0);
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCLET_PATH;
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      hashMap0.put(documentationTool_Location0, authenticator_RequestorType0);
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList1);
      jSONObject1.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-0");
      stringWriter1.write(2717);
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject2.optBoolean("-0", false);
      try { 
        jSONObject1.getFloat("-0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "gettoUpperCase");
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      jSONObject0.optBoolean("gettoUpperCase");
      JSONObject jSONObject1 = jSONObject0.append("gettoUpperCase", "gettoUpperCase");
      JSONObject.stringToValue("trim");
      try { 
        jSONObject1.getFloat("gettoUpperCase");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000017] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Short short0 = new Short((short)1444);
      StringWriter stringWriter0 = new StringWriter((short)1444);
      JSONObject.wrap(stringWriter0);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "";
      Long.getLong("", 0L);
      JSONObject.wrap("");
      JSONObject jSONObject0 = new JSONObject();
      String string1 = "NHs|G>-ugyS\\";
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)987);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.put("n=!`I?o,SKiUKe", (Object) short0);
      jSONObject2.optLong("n=!`I?o,SKiUKe", (long) (short)987);
      Class<KeyRep.Type> class0 = KeyRep.Type.class;
      try { 
        jSONObject1.getEnum(class0, "+a14!~Yh4OAB4~iy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000006] is not an enum of type java.io.StringWriter@0000000007.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Short short0 = new Short((short) (-3));
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      jSONObject0.optLong("NHs|G>-ugyS");
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HashMap<Character.UnicodeScript, GroupLayout.Alignment> hashMap0 = new HashMap<Character.UnicodeScript, GroupLayout.Alignment>();
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.DEVANAGARI;
      GroupLayout.Alignment groupLayout_Alignment0 = GroupLayout.Alignment.BASELINE;
      hashMap0.put(character_UnicodeScript0, groupLayout_Alignment0);
      GroupLayout.Alignment groupLayout_Alignment1 = GroupLayout.Alignment.LEADING;
      hashMap0.put(character_UnicodeScript0, groupLayout_Alignment1);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      hashMap0.values();
      jSONObject0.length();
      jSONObject0.toString();
      jSONObject0.optString("pUu)\"muE&c6Zg  Al4O");
      jSONObject0.optDouble("");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)57;
      mockFileOutputStream0.write(byteArray0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(objectOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("D%*]vJh=4QBov/o=eBV", 0.0F);
      JSONObject jSONObject2 = jSONObject1.increment("D%*]vJh=4QBov/o=eBV");
      BigDecimal bigDecimal0 = new BigDecimal((-259));
      jSONObject2.optBigDecimal("D%*]vJh=4QBov/o=eBV", bigDecimal0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.names();
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONObject2.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject0.optBigDecimal("_fAs1(6q}en^P.t])h", bigDecimal0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.optBigInteger("g }@", bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger2.shortValue());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C");
      JSONObject jSONObject0 = new JSONObject((Object) "C");
      jSONObject0.optLong("C");
      String string0 = "istouppercase";
      JSONObject jSONObject1 = jSONObject0.increment("istouppercase");
      BigDecimal bigDecimal0 = null;
      jSONObject1.optBigDecimal("C", (BigDecimal) null);
      // Undeclared exception!
      try { 
        jSONObject1.query("toL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MockFile mockFile0 = new MockFile("java.lang.Float@00000000060");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte)63;
      byteArray0[8] = (byte) (-26);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-26);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "java.lang.Float@00000000060";
      objectArray0[1] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("+", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      JSONObject.indent(mockPrintWriter1, (-4244));
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Locale.Category, Integer> hashMap0 = new HashMap<Locale.Category, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("+", (Map<?, ?>) hashMap0);
      jSONObject1.optFloat((String) null);
      JSONObject.indent(printWriter0, (-403));
      JSONObject jSONObject2 = jSONObject0.put("java.lang.Float@00000000060", (-1077));
      assertFalse(jSONObject2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optFloat("<XS/e AQ7a>");
      JSONObject.stringToValue("m?S4qx!^<&<\"x'K");
      jSONObject0.putOpt("m?S4qx!^<&<\"x'K", "m?S4qx!^<&<\"x'K");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCLET_PATH;
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      hashMap0.put(documentationTool_Location0, authenticator_RequestorType0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(14);
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      jSONObject0.toJSONArray(jSONArray1);
      StringWriter stringWriter1 = new StringWriter();
      HashMap<RoundingMode, Window.Type> hashMap1 = new HashMap<RoundingMode, Window.Type>();
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)32;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      jSONObject2.accumulate("istoMap", byteArrayInputStream0);
      jSONObject2.optString("", "");
      assertFalse(jSONObject2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Short short0 = new Short((short) (-3));
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      jSONObject0.optDouble("NHs|G>-ugyS");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("NHs|G>-ugyS");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("NHs|G>-ugyS", false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      Double double0 = new Double(0.0);
      try { 
        jSONObject0.get("E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Byte byte0 = new Byte((byte)92);
      JSONObject.numberToString(byte0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject((int) (byte)92);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Byte@0000000001", (Map<?, ?>) hashMap0);
      jSONObject0.optInt("org.json.JSONPointer$Builder", 4);
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.json.JSONPointer$Builder", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)101;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.or(bigInteger1);
      BigInteger bigInteger2 = jSONObject1.optBigInteger("islength", (BigInteger) null);
      assertNull(bigInteger2);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = 11;
      JSONObject jSONObject0 = new JSONObject(11);
      String string0 = "Null key.";
      JSONObject jSONObject1 = jSONObject0.put("Null key.", (Object) "Null key.");
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      jSONObject1.toJSONArray((JSONArray) null);
      StringWriter stringWriter0 = new StringWriter();
      int int1 = (-1104);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "Null key.", 891, (-1104));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCLET_PATH;
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      hashMap0.put(documentationTool_Location0, authenticator_RequestorType0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[7];
      charArray0[0] = 'P';
      charArray0[1] = 'y';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = 'B';
      charArray0[5] = 'y';
      charArray0[6] = 'P';
      stringWriter0.write(charArray0);
      JSONObject.quote("NHs|G>-ugyS");
      JSONObject.wrap(linkedList0);
      JSONObject.testValidity(authenticator_RequestorType0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Short short0 = new Short((short) (-2640));
      JSONObject.wrap(linkedList0);
      BigInteger.valueOf(1796L);
      BigDecimal bigDecimal0 = new BigDecimal((double) 1796L);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<GroupLayout.Alignment> linkedList1 = new LinkedList<GroupLayout.Alignment>();
      GroupLayout.Alignment groupLayout_Alignment0 = GroupLayout.Alignment.BASELINE;
      linkedList1.add(groupLayout_Alignment0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList1);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Short short0 = new Short((short)27);
      Short short1 = new Short((short)27);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"\"", (Object) "\"\"");
      jSONObject1.optInt("\"\"", (-1117));
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.APPLICATION_MODAL;
      jSONObject1.optEnum(class0, "\"\"", dialog_ModalityType0);
      jSONObject1.optFloat("\"\"", 0.0F);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Writer writer0 = JSONObject.quote("#j^JVj?10A4G", (Writer) mockPrintWriter0);
      Writer writer1 = jSONObject1.write(writer0);
      assertSame(writer0, writer1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Short short0 = new Short((short) (-3));
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCLET_PATH;
      hashMap0.put(documentationTool_Location0, authenticator_RequestorType0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(8);
      char[] charArray0 = new char[1];
      charArray0[0] = 'B';
      stringWriter1.write(charArray0);
      boolean boolean0 = jSONObject1.optBoolean("NHs|G>-ugyS");
      assertFalse(boolean0);
      
      Object object0 = JSONObject.stringToValue("NHs|G>-ugyS");
      assertEquals("NHs|G>-ugyS", object0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      float float0 = jSONObject0.optFloat("NHs|G>-ugyS", Float.NaN);
      assertEquals((-3.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("`Wu", 1.0);
      jSONObject1.optFloat("`Wu");
      JSONObject.stringToValue("!fl^$z'bs'I;");
      JSONObject jSONObject2 = jSONObject0.putOpt("`Wu", "!fl^$z'bs'I;");
      assertFalse(jSONObject2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<GroupLayout.Alignment> linkedList1 = new LinkedList<GroupLayout.Alignment>();
      LinkedList<GroupLayout.Alignment> linkedList2 = new LinkedList<GroupLayout.Alignment>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList2);
      StringWriter stringWriter0 = new StringWriter();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList1);
      JSONTokener jSONTokener0 = new JSONTokener("~1");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      jSONObject1.toString((int) (short)0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      jSONObject1.names();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        jSONObject1.put((String) null, (float) (short)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt((String) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        jSONObject0.getLong("{p:eDLK6;H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)98);
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      HashMap<RoundingMode, String> hashMap0 = new HashMap<RoundingMode, String>();
      hashMap0.put(roundingMode0, " y");
      RoundingMode roundingMode1 = RoundingMode.UP;
      HashMap<RoundingMode, String> hashMap1 = new HashMap<RoundingMode, String>();
      hashMap1.put(roundingMode1, "abs");
      Boolean boolean0 = new Boolean("Null key.");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      JSONObject.quote("Null key.");
      Object object0 = JSONObject.stringToValue("neg");
      assertEquals("neg", object0);
      
      jSONObject0.remove("j");
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Byte byte0 = new Byte((byte)101);
      JSONObject.numberToString(byte0);
      JSONObject jSONObject0 = new JSONObject((int) (byte)101);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      jSONObject0.put("org.json.JSONObject$Null", (Map<?, ?>) hashMap0);
      jSONObject0.optInt("org.json.JSONObject$Null", 9);
      MockFileWriter mockFileWriter0 = new MockFileWriter("S>kKneU[$h`''", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)101;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      BigInteger bigInteger3 = jSONObject0.optBigInteger("org.json.JSONObject$Null", bigInteger2);
      assertTrue(bigInteger3.equals((Object)bigInteger1));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Double double0 = new Double((-2174.7731792383515));
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.toMap();
      jSONObject0.toString(69);
      jSONObject0.names();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      String string0 = "Tz";
      try { 
        jSONObject0.getString("Tz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.stringToValue("-0");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject1 = jSONObject0.put("-0", (Object) linkedList0);
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList1);
      jSONObject1.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(2717);
      HashMap<RoundingMode, String> hashMap1 = new HashMap<RoundingMode, String>();
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      hashMap1.put(roundingMode0, "3@9z");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      JSONObject.quote("3@9z");
      JSONObject.stringToValue("-0");
      JSONObject.testValidity("3@9z");
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      HashMap<Desktop.Action, BigInteger> hashMap0 = new HashMap<Desktop.Action, BigInteger>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.accumulate("SI9d[2", "org.json.JSONArray@0000000001");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}";
      byte byte0 = (byte)108;
      Byte byte1 = new Byte((byte)108);
      JSONObject.numberToString(byte1);
      JSONObject jSONObject0 = new JSONObject((int) (byte)108);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      short short0 = (short) (-3);
      Short short1 = new Short((short) (-3));
      JSONObject.wrap(short1);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("xHDwX92xh*@fq`", (int) (short) (-3));
      jSONObject0.put("NHs|G>-ugyS", (Object) short1);
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCLET_PATH;
      hashMap0.put(documentationTool_Location0, authenticator_RequestorType0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0, 591, 591);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Character character0 = Character.valueOf('\"');
      JSONObject.getNames((Object) character0);
      MathContext mathContext0 = MathContext.DECIMAL64;
      mathContext0.getPrecision();
      BigDecimal bigDecimal0 = new BigDecimal(499L, mathContext0);
      String string0 = JSONObject.numberToString(bigDecimal0);
      Locale locale0 = Locale.US;
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject0 = new JSONObject(mathContext0);
      jSONObject0.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(8);
      char[] charArray0 = new char[8];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      charArray0[4] = 'B';
      charArray0[5] = 'B';
      charArray0[6] = 'B';
      charArray0[7] = 'B';
      stringWriter1.write(charArray0);
      jSONObject0.optBoolean("{e");
      JSONObject.stringToValue("\"");
      Object object0 = JSONObject.stringToValue("] is not a number.");
      assertFalse(object0.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      jSONObject0.optQuery("");
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("-K{M_)8u", 70);
      BigInteger bigInteger0 = BigInteger.ONE;
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Byte byte0 = new Byte((byte)101);
      JSONObject.numberToString(byte0);
      JSONObject jSONObject0 = new JSONObject((int) (byte)101);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject1 = jSONObject0.put("org.json.JSONObject$Null", (Map<?, ?>) hashMap0);
      jSONObject0.optInt("org.json.JSONObject$Null", 9);
      MockFileWriter mockFileWriter0 = new MockFileWriter("S>kKneU[$h`''", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)101;
      jSONObject1.optNumber("Missing value", (Number) (byte)101);
      try { 
        jSONObject1.getDouble("org.json.JSONObject$Null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Short short0 = new Short((short) (-3));
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCLET_PATH;
      hashMap0.put(documentationTool_Location0, authenticator_RequestorType0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[9];
      charArray0[0] = '&';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = 'D';
      charArray0[5] = 'B';
      charArray0[6] = '#';
      charArray0[7] = 'B';
      charArray0[8] = 'B';
      stringWriter0.write(charArray0);
      jSONObject1.optBoolean("Efpected a ',' or Z]'");
      JSONObject.stringToValue("");
      double double0 = jSONObject1.getDouble("NHs|G>-ugyS");
      assertEquals((-3.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a boolean.", (Object) "NHs|G>-ugyS");
      jSONObject0.toString(92);
      JSONObject jSONObject2 = jSONObject1.increment("p%ZykpGbone8");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONObject2.optNumber("gettoUpperCase", (Number) bigDecimal0);
      double double0 = jSONObject0.getDouble("p%ZykpGbone8");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "NHs|G>-ugyS\\";
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      LinkedList<GraphicsDevice.WindowTranslucency> linkedList0 = new LinkedList<GraphicsDevice.WindowTranslucency>();
      jSONObject1.put("", (Collection<?>) linkedList0);
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCLET_PATH;
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      hashMap0.put(documentationTool_Location0, authenticator_RequestorType0);
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<CardTerminals.State> linkedList0 = new LinkedList<CardTerminals.State>();
      jSONObject0.put("Unable to write JSONArray value at index: ", (Collection<?>) linkedList0);
      String string0 = JSONObject.quote("ITSILd[2");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      Object object0 = JSONObject.stringToValue("");
      String string0 = jSONObject0.toString();
      assertFalse(string0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Long long0 = Long.getLong("", 0L);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      PipedReader pipedReader0 = new PipedReader();
      jSONObject0.put("r6$qDH'}^q&u", (Object) pipedReader0);
      HashMap<RoundingMode, String> hashMap0 = new HashMap<RoundingMode, String>();
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      HashMap<RoundingMode, String> hashMap1 = new HashMap<RoundingMode, String>();
      hashMap1.put(roundingMode0, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      JSONObject.quote((String) null);
      JSONObject.stringToValue("");
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("dF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double((-2174.7731792383515));
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray1);
      String string0 = "ha";
      try { 
        jSONObject0.getLong("ha");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = "";
      Long long0 = Long.getLong("", 0L);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) long0);
      try { 
        jSONObject1.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("`Wu", 1.0);
      LinkedList<PipedOutputStream> linkedList0 = new LinkedList<PipedOutputStream>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.iterator();
      try { 
        jSONObject1.putOnce("`Wu", jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"`Wu\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-ebF3?sDc)0s");
      String string0 = JSONObject.quote("~0");
      assertFalse(string0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Short short0 = new Short((short) (-3));
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "NHs|G>-ugyS\\";
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(8);
      char[] charArray0 = new char[1];
      charArray0[0] = 'B';
      stringWriter1.write(charArray0);
      jSONObject1.optBoolean("NHs|G>-ugyS");
      try { 
        jSONObject1.getBigInteger("NHs|G>-ugyS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      JSONObject.wrap(short1);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "NHs|G>-ugyS\\";
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short1);
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCLET_PATH;
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      hashMap0.put(documentationTool_Location0, authenticator_RequestorType0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.add(jSONObject1);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject.doubleToString((short)0);
      int int0 = (-2728);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2728));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "lengtA";
      JSONObject.stringToValue("lengtA");
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 6, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject.wrap(short0);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "NHs|G>-ugyS\\";
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) pushbackInputStream0);
      jSONObject1.optString("TT]JrL>.'Q^|tQPMR2$");
      jSONObject1.optDouble("NHs|G>-ugyS");
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Short short0 = new Short((short)27);
      Short short1 = new Short((short)27);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"\"", (Object) "\"\"");
      jSONObject1.optLong("\"\"", (long) (short)27);
      Class<KeyRep.Type> class0 = KeyRep.Type.class;
      try { 
        jSONObject0.getEnum(class0, "\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] is not an enum of type java.io.StringWriter@0000000006.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCLET_PATH;
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      hashMap0.put(documentationTool_Location0, authenticator_RequestorType0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "NHs|G>-ugyS");
      stringWriter0.write(14);
      char[] charArray0 = new char[7];
      charArray0[0] = 'P';
      jSONObject0.keySet();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.NO_EXCLUDE;
      jSONObject1.optEnum(class0, "NHs|G>-ugyS", dialog_ModalExclusionType0);
      try { 
        jSONObject1.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject1 = jSONObject0.put("-0", (Object) linkedList0);
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCLET_PATH;
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      hashMap0.put(documentationTool_Location0, authenticator_RequestorType0);
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList1);
      jSONObject1.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-0");
      stringWriter1.write(2717);
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      jSONObject1.toJSONArray(jSONArray0);
      try { 
        jSONObject0.getNumber("-0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      jSONObject1.getNumber("NHs|G>-ugyS");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("E");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      jSONObject0.optString("null");
      jSONObject0.optDouble("null");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E");
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      jSONObject1.toString((int) (short)0);
      JSONArray jSONArray0 = jSONObject1.names();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      jSONObject1.toJSONArray(jSONArray0);
      Number number0 = jSONObject1.getNumber("NHs|G>-ugyS");
      assertEquals((short)0, number0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      jSONObject1.toString((int) (short)0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject1.optBigInteger("NHs|G>-ugyS", bigInteger0);
      jSONObject1.toString();
      JSONObject jSONObject2 = jSONObject1.putOpt("Nr|l", (Object) null);
      assertSame(jSONObject2, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Short short0 = new Short((short)27);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\"\"";
      JSONObject jSONObject1 = jSONObject0.put("\"\"", (Object) "\"\"");
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject1.optBigInteger("\"\"", bigInteger0);
      Locale locale0 = Locale.ROOT;
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("\"\"", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name \"\", locale 
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCLET_PATH;
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      hashMap0.put(documentationTool_Location0, authenticator_RequestorType0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.add(jSONObject1);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject.quote("pY%RMKhtqRi<,");
      Object object0 = JSONObject.stringToValue("NHs|G>-ugyS");
      assertEquals("NHs|G>-ugyS", object0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      bigInteger1.or(bigInteger0);
      BigInteger bigInteger3 = jSONObject0.optBigInteger("NHs|G>-ugyS", bigInteger2);
      assertEquals((short)0, bigInteger3.shortValue());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "gettoUpperCase");
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      Class<Normalizer.Form> class0 = Normalizer.Form.class;
      jSONObject0.optEnum(class0, " at ");
      JSONObject.getNames((Object) "gettoUpperCase");
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short) (-2939));
      Character character0 = Character.valueOf('h');
      JSONObject.wrap(character0);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "xeXff<t`Q.mf~} ,zF=";
      JSONObject jSONObject1 = jSONObject0.put("xeXff<t`Q.mf~} ,zF=", (Object) "xeXff<t`Q.mf~} ,zF=");
      jSONObject0.optString("xeXff<t`Q.mf~} ,zF=");
      // Undeclared exception!
      try { 
        jSONObject1.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Double double0 = new Double((-8.363278788764164));
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-8.363278788764164));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}");
      jSONObject1.getInt("{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}");
      double double0 = new Integer(1);
      jSONObject1.optJSONArray("getClass");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      jSONObject1.remove("{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}");
      jSONObject0.keySet();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.APPLICATION_EXCLUDE;
      jSONObject0.optEnum(class0, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}", dialog_ModalExclusionType0);
      try { 
        jSONObject1.getJSONArray("getClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("getDeclaringClass");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      String string0 = JSONObject.numberToString(bigInteger0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = "";
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Short short0 = new Short((short) (-263));
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write((int) (short) (-263));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 23;
      jSONObject1.write((Writer) stringWriter0, 23, (int) (short) (-263));
      Short short1 = new Short((short) (-263));
      try { 
        jSONObject1.getBigDecimal("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(30);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<GroupLayout.Alignment> linkedList1 = new LinkedList<GroupLayout.Alignment>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList1);
      jSONObject0.toJSONArray(jSONArray0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      charArray0[2] = 'y';
      charArray0[3] = 'P';
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery("");
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Short short0 = new Short((short)27);
      Short.valueOf((short)27);
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, "5coCH}EMelW-Yhg_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      HashMap<RoundingMode, String> hashMap0 = new HashMap<RoundingMode, String>();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Unable to read the next character from the stream");
      byte byte0 = (byte)98;
      Byte byte1 = new Byte((byte)98);
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      hashMap0.put(roundingMode0, "Unable to read the next character from the stream");
      String string0 = "tr";
      RoundingMode roundingMode1 = RoundingMode.UP;
      hashMap0.put(roundingMode1, "Unable to read the next character from the stream");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockFileWriter mockFileWriter0 = new MockFileWriter("tr");
      JSONObject.quote("tr");
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, mockFileWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1624);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(pipedWriter0, stringArray0);
      Byte byte0 = new Byte((byte)34);
      JSONObject jSONObject1 = jSONObject0.put("Unable to preserve stream position", (Object) byte0);
      jSONObject1.optString("");
      jSONObject0.optDouble("Unable to preserve stream position");
      String string0 = "E";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("O{C10LFmq {&X");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(objectOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      try { 
        jSONObject0.getDouble("E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("D%*]vJh=4QBov/o=eBV", 0.0F);
      jSONObject0.optFloat("D%*]vJh=4QBov/o=eBV");
      JSONObject.stringToValue("Nesting error.");
      JSONObject jSONObject1 = jSONObject0.putOpt("_", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertTrue(jSONObject0.isEmpty());
      
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      int int0 = 18;
      HashMap<Component.BaselineResizeBehavior, MockPrintStream> hashMap0 = new HashMap<Component.BaselineResizeBehavior, MockPrintStream>(18, 18);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      StringWriter stringWriter0 = new StringWriter(70);
      JSONObject.doubleToString(4201.30293);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "4201.30293", 70, 17);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      String string0 = null;
      jSONObject0.putOpt((String) null, (Object) null);
      try { 
        jSONObject0.get("[|}D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.8445746989169867);
      assertEquals("0.8445746989169867", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONObject.doubleToString(Double.NaN);
      JSONObject.stringToValue("]z'");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "]z'";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[1] = "]z'";
      stringArray0[2] = "]z'";
      stringArray0[3] = "null";
      JSONObject jSONObject0 = new JSONObject("null", stringArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 75);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, pushbackInputStream0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject1.write((Writer) charArrayWriter0, (-1028), (-1028));
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        jSONObject0.getBigDecimal("y9D&A-KS14");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      RoundingMode roundingMode0 = RoundingMode.UP;
      HashMap<RoundingMode, String> hashMap0 = new HashMap<RoundingMode, String>();
      hashMap0.put(roundingMode0, "6b9x]%}VRO2yfBY");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockFileWriter mockFileWriter0 = new MockFileWriter("6b9x]%}VRO2yfBY");
      JSONObject.quote("");
      Object object0 = JSONObject.stringToValue("6b9x]%}VRO2yfBY");
      assertEquals("6b9x]%}VRO2yfBY", object0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "isEmpty");
      Byte byte0 = new Byte((byte)109);
      JSONObject.numberToString(byte0);
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.optJSONObject("mdX{mq1UB.|(z1r>");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("java.lang.Byte@0000000002", bigInteger0);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = jSONObject0.optBigInteger("[[7>$&zDSqJ[Fje .$", bigInteger0);
      assertEquals((short)10, bigInteger2.shortValue());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((int) (short)0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Random.setNextRandom((-3427));
      HashMap<Normalizer.Form, Byte> hashMap0 = new HashMap<Normalizer.Form, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      int int0 = jSONObject0.optInt("0", (-3427));
      assertEquals((-3427), int0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "NHs|G>-ugyS\\";
      jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCLET_PATH;
      hashMap0.put(documentationTool_Location0, authenticator_RequestorType0);
      jSONObject0.put("NHs|G>-ugyS", (float) (short)0);
      Short short1 = new Short((short)0);
      String string1 = "E0lI;n>-R<7=e#cMLE";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("toM", "~1");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ~1
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      HashMap<Dialog.ModalExclusionType, Byte> hashMap0 = new HashMap<Dialog.ModalExclusionType, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("B,wJHZk''b]m_FLQk2", 0.0F);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte byte0 = (byte) (-115);
      Byte byte1 = new Byte((byte)57);
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      HashMap<RoundingMode, String> hashMap0 = new HashMap<RoundingMode, String>();
      hashMap0.put(roundingMode0, "tr");
      String string0 = "tr";
      RoundingMode roundingMode1 = RoundingMode.HALF_DOWN;
      hashMap0.put(roundingMode1, "NHs|G>-ugyS");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      JSONObject.quote(",");
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject1.optBoolean((String) null, true);
      try { 
        jSONObject0.getFloat("%[L/HwR4&Z:a{~78$<?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(38);
      String[] stringArray0 = new String[3];
      String string0 = "";
      try { 
        jSONObject0.getBoolean("6b9x]%}VRO2yfBY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("isremove");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1624);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(pipedWriter0, stringArray0);
      pipedReader0.close();
      String string0 = "qqesha#O~Ui";
      jSONObject0.has("qqesha#O~Ui");
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      try { 
        pipedReader0.connect(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("qHIJ+rb7");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("gj(Ab6dRB4=)");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "D%*]vJh=4QBov/o=eBV";
      JSONObject jSONObject1 = jSONObject0.put("D%*]vJh=4QBov/o=eBV", 0.0F);
      jSONObject1.optBoolean("D%*]vJh=4QBov/o=eBV", true);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      Long long0 = new Long((-466L));
      try { 
        jSONObject1.append("D%*]vJh=4QBov/o=eBV", long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[D%*]vJh=4QBov/o=eBV] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      jSONObject0.optString("null");
      jSONObject0.optDouble("null");
      String string0 = "E";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream1);
      Short short1 = new Short((short)0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject1 = new JSONObject(1693);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 1693);
      jSONObject1.append("E", pushbackInputStream0);
      // Undeclared exception!
      try { 
        RoundingMode.valueOf(46);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument out of range
         //
         verifyException("java.math.RoundingMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.append("-0", stringWriter0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      
      jSONObject0.put("] not found.", (-58L));
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "NHs|G>-ugyS\\";
      byte byte0 = (byte) (-99);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[6] = (byte)27;
      byteArray0[2] = (byte) (-115);
      byteArray0[1] = (byte)8;
      JSONObject.getNames(jSONObject0);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte)60;
      jSONObject0.put("NHs|G>-ugyS", (long) (byte)60);
      jSONObject0.optLong("w<'*_T");
      byteArray0[7] = (byte)8;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toMap();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('K');
      Byte byte1 = new Byte((byte) (-115));
      // Undeclared exception!
      try { 
        stringWriter1.write((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Short short0 = new Short((short)1201);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) "NHs|G>-ugyS");
      jSONObject1.optString("qvdB`fn7G8");
      jSONObject0.optDouble("NHs|G>-ugyS");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      try { 
        jSONObject1.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Short short0 = new Short((short)27);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      jSONObject0.optString("NHs|G>-ugyS");
      JSONObject.getNames((Object) jSONObject1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      jSONObject1.toString((int) (short)0);
      double double0 = jSONObject1.optDouble("NHs|G>-ugyS", (double) (short)0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short) (-2939));
      Character character0 = Character.valueOf('h');
      JSONObject.wrap(character0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("xeXff<t`Q.mf~} ,zF=", (Object) "xeXff<t`Q.mf~} ,zF=");
      jSONObject0.optString("xeXff<t`Q.mf~} ,zF=");
      jSONObject0.optDouble("xeXff<t`Q.mf~} ,zF=");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("xeXff<t`Q.mf~} ,zF=");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(objectOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      try { 
        jSONObject0.getDouble("E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000006] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Long long0 = Long.getLong("", 0L);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.put("", (Object) long0);
      HashMap<RoundingMode, String> hashMap0 = new HashMap<RoundingMode, String>();
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      hashMap0.put(roundingMode0, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      JSONObject.quote((String) null);
      JSONObject.stringToValue("0");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger2 = null;
      try {
        bigInteger2 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        jSONObject0.getFloat("rem");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      HashMap<RoundingMode, String> hashMap0 = new HashMap<RoundingMode, String>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Unable to read the next character from the stream");
      Byte byte0 = new Byte((byte)98);
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      hashMap0.put(roundingMode0, "Unable to read the next character from the stream");
      RoundingMode roundingMode1 = RoundingMode.UP;
      hashMap0.put(roundingMode1, "Unable to read the next character from the stream");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      JSONObject.quote("tr");
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optBoolean((String) null, false);
      try { 
        jSONObject0.getFloat((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Short short0 = new Short((short)27);
      Short short1 = new Short((short)27);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"\"", (Object) "\"\"");
      jSONObject1.optLong("\"\"", (long) (short)27);
      jSONObject0.optBoolean("\"\"", false);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      Long long0 = new Long(7L);
      Integer integer0 = new Integer((short)27);
      jSONObject1.append("}s7#`X81N", integer0);
      Boolean boolean0 = new Boolean("getshortValue");
      JSONObject.wrap(integer0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("isshortValue");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("E");
      boolean boolean0 = jSONObject1.similar(jSONObject0);
      boolean boolean1 = jSONObject0.optBoolean("E");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCLET_PATH;
      hashMap0.put(documentationTool_Location0, authenticator_RequestorType0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(8);
      char[] charArray0 = new char[1];
      charArray0[0] = 'B';
      stringWriter1.write(charArray0);
      jSONObject1.optBoolean("NHs|G>-ugyS");
      JSONObject.stringToValue("NHs|G>-ugyS");
      JSONObject jSONObject2 = new JSONObject(4526);
      try { 
        jSONObject2.getDouble("UBc {>n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Character.valueOf('\"');
      JSONObject.getNames((Object) null);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.getPrecision();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Character character0 = Character.valueOf('\"');
      JSONObject.getNames((Object) character0);
      MathContext mathContext0 = MathContext.DECIMAL64;
      mathContext0.getPrecision();
      BigDecimal bigDecimal0 = new BigDecimal(499L, mathContext0);
      JSONObject.numberToString(bigDecimal0);
      Locale locale0 = Locale.US;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("java.math.BigDecimal@0000000002", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name java.math.BigDecimal@0000000002, locale en_US
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      String string0 = jSONObject0.optString("null");
      assertEquals("", string0);
      
      double double0 = jSONObject0.optDouble("null");
      assertEquals(Double.NaN, double0, 0.01);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(objectOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      boolean boolean0 = JSONObject.isDecimalNotation("null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("islongValue", 9);
      Class<JDBCType> class0 = JDBCType.class;
      JDBCType jDBCType0 = JDBCType.BLOB;
      JDBCType jDBCType1 = jSONObject1.optEnum(class0, (String) null, jDBCType0);
      assertSame(jDBCType1, jDBCType0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(2, map0.size());
      
      jSONObject0.length();
      int int0 = jSONObject0.optInt("getsize");
      assertEquals(0, int0);
      
      long long0 = jSONObject0.optLong("Y>8<wPb_dmX {aYmy");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "gettoUpperCase");
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      long long0 = jSONObject0.optLong("gettoUpperCase", (-99L));
      assertEquals((-99L), long0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "NHs|G>-ugyS\\";
      byte byte0 = (byte) (-99);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-115);
      byteArray0[1] = (byte)8;
      JSONObject.getNames(jSONObject0);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte)85;
      jSONObject0.optLong("w<'*_T");
      byteArray0[7] = (byte)8;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('K');
      jSONObject1.optDouble("daB~XdR'b;EDa@.n9aa");
      // Undeclared exception!
      try { 
        stringWriter1.write((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(257);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("JSONArray[");
      PrintWriter printWriter0 = mockPrintWriter0.append('P');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = '!';
      charArray0[3] = 'P';
      charArray0[4] = 'P';
      charArray0[5] = 'P';
      mockPrintWriter1.println(charArray0);
      char[] charArray1 = new char[4];
      charArray1[0] = 'P';
      charArray1[1] = 'P';
      charArray1[2] = 'P';
      charArray1[3] = 'P';
      mockPrintWriter1.println(charArray1);
      JSONObject.quote("JSONArray[", (Writer) mockPrintWriter1);
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Locale.FilteringMode, Byte> hashMap0 = new HashMap<Locale.FilteringMode, Byte>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Null pointer");
      Integer integer0 = new Integer((-687));
      boolean boolean0 = jSONObject0.optBoolean("Y&");
      assertFalse(boolean0);
      
      jSONObject0.optNumber("Illegal escape.");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.parse("istrim");
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list1 = Locale.filterTags(list0, (Collection<String>) set0, locale_FilteringMode0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) list1);
      jSONObject0.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) list0);
      JSONArray jSONArray2 = jSONObject1.toJSONArray(jSONArray1);
      assertEquals(2, jSONObject0.length());
      assertNotSame(jSONArray1, jSONArray2);
      assertEquals(1, jSONArray2.length());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      String string0 = "null";
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCLET_PATH;
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      hashMap0.put(documentationTool_Location0, authenticator_RequestorType0);
      String string1 = "{\"x\":\"hello\",\"Unable to read the next character from the stream\":7,\"a\":[\"a string\"],\"b\":[]}";
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.add(jSONObject0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONObject1.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject2 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertTrue(jSONObject2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) ",:]}/\"[{;=#");
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      JSONArray jSONArray1 = jSONObject1.names();
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertEquals(2, jSONArray2.length());
      assertEquals(2, jSONObject1.length());
      assertNotNull(jSONArray2);
      assertNotSame(jSONArray2, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{p:eDLKG6Y;H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 13 [character 14 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("toUpperCase");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      jSONObject1.toString((int) (short)0);
      jSONObject1.names();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      try { 
        jSONObject0.getString("NHs|G>-ugyS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Short short0 = new Short((short)27);
      Short.valueOf((short)27);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "5coCH}EMelW-Yhg_";
      jSONObject0.put("5coCH}EMelW-Yhg_", (Object) short0);
      try { 
        jSONObject0.getString("5coCH}EMelW-Yhg_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)8;
      JSONObject.getNames(jSONObject0);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte)8;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String string0 = "9.M4hT`w%;g{?A";
      jSONObject0.optString("9.M4hT`w%;g{?A", "]G)G(");
      jSONObject1.optBoolean("mTT@U", true);
      Byte byte0 = new Byte((byte)8);
      jSONObject0.putOnce("istoString", byte0);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("]G)G(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Byte byte0 = new Byte((byte)101);
      JSONObject.numberToString(byte0);
      Double double0 = new Double((-580.500194596));
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Byte@0000000001");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(2, map0.size());
      
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Null pointer");
      Integer integer0 = new Integer((-687));
      jSONObject0.optBoolean("Y&");
      jSONObject0.optNumber("Illegal escape.");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      jSONObject0.toMap();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("gebtoString", 2082.0053016);
      try { 
        jSONObject0.getBigDecimal("gebtoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      JSONObject.wrap(short1);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short1);
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCLET_PATH;
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      hashMap0.put(documentationTool_Location0, authenticator_RequestorType0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(14);
      char[] charArray0 = new char[7];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      charArray0[0] = 'P';
      charArray0[1] = 'y';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      jSONObject0.write((Writer) stringWriter0, (int) (short)0, (int) (short)0);
      jSONObject0.optNumber((String) null);
      try { 
        jSONObject0.getBigDecimal("NHs|G>-ugyS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) null);
      long long0 = 3914L;
      jSONArray0.put(5, 3914L);
      jSONArray0.toJSONObject(jSONArray1);
      String string0 = "] is not a valid number.";
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        bigDecimal0.setScale((-562), roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("D%*]vJh=4QBov/o=eBV", 0.0F);
      JSONObject jSONObject2 = jSONObject1.increment("D%*]vJh=4QBov/o=eBV");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.similar(stringWriter0);
      JSONObject jSONObject3 = jSONObject1.accumulate("D%*]vJh=4QBov/o=eBV", jSONObject2);
      assertSame(jSONObject3, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, "ITSILd[2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("`Wu", 1.0);
      jSONObject1.toString();
      JSONObject.getNames(jSONObject1);
      Locale locale0 = new Locale("java.io.StringWriter@0000000009", "java.io.StringWriter@0000000009");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("java.io.StringWriter@0000000009", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name java.io.StringWriter@0000000009, locale java.io.stringwriter@0000000009_JAVA.IO.STRINGWRITER@0000000009
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ONE;
      HashMap<String, ObjectInputStream> hashMap0 = new HashMap<String, ObjectInputStream>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject.getNames(jSONObject0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "NHs|G>-ugyS\\";
      byte byte0 = (byte) (-86);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)8;
      JSONObject.getNames(jSONObject0);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte)8;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('K');
      // Undeclared exception!
      try { 
        stringWriter1.write((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
      assertTrue(jSONObject0.isEmpty());
      
      String string0 = JSONObject.doubleToString(3070.3);
      assertEquals("3070.3", string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("-ebF3?sDc)0s");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCLET_PATH;
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      hashMap0.put(documentationTool_Location0, authenticator_RequestorType0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[7];
      charArray0[0] = 'P';
      charArray0[1] = 'y';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = 'B';
      charArray0[5] = 'y';
      charArray0[6] = 'P';
      stringWriter0.write(charArray0);
      boolean boolean0 = jSONObject1.optBoolean("Expected a ',' or ']'");
      JSONObject.stringToValue("null");
      boolean boolean1 = JSONObject.isDecimalNotation("{\"x\":\"hello\",\"Unable to read the next character from the stream\":7,\"a\":[\"a string\"],\"b\":[]}");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(35);
      Integer integer0 = new Integer(35);
      jSONObject0.optBoolean((String) null);
      jSONObject0.optNumber((String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jSONObject0.toMap();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Long long0 = Long.getLong("", 0L);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.put("", (Object) long0);
      HashMap<RoundingMode, String> hashMap0 = new HashMap<RoundingMode, String>();
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      HashMap<RoundingMode, String> hashMap1 = new HashMap<RoundingMode, String>();
      hashMap1.put(roundingMode0, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      JSONObject.quote("D2y{`C,O7u");
      JSONObject.stringToValue("7=EdED5o");
      JSONPointer jSONPointer0 = new JSONPointer("");
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery(jSONPointer0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedWriter pipedWriter0 = new PipedWriter();
      Object object0 = JSONObject.wrap(jSONObject0);
      PipedReader pipedReader0 = new PipedReader();
      JSONObject.valueToString(pipedReader0);
      double double0 = jSONObject0.optDouble("java.io.StringWriter@0000000005", 1.0);
      assertEquals(1.0, double0, 0.01);
      assertSame(jSONObject0, object0);
      
      boolean boolean0 = JSONObject.isDecimalNotation("JSON does not allow non-finite numbers.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("`Wu", 1.0);
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
      
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCLET_PATH;
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      hashMap0.put(documentationTool_Location0, authenticator_RequestorType0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[1] = 'y';
      charArray0[2] = 'B';
      stringWriter0.write(charArray0);
      boolean boolean0 = jSONObject1.optBoolean("{\"x\":\"hello\",\"Unable to read the next character from the stream\":7,\"a\":[\"a string\"],\"b\":[]}");
      Object object0 = JSONObject.stringToValue("`Wu");
      assertEquals("`Wu", object0);
      
      boolean boolean1 = JSONObject.isDecimalNotation("java.io.StringWriter@0000000009");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      JSONArray jSONArray0 = new JSONArray();
      PipedInputStream pipedInputStream0 = new PipedInputStream(28);
      InputStreamReader inputStreamReader0 = null;
      try {
        inputStreamReader0 = new InputStreamReader(pipedInputStream0, "ABSZ}T15Y`AezZ&%");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-86);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      jSONObject0.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('K');
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      stringWriter1.write(charArray0);
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "{\"0\":\"hello\",\"Unable to read the next character from the stream\":7,\"a\":[\"a string\"],\"b\":[99]}", (int) (byte)8, (int) (byte) (-115));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("getshortValue");
      BigDecimal bigDecimal0 = new BigDecimal(14);
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = jSONObject0.isNull("java.io.StringWriter@0000000002");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(11);
      Integer integer0 = new Integer(11);
      jSONObject0.optBoolean((String) null);
      jSONObject0.optNumber((String) null);
      jSONObject0.isNull("getgetBytes");
      String string0 = "le";
      Long.getLong("le");
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      jSONObject0.names();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      JSONObject.wrap(short1);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short1);
      String string0 = "null";
      jSONObject0.optString("null");
      jSONObject0.optDouble("null");
      String string1 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":-99}";
      Class<Desktop.Action> class0 = Desktop.Action.class;
      try { 
        jSONObject1.getEnum(class0, "in");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] is not an enum of type java.io.StringWriter@0000000006.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      int int0 = 11;
      JSONObject jSONObject0 = new JSONObject(11);
      Integer integer0 = new Integer(11);
      String string0 = "\\\\";
      MockFileWriter mockFileWriter0 = new MockFileWriter("\\", true);
      mockFileWriter0.append((CharSequence) null);
      int int1 = 65;
      JSONObject.indent(mockFileWriter0, 65);
      try { 
        jSONObject0.getBigInteger((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      try { 
        jSONObject0.getBigInteger("{r5=Tzsc$|M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, SortOrder> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, SortOrder>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getBoolean("l7yKyI}/W&azcTq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(38);
      String[] stringArray0 = new String[3];
      String string0 = "";
      String string1 = "6b9x]%}VRO2yfBY";
      try { 
        jSONObject0.getBoolean("6b9x]%}VRO2yfBY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Short short0 = new Short((short)24);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      jSONObject1.remove("mX4W*aW");
      String string0 = jSONObject0.optString("null");
      jSONObject0.optDouble("null");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(objectOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      bufferedOutputStream0.flush();
      Object object0 = JSONObject.wrap(bufferedOutputStream0);
      assertFalse(object0.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      jSONObject0.toJSONArray((JSONArray) null);
      boolean boolean0 = jSONObject0.optBoolean("getshortValue");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(11);
      String string0 = null;
      Integer integer0 = new Integer(11);
      jSONObject0.optBoolean((String) null);
      jSONObject0.optNumber((String) null);
      try { 
        jSONObject0.getBigDecimal("Unable to write JSONObject value for key: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":{}}";
      String string1 = "xUc/_/%b~rha$";
      int int0 = (-1142);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger.valueOf(0L);
      jSONObject0.optNumber("=fU*A14+D*EE'YqA2", (Number) bigInteger0);
      String string2 = "mk_a Xsb";
      try { 
        jSONObject0.getLong("mk_a Xsb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      JSONObject.quote("Null pointer");
      Long.getLong("Null pointer", 824L);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "java.io.StringWriter@0000000001";
      stringArray0[1] = "java.io.StringWriter@0000000001";
      stringArray0[2] = "java.io.StringWriter@0000000001";
      stringArray0[3] = "java.io.StringWriter@0000000001";
      stringArray0[4] = "Null pointer";
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0, stringArray0);
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject1.put("java.io.StringWriter@0000000001", (Object) null);
      String string0 = "6wnE{L9";
      try { 
        jSONObject0.getJSONObject("6wnE{L9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("-0", (Object) null);
      jSONObject1.toString(1049);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject.getNames((Object) pipedOutputStream0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JSONObject jSONObject0 = new JSONObject((Object) ".fI\"~lth.[C;6t");
      jSONObject0.optFloat(".fI\"~lth.[C;6t", (-2683.3F));
      String string0 = "7u4ft{O";
      Long long0 = new Long((-2222L));
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, long0, 101, 101);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      JSONObject.wrap(short1);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((int) (short)0);
      jSONObject0.names();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
      OutputStreamWriter outputStreamWriter0 = null;
      try {
        outputStreamWriter0 = new OutputStreamWriter(bufferedOutputStream0, "java.io.StringWriter@0000000003");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      JSONObject.getNames((Object) "");
      String string0 = JSONObject.quote("");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Short short0 = new Short((short)1748);
      JSONObject.numberToString(short0);
      Object object0 = JSONObject.stringToValue("java.lang.Short@0000000002");
      String string0 = JSONObject.quote("java.lang.Short@0000000002");
      assertFalse(string0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ",:]}/\"[{;=#");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.names();
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      jSONObject1.toString((int) (short)0);
      jSONObject1.names();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
      OutputStreamWriter outputStreamWriter0 = null;
      try {
        outputStreamWriter0 = new OutputStreamWriter(bufferedOutputStream0, "java.io.StringWriter@0000000007");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      int int0 = 0;
      String string0 = "PbWPz(?vT]rY]BSZ-I4";
      JSONObject.quote("PbWPz(?vT]rY]BSZ-I4");
      String string1 = "6F#";
      String string2 = "WF(\\s)G1:<";
      try { 
        JSONObject.stringToNumber("WF(s)G1:<");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [WF(s)G1:<] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("`Wu", 1.0);
      jSONObject1.toString();
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCLET_PATH;
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      hashMap0.put(documentationTool_Location0, authenticator_RequestorType0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[1] = 'y';
      charArray0[2] = 'B';
      stringWriter0.write(charArray0);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "java.io.StringWriter@0000000010", 47, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(10);
      try { 
        jSONObject0.getInt("org.json.JSONObject$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      HashMap<JSONObject, DataOutputStream> hashMap0 = new HashMap<JSONObject, DataOutputStream>();
      JSONObject jSONObject0 = new JSONObject();
      Class<KeyRep.Type> class0 = KeyRep.Type.class;
      try { 
        jSONObject0.getEnum(class0, "] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      int int0 = 0;
      JSONObject jSONObject0 = new JSONObject(0);
      Class<Month> class0 = Month.class;
      String string0 = "xi9a,/d$";
      jSONObject0.optEnum(class0, "xi9a,/d$");
      try { 
        jSONObject0.getInt("xi9a,/d$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      try { 
        jSONObject0.getJSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      jSONObject1.toString((int) (short)0);
      try { 
        jSONObject1.getJSONObject("NHs|G>-ugyS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      String string0 = "";
      Long long0 = Long.getLong("", 0L);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      String string1 = "";
      jSONObject0.put("", (Object) long0);
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"\"", (Object) "\"\"");
      try { 
        jSONObject1.get("\"COg,iXYI5#{sUh+,Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Double double0 = new Double(1100.3343941549);
      String[] stringArray0 = new String[2];
      String string0 = "0";
      stringArray0[0] = "0";
      stringArray0[1] = "Unable to write JSONObject value for key: ";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      try { 
        jSONObject0.get("Unable to write JSONObject value for key: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject1 = new JSONObject(stringWriter0);
      assertEquals(1, jSONObject1.length());
      
      BigDecimal bigDecimal0 = new BigDecimal(2268.505284774646);
      String string0 = jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((short)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockFileWriter mockFileWriter0 = new MockFileWriter("is");
      JSONObject.wrap(mockFileWriter0);
      jSONObject0.optJSONArray("qHIJ+rb7");
      try { 
        jSONObject0.getFloat("qHIJ+rb7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000006] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":{}}";
      String string1 = "xUc/_/%b~rha$";
      int int0 = (-1142);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger.valueOf(0L);
      jSONObject0.optNumber("=fU*A14+D*EE'YqA2", (Number) bigInteger0);
      try { 
        jSONObject0.getLong("mk_a Xsb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      HashMap<Desktop.Action, BigInteger> hashMap0 = new HashMap<Desktop.Action, BigInteger>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("..fS'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject1 = jSONObject0.put("-0", (Object) linkedList0);
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCLET_PATH;
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      hashMap0.put(documentationTool_Location0, authenticator_RequestorType0);
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      linkedList1.removeFirstOccurrence("iskeySet");
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList1);
      jSONObject1.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-0");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "A JSONObject text must end with '}'");
      stringWriter1.write(2717);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-0";
      stringArray0[1] = "-0";
      stringArray0[2] = "-0";
      stringArray0[3] = "] is not a valid number.";
      stringArray0[4] = "-0";
      stringArray0[5] = "-0";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      try { 
        jSONObject2.getBoolean("-0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000020] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCLET_PATH;
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      hashMap0.put(documentationTool_Location0, authenticator_RequestorType0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("`Wu", 1.0);
      LinkedList<PipedOutputStream> linkedList0 = new LinkedList<PipedOutputStream>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONObject1.putOnce("`Wu", jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"`Wu\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.optQuery("");
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      Map<String, Object> map0 = jSONObject0.toMap();
      JSONObject jSONObject1 = new JSONObject(map0);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      GroupLayout.Alignment groupLayout_Alignment0 = GroupLayout.Alignment.BASELINE;
      linkedList0.add(groupLayout_Alignment0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        jSONObject0.getLong("0e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.TAGLET_PATH;
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.SERVER;
      hashMap0.put(documentationTool_Location0, authenticator_RequestorType0);
      JSONObject.valueToString(hashMap0);
      HashMap<Desktop.Action, BigInteger> hashMap1 = new HashMap<Desktop.Action, BigInteger>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap1);
      JSONObject jSONObject1 = jSONObject0.accumulate("java.io.StringWriter@0000000005", "ITSILd[2");
      try { 
        jSONObject1.getFloat("ITSILd[2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "gettoUpperCase");
      JSONObject jSONObject0 = new JSONObject("gettoUpperCase", stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      HashMap<Character.UnicodeScript, GroupLayout.Alignment> hashMap0 = new HashMap<Character.UnicodeScript, GroupLayout.Alignment>();
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.DEVANAGARI;
      GroupLayout.Alignment groupLayout_Alignment0 = GroupLayout.Alignment.BASELINE;
      hashMap0.put(character_UnicodeScript0, groupLayout_Alignment0);
      GroupLayout.Alignment groupLayout_Alignment1 = GroupLayout.Alignment.LEADING;
      hashMap0.put(character_UnicodeScript0, groupLayout_Alignment1);
      Character.UnicodeScript character_UnicodeScript1 = Character.UnicodeScript.ARMENIAN;
      GroupLayout.Alignment groupLayout_Alignment2 = GroupLayout.Alignment.TRAILING;
      hashMap0.put(character_UnicodeScript1, groupLayout_Alignment2);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      hashMap0.values();
      jSONObject0.length();
      jSONObject0.toString();
      String string0 = "I@Qa+sl.";
      JSONObject jSONObject1 = jSONObject0.putOnce("I@Qa+sl.", groupLayout_Alignment2);
      String string1 = ":\\Uk.&hf]j;O";
      String string2 = "2Fu%@";
      // Undeclared exception!
      try { 
        jSONObject1.optQuery(":Uk.&hf]j;O");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Map<ClientInfoStatus, Resource.AuthenticationType> map0 = null;
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = "\"/5!GH";
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("\"/5!GH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "`Wu";
      JSONObject jSONObject1 = jSONObject0.put("`Wu", 1.0);
      jSONObject1.toString();
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCLET_PATH;
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      hashMap0.put(documentationTool_Location0, authenticator_RequestorType0);
      String string1 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":[]}";
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[1] = 'y';
      charArray0[2] = 'B';
      stringWriter0.write(charArray0);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "java.io.StringWriter@0000000009", 47, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "/4[hLOv%d!F6{XA@rb");
      JSONObject jSONObject1 = jSONObject0.put("/4[hLOv%d!F6{XA@rb", (-3503.774851515));
      jSONObject1.names();
      jSONObject1.entrySet();
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("fe8lrL|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("D%*]vJh=4QBov/o=eBV", 0.0F);
      jSONObject1.increment("D%*]vJh=4QBov/o=eBV");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.similar(stringWriter0);
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.stringToValue("false");
      String string0 = JSONObject.quote("way");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("5coCH}EMelW-Yhg_");
      try { 
        jSONObject0.getBigDecimal("5coCH}EMelW-Yhg_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Number number0 = jSONObject0.optNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("{}", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      String string0 = jSONObject0.optString("VTHN&F~HnG.?SP58 ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject.getNames((Object) pipedOutputStream0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-58));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -58
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      HashMap<JSONObject, DataOutputStream> hashMap0 = new HashMap<JSONObject, DataOutputStream>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject.getNames((Object) pipedOutputStream0);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject.getNames((Object) pipedOutputStream0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(pipedOutputStream0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":[],\"value2\":false,\"number\":\"1\"}";
      stringArray0[2] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":[],\"value2\":false,\"number\":\"1\"}";
      stringArray0[3] = "";
      stringArray0[4] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":null,\"number\":\"1\"}";
      String string1 = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "getDeclaringClass";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<GroupLayout.Alignment> linkedList1 = new LinkedList<GroupLayout.Alignment>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList1);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList1);
      try { 
        JSONObject.stringToNumber("-ebF3?sc)0s");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String string0 = "6k9Jt0Ka}O]B?p";
      try { 
        JSONObject.stringToNumber("6k9Jt0Ka}O]B?p");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"6k9Jt\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.stringToNumber("-0");
      try { 
        jSONObject0.get("(6'&b[%\"V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = "6k9Jt0Ka}O]B?pe";
      try { 
        JSONObject.stringToNumber("6k9Jt0Ka}O]B?pe");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":[]}}";
      JSONObject.quote("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":[]}}");
      String string1 = "6F#";
      try { 
        JSONObject.stringToNumber("6F#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"6F#\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = JSONObject.quote("\"Q0r.8/}mLc.tG]n");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("`%>f");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [`%>f] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at 56 [character 57 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("000");
      String string0 = JSONObject.valueToString("000");
      assertFalse(string0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = "{\"org.json.JSONArray\":false,\"size\":\"getBytes\",\"value\":true,\"fruit\":false,\"number\":\"1\"}";
      JSONObject jSONObject0 = new JSONObject("{\"org.json.JSONArray\":false,\"size\":\"getBytes\",\"value\":true,\"fruit\":false,\"number\":\"1\"}");
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      try { 
        jSONObject0.getInt("{\"org.json.JSONArray\":false,\"size\":\"getBytes\",\"value\":true,\"fruit\":false,\"number\":\"1\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000033] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":null,\"value\":true,\"value2\":false,\"number\":\"1\"}");
      jSONObject0.increment("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":null,\"value\":true,\"value2\":false,\"number\":\"1\"}");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.getInt("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":null,\"value\":true,\"value2\":false,\"number\":\"1\"}");
      JSONObject.indent(charArrayWriter0, 12);
      String string0 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":-99}";
      try { 
        jSONObject0.getDouble("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":-99}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000066] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Short short0 = new Short((short)27);
      String string0 = JSONObject.numberToString(short0);
      JSONObject.stringToValue("true");
      String string1 = JSONObject.quote(" [character ");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String string0 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[99],\"\"\":{},\"xx\":-99}";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[99],\"\"\":{},\"xx\":-99}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 40 [character 41 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject.indent(stringWriter0, 1132);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("FfP");
      assertEquals("FfP", object0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[99],\"b\":{}}";
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[99],\"b\":{}}");
      Writer writer0 = null;
      int int0 = 2072;
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 2072);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}");
      jSONObject1.similar(jSONObject0);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = jSONObject0.keySet();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange((String) null, (-357.856));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONObject0.getNumber("x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      String string0 = null;
      try { 
        jSONObject0.getNumber((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("&I8-0", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name &I8-0, locale de_DE
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String string0 = "`p";
      Locale locale0 = new Locale("{}", "`p");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name , locale {}_`P
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONObject0.query("] is not a JSONObject.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject.wrap(short0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      String string0 = jSONObject0.optString("null");
      jSONObject0.optDouble("null");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(objectOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      Object object0 = JSONObject.wrap(bufferedOutputStream0);
      assertFalse(object0.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Short short0 = new Short((short) (-8));
      JSONObject.wrap(short0);
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.wrap(object0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] could not be converted to BigInteger.", object1);
      jSONObject0.toString(2121);
      JSONArray jSONArray0 = jSONObject1.names();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ":/CcsyZ~%3W{A$;");
      try { 
        jSONObject0.getLong(":/CcsyZ~%3W{A$;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000019] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"color\":null,\"org.json.JSONArray\":false,\"size\":\"Large\",\"value\":true,\"fruit\":false,\"number\":\"1\"}");
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      try { 
        jSONObject0.getInt("{\"color\":null,\"org.json.JSONArray\":false,\"size\":\"Large\",\"value\":true,\"fruit\":false,\"number\":\"1\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000041] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Short short0 = new Short((short)17);
      JSONObject.wrap((Object) null);
      JSONObject jSONObject0 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) pipedReader0);
      jSONObject1.toString((int) (short)17);
      jSONObject1.names();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      HashMap<RoundingMode, String> hashMap0 = new HashMap<RoundingMode, String>();
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.query("");
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = "Null pointer";
      JSONObject.quote("Null pointer");
      JSONObject jSONObject0 = new JSONObject((Object) "Null pointer");
      String string1 = "C7?4~Er}";
      int int0 = 4386;
      JSONObject jSONObject1 = jSONObject0.put("C7?4~Er}", 4386);
      String string2 = null;
      // Undeclared exception!
      try { 
        jSONObject1.query("C7?4~Er}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      HashMap<Desktop.Action, BigInteger> hashMap0 = new HashMap<Desktop.Action, BigInteger>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getJSONArray("org.json.JSONArray@0000000002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(11);
      Integer integer0 = new Integer(11);
      jSONObject0.optBoolean((String) null);
      jSONObject0.optNumber((String) null);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = jSONObject0.keySet();
      jSONObject0.accumulate("] is not a number.", (Object) null);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      JSONPointer jSONPointer1 = null;
      try {
        jSONPointer1 = new JSONPointer("ZU'jY+Y4zL~Zr%{TBr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toMap();
      JSONObject jSONObject1 = jSONObject0.put("WV-ddR3)L`QFm", (Object) double0);
      jSONObject0.toString(737);
      jSONObject1.names();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("NHs|G>-ugyS", "fz2|wZQ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // fz2|wZQ
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Short short0 = new Short((short)1201);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "NHs|G>-ugyS\\";
      JSONObject jSONObject1 = new JSONObject((int) (short)1201);
      jSONObject1.put("NHs|G>-ugyS", (Object) short0);
      jSONObject1.toString((int) (short)1201);
      String string1 = "3amQ%yU0Kbw;<(;K[6%";
      MockFile mockFile0 = new MockFile("3amQ%yU0Kbw;<(;K[6%");
      MockFile.createTempFile(" at ", " at ", (File) mockFile0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      HashMap<Component.BaselineResizeBehavior, MockPrintStream> hashMap0 = new HashMap<Component.BaselineResizeBehavior, MockPrintStream>(18, 18);
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Character character0 = Character.valueOf('i');
      JSONObject jSONObject1 = jSONObject0.put("gettri6m", (Object) character0);
      jSONObject1.optInt("gettri6m");
      try { 
        jSONObject1.getNumber("gettri6m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(11);
      String string0 = null;
      jSONObject0.optBoolean((String) null);
      String string1 = "] is not a number.";
      Class<CryptoPrimitive> class0 = CryptoPrimitive.class;
      try { 
        jSONObject0.getEnum(class0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject jSONObject0 = new JSONObject(1386);
      BigDecimal bigDecimal0 = new BigDecimal(1386);
      HashMap<PseudoColumnUsage, JDBCType> hashMap0 = new HashMap<PseudoColumnUsage, JDBCType>();
      jSONObject0.put("null", (Map<?, ?>) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}");
      jSONObject1.similar(jSONObject0);
      jSONObject1.toString();
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      HashMap<JavaFileObject.Kind, InputStreamReader> hashMap0 = new HashMap<JavaFileObject.Kind, InputStreamReader>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      HashMap<GroupLayout.Alignment, StringReader> hashMap0 = new HashMap<GroupLayout.Alignment, StringReader>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("shortValue", (Map<?, ?>) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      String string0 = JSONObject.numberToString(bigInteger0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBigDecimal("e4dICj4PT\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",5");
      jSONObject0.write((Writer) mockPrintWriter0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject1 = new JSONObject(double0);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      jSONObject1.toString();
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Byte byte0 = new Byte((byte)109);
      JSONObject.numberToString(byte0);
      JSONObject jSONObject0 = new JSONObject(0);
      String string0 = "org.json.JSONObject$Null";
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      jSONObject0.optInt("org.json.JSONObject$Null", 9);
      String string1 = "S>kKneU[$h`''";
      MockFileWriter mockFileWriter0 = new MockFileWriter("S>kKneU[$h`''", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("java.lang.Byte@0000000001");
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("java.lang.Byte@0000000001");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"\"", (Object) "\"\"");
      jSONObject1.optInt("\"\"", (-1117));
      PipedWriter pipedWriter0 = new PipedWriter();
      jSONObject1.put("\"\"", (Object) pipedWriter0);
      double double0 = jSONObject1.optDouble("JSON does not allow non-finite numbers.", (double) (-1117));
      assertEquals(1, jSONObject0.length());
      assertEquals((-1117.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Byte byte0 = new Byte((byte)109);
      JSONObject.numberToString(byte0);
      JSONObject jSONObject0 = new JSONObject(0);
      String string0 = "org.json.JSONObject$Null";
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject1 = jSONObject0.put("org.json.JSONObject$Null", (Map<?, ?>) hashMap0);
      jSONObject0.optInt("org.json.JSONObject$Null", 9);
      MockFileWriter mockFileWriter0 = new MockFileWriter("S>kKneU[$h`''", false);
      Writer writer0 = jSONObject1.write((Writer) mockFileWriter0);
      JSONObject.writeValue(writer0, jSONObject1, (-130), (-727));
      String string1 = "";
      try { 
        jSONObject1.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"2olor\":null,\"value\":-9\"value2\":false,\"number\":\"3\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at 56 [character 57 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      String string0 = "D:+[-4>uWnF$~>_%`";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("D:+[-4>uWnF$~>_%`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Short short0 = new Short((short) (-263));
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      JSONObject jSONObject1 = new JSONObject(linkedList0);
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject3 = jSONObject2.append("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      Short short1 = new Short((short) (-263));
      JSONObject jSONObject4 = new JSONObject(linkedList0, stringArray0);
      LinkedList<Formatter.BigDecimalLayoutForm> linkedList1 = new LinkedList<Formatter.BigDecimalLayoutForm>();
      Object object0 = JSONObject.stringToValue("\n");
      String string0 = jSONObject3.toString(14);
      assertFalse(string0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("b*E>z9Ag");
      Writer writer0 = JSONObject.writeValue(mockFileWriter0, "b*E>z9Ag", (-1442), (-1442));
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("fWLP@O");
      assertEquals("fWLP@O", object0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "fWLP@O");
      String string0 = jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[1];
      charArray0[0] = 'P';
      JSONObject.quote((String) null);
      JSONObject.writeValue(stringWriter0, (Object) null, 436, 436);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String string0 = JSONObject.quote("FfP");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      MockFile mockFile0 = new MockFile("{\"fruit\":{},\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", "{\"fruit\":{},\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockFile0;
      objectArray0[6] = (Object) "{\"fruit\":{},\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}";
      objectArray0[7] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.format("{\"fruit\":{},\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.append('-');
      Writer writer0 = JSONObject.writeValue(printWriter1, mockFile0, (-2960), 0);
      assertNotSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      JSONTokener jSONTokener0 = new JSONTokener("6k9Jt0Ka}O]B?pe");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("iabs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      String string0 = "";
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }
}
