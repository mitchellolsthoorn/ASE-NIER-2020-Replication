/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 02:29:57 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.TrayIcon;
import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.sql.JDBCType;
import java.time.DayOfWeek;
import java.util.Collection;
import java.util.Enumeration;
import java.util.Formatter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.annotation.Resource;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle;
import javax.tools.JavaFileObject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject.stringToValue("'+N.rqx*<!7>js^K*Fl");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [\"] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("9=Hr#J");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9=Hr#J\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject.stringToNumber("0");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Double double0 = new Double(1689.10404383);
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      try { 
        jSONObject0.getBigInteger("a JSON pointer should start with '/' or '#/'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"] is not an enum of type \":{},\"\\\":99,\"org.json.JSONObject$1\":{},\"] is not a JSONArray.\":null,\"] not a string.\":{},\"Misplaced endObject.\":[]}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 41 [character 42 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":false}");
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      JSONObject.indent(pipedWriter0, 85);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      JSONObject jSONObject1 = jSONObject0.increment("k!r:*pGvbrKSOrU{8J");
      JSONObject jSONObject2 = jSONObject1.putOnce("] is not a JSONObject.", jSONObject0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("hQVT");
      try { 
        jSONObject2.write((Writer) mockFileWriter0, 3204, 3204);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: ] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      JSONObject jSONObject0 = new JSONObject(enumeration0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "xPo=E");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("xPo=E", stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.write((Writer) charArrayWriter0);
      assertEquals("{}", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("27.731872935163537");
      assertEquals((short)27, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-621.0220951776479");
      assertEquals((byte) (-109), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("java.io.StringWriter@0000000002", "java.io.StringWriter@0000000002");
      JSONArray jSONArray0 = (JSONArray)jSONObject0.remove("java.io.StringWriter@0000000002");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"ma\":0}");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = jSONObject0.keySet();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query(jSONPointer0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONObject jSONObject0 = new JSONObject(byteArrayInputStream0);
      JSONObject jSONObject1 = jSONObject0.put("getread", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<RoundingMode, ObjectInputStream> hashMap0 = new HashMap<RoundingMode, ObjectInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Misplaced object.");
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = jSONObject0.optQuery("");
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      Number number0 = jSONObject0.optNumber("2EQb|Koosc{0qz(", (Number) bigDecimal0);
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ONE;
      Number number0 = jSONObject0.optNumber("] is not an enum of type ", (Number) bigInteger0);
      assertEquals((short)1, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal((-1.0));
      Number number0 = jSONObject0.optNumber("flo", (Number) bigDecimal0);
      assertEquals((byte) (-1), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      long long0 = jSONObject0.optLong("16", (long) (byte)8);
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      long long0 = jSONObject0.optLong("\"\"", (-1909L));
      assertEquals((-1909L), long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("8", (float) (byte)58);
      int int0 = jSONObject1.optInt("8");
      assertEquals(58, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      float float0 = jSONObject0.optFloat("<|Y5EcJP", 673.73895F);
      assertEquals(673.73895F, float0, 0.01F);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("value [%s] is not an array or object therefore its key %s cannot be resolved", (double) 1591.4F);
      assertEquals(1591.4000244140625, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":{},\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      boolean boolean0 = jSONObject0.optBoolean("V((", false);
      assertFalse(boolean0);
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = jSONObject0.optBigInteger("is", (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-44);
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONObject0.optBigInteger("java.io.StringWriter@0000000015", bigInteger0);
      assertEquals((short) (-44), bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal("[", (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.putOnce("java.io.StringWriter@0000000002", charArrayWriter0);
      Object object0 = jSONObject0.opt("java.io.StringWriter@0000000002");
      assertSame(object0, charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":-99,\"getDeclaringClass\":7,\"z\":true,\"a\":[],\"b\":{}}");
      int int0 = jSONObject0.length();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("java.io.StringWriter@0000000002", "java.io.StringWriter@0000000002");
      boolean boolean0 = jSONObject0.isNull("java.io.StringWriter@0000000002");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("K=^l_K0.hu");
      long long0 = jSONObject1.getLong("K=^l_K0.hu");
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("java.io.StringWriter@0000000003", (-1.0));
      long long0 = jSONObject1.getLong("java.io.StringWriter@0000000003");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("/'\"l~R", (-99L));
      double double0 = jSONObject0.getDouble("/'\"l~R");
      assertEquals((-99.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.writeValue(pipedWriter0, hashMap0, (-988), 41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":{},\"y\":7,\"getClass\":true,\"a\":[],\"b\":{}}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Yfr`9T5");
      // Undeclared exception!
      JSONObject.writeValue(mockPrintWriter0, jSONObject0, 3365, 42);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0);
      try { 
        JSONObject.writeValue(pipedWriter0, bufferedWriter0, 755, (-2562));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(6);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 123, 123);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Resource.AuthenticationType, Dialog.ModalityType> hashMap0 = new HashMap<Resource.AuthenticationType, Dialog.ModalityType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("O", "O");
      JSONObject jSONObject2 = jSONObject1.increment("' and instead saw ''");
      // Undeclared exception!
      jSONObject2.toString(1000000);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("7>KNNaBHp\u0001x", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote("] is not an int.", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<InputStreamReader> linkedList0 = new LinkedList<InputStreamReader>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.put("`v)!O>'m&AtLx", (Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<JavaFileObject.Kind, GroupLayout.Alignment> hashMap0 = new HashMap<JavaFileObject.Kind, GroupLayout.Alignment>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-3066L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<Component.BaselineResizeBehavior, Character> hashMap0 = new HashMap<Component.BaselineResizeBehavior, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 1549);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("K;mO69BorR", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 2908.99F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.put("istoMap", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      try { 
        jSONObject0.getBoolean("y4-?c &#8{k.{wV)|~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, "D");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("true");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3227), 1462);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, (InputStream) null);
      JSONTokener jSONTokener0 = new JSONTokener(sequenceInputStream0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Locale locale0 = new Locale("}iz\u0007");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}iz\u0007", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name }iz\u0007, locale }iz\u0007
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("na", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-166));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -166
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      Double double0 = new Double(1.0);
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      hashMap0.put(double0, dayOfWeek0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject jSONObject1 = jSONObject0.putOnce("flo", hashMap0);
      jSONObject1.write((Writer) charArrayWriter0, 42, 42);
      assertEquals(379, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write((Writer) stringWriter0, 105, 105);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOnce("flo", "flo");
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      Writer writer0 = jSONObject0.write((Writer) pipedWriter0, 0, 64);
      assertSame(pipedWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":-99,\"y\":7,\"1\":false,\"a\":true,\"b\":{}}");
      MockFileWriter mockFileWriter0 = new MockFileWriter("F;V XL1|/o", false);
      jSONObject0.write((Writer) mockFileWriter0, (-1449), (-1400));
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject jSONObject1 = jSONObject0.putOnce("flo", charArrayWriter0);
      jSONObject1.write((Writer) charArrayWriter0, 64, (-1144));
      assertEquals(71, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charsetEncoder0);
      Object object0 = JSONObject.wrap(outputStreamWriter0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("w`Fj=/");
      Object object0 = JSONObject.wrap(boolean0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Character character0 = Character.valueOf(']');
      Object object0 = JSONObject.wrap(character0);
      assertEquals(']', object0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Double double0 = new Double(1.0);
      Object object0 = JSONObject.wrap(double0);
      assertEquals(1.0, object0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Integer integer0 = new Integer(127);
      Object object0 = JSONObject.wrap(integer0);
      assertEquals(127, object0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = JSONObject.wrap("java.io.StringWriter@0000000002");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      Object object0 = JSONObject.wrap(dayOfWeek0);
      assertSame(object0, dayOfWeek0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.put(Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(1.0F);
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Double double0 = new Double(914.44789927894);
      JSONObject.testValidity(double0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.testValidity(jSONArray0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0");
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-O");
      assertEquals("-O", object0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("{\"gettoString\":true}");
      assertEquals("{\"gettoString\":true}", object0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("null");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("false");
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("true");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("{\"re\":0.0,\"x\":\"a string\"}");
      Writer writer0 = JSONObject.quote("{\"re\":0.0,\"x\":\"a string\"}", (Writer) mockFileWriter0);
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.quote("", (Writer) charArrayWriter0);
      assertEquals(2, charArrayWriter0.size());
      assertEquals("\"\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(59);
      JSONObject.quote((String) null, (Writer) charArrayWriter0);
      assertEquals(2, charArrayWriter0.size());
      assertEquals("\"\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":{},\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      JSONObject jSONObject1 = jSONObject0.put("{\"x\":{},\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", (Object) null);
      assertEquals(5, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"key\":0.0}");
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("java.io.StringWriter@0000000002", "java.io.StringWriter@0000000002");
      String string0 = jSONObject0.optString("java.io.StringWriter@0000000002", "sp");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(12);
      String string0 = jSONObject0.optString("org.json.JSONObject@0000000001", "org.json.JSONObject@0000000001");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Number number0 = jSONObject0.optNumber("n/.FTm~00ZbIrq7xF=", (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("java.io.StringWriter@0000000002", hashMap0);
      long long0 = jSONObject0.optLong("java.io.StringWriter@0000000002", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(fileSystemHandling0);
      jSONObject0.append("rUctkEmXb`=k^zgwH", "rUctkEmXb`=k^zgwH");
      int int0 = jSONObject0.optInt("rUctkEmXb`=k^zgwH", 978);
      assertEquals(1, jSONObject0.length());
      assertEquals(978, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      int int0 = jSONObject0.optInt("~1", (-2260));
      assertEquals((-2260), int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"' and instead saw ''\":-1.0}");
      jSONObject0.put("{\"' and instead saw ''\":-1.0}", 0.0);
      int int0 = jSONObject0.optInt("{\"' and instead saw ''\":-1.0}", (-2260));
      assertEquals(2, jSONObject0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      float float0 = jSONObject0.optFloat("].", (-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":-99,\"y\":7,\"0000\":false,\"a\":[],\"b\":{}}");
      boolean boolean0 = jSONObject0.optBoolean("\"", true);
      assertTrue(boolean0);
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject jSONObject1 = jSONObject0.accumulate("<sjZU>GNCFzKU%Z", pipedWriter0);
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.INHERITED;
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      jSONObject1.optEnum(class0, "<sjZU>GNCFzKU%Z", character_UnicodeScript0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":{},\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.INHERITED;
      jSONObject0.optEnum(class0, "Yfr`9T5", character_UnicodeScript0);
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":-99,\"y\":7,\"1\":false,\"a\":true,\"b\":{}}");
      jSONObject0.opt("F;V XL1|/o");
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2819);
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Locale locale0 = new Locale("}iz\u0007");
      JSONObject jSONObject0 = new JSONObject(locale0);
      boolean boolean0 = jSONObject0.isEmpty();
      assertEquals(13, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("java.io.StringWriter@0000000002", "java.io.StringWriter@0000000002");
      JSONArray jSONArray0 = (JSONArray)jSONObject0.get("java.io.StringWriter@0000000002");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      jSONObject0.put("Yfr`9T5", 0.0);
      try { 
        jSONObject0.getBigInteger("Yfr`9T5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Class<LayoutStyle.ComponentPlacement> class0 = LayoutStyle.ComponentPlacement.class;
      jSONObject0.optEnum(class0, ")wZezW=");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("java.io.StringWriter@0000000002", hashMap0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"get\":{}}");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOnce("flo", object0);
      Map<String, Object> map0 = jSONObject1.toMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("K=^l_K0.hu");
      Map<String, Object> map0 = jSONObject1.toMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] is not an enum of type \":true,\"1324.05380\":{\"Unable to read the next character from the stream\":true},\"\f\":99}");
      String string0 = jSONObject0.toString(755);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = JSONObject.writeValue(stringWriter0, stringWriter0, 48, 48);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] is not an enum of type \":-99,\"xx\":99,\" line \":[]}");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, object0, 2531, (-329));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, (Object) null, 2563, 2563);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Object object0 = JSONObject.wrap(bigInteger0);
      assertSame(object0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm0 = Formatter.BigDecimalLayoutForm.SCIENTIFIC;
      Double double0 = new Double((-1834.79597));
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      hashMap0.put(formatter_BigDecimalLayoutForm0, double0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = JSONObject.writeValue(stringWriter0, hashMap0, (-988), (-988));
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Float float0 = new Float((-1590.761636320532));
      Object object0 = JSONObject.wrap(float0);
      assertEquals((-1590.7616F), object0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Long long0 = new Long(1L);
      Object object0 = JSONObject.wrap(long0);
      assertEquals(1L, object0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)1845);
      linkedList0.add(short0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Unable to preserve stream position");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.wrap(object0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Object object0 = JSONObject.wrap(jSONArray0);
      assertSame(object0, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1773);
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("java.io.StringWriter@0000000002", "java.io.StringWriter@0000000002");
      JSONArray jSONArray0 = jSONObject1.names();
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<FilterInputStream> linkedList0 = new LinkedList<FilterInputStream>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Float float0 = new Float(Float.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-0");
      assertEquals(-0.0, number0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("2LDDO@^'4I)>ME{@\"");
      assertEquals("2LDDO@^'4I)>ME{@\"", object0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("IWgkHwvUnObs(ieFayt/");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("java.io.StringWriter@0000000002", (-2552.88095665));
      boolean boolean0 = jSONObject1.similar(jSONObject0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      boolean boolean0 = jSONObject1.similar(jSONObject0);
      assertEquals(1, jSONObject1.length());
      assertTrue(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.similar("{\"Nulk pointer\":true,\"Unable to write JSONObject value fr key:\":falne,\"getClass\":false,\"\t\":[],\"b\":-99");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = JSONObject.quote("{\"ke</y\":0.0}");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("}izA7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.quote("IWgkHwvUnObs(ieFayt/", (Writer) charArrayWriter0);
      assertEquals("\"IWgkHwvUnObs(ieFayt/\"", charArrayWriter0.toString());
      assertEquals(22, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"re\":0.0,\"true\":null}");
      try { 
        jSONObject0.getNumber("{\"re\":0.0,\"true\":null}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<RoundingMode> class0 = RoundingMode.class;
      try { 
        jSONObject0.getEnum(class0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("#", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Double double0 = new Double(1.0);
      JSONObject jSONObject1 = jSONObject0.append("java.io.StringWriter@0000000002", "java.io.StringWriter@0000000002");
      try { 
        jSONObject1.putOnce("java.io.StringWriter@0000000002", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"java.io.StringWriter@0000000002\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("tQ0=y$", stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce("tQ0=y$", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      StringReader stringReader0 = new StringReader("(8RX`/`Z{S@Kd");
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, stringReader0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("lTi#dC~b|D'", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(125);
      HashMap<String, JDBCType> hashMap0 = new HashMap<String, JDBCType>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] could not be converted to BigDecimal.", true);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      File file0 = MockFile.createTempFile("{\"re\":0.0,\"x\":\"a string\"}", "{\"re\":0.0,\"x\":\"a string\"}");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(file0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", false);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<RoundingMode> class0 = RoundingMode.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertEquals(34, set0.size());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MockFile mockFile0 = new MockFile("xPo=E");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("java.io.StringWriter@0000000002");
      String string0 = jSONObject0.optString("java.io.StringWriter@0000000002");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not an enum of type ", (Object) "] is not an enum of type ");
      Number number0 = jSONObject1.optNumber("] is not an enum of type ");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      JSONObject jSONObject1 = jSONObject0.putOnce("<sjZU>GNCFzKU%Z", class0);
      Number number0 = jSONObject1.optNumber("<sjZU>GNCFzKU%Z");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("K=^l_K0.hu");
      Number number0 = jSONObject0.optNumber("K=^l_K0.hu");
      assertEquals(1, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"ErTor reading value at index position \":falme}");
      jSONObject0.put("{\"ErTor reading value at index position \":falme}", 0.0);
      jSONObject0.optLong("{\"ErTor reading value at index position \":falme}");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("java.io.StringWriter@0000000002", "java.io.StringWriter@0000000002");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("java.io.StringWriter@0000000002");
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(17);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("/N YL0+7B");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedWriter pipedWriter0 = new PipedWriter();
      jSONObject0.append("tQ0=y$", pipedWriter0);
      int int0 = jSONObject0.optInt("tQ0=y$");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("java.io.StringWriter@0000000002", "java.io.StringWriter@0000000002");
      float float0 = jSONObject0.optFloat("java.io.StringWriter@0000000002", (-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("\t", 0.0);
      float float0 = jSONObject0.optFloat("\t", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("java.io.StringWriter@0000000002", "java.io.StringWriter@0000000002");
      double double0 = jSONObject0.optDouble("java.io.StringWriter@0000000002", (double) (-1.0F));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("\t", 0.0);
      double double0 = jSONObject1.optDouble("\t", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("java.io.StringWriter@0000000003", hashMap0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("java.io.StringWriter@0000000003", bigInteger0);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":-99,\"y\":7,\"1\":false,\"a\":true,\"b\":{}}");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("f@t@=|;A", bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("java.io.StringWriter@0000000002", "java.io.StringWriter@0000000002");
      BigDecimal bigDecimal0 = new BigDecimal(1068);
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("java.io.StringWriter@0000000002", bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONObject0.put("java.lang.Long@0000000001", (-2362));
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("java.lang.Long@0000000001", bigDecimal0);
      assertEquals((short) (-2362), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("\t", 0.0);
      BigDecimal bigDecimal0 = new BigDecimal((-2227));
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("\t", bigDecimal0);
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      String string0 = JSONObject.numberToString(bigDecimal0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("tQ0=y$", stringArray0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("java.io.StringWriter@0000000002", hashMap0);
      try { 
        jSONObject0.increment("java.io.StringWriter@0000000002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000011].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("java.io.StringWriter@0000000002", hashMap0);
      boolean boolean0 = jSONObject0.has("java.io.StringWriter@0000000002");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = jSONObject0.putOnce("@U!LR5PRI+jvC<", "flo");
      String string0 = jSONObject1.getString("@U!LR5PRI+jvC<");
      assertEquals("flo", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.putOnce("java.io.StringWriter@0000000003", hashMap0);
      try { 
        jSONObject0.getString("java.io.StringWriter@0000000003");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String[] stringArray0 = JSONObject.getNames((Object) byteArrayOutputStream0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject jSONObject1 = jSONObject0.append("tQ0=y$", pipedWriter0);
      JSONObject.getNames(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("\t", 0.0);
      long long0 = jSONObject0.getLong("\t");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("\t", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getLong("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("java.io.StringWriter@0000000002", (-2552.88095665));
      try { 
        jSONObject1.getJSONObject("java.io.StringWriter@0000000002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("java.io.StringWriter@0000000002", "java.io.StringWriter@0000000002");
      JSONArray jSONArray0 = jSONObject0.getJSONArray("java.io.StringWriter@0000000002");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("\t", 0.0);
      try { 
        jSONObject0.getJSONArray("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":-99,\"y\":7,\"1\":false,\"a\":true,\"b\":{}}");
      JSONObject jSONObject1 = jSONObject0.put("Yfr`9T5", 0.0);
      int int0 = jSONObject1.getInt("Yfr`9T5");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedWriter pipedWriter0 = new PipedWriter();
      jSONObject0.append("tQ0=y$", pipedWriter0);
      try { 
        jSONObject0.getInt("tQ0=y$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("\t", 0.0);
      Number number0 = jSONObject1.getNumber("\t");
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("java.io.StringWriter@0000000003", hashMap0);
      try { 
        jSONObject0.getNumber("java.io.StringWriter@0000000003");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Integer integer0 = new Integer(499);
      jSONObject0.putOnce("A JSONObject text must begin with '{'", integer0);
      float float0 = jSONObject0.getFloat("A JSONObject text must begin with '{'");
      assertEquals(499.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Locale locale0 = new Locale("}iz\u0007");
      JSONObject jSONObject0 = new JSONObject(locale0);
      JSONObject jSONObject1 = jSONObject0.putOpt("}iz\u0007", locale0);
      try { 
        jSONObject1.getFloat("}iz\u0007");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000042] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("getlength", 0.0);
      assertEquals(1, jSONObject0.length());
      
      double double0 = jSONObject0.getDouble("getlength");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      jSONObject0.putOnce("java.io.StringWriter@0000000003", string0);
      try { 
        jSONObject0.getDouble("java.io.StringWriter@0000000003");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("java.io.StringWriter@0000000003", hashMap0);
      try { 
        jSONObject1.getBigDecimal("java.io.StringWriter@0000000003");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("K=^l_K0.hu");
      boolean boolean0 = jSONObject1.optBoolean("K=^l_K0.hu", true);
      assertFalse(jSONObject0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1044.3));
      assertEquals("-1044.3", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("java.io.StringWriter@0000000003", hashMap0);
      jSONObject0.append("java.io.StringWriter@0000000003", (Object) null);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("UrkmWQ", 0.0F);
      try { 
        jSONObject0.append("UrkmWQ", "UrkmWQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[UrkmWQ] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOnce("java.io.StringWriter@0000000003", string0);
      PipedReader pipedReader0 = new PipedReader(59);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      jSONObject1.accumulate("java.io.StringWriter@0000000003", pipedWriter0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<Component.BaselineResizeBehavior, Character> hashMap0 = new HashMap<Component.BaselineResizeBehavior, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.accumulate("779.0", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("java.io.StringWriter@0000000002", "java.io.StringWriter@0000000002");
      jSONObject1.accumulate("java.io.StringWriter@0000000002", (Object) null);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      HashMap<Component.BaselineResizeBehavior, Character> hashMap0 = new HashMap<Component.BaselineResizeBehavior, Character>();
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = Component.BaselineResizeBehavior.CONSTANT_DESCENT;
      hashMap0.put(component_BaselineResizeBehavior0, (Character) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      DayOfWeek dayOfWeek0 = DayOfWeek.WEDNESDAY;
      hashMap0.put((Double) null, dayOfWeek0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"Nulk pointer\":true,\"Unable to write JSONObject value fr key:\":falne,\"getClass\":false,\"\t\":[],\"b\":-99");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at 101 [character 102 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"key\"&F:00}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 7 [character 8 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("Error reading value at index position ");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] is not an enum of type \":true,\"1324.05380\":{}}");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = jSONObject0.keySet();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery(jSONPointer0);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"key\":0.0}");
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("170.24705961");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("Yfr`9T5");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Locale locale0 = new Locale("hQVT");
      JSONObject jSONObject0 = new JSONObject(locale0);
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      jSONObject0.put("hQVT", (Collection<?>) linkedList0);
      assertEquals(14, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String[] stringArray0 = new String[3];
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      JSONObject jSONObject0 = new JSONObject(pipedWriter0, stringArray0);
      double double0 = jSONObject0.optDouble("z>jkkjo4H,");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("tQ0=y$", stringArray0);
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query("Substring bounds error");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("8Kv");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.isNull("CG8ng :Kf>^8d)G");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"ErTor reading value at index position \":falme}");
      jSONObject0.put("{\"ErTor reading value at index position \":falme}", 0.0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.optBigInteger("{\"ErTor reading value at index position \":falme}", bigInteger0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      float float0 = jSONObject0.optFloat(" at ");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
