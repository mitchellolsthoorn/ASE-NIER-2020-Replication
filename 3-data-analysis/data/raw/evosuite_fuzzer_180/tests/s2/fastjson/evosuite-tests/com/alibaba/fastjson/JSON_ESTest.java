/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 12:57:38 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.JSONValidator;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ParseProcess;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.GenericArrayTypeImpl;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import java.util.Enumeration;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSON_ESTest extends JSON_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("NJ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("Ne<@F@ NNZ`g>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        JSON.parseArray(";?2 5", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but ;, pos 1, line 1, column 2;?2 5
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<StringWriter> class0 = StringWriter.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("1.2.68", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but float, pos 3, line 1, column 41.2.68
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray(";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ;, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      byte[] byteArray0 = new byte[0];
      Object object0 = JSON.parse(byteArray0, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("oTfa~Ze5pgF7KE!sz");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeature0;
      JSON.writeJSONString((Writer) mockPrintWriter0, (Object) mockPrintStream0, 20, serializerFeatureArray0);
      assertEquals(4, serializerFeatureArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.MapSortField;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeatureArray0[3];
      serializerFeatureArray0[6] = serializerFeatureArray0[4];
      serializerFeatureArray0[7] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[8] = serializerFeature1;
      JSON.writeJSONStringTo("", (Writer) null, serializerFeatureArray0);
      assertEquals(9, serializerFeatureArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      char[] charArray0 = new char[6];
      JSONPObject jSONPObject0 = JSON.parseObject(charArray0, 0, (Type) null, featureArray0);
      assertNull(jSONPObject0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      JSONArray jSONArray0 = JSON.parseObject("", (Type) null, 9, featureArray0);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseObject("9&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Feature[] featureArray0 = new Feature[0];
      Object object0 = JSON.parse(byteArray0, (int) (byte)0, (int) (byte)0, (CharsetDecoder) uTF8Decoder0, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("fastjson.parser.features.ErrorOnEnumNotMatch");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = JSON.isValid("{}");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      JSON.handleResovleTask(defaultJSONParser0, pascalNameFilter0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("true");
      Charset charset0 = Charset.defaultCharset();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[2];
      int int0 = JSON.writeJSONString((OutputStream) mockPrintStream0, charset0, (Object) propertyNamingStrategy0, serializerFeatureArray0);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1.2.68", true);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      int int0 = JSON.writeJSONString((OutputStream) mockFileOutputStream0, (Object) pascalNameFilter0, (-3724), serializerFeatureArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[0] = serializerFeature0;
      String string0 = jSONArray0.toString(serializerFeatureArray0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      Class<JSONPObject> class0 = JSONPObject.class;
      JSONPObject jSONPObject0 = jSONObject0.toJavaObject(class0);
      assertNull(jSONPObject0.getFunction());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      PascalNameFilter pascalNameFilter0 = JSON.toJavaObject((JSON) null, class0);
      assertNull(pascalNameFilter0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<JSONObject> class0 = JSONObject.class;
      JSONObject jSONObject1 = JSON.toJavaObject((JSON) jSONObject0, class0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeConfig serializeConfig0 = new SerializeConfig((byte)2, false);
      String string0 = JSON.toJSONStringZ(serializerFeature0, serializeConfig0, serializerFeatureArray0);
      assertEquals("16", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      String string0 = JSON.toJSONStringWithDateFormat(pascalNameFilter0, "toJSON error", serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Feature feature0 = Feature.IgnoreNotMatch;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) feature0, serializerFeatureArray0);
      assertEquals("\"IgnoreNotMatch\"", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      String string0 = JSON.toJSONString((Object) jSONObject0.DEFAULT_GENERATE_FEATURE, (SerializeFilter[]) null, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSON.toJSONString((Object) jSONObject0, false);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullBooleanAsFalse;
      Integer integer0 = new Integer((-2147483645));
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) integer0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      SerializeConfig serializeConfig0 = new SerializeConfig(1232, true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.SortField;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) jSONObject0, serializeConfig0, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeConfig serializeConfig0 = new SerializeConfig(12);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      String string0 = JSON.toJSONString((Object) jSONObject0, serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TreeMap<JSONObject, JSONPath.Operator> treeMap0 = new TreeMap<JSONObject, JSONPath.Operator>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      serializerFeatureArray0[5] = serializerFeatureArray0[1];
      serializerFeatureArray0[6] = serializerFeatureArray0[0];
      String string0 = JSON.toJSONString((Object) treeMap0, 24, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      String string0 = JSON.toJSONString((Object) pascalNameFilter0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3089);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes((Object) jSONObject0, serializerFeatureArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      byte[] byteArray0 = JSON.toJSONBytes((Object) null, serializeFilterArray0, serializerFeatureArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONPObject jSONPObject0 = new JSONPObject("Tp??;iXG!t");
      SerializeConfig serializeConfig0 = new SerializeConfig(10);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[2];
      serializerFeatureArray0[5] = serializerFeatureArray0[0];
      byte[] byteArray0 = JSON.toJSONBytes((Object) jSONPObject0, serializeConfig0, (SerializeFilter[]) null, (-1429), serializerFeatureArray0);
      assertEquals(16, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes((Object) "", serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)34}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.SortField;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes((Object) pushbackInputStream0, serializeConfig0, 12, serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte)125}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Object object0 = JSON.toJSON((Object) "VP]W0KP", parserConfig0);
      assertEquals("VP]W0KP", object0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSON.toJSON((Object) jSONObject0);
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Feature[] featureArray0 = new Feature[4];
      Charset charset0 = Charset.defaultCharset();
      Class<JSONObject> class0 = JSONObject.class;
      FieldInfo fieldInfo0 = new FieldInfo("@type", class0, class0, class0, (Field) null, 16, (byte)8, 44);
      ParameterizedTypeImpl parameterizedTypeImpl0 = JSON.parseObject(byteArray0, 26376, (-1), charset0, (Type) fieldInfo0.declaringClass, featureArray0);
      assertNull(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      featureArray0[0] = feature0;
      JSONObject jSONObject0 = JSON.parseObject("", featureArray0);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Object> class0 = Object.class;
      Class<?> class1 = parserConfig0.checkAutoType(class0);
      Feature[] featureArray0 = new Feature[7];
      Integer integer0 = JSON.parseObject("", (Type) class1, (ParseProcess) null, featureArray0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      JSON.parseObject("", (Type) null, parserConfig0, (int) 2, featureArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      Feature[] featureArray0 = new Feature[1];
      InputStream inputStream0 = JSON.parseObject("", class0, featureArray0);
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ConcurrentHashMap<InputStream, JSONPObject> concurrentHashMap0 = new ConcurrentHashMap<InputStream, JSONPObject>();
      Enumeration<InputStream> enumeration0 = concurrentHashMap0.keys();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Feature[] featureArray0 = new Feature[9];
      JSON.parseObject((InputStream) sequenceInputStream0, (Type) null, featureArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.SafeMode;
      featureArray0[0] = feature0;
      featureArray0[1] = featureArray0[0];
      featureArray0[2] = featureArray0[0];
      featureArray0[3] = feature0;
      featureArray0[4] = featureArray0[0];
      featureArray0[5] = featureArray0[1];
      featureArray0[6] = featureArray0[4];
      featureArray0[7] = feature0;
      Object object0 = JSON.parse("", featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[0] = feature0;
      featureArray0[1] = featureArray0[0];
      featureArray0[2] = featureArray0[1];
      featureArray0[3] = featureArray0[1];
      featureArray0[4] = featureArray0[1];
      featureArray0[5] = feature0;
      featureArray0[6] = featureArray0[0];
      featureArray0[7] = featureArray0[5];
      featureArray0[8] = featureArray0[1];
      // Undeclared exception!
      try { 
        JSON.parse("\"\"%pt.VN@[[p_7>&ip", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.SafeMode;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = featureArray0[1];
      featureArray0[3] = featureArray0[0];
      featureArray0[4] = featureArray0[0];
      featureArray0[5] = featureArray0[1];
      featureArray0[6] = featureArray0[3];
      Object object0 = JSON.parse("", parserConfig0, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.NonStringKeyAsString;
      featureArray0[0] = feature0;
      featureArray0[1] = featureArray0[0];
      featureArray0[2] = featureArray0[0];
      featureArray0[3] = featureArray0[0];
      JSONObject jSONObject0 = (JSONObject)JSON.parse("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":-99,\"value2\":false,\"number\":\"1\"}", parserConfig0, featureArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONObject jSONObject0 = (JSONObject)JSON.parse("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":null,\"number\":\"1\"}", parserConfig0, 188);
      assertEquals(6, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Object object0 = JSON.parse((String) null, parserConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONObject jSONObject0 = (JSONObject)JSON.parse("{\"fruit\":\"Apple\",\"size\":{},\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", parserConfig0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object object0 = JSON.parse("", 5);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = (JSONObject)JSON.parse("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":false}", (-93));
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Object object0 = JSON.parse("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Type type0 = JSON.getMixInAnnotations((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl(parameterizedTypeImpl0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPORT;
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      uTF8Decoder1.charset();
      JSON.getMixInAnnotations(parameterizedTypeImpl0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        JSON.parseArray("?kgT>@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SerializeWriter serializeWriter0 = new SerializeWriter();
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      JSONObject jSONObject1 = jSONObject0.fluentPut("true", "true");
      // Undeclared exception!
      try { 
        jSONObject1.writeJSONString((Appendable) serializeWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("0VO9gRb:f%v$pE", true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.writeJSONString((Writer) mockFileWriter0, (Object) "0VO9gRb:f%v$pE", 19, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile("{");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[3];
      serializerFeatureArray0[5] = serializerFeatureArray0[4];
      serializerFeatureArray0[6] = serializerFeatureArray0[1];
      serializerFeatureArray0[7] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) mockFileOutputStream0, charset0, (Object) "{", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      String[] stringArray0 = new String[3];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) byteArrayOutputStream0, (Charset) null, (Object) simplePropertyPreFilter0, serializeConfig0, serializeFilterArray0, ":K%Z", (-1452), serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class com.alibaba.fastjson.serializer.SimplePropertyPreFilter, create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      MockFile mockFile0 = new MockFile("WriteSlashAsSpecial", "WriteSlashAsSpecial");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      Charset charset0 = Charset.defaultCharset();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) objectOutputStream0, charset0, (Object) serializerFeature0, serializeConfig0, serializeFilterArray0, "", (int) (byte)10, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      TreeMap<JSONPath.Operator, JavaBeanSerializer> treeMap0 = new TreeMap<JSONPath.Operator, JavaBeanSerializer>();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[6];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) byteArrayOutputStream0, (Charset) null, (Object) treeMap0, serializeConfig0, serializeFilterArray0, ":K%Z", (-1452), serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UE;f8Dj@", false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[2];
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) mockFileOutputStream0, (Object) "UE;f8Dj@", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[2];
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeatureArray0[2];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) null, (Object) serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("false", true);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) mockFileOutputStream0, (Object) "6ebHNm^+w~0T_N", 1827, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("fMDi36B", (Object) "fMDi36B");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeature0;
      serializerFeatureArray0[7] = serializerFeature0;
      // Undeclared exception!
      try { 
        jSONObject0.toString(serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Object object0 = JSON.toJSON((Object) serializeConfig0, serializeConfig0);
      // Undeclared exception!
      try { 
        object0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONStringZ("", serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Integer integer0 = new Integer((-100));
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONStringZ(integer0, (SerializeConfig) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONStringWithDateFormat("NJ", "1.2.68", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) serializerFeature0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "()I", (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "()I", serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[4];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "", serializeConfig0, serializeFilterArray0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "", (SerializeConfig) null, serializeFilterArray0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "", (SerializeConfig) null, serializeFilterArray0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "", serializeConfig0, serializeFilterArray0, "", 26, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      SerializeConfig serializeConfig0 = new SerializeConfig(969);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeatureArray0[2];
      serializerFeatureArray0[6] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) uTF8Decoder0, serializeConfig0, serializeFilterArray0, "", 969, serializerFeatureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig(31, false);
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) jSONArray0, serializeConfig0, (SerializeFilter[]) null, "", 989, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) parameterizedTypeImpl0, serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl, create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "", 4939, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class java.lang.String, create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) uTF8Decoder0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      JSONPObject jSONPObject0 = new JSONPObject();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes(charset0, (Object) jSONPObject0, (SerializeConfig) null, serializeFilterArray0, "%6XSZ\"c0", 26, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      serializerFeatureArray0[4] = serializerFeatureArray0[2];
      serializerFeatureArray0[5] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "false", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeatureArray0[3];
      serializerFeatureArray0[6] = serializerFeatureArray0[0];
      serializerFeatureArray0[7] = serializerFeature0;
      serializerFeatureArray0[8] = serializerFeatureArray0[3];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "", serializeFilterArray0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class java.lang.String, create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "", (SerializeFilter) null, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) uTF8Decoder0, serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) parameterizedTypeImpl0, (SerializeConfig) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeatureArray0[1];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) parameterizedTypeImpl0, serializeConfig0, serializeFilterArray0, "PRs$yv[bUck(", (-75), serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl, create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      SerializeConfig serializeConfig0 = new SerializeConfig(4945, false);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) uTF8Decoder0, serializeConfig0, serializeFilterArray0, "can not cast to JSONObject.", 44, serializerFeatureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      SerializeConfig serializeConfig0 = new SerializeConfig(44);
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) parserConfig0, serializeConfig0, (SerializeFilter[]) null, (String) null, 44, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(409);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) stringWriter0, (SerializeConfig) null, serializeFilterArray0, 1013612282, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[2];
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      serializerFeatureArray0[5] = serializerFeatureArray0[1];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) jSONObject0, (SerializeConfig) null, (SerializeFilter) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[3];
      serializerFeatureArray0[5] = serializerFeatureArray0[2];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "", serializeConfig0, 12, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      Class<Integer> class0 = Integer.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, linkedHashMap0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) javaBeanSerializer0, 12, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) pascalNameFilter0, (int) (byte)0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(12, true);
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) serializeConfig0, serializeConfig0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONPObject jSONPObject0 = new JSONPObject();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) jSONPObject0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // scan null error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, 1, (Type) parameterizedTypeImpl0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but EOF, pos 1, line 1, column 2\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      byte[] byteArray0 = new byte[1];
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl((Type) null);
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (Type) genericArrayTypeImpl0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but EOF, pos 1, line 1, column 2\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parseObject((byte[]) null, (Type) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      byte[] byteArray0 = new byte[8];
      Class<JSONPObject> class0 = JSONPObject.class;
      Type type0 = FieldInfo.getFieldType((Class<?>) class0, (Type) class0, (Type) class0);
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (-4702), (-4702), (CharsetDecoder) null, type0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Class<JSONObject> class0 = JSONObject.class;
      FieldInfo fieldInfo0 = new FieldInfo("@type", class0, class0, class0, (Field) null, 44, 2331, 746);
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parseObject((byte[]) null, 26, 26376, charset0, fieldInfo0.fieldType, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      byte[] byteArray0 = JSON.toJSONBytes((Object) serializeConfig0, serializeConfig0, serializerFeatureArray0);
      Charset charset0 = Charset.defaultCharset();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.ErrorOnEnumNotMatch;
      featureArray0[0] = feature0;
      featureArray0[1] = featureArray0[0];
      featureArray0[2] = featureArray0[0];
      featureArray0[3] = featureArray0[0];
      featureArray0[4] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, 14, 14, charset0, (Type) null, parserConfig0, (ParseProcess) null, 14, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2rue,\"typeKey\":
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      byte[] byteArray0 = new byte[8];
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[4];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, 2009, (int) 20, charset0, (Type) parameterizedTypeImpl0, parserConfig0, (ParseProcess) null, (-2242), featureArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2009
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.parser.deny", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        JSON.parseObject("@type", (Type) parameterizedTypeImpl0, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but error, pos 1, line 1, column 2@type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Feature[] featureArray0 = new Feature[4];
      // Undeclared exception!
      try { 
        JSON.parseObject("()I", (Type) parameterizedTypeImpl0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      Feature[] featureArray0 = new Feature[19];
      // Undeclared exception!
      try { 
        JSON.parseObject("false", (Type) class0, (ParseProcess) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.AllowArbitraryCommas;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":null}}", (Type) class0, parserConfig0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual {, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<String> class0 = String.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[10];
      // Undeclared exception!
      try { 
        JSON.parseObject("B71X_", (Type) class1, parserConfig0, 12, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("java.", class0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      // Undeclared exception!
      JSON.parseObject("{", class0, (ParseProcess) null, (Feature[]) null);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      Class<JSONObject.SecureObjectInputStream> class0 = JSONObject.SecureObjectInputStream.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("{6Qu+b/B)", class0, (ParseProcess) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) pushbackInputStream0, charset0, (Type) parameterizedTypeImpl0, parserConfig0, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but EOF, pos 4, line 1, column 5\u0000\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      Charset charset0 = Charset.defaultCharset();
      Feature[] featureArray0 = new Feature[0];
      try { 
        JSON.parseObject((InputStream) pushbackInputStream0, charset0, (Type) null, (ParserConfig) null, featureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Feature[] featureArray0 = new Feature[5];
      try { 
        JSON.parseObject((InputStream) pipedInputStream0, charset0, (Type) null, parserConfig0, (ParseProcess) null, 16, featureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) null, (Type) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-30), (byte)35);
      Feature[] featureArray0 = new Feature[5];
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) byteArrayInputStream0, (Type) null, featureArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      byte[] byteArray0 = new byte[8];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 1, 1, (CharsetDecoder) uTF8Decoder0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 1, line 1, column 2\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 969, 1397, (CharsetDecoder) uTF8Decoder0, 1397);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse("/**/", (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "#`!J>Iexm9-B";
      JSON.isValidArray("#`!J>Iexm9-B");
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)16;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.SupportArrayToBean;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowArbitraryCommas;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AutoCloseSource;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AllowArbitraryCommas;
      featureArray0[3] = feature3;
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, (int) (byte)3, 14, (CharsetDecoder) uTF8Decoder0, featureArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Object object0 = JSON.toJSON((Object) "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":-99,\"value2\":false,\"number\":\"1\"}", serializeConfig0);
      assertEquals("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":-99,\"value2\":false,\"number\":\"1\"}", object0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Object object0 = JSON.toJSON((Object) propertyNamingStrategy0, serializeConfig0);
      assertEquals("NoChange", object0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Object object0 = JSON.toJSON((Object) null, serializeConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(25);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[5];
      String[] stringArray0 = new String[7];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      int int0 = JSON.writeJSONString((OutputStream) byteArrayOutputStream0, charset0, (Object) null, serializeConfig0, serializeFilterArray0, stringArray0[1], (-1452), serializerFeatureArray0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Charset charset0 = Charset.defaultCharset();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[8];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeatureArray0[0];
      serializerFeatureArray0[6] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes(charset0, (Object) jSONObject0, (SerializeConfig) null, serializeFilterArray0, "1.2.68", 12, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Object object0 = new Object();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[2];
      serializerFeatureArray0[4] = serializerFeatureArray0[3];
      serializerFeatureArray0[5] = serializerFeatureArray0[3];
      serializerFeatureArray0[6] = serializerFeatureArray0[2];
      serializerFeatureArray0[7] = serializerFeatureArray0[3];
      serializerFeatureArray0[8] = serializerFeatureArray0[7];
      byte[] byteArray0 = JSON.toJSONBytes(charset0, object0, serializeConfig0, (SerializeFilter[]) null, "", (-17), serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)91, (byte)93}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes(charset0, (Object) charset0, (SerializeConfig) null, serializeFilterArray0, (String) null, (-3219), serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      JSONPObject jSONPObject0 = new JSONPObject();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeature0;
      serializerFeatureArray0[7] = serializerFeature0;
      serializerFeatureArray0[8] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) jSONPObject0, serializeConfig0, (SerializeFilter[]) null, "", (-2278), serializerFeatureArray0);
      assertEquals("/**/null()", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(12, false);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[4];
      SerializerFeature serializerFeature0 = SerializerFeature.MapSortField;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      String string0 = JSON.toJSONString((Object) serializeConfig0, serializeConfig0, serializeFilterArray0, (String) null, 12, serializerFeatureArray0);
      assertEquals("{asmEnable:true,typeKey:\"@type\",propertyNamingStrategy:null}", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ConcurrentHashMap<InputStream, JSONPObject> concurrentHashMap0 = new ConcurrentHashMap<InputStream, JSONPObject>();
      Enumeration<InputStream> enumeration0 = concurrentHashMap0.keys();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[3];
      TreeMap<JSON, Integer> treeMap0 = JSON.parseObject((InputStream) sequenceInputStream0, charset0, (Type) null, parserConfig0, (ParseProcess) null, 5, featureArray0);
      assertNull(treeMap0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      ParserConfig parserConfig0 = ParserConfig.global;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) null, charset0, (Type) null, parserConfig0, (ParseProcess) null, 54, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = new ParserConfig(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-100);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Feature[] featureArray0 = new Feature[7];
      Object object0 = JSON.parseObject(byteArray0, 0, 91100851, charset0, (Type) parameterizedTypeImpl0, parserConfig0, (ParseProcess) null, 2, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parseObject((byte[]) null, 1, 20, charset0, (Type) null, parserConfig0, (ParseProcess) null, 910, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<JSON> class0 = JSON.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[4];
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.parser.deny", (Type) class0, parserConfig0, (ParseProcess) null, 2, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.parser.deny", (Type) null, parserConfig0, (ParseProcess) null, (int) 20, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        JSON.parseObject("U/X\"~QKN*a1FJ{", (Type) null, parserConfig0, (ParseProcess) null, 0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2U/X\"~QKN*a1FJ{
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      Feature[] featureArray0 = new Feature[0];
      StringWriter stringWriter0 = JSON.parseObject("", (Type) class0, parserConfig0, (ParseProcess) null, 999, featureArray0);
      assertNull(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<JSONArray> class0 = JSONArray.class;
      Type type0 = FieldInfo.getFieldType((Class<?>) class0, (Type) class0, (Type) class0);
      Feature[] featureArray0 = new Feature[5];
      Integer integer0 = JSON.parseObject((String) null, type0, parserConfig0, (ParseProcess) null, 2, featureArray0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = featureArray0[0];
      featureArray0[3] = featureArray0[0];
      // Undeclared exception!
      try { 
        JSON.parse("@type", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2@type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        JSON.parse("@type", parserConfig0, 12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2@type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Object object0 = JSON.parse((String) null, parserConfig0, 188);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse("n<BV3VL0E)`)?6I9", 18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Feature[] featureArray0 = new Feature[9];
      SerializeWriter serializeWriter0 = new SerializeWriter(12);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.writeJSONString((Writer) serializeWriter0, (Object) featureArray0[0], serializerFeatureArray0);
      assertEquals(0, serializerFeatureArray0.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse("fastjson.parser.safeMode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) pushbackInputStream0, serializeConfig0, 12, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Object object0 = JSON.toJSON((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      byte[] byteArray0 = new byte[8];
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      FieldInfo fieldInfo0 = new FieldInfo("Z>=\"Q", class0, class0, class0, (Field) null, 3221, 14, 44);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, 14, 16, charset0, (Type) fieldInfo0.fieldClass, featureArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONPObject jSONPObject0 = new JSONPObject("Tp??;iXG!t");
      SerializeConfig serializeConfig0 = new SerializeConfig(10);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) jSONPObject0, serializeConfig0, (SerializeFilter[]) null, (-1429), serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse((byte[]) null, 655360000, 8, (CharsetDecoder) null, (-1903));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) jSONArray0, serializeConfig0, (SerializeFilter) pascalNameFilter0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(12);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) filterOutputStream0, (Object) jSONArray0, 12, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      JSON.removeMixInAnnotations(class1);
      assertEquals(16393, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSON.removeMixInAnnotations((Type) null);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      JSON.addMixInAnnotations(parameterizedTypeImpl0, (Type) null);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      JSON.addMixInAnnotations(parameterizedTypeImpl0, parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSON.addMixInAnnotations((Type) null, (Type) null);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("[]");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("[hR#-#gEh.b+o");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSON.isValidArray("");
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.SupportAutoType;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("9Ht$R)pOl%Y7G", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("yyyy-MM-dd HH:mm:ss");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = JSON.isValid("com.alibaba.fastjson.serializer.CollectionCodec");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = JSON.isValid("[hR-#gEhb+o");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = JSON.isValid("}$of7fUT`5!%C");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      boolean boolean0 = JSON.isValid(")X~&kz,9]%p+0+#~ z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = JSON.isValid("null]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = JSON.isValid("false");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean boolean0 = JSON.isValid("true");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = JSON.isValid("1.2.68");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      boolean boolean0 = JSON.isValid("7)I");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = JSON.isValid("()I");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = JSON.isValid("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      boolean boolean0 = JSON.isValid((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      byte[] byteArray0 = new byte[24];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) byteArrayInputStream0, charset0, (Type) null, (ParserConfig) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.toJavaObject((TypeReference) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1489);
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.GenericArrayTypeImpl
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) class0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) parameterizedTypeImpl0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONPObject jSONPObject0 = new JSONPObject();
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) jSONPObject0, (SerializeConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // scan null error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Ml,1Z[mj~*0\"%";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONObject jSONObject0 = (JSONObject)JSON.toJSON((Object) simplePropertyPreFilter0, serializeConfig0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Object object0 = JSON.toJSON((Object) jSONObject0, serializeConfig0);
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      MockFile mockFile0 = new MockFile("WriteSlashAsSpecial", "WriteSlashAsSpecial");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      Charset charset0 = Charset.defaultCharset();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      int int0 = JSON.writeJSONString((OutputStream) objectOutputStream0, charset0, (Object) serializerFeature0, serializeConfig0, serializeFilterArray0, "", (int) (byte)10, serializerFeatureArray0);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      TreeMap<JSONObject, Object> treeMap0 = new TreeMap<JSONObject, Object>();
      Object object0 = JSON.toJSON((Object) treeMap0, (SerializeConfig) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("unterminated json string, ");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      int int0 = JSON.writeJSONString((OutputStream) mockPrintStream0, object0, serializerFeatureArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "og.hibernate.Hibernate", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONPObject jSONPObject0 = new JSONPObject();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes((Object) jSONPObject0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "true", (SerializeConfig) null, serializeFilterArray0, "true", (-939), serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes((Object) serializerFeature0, serializeConfig0, (SerializeFilter[]) null, "", 1954, serializerFeatureArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONPObject jSONPObject0 = new JSONPObject();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[4];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      String string0 = JSON.toJSONString((Object) jSONPObject0, serializeConfig0, serializeFilterArray0, "/**/", 14, serializerFeatureArray0);
      assertEquals("null()", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray("I`nhLpOSO1$6yp26", (Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but EOF, pos 1, line 1, column 2
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = JSON.parseArray((String) null, class0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = JSON.parseArray("", class0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONArray jSONArray0 = JSON.parseArray("");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray("null]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : ]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONArray jSONArray0 = JSON.parseArray((String) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Feature[] featureArray0 = new Feature[0];
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3445), (-3445));
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONObject jSONObject0 = JSON.parseObject((InputStream) byteArrayInputStream0, (Charset) null, (Type) parameterizedTypeImpl0, parserConfig0, featureArray0);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, (-715), (Type) parameterizedTypeImpl0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, (-715), (Type) parameterizedTypeImpl0, featureArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      char[] charArray0 = new char[0];
      JSONPObject jSONPObject0 = JSON.parseObject(charArray0, 2513, (Type) parameterizedTypeImpl0, (Feature[]) null);
      assertNull(jSONPObject0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      JSONPObject jSONPObject0 = JSON.parseObject((char[]) null, (-30), (Type) parameterizedTypeImpl0, (Feature[]) null);
      assertNull(jSONPObject0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Feature[] featureArray0 = new Feature[4];
      // Undeclared exception!
      try { 
        JSON.parseObject((byte[]) null, 12, (-1144), (Charset) null, (Type) null, parserConfig0, (ParseProcess) null, 1, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parseObject("z", class0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      PascalNameFilter pascalNameFilter0 = JSON.parseObject((String) null, class0);
      assertNull(pascalNameFilter0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parseObject("3]]RWvx 7wy3Le", (Type) parameterizedTypeImpl0, 1455, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      JSONArray jSONArray0 = JSON.parseObject((String) null, (Type) parameterizedTypeImpl0, 2099, (Feature[]) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("_ZyK)c !", (Type) null, (-1923), featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2_ZyK)c !
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject("{\"x\":\"fastjson.parser.features.ErrorOnEnumNotMatch\",\"y\":[],\"\":[],\"dd.MM.yyyy HH:mm:ss\":99}");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Feature[] featureArray0 = new Feature[8];
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 1, 1, (CharsetDecoder) uTF8Decoder0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      byte[] byteArray0 = new byte[0];
      Object object0 = JSON.parse(byteArray0, 969, 969, (CharsetDecoder) uTF8Decoder0, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Object object0 = JSON.parse((byte[]) null, 8, 969, (CharsetDecoder) uTF8Decoder0, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-41);
      Object object0 = JSON.parse(byteArray0, (Feature[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 1, line 1, column 2\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject((String) null);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parse("fastjson.parser.autoTypeSupport", parserConfig0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        JSON.parse("fastjson.parser.autoTypeSupport", parserConfig0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("63~iSrV|hw|6z8N", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int, pos 0, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      // Undeclared exception!
      try { 
        JSON.handleResovleTask((DefaultJSONParser) null, jSONPath_Operator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toJSONString();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      // Undeclared exception!
      try { 
        jSONArray0.toString(serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      TreeMap<JSONObject, Object> treeMap0 = new TreeMap<JSONObject, Object>();
      // Undeclared exception!
      try { 
        JSON.toJSONStringWithDateFormat(treeMap0, "", (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) null, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.toJavaObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<StringWriter> class0 = StringWriter.class;
      // Undeclared exception!
      try { 
        JSON.toJavaObject((JSON) jSONArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.io.StringWriter
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("5H|T`\u0007Hb=}h}z", class0, (ParseProcess) null, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int, pos 0, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      SerializeWriter serializeWriter0 = new SerializeWriter();
      jSONObject0.writeJSONString((Appendable) serializeWriter0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSON.clearMixInAnnotations();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSON.setDefaultTypeKey("\"n n,'V6Ux%=E");
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "{}", (SerializeFilter) pascalNameFilter0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl(parameterizedTypeImpl0);
      JSONObject.SecureObjectInputStream jSONObject_SecureObjectInputStream0 = JSON.parseObject("", (Type) genericArrayTypeImpl0, (Feature[]) null);
      assertNull(jSONObject_SecureObjectInputStream0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      Feature[] featureArray0 = new Feature[0];
      byte[] byteArray0 = new byte[2];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, 51, (int) 92, (CharsetDecoder) uTF8Decoder0, (Type) class0, featureArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("(J)V", (Type) parameterizedTypeImpl0, (ParseProcess) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but (, pos 1, line 1, column 2(J)V
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "", serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) null, serializeFilterArray0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[0];
      JSON.parseObject("", (Type) null, parserConfig0, featureArray0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      TreeMap<SimplePropertyPreFilter, ParameterizedTypeImpl> treeMap0 = new TreeMap<SimplePropertyPreFilter, ParameterizedTypeImpl>();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) treeMap0, serializeConfig0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Object object0 = JSON.toJSON((Object) null, parserConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      SerializeConfig serializeConfig0 = new SerializeConfig((byte)2, false);
      // Undeclared exception!
      try { 
        JSON.toJSONStringZ(serializerFeature0, serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl(parameterizedTypeImpl0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSON.parseObject("qBuNv?", (Type) genericArrayTypeImpl0, parserConfig0, 3392903, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but error, pos 1, line 1, column 2qBuNv?
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSON.parse("fastjson.parser.autoTypeAccept", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "S1v", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class java.lang.String, create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseObject("Aqb07Ih>F&ADb:7|!", (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SerializeConfig serializeConfig0 = new SerializeConfig((byte)71, false);
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      String string0 = JSON.toJSONString((Object) simplePropertyPreFilter0, serializeConfig0, (SerializeFilter[]) null, serializerFeatureArray0);
      assertEquals("{\"excludes\":[],\"includes\":[],\"maxLevel\":0}", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        JSON.parseObject((InputStream) pipedInputStream0, (Type) parameterizedTypeImpl0, featureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("@type", false);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) mockFileOutputStream0, charset0, (Object) serializerFeature0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONPObject jSONPObject0 = new JSONPObject();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) jSONPObject0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "()I", serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      byte[] byteArray0 = JSON.toJSONBytes((Object) null, 48, serializerFeatureArray0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      GenericArrayTypeImpl genericArrayTypeImpl0 = JSON.parseObject(byteArray0, (Type) parameterizedTypeImpl0, (Feature[]) null);
      assertNull(genericArrayTypeImpl0);
  }
}
