/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 19:42:01 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dialog;
import java.awt.GraphicsDevice;
import java.awt.MultipleGradientPaint;
import java.awt.TrayIcon;
import java.awt.Window;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.Proxy;
import java.net.URI;
import java.security.KeyRep;
import java.sql.PseudoColumnUsage;
import java.time.Month;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.annotation.Resource;
import javax.swing.DropMode;
import javax.swing.GroupLayout;
import javax.tools.JavaFileObject;
import jdk.net.SocketFlow;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("99");
      assertEquals(99, number0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("0000");
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"x\":99,\"y\":7,\"{\"size\":\"Large\",\"fruit\":\"\",\"value2\":false,\"number\":[true],\"color\":\"Red\",\"value\":true}\":null,\"a\":true,\"b\":{}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 18 [character 19 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-99");
      JSONObject.indent(mockPrintWriter0, 0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"] not a string.\":null,\"y\":-99,\"z\":99,\"a\":[],\"b\":null}");
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<JavaFileObject.Kind, Double> hashMap0 = new HashMap<JavaFileObject.Kind, Double>();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.writeValue(stringWriter0, hashMap0, (-2247), (-167));
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<Resource.AuthenticationType> linkedList0 = new LinkedList<Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      JSONObject jSONObject1 = jSONObject0.put("8!T3t6GI#%<", false);
      try { 
        jSONObject1.getBigInteger("8!T3t6GI#%<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000202] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      jSONObject0.put("-99", (Collection<?>) linkedList0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-99";
      stringArray0[1] = "-99";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "* dF,hQpcW0G!s4");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("* dF,hQpcW0G!s4", stringArray0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Map<String, Object> map0 = jSONObject0.toMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject1 = jSONObject0.put("-99", (Collection<?>) linkedList0);
      JSONArray jSONArray0 = (JSONArray)jSONObject1.remove("-99");
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      String string0 = jSONObject0.optString("eI2{a!XJE", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"java.lang.Long@00000000100\":\"Large\",\"color\":\"a string\",\"value\":true,\"value2\":false,\"number\":false}");
      JSONPointer jSONPointer0 = new JSONPointer("/[K$;joJ");
      jSONObject0.optQuery(jSONPointer0);
      assertEquals(6, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Month, BufferedWriter> hashMap0 = new HashMap<Month, BufferedWriter>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery("");
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Number number0 = jSONObject0.optNumber("-|zmqo", (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = jSONObject0.optNumber("", (Number) bigInteger0);
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      jSONObject0.optNumber("6< lHqH*r^10+{>", (Number) bigDecimal0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      long long0 = jSONObject0.optLong("Kjv\"EKFlG$=/z", (-2053L));
      assertEquals((-2053L), long0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("A JSONObject text must end with '}'", (-1.0));
      long long0 = jSONObject0.optLong("A JSONObject text must end with '}'");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("/>s+> rH6/", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("0", (-3130));
      assertEquals((-3130), int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.put("org.json.JSONArray", (float) 3163);
      int int0 = jSONObject0.optInt("org.json.JSONArray");
      assertEquals(3163, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat("", (-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.put("Qj", 44);
      float float0 = jSONObject0.optFloat("Qj");
      assertEquals(2, jSONObject0.length());
      assertEquals(44.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"java.lang.Long@00000000100\":\"Large\",\"Unable to preserve stream position\":\"a string\",\"value\":true,\"istoString\":-99,\"number\":false,\"getgetComponentType\":\"a string\"}");
      jSONObject0.optBigInteger("] could not be converted to BigInteger.", (BigInteger) null);
      assertEquals(7, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":[]}", bigInteger0);
      assertEquals((short)0, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal("in", (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      jSONObject0.optBigDecimal((String) null, bigDecimal0);
      assertEquals(35, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal((-2592));
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("o", bigDecimal0);
      assertEquals((short) (-2592), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Month, BufferedWriter> hashMap0 = new HashMap<Month, BufferedWriter>();
      JSONObject jSONObject1 = jSONObject0.put("A JSONObject text must end with '}'", (Map<?, ?>) hashMap0);
      Object object0 = jSONObject1.opt("A JSONObject text must end with '}'");
      assertFalse(object0.equals((Object)jSONObject1));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<Month, BufferedWriter> hashMap0 = new HashMap<Month, BufferedWriter>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("C]%Gf0oFdw", (Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject1.isNull("C]%Gf0oFdw");
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("@TQ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("_nS8vPOP");
      int int0 = jSONObject1.getInt("_nS8vPOP");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("A JSONObject jext must end with '}'", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, jSONObject0, 44, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Integer integer0 = new Integer(1651);
      try { 
        JSONObject.writeValue(pipedWriter0, integer0, 968, 1651);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0, 55, 55);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Object, JavaFileObject.Kind> hashMap0 = new HashMap<Object, JavaFileObject.Kind>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, (-957), 115);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"java.lang.Long@00000000100\":\"Large\",\"color\":\"a string\",\"value\":true,\"value2\":false,\"number\":false,\"getgetComponentType\":\"a string\"}");
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.writeValue(stringWriter0, stringWriter0, 3200, (-14));
      JSONObject jSONObject1 = new JSONObject(class0);
      Writer writer0 = jSONObject1.write((Writer) stringWriter0);
      LinkedList<Resource.AuthenticationType> linkedList0 = new LinkedList<Resource.AuthenticationType>();
      JSONObject jSONObject2 = jSONObject1.put("{\"true\":\"hello\",\"{\":false,\"z\":false,\"a\":\"a string\",\"b\":{}}", (Collection<?>) linkedList0);
      try { 
        jSONObject2.write(writer0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: enumConstants
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("keIys", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{\"x\":null,\"y\":-99,\"z\":true,\"a\":[],\"get\":null}");
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query("java.lang.Float@00000000170");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<TrayIcon.MessageType, Window.Type> hashMap0 = new HashMap<TrayIcon.MessageType, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<Month> linkedList0 = new LinkedList<Month>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 2823L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "y");
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 2641);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"getgetSigners\":99,\"size\":[[]]}");
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-216.65));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, jSONObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Float.NaN);
      try { 
        jSONObject0.accumulate("3}NFo9>N>i3rs", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "y");
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Locale locale0 = new Locale("]6BCj/]\"PM>=4", "]6BCj/]\"PM>=4", "]6BCj/]\"PM>=4");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("]6BCj/]\"PM>=4", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name ]6BCj/]\"PM>=4, locale ]6bcj/]\"pm>=4_]6BCJ/]\"PM>=4_]6BCj/]\"PM>=4
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-1282));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1282
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"java.lang.Long@00000000100\":\"Large\",\"Unable to preserve stream position\":-99,\"value\":true,\"value2\":false,\"number\":false,\"getgetComponentType\":\"a string\"}");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write((Writer) stringWriter0, 972, 13);
      assertEquals(7, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"java.lang.Long@00000000100\":\"Large\",\"color\":\"a string\",\"value\":true,\"value2\":false,\"number\":false}");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.write((Writer) charArrayWriter0, 0, 0);
      assertEquals(370, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.Long@00000000100\":false,\"color\":\"a string\",\"value\":true,\"value2\":false,\"Null pointer\":false}");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(13);
      // Undeclared exception!
      jSONObject0.write((Writer) charArrayWriter0, 3200, 3200);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{\"] is not a Boolean.\":true,\".\":\"a string\"}", true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject1.write((Writer) charArrayWriter0, 0, 0);
      assertEquals(62, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("A JSONObject text must end with '}'", 44);
      MockFileWriter mockFileWriter0 = new MockFileWriter("A JSONObject text must end with '}'");
      Writer writer0 = jSONObject0.write((Writer) mockFileWriter0, 44, 44);
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = JSONObject.wrap(object0);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Object object0 = JSONObject.wrap(boolean0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Object object0 = JSONObject.wrap("{\"fruit\":\"Apple\",\"size\":\"Large\",\"] is not an enum of type \":\"Red\",\"value\":true,\"value2\":false,\"number\":[]}");
      assertEquals("{\"fruit\":\"Apple\",\"size\":\"Large\",\"] is not an enum of type \":\"Red\",\"value\":true,\"value2\":false,\"number\":[]}", object0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Object object0 = JSONObject.wrap(locale_FilteringMode0);
      assertEquals(Locale.FilteringMode.REJECT_EXTENDED_RANGES, object0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put(99, 2553.1487F);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject.testValidity(double0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject.testValidity(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("1917.231102165981");
      assertEquals(1917.231102165981, object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("I8%o`>I");
      assertEquals("I8%o`>I", object0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("&I5KJ!3PM");
      assertEquals("&I5KJ!3PM", object0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote("{\"toL\":99,\"x\":false}", (Writer) stringWriter0);
      assertEquals("\"{\\\"toL\\\":99,\\\"x\\\":false}\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote("h>h/", (Writer) stringWriter0);
      assertEquals("\"h>h/\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote("", (Writer) stringWriter0);
      assertEquals("\"\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      JSONObject.quote((String) null, (Writer) mockPrintWriter0);
      assertEquals("\"\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = jSONObject0.putOnce("-99", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, dataOutputStream0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("siz", "siz");
      assertEquals("siz", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      Number number0 = jSONObject0.optNumber("", (Number) bigInteger0);
      assertEquals((byte)10, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("java.io.StringWriter@0000000006", false);
      long long0 = jSONObject1.optLong("java.io.StringWriter@0000000006", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("6,_*o$@:", 3973L);
      assertEquals(3973L, long0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<MockFileInputStream, KeyRep.Type> hashMap0 = new HashMap<MockFileInputStream, KeyRep.Type>();
      JSONObject jSONObject1 = jSONObject0.put("u$a$yMaLs9]~+{R", (Map<?, ?>) hashMap0);
      int int0 = jSONObject1.optInt("u$a$yMaLs9]~+{R", 83);
      assertEquals(83, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("java.lang.Long@0000000010", true);
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      JSONObject jSONObject1 = jSONObject0.putOpt("java.java.security", mockPrintStream0);
      jSONObject1.optFloat("java.java.security", 0.0F);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"issignum\":00}");
      double double0 = jSONObject0.optDouble("r\"", (-1.0));
      assertEquals((-1.0), double0, 0.01);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(stringWriter0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce("", '1');
      boolean boolean0 = jSONObject1.optBoolean("", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      boolean boolean0 = jSONObject0.optBoolean((String) null, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("A JSONObject text must end with '}'", 44);
      Class<Locale.Category> class0 = Locale.Category.class;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = jSONObject1.optEnum(class0, "A JSONObject text must end with '}'", locale_Category0);
      assertEquals(Locale.Category.DISPLAY, locale_Category1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.DOCUMENT_MODAL;
      Dialog.ModalityType dialog_ModalityType1 = jSONObject0.optEnum(class0, "org.json.JSONObject", dialog_ModalityType0);
      assertEquals(Dialog.ModalityType.DOCUMENT_MODAL, dialog_ModalityType1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("A JSONObject text must end with '}'");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Integer integer0 = new Integer(3);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      boolean boolean0 = jSONObject1.isEmpty();
      assertFalse(boolean0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("", '\u0000');
      try { 
        jSONObject1.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Month, BufferedWriter> hashMap0 = new HashMap<Month, BufferedWriter>();
      JSONObject jSONObject1 = jSONObject0.put("] not a string.", (Map<?, ?>) hashMap0);
      Object object0 = jSONObject1.get("] not a string.");
      assertNotSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write((Writer) stringWriter0, 1443, 3200);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Class<GroupLayout.Alignment> class0 = GroupLayout.Alignment.class;
      jSONObject0.optEnum(class0, "%6_Hnqr({E>`~W-|");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONObject0.query(jSONPointer0);
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"Misplaced endObject.\":0.0,\"org.json.JSONObject\":{},\"x\":[],\"ent\":[]}");
      int int0 = jSONObject0.length();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      Set<String> set0 = jSONObject0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      Object object0 = jSONObject0.remove("-99");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":99,\"[\":{},\"] is not a number.\":true,\"a\":null,\"b\":{\"x\":true},\"xx\":{}}");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(6, map0.size());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString((-898));
      assertTrue(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.writeValue(stringWriter0, linkedList0, 13, (-591));
      assertEquals("[]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Month, BufferedWriter> hashMap0 = new HashMap<Month, BufferedWriter>();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.writeValue(pipedWriter0, hashMap0, (-3836), (-1165));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      JSONObject.writeValue(charArrayWriter0, locale_Category0, 91, 91);
      assertEquals(31, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString((-898));
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(13);
      JSONObject.writeValue(stringWriter0, (Object) null, (-1), 0);
      assertEquals("null", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      jSONObject0.put("-99", (Collection<?>) linkedList0);
      Map<String, Object> map0 = jSONObject0.toMap();
      JSONObject jSONObject1 = new JSONObject(map0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      BigDecimal bigDecimal1 = (BigDecimal)JSONObject.wrap(bigDecimal0);
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = JSONObject.wrap(bigInteger0);
      assertSame(bigInteger0, object0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Object object0 = JSONObject.wrap(double0);
      assertEquals((-1.0), object0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Float float0 = new Float((-1.0));
      Object object0 = JSONObject.wrap(float0);
      assertEquals((-1.0F), object0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<BufferedOutputStream, Long> hashMap0 = new HashMap<BufferedOutputStream, Long>();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      Long long0 = new Long(99L);
      hashMap0.putIfAbsent(bufferedOutputStream0, long0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Character character0 = Character.valueOf('{');
      Object object0 = JSONObject.wrap(character0);
      assertEquals('{', object0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("getmarkSuportd", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"issignm\":00}");
      try { 
        jSONObject0.get("{\"issignm\":00}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("1917.231102165981.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-99");
      assertEquals((-99), number0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("(O6MEel+");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [(O6MEel+] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("m\"EV");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("keys");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("", "");
      boolean boolean0 = jSONObject0.similar(jSONObject1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      boolean boolean0 = jSONObject0.similar(jSONObject1);
      assertFalse(boolean0);
      assertEquals(1, jSONObject1.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      boolean boolean0 = jSONObject0.similar(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(98);
      JSONObject.quote("3c1\u0005LqG", (Writer) charArrayWriter0);
      assertEquals(14, charArrayWriter0.size());
      assertEquals("\"3c1\\u0005LqG\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = JSONObject.quote(":;/O]A");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":99,\"\f\":\"int\",\"color\":\"getgetGenericInterfaces\",\"value\":true,\"value2\":false,\"number\":false,\"x\":99}");
      try { 
        jSONObject0.getNumber("{\"fruit\":99,\"\f\":\"int\",\"color\":\"getgetGenericInterfaces\",\"value\":true,\"value2\":false,\"number\":false,\"x\":99}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000050] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<DropMode, Proxy.Type> hashMap0 = new HashMap<DropMode, Proxy.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("length", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("Null pointer", "Null pointer");
      try { 
        jSONObject0.putOnce("Null pointer", "Null pointer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"Null pointer\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"Misplaced endObject.\":null,\"org.json.JSONObject\":null,\"to\":[]}");
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Month, BufferedWriter> hashMap0 = new HashMap<Month, BufferedWriter>();
      jSONObject0.put("A JSONObject text must end with '}'", (Map<?, ?>) hashMap0);
      String string0 = jSONObject0.optString("A JSONObject text must end with '}'", "A JSONObject text must end with '}'");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HashMap<Month, BufferedWriter> hashMap0 = new HashMap<Month, BufferedWriter>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] not a string.", (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Number number0 = jSONObject0.optNumber("] not a string.", (Number) bigInteger0);
      assertSame(number0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("i=:KC]g4\"CUl,~", 3185.892F);
      Number number0 = jSONObject0.optNumber("i=:KC]g4\"CUl,~");
      assertEquals(3185.892F, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("", "");
      BigDecimal bigDecimal0 = new BigDecimal(1284L);
      Number number0 = jSONObject1.optNumber("", (Number) bigDecimal0);
      assertEquals((short)1284, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HashMap<BigDecimal, PseudoColumnUsage> hashMap0 = new HashMap<BigDecimal, PseudoColumnUsage>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getmarkSuportd", (Map<?, ?>) hashMap0);
      long long0 = jSONObject1.optLong("getmarkSuportd");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("A JSONObject text must end with '}'", 44);
      long long0 = jSONObject1.optLong("A JSONObject text must end with '}'");
      assertEquals(44L, long0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("", "");
      long long0 = jSONObject1.optLong("", 1175L);
      assertEquals(1175L, long0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HashMap<TrayIcon.MessageType, Window.Type> hashMap0 = new HashMap<TrayIcon.MessageType, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("loc");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      jSONObject0.put("-99", (Collection<?>) linkedList0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("-99");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("`C'I");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] not a string.", 44);
      int int0 = jSONObject0.optInt("] not a string.", 44);
      assertEquals(44, int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Month, BufferedWriter> hashMap0 = new HashMap<Month, BufferedWriter>();
      JSONObject jSONObject1 = jSONObject0.put("A JSONObject text must end with '}'", (Map<?, ?>) hashMap0);
      int int0 = jSONObject1.optInt("A JSONObject text must end with '}'");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      JSONObject jSONObject0 = new JSONObject(dataOutputStream0);
      JSONObject jSONObject1 = jSONObject0.putOpt("iOwvJ;_8s`E8Q]]}{X", "Unable to write JSONArray value at index: 0");
      float float0 = jSONObject1.optFloat("iOwvJ;_8s`E8Q]]}{X", 0.0F);
      assertEquals(1, jSONObject0.length());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("A JSONObject text must end with '}'", 44);
      float float0 = jSONObject0.optFloat("A JSONObject text must end with '}'", (float) 44L);
      assertEquals(44.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Month, BufferedWriter> hashMap0 = new HashMap<Month, BufferedWriter>();
      JSONObject jSONObject1 = jSONObject0.put("A JSONObject text must end with '}'", (Map<?, ?>) hashMap0);
      double double0 = jSONObject1.optDouble("A JSONObject text must end with '}'", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HashMap<LineNumberReader, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<LineNumberReader, GraphicsDevice.WindowTranslucency>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("org.json.JSONTokener", 680.5564F);
      double double0 = jSONObject0.optDouble("org.json.JSONTokener", 0.0);
      assertEquals(680.556396484375, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("getintern", "getintern");
      double double0 = jSONObject1.optDouble("getintern", (double) 1167L);
      assertEquals(1167.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"java.lang.Long@00000000100\":\"a string\",\"Unable to preserve stream position\":-99,\"value\":true,\"value2\":false,\"number\":false,\"0\":\"a string\"}");
      jSONObject0.put("{\"fruit\":\"Apple\",\"java.lang.Long@00000000100\":\"a string\",\"Unable to preserve stream position\":-99,\"value\":true,\"value2\":false,\"number\":false,\"0\":\"a string\"}", (-1354));
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject0.optBigInteger("{\"fruit\":\"Apple\",\"java.lang.Long@00000000100\":\"a string\",\"Unable to preserve stream position\":-99,\"value\":true,\"value2\":false,\"number\":false,\"0\":\"a string\"}", bigInteger0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("0", bigInteger0);
      assertEquals((byte)10, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Month, BufferedWriter> hashMap0 = new HashMap<Month, BufferedWriter>();
      jSONObject0.put("A JSONObject text must end with '}'", (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("A JSONObject text must end with '}'", bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject0.put("Missing value", 99L);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONObject0.optBigDecimal("Missing value", bigDecimal0);
      assertEquals(36, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      LinkedList<SocketFlow.Status> linkedList0 = new LinkedList<SocketFlow.Status>();
      JSONObject jSONObject1 = jSONObject0.put("Missing value", (Collection<?>) linkedList0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONObject1.optBigDecimal("Missing value", bigDecimal0);
      assertEquals(36, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":;/O]A", false);
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockFileOutputStream0);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("_W$J", false);
      boolean boolean0 = jSONObject1.optBoolean("_W$J", true);
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOnce("[", "[");
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      try { 
        jSONObject0.getEnum(class0, "[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an enum of type java.io.StringWriter@0000000008.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      jSONObject0.accumulate("y|#w", "y|#w");
      jSONObject0.optQuery(jSONPointer0);
      MockFile mockFile0 = new MockFile("y|#w");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Long long0 = new Long(7L);
      Writer writer0 = JSONObject.writeValue(mockPrintWriter0, long0, (-456), (-456));
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Float float0 = new Float((double) 34);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "keys");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(57);
      JSONObject jSONObject1 = jSONObject0.increment("java.io.StringWriter@0000000002");
      JSONObject jSONObject2 = jSONObject1.increment("java.io.StringWriter@0000000002");
      assertEquals(1, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Month, BufferedWriter> hashMap0 = new HashMap<Month, BufferedWriter>();
      jSONObject0.put("A JSONObject text must end with '}'", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.increment("A JSONObject text must end with '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000008].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      HashMap<BigDecimal, PseudoColumnUsage> hashMap0 = new HashMap<BigDecimal, PseudoColumnUsage>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getmarkSuportd", (Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject1.has("getmarkSuportd");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("* dF,hQpcW0G!s4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOnce("", "");
      String string0 = jSONObject0.getString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("A JSONObject text must end with '}'", 44);
      long long0 = jSONObject0.getLong("A JSONObject text must end with '}'");
      assertEquals(44L, long0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      HashMap<TrayIcon.MessageType, Window.Type> hashMap0 = new HashMap<TrayIcon.MessageType, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("S\"eH^IN^", (Object) charArrayWriter0);
      try { 
        jSONObject0.getLong("S\"eH^IN^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Month, BufferedWriter> hashMap0 = new HashMap<Month, BufferedWriter>();
      JSONObject jSONObject1 = jSONObject0.put("A JSONObject text must end with '}'", (Map<?, ?>) hashMap0);
      JSONObject jSONObject2 = jSONObject0.getJSONObject("A JSONObject text must end with '}'");
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      HashMap<TrayIcon.MessageType, Window.Type> hashMap0 = new HashMap<TrayIcon.MessageType, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("java.org.evosuite.runtime.mock.java.io", (Object) hashMap0);
      try { 
        jSONObject1.getJSONObject("java.org.evosuite.runtime.mock.java.io");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject1 = jSONObject0.put("{\"fruit\":\"Apple\",\"size\":[],\"color\":\"Red\",\"value\":true,\"value2\":false,\"hashCode\":true}", (Collection<?>) linkedList0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("{\"fruit\":\"Apple\",\"size\":[],\"color\":\"Red\",\"value\":true,\"value2\":false,\"hashCode\":true}");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      jSONObject0.put("entrySet", 1.0);
      try { 
        jSONObject0.getJSONArray("entrySet");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((-3175L));
      JSONObject jSONObject1 = jSONObject0.putOnce("^P`NK]=FZote<hRr", long0);
      int int0 = jSONObject1.getInt("^P`NK]=FZote<hRr");
      assertEquals((-3175), int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Month, BufferedWriter> hashMap0 = new HashMap<Month, BufferedWriter>();
      jSONObject0.put(":QeL=x<AZnZNeF", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getInt(":QeL=x<AZnZNeF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("A JSONObject text must end with '}'", 44);
      Number number0 = jSONObject0.getNumber("A JSONObject text must end with '}'");
      assertEquals(44, number0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOnce("", "");
      try { 
        jSONObject0.getNumber("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getmarkSuportd", 0.0F);
      assertEquals(1, jSONObject0.length());
      
      float float0 = jSONObject0.getFloat("getmarkSuportd");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      HashMap<BigDecimal, PseudoColumnUsage> hashMap0 = new HashMap<BigDecimal, PseudoColumnUsage>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getmarkSuportd", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getFloat("getmarkSuportd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("", "");
      try { 
        jSONObject1.getBigDecimal("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Month, BufferedWriter> hashMap0 = new HashMap<Month, BufferedWriter>();
      JSONObject jSONObject1 = jSONObject0.put("A JSONObject text must end with '}'", (Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject1.optBoolean("A JSONObject text must end with '}'");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("", "");
      try { 
        jSONObject1.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = JSONObject.doubleToString(835.34983);
      assertEquals("835.34983", string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1844.0);
      assertEquals("1844", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      jSONObject0.put("-99", (Collection<?>) linkedList0);
      jSONObject0.append("-99", "-99");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Month, BufferedWriter> hashMap0 = new HashMap<Month, BufferedWriter>();
      JSONObject jSONObject1 = jSONObject0.put("VrT[V<", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.append("VrT[V<", hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[VrT[V<] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<BufferedReader, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<BufferedReader, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.accumulate("rCT~qaPY+7LJ+~YZy", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Month, BufferedWriter> hashMap0 = new HashMap<Month, BufferedWriter>();
      JSONObject jSONObject1 = jSONObject0.put("A JSONObject text must end with '}'", (Map<?, ?>) hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      jSONObject1.accumulate("A JSONObject text must end with '}'", boolean0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      HashMap<BigDecimal, PseudoColumnUsage> hashMap0 = new HashMap<BigDecimal, PseudoColumnUsage>();
      JSONObject jSONObject0 = new JSONObject();
      PseudoColumnUsage pseudoColumnUsage0 = PseudoColumnUsage.NO_USAGE_RESTRICTIONS;
      hashMap0.put((BigDecimal) null, pseudoColumnUsage0);
      // Undeclared exception!
      try { 
        jSONObject0.put("getmarkSuportd", (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      HashMap<TrayIcon.MessageType, Window.Type> hashMap0 = new HashMap<TrayIcon.MessageType, Window.Type>();
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.ERROR;
      hashMap0.put(trayIcon_MessageType0, (Window.Type) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"hashCode\":0.0U\"org.json.JIONObject\":true}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at 17 [character 18 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"fruiv\":>9,\"\f\":\"Large\",kcolor\":\"Red\",\"value\":tru,,2value2\":fale,\"number\":false}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 31 [character 32 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.wrap(object0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("P~m aKYqI=p9&B@", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">{obPOtC-_5x>y.{G$");
      JSONObject jSONObject0 = new JSONObject(stringReader0);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("v$kie|r0]0?1P}Au");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("org.json.JSONObject@0000000001");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Month, BufferedWriter> hashMap0 = new HashMap<Month, BufferedWriter>();
      JSONObject jSONObject1 = jSONObject0.put("] not a string.", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.getString("] not a string.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      HashMap<TrayIcon.MessageType, Window.Type> hashMap0 = new HashMap<TrayIcon.MessageType, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      HashMap<Object, JavaFileObject.Kind> hashMap0 = new HashMap<Object, JavaFileObject.Kind>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query("");
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      HashMap<Month, BufferedWriter> hashMap0 = new HashMap<Month, BufferedWriter>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      boolean boolean0 = jSONObject0.isNull("C]%Gf0oFdw");
      assertFalse(jSONObject0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("A JSONObject text must end with '}'", 917.0);
      jSONObject0.increment("A JSONObject text must end with '}'");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Number number0 = jSONObject0.optNumber("] not a string.");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"Misplaced endObject.\":0.0,\"org.json.JSONObject\":{},\"A JSONArray text must start with '['\":[],\"org.json.JSONException\":[],\"xx\":null,\"x\":99}");
      jSONObject0.toString(15);
      assertEquals(6, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ":;/O]A");
      try { 
        jSONObject0.toString(798);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }
}
