/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 15:11:37 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.GraphicsDevice;
import java.awt.TrayIcon;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.security.CryptoPrimitive;
import java.security.KeyRep;
import java.sql.JDBCType;
import java.sql.PseudoColumnUsage;
import java.text.Normalizer;
import java.util.Collection;
import java.util.Formatter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.swing.DropMode;
import javax.swing.JTable;
import javax.swing.LayoutStyle;
import javax.swing.SortOrder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("$yn<L");
      assertEquals("$yn<L", object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("'HD<p=7tB)BW7v;");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val ['HD<p=7tB)BW7v;] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("9-8'Q|gE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("0");
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getFloat("wuaN&~%M2/ND");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{S{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 3 [character 4 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("~8!oQQb/?V_b&Zf-Y");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(519);
      JSONObject.indent(stringWriter0, 'M');
      assertEquals("                                                                             ", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      JSONObject.writeValue(charArrayWriter0, linkedList0, (-2718), 160);
      assertEquals(2, charArrayWriter0.size());
      assertEquals("[]", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("4C@z8Y)Q}nuW");
      linkedList0.add("");
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":\"a string\"}");
      jSONObject0.put("is", 1383);
      try { 
        jSONObject0.getBigInteger("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000048] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"Unable to preserve stream position\":\"a string\",\"org.json.JSONArray\":null,\"JSON does not allow non-finite numbers.\":99,\"] is not a valid number.\":false}");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write((Writer) stringWriter0);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject jSONObject0 = new JSONObject(charArrayWriter0);
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      jSONObject0.put("Saz51zp|,#", (Collection<?>) linkedList0);
      jSONObject0.remove("Saz51zp|,#");
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONPointer jSONPointer0 = new JSONPointer("");
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query(jSONPointer0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(8);
      Object object0 = jSONObject0.query("");
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("W&yvK-^", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery(jSONPointer0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(",:]}/\"[{;=#", stringArray0);
      Number number0 = jSONObject0.optNumber("}Ewb0$p,lw45mS2KC", (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)57;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Number number0 = jSONObject0.optNumber("signum", (Number) bigInteger0);
      assertEquals((short)57, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<LayoutStyle.ComponentPlacement, Character.UnicodeScript> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, Character.UnicodeScript>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Number number0 = jSONObject0.optNumber("$uUppu(MO ", (Number) bigInteger0);
      assertSame(number0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      long long0 = jSONObject0.optLong("toHU", (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("$s", stringArray0);
      long long0 = jSONObject0.optLong("T)n|4{~b@S@OYUQ%M2>", (-412L));
      assertEquals((-412L), long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Short short0 = new Short((short)790);
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      jSONObject0.put("", (int) (short)790);
      long long0 = jSONObject0.optLong("");
      assertEquals(790L, long0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject("\"Ia<,UV", stringArray0);
      jSONObject0.put("java.java.io", (int) (byte) (-62));
      long long0 = jSONObject0.optLong("java.java.io");
      assertEquals((-62L), long0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("java.io.StringWriter@0000000003", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"val\":0.0}");
      double double0 = jSONObject0.optDouble("", (double) 1908L);
      assertEquals(1908.0, double0, 0.01);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(",:]}/\"[{;=#", 0.0F);
      double double0 = jSONObject1.optDouble(",:]}/\"[{;=#");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("W\"VH~]3_^3", true);
      boolean boolean0 = jSONObject1.optBoolean("W\"VH~]3_^3");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = jSONObject0.optBigInteger("gettoLowerCase", (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-14);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONObject0.optBigInteger("getFields", bigInteger0);
      assertEquals((byte) (-14), bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(114);
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal("&Mx4h[M)|:#?Pn#4d", (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject jSONObject0 = new JSONObject(charArrayWriter0);
      BigDecimal bigDecimal0 = new BigDecimal((-99L));
      jSONObject0.optBigDecimal("Saz51zp|,#", bigDecimal0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<LayoutStyle.ComponentPlacement, Character.UnicodeScript> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, Character.UnicodeScript>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("`F5UUSS,H)B(fwp|", "is");
      JSONArray jSONArray0 = (JSONArray)jSONObject0.opt("`F5UUSS,H)B(fwp|");
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment(";.F~");
      boolean boolean0 = jSONObject0.isNull(";.F~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("isclone");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("}#<}QnoJSQ>M07_`A");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("ei", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.writeValue(pipedWriter0, "va", 1389, (-1073741822));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0, 18, 4644);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 1521, 1521);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<GraphicsDevice.WindowTranslucency> linkedList0 = new LinkedList<GraphicsDevice.WindowTranslucency>();
      GraphicsDevice.WindowTranslucency graphicsDevice_WindowTranslucency0 = GraphicsDevice.WindowTranslucency.PERPIXEL_TRANSPARENT;
      linkedList0.offerFirst(graphicsDevice_WindowTranslucency0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("in", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote("0", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<MockFileInputStream, KeyRep.Type> hashMap0 = new HashMap<MockFileInputStream, KeyRep.Type>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<Authenticator.RequestorType, CryptoPrimitive> hashMap0 = new HashMap<Authenticator.RequestorType, CryptoPrimitive>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-1357L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<DataInputStream, DropMode> hashMap0 = new HashMap<DataInputStream, DropMode>();
      HashMap<FilterInputStream, DropMode> hashMap1 = new HashMap<FilterInputStream, DropMode>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap1);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 1010.26F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 200);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.indent(pipedWriter0, 2922);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, "qFAkrPlrU;A|T[ `<J");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, pipedWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("pointer cannot be null");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("] is not a JSONObject.", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name ] is not a JSONObject., locale zh_CN
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getkeySet", true);
      jSONObject1.increment("is");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      jSONObject0.write((Writer) charArrayWriter0, (-1581), 688);
      assertEquals(813, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      StringWriter stringWriter0 = new StringWriter(0);
      jSONObject0.write((Writer) stringWriter0, 0, 1);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<Authenticator.RequestorType, CryptoPrimitive> hashMap0 = new HashMap<Authenticator.RequestorType, CryptoPrimitive>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("WRl1wA]h =hQiQX", (Map<?, ?>) hashMap0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(56);
      jSONObject1.write((Writer) charArrayWriter0, 47, 1324);
      assertEquals(37, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getkeySet", true);
      JSONObject jSONObject2 = jSONObject1.increment("is");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      jSONObject2.write((Writer) charArrayWriter0, 688, 688);
      assertEquals(3570, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      StringWriter stringWriter0 = new StringWriter(0);
      jSONObject0.put("dou", (Map<?, ?>) hashMap0);
      Writer writer0 = jSONObject0.write((Writer) stringWriter0, 0, 1);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<CryptoPrimitive, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<CryptoPrimitive, Formatter.BigDecimalLayoutForm>();
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.MAC;
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm0 = Formatter.BigDecimalLayoutForm.DECIMAL_FLOAT;
      hashMap0.put(cryptoPrimitive0, formatter_BigDecimalLayoutForm0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.toString((int) (short) (-2804));
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, 0);
      Object object0 = JSONObject.wrap(charArrayReader0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      Object object0 = JSONObject.wrap(boolean0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Integer integer0 = new Integer(851);
      Object object0 = JSONObject.wrap(integer0);
      assertEquals(851, object0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Byte byte0 = new Byte((byte)15);
      Object object0 = JSONObject.wrap(byte0);
      assertEquals((byte)15, object0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Object object0 = JSONObject.wrap("$s");
      assertEquals("$s", object0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(57, 0.0F);
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedList<MockFileWriter> linkedList0 = new LinkedList<MockFileWriter>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.put(227, Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.testValidity(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0");
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("null");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("false");
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("true");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(199);
      JSONObject.quote("I/&!8+fo", (Writer) charArrayWriter0);
      assertEquals(10, charArrayWriter0.size());
      assertEquals("\"I/&!8+fo\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockFile mockFile0 = new MockFile("java.io.StringWriter@0000000008", "java.io.StringWriter@0000000008");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Writer writer0 = JSONObject.quote("{\"val\":0.0}", (Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.quote("", (Writer) charArrayWriter0);
      assertEquals(2, charArrayWriter0.size());
      assertEquals("\"\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      File file0 = MockFile.createTempFile("ishashCode", "ishashCode");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Writer writer0 = JSONObject.quote((String) null, (Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("ite", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      JSONObject jSONObject1 = jSONObject0.put("[5AE S|tQQd+^", (Object) bufferedInputStream0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] is not a JSONArray.\":[[null]],\"ishashCode\":false,\"x\":\"lon\",\"has\":7}");
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) jSONObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringReader stringReader0 = new StringReader("org.json.JSONObject@0000000001");
      JSONObject jSONObject1 = jSONObject0.putOpt("yt", stringReader0);
      jSONObject1.optString("yt", ".");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optNumber((String) null, (Number) double0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<LayoutStyle.ComponentPlacement, Character.UnicodeScript> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, Character.UnicodeScript>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("`F5UUSS,H)B(fwp|", "is");
      long long0 = jSONObject1.optLong("`F5UUSS,H)B(fwp|", (long) 34);
      assertEquals(34L, long0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Expected '", (-671));
      int int0 = jSONObject0.optInt("Expected '", (-671));
      assertEquals((-671), int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("toString", 12);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("W\"VH~]3_^3", true);
      int int0 = jSONObject1.optInt("W\"VH~]3_^3", (-1734));
      assertEquals((-1734), int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("W\"VH~]3_^3", false);
      float float0 = jSONObject1.optFloat("W\"VH~]3_^3", 78.7F);
      assertEquals(78.7F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat("getvalues", (-2375.98F));
      assertEquals((-2375.98F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<Double, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Double, GraphicsDevice.WindowTranslucency>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      double double0 = jSONObject0.optDouble("i=O)rIEC-EG", (double) (-1112.661F));
      assertEquals((-1112.6610107421875), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      StringReader stringReader0 = new StringReader("yt");
      JSONObject jSONObject1 = jSONObject0.putOpt("yt", stringReader0);
      double double0 = jSONObject1.optDouble("yt", (double) 0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(323);
      boolean boolean0 = jSONObject0.optBoolean("{\"x\":\"hello\",\"y\":99,\"z\":true,\"a\":[],\"b\":{}}", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<PushbackReader, JTable.PrintMode> hashMap0 = new HashMap<PushbackReader, JTable.PrintMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("W\"VH~]3_^3", false);
      Class<JDBCType> class0 = JDBCType.class;
      JDBCType jDBCType0 = JDBCType.SQLXML;
      JDBCType jDBCType1 = jSONObject1.optEnum(class0, "W\"VH~]3_^3", jDBCType0);
      assertSame(jDBCType1, jDBCType0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<JDBCType> class0 = JDBCType.class;
      JDBCType jDBCType0 = JDBCType.TINYINT;
      JDBCType jDBCType1 = jSONObject0.optEnum(class0, ",q{JhWRmE|nx0<y$0+", jDBCType0);
      assertSame(jDBCType1, jDBCType0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("getintern");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"Unable to preserve stream position\":\"a string\",\"org.json.JSONArray\":null,\"JSON does not allow non-finite numbers.\":99,\"] is not a valid number.\":false}");
      jSONObject0.opt((String) null);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.putOnce("isiterator", "Q{P,v'-~K}t#qq~xA(7");
      boolean boolean0 = jSONObject0.isEmpty();
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(519);
      JSONObject jSONObject0 = new JSONObject("{\"] is not a number.\":\"a string\",\"size\":\"a string\",\"JSONObject[\":\"a string\",\"ent\":true,\"396.5952231919670\":-99,\"x\":\"a string\"}");
      jSONObject0.accumulate("{\"] is not a number.\":\"a string\",\"size\":\"a string\",\"JSONObject[\":\"a string\",\"ent\":true,\"396.5952231919670\":-99,\"x\":\"a string\"}", stringWriter0);
      jSONObject0.get("{\"] is not a number.\":\"a string\",\"size\":\"a string\",\"JSONObject[\":\"a string\",\"ent\":true,\"396.5952231919670\":-99,\"x\":\"a string\"}");
      assertEquals(7, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<DataOutputStream, TrayIcon.MessageType> hashMap0 = new HashMap<DataOutputStream, TrayIcon.MessageType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "396.595223191967");
      Class<GraphicsDevice.WindowTranslucency> class0 = GraphicsDevice.WindowTranslucency.class;
      jSONObject0.optEnum(class0, "*vjL");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"a string\",\"size\":\"a string\",\"gettoUpperCase\":\"Red\",\"JSONObject[\":true,\"ent\":true,\"396.5952231919670\":\"1\",\"x\":99}");
      int int0 = jSONObject0.length();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "396.595223191967");
      Set<String> set0 = jSONObject0.keySet();
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Normalizer.Form, Integer> hashMap0 = new HashMap<Normalizer.Form, Integer>();
      jSONObject0.put("p", (Map<?, ?>) hashMap0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Character, TrayIcon.MessageType> hashMap0 = new HashMap<Character, TrayIcon.MessageType>();
      jSONObject0.put("1KyOw@14kJp[(W", (Map<?, ?>) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LinkedList<RoundingMode> linkedList0 = new LinkedList<RoundingMode>();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.writeValue(pipedWriter0, linkedList0, 55, 406);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "] is not a JSONObject.");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = Component.BaselineResizeBehavior.CENTER_OFFSET;
      HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior>();
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.APPEND;
      hashMap0.put(processBuilder_Redirect_Type0, component_BaselineResizeBehavior0);
      MockFile mockFile0 = new MockFile("mPDs98W4`$A#");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      Writer writer0 = JSONObject.writeValue(mockFileWriter0, hashMap0, 3348, 47);
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, (Object) null, (-907), (-907));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JSONObject jSONObject0 = new JSONObject(locale0);
      assertEquals(14, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Locale.Category, BigDecimal> hashMap0 = new HashMap<Locale.Category, BigDecimal>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      hashMap0.put(locale_Category0, bigDecimal0);
      JSONObject jSONObject1 = jSONObject0.put("|Yo>JQBi2[$Bgfe", (Map<?, ?>) hashMap0);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject jSONObject0 = new JSONObject(charArrayWriter0);
      HashMap<PseudoColumnUsage, BigInteger> hashMap0 = new HashMap<PseudoColumnUsage, BigInteger>();
      PseudoColumnUsage pseudoColumnUsage0 = PseudoColumnUsage.SELECT_LIST_ONLY;
      BigInteger bigInteger0 = BigInteger.ZERO;
      hashMap0.put(pseudoColumnUsage0, bigInteger0);
      jSONObject0.put("Saq&z51z|,#", (Map<?, ?>) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Double double0 = new Double(81.7678137);
      Object object0 = JSONObject.wrap(double0);
      assertEquals(81.7678137, object0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Object> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Object>();
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm0 = Formatter.BigDecimalLayoutForm.SCIENTIFIC;
      Long long0 = new Long(1817L);
      hashMap0.put(formatter_BigDecimalLayoutForm0, long0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Short short0 = new Short((short)8192);
      Object object0 = JSONObject.wrap(short0);
      assertEquals((short)8192, object0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Character character0 = new Character('@');
      Object object0 = JSONObject.wrap(character0);
      assertEquals('@', object0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = (JSONArray)JSONObject.wrap(jSONArray0);
      assertEquals(0, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("names", true);
      JSONArray jSONArray0 = jSONObject1.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("UL!^>s6_#&=|uxX", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.put("size", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-0");
      assertEquals(-0.0, object0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("is");
      assertEquals("is", object0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("5pumXJbrE_3B26<");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-0");
      JSONObject.testValidity(number0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("2q4:UL0WOeN}'T@GZ");
      assertEquals("2q4:UL0WOeN}'T@GZ", object0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) "getkeySet");
      boolean boolean0 = jSONObject1.similar(jSONObject0);
      assertEquals(2, jSONObject1.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      Locale locale0 = Locale.TAIWAN;
      boolean boolean0 = jSONObject0.similar(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.similar(jSONObject0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HashMap<Normalizer.Form, Integer> hashMap0 = new HashMap<Normalizer.Form, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.get("\u6CD5\u6587");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.quote("qnq3o</r#{i", (Writer) charArrayWriter0);
      assertEquals(14, charArrayWriter0.size());
      assertEquals("\"qnq3o<\\/r#{i\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = JSONObject.quote("\\");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("] is not a Boolean.", (Object) null);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("1");
      assertEquals(1, number0);
      
      JSONObject jSONObject0 = new JSONObject(number0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 55, 55);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, byteArrayInputStream0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("0%", 1469);
      try { 
        jSONObject0.putOnce("0%", "] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"0%\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ishashCode";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("gcS^", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(642);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 940.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockFileInputStream0);
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<JDBCType> class0 = JDBCType.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      assertEquals(34, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      JSONObject jSONObject0 = new JSONObject(stringBuffer0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Normalizer.Form, Integer> hashMap0 = new HashMap<Normalizer.Form, Integer>();
      jSONObject0.put("java.io.StringWriter@0000000002", (Map<?, ?>) hashMap0);
      String string0 = jSONObject0.optString("java.io.StringWriter@0000000002");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("signum", "signum");
      byte[] byteArray0 = new byte[5];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject1.optNumber("signum", (Number) bigInteger0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("names", true);
      Float float0 = new Float(0.0F);
      Number number0 = jSONObject1.optNumber("names", (Number) float0);
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("V&Hp", (-429.633006));
      Number number0 = jSONObject0.optNumber("V&Hp", (Number) null);
      assertEquals((-429.633006), number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getintern", 12);
      long long0 = jSONObject0.optLong("getintern", (long) 12);
      assertEquals(12L, long0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("!f6>(1;q:\")$]>", false);
      long long0 = jSONObject1.optLong("!f6>(1;q:\")$]>");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject(",:]+/\"[{;=#");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("names");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("A JSONObject text must end with '}'", (-2608.85F));
      int int0 = jSONObject1.optInt("A JSONObject text must end with '}'");
      assertEquals((-2608), int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("W\"VH~]3_^3", false);
      int int0 = jSONObject1.optInt("W\"VH~]3_^3");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(",:]}/\"[{;=#", 0.0F);
      float float0 = jSONObject0.optFloat(",:]}/\"[{;=#", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(".,ZO", true);
      float float0 = jSONObject1.optFloat(".,ZO");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("java.io.StringWriter@0000000002", (double) 45);
      double double0 = jSONObject1.optDouble("java.io.StringWriter@0000000002");
      assertEquals(45.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("flo", "flo");
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject1.optBigInteger("flo", bigInteger0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      LinkedList<RoundingMode> linkedList0 = new LinkedList<RoundingMode>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.optBigInteger("] is not an int.", bigInteger0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.put("?)vH8iq>aL&_#t$\"", 1026);
      MockRandom mockRandom0 = new MockRandom((-1110L));
      BigInteger bigInteger0 = BigInteger.probablePrime(2983, mockRandom0);
      BigInteger bigInteger1 = jSONObject0.optBigInteger("?)vH8iq>aL&_#t$\"", bigInteger0);
      assertEquals((short)1026, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject jSONObject0 = new JSONObject(charArrayWriter0);
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      JSONObject jSONObject1 = jSONObject0.put("Saq&z51z|,#", (Collection<?>) linkedList0);
      BigDecimal bigDecimal0 = new BigDecimal((-144L));
      jSONObject1.optBigDecimal("Saq&z51z|,#", bigDecimal0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      LinkedList<RoundingMode> linkedList0 = new LinkedList<RoundingMode>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONObject0.optBigDecimal("V_~8X{7x28?m5vn", bigDecimal0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("keys", 0.0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("keys", bigDecimal0);
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("km9cI!2", false);
      boolean boolean0 = jSONObject1.optBoolean("km9cI!2", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("y@.", true);
      Class<CryptoPrimitive> class0 = CryptoPrimitive.class;
      try { 
        jSONObject0.getEnum(class0, "y@.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an enum of type java.io.StringWriter@0000000008.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      String string0 = JSONObject.numberToString(bigDecimal0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.increment("");
      JSONObject jSONObject2 = jSONObject1.increment("");
      assertSame(jSONObject0, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("WjxxVCP:V#qd", false);
      try { 
        jSONObject1.increment("WjxxVCP:V#qd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000007].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("toString", true);
      boolean boolean0 = jSONObject1.has("toString");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("false");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Expected '", false);
      try { 
        jSONObject0.getString("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "isintern");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("r\"", false);
      JSONObject.getNames(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", 0L);
      long long0 = jSONObject1.getLong("] is not a number.");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Character, TrayIcon.MessageType> hashMap0 = new HashMap<Character, TrayIcon.MessageType>();
      JSONObject jSONObject1 = jSONObject0.put("1KyOw@14kJp[(W", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.getLong("1KyOw@14kJp[(W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Character, TrayIcon.MessageType> hashMap0 = new HashMap<Character, TrayIcon.MessageType>();
      jSONObject0.put("1KyOw@14kJp[(W", (Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("1KyOw@14kJp[(W");
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("V`Oh>/=xc>:\"\"Q", true);
      try { 
        jSONObject0.getJSONObject("V`Oh>/=xc>:\"\"Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("W\"VH~]3_^3", true);
      Long long0 = new Long((-1535L));
      jSONObject0.accumulate("W\"VH~]3_^3", long0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("W\"VH~]3_^3");
      assertEquals(2, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("W\"VH~]3_^3", true);
      try { 
        jSONObject1.getJSONArray("W\"VH~]3_^3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("mq<WwLIrY5=kJH4", 1L);
      Number number0 = jSONObject1.getNumber("mq<WwLIrY5=kJH4");
      assertEquals(1L, number0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("W\"VH~]3_^3", false);
      try { 
        jSONObject1.getNumber("W\"VH~]3_^3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      HashMap<SortOrder, Double> hashMap0 = new HashMap<SortOrder, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.increment("in");
      float float0 = jSONObject1.getFloat("in");
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("flo", "flo");
      try { 
        jSONObject0.getFloat("flo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(".,ZO", false);
      try { 
        jSONObject0.getDouble(".,ZO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Character, TrayIcon.MessageType> hashMap0 = new HashMap<Character, TrayIcon.MessageType>();
      JSONObject jSONObject1 = jSONObject0.put("has", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.getBigDecimal("has");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("jLVoq", true);
      boolean boolean0 = jSONObject1.getBoolean("jLVoq");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("_X--#Vm;6@", false);
      try { 
        jSONObject1.getInt("_X--#Vm;6@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-0.6562558257895524));
      assertEquals("-0.6562558257895524", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<MockFileInputStream, KeyRep.Type> hashMap0 = new HashMap<MockFileInputStream, KeyRep.Type>();
      jSONObject0.put("toString", (Map<?, ?>) hashMap0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      try { 
        jSONObject0.append("toString", locale_Category0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[toString] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("`FUSS,H)B(fwp|", "w1L#gmN<4M[>@");
      JSONObject jSONObject2 = jSONObject1.accumulate("`FUSS,H)B(fwp|", "kLzZU!FJ2bR;N");
      assertEquals(1, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("false", jSONArray0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("W\"VH~]3_^3", true);
      Long long0 = new Long((-1535L));
      JSONObject jSONObject1 = jSONObject0.accumulate("W\"VH~]3_^3", long0);
      JSONObject jSONObject2 = jSONObject0.append("W\"VH~]3_^3", (Object) null);
      assertSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, String> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, String>();
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm0 = Formatter.BigDecimalLayoutForm.DECIMAL_FLOAT;
      hashMap0.put(formatter_BigDecimalLayoutForm0, (String) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      HashMap<Integer, Character> hashMap0 = new HashMap<Integer, Character>(2804);
      Character character0 = Character.valueOf('|');
      hashMap0.put((Integer) null, character0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("?)vH8iq>aL&_#t$\"", 1026);
      assertFalse(jSONObject0.isEmpty());
      
      int int0 = jSONObject1.getInt("?)vH8iq>aL&_#t$\"");
      assertEquals(1026, int0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"gettoCharArray\":\"Apple\",\"size\":99,\"color\":\"Red\",\"value\":true\"Illegal escape.\":-9,\"number\":null}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at 63 [character 64 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"396.5952231919670\":-99,\"] is not a number.\":\"a string\",\"size\":\"a string\",\"\"\":\"a string\",\"ent\":true,\"JSONObject[\":\"a string\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 78 [character 79 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] is not a JSONArray.\":[[null]],\"ishashCode\":false,\"x\":\"lon\",\"has\":7}");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(4, map0.size());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("j");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "5puJbrE_3B26<");
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("( 2P(PC`f8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("t0[4k8B`}N?rV)oWI");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject jSONObject0 = new JSONObject(charArrayWriter0);
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      JSONObject jSONObject1 = jSONObject0.put("Saz51Bzp|,#)", (Collection<?>) linkedList0);
      boolean boolean0 = jSONObject1.optBoolean("Saz51Bzp|,#)", false);
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-2541));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2541
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query("{bN@o&Zm!73vp6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("km9cI!2", (-1357L));
      try { 
        jSONObject0.getBoolean("km9cI!2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull(";.F~");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Number number0 = jSONObject0.optNumber("getsize");
      assertNull(number0);
  }
}
