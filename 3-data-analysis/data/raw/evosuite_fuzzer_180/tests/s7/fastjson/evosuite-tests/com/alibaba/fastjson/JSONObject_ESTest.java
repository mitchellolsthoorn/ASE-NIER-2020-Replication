/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 15:15:28 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import java.io.ByteArrayInputStream;
import java.io.CharArrayWriter;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.function.BiFunction;
import java.util.function.LongBinaryOperator;
import java.util.function.ToLongFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      
      ConcurrentSkipListMap<Integer, PipedInputStream> concurrentSkipListMap0 = new ConcurrentSkipListMap<Integer, PipedInputStream>();
      JSONObject jSONObject1 = jSONObject0.fluentPut((String) null, concurrentSkipListMap0);
      jSONObject0.isEmpty();
      jSONObject1.containsKey((Object) null);
      Class<PipedInputStream> class0 = PipedInputStream.class;
      jSONObject0.toJavaObject(class0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      jSONObject0.merge("default constructor not found. ", "default constructor not found. ", biFunction0);
      BiFunction<String, Object, Byte> biFunction1 = (BiFunction<String, Object, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(anyString() , any());
      jSONObject0.computeIfPresent("default constructor not found. ", biFunction1);
      jSONObject0.getBigDecimal("default constructor not found. ");
      jSONObject0.getJSONArray("@type");
      assertEquals(0, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.fluentPut("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
      // Undeclared exception!
      try { 
        jSONObject1.getDoubleValue("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      
      jSONObject0.fluentPut("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
      boolean boolean0 = jSONObject0.isEmpty();
      assertFalse(boolean0);
      
      jSONObject0.getByteValue("Y])?");
      JSONObject.SecureObjectInputStream.ensureFields();
      // Undeclared exception!
      try { 
        jSONObject0.getDate("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.fluentPut("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
      // Undeclared exception!
      try { 
        jSONObject0.getShortValue("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.fluentPut("@type", "@type");
      // Undeclared exception!
      try { 
        jSONObject1.getBooleanValue("@type");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : @type
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.fluentPut("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
      jSONObject0.isEmpty();
      // Undeclared exception!
      try { 
        jSONObject1.getByteValue("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-3509));
      Float float0 = new Float((double) (-3509));
      jSONObject0.containsKey(float0);
      jSONObject0.getDoubleValue(";");
      Class<JSONObject> class0 = JSONObject.class;
      JSONObject jSONObject1 = jSONObject0.toJavaObject(class0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject.SecureObjectInputStream.ensureFields();
      JSONObject.SecureObjectInputStream jSONObject_SecureObjectInputStream0 = null;
      try {
        jSONObject_SecureObjectInputStream0 = new JSONObject.SecureObjectInputStream((ObjectInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.fluentPut("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
      jSONObject1.getDoubleValue("@type");
      JSONObject.SecureObjectInputStream.ensureFields();
      boolean boolean0 = jSONObject1.equals(jSONObject0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONObject0.getByteValue("com.alibaba.fastjson.JSONObject$SecureObjectInputStream");
      jSONObject0.getIntValue("com.alibaba.fastjson.JSONObject$SecureObjectInputStream");
      Long long0 = new Long(0L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      jSONObject0.merge("getLastResolveTask", long0, biFunction0);
      jSONObject0.getBooleanValue("");
      Short short0 = jSONObject0.getShort("getLastResolveTask");
      assertEquals((short)0, (short)short0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject.SecureObjectInputStream.ensureFields();
      JSONObject.SecureObjectInputStream.ensureFields();
      String string0 = "IgnoreNotMatch";
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.AllowISO8601DateFormat;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowArbitraryCommas;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.NonStringKeyAsString;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.UseObjectArray;
      featureArray0[3] = feature3;
      // Undeclared exception!
      try { 
        JSON.parseObject("IgnoreNotMatch", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2IgnoreNotMatch
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSON jSON0 = jSONObject0.getObject("@type", (TypeReference) null);
      assertNull(jSON0);
      
      Date date0 = jSONObject0.getDate("1.2.68");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.getBooleanValue("1.2.68");
      assertFalse(boolean0);
      
      jSONObject0.getObject("lR[|Tr`HI", (TypeReference) null);
      Double double0 = new Double((-3509));
      Object object0 = jSONObject0.get(double0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(false);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      JSONObject jSONObject1 = jSONObject0.fluentPut("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}", jSONObject0);
      jSONObject1.getDoubleValue("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
      JSONObject.SecureObjectInputStream.ensureFields();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)16;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-55);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-10);
      byteArray0[2] = byte2;
      byte byte3 = (byte)2;
      byteArray0[3] = byte3;
      byte byte4 = (byte)26;
      byteArray0[4] = byte4;
      byte byte5 = (byte)58;
      byteArray0[5] = byte5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectInputStream objectInputStream0 = new ObjectInputStream(byteArrayInputStream0);
      JSONObject.SecureObjectInputStream jSONObject_SecureObjectInputStream0 = new JSONObject.SecureObjectInputStream(objectInputStream0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = jSONObject0.VERSION;
      String string0 = "$n3cC~'@%XqMuA*Kz#";
      stringArray0[1] = string0;
      jSONObject_SecureObjectInputStream0.resolveProxyClass(stringArray0);
      jSONObject0.containsValue(objectInputStream0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte byte0 = jSONObject0.getByteValue("po6 #'");
      assertEquals((byte)0, byte0);
      
      int int0 = jSONObject0.getIntValue("5L;@*'M,iYiaFi");
      assertEquals(0, int0);
      
      ConcurrentSkipListMap<Integer, Short> concurrentSkipListMap0 = new ConcurrentSkipListMap<Integer, Short>();
      concurrentSkipListMap0.values();
      JSONObject jSONObject1 = jSONObject0.fluentPut("writeFloat", concurrentSkipListMap0);
      int int1 = jSONObject1.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      assertEquals(0, jSONObject0.size());
      
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(treeMap0);
      // Undeclared exception!
      try { 
        jSONObject1.fluentRemove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(false);
      // Undeclared exception!
      try { 
        jSONObject0.putAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(false);
      JSONObject jSONObject1 = jSONObject0.fluentPut("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}", jSONObject0);
      jSONObject1.isEmpty();
      jSONObject1.getFloatValue("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject.SecureObjectInputStream.ensureFields();
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      JSONObject jSONObject0 = new JSONObject(concurrentHashMap0);
      LinkedHashMap<Object, String> linkedHashMap0 = new LinkedHashMap<Object, String>();
      int int0 = 972;
      String string0 = null;
      jSONObject0.isEmpty();
      Integer integer0 = new Integer(972);
      // Undeclared exception!
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.getLongValue("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
      jSONObject0.getDoubleValue("1.2.68");
      jSONObject0.getFloatValue("@type");
      Integer integer0 = new Integer(2147483645);
      JSONObject jSONObject1 = jSONObject0.fluentPut("<6h/m-NN(", treeMap0);
      jSONObject0.put("<6h/m-NN(", (Object) jSONObject1);
      assertEquals(1, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.getLongValue("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
      Float float0 = new Float(0.0);
      jSONObject0.put("", (Object) treeMap0);
      // Undeclared exception!
      try { 
        jSONObject0.getTimestamp("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.invoke((Object) null, (Method) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(hashMap0);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      Class<Annotation> class1 = Annotation.class;
      Class<Integer> class2 = Integer.class;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.68", linkedHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("1.2.68", class1, class2, class0, (Field) null, 867, 55296, (-3509));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      try { 
        jSONObject0.invoke("@type", (Method) null, fieldInfo0.alternateNames);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(false);
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      JSONObject jSONObject2 = jSONObject1.fluentPut("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}", jSONObject0);
      jSONObject1.getByte("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
      jSONObject2.isEmpty();
      jSONObject2.getBoolean(jSONObject0.DEFAULT_TYPE_KEY);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.getJSONArray("@type");
      assertNull(jSONArray0);
      
      Object object0 = jSONObject0.clone();
      assertTrue(object0.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.getLongValue("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
      jSONObject0.getDoubleValue("1.2.68");
      jSONObject0.getFloatValue("@type");
      jSONObject0.remove((Object) null);
      jSONObject0.getByteValue("@zN,-a`");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "get");
      jSONObject0.clone();
      int int0 = jSONObject0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONObject jSONObject0 = new JSONObject(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
      jSONObject0.clone();
      int int0 = jSONObject0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONObject jSONObject0 = new JSONObject(true);
      jSONObject0.getBytes("fastjson.parser.safeMode");
      jSONObject0.getShort("fastjson.parser.autoTypeSupport");
      Class<Double> class0 = Double.TYPE;
      Double double0 = jSONObject0.toJavaObject(class0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONObject jSONObject1 = new JSONObject(false);
      jSONObject1.getString("fastjson.parser.safeMode");
      Integer integer0 = jSONObject0.getInteger("fastjson.parser.autoTypeAccept");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(false);
      JSONObject jSONObject1 = jSONObject0.fluentPut("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}", jSONObject0);
      // Undeclared exception!
      try { 
        jSONObject1.getBigDecimal("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.fluentPut("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = jSONObject1.getString("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.getString((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(false);
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      assertTrue(jSONObject1.isEmpty());
      
      JSONObject jSONObject2 = jSONObject1.fluentPut("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}", jSONObject0);
      jSONObject2.isEmpty();
      jSONObject2.getBoolean("@type");
      jSONObject2.getString("@type");
      jSONObject2.getInteger("8s^&Y7pmxx%mYsA");
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      jSONObject0.getLongValue("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
      jSONObject0.getDoubleValue("1.2.68");
      Class<Object> class0 = Object.class;
      JSONObject jSONObject1 = new JSONObject(treeMap0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      jSONObject1.toJavaObject(class0, parserConfig0, 717);
      jSONObject1.getBigInteger("illegal state : ");
      // Undeclared exception!
      try { 
        jSONObject0.remove((Object) classLoader0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // sun.misc.Launcher$AppClassLoader cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.fluentPut("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
      jSONObject0.isEmpty();
      // Undeclared exception!
      try { 
        jSONObject1.getBoolean("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : {\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.SecureObjectInputStream jSONObject_SecureObjectInputStream0 = null;
      try {
        jSONObject_SecureObjectInputStream0 = new JSONObject.SecureObjectInputStream((ObjectInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONObject$SecureObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1839);
      jSONObject0.fluentClear();
      jSONObject0.getJSONObject("{\"y\":true,\"\":true,\"a\":[99],\"java.util.List\":[]}");
      jSONObject0.hashCode();
      jSONObject0.getInnerMap();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject.SecureObjectInputStream jSONObject_SecureObjectInputStream0 = null;
      try {
        jSONObject_SecureObjectInputStream0 = new JSONObject.SecureObjectInputStream((ObjectInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONObject$SecureObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.flush();
      JSON.isValid("SkipTransientField");
      jSONObject0.getBoolean("curContext");
      Class<Object> class0 = Object.class;
      JSONObject jSONObject2 = (JSONObject)jSONObject1.toJavaObject(class0);
      assertTrue(jSONObject2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ConcurrentSkipListMap<String, Object> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((-3509));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -3509
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      Byte byte0 = new Byte((byte)3);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject1 = jSONObject0.fluentRemove(byte0);
      jSONObject1.clear();
      jSONObject1.getLongValue((String) null);
      jSONObject1.size();
      jSONObject0.getSqlDate((String) null);
      BigDecimal bigDecimal0 = jSONObject1.getBigDecimal("1.2.68");
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      assertTrue(jSONObject0.isEmpty());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.flush();
      boolean boolean0 = jSONObject0.getBooleanValue("");
      boolean boolean1 = jSONObject0.containsKey(charArrayWriter0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      Class<Short> class0 = Short.class;
      // Undeclared exception!
      try { 
        jSONObject0.toJavaObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, public java.lang.Short(java.lang.String) throws java.lang.NumberFormatException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.getJSONArray("hashCode");
      JSONObject.SecureObjectInputStream.ensureFields();
      Class<JSON> class0 = JSON.class;
      jSONObject0.toJavaObject(class0);
      Float float0 = jSONObject0.getFloat("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.google.common.collect.LinkedHashMultimap");
      JSONObject jSONObject0 = new JSONObject(true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.flush();
      jSONObject0.isEmpty();
      jSONObject0.getBoolean("com.alibaba.fastjson.serializer.JavaBeanSerializer");
      Class<Short> class0 = Short.class;
      // Undeclared exception!
      try { 
        jSONObject0.toJavaObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, public java.lang.Short(java.lang.String) throws java.lang.NumberFormatException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      treeMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      jSONObject0.getLongValue("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
      jSONObject0.getDoubleValue("1.2.68");
      // Undeclared exception!
      try { 
        jSONObject0.getBigDecimal((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.fluentPut("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
      // Undeclared exception!
      try { 
        jSONObject1.getJSONArray("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONObject cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ConcurrentSkipListMap<String, Object> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(concurrentSkipListMap0);
      JSONObject jSONObject1 = new JSONObject(true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.flush();
      jSONObject1.isEmpty();
      // Undeclared exception!
      try { 
        jSONObject0.getInteger((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentSkipListMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1842);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.flush();
      JSONObject jSONObject1 = new JSONObject(1842, false);
      boolean boolean0 = jSONObject1.isEmpty();
      assertTrue(boolean0);
      
      jSONObject0.getInteger(";6>(");
      jSONObject0.getBoolean("1.2.68");
      jSONObject1.getDate("'vGyO>k#");
      long long0 = jSONObject1.getLongValue(";6>(");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject.SecureObjectInputStream.ensureFields();
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      ToLongFunction<Map.Entry<String, Object>> toLongFunction0 = (ToLongFunction<Map.Entry<String, Object>>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceEntriesToLong(2183L, toLongFunction0, 43L, longBinaryOperator0);
      JSONObject jSONObject0 = new JSONObject(concurrentHashMap0);
      LinkedHashMap<Object, String> linkedHashMap0 = new LinkedHashMap<Object, String>();
      // Undeclared exception!
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      jSONObject0.getLongValue("(Ljava/lang/reflect/Type;Ljava/lang/Object;)Z");
      // Undeclared exception!
      try { 
        JSON.parse("@type", (-726));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2@type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONObject jSONObject0 = new JSONObject(false);
      byte[] byteArray0 = jSONObject0.getBytes("fastjson.parser.deny");
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.getDoubleValue("{\"x\":\"passHandle\",\"y\":[],\"z\":[],\"LocalVariableTable\":[[]],\"b\":{},\"xx\":{}}");
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte) (-60);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONObject0.getDoubleValue("");
      jSONObject0.getByteValue("K8MUeWz-H'");
      JSONObject jSONObject2 = jSONObject0.fluentClear();
      jSONObject2.getBigInteger("");
      jSONObject1.getBigDecimal("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
      byte[] byteArray1 = jSONObject1.getBytes("com.alibaba.fastjson.JSONObject$SecureObjectInputStream");
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      Byte byte0 = new Byte((byte) (-120));
      Integer integer0 = new Integer(4);
      jSONObject0.getOrDefault(integer0, "9");
      jSONObject0.hashCode();
      BigDecimal bigDecimal0 = jSONObject0.getBigDecimal("kSn25*");
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.getIntValue("@type");
      assertEquals(0, int0);
      
      Class<Short> class0 = Short.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        jSONObject0.toJavaObject(class0, parserConfig0, (-795));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.lang.Short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<String, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // map is null.
         //
         verifyException("com.alibaba.fastjson.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Map<String, Object> map0 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<String, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // map is null.
         //
         verifyException("com.alibaba.fastjson.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.getDoubleValue("{\"x\":\"passHandle\",\"y\":7,\"z\":[],\"a\":[[]],\"b\":{},\"xx\":{}}");
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      jSONObject0.getDoubleValue("");
      jSONObject0.getByteValue("K8MUeWz-H'");
      JSONObject jSONObject2 = jSONObject0.fluentClear();
      jSONObject2.getBigInteger("");
      BigDecimal bigDecimal0 = jSONObject1.getBigDecimal("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = jSONObject0.getBigDecimal("1*jGv)SX._x!");
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ConcurrentSkipListMap<String, Object> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(concurrentSkipListMap0);
      jSONObject0.put("\"a string\"", (Object) concurrentSkipListMap0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((-3509));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -3509
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Double> class0 = Double.class;
      Double double0 = jSONObject0.getObject("hashCodetoString", class0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)84);
      jSONObject0.getOrDefault("~C", "");
      assertTrue(jSONObject0.isEmpty());
      
      SerializeConfig serializeConfig0 = new SerializeConfig(2806);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONString((Object) byte0, serializeConfig0, serializerFeatureArray0);
      jSONObject0.put((String) null, (Object) null);
      jSONObject0.isEmpty();
      Integer integer0 = new Integer((-3509));
      jSONObject0.getDouble("");
      jSONObject0.entrySet();
      jSONObject0.values();
      jSONObject0.getBoolean("");
      Class<String> class0 = String.class;
      jSONObject0.getObject("", class0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = jSONObject0.getLong("gettoString");
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject.SecureObjectInputStream.ensureFields();
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      ToLongFunction<Map.Entry<String, Object>> toLongFunction0 = (ToLongFunction<Map.Entry<String, Object>>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceEntriesToLong(2183L, toLongFunction0, 0L, longBinaryOperator0);
      JSONObject jSONObject0 = new JSONObject(concurrentHashMap0);
      LinkedHashMap<Object, String> linkedHashMap0 = new LinkedHashMap<Object, String>();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      mockPrintStream0.write(byteArray0);
      mockPrintStream0.append((CharSequence) ">EHJh");
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charset0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      Long long0 = jSONObject0.getLong("");
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.getDoubleValue("{\"x\":\"passHandle\",\"y\":7,\"z\":[],\"a\":[[]],\"b\":{},\"xx\":{}}");
      assertEquals(0.0, double0, 0.01);
      
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      boolean boolean0 = jSONObject1.isEmpty();
      assertTrue(boolean0);
      
      jSONObject0.getInteger((String) null);
      jSONObject0.getFloatValue("1.2.68");
      float float0 = jSONObject0.getFloatValue("Q4_a,ebmqa");
      assertEquals(0.0F, float0, 0.01F);
      
      Short short0 = new Short((short) (-1));
      jSONObject1.equals(short0);
      jSONObject1.clear();
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3);
      Timestamp timestamp0 = jSONObject0.getTimestamp("W3m*E#Bna-V`F+Um3");
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)84);
      jSONObject0.getOrDefault("~C", "");
      assertTrue(jSONObject0.isEmpty());
      
      SerializeConfig serializeConfig0 = new SerializeConfig(2806);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONString((Object) byte0, serializeConfig0, serializerFeatureArray0);
      jSONObject0.put((String) null, (Object) null);
      jSONObject0.isEmpty();
      Integer integer0 = new Integer((-3509));
      jSONObject0.getDouble("");
      jSONObject0.entrySet();
      jSONObject0.values();
      jSONObject0.getBoolean("");
      jSONObject0.getIntValue("");
      jSONObject0.remove((Object) "");
      jSONObject0.getTimestamp("84B");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.getDoubleValue("{\"x\":\"passHandle\",\"y\":7,\"z\":[],\"map is null.\":[[99]],\"b\":{},\"xx\":{},\"xxx\":[]}");
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      double double0 = jSONObject0.getDoubleValue("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
      assertEquals(0.0, double0, 0.01);
      
      Integer.getInteger((String) null, (-3));
      jSONObject1.getInnerMap();
      jSONObject1.values();
      int int0 = jSONObject0.getIntValue("W/O3A!'9L,5G\".F%@LS");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte byte0 = jSONObject0.getByteValue("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      JSONObject jSONObject2 = jSONObject1.fluentClear();
      boolean boolean0 = jSONObject2.isEmpty();
      assertTrue(boolean0);
      
      jSONObject1.getInteger("@type");
      jSONObject1.keySet();
      byte byte0 = jSONObject0.getByteValue("(B)Ljava/lang/Byte;");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      Byte byte0 = new Byte((byte) (-120));
      Integer integer0 = new Integer(4);
      jSONObject0.getOrDefault(integer0, "~C");
      SerializeConfig serializeConfig0 = new SerializeConfig(2790);
      Double double0 = new Double(2790);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteDateUseDateFormat;
      JSONObject jSONObject1 = jSONObject0.fluentPut((String) null, serializerFeature1);
      // Undeclared exception!
      try { 
        jSONObject1.getJSONArray((String) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)84);
      jSONObject0.getOrDefault("~C", "");
      assertTrue(jSONObject0.isEmpty());
      
      SerializeConfig serializeConfig0 = new SerializeConfig(2806);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONString((Object) byte0, serializeConfig0, serializerFeatureArray0);
      jSONObject0.put((String) null, (Object) null);
      jSONObject0.isEmpty();
      Integer integer0 = new Integer((-3509));
      Integer.getInteger("X^v9~o6SY^tnAR5EW7M", 3);
      jSONObject0.getInnerMap();
      jSONObject0.values();
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject.SecureObjectInputStream.ensureFields();
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      ToLongFunction<Map.Entry<String, Object>> toLongFunction0 = (ToLongFunction<Map.Entry<String, Object>>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceEntriesToLong(2183L, toLongFunction0, 0L, longBinaryOperator0);
      JSONObject jSONObject0 = new JSONObject(concurrentHashMap0);
      LinkedHashMap<Object, String> linkedHashMap0 = new LinkedHashMap<Object, String>();
      int int0 = 972;
      String string0 = null;
      Float float0 = new Float((float) 0L);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      jSONObject0.getLongValue("@type");
      byte byte0 = (byte) (-60);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte)83;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        jSONObject0.getDoubleValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ConcurrentSkipListMap<String, Object> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(concurrentSkipListMap0);
      String string0 = "{\"x\":true,\"y\":false,\"z\":[],\"\":[],\"BrowserSecure\":99}";
      jSONObject0.put("{\"x\":true,\"y\":false,\"z\":[],\"\":[],\"BrowserSecure\":99}", (Object) concurrentSkipListMap0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((-3509));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -3509
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ConcurrentSkipListMap<String, Object> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(concurrentSkipListMap0);
      jSONObject0.put("{\"\":99,\"y\":7,\"z\":[],\"a\":[],\"handles\":{}}", (Object) concurrentSkipListMap0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((-3509));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -3509
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject.SecureObjectInputStream.ensureFields();
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      ToLongFunction<Map.Entry<String, Object>> toLongFunction0 = (ToLongFunction<Map.Entry<String, Object>>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      JSONObject jSONObject0 = new JSONObject(concurrentHashMap0);
      LinkedHashMap<Object, String> linkedHashMap0 = new LinkedHashMap<Object, String>();
      Float float0 = new Float(2078.626F);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[3] = serializerFeature3;
      JSON.toJSONStringWithDateFormat(float0, "@type", serializerFeatureArray0);
      JSONObject jSONObject1 = new JSONObject(concurrentHashMap0);
      jSONObject1.getBigInteger("D?l=wlcb`i");
      jSONObject1.getFloatValue("nOyQH");
      // Undeclared exception!
      try { 
        jSONObject0.getSqlDate((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2420);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[7] = serializerFeature7;
      SerializerFeature serializerFeature8 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[8] = serializerFeature8;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      SerializeWriter serializeWriter1 = serializeWriter0.append((CharSequence) "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
      JSON.writeJSONStringTo(jSONObject0, serializeWriter1, serializerFeatureArray0);
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      assertEquals((-3509), JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      Byte byte0 = new Byte((byte) (-120));
      Integer integer0 = new Integer(4);
      jSONObject0.getOrDefault(integer0, "~C");
      assertTrue(jSONObject0.isEmpty());
      
      SerializeConfig serializeConfig0 = new SerializeConfig(2790);
      Double double0 = new Double(2790);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[3] = serializerFeature3;
      JSON.toJSONString((Object) serializerFeature2, true);
      jSONObject0.put("-mU@8h", (Object) double0);
      JSONObject jSONObject1 = new JSONObject(2790);
      jSONObject1.isEmpty();
      jSONObject1.getInteger("~C");
      jSONObject0.getDouble("X^v9~o6SY^tnAR5EW7M");
      assertFalse(jSONObject0.isEmpty());
      
      jSONObject1.entrySet();
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-3509));
      boolean boolean0 = jSONObject0.containsKey(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((-3509));
      Object object0 = jSONObject0.get(long0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.getJSONObject("passHandle");
      // Undeclared exception!
      try { 
        jSONObject0.fluentPutAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      java.sql.Date date0 = jSONObject0.getSqlDate("I9VY,7pM:");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject jSONObject2 = jSONObject1.fluentPut("@type", jSONObject0);
      JSONObject jSONObject3 = jSONObject2.fluentClear();
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullStringAsEmpty;
      SerializerFeature serializerFeature2 = SerializerFeature.IgnoreErrorGetter;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNonStringValueAsString;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      serializerFeatureArray0[0] = serializerFeature3;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature3;
      JSON.toJSONStringWithDateFormat(serializerFeature2, "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}", serializerFeatureArray0);
      jSONObject3.values();
      float float0 = jSONObject0.getFloatValue(",,e_Lz%uHr~8(ncz");
      assertEquals(0.0F, float0, 0.01F);
      
      jSONObject0.getSqlDate((String) null);
      boolean boolean0 = jSONObject1.getBooleanValue("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      short short0 = jSONObject0.getShortValue("@type");
      assertEquals((short)0, short0);
      
      Short short1 = jSONObject0.getShort("toString");
      assertNull(short1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.getDoubleValue("{\"x\":\"passHandle\",\"y\":7,\"z\":[],\"a\":[[]],\"b\":{},\"xx\":{}}");
      assertEquals(0.0, double0, 0.01);
      
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteMapNullValue;
      Float float0 = new Float(887.5324F);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.fluentClear();
      jSONObject1.getInteger("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
      Long long0 = new Long((-1289L));
      jSONObject2.fluentRemove(long0);
      jSONObject1.getShort("0qPy*7ZJ?@lJ@1)Ej[V");
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      String string0 = "";
      JSONObject jSONObject2 = jSONObject0.fluentPut("", jSONObject1);
      jSONObject0.getInteger("");
      jSONObject1.getDouble(jSONObject2.DEFAULT_TYPE_KEY);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((-3509));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -3509
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(false);
      JSONObject jSONObject2 = jSONObject1.fluentClear();
      String string0 = "";
      JSONObject jSONObject3 = jSONObject1.fluentPut("", jSONObject2);
      jSONObject1.getInteger(string0);
      jSONObject2.getDouble(jSONObject3.DEFAULT_TYPE_KEY);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = jSONObject0.getFloat("@type");
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.AutoCloseSource;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.UseObjectArray;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.InternFieldNames;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.CustomMapDeserializer;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.IgnoreNotMatch;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.AllowComment;
      featureArray0[5] = feature5;
      JSONObject jSONObject0 = JSON.parseObject("{\"fruit\":null,\"size\":\", property \",\"color\":\"Red\",\"value\":true,\"value2\":false}", featureArray0);
      jSONObject0.getFloat("wIG^wS9XYi");
      JSONObject jSONObject1 = new JSONObject();
      int int0 = (-1);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Object> class0 = Object.class;
      JSONObject jSONObject1 = (JSONObject)jSONObject0.toJavaObject(class0);
      assertEquals((-3509), JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)84);
      jSONObject0.getOrDefault("~C", "");
      assertTrue(jSONObject0.isEmpty());
      
      SerializeConfig serializeConfig0 = new SerializeConfig(2806);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONString((Object) byte0, serializeConfig0, serializerFeatureArray0);
      jSONObject0.put((String) null, (Object) null);
      jSONObject0.isEmpty();
      jSONObject0.getInteger("X^v9~o6SY^tnAR5EW7M");
      jSONObject0.getDouble("");
      jSONObject0.entrySet();
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ConcurrentSkipListMap<String, Object> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(concurrentSkipListMap0);
      Byte byte0 = new Byte((byte) (-69));
      SerializeConfig serializeConfig0 = new SerializeConfig(2806);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[0] = serializerFeature0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      serializerFeatureArray0[1] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[2] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[3] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[4] = serializerFeature3;
      JSON.toJSONString((Object) byte0, serializeConfig0, serializerFeatureArray0);
      jSONObject0.put("-69B", (Object) serializerFeature1);
      // Undeclared exception!
      try { 
        jSONObject0.getJSONObject("-69B");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ConcurrentSkipListMap<String, Object> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(concurrentSkipListMap0);
      String string0 = "{\"x\":99,\"y\":7,\"z\":[],\"a\":[],\"handles\":{}}";
      jSONObject0.put("{\"x\":99,\"y\":7,\"z\":[],\"a\":[],\"handles\":{}}", (Object) concurrentSkipListMap0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((-3509));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -3509
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, ByteArrayInputStream> hashMap0 = new HashMap<String, ByteArrayInputStream>();
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(hashMap0);
      assertEquals((-3509), JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      ConcurrentSkipListMap<String, JSONObject> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(concurrentSkipListMap0);
      jSONObject1.getJSONObject("1.2.68");
      Short short0 = new Short((short)4);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        JSON.parse("isEmpty", (-3509));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2isEmpty
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1003);
      ConcurrentSkipListMap<String, Integer> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Integer>();
      concurrentSkipListMap0.tailMap("F/D9b[SGHOj7\\gxN?");
      jSONObject0.putAll(concurrentSkipListMap0);
      concurrentSkipListMap0.lowerKey("");
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":99,\"number\":\"1\"}";
      jSONObject0.getByte("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":99,\"number\":\"1\"}");
      jSONObject0.putAll(concurrentSkipListMap0);
      jSONObject0.getBigInteger("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":99,\"number\":\"1\"}");
      MockFile mockFile0 = new MockFile((File) null, "");
      File file0 = MockFile.createTempFile("1.2.68", "F/D9b[SGHOj7\\gxN?", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(mockFileInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.fluentPut("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
      jSONObject1.putAll(jSONObject0);
      short short0 = jSONObject0.getShortValue("1.2.68");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = jSONObject0.getByte("(Ljava/lang/Object;Ljava/lang/Object;)");
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.DisableFieldSmartMatch;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportNonPublicField;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowUnQuotedFieldNames;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.DisableSpecialKeyDetect;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.OrderedField;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.InternFieldNames;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.UseBigDecimal;
      featureArray0[6] = feature6;
      JSONObject jSONObject0 = JSON.parseObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":99}", featureArray0);
      JSON.parse("\"a string\"", 16);
      jSONObject0.values();
      jSONObject0.equals(feature4);
      jSONObject0.getBooleanValue("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":99}");
      jSONObject0.hashCode();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedHashMap<Short, Long> linkedHashMap0 = new LinkedHashMap<Short, Long>();
      JSONObject jSONObject1 = jSONObject0.fluentPut("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":false}", linkedHashMap0);
      jSONObject1.fluentRemove(jSONObject0);
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":false}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \"{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":false}\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.getShortValue("{>VEQ9+dBJF{8i~+*b[");
      boolean boolean0 = jSONObject0.equals("{>VEQ9+dBJF{8i~+*b[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(false);
      jSONObject0.fluentPut("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}", jSONObject0);
      jSONObject0.getInteger("");
      jSONObject0.getDouble("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      Double double0 = jSONObject0.getDouble("@type");
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = jSONObject0.getInteger("@type");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.fluentPut("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
      float float0 = jSONObject1.getFloatValue("1.2.68");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      JSONObject jSONObject2 = jSONObject1.fluentPut("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}", jSONObject0);
      jSONObject2.isEmpty();
      jSONObject2.getInteger("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":[],\"value\":true,\"value2\":false,\"number\":\"1\"}");
      jSONObject2.getDouble(jSONObject1.DEFFAULT_DATE_FORMAT);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<String> set0 = jSONObject0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      jSONObject0.fluentClear();
      jSONObject0.keySet();
      jSONObject0.isEmpty();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject.SecureObjectInputStream.ensureFields();
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      ToLongFunction<Map.Entry<String, Object>> toLongFunction0 = (ToLongFunction<Map.Entry<String, Object>>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceEntriesToLong(0L, toLongFunction0, 6160752908990493848L, longBinaryOperator0);
      JSONObject jSONObject0 = new JSONObject(concurrentHashMap0);
      LinkedHashMap<Object, String> linkedHashMap0 = new LinkedHashMap<Object, String>();
      SerializeConfig serializeConfig0 = null;
      try {
        serializeConfig0 = new SerializeConfig((-1000), false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IdentityHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      JSONObject jSONObject1 = jSONObject0.fluentRemove(fileDescriptor0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONObject jSONObject0 = new JSONObject(true);
      jSONObject0.getFloatValue("fastjson.parser.autoTypeAccept");
      ByteArrayInputStream byteArrayInputStream0 = jSONObject0.getObject("=", (Type) null);
      assertNull(byteArrayInputStream0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject("{\"x\":\"hello\",\"y\":true,\"z\":true,\"a\":[],\"b\":{}}");
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      Byte byte0 = new Byte((byte) (-120));
      JSONObject jSONObject2 = jSONObject1.fluentRemove(byte0);
      Class<Long> class0 = Long.TYPE;
      Byte byte1 = jSONObject2.getObject("{\"fruit\":99,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", (Type) class0);
      assertNull(byte1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(false);
      String string0 = "{\"x\":\"hello\",\"y\":99,\"z\":true,\"a\":[],\"b\":{}}";
      Class<String> class0 = String.class;
      Class<Double> class1 = Double.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache((String) null, concurrentHashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-2040109463));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2040109463
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1839);
      jSONObject0.fluentClear();
      jSONObject0.getJSONObject("{\"x\":\"hello\",\"y\":true,\"z\":true,\"a\":[],\"b\":{}}");
      jSONObject0.hashCode();
      Map<String, Object> map0 = jSONObject0.getInnerMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2133);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3829);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}";
      stringArray0[1] = "L,";
      stringArray0[2] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.SortField;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[3] = serializerFeature3;
      JSON.toJSONString((Object) "L,", serializeConfig0, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
      BigInteger bigInteger0 = jSONObject0.getBigInteger("");
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(47, true);
      jSONObject0.putIfAbsent("", "");
      JSON.isValidArray("");
      jSONObject0.getJSONArray("");
      jSONObject0.getIntValue("map is null.");
      jSONObject0.getShort("+=_3E2[[");
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null, 99999, 99999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(16, false);
      String string0 = "$o]";
      jSONObject0.getJSONArray("$o]");
      jSONObject0.getBigInteger("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":false,\"value2\":false,\"number\":\"1\"}");
      jSONObject0.hashCode();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.fluentPut("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
      Object object0 = jSONObject1.get(jSONObject0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.getByteValue("@type");
      BigInteger bigInteger0 = jSONObject0.getBigInteger("m_");
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-1246), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1246
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-253), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -253
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(false);
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      JSONObject jSONObject2 = jSONObject1.fluentPut("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}", jSONObject0);
      Long long0 = Long.valueOf((long) (-3509));
      jSONObject2.fluentPut("", long0);
      jSONObject2.isEmpty();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.IgnoreAutoType;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.NonStringKeyAsString;
      featureArray0[1] = feature1;
      JSON.parse("", parserConfig0, featureArray0);
      jSONObject0.getBoolean("");
      Class<Integer> class0 = Integer.class;
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory1);
      // Undeclared exception!
      try { 
        jSONObject2.toJavaObject(class0, parserConfig1, (-3509));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(false);
      JSONObject jSONObject1 = jSONObject0.fluentPut("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}", jSONObject0);
      jSONObject1.containsValue(jSONObject0);
      JSONObject jSONObject2 = new JSONObject(false);
      jSONObject1.getBytes("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      ParserConfig parserConfig0 = ParserConfig.global;
      Boolean boolean0 = jSONObject0.getBoolean("fastjson.parser.autoTypeSupport");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.containsValue(jSONObject0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ConcurrentSkipListMap<String, Object> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(concurrentSkipListMap0);
      String string0 = "{\"x\":99,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      jSONObject0.put("{\"x\":99,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", (Object) concurrentSkipListMap0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((-3509));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -3509
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONObject jSONObject0 = new JSONObject();
      Collection<Object> collection0 = jSONObject0.values();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.getDoubleValue("@type");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.getFloatValue("1.2.68");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.getDoubleValue("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[[]],\"b\":{}}");
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[7] = serializerFeature7;
      SerializerFeature serializerFeature8 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[8] = serializerFeature8;
      JSON.toJSONStringWithDateFormat(jSONObject1, "@type", serializerFeatureArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      JSON.DEFAULT_GENERATE_FEATURE = (-3509);
      JSON.DEFFAULT_DATE_FORMAT = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":99}}";
      jSONObject0.values();
      float float0 = jSONObject0.getFloatValue("");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.getIntValue("@type");
      Class<JSONObject> class0 = JSONObject.class;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONObject jSONObject1 = jSONObject0.toJavaObject(class0, parserConfig0, 0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.getLongValue("1.2.68");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Object> class0 = Object.class;
      JSONObject jSONObject1 = (JSONObject)jSONObject0.toJavaObject(class0, (ParserConfig) null, (-3509));
      assertEquals(0, jSONObject1.size());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.fluentPut("is", "is");
      // Undeclared exception!
      try { 
        jSONObject1.getJSONObject("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2is
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.getJSONObject("@type");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.AutoCloseSource;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.UseObjectArray;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.InternFieldNames;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.CustomMapDeserializer;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.IgnoreNotMatch;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.AllowComment;
      featureArray0[5] = feature5;
      JSONObject jSONObject0 = JSON.parseObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}", featureArray0);
      jSONObject0.getJSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}");
      int int0 = (-1);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.fluentPut("yyyy-MM-dd HH:mm:ss", "yyyy-MM-dd HH:mm:ss");
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.SecureObjectInputStream.ensureFields();
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("com.alibaba.fastjson.JSONObject", (Object) "com.alibaba.fastjson.JSONObject");
      Object object0 = jSONObject0.clone();
      assertNotSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.clear();
      try { 
        Integer.decode("@type");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@type\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject jSONObject2 = jSONObject1.fluentPut("@type", jSONObject0);
      jSONObject2.fluentClear();
      File file0 = MockFile.createTempFile("1.2.68", (String) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) mockPrintStream0, (Object) jSONObject1, 0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Map<String, Object> map0 = jSONObject0.getInnerMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[[]],\"b\":{}}";
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SortFeidFastMatch;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.SortFeidFastMatch;
      featureArray0[2] = feature2;
      JSON.parseObject("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[[]],\"b\":{}}", featureArray0);
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-3509));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -3509
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }
}
