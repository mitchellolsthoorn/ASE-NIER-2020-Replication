/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 15:40:36 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dialog;
import java.awt.Window;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.CharArrayWriter;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.Proxy;
import java.net.StandardProtocolFamily;
import java.security.KeyRep;
import java.sql.ClientInfoStatus;
import java.sql.JDBCType;
import java.text.Normalizer;
import java.time.Month;
import java.util.Collection;
import java.util.Formatter;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.jws.WebParam;
import javax.swing.DropMode;
import javax.swing.GroupLayout;
import javax.swing.JTable;
import javax.tools.DocumentationTool;
import javax.tools.StandardLocation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("\"");
      assertEquals("\"", object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("$+3<$~L+y");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [$+3<$~L+y] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("99");
      assertEquals(99, number0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":null,\"size\":\"Large\",\"getDeclaringClass\":99,\"value\":true,\"value2\":false,\"number\":\"1\"}");
      JSONObject jSONObject1 = jSONObject0.increment("IJ/*-ko{nZTz:");
      String string0 = jSONObject1.toString(4);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"fruit\":null,\"sizeH:\"Large\",\"getDeclarivgClass\":99,\"value\":true,\"valce2\":false,\"number\":\"1\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 23 [character 24 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|Ew^#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.indent(charArrayWriter0, (-32));
      assertEquals("", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":99,\"value\":true,\"value2\":false,\"number\":\"1\"}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(34);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<StandardLocation> linkedList0 = new LinkedList<StandardLocation>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"a string\",\"size\":\"Large\",\"null\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"istoLowerCase\",\"x\":false,\"xx\":\"a string\"}");
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      jSONObject0.put("{\"fruit\":\"a string\",\"size\":\"Large\",\"null\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"istoLowerCase\",\"x\":false,\"xx\":\"a string\"}", (Collection<?>) linkedList0);
      try { 
        jSONObject0.getBigInteger("{\"fruit\":\"a string\",\"size\":\"Large\",\"null\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"istoLowerCase\",\"x\":false,\"xx\":\"a string\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000085] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(786);
      jSONObject0.putOnce("{}", charArrayWriter0);
      CharArrayWriter charArrayWriter1 = (CharArrayWriter)jSONObject0.remove("{}");
      assertEquals(0, charArrayWriter1.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"#\":\"a string\"}");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query(jSONPointer0);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(34);
      Object object0 = jSONObject0.query("");
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("{\"x\":\"hello\",\"y\":{},\"org.json.JSONObject$1\":\"a string\",\"a\":[],\"b\":{}}", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"size\":\"Large\",\"color\":99,\"] could not be converted to BigInteger.\":true,\"value2\":false,\"number\":\"a string\"}");
      JSONPointer jSONPointer0 = new JSONPointer("#/");
      jSONObject0.optQuery(jSONPointer0);
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONPointer jSONPointer0 = new JSONPointer("");
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery(jSONPointer0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery("");
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      Number number0 = jSONObject0.optNumber("o4f(($HRW ", (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = jSONObject0.optNumber("y^pSw(C$5U`he?2FH39", (Number) bigInteger0);
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal(506.0);
      Number number0 = jSONObject0.optNumber("Expected a ',' or '}'", (Number) bigDecimal0);
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<DocumentationTool.Location, Byte> hashMap0 = new HashMap<DocumentationTool.Location, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      long long0 = jSONObject0.optLong("] could not be converted to BigDecimal.", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":99,\"value\":true,\"value2\":false,\"number\":\"1\"}");
      int int0 = jSONObject0.optInt("ap~Gk4-:M^Tva", (-1842265229));
      assertEquals(6, jSONObject0.length());
      assertEquals((-1842265229), int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("!@q(d_C_XJ\"pau", 483.839F);
      int int0 = jSONObject0.optInt("!@q(d_C_XJ\"pau");
      assertEquals(483, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Null pointer", (-877.9811F));
      int int0 = jSONObject1.optInt("Null pointer");
      assertEquals((-877), int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat("UlC(64?E`I$K4-Z5", (float) 0L);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":99,\"value\":true,\"value2\":false,\"number\":\"1\"}");
      jSONObject0.optDouble("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":99,\"value\":true,\"value2\":false,\"number\":\"1\"}", 0.0);
      assertEquals(6, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":\"a string\",\"b\":{}}", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = jSONObject0.optBigInteger("9]XQZV:8FZ)OvE", (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<MockFileReader, Integer> hashMap0 = new HashMap<MockFileReader, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONObject0.optBigInteger("?R{S(E@;)fz]]H", bigInteger0);
      assertEquals((byte)0, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("isO", bigInteger0);
      assertEquals((short)10, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal((String) null, (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("gettoString", bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.append("", (Object) null);
      JSONArray jSONArray0 = (JSONArray)jSONObject1.opt("");
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      jSONObject0.put("java.lang.Object@0000000003", (int) (byte) (-102));
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.append("-0", (Object) null);
      boolean boolean0 = jSONObject1.isNull("-0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("to");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("istryLock", 0.0);
      double double0 = jSONObject1.getDouble("istryLock");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, "{\"Unable to write JSONObject value for key: \":{\"JSON does not allow non-finite numbers.\":99},\"JSON does not allow non-finite numbers.\":\"a string\"}", 10, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Byte byte0 = new Byte((byte)105);
      JSONObject jSONObject0 = new JSONObject(byte0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0, (int) (byte) (-17), 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<PipedOutputStream, Dialog.ModalityType> hashMap0 = new HashMap<PipedOutputStream, Dialog.ModalityType>();
      JSONObject jSONObject1 = jSONObject0.put("X.TS", (Map<?, ?>) hashMap0);
      JSONObject jSONObject2 = jSONObject1.increment("Error reading value at index position ");
      MockFileWriter mockFileWriter0 = new MockFileWriter("rWV\"", true);
      // Undeclared exception!
      jSONObject2.write((Writer) mockFileWriter0, (int) (byte)126, 4712);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, (-920), 105);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<JTable.PrintMode, BufferedWriter> hashMap0 = new HashMap<JTable.PrintMode, BufferedWriter>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Long long0 = new Long((-99L));
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      LinkedList<Window.Type> linkedList0 = new LinkedList<Window.Type>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 4017);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"istoString\",\"is\":\"a string\",\"color\":99,\"value\":true,\"value2\":false}");
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 92);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        jSONObject0.append(stringArray0[0], (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener(".");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\"}", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\"}, locale fr_FR
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("sz3x5^U.WIH0Ga8c", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(pipedOutputStream0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-55));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -55
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Character.UnicodeScript, Proxy.Type> hashMap0 = new HashMap<Character.UnicodeScript, Proxy.Type>();
      JSONObject jSONObject1 = jSONObject0.put("isO", (Map<?, ?>) hashMap0);
      jSONObject0.increment("bj4ZrEsBT]0");
      MockFileWriter mockFileWriter0 = new MockFileWriter("isintValue", true);
      Writer writer0 = jSONObject1.write((Writer) mockFileWriter0, (-2536), (-5387));
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      Writer writer0 = jSONObject0.write((Writer) pipedWriter0, (-124), (-1437));
      assertSame(writer0, pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.putOpt("1.0", hashMap0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.write((Writer) charArrayWriter0, 43, 2);
      assertEquals(37, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("isintValue", (Map<?, ?>) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject1.write((Writer) charArrayWriter0, (-5387), (-5387));
      assertEquals(36, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("flo");
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockFileWriter0);
      assertNotNull(jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("lon");
      Object object0 = JSONObject.wrap(stringReader0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Integer integer0 = Integer.getInteger("1.0", (int) 'Y');
      Object object0 = JSONObject.wrap(integer0);
      assertEquals(89, object0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-100));
      Object object0 = JSONObject.wrap(byte0);
      assertEquals((byte) (-100), object0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object object0 = JSONObject.wrap("{\"fruit\":[],\"size\":{},color\":\"~1\",\"value\":null,\"value2\":\"a string\",\"org.jon.JONPointer\":\"1\",\"to\":false,\"xx\":\"a string\"}");
      assertEquals("{\"fruit\":[],\"size\":{},color\":\"~1\",\"value\":null,\"value2\":\"a string\",\"org.jon.JONPointer\":\"1\",\"to\":false,\"xx\":\"a string\"}", object0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedList<StandardLocation> linkedList0 = new LinkedList<StandardLocation>();
      StandardLocation standardLocation0 = StandardLocation.NATIVE_HEADER_OUTPUT;
      linkedList0.add(standardLocation0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<Thread.State> linkedList0 = new LinkedList<Thread.State>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.put(1110, Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      JSONObject.testValidity(locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<ClientInfoStatus> linkedList0 = new LinkedList<ClientInfoStatus>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.put(Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Double double0 = new Double(1279.04);
      JSONObject.testValidity(double0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject.testValidity(float0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("99");
      assertEquals(99, object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("Stepping back two steps is not supported");
      assertEquals("Stepping back two steps is not supported", object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("null");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("false");
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("true");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.quote("e{8!^\"^];5*E", (Writer) charArrayWriter0);
      assertEquals(15, charArrayWriter0.size());
      assertEquals("\"e{8!^\\\"^];5*E\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.quote("SB!ITTE|'/$@<WE", (Writer) charArrayWriter0);
      assertEquals(18, charArrayWriter0.size());
      assertEquals("\"SB!ITTE|'/$@<WE\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.quote("", (Writer) charArrayWriter0);
      assertEquals(2, charArrayWriter0.size());
      assertEquals("\"\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("LJ5 HvhsK} pY/7/f", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote((String) null, (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("k,6y5B'v!,[~B`[-d", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, "$+3<$~L+y");
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedInputStream pipedInputStream0 = new PipedInputStream(18);
      JSONObject jSONObject1 = jSONObject0.put("(Vf`%_JS1", (Object) pipedInputStream0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) "q:)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<KeyRep.Type, Integer> hashMap0 = new HashMap<KeyRep.Type, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("{\"] is not a JSONObject.\":-99,\"] is not an enum of type \":-99,\"Illegal escape.\":[\"a string\"]}", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<WebParam.Mode, KeyRep.Type> hashMap0 = new HashMap<WebParam.Mode, KeyRep.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("].", (Map<?, ?>) hashMap0);
      String string0 = jSONObject0.optString("].", "is");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("1.0", "1.0");
      Byte byte0 = new Byte((byte) (-100));
      Number number0 = jSONObject0.optNumber("1.0", (Number) byte0);
      assertEquals(1.0, number0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("1.0", hashMap0);
      Integer integer0 = Integer.getInteger("1.0", (int) 'Y');
      Number number0 = jSONObject0.optNumber("1.0", (Number) integer0);
      assertEquals(89, number0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"x\":false,\"getDeclaringClass\":false,\"java.lang.Float@0000000003.\":\"~1\",\"number\":\"a string\",\"value\":null,\"value2\":\"a string\"}");
      BigDecimal bigDecimal0 = new BigDecimal((-156));
      jSONObject0.optNumber(":XY5/S", (Number) bigDecimal0);
      assertEquals(7, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("javax.");
      long long0 = jSONObject1.optLong("javax.", 0L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<WebParam.Mode, KeyRep.Type> hashMap0 = new HashMap<WebParam.Mode, KeyRep.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("].", (Map<?, ?>) hashMap0);
      long long0 = jSONObject1.optLong("].", (long) 125);
      assertEquals(125L, long0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":{},\"color\":99,\"value\":true,\"value2\":false,\"is\":null}");
      long long0 = jSONObject0.optLong("{\"fruit\":\"Apple\",\"size\":{},\"color\":99,\"value\":true,\"value2\":false,\"is\":null}", (-1902L));
      assertEquals((-1902L), long0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "-2128.521");
      int int0 = jSONObject0.optInt("-2128.521", 0);
      assertEquals(2, jSONObject0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat("2or$4(-J.=1", (-614.9378F));
      assertEquals((-614.9378F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":99,\"value\":true,\"value2\":false,\"number\":\"1\"}");
      jSONObject0.optDouble("Expected '", (-2461.0));
      assertEquals(6, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("q:)", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("isintValue");
      Class<JDBCType> class0 = JDBCType.class;
      JDBCType jDBCType0 = JDBCType.INTEGER;
      JDBCType jDBCType1 = jSONObject1.optEnum(class0, "isintValue", jDBCType0);
      assertEquals(JDBCType.INTEGER, jDBCType1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"getlength\",\"size\":{},\"color\":99,\"] could not convert to BigDecimal.\":true,\"value2\":[],\"is\":-99}");
      Class<JDBCType> class0 = JDBCType.class;
      JDBCType jDBCType0 = JDBCType.TIMESTAMP_WITH_TIMEZONE;
      JDBCType jDBCType1 = jSONObject0.optEnum(class0, "{\"fruit\":\"getlength\",\"size\":{},\"color\":99,\"] could not convert to BigDecimal.\":true,\"value2\":[],\"is\":-99}", jDBCType0);
      assertEquals(JDBCType.TIMESTAMP_WITH_TIMEZONE, jDBCType1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{\"fruit\":\"Apple\",\"size\":\"a string\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\",\"].\":[]}");
      jSONObject0.opt("{\"fruit\":\"Apple\",\"size\":\"a string\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\",\"].\":[]}");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Double double0 = new Double(0.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject0.isEmpty());
      
      jSONObject0.putOpt("1.0", hashMap0);
      boolean boolean0 = jSONObject0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("javax.");
      try { 
        jSONObject1.getBoolean("javax.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("q:)", 1551);
      Object object0 = jSONObject0.get("q:)");
      assertEquals(1551, object0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("(!5)H44AMa)B Gnj@9p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Proxy.Type, GroupLayout.Alignment> hashMap0 = new HashMap<Proxy.Type, GroupLayout.Alignment>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      Class<DropMode> class0 = DropMode.class;
      jSONObject0.optEnum(class0, ".e6Y`xm.zT=eirufU");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<KeyRep.Type, Integer> hashMap0 = new HashMap<KeyRep.Type, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<String> set0 = jSONObject0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("Expected a ',' or '}'");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":[],\"size\":{},\"color\":\"~1\",\"value\":null,\"value2\":\"a string\",\"org.json.JSONPointer\":\"1\",\"to\":false,\"xx\":\"a string\"}");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(8, map0.size());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("1.0", hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JSONObject jSONObject0 = new JSONObject(locale0);
      jSONObject0.toString(61);
      assertEquals(14, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedList<StandardLocation> linkedList0 = new LinkedList<StandardLocation>();
      StandardLocation standardLocation0 = StandardLocation.NATIVE_HEADER_OUTPUT;
      linkedList0.add(standardLocation0);
      String string0 = JSONObject.valueToString(linkedList0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockFile mockFile0 = new MockFile("{\"fruit\":false,\"size\":\"Large\",\"color\":\"Red\",\"val [\":\"a string\",\"value2\":false,\"number\":null}", "{\"fruit\":false,\"size\":\"Large\",\"color\":\"Red\",\"val [\":\"a string\",\"value2\":false,\"number\":null}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Writer writer0 = JSONObject.writeValue(mockPrintWriter0, (Object) null, 34, 34);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(2617.285219269418);
      Object object0 = JSONObject.wrap(bigDecimal0);
      assertSame(object0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Object object0 = JSONObject.wrap(bigInteger0);
      assertSame(bigInteger0, object0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Double double0 = new Double(4616.133440251369);
      Object object0 = JSONObject.wrap(double0);
      assertEquals(4616.133440251369, object0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Float float0 = new Float((-620.3153F));
      Object object0 = JSONObject.wrap(float0);
      assertEquals((-620.3153F), object0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Long long0 = new Long(0L);
      Object object0 = JSONObject.wrap(long0);
      assertEquals(0L, object0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Short short0 = new Short((short)10);
      Object object0 = JSONObject.wrap(short0);
      assertEquals((short)10, object0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Double double0 = new Double((-2128.521));
      JSONObject jSONObject0 = new JSONObject(double0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.add(jSONObject0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<StandardProtocolFamily> linkedList0 = new LinkedList<StandardProtocolFamily>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put(")", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("!@q(d_C_XJ\"pau", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("004");
      assertEquals("004", object0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("0.00");
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("-_}SdI.<3x>ph!&s");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-0");
      assertEquals(-0.0, object0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("9]XQZV:8FZ)OvE");
      assertEquals("9]XQZV:8FZ)OvE", object0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("getDeclaringClass");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.append("-0", (Object) null);
      boolean boolean0 = jSONObject0.similar(jSONObject1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) "-0");
      boolean boolean0 = jSONObject0.similar(jSONObject1);
      assertEquals(2, jSONObject1.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.similar("n~YF");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = JSONObject.quote("] {EN{z+C0/o6X");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = JSONObject.quote("\r");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBigDecimal("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Month> class0 = Month.class;
      try { 
        jSONObject0.getEnum(class0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("iskeys", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("1.0", hashMap0);
      try { 
        jSONObject0.putOnce("1.0", hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"1.0\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "!@q(d_C_XJ\"pau";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("OCC:9><PxUe]>LGoN1", true);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("Hh2^~oGp", false);
      jSONObject0.write((Writer) mockFileWriter0, 43, 3);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("{\"fruit\":[],\"size\":{},color\":\"~1\",\"value\":null,\"value2\":\"a string\",\"org.jon.JONPointer\":\"1\",\"to\":false,\"xx\":\"a string\"}");
      String string0 = jSONObject1.optString("{\"fruit\":[],\"size\":{},color\":\"~1\",\"value\":null,\"value2\":\"a string\",\"org.jon.JONPointer\":\"1\",\"to\":false,\"xx\":\"a string\"}");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("!@q(d_C_XJ\"pau", (double) 4030L);
      JSONObject jSONObject2 = jSONObject1.accumulate("!@q(d_C_XJ\"pau", "!@q(d_C_XJ\"pau");
      Number number0 = jSONObject2.optNumber("!@q(d_C_XJ\"pau");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("0.00");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Number number0 = jSONObject1.optNumber("0.00", (Number) bigDecimal0);
      assertEquals(1, number0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "Null uey.");
      jSONObject1.optNumber("");
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("javax.");
      long long0 = jSONObject1.optLong("javax.");
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("OCC:9><PxUe]>LGoN1", false);
      long long0 = jSONObject0.optLong("OCC:9><PxUe]>LGoN1");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":[],\"size\":{},\"color\":\"~1\",\"value\":null,\"value2\":\"a string\",\"org.json.JSONPointer\":\"1\",\"x\":false}");
      jSONObject0.optJSONObject("{\"fruit\":[],\"size\":{},\"color\":\"~1\",\"value\":null,\"value2\":\"a string\",\"org.json.JSONPointer\":\"1\",\"x\":false}");
      assertEquals(7, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray(" line ");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      jSONObject0.accumulate("!@q(d_C_XJ\"pau", roundingMode0);
      int int0 = jSONObject0.optInt("!@q(d_C_XJ\"pau", 2);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("javax.");
      int int0 = jSONObject0.optInt("javax.", (-1348));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("1.0", hashMap0);
      float float0 = jSONObject1.optFloat("1.0", 1177.5638F);
      assertEquals(1177.5638F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("1.0", "1.0");
      float float0 = jSONObject1.optFloat("1.0", 1177.5638F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("0.00");
      double double0 = jSONObject0.optDouble("0.00", 0.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"Unable to write JSONObject value for key: \":{\"java.lang.Float@00000000040\":true},\"].\":null}");
      JSONObject jSONObject1 = jSONObject0.put("{\"Unable to write JSONObject value for key: \":{\"java.lang.Float@00000000040\":true},\"].\":null}", false);
      double double0 = jSONObject1.optDouble("{\"Unable to write JSONObject value for key: \":{\"java.lang.Float@00000000040\":true},\"].\":null}", 3079.0);
      assertEquals(3, jSONObject0.length());
      assertEquals(3079.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(".2OB7Dv1\"W4/", 1950L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONObject1.optBigInteger(".2OB7Dv1\"W4/", bigInteger0);
      assertEquals((short)1950, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{\"fruit\":{},\"size\":{},\"color\":99,\"\t\":true,\"JSONObject[\":false,\"is\":-99}");
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.optBigInteger("{\"fruit\":{},\"size\":{},\"color\":99,\"\t\":true,\"JSONObject[\":false,\"is\":-99}", bigInteger0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("isO", (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("isO", bigInteger0);
      assertEquals((byte)0, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("}Y _1", hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal((-99L));
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("}Y _1", bigDecimal0);
      assertEquals((byte) (-99), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONObject0.optBigDecimal("_~'G?c16_]^b#b!&", bigDecimal0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"le\":fxlse,\"x\":tue}");
      jSONObject0.increment("{\"le\":fxlse,\"x\":tue}");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject0.optBigDecimal("{\"le\":fxlse,\"x\":tue}", bigDecimal0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("has", false);
      boolean boolean0 = jSONObject0.optBoolean("has");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Short short0 = new Short((short)369);
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("isO", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.increment("isO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000008].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(34);
      Long long0 = new Long(34);
      JSONObject jSONObject1 = jSONObject0.accumulate("+z_.)A$[Wk4", long0);
      JSONObject jSONObject2 = jSONObject1.increment("+z_.)A$[Wk4");
      assertSame(jSONObject2, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("javax.");
      JSONObject jSONObject2 = jSONObject1.increment("javax.");
      assertSame(jSONObject1, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("!@q(d_C_XJ\"pau", 1526.16548691);
      JSONObject jSONObject1 = jSONObject0.increment("!@q(d_C_XJ\"pau");
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("!@q(d_C_XJ\"pau", 1526.16548691);
      boolean boolean0 = jSONObject1.has("!@q(d_C_XJ\"pau");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("yTsVqso:t>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("8&9&3A`o ", "");
      String string0 = jSONObject1.getString("8&9&3A`o ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("$+3<$~L+y", 3204.5947F);
      try { 
        jSONObject0.getString("$+3<$~L+y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      String[] stringArray0 = JSONObject.getNames((Object) pipedReader0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("0.00");
      long long0 = jSONObject0.getLong("0.00");
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("is", false);
      try { 
        jSONObject0.getLong("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("isO", (Map<?, ?>) hashMap0);
      JSONObject jSONObject2 = jSONObject0.getJSONObject("isO");
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"Unable to write JSONObject value for key: \":{}}");
      jSONObject0.put("{\"Unable to write JSONObject value for key: \":{}}", false);
      try { 
        jSONObject0.getJSONObject("{\"Unable to write JSONObject value for key: \":{}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000014] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.append("0.00", linkedList0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("0.00");
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("1.0", "1.0");
      try { 
        jSONObject0.getJSONArray("1.0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("to");
      int int0 = jSONObject0.getInt("to");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("1.0", hashMap0);
      try { 
        jSONObject0.getInt("1.0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("javax.");
      Number number0 = jSONObject0.getNumber("javax.");
      assertEquals(1, number0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      jSONObject0.accumulate("!@q(d_C_XJ\"pau", roundingMode0);
      try { 
        jSONObject0.getNumber("!@q(d_C_XJ\"pau");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<KeyRep.Type, Integer> hashMap0 = new HashMap<KeyRep.Type, Integer>();
      jSONObject0.put("x,92", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getFloat("x,92");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("!@q(d_C_XJ\"pau", 1526.16548691);
      assertEquals(1, jSONObject0.length());
      
      double double0 = jSONObject0.getDouble("!@q(d_C_XJ\"pau");
      assertEquals(1526.16548691, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("1.0", "1.0");
      try { 
        jSONObject1.getDouble("1.0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("q:)", 1551);
      boolean boolean0 = jSONObject0.optBoolean("q:)", false);
      assertFalse(jSONObject0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1456353802));
      assertEquals("-1.456353802E9", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-2464.08051827188));
      assertEquals("-2464.08051827188", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Map<String, Object> map0 = jSONObject0.toMap();
      jSONObject0.append("0.00", map0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      JSONObject jSONObject1 = jSONObject0.increment("IJ/*-ko{nZTz:");
      try { 
        jSONObject1.append("IJ/*-ko{nZTz:", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[IJ/*-ko{nZTz:] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      LinkedList<ClientInfoStatus> linkedList0 = new LinkedList<ClientInfoStatus>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<RoundingMode, ByteArrayInputStream> hashMap0 = new HashMap<RoundingMode, ByteArrayInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.accumulate("bf,!}egESGIn @Ue !O", jSONArray0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      HashMap<KeyRep.Type, Integer> hashMap0 = new HashMap<KeyRep.Type, Integer>();
      KeyRep.Type keyRep_Type0 = KeyRep.Type.PUBLIC;
      Integer integer0 = new Integer(116);
      hashMap0.put(keyRep_Type0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      HashMap<KeyRep.Type, Integer> hashMap0 = new HashMap<KeyRep.Type, Integer>();
      KeyRep.Type keyRep_Type0 = KeyRep.Type.SECRET;
      hashMap0.put(keyRep_Type0, (Integer) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"Unable to write JSONObject value for key: \":{\"java.lang.Float@00000000040\":false},\"].\":null5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at 94 [character 95 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"fruit\":[],\"size\":{},color\":\"~1\",\"value\":null,\"value2\":\"a string\",\"org.jon.JONPointer\":\"1\",\"to\":false,\"xx\":\"a string\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 28 [character 29 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.wrap(object0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("getClass", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write((Writer) stringWriter0);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("f^lse");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("x,92", (Map<?, ?>) hashMap0);
      jSONObject1.names();
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("len");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Yl");
      jSONObject0.keys();
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"JSONArray[\":[],\"size\":{},\"color\":\"a string\",\"value\":null,\"value2\":\"a string\",\"org.json.JSONPointer\":\"1\",\"to\":false,\"xx\":\"a string\"}");
      // Undeclared exception!
      try { 
        jSONObject0.query("{\"JSONArray[\":[],\"size\":{},\"color\":\"a string\",\"value\":null,\"value2\":\"a string\",\"org.json.JSONPointer\":\"1\",\"to\":false,\"xx\":\"a string\"}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-3273.719F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      boolean boolean0 = jSONObject0.isNull("-0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(47);
      float float0 = jSONObject0.optFloat("2");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"l\":flse,\"x\":tue}");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("len");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"le\":fxlse,\"x\":tue}");
      jSONObject0.increment("{\"le\":fxlse,\"x\":tue}");
      try { 
        jSONObject0.getBigDecimal("{\"le\":fxlse,\"x\":tue}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000025] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }
}
