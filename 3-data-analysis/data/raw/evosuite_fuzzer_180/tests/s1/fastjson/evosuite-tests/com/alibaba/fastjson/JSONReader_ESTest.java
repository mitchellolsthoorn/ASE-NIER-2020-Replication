/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 12:37:07 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONReader;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONReader_ESTest extends JSONReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader1 = new StringReader("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":false,\"value2\":false,\"number\":\"1\"}");
      Feature[] featureArray1 = new Feature[8];
      Feature feature1 = Feature.AllowComment;
      featureArray1[1] = feature1;
      featureArray1[1] = feature1;
      featureArray1[2] = featureArray1[1];
      featureArray1[3] = feature1;
      featureArray1[4] = feature1;
      featureArray1[5] = featureArray1[1];
      featureArray1[6] = featureArray1[5];
      featureArray1[7] = feature1;
      JSONReader jSONReader1 = null;
      try {
        jSONReader1 = new JSONReader(stringReader1, featureArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParserConfig parserConfig1 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("", parserConfig1);
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1);
      String string1 = jSONReader1.readString();
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory1);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":-99,\"b\":{}}", parserConfig1);
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1);
      HashMap<Method, Integer> hashMap1 = new HashMap<Method, Integer>();
      HashMap hashMap2 = (HashMap)jSONReader1.readObject((Map) hashMap1);
      assertFalse(hashMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONScanner jSONScanner1 = new JSONScanner("null", 692);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONScanner1);
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1);
      Class<Object> class1 = Object.class;
      Object object1 = jSONReader1.readObject(class1);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParserConfig parserConfig1 = new ParserConfig();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("", parserConfig1);
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1);
      Object object1 = jSONReader1.readObject();
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader1 = new StringReader("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":-99}");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader1);
      JSONReader jSONReader1 = new JSONReader(jSONReaderScanner1);
      JSONObject jSONObject1 = (JSONObject)jSONReader1.readObject();
      assertEquals(5, jSONObject1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("&99");
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1.lexer);
      Long long1 = jSONReader1.readLong();
      assertEquals(99L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray1 = new char[7];
      ParserConfig parserConfig1 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(charArray1, 1, parserConfig1, 2063);
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1);
      // Undeclared exception!
      try { 
        jSONReader1.readLong();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 1, line 1, column 2\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("-99", parserConfig1);
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1);
      Long long1 = jSONReader1.readLong();
      assertEquals((-99L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParserConfig parserConfig1 = new ParserConfig();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("", parserConfig1);
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1);
      Integer integer1 = jSONReader1.readInteger();
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("-99");
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1);
      Integer integer1 = jSONReader1.readInteger();
      assertEquals((-99), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONReader jSONReader1 = null;
      try {
        jSONReader1 = new JSONReader((DefaultJSONParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONReader", e);
      }
      
      // Undeclared exception!
      try { 
        jSONReader1.startArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("Rqe>9^H");
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1);
      // Undeclared exception!
      try { 
        jSONReader1.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2Rqe>9^H
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader1 = new StringReader(".{cvD%c");
      JSONReader jSONReader1 = new JSONReader(stringReader1);
      // Undeclared exception!
      try { 
        jSONReader1.readObject((Object) ".{cvD%c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("?$qVn");
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1.lexer);
      // Undeclared exception!
      jSONReader1.readObject((Object) defaultJSONParser1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("?$qVn");
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1);
      // Undeclared exception!
      try { 
        jSONReader1.readObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("Rqe>9^H");
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1.lexer);
      Class<Annotation> class1 = Annotation.class;
      // Undeclared exception!
      try { 
        jSONReader1.readObject(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Annotation> class1 = Annotation.class;
      JSONReader jSONReader1 = new JSONReader((DefaultJSONParser) null);
      // Undeclared exception!
      try { 
        jSONReader1.readObject(class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("Rqe>9^H");
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1.lexer);
      // Undeclared exception!
      try { 
        jSONReader1.readObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3Rqe>9^H
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONReader jSONReader1 = null;
      try {
        jSONReader1 = new JSONReader((DefaultJSONParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONReader", e);
      }
      
      // Undeclared exception!
      try { 
        jSONReader1.readObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("Rqe>9^H");
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1.lexer);
      // Undeclared exception!
      try { 
        jSONReader1.readLong();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3Rqe>9^H
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONReader jSONReader1 = null;
      try {
        jSONReader1 = new JSONReader((DefaultJSONParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONReader", e);
      }
      
      // Undeclared exception!
      try { 
        jSONReader1.readLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("D;B");
      JSONReader jSONReader1 = new JSONReader(jSONReaderScanner1);
      // Undeclared exception!
      try { 
        jSONReader1.readInteger();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader1 = new StringReader("-");
      JSONReader jSONReader1 = new JSONReader(stringReader1);
      // Undeclared exception!
      try { 
        jSONReader1.readInteger();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("");
      JSONReader jSONReader1 = new JSONReader(jSONReaderScanner1);
      jSONReader1.close();
      // Undeclared exception!
      try { 
        jSONReader1.readInteger();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONReader jSONReader1 = new JSONReader((DefaultJSONParser) null);
      Feature feature1 = Feature.InitStringFieldAsEmpty;
      // Undeclared exception!
      try { 
        jSONReader1.config(feature1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
      
      JSONReader jSONReader1 = null;
      try {
        jSONReader1 = new JSONReader(pipedReader1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONReader jSONReader1 = null;
      try {
        jSONReader1 = new JSONReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("9");
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1.lexer);
      JSONReader jSONReader2 = null;
      try {
        jSONReader2 = new JSONReader(defaultJSONParser1.lexer);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("Rqe>9^H");
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1);
      // Undeclared exception!
      try { 
        jSONReader1.endObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect }, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"fruit\":\"Apple\",\"size\":\"deserialze\",\"color\":99,\"value\":true,\"value2\":false,\"x\":\"a string\"}");
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1);
      jSONReader1.readObject((Object) defaultJSONParser1.NONE);
      assertEquals(0, defaultJSONParser1.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader1 = new StringReader("}NI");
      JSONReader jSONReader1 = new JSONReader(stringReader1);
      Class<Object> class1 = Object.class;
      Object object1 = jSONReader1.readObject(class1);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("?$qVn");
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1.lexer);
      // Undeclared exception!
      try { 
        jSONReader1.readObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3?$qVn
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("-99");
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1);
      String string1 = jSONReader1.readString();
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader1 = new StringReader("-");
      JSONReader jSONReader1 = new JSONReader(stringReader1);
      // Undeclared exception!
      try { 
        jSONReader1.readLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("&99");
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1.lexer);
      Integer integer1 = jSONReader1.readInteger();
      assertEquals(99, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader1 = new StringReader("?$qVn");
      JSONReader jSONReader1 = new JSONReader(stringReader1);
      // Undeclared exception!
      try { 
        jSONReader1.hasNext();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // context is null
         //
         verifyException("com.alibaba.fastjson.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("?$qVn");
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1);
      // Undeclared exception!
      try { 
        jSONReader1.startArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("&99");
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1);
      // Undeclared exception!
      try { 
        jSONReader1.startObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader1 = new StringReader("Sb");
      Feature[] featureArray1 = new Feature[3];
      JSONReader jSONReader1 = null;
      try {
        jSONReader1 = new JSONReader(stringReader1, featureArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONScanner jSONScanner1 = new JSONScanner("context is null", 1);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONScanner1);
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1);
      Locale locale1 = jSONReader1.getLocal();
      assertEquals("", locale1.getCountry());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("Rqe>9^H");
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1);
      // Undeclared exception!
      try { 
        jSONReader1.readObject((TypeReference<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("Rqe>9^H");
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1.lexer);
      TimeZone timeZone1 = jSONReader1.getTimzeZone();
      assertEquals("GMT", timeZone1.getID());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader1 = new StringReader("I@M<ub rXf$B0V;^");
      JSONReader jSONReader1 = new JSONReader(stringReader1);
      SimpleTimeZone simpleTimeZone1 = new SimpleTimeZone(7, "I@M<ub rXf$B0V;^");
      jSONReader1.setTimzeZone(simpleTimeZone1);
      assertEquals("java.util.SimpleTimeZone[id=I@M<ub rXf$B0V;^,offset=7,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone1.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("?$qVn");
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1.lexer);
      Feature feature1 = Feature.AllowArbitraryCommas;
      jSONReader1.config(feature1, false);
      assertEquals(1, jSONReader1.peek());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("&99");
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1);
      int int1 = jSONReader1.peek();
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("?$qVn");
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1);
      Locale locale1 = Locale.CHINESE;
      jSONReader1.setLocale(locale1);
      assertEquals("", locale1.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("Rqe>9^H");
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1);
      // Undeclared exception!
      try { 
        jSONReader1.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("Rqe>9^H");
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser1.lexer);
      // Undeclared exception!
      try { 
        jSONReader1.endArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect ], actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }
}
