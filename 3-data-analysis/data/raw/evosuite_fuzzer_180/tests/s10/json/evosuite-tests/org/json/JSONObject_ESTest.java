/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 16:10:35 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Dialog;
import java.awt.GraphicsDevice;
import java.awt.MultipleGradientPaint;
import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.Proxy;
import java.nio.charset.Charset;
import java.security.CryptoPrimitive;
import java.security.KeyRep;
import java.sql.JDBCType;
import java.sql.RowIdLifetime;
import java.text.Normalizer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle;
import javax.swing.SortOrder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("!iX-r'l{PJ~osU%");
      assertEquals("!iX-r'l{PJ~osU%", object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("8>JEP?Km<=~&<7");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("#/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [#/] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("0");
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"ishashCode\":true,\"#/\":[false],\"charValue\":7,\"Null key.\":{},\"x\":\"hello\"}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      jSONObject0.putOpt("{\"ishashCode\":true,\"#/\":[false],\"charValue\":7,\"Null key.\":{},\"x\":\"hello\"}", "{\"ishashCode\":true,\"#/\":[false],\"charValue\":7,\"Null key.\":{},\"x\":\"hello\"}");
      jSONObject0.toString(385);
      assertEquals(6, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"0.00\"V\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"b\":{\"0.00\"tru3}");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 8 [character 9 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-73);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      JSONObject.indent(bufferedWriter0, 1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<CryptoPrimitive, Proxy.Type> hashMap0 = new HashMap<CryptoPrimitive, Proxy.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{\"#/\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"zq~^$-fa)n.\":{\"#/\":false},\"x\":\"a string\"}");
      MockFile mockFile0 = new MockFile("", "{\"x\":\"gethashCode\",\"y\":7,\"z\":[],\"Duplicate key \"\":[[[null,true]]],\".\":{}}");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 1);
      try { 
        jSONObject0.write((Writer) bufferedWriter0, 9, 3313);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<ByteArrayOutputStream> linkedList0 = new LinkedList<ByteArrayOutputStream>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("{\"getDeclaringClass\":null,\"\r\":{},\"length\":\"a string\",\"\b\":{\"x\":[]}}", "{\"getDeclaringClass\":null,\"\r\":{},\"length\":\"a string\",\"\b\":{\"x\":[]}}");
      float float0 = jSONObject1.optFloat("{\"getDeclaringClass\":null,\"\r\":{},\"length\":\"a string\",\"\b\":{\"x\":[]}}");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"x\":\"hello\",\"y\":7,\"ishashCode\":\"a string\",\"a\":[],\"b\":{\"x\":true}}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      jSONObject0.putOpt("{\"x\":\"hello\",\"y\":7,\"ishashCode\":\"a string\",\"a\":[],\"b\":{\"x\":true}}", "{\"x\":\"hello\",\"y\":7,\"ishashCode\":\"a string\",\"a\":[],\"b\":{\"x\":true}}");
      try { 
        jSONObject0.getBigInteger("{\"x\":\"hello\",\"y\":7,\"ishashCode\":\"a string\",\"a\":[],\"b\":{\"x\":true}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000055] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-224.61833078279");
      assertEquals((short) (-224), number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"isnextClean\":\"a string\"}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      jSONObject0.accumulate("javax.", "javax.");
      assertEquals(2, jSONObject0.length());
      
      jSONObject0.remove("javax.");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<Dialog.ModalExclusionType> linkedList0 = new LinkedList<Dialog.ModalExclusionType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.query("/Z;~,aKgzr59|#i");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query("");
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("ax#A'1t~g}wz\"~%u", bigInteger0);
      String string0 = jSONObject1.optString("ax#A'1t~g}wz\"~%u");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery(jSONPointer0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject("[v10$ck4SsX`IF,z}", stringArray0);
      Number number0 = jSONObject0.optNumber("java.io.StringWriter@0000000003", (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal((-1903L));
      Number number0 = jSONObject0.optNumber("java.io.StringWriter@0000000026", (Number) bigDecimal0);
      assertEquals((byte) (-111), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("is", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<LineNumberReader, JDBCType> hashMap0 = new HashMap<LineNumberReader, JDBCType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      int int0 = jSONObject0.optInt("false", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":true,\"size\":{\"] is not a long.\":-99,\"x\":null},\"%s is not an array index\":99,\"value\":99,\"JSONArray initial value should be a string or collection or array.\":false,\"getClass\":[],\"is\":false}");
      double double0 = jSONObject0.optDouble("] is not an int.", (-2042.5241385));
      assertEquals(7, jSONObject0.length());
      assertEquals((-2042.5241385), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Character character0 = Character.valueOf('U');
      JSONObject jSONObject0 = new JSONObject(character0);
      jSONObject0.put("nk=<=gQD*^*4", 7L);
      double double0 = jSONObject0.optDouble("nk=<=gQD*^*4");
      assertEquals(1, jSONObject0.length());
      assertEquals(7.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{\"x\":99,\"y\":7,\"z\":true,\"a\":[],\"ishashCode\":{\"x\":tr!e}}");
      boolean boolean0 = jSONObject0.optBoolean("{\"x\":99,\"y\":7,\"z\":true,\"a\":[],\"ishashCode\":{\"x\":tr!e}}", false);
      assertFalse(boolean0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3906);
      BigInteger bigInteger0 = jSONObject0.optBigInteger("SpZ,3g{le]L_0_=", (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"getlongValue\":-99,\"x\":\"a string\"}");
      jSONObject0.optBigDecimal("false", (BigDecimal) null);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(477);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("0|$#1f]kri`04t", bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":true}}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      BigDecimal bigDecimal0 = new BigDecimal((-849));
      jSONObject0.optBigDecimal("getClass", bigDecimal0);
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("true", "true");
      Object object0 = jSONObject1.opt("true");
      assertEquals("true", object0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"getlongValue\":99,\"org.json.JSONObject$1\":\"a string\"}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      HashMap<String, BufferedInputStream> hashMap0 = new HashMap<String, BufferedInputStream>();
      JSONObject jSONObject1 = jSONObject0.put("{\"x\":\"gethashCode\",\"y\":7,\"z\":[],\"Duplicate key \"\":[[[null,true]]],\".\":{}}", (Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject1.isNull("{\"x\":\"gethashCode\",\"y\":7,\"z\":[],\"Duplicate key \"\":[[[null,true]]],\".\":{}}");
      assertEquals(36, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("tx/1ckB");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<Normalizer.Form, Desktop.Action> hashMap0 = new HashMap<Normalizer.Form, Desktop.Action>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("{\"true\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"true\":true},\"xx\":{}}", (-215));
      double double0 = jSONObject0.getDouble("{\"true\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"true\":true},\"xx\":{}}");
      assertEquals((-215.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<LineNumberReader, JDBCType> hashMap0 = new HashMap<LineNumberReader, JDBCType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("getDeclaringClass", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("W=");
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, mockFileWriter0, 12, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 13, 134);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Character character0 = Character.valueOf('U');
      JSONObject jSONObject0 = new JSONObject(character0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote("org.json.JSONTokener", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-1982L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("[v10$ck4SsX`IF,z}", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{\"x\":\"gethashCode\",\"y\":7,\"z\":[],\"Duplicate key \"\":[[[null,true]]],\".\":{}}");
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-2194.278));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{\"x\":\"gethashCode\",\"y\":7,\"z\":[],\"Duplicate key \"\":[[[null,true]]],\".\":{}}");
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.accumulate("pI(9;ZGz", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("[%B3!Xv6bo");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-323), 34);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      JSONTokener jSONTokener0 = new JSONTokener(sequenceInputStream0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("to", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name to, locale de_DE
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<CryptoPrimitive, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<CryptoPrimitive, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-1230));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1230
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<CryptoPrimitive, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<CryptoPrimitive, ProcessBuilder.Redirect.Type>();
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.KEY_WRAP;
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.INHERIT;
      hashMap0.put(cryptoPrimitive0, processBuilder_Redirect_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("JSONObject[", (Map<?, ?>) hashMap0);
      MockFile mockFile0 = new MockFile("JSONObject[", "\"osM");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      jSONObject0.write((Writer) mockFileWriter0, 34, 34);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3906);
      JSONObject jSONObject1 = jSONObject0.put("4", true);
      MockFile mockFile0 = new MockFile("", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"number\":\"1\"}");
      jSONObject0.put("ddehSM", 2167.4822F);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      // Undeclared exception!
      jSONObject1.write((Writer) mockFileWriter0, 3906, 3906);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3906);
      MockFile mockFile0 = new MockFile("", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"number\":\"1\"}");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      Writer writer0 = jSONObject0.write((Writer) mockFileWriter0, 3906, 3906);
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("");
      MockFile mockFile0 = new MockFile("XGgnF#yAz", "val");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      Writer writer0 = jSONObject1.write((Writer) mockFileWriter0, (-1181), (-1181));
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Character character0 = Character.valueOf('C');
      JSONObject jSONObject0 = new JSONObject(character0);
      HashMap<JSONArray, JDBCType> hashMap0 = new HashMap<JSONArray, JDBCType>();
      JSONObject jSONObject1 = jSONObject0.put("gettostring", (Map<?, ?>) hashMap0);
      jSONObject1.increment("true");
      File file0 = MockFile.createTempFile("v?H[L@4o1=O3", "{]-#Q--_6Kd", (File) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      jSONObject1.write((Writer) mockFileWriter0, (-2520), (-2520));
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(105);
      MockFile mockFile0 = new MockFile("org.json.JSONPointer$Builder", "org.json.JSONPointer$Builder");
      JSONObject jSONObject1 = jSONObject0.append("{\"javax.\":\"Apple\",\"size\":\"Unterminated string\",\"Null pointer\":\"Red\",\"number\":[false]}", "");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      Writer writer0 = jSONObject1.write((Writer) mockFileWriter0, 105, 105);
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\" line \":\"hello\",\"y\":99,\"null\":[null],\"a\":[],\"islongValueExact\":{\" line \":true}}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write((Writer) stringWriter0);
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"Value out of sequence.\":\"a string\"}");
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(jSONTokener0);
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("+]\u0004)Q!c`&GMX");
      Object object0 = JSONObject.wrap(boolean0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Character character0 = Character.valueOf('U');
      Object object0 = JSONObject.wrap(character0);
      assertEquals('U', object0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Integer integer0 = new Integer(10);
      Object object0 = JSONObject.wrap(integer0);
      assertEquals(10, object0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-59));
      Object object0 = JSONObject.wrap(byte0);
      assertEquals((byte) (-59), object0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.testValidity(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0");
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("2FwhgCh7}$K4AawWU]");
      assertEquals("2FwhgCh7}$K4AawWU]", object0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("le");
      assertEquals("le", object0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("null");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("false");
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("true");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject.quote("{\"] is not a JSONObject.\":true}", (Writer) charArrayWriter0);
      assertEquals(35, charArrayWriter0.size());
      assertEquals("\"{\\\"] is not a JSONObject.\\\":true}\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject.quote("V,N/j", (Writer) charArrayWriter0);
      assertEquals("\"V,N/j\"", charArrayWriter0.toString());
      assertEquals(7, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "99");
      JSONObject jSONObject1 = jSONObject0.putOpt("99", "99");
      try { 
        jSONObject1.putOnce("99", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"99\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<LineNumberReader, JDBCType> hashMap0 = new HashMap<LineNumberReader, JDBCType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOnce("] is not a JSONObject.", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Component.BaselineResizeBehavior, SortOrder> hashMap0 = new HashMap<Component.BaselineResizeBehavior, SortOrder>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, "getDeclaringClass");
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      Number number0 = jSONObject0.optNumber((String) null, (Number) bigInteger0);
      assertSame(bigInteger0, number0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("a JSON pointer should start with '/' or '#/'", (-99L));
      assertEquals((-99L), long0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"Misplaced object.\":99,\"tryLock\":7,\"ishashCode\":99,\".\":[false,true],\"b\":{\"Misplaced object.\":\"a string\"},\"is\":-99}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      jSONObject0.put("{\"Misplaced object.\":99,\"tryLock\":7,\"ishashCode\":99,\".\":[false,true],\"b\":{\"Misplaced object.\":\"a string\"},\"is\":-99}", (Collection<?>) linkedList0);
      int int0 = jSONObject0.optInt("{\"Misplaced object.\":99,\"tryLock\":7,\"ishashCode\":99,\".\":[false,true],\"b\":{\"Misplaced object.\":\"a string\"},\"is\":-99}", (-849));
      assertEquals(7, jSONObject0.length());
      assertEquals((-849), int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("{\"x\":99,\"y\":7,\"z\":true,\"a\":[],\"ishashCode\":{\"x\":tr!e}}", 31);
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      float float0 = jSONObject0.optFloat("M|:3i:U$!h", 4500.005F);
      assertEquals(1, jSONObject0.length());
      assertEquals(4500.005F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      double double0 = jSONObject0.optDouble("Y11.TN,Z", 858.0);
      assertEquals(858.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":true,\"size\":{\"] is not a long.\":-99,\"x\":null},\"%s is not an array index\":99,\"value\":99,\"JSONArray initial value should be a string or collection or array.\":false,\"getClass\":[],\"is\":false}");
      boolean boolean0 = jSONObject0.optBoolean("{\"fruit\":true,\"size\":{\"] is not a long.\":-99,\"x\":null},\"%s is not an array index\":99,\"value\":99,\"JSONArray initial value should be a string or collection or array.\":false,\"getClass\":[],\"is\":false}", true);
      assertTrue(boolean0);
      assertEquals(7, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "false");
      GraphicsDevice.WindowTranslucency graphicsDevice_WindowTranslucency0 = GraphicsDevice.WindowTranslucency.PERPIXEL_TRANSPARENT;
      Class<GraphicsDevice.WindowTranslucency> class0 = GraphicsDevice.WindowTranslucency.class;
      jSONObject0.optEnum(class0, "false", graphicsDevice_WindowTranslucency0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("true");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\" line \":\"hello\",\"y\":99,\"null\":[null],\"a\":[],\"0\":\"a string\"}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      jSONObject0.opt((String) null);
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<CryptoPrimitive, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<CryptoPrimitive, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.increment("Expected a ',' or '}'");
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject((Object) "Expected a ',' or '}'");
      Long long0 = new Long(8L);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      Object object0 = JSONObject.wrap(pipedWriter0);
      String[] stringArray0 = new String[2];
      JSONObject jSONObject3 = new JSONObject("gettfString", stringArray0);
      String string0 = JSONObject.numberToString(long0);
      assertFalse(string0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      String string0 = JSONObject.numberToString(bigDecimal0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<JSONObject, Dialog.ModalityType> hashMap0 = new HashMap<JSONObject, Dialog.ModalityType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Character character0 = Character.valueOf('U');
      JSONObject jSONObject0 = new JSONObject(character0);
      JSONObject jSONObject1 = jSONObject0.increment("gettoString");
      boolean boolean0 = jSONObject1.isEmpty();
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("{\"true\":true,\"int\":false,\"\r\":{},\"x\":99}", "{\"true\":true,\"int\":false,\"\r\":{},\"x\":99}");
      try { 
        jSONObject0.getBoolean("{\"true\":true,\"int\":false,\"\r\":{},\"x\":99}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Character character0 = Character.valueOf('S');
      JSONObject jSONObject0 = new JSONObject(character0);
      JSONObject jSONObject1 = jSONObject0.increment("gettoString");
      try { 
        jSONObject1.getBoolean("gettoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("\"a string\"", "\"a string\"");
      Object object0 = jSONObject1.get("\"a string\"");
      assertEquals("\"a string\"", object0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "8>PEP?m<=g~j&<7");
      try { 
        jSONObject0.get("8>PEP?m<=g~j&<7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000019] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "99");
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "-99");
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      jSONObject0.optEnum(class0, "-99");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = JSONObject.quote("4");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<LineNumberReader, JDBCType> hashMap0 = new HashMap<LineNumberReader, JDBCType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Component.BaselineResizeBehavior, Character> hashMap0 = new HashMap<Component.BaselineResizeBehavior, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = jSONObject0.remove("nskqQ1JeC");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "H");
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"istoCharArray\":true,\"size\":{\"] is not a long.\":-99},\"color\":null,\"value\":-99,\"JSONArray initial value should be a string or collection or array.\":\"a string\",\"getClass\":[]}");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "{\"] is not an enum of type \":\"a string\"}");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("{\"] is not an enum of type \":\"a string\"}", stringArray0);
      jSONObject0.toString(30);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.indent(pipedWriter0, 2077);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedList<MockFileReader> linkedList0 = new LinkedList<MockFileReader>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("|v[ZyEJ>;+xPY6u", linkedList0);
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<CryptoPrimitive, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<CryptoPrimitive, ProcessBuilder.Redirect.Type>();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(100);
      JSONObject.writeValue(charArrayWriter0, hashMap0, (-660), (-15));
      assertEquals(2, charArrayWriter0.size());
      assertEquals("{}", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.writeValue(pipedWriter0, pipedWriter0, (-14), 2490);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JSONObject.writeValue(stringWriter0, (Object) null, 790, 0);
      assertEquals("null", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = (BigInteger)JSONObject.wrap(bigInteger0);
      assertEquals((byte)0, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Double double0 = new Double(1.0);
      Object object0 = JSONObject.wrap(double0);
      assertEquals(1.0, object0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Float float0 = new Float(815.7303915);
      Object object0 = JSONObject.wrap(float0);
      assertEquals(815.7304F, object0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Long long0 = new Long(0L);
      Object object0 = JSONObject.wrap(long0);
      assertEquals(0L, object0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Short short0 = new Short((short) (-2402));
      Object object0 = JSONObject.wrap(short0);
      assertEquals((short) (-2402), object0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LinkedList<RowIdLifetime> linkedList0 = new LinkedList<RowIdLifetime>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = (JSONArray)JSONObject.wrap(jSONArray0);
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "true");
      Set<String> set0 = jSONObject0.keySet();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(2, jSONArray0.length());
      assertNotNull(jSONArray1);
      assertEquals(2, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<String> set0 = jSONObject0.keySet();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      jSONArray0.put(47, 0.0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "false");
      jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Character character0 = Character.valueOf('U');
      JSONObject jSONObject0 = new JSONObject(character0);
      try { 
        jSONObject0.put("QOy[t:-/u\"", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.writeValue((Writer) null, double0, 107, 107);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-2011.5845958");
      assertEquals((-2011.5845958), object0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("99");
      assertEquals(99, number0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-2011.5845958");
      assertEquals((-2011.5845958), number0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      try { 
        JSONObject.stringToNumber(".");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [.] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("-0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("getfloatValue");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{\"x\":\"gethashCoie\",\"y\":7,\"z\":[],\"Duplicate key \"\":[[[null,true]]],\".\":{}}");
      JSONObject jSONObject1 = new JSONObject((Object) "u-4NWZ)9bV");
      boolean boolean0 = jSONObject0.similar(jSONObject1);
      assertEquals(2, jSONObject1.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<Component.BaselineResizeBehavior, SortOrder> hashMap0 = new HashMap<Component.BaselineResizeBehavior, SortOrder>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.similar(hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{\"x\":\"gethashCoie\",\"y\":7,\"z\":[],\"Duplicate key \"\":[[[null,true]]],\".\":{}}");
      boolean boolean0 = jSONObject0.similar(jSONObject0);
      assertTrue(boolean0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBigDecimal("`-=nZ3V/g`</tE$]YI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("9N{}g]ny:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("J=/c{rA`Y0}<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getFloat("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":true,\"toU\":{\"] is not a long.\":-99,\"x\":null},\"%s is not an array index\":99,\"value\":99,\"JSONArray initial value should be a string or collection or array.\":false,\"getClass\":[],\"0000\":{},\"x\":[]}");
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000084] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote((String) null, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "-99");
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Character character0 = Character.valueOf('U');
      JSONObject jSONObject0 = new JSONObject(character0);
      JSONObject jSONObject1 = jSONObject0.increment("gettoString");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "gettoString";
      stringArray0[1] = "gettoString";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOnce("?HTS6~$|$6@/WL", "?HTS6~$|$6@/WL");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{\"x\":\"gethashCode\",\"y\":7,\"z\":[],\"Duplicate key \"\":[[[null,true]]],\".\":{}}");
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{\"x\":\"gethashCode\",\"y\":7,\"z\":[],\"Duplicate key \"\":[[[null,true]]],\".\":{}}");
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Character character0 = Character.valueOf('U');
      JSONObject jSONObject0 = new JSONObject(character0);
      jSONObject0.increment("gettoString");
      jSONObject0.optString("gettoString", "java.io.StringWriter@0000000027");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"x\":99,\"y\":7,\"z\":true,\"a\":[],\"ishashCode\":{\"x\":tr!e}}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      jSONObject0.putOpt("{\"x\":99,\"y\":7,\"z\":true,\"a\":[],\"ishashCode\":{\"x\":tr!e}}", jSONTokener0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.optNumber("{\"x\":99,\"y\":7,\"z\":true,\"a\":[],\"ishashCode\":{\"x\":tr!e}}", (Number) bigInteger0);
      assertEquals(6, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("pointer cannot be null");
      MockRandom mockRandom0 = new MockRandom(135);
      BigInteger bigInteger0 = new BigInteger(135, 135, mockRandom0);
      Number number0 = jSONObject1.optNumber("pointer cannot be null", (Number) bigInteger0);
      assertEquals(1, number0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{\"x\":\"gethashCode\",\"y\":7,\"z\":[],\"Duplicate key \"\":[[[null,true]]],\".\":{}}");
      JSONObject jSONObject1 = jSONObject0.putOpt("{\"x\":\"gethashCode\",\"y\":7,\"z\":[],\"Duplicate key \"\":[[[null,true]]],\".\":{}}", "{\"x\":\"gethashCode\",\"y\":7,\"z\":[],\"Duplicate key \"\":[[[null,true]]],\".\":{}}");
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject1.optNumber("{\"x\":\"gethashCode\",\"y\":7,\"z\":[],\"Duplicate key \"\":[[[null,true]]],\".\":{}}", (Number) bigInteger0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{\".\":99,\"\r\":-99,\"Unable to write JSONArray value at index: \":-99}");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      jSONObject0.putOpt("{\".\":99,\"\r\":-99,\"Unable to write JSONArray value at index: \":-99}", locale_FilteringMode0);
      jSONObject0.optLong("{\".\":99,\"\r\":-99,\"Unable to write JSONArray value at index: \":-99}", (-1L));
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Character character0 = Character.valueOf('U');
      JSONObject jSONObject0 = new JSONObject(character0);
      jSONObject0.increment("gettfString");
      long long0 = jSONObject0.optLong("gettfString");
      assertEquals(1, jSONObject0.length());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{\"x\":\"gethashCode\",\"y\":7,\"z\":[],\"Duplicate key \"\":[[[null,true]]],\".\":{}}");
      JSONObject jSONObject1 = jSONObject0.putOpt("{\"x\":\"gethashCode\",\"y\":7,\"z\":[],\"Duplicate key \"\":[[[null,true]]],\".\":{}}", "{\"x\":\"gethashCode\",\"y\":7,\"z\":[],\"Duplicate key \"\":[[[null,true]]],\".\":{}}");
      jSONObject1.optLong("{\"x\":\"gethashCode\",\"y\":7,\"z\":[],\"Duplicate key \"\":[[[null,true]]],\".\":{}}", 99L);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      HashMap<String, BufferedInputStream> hashMap0 = new HashMap<String, BufferedInputStream>();
      jSONObject0.put("{\"x\":\"gethashCode\",\"y\":7,\"z\":[],\"Duplicate key \"\":[[[null,true]]],\".\":{}}", (Map<?, ?>) hashMap0);
      jSONObject0.optJSONObject("{\"x\":\"gethashCode\",\"y\":7,\"z\":[],\"Duplicate key \"\":[[[null,true]]],\".\":{}}");
      assertEquals(36, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optJSONObject("org.json.JSONArray");
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "99");
      jSONObject0.optJSONArray("99");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"Value out of sequence.\":\"a string\"}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      jSONObject0.putOpt("{\"Value out of sequence.\":\"a string\"}", "{\"Value out of sequence.\":\"a string\"}");
      int int0 = jSONObject0.optInt("{\"Value out of sequence.\":\"a string\"}", (-849));
      assertEquals(2, jSONObject0.length());
      assertEquals((-849), int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Character character0 = Character.valueOf('U');
      JSONObject jSONObject0 = new JSONObject(character0);
      JSONObject jSONObject1 = jSONObject0.increment("gettoString");
      int int0 = jSONObject1.optInt("gettoString", (-1952));
      assertEquals(1, jSONObject0.length());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"x\":99,\"y\":7,\"z\":true,\"a\":[],\"ishashCode\":{\"x\":tr!e}}");
      JSONObject jSONObject0 = new JSONObject((Object) "{\"x\":99,\"y\":7,\"z\":true,\"a\":[],\"ishashCode\":{\"x\":tr!e}}");
      JSONObject jSONObject1 = jSONObject0.putOpt("{\"x\":99,\"y\":7,\"z\":true,\"a\":[],\"ishashCode\":{\"x\":tr!e}}", jSONTokener0);
      int int0 = jSONObject1.optInt("{\"x\":99,\"y\":7,\"z\":true,\"a\":[],\"ishashCode\":{\"x\":tr!e}}");
      assertEquals(3, jSONObject0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HashMap<CryptoPrimitive, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<CryptoPrimitive, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.putOpt("JSONObject[", hashMap0);
      float float0 = jSONObject0.optFloat("JSONObject[", 0.0F);
      assertEquals(1, jSONObject0.length());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-5));
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.accumulate("", byte0);
      float float0 = jSONObject0.optFloat("", 0.0F);
      assertEquals(1, jSONObject0.length());
      assertEquals((-5.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<KeyRep.Type, ObjectInputStream> hashMap0 = new HashMap<KeyRep.Type, ObjectInputStream>();
      jSONObject0.put("f6T", (Map<?, ?>) hashMap0);
      double double0 = jSONObject0.optDouble("f6T", 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":true,\"size\":{\"] is not a long.\":-99,\"x\":null},\"%s is not an array index\":99,\"value\":99,\"JSONArray initial value should be a string or collection or array.\":false,\"getClass\":[],\"is\":false}");
      jSONObject0.increment("{\"fruit\":true,\"size\":{\"] is not a long.\":-99,\"x\":null},\"%s is not an array index\":99,\"value\":99,\"JSONArray initial value should be a string or collection or array.\":false,\"getClass\":[],\"is\":false}");
      double double0 = jSONObject0.optDouble("{\"fruit\":true,\"size\":{\"] is not a long.\":-99,\"x\":null},\"%s is not an array index\":99,\"value\":99,\"JSONArray initial value should be a string or collection or array.\":false,\"getClass\":[],\"is\":false}", 1.0);
      assertEquals(8, jSONObject0.length());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("{\"trim\":null,\"\r\":{},\"cl\":null,\"\b\":true}", "{\"trim\":null,\"\r\":{},\"cl\":null,\"\b\":true}");
      double double0 = jSONObject0.optDouble("{\"trim\":null,\"\r\":{},\"cl\":null,\"\b\":true}", 0.0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("gqpLsb7Xa=(,W+f");
      BigInteger bigInteger1 = jSONObject1.optBigInteger("gqpLsb7Xa=(,W+f", bigInteger0);
      assertEquals((byte)1, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HashMap<CryptoPrimitive, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<CryptoPrimitive, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      byte[] byteArray0 = new byte[6];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("-1963.2026437", bigInteger0);
      jSONObject1.optBigInteger("-1963.2026437", bigInteger0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      BigInteger bigInteger0 = BigInteger.valueOf((-771L));
      jSONObject0.optBigInteger("getremove", bigInteger0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HashMap<CryptoPrimitive, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<CryptoPrimitive, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.putOpt("JSONObject[", hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.optBigInteger("JSONObject[", bigInteger0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("\"a string\"", bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HashMap<CryptoPrimitive, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<CryptoPrimitive, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.put("f6T", (Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONObject0.optBigDecimal("f6T", bigDecimal0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("");
      Class<GraphicsDevice.WindowTranslucency> class0 = GraphicsDevice.WindowTranslucency.class;
      GraphicsDevice.WindowTranslucency graphicsDevice_WindowTranslucency0 = GraphicsDevice.WindowTranslucency.PERPIXEL_TRANSLUCENT;
      GraphicsDevice.WindowTranslucency graphicsDevice_WindowTranslucency1 = jSONObject0.optEnum(class0, "", graphicsDevice_WindowTranslucency0);
      assertEquals(GraphicsDevice.WindowTranslucency.PERPIXEL_TRANSLUCENT, graphicsDevice_WindowTranslucency1);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Character character0 = Character.valueOf('F');
      JSONObject jSONObject0 = new JSONObject(character0);
      JSONObject jSONObject1 = jSONObject0.increment("gettoString");
      HashMap<KeyRep.Type, ObjectInputStream> hashMap0 = new HashMap<KeyRep.Type, ObjectInputStream>();
      JSONObject jSONObject2 = jSONObject0.put("gettoString", (Object) character0);
      jSONObject2.putOpt("gettoString", (Object) null);
      JSONObject jSONObject3 = jSONObject1.put("gettoString", (Map<?, ?>) hashMap0);
      jSONObject3.increment("true");
      GroupLayout.Alignment groupLayout_Alignment0 = GroupLayout.Alignment.LEADING;
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      linkedList0.add(groupLayout_Alignment0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(1307, (float) 1307);
      String string0 = jSONArray1.join("gettoString");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONArray jSONArray0 = jSONObject1.names();
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONArray0);
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("{\"true\":null,\"int\":false,\"\r\":\"a string\",\"'\":99,\"xx\":true}", "{\"true\":null,\"int\":false,\"\r\":\"a string\",\"'\":99,\"xx\":true}");
      try { 
        jSONObject1.increment("{\"true\":null,\"int\":false,\"\r\":\"a string\",\"'\":99,\"xx\":true}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000007].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{\"x\":-99,\"y\":7,\"has\":-99,\"orgkjson.JSONOject$Null\":99,\"xx\"ztrue}");
      jSONObject0.put("{\"x\":-99,\"y\":7,\"has\":-99,\"orgkjson.JSONOject$Null\":99,\"xx\"ztrue}", 97);
      jSONObject0.increment("{\"x\":-99,\"y\":7,\"has\":-99,\"orgkjson.JSONOject$Null\":99,\"xx\"ztrue}");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("get", "get");
      boolean boolean0 = jSONObject0.has("get");
      assertFalse(jSONObject0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "H");
      JSONObject jSONObject1 = jSONObject0.putOpt("H", "H");
      jSONObject1.getString("H");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      HashMap<CryptoPrimitive, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<CryptoPrimitive, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.putOpt("JSONObject[", hashMap0);
      try { 
        jSONObject0.getString("JSONObject[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String[] stringArray0 = JSONObject.getNames((Object) pipedOutputStream0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("gqpLsb7Xa=(,W+f");
      long long0 = jSONObject1.getLong("gqpLsb7Xa=(,W+f");
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("\"a string\"", "\"a string\"");
      try { 
        jSONObject1.getLong("\"a string\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<KeyRep.Type, ObjectInputStream> hashMap0 = new HashMap<KeyRep.Type, ObjectInputStream>();
      jSONObject0.put("f6T", (Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("f6T");
      assertNotSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"x\":\"getcharValue\",\"charValue\":7,\"ishashCode\":true,\"a\":[[]],\"b\":{\"x\":true}}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      jSONObject0.putOpt("{\"x\":\"getcharValue\",\"charValue\":7,\"ishashCode\":true,\"a\":[[]],\"b\":{\"x\":true}}", "{\"x\":\"getcharValue\",\"charValue\":7,\"ishashCode\":true,\"a\":[[]],\"b\":{\"x\":true}}");
      try { 
        jSONObject0.getJSONObject("{\"x\":\"getcharValue\",\"charValue\":7,\"ishashCode\":true,\"a\":[[]],\"b\":{\"x\":true}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000055] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "[]");
      JSONObject jSONObject1 = jSONObject0.putOpt("[]", "[]");
      try { 
        jSONObject1.getJSONArray("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000016] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Character character0 = Character.valueOf('U');
      JSONObject jSONObject0 = new JSONObject(character0);
      HashMap<KeyRep.Type, ObjectInputStream> hashMap0 = new HashMap<KeyRep.Type, ObjectInputStream>();
      jSONObject0.put("gettoString", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getInt("gettoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Character character0 = Character.valueOf('U');
      JSONObject jSONObject0 = new JSONObject(character0);
      JSONObject jSONObject1 = jSONObject0.increment("gettoString");
      Number number0 = jSONObject1.getNumber("gettoString");
      assertEquals(1, jSONObject0.length());
      assertEquals(1, number0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Character character0 = new Character('U');
      JSONObject jSONObject0 = new JSONObject(character0);
      jSONObject0.increment("true");
      float float0 = jSONObject0.getFloat("true");
      assertEquals(1, jSONObject0.length());
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"toM\":\"keySet\"}");
      JSONObject jSONObject1 = jSONObject0.putOpt("\"", "{\"toM\":\"keySet\"}");
      try { 
        jSONObject1.getFloat("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000014] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("gqpLsb7Xa=(,W+f");
      double double0 = jSONObject1.getDouble("gqpLsb7Xa=(,W+f");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "99");
      jSONObject0.putOpt("99", "99");
      try { 
        jSONObject0.getDouble("99");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000016] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("{\"gettrim\":null,\"\r\":\"a string\",\"'\":99,\"xx\":-99}", "{\"gettrim\":null,\"\r\":\"a string\",\"'\":99,\"xx\":-99}");
      try { 
        jSONObject0.getBigDecimal("{\"gettrim\":null,\"\r\":\"a string\",\"'\":99,\"xx\":-99}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<GraphicsDevice.WindowTranslucency> class0 = GraphicsDevice.WindowTranslucency.class;
      jSONObject0.accumulate("{\"] is not an enum of type \":{},\"JSONArray[\":false}", class0);
      boolean boolean0 = jSONObject0.optBoolean("{\"] is not an enum of type \":{},\"JSONArray[\":false}", true);
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      HashMap<CryptoPrimitive, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<CryptoPrimitive, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Y*@=NMW.J%", false);
      boolean boolean0 = jSONObject1.getBoolean("Y*@=NMW.J%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-2011.5845958));
      assertEquals("-2011.5845958", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{\"x\":\"gethashCode\",\"y\":7,\"z\":[],\"Duplicate key \"\":[[[null,true]]],\".\":{}}");
      jSONObject0.putOpt("org.json.JSONPointer", "org.json.JSONPointer");
      try { 
        jSONObject0.append("org.json.JSONPointer", "org.json.JSONPointer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[org.json.JSONPointer] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      JSONPointer.Builder jSONPointer_Builder0 = JSONPointer.builder();
      JSONObject jSONObject1 = jSONObject0.put("Cu)J=]", (Collection<?>) set0);
      JSONObject jSONObject2 = jSONObject1.accumulate("Cu)J=]", jSONPointer_Builder0);
      assertSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.accumulate("get", jSONArray0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("{\"trim\":false,\"\r\":{},\"length\":\"a string\",\"xx\":true}", "{\"trim\":false,\"\r\":{},\"length\":\"a string\",\"xx\":true}");
      Class<GraphicsDevice.WindowTranslucency> class0 = GraphicsDevice.WindowTranslucency.class;
      JSONObject jSONObject2 = jSONObject1.accumulate("{\"trim\":false,\"\r\":{},\"length\":\"a string\",\"xx\":true}", class0);
      assertEquals(1, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      HashMap<CryptoPrimitive, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<CryptoPrimitive, ProcessBuilder.Redirect.Type>();
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.KEY_WRAP;
      hashMap0.put(cryptoPrimitive0, (ProcessBuilder.Redirect.Type) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"0\":\"a string\",\"\r\":{\"istoString\":false}V\"length\":\"a string\",\"\b\":99,\"istoString\":true}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at 18 [character 0 line 2]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"x\":\"gethashCode\",\"y\":7;\"z\":[],\"Duplicate key \"\":[R[null,true]]],\".\":{}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 49 [character 50 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.wrap(object0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(68);
      String string0 = JSONObject.valueToString(byteArrayOutputStream0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.optQuery("");
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1793);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, ObjectOutputStream> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, ObjectOutputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery(".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      HashMap<CryptoPrimitive, Proxy.Type> hashMap0 = new HashMap<CryptoPrimitive, Proxy.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{\"x\":-99,\"y\":false,\"z\":true,\".\":[],\"gettoLowerCase\":{\"x\":99,\"xx\":false}}");
      LinkedList<MockFileReader> linkedList0 = new LinkedList<MockFileReader>();
      jSONObject0.put("{\"x\":-99,\"y\":false,\"z\":true,\".\":[],\"gettoLowerCase\":{\"x\":99,\"xx\":false}}", (Collection<?>) linkedList0);
      try { 
        jSONObject0.getNumber("{\"x\":-99,\"y\":false,\"z\":true,\".\":[],\"gettoLowerCase\":{\"x\":99,\"xx\":false}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000088] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "8>PEP?m<=g~j&<7");
      Class<ProcessBuilder.Redirect.Type> class0 = ProcessBuilder.Redirect.Type.class;
      try { 
        jSONObject0.getEnum(class0, "8>PEP?m<=g~j&<7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000019] is not an enum of type java.io.StringWriter@0000000020.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(7);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      Object object0 = jSONObject0.query(jSONPointer0);
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      HashMap<CharArrayReader, ObjectInputStream> hashMap0 = new HashMap<CharArrayReader, ObjectInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.query("{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{", 62L);
      assertFalse(jSONObject0.isEmpty());
      
      int int0 = jSONObject1.getInt("{");
      assertEquals(62, int0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Map<String, Object> map0 = jSONObject0.toMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject("[v10$ck4SsX`IF,z}", stringArray0);
      boolean boolean0 = jSONObject0.optBoolean("[v10$ck4SsX`IF,z}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      boolean boolean0 = jSONObject0.isNull("{\"x\":\"gethashCode\",\"y\":7,\"z\":[],\"Duplicate key \"\":[[[null,true]]],\".\":{}}");
      assertEquals(35, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("zlo=s", 1520.0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1074);
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"gethashCode\",\"y\":7,\"z\":[],\"Duplicate key \"\":[[[null,true]]],\".\":{}}", stringArray0);
      Number number0 = jSONObject0.optNumber("O(5cXW]-");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "true");
      jSONObject0.putOpt("true", "true");
      boolean boolean0 = jSONObject0.optBoolean("true", true);
      assertEquals(3, jSONObject0.length());
      assertTrue(boolean0);
  }
}
