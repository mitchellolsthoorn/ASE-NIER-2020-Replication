/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 13:43:23 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dialog;
import java.awt.TrayIcon;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.text.Normalizer;
import java.time.DayOfWeek;
import java.util.Collection;
import java.util.Formatter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import java.util.function.BiFunction;
import javax.annotation.Resource;
import javax.smartcardio.CardTerminals;
import javax.swing.GroupLayout;
import javax.swing.SortOrder;
import javax.tools.DocumentationTool;
import javax.tools.JavaFileObject;
import jdk.net.SocketFlow;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("$}]2XQ-I'+%wg+J");
      assertEquals("$}]2XQ-I'+%wg+J", object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("+gZl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [+gZl] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("0.0");
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"fruit\":{},\"~\":\".\",\"color\":false,\"{\"fruit\":\"sho\",\"~\":\".\",\"color\":-99,\"value\":[[]],\"getBytes\":true,\"number\":\"1\",\"isisOpen\":-99,\"xx\":-99,\"xxx\":99}\":[],\"value2\":false,\"number\":\"1\",\"x\":-99,\"xx\":-99}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 38 [character 39 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|2U#8U6WXf@WU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockFile mockFile0 = new MockFile("java.io.StringWriter@0000000013", "java.io.StringWriter@0000000013");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charsetEncoder0);
      JSONObject.indent(outputStreamWriter0, 13);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"org.json.JGONExc_ption\":-~,\"getentrySet\":true}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<Thread.State> linkedList0 = new LinkedList<Thread.State>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("+0gZJJ", (Object) "+0gZJJ");
      try { 
        jSONObject1.getBigInteger("+0gZJJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.Float@00000000040\":99,\"color\":true,\"value\":true,\"value2\":null,\"Unable to write JSONObject value for key: \":\"1\",\"x\":{},\"xx\":-99}");
      LinkedList<Thread.State> linkedList0 = new LinkedList<Thread.State>();
      JSONObject jSONObject1 = jSONObject0.put("{\"java.lang.Float@00000000040\":99,\"color\":true,\"value\":true,\"value2\":null,\"Unable to write JSONObject value for key: \":\"1\",\"x\":{},\"xx\":-99}", (Collection<?>) linkedList0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "{\"java.lang.Float@00000000040\":99,\"color\":true,\"value\":true,\"value2\":null,\"Unable to write JSONObject value for key: \":\"1\",\"x\":{},\"xx\":-99}";
      stringArray0[1] = "{\"java.lang.Float@00000000040\":99,\"color\":true,\"value\":true,\"value2\":null,\"Unable to write JSONObject value for key: \":\"1\",\"x\":{},\"xx\":-99}";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Map<String, Object> map0 = jSONObject0.toMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("/]M?sMy", "@1u<enbN=3dN&  SX3.");
      Object object0 = jSONObject0.remove("/]M?sMy");
      assertEquals("@1u<enbN=3dN&  SX3.", object0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("}n_");
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONObject0.query(jSONPointer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Float float0 = Float.valueOf(430.75388F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONPointer jSONPointer0 = new JSONPointer("");
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query(jSONPointer0);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.query("");
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("java.java.lang.reflect");
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(locale_Category0, stringArray0);
      Number number0 = jSONObject0.optNumber("gettoLowerCase", (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1039));
      JSONObject jSONObject0 = new JSONObject();
      Number number0 = jSONObject0.optNumber("negate", (Number) bigDecimal0);
      assertEquals((byte) (-15), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":99,\"ha\":\"Large\",\"] could not be converted to BigInteger.\":\"Red\",\"value\":true,\"by\":\"1\",\"x\":99}");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject0.optNumber("{\"fruit\":99,\"ha\":\"Large\",\"] could not be converted to BigInteger.\":\"Red\",\"value\":true,\"by\":\"1\",\"x\":99}", (Number) bigDecimal0);
      assertEquals(6, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":null,\"intValue\":\"Large\",\"color\":\"Red\",\".\":true,\"getClass\":null,\"number\":\"1\",\"x\":\"a string\",\"xx\":false}");
      jSONObject0.optLong("|yK|brP9j5_zigmvn", 0L);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(16);
      long long0 = jSONObject0.optLong("", (-139L));
      assertEquals((-139L), long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("S", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.Float@00000000040\":99,\"value\":\"a string\",\"] is not a JSONArray.\":null,\"gettryLock\":null,\"ishashCode\":99}");
      jSONObject0.put("{\"java.lang.Float@00000000040\":99,\"value\":\"a string\",\"] is not a JSONArray.\":null,\"gettryLock\":null,\"ishashCode\":99}", (-368.19852F));
      int int0 = jSONObject0.optInt("{\"java.lang.Float@00000000040\":99,\"value\":\"a string\",\"] is not a JSONArray.\":null,\"gettryLock\":null,\"ishashCode\":99}");
      assertEquals(6, jSONObject0.length());
      assertEquals((-368), int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("'", 590.0F);
      float float0 = jSONObject0.optFloat("'");
      assertEquals(590.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"getintern\",\"color\":\"-99\",\"value\":true,\"value2\":-99,\"Unable to increment [\":99,\"] is not an int.\":null,\"x\":{}}");
      double double0 = jSONObject0.optDouble("G*{%kF!CH<QWxI'%^p", (-6127.8371443243));
      assertFalse(jSONObject0.isEmpty());
      assertEquals((-6127.8371443243), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("MA?TkZNpjj8^IOL>0", 446.84F);
      double double0 = jSONObject1.optDouble("MA?TkZNpjj8^IOL>0");
      assertEquals(1, jSONObject0.length());
      assertEquals(446.8399963378906, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":-99,\"Unable to preserve stream position\":\"~\",\"color\":false,\".\":\"a string\",\"getClass\":null,\"number\":\"0\",\"-0\":\"a string\",\"xx\":false}");
      jSONObject0.optBoolean("{\"fruit\":-99,\"Unable to preserve stream position\":\"~\",\"color\":false,\".\":\"a string\",\"getClass\":null,\"number\":\"0\",\"-0\":\"a string\",\"xx\":false}", false);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-26);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONObject0.optBigInteger("*/w|OTt", bigInteger0);
      assertEquals((short) (-6656), bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Double, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Double, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("S|f-ns,+", bigInteger0);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(64);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("", bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-121);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONObject0.optBigInteger("*/w|OTt", bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal((String) null, (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("0", bigDecimal0);
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<Double, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Double, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.accumulate("99", "KT!-?9kCGY DCO\u0004Td");
      jSONObject0.opt("99");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<Double, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Double, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\"a string\"", 226.55583F);
      boolean boolean0 = jSONObject0.isNull("\"a string\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("org.json.JSONObject");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("0000");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<ByteArrayInputStream, Character> hashMap0 = new HashMap<ByteArrayInputStream, Character>();
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Character character0 = new Character('+');
      BiFunction<Object, Character, Character> biFunction0 = (BiFunction<Object, Character, Character>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(byteArrayInputStream0, character0, biFunction0);
      jSONObject0.put("] is not a valid numbe.", (Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("] is not a valid numbe.");
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Double, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Double, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("java.java.io", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "-99");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-99");
      try { 
        JSONObject.writeValue(mockPrintWriter0, jSONObject0, 1327, 105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.writeValue(pipedWriter0, pipedWriter0, 91, 91);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0, (-5416), (-5416));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2922);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 2922, 2922);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Double, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Double, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charset0);
      outputStreamWriter0.close();
      try { 
        jSONObject0.write((Writer) outputStreamWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stream closed
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Float float0 = Float.valueOf(Float.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{\"gettoUpperCase\":[true],\"isremoveFirst\":7,\"] is not a JSONArray.\":[99],\"3\":null,\"Unable to write JSONArray value at index: \":\"a string\",\"Unable to write JSONObject value for key: \":[]}");
      try { 
        jSONObject0.toString((-10384350));
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.put("384&xEaL&LAe6\"l ;\"", false);
      // Undeclared exception!
      jSONObject1.toString(1000000);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<BufferedInputStream> linkedList0 = new LinkedList<BufferedInputStream>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"org.json.JSONException\":{\"isintern\":[]},\"] is not a JSONArray.\":-99,\"Null key.\":-99,\"value [%s] is not an array or object therefore its key %s cannot be resolved\":{}}");
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-2464.9F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-526.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("org.json.JSONPointer$Builder");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 123);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.indent(pipedWriter0, 125);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, jSONObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, jSONObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("get");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-84), 3);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("to", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name to, locale fr_CA
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("J*l3", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("/]M?sMy", (-1.0F));
      StringWriter stringWriter0 = new StringWriter(0);
      jSONObject0.put("9zqY", (-1.0F));
      Writer writer0 = jSONObject0.write((Writer) stringWriter0, 0, 10);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<Double, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Double, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charset0);
      Writer writer0 = jSONObject0.write((Writer) outputStreamWriter0, 1780, 2316);
      assertSame(writer0, outputStreamWriter0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<Double, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Double, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("@1u<enbN=3dN&  SX3.", 0.0F);
      MockFile mockFile0 = new MockFile("hTRRa`sRx)Hoa;2#=", "java.io.StringWriter@0000000013");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charsetEncoder0);
      Writer writer0 = jSONObject0.write((Writer) outputStreamWriter0, 128, 2);
      assertSame(outputStreamWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Float float0 = Float.valueOf(430.75388F);
      JSONObject jSONObject0 = new JSONObject(float0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      jSONObject0.write((Writer) charArrayWriter0, 2066, 2066);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("/]M?sMy", (-1.0F));
      MockFile mockFile0 = new MockFile("java.io.StringWriter@0000000013", "java.io.StringWriter@0000000013");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charsetEncoder0);
      Writer writer0 = jSONObject0.write((Writer) outputStreamWriter0, (-12473307), 102);
      assertSame(writer0, outputStreamWriter0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      Object object0 = JSONObject.wrap(bufferedInputStream0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockPrintStream0);
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<Double, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Double, ProcessBuilder.Redirect.Type>();
      Set<Double> set0 = hashMap0.keySet();
      JSONArray jSONArray0 = (JSONArray)JSONObject.wrap(set0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("java.io.StringWriter@0000000001");
      Object object0 = JSONObject.wrap(boolean0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Double double0 = new Double(0.0);
      Object object0 = JSONObject.wrap(double0);
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Integer integer0 = new Integer((-206));
      Object object0 = JSONObject.wrap(integer0);
      assertEquals((-206), object0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Byte byte0 = new Byte((byte)12);
      Object object0 = JSONObject.wrap(byte0);
      assertEquals((byte)12, object0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object object0 = JSONObject.wrap("{\"\"\":{}}");
      assertEquals("{\"\"\":{}}", object0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<SortOrder> linkedList0 = new LinkedList<SortOrder>();
      SortOrder sortOrder0 = SortOrder.UNSORTED;
      linkedList0.add(sortOrder0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Float float0 = new Float((double) (byte)40);
      JSONObject.testValidity(float0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\"a string\"", 226.55583F);
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONArray0.put(32, 0.0);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.put(Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject.testValidity("5");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0.0");
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-99");
      assertEquals((-99), object0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("null");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("false");
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("true");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote("/]M?sMy", (Writer) stringWriter0);
      assertEquals("\"/]M?sMy\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{\"fruit\":\"getintern\",\"color\":\"-99\",\"value\":true,\"value2\":-99,\"Unable to increment [\":99,\"] is not an int.\":null,\"x\":{}}");
      Writer writer0 = JSONObject.quote("{\"fruit\":\"getintern\",\"color\":\"-99\",\"value\":true,\"value2\":-99,\"Unable to increment [\":99,\"] is not an int.\":null,\"x\":{}}", (Writer) mockPrintWriter0);
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote("", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("isisNaN", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote((String) null, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"getMethods\":0.0,\"istoMap\":null,\"x\":99,\"xx\":{},\"pofym\":false}");
      JSONObject jSONObject1 = jSONObject0.putOnce("{\"getMethods\":0.0,\"istoMap\":null,\"x\":99,\"xx\":{},\"pofym\":false}", (Object) null);
      assertEquals(5, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, charArrayReader0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-26));
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"3\":-99}");
      jSONObject0.put("5O7TOp0f&]x&_Rg+0xP", false);
      jSONObject0.optString("5O7TOp0f&]x&_Rg+0xP", "java.io.StringWriter@0000000091");
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":-99}");
      BigDecimal bigDecimal0 = new BigDecimal(363);
      jSONObject0.optNumber("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":-99}", (Number) bigDecimal0);
      assertEquals(7, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"Bad value from toJSONString: \":false}");
      jSONObject0.put("{\"Bad value from toJSONString: \":false}", (float) 297L);
      long long0 = jSONObject0.optLong("{\"Bad value from toJSONString: \":false}", 297L);
      assertEquals(2, jSONObject0.length());
      assertEquals(297L, long0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"org.json.JSONException\":-1}");
      HashMap<Long, DayOfWeek> hashMap0 = new HashMap<Long, DayOfWeek>();
      jSONObject0.put("{\"org.json.JSONException\":-1}", (Map<?, ?>) hashMap0);
      int int0 = jSONObject0.optInt("{\"org.json.JSONException\":-1}", (-40784180));
      assertEquals(2, jSONObject0.length());
      assertEquals((-40784180), int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"Bad value from toJSONString: \":false}");
      jSONObject0.put("{\"Bad value from toJSONString: \":false}", (float) 297L);
      int int0 = jSONObject0.optInt("{\"Bad value from toJSONString: \":false}", (-40784180));
      assertEquals(2, jSONObject0.length());
      assertEquals(297, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"sho\",\"~\":99,\"] could not be converted to BigInteger.\":false,\"value\":[],\"value2\":false,\"number\":\"1\",\"x\":-99,\"xx\":-99}");
      JSONObject jSONObject1 = jSONObject0.put("{\"fruit\":\"sho\",\"~\":99,\"] could not be converted to BigInteger.\":false,\"value\":[],\"value2\":false,\"number\":\"1\",\"x\":-99,\"xx\":-99}", false);
      jSONObject1.optFloat("{\"fruit\":\"sho\",\"~\":99,\"] could not be converted to BigInteger.\":false,\"value\":[],\"value2\":false,\"number\":\"1\",\"x\":-99,\"xx\":-99}", 1603.57F);
      assertEquals(9, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(83);
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      float float0 = jSONObject1.optFloat("", (float) (-285));
      assertFalse(jSONObject0.isEmpty());
      assertEquals((-285.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat("-8.5973447219720320", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.Float@00000000040\":99,\"value\":true,\"] is not a JSONArray.\":null,\"Unable to write JSONObject value for key: \":\"pol\",\"x\":null,\"xx\":99}");
      LinkedList<Thread.State> linkedList0 = new LinkedList<Thread.State>();
      jSONObject0.put("{\"java.lang.Float@00000000040\":99,\"value\":true,\"] is not a JSONArray.\":null,\"Unable to write JSONObject value for key: \":\"pol\",\"x\":null,\"xx\":99}", (Collection<?>) linkedList0);
      double double0 = jSONObject0.optDouble("{\"java.lang.Float@00000000040\":99,\"value\":true,\"] is not a JSONArray.\":null,\"Unable to write JSONObject value for key: \":\"pol\",\"x\":null,\"xx\":99}", (double) 792.8F);
      assertEquals(7, jSONObject0.length());
      assertEquals(792.7999877929688, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("2dzbSPIlo *3{BW1", 1.0F);
      double double0 = jSONObject1.optDouble("2dzbSPIlo *3{BW1", (double) 159.752F);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("wog>|K:`.]*Q", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<ByteArrayInputStream, Character> hashMap0 = new HashMap<ByteArrayInputStream, Character>();
      jSONObject0.put("] is not a valid number.", (Map<?, ?>) hashMap0);
      Class<DocumentationTool.Location> class0 = DocumentationTool.Location.class;
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCLET_PATH;
      DocumentationTool.Location documentationTool_Location1 = jSONObject0.optEnum(class0, "] is not a valid number.", documentationTool_Location0);
      assertEquals(DocumentationTool.Location.DOCLET_PATH, documentationTool_Location1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<DocumentationTool.Location> class0 = DocumentationTool.Location.class;
      DocumentationTool.Location documentationTool_Location0 = DocumentationTool.Location.DOCLET_PATH;
      DocumentationTool.Location documentationTool_Location1 = jSONObject0.optEnum(class0, "/]M?sMy", documentationTool_Location0);
      assertSame(documentationTool_Location1, documentationTool_Location0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      Object object1 = jSONObject0.opt("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":true}");
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":99,\"ha\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":-99}");
      jSONObject0.opt((String) null);
      assertEquals(7, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Float float0 = Float.valueOf(0.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(2066);
      String string0 = JSONObject.numberToString(bigDecimal0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"getfloatValue\":null,\"x\":[]}");
      boolean boolean0 = jSONObject0.isEmpty();
      assertEquals(8, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"org.json.JSONException\":-1,\"isintern\":true,\"x\":false}");
      JSONObject jSONObject1 = jSONObject0.putOnce("{\"org.json.JSONException\":-1,\"isintern\":true,\"x\":false}", "{\"org.json.JSONException\":-1,\"isintern\":true,\"x\":false}");
      jSONObject1.get("{\"org.json.JSONException\":-1,\"isintern\":true,\"x\":false}");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"org.json.JSONException\":-1,\"isintern\":true,\"x\":false}");
      try { 
        jSONObject0.get("{\"org.json.JSONException\":-1,\"isintern\":true,\"x\":false}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000018] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Thread.State> linkedList0 = new LinkedList<Thread.State>();
      jSONObject0.put("<l5q`IA[N=. aT[D", (Collection<?>) linkedList0);
      Map<String, Object> map0 = jSONObject0.toMap();
      JSONObject jSONObject1 = new JSONObject(map0);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<Byte, CardTerminals.State> hashMap0 = new HashMap<Byte, CardTerminals.State>();
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_ABSENT;
      hashMap0.put((Byte) null, cardTerminals_State0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":-99}");
      int int0 = jSONObject0.length();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(83);
      Set<String> set0 = jSONObject0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"org.json.JSONException\":-1,\"] is not a JSONArray.\":-99,\"Null key.\":true,\"value [%s] is not an array or object therefore its key %s cannot be resolved\":{}}");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(4, map0.size());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<Locale.Category, JSONObject> hashMap0 = new HashMap<Locale.Category, JSONObject>();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.writeValue(stringWriter0, hashMap0, 128, 2324);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "384&xEaL&LAe6\"l\"");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"org.json.JSONException\":-1,\"] is not a JSONArray.\":-99,\"Null key.\":false,\"value [%s] is not an array or object therefore its key %s cannot be resolved\":{},\"Null key.\":\"a string\"}");
      String string0 = jSONObject0.toString(1775);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"getMethods\":0.0,\"false\":null,\"x\":99}");
      jSONObject0.toString((-5737));
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, (Object) null, 1000000, 1000000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      JSONObject jSONObject0 = new JSONObject(locale0);
      assertEquals(14, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(110);
      BigDecimal bigDecimal1 = (BigDecimal)JSONObject.wrap(bigDecimal0);
      assertEquals((short)110, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Object object0 = JSONObject.wrap(bigInteger0);
      assertSame(object0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Float float0 = Float.valueOf(391.0F);
      Object object0 = JSONObject.wrap(float0);
      assertEquals(391.0F, object0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Long long0 = new Long(385L);
      Object object0 = JSONObject.wrap(long0);
      assertEquals(385L, object0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Short short0 = new Short((short)229);
      Object object0 = JSONObject.wrap(short0);
      assertEquals((short)229, object0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Character character0 = new Character('w');
      Object object0 = JSONObject.wrap(character0);
      assertEquals('w', object0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(83);
      LinkedList<JavaFileObject.Kind> linkedList0 = new LinkedList<JavaFileObject.Kind>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "-99");
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("lo", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      try { 
        jSONObject0.put("ISZ L=$,iKOB@?*H", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("getModifiers");
      assertEquals("getModifiers", object0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-99");
      assertEquals((-99), number0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("384&xEaL&LAe6\"l ;\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-0");
      assertEquals(-0.0, number0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("4E&(pycDO7t)\"P_v");
      assertEquals("4E&(pycDO7t)\"P_v", object0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(">W,]%NDb|CsX$3", false);
      boolean boolean0 = jSONObject0.similar(jSONObject0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOnce("e^e!ya_Rn)25ySC7t", "e^e!ya_Rn)25ySC7t");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      boolean boolean0 = jSONObject1.similar(jSONObject0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.similar("pofym");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(16);
      jSONObject0.put("kW48E(3CP\u0007", 16);
      String string0 = jSONObject0.toString(16);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("}=kWI)q)f,u7[u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1914);
      JSONObject jSONObject1 = jSONObject0.putOpt("false", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Double double0 = new Double(0.2833908110684578);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, double0);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"a string\"", 226.55583F);
      Float float0 = new Float(226.55583F);
      try { 
        jSONObject1.putOnce("\"a string\"", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"\"a string\"\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wm,9V$9']vM8#", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("384&xEaL&LAe6\"l\"", false);
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<BufferedOutputStream, JavaFileObject.Kind> hashMap0 = new HashMap<BufferedOutputStream, JavaFileObject.Kind>();
      JSONObject jSONObject1 = jSONObject0.put("]Null key.", (Map<?, ?>) hashMap0);
      String string0 = jSONObject1.optString("]Null key.");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] could not be converted to BigDecimal.\":-99,\"rea\":\"vvq[\",\"color\":false,\".\":99,\"getClass\":null,\"number\":\"0\",\"x\":\"a string\",\"xx\":[]}");
      jSONObject0.putOnce("{\"] could not be converted to BigDecimal.\":-99,\"rea\":\"vvq[\",\"color\":false,\".\":99,\"getClass\":null,\"number\":\"0\",\"x\":\"a string\",\"xx\":[]}", "{\"] could not be converted to BigDecimal.\":-99,\"rea\":\"vvq[\",\"color\":false,\".\":99,\"getClass\":null,\"number\":\"0\",\"x\":\"a string\",\"xx\":[]}");
      BigDecimal bigDecimal0 = new BigDecimal(1946);
      jSONObject0.optNumber("{\"] could not be converted to BigDecimal.\":-99,\"rea\":\"vvq[\",\"color\":false,\".\":99,\"getClass\":null,\"number\":\"0\",\"x\":\"a string\",\"xx\":[]}", (Number) bigDecimal0);
      assertEquals(9, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.Float@00000000040\":null,\"value\":\"a string\",\"] is not a JSONArray.\":null,\"Unable to write JSONObject value for key: \":\"\",\"x\":null,\"ishashCode\":99}");
      JSONObject jSONObject1 = jSONObject0.put("{\"java.lang.Float@00000000040\":null,\"value\":\"a string\",\"] is not a JSONArray.\":null,\"Unable to write JSONObject value for key: \":\"\",\"x\":null,\"ishashCode\":99}", (-368.19852F));
      Number number0 = jSONObject1.getNumber("{\"java.lang.Float@00000000040\":null,\"value\":\"a string\",\"] is not a JSONArray.\":null,\"Unable to write JSONObject value for key: \":\"\",\"x\":null,\"ishashCode\":99}");
      jSONObject0.optNumber("{\"java.lang.Float@00000000040\":null,\"value\":\"a string\",\"] is not a JSONArray.\":null,\"Unable to write JSONObject value for key: \":\"\",\"x\":null,\"ishashCode\":99}", number0);
      assertEquals(7, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"0.0\":null,\"isbyteValue\":\"~\",\"color\":false,\".\":true,\"org.json.JSONException\":null,\"number\":null,\"-0\":\"a string\",\"xx\":-99}");
      JSONObject jSONObject1 = jSONObject0.put("{\"0.0\":null,\"isbyteValue\":\"~\",\"color\":false,\".\":true,\"org.json.JSONException\":null,\"number\":null,\"-0\":\"a string\",\"xx\":-99}", true);
      BigDecimal bigDecimal0 = new BigDecimal(110);
      jSONObject1.optNumber("{\"0.0\":null,\"isbyteValue\":\"~\",\"color\":false,\".\":true,\"org.json.JSONException\":null,\"number\":null,\"-0\":\"a string\",\"xx\":-99}", (Number) bigDecimal0);
      assertEquals(9, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":-99,\"rea\":\"Large\",\"color\":false,\".\":true,\"getClass\":null,\"number\":\"0\",\"x\":\"a string\",\"xx\":false}");
      jSONObject0.putOnce("{\"fruit\":-99,\"rea\":\"Large\",\"color\":false,\".\":true,\"getClass\":null,\"number\":\"0\",\"x\":\"a string\",\"xx\":false}", "{\"fruit\":-99,\"rea\":\"Large\",\"color\":false,\".\":true,\"getClass\":null,\"number\":\"0\",\"x\":\"a string\",\"xx\":false}");
      long long0 = jSONObject0.optLong("{\"fruit\":-99,\"rea\":\"Large\",\"color\":false,\".\":true,\"getClass\":null,\"number\":\"0\",\"x\":\"a string\",\"xx\":false}", 297L);
      assertEquals(9, jSONObject0.length());
      assertEquals(297L, long0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<SocketFlow.Status, Normalizer.Form> hashMap0 = new HashMap<SocketFlow.Status, Normalizer.Form>();
      JSONObject jSONObject1 = jSONObject0.put("+0gZJJ", (Map<?, ?>) hashMap0);
      long long0 = jSONObject1.optLong("+0gZJJ", 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("/2MR=4Wm|v}}g?", (-1L));
      long long0 = jSONObject0.optLong("/2MR=4Wm|v}}g?");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("org.json.JSONObject$Null");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.Float@00000000040\":99,\"color\":true,\"value\":true,\"value2\":null,\"Unable to write JSONObject value for key: \":\"1\",\"x\":{},\"xx\":-99}");
      LinkedList<Thread.State> linkedList0 = new LinkedList<Thread.State>();
      jSONObject0.put("{\"java.lang.Float@00000000040\":99,\"color\":true,\"value\":true,\"value2\":null,\"Unable to write JSONObject value for key: \":\"1\",\"x\":{},\"xx\":-99}", (Collection<?>) linkedList0);
      jSONObject0.optJSONArray("{\"java.lang.Float@00000000040\":99,\"color\":true,\"value\":true,\"value2\":null,\"Unable to write JSONObject value for key: \":\"1\",\"x\":{},\"xx\":-99}");
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ":90qbOg&CuZo_I. &");
      jSONObject0.optJSONArray(":90qbOg&CuZo_I. &");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":-99,\"rea\":\"Large\",\"color\":false,\".\":true,\"getClass\":null,\"number\":\"0\",\"x\":\"a string\",\"xx\":false}");
      jSONObject0.putOnce("{\"fruit\":-99,\"rea\":\"Large\",\"color\":false,\".\":true,\"getClass\":null,\"number\":\"0\",\"x\":\"a string\",\"xx\":false}", "{\"fruit\":-99,\"rea\":\"Large\",\"color\":false,\".\":true,\"getClass\":null,\"number\":\"0\",\"x\":\"a string\",\"xx\":false}");
      int int0 = jSONObject0.optInt("{\"fruit\":-99,\"rea\":\"Large\",\"color\":false,\".\":true,\"getClass\":null,\"number\":\"0\",\"x\":\"a string\",\"xx\":false}", (-40784180));
      assertEquals(9, jSONObject0.length());
      assertEquals((-40784180), int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<BufferedOutputStream, JavaFileObject.Kind> hashMap0 = new HashMap<BufferedOutputStream, JavaFileObject.Kind>();
      jSONObject0.put("]Null key.", (Map<?, ?>) hashMap0);
      int int0 = jSONObject0.optInt("]Null key.");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\"a string\"", 226.55583F);
      int int0 = jSONObject0.optInt("\"a string\"");
      assertEquals(226, int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(64);
      jSONObject0.put("EV&)", 8);
      float float0 = jSONObject0.optFloat("EV&)", (float) 8);
      assertEquals(8.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.Float@00000000040\":99,\"value\":\"a string\",\"] is not a JSONArray.\":null,\"gettryLock\":null,\"ishashCode\":99}");
      JSONObject jSONObject1 = jSONObject0.put("{\"java.lang.Float@00000000040\":99,\"value\":\"a string\",\"] is not a JSONArray.\":null,\"gettryLock\":null,\"ishashCode\":99}", (-368.19852F));
      double double0 = jSONObject1.optDouble("{\"java.lang.Float@00000000040\":99,\"value\":\"a string\",\"] is not a JSONArray.\":null,\"gettryLock\":null,\"ishashCode\":99}");
      assertEquals(6, jSONObject0.length());
      assertEquals((-368.1985168457031), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":-99,\"Unable to preserve stream position\":\"~\",\"color\":false,\".\":\"a string\",\"getClass\":null,\"number\":\"0\",\"-0\":\"a string\",\"xx\":false}");
      jSONObject0.putOnce("{\"fruit\":-99,\"Unable to preserve stream position\":\"~\",\"color\":false,\".\":\"a string\",\"getClass\":null,\"number\":\"0\",\"-0\":\"a string\",\"xx\":false}", "{\"fruit\":-99,\"Unable to preserve stream position\":\"~\",\"color\":false,\".\":\"a string\",\"getClass\":null,\"number\":\"0\",\"-0\":\"a string\",\"xx\":false}");
      double double0 = jSONObject0.optDouble("{\"fruit\":-99,\"Unable to preserve stream position\":\"~\",\"color\":false,\".\":\"a string\",\"getClass\":null,\"number\":\"0\",\"-0\":\"a string\",\"xx\":false}", 0.0);
      assertEquals(9, jSONObject0.length());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = jSONObject0.optBigInteger("pofym", (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("2dzbSPIlo *3{BW1", 1.0F);
      BigDecimal bigDecimal0 = new BigDecimal(884L);
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("2dzbSPIlo *3{BW1", bigDecimal0);
      assertEquals((short)1, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-285));
      JSONObject jSONObject0 = new JSONObject(83);
      jSONObject0.putOpt("", "");
      jSONObject0.optBigDecimal("", bigDecimal0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] could not be converted to BigDecimal.\":-99,\"-0\":[],\"org.json.JSONObject$1\":\"a string\",\"] could not convert to BigDecimal.\":null,\".\":[],\"] is not an enum of type \":{},\"\":-99}");
      JSONObject jSONObject1 = jSONObject0.put("{\"] could not be converted to BigDecimal.\":-99,\"-0\":[],\"org.json.JSONObject$1\":\"a string\",\"] could not convert to BigDecimal.\":null,\".\":[],\"] is not an enum of type \":{},\"\":-99}", true);
      boolean boolean0 = jSONObject1.optBoolean("{\"] could not be converted to BigDecimal.\":-99,\"-0\":[],\"org.json.JSONObject$1\":\"a string\",\"] could not convert to BigDecimal.\":null,\".\":[],\"] is not an enum of type \":{},\"\":-99}", true);
      assertEquals(8, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Short short0 = new Short((short)24182);
      String string0 = JSONObject.valueToString(short0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] could not be converted to BigDecimal.\":-99,\"-0\":[],\"org.json.JSONObject$1\":\"a string\",\"] could not convert to BigDecimal.\":null,\".\":[],\"gettoLowerCase\":false,\"\":-99}");
      JSONObject jSONObject1 = jSONObject0.put("{\"] could not be converted to BigDecimal.\":-99,\"-0\":[],\"org.json.JSONObject$1\":\"a string\",\"] could not convert to BigDecimal.\":null,\".\":[],\"gettoLowerCase\":false,\"\":-99}", true);
      try { 
        jSONObject1.increment("{\"] could not be converted to BigDecimal.\":-99,\"-0\":[],\"org.json.JSONObject$1\":\"a string\",\"] could not convert to BigDecimal.\":null,\".\":[],\"gettoLowerCase\":false,\"\":-99}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000069].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] could not be converted to BigDecimal.\":-99,\"-0\":false,\"org.json.JSONObject$1\":true,\"] could not convert to BigDecimal.\":null,\".\":[],\"\":-99}");
      JSONObject jSONObject1 = jSONObject0.put("{\"] could not be converted to BigDecimal.\":-99,\"-0\":false,\"org.json.JSONObject$1\":true,\"] could not convert to BigDecimal.\":null,\".\":[],\"\":-99}", true);
      boolean boolean0 = jSONObject1.has("{\"] could not be converted to BigDecimal.\":-99,\"-0\":false,\"org.json.JSONObject$1\":true,\"] could not convert to BigDecimal.\":null,\".\":[],\"\":-99}");
      assertEquals(7, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("org.json.JSONObject");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOnce("-99", "-99");
      String string0 = jSONObject0.getString("-99");
      assertEquals("-99", string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.Float@00000000040\":99,\"color\":true,\"value\":true,\"value2\":null,\"Unable to write JSONObject value for key: \":\"1\",\"x\":{},\"xx\":-99}");
      LinkedList<Thread.State> linkedList0 = new LinkedList<Thread.State>();
      jSONObject0.put("{\"java.lang.Float@00000000040\":99,\"color\":true,\"value\":true,\"value2\":null,\"Unable to write JSONObject value for key: \":\"1\",\"x\":{},\"xx\":-99}", (Collection<?>) linkedList0);
      try { 
        jSONObject0.getString("{\"java.lang.Float@00000000040\":99,\"color\":true,\"value\":true,\"value2\":null,\"Unable to write JSONObject value for key: \":\"1\",\"x\":{},\"xx\":-99}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000071] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      String[] stringArray0 = JSONObject.getNames((Object) pipedReader0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      String[] stringArray0 = JSONObject.getNames((Object) bigInteger0);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "1488");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.increment("java.io.StringWriter@0000000002");
      long long0 = jSONObject0.getLong("java.io.StringWriter@0000000002");
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"org.json.JSONException\":-1,\"isintern\":true,\"x\":false}");
      JSONObject jSONObject1 = jSONObject0.putOnce("{\"org.json.JSONException\":-1,\"isintern\":true,\"x\":false}", "{\"org.json.JSONException\":-1,\"isintern\":true,\"x\":false}");
      try { 
        jSONObject1.getLong("{\"org.json.JSONException\":-1,\"isintern\":true,\"x\":false}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000029] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<SocketFlow.Status, Normalizer.Form> hashMap0 = new HashMap<SocketFlow.Status, Normalizer.Form>();
      JSONObject jSONObject1 = jSONObject0.put("Cxz6bE`1|@p/`ifV0{b,", (Map<?, ?>) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("Cxz6bE`1|@p/`ifV0{b,");
      assertNotSame(jSONObject1, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":99,\"isremove\":\"1\",\"xx\":-99,\"] could not be converted to BigInteger.\":false,\"value2\":false,\"descendingIterator\":-99,\"value\":[]}");
      jSONObject0.put("{\"fruit\":99,\"isremove\":\"1\",\"xx\":-99,\"] could not be converted to BigInteger.\":false,\"value2\":false,\"descendingIterator\":-99,\"value\":[]}", false);
      try { 
        jSONObject0.getJSONObject("{\"fruit\":99,\"isremove\":\"1\",\"xx\":-99,\"] could not be converted to BigInteger.\":false,\"value2\":false,\"descendingIterator\":-99,\"value\":[]}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000068] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Thread.State> linkedList0 = new LinkedList<Thread.State>();
      JSONObject jSONObject1 = jSONObject0.put("<l5q`IA[N=. aT[D", (Collection<?>) linkedList0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("<l5q`IA[N=. aT[D");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<BufferedOutputStream, JavaFileObject.Kind> hashMap0 = new HashMap<BufferedOutputStream, JavaFileObject.Kind>();
      JSONObject jSONObject1 = jSONObject0.put("]Null key.", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.getJSONArray("]Null key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"org.json.JSONException\":-1,\"toString\":true}");
      jSONObject0.put("{\"org.json.JSONException\":-1,\"toString\":true}", 2426.149F);
      int int0 = jSONObject0.getInt("{\"org.json.JSONException\":-1,\"toString\":true}");
      assertEquals(3, jSONObject0.length());
      assertEquals(2426, int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<SocketFlow.Status, Normalizer.Form> hashMap0 = new HashMap<SocketFlow.Status, Normalizer.Form>();
      JSONObject jSONObject1 = jSONObject0.put("Cxz6bE`1|@p/`fV0Cb,", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.getInt("Cxz6bE`1|@p/`fV0Cb,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<DataInputStream> linkedList0 = new LinkedList<DataInputStream>();
      JSONObject jSONObject1 = jSONObject0.put("]", (Collection<?>) linkedList0);
      try { 
        jSONObject1.getNumber("]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("/]M?sMy", 590.0F);
      assertFalse(jSONObject0.isEmpty());
      
      float float0 = jSONObject1.getFloat("/]M?sMy");
      assertEquals(590.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"org.json.JSONException\":-1,\"isintern\":true,\"x\":false}");
      jSONObject0.putOnce("{\"org.json.JSONException\":-1,\"isintern\":true,\"x\":false}", "{\"org.json.JSONException\":-1,\"isintern\":true,\"x\":false}");
      try { 
        jSONObject0.getFloat("{\"org.json.JSONException\":-1,\"isintern\":true,\"x\":false}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000029] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<SocketFlow.Status, Normalizer.Form> hashMap0 = new HashMap<SocketFlow.Status, Normalizer.Form>();
      jSONObject0.put("+0gZJJ", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getBigDecimal("+0gZJJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("2dzbSPIlo *3{BW1", 1.0F);
      try { 
        jSONObject1.getBoolean("2dzbSPIlo *3{BW1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Resource.AuthenticationType> class0 = Resource.AuthenticationType.class;
      try { 
        jSONObject0.getEnum(class0, "Fj6elBC&X'8/mB[w$|i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOnce("Expected a ':' after a key", "Expected a ':' after a key");
      boolean boolean0 = jSONObject0.optBoolean("Expected a ':' after a key", true);
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = JSONObject.doubleToString(298.74653979419406);
      assertEquals("298.74653979419406", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Class<DocumentationTool.Location> class0 = DocumentationTool.Location.class;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("}0_JP_TS<8'Xs7a", class0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.Float@00000000040\":99,\"color\":true,\"value\":true,\"value2\":false,\"toS\":\"1\",\"x\":\"a string\",\"java.lang.Float@0000000014.\":-99}");
      LinkedList<Thread.State> linkedList0 = new LinkedList<Thread.State>();
      jSONObject0.put("{\"java.lang.Float@00000000040\":99,\"color\":true,\"value\":true,\"value2\":false,\"toS\":\"1\",\"x\":\"a string\",\"java.lang.Float@0000000014.\":-99}", (Collection<?>) linkedList0);
      jSONObject0.accumulate("{\"java.lang.Float@00000000040\":99,\"color\":true,\"value\":true,\"value2\":false,\"toS\":\"1\",\"x\":\"a string\",\"java.lang.Float@0000000014.\":-99}", "isisNaN");
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(58);
      jSONObject0.accumulate("iG{CY|J[o)V?\u0007NlH.", jSONArray0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("a0B85", 699.3F);
      jSONObject1.accumulate("a0B85", "a0B85");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      HashMap<Locale.Category, JSONObject> hashMap0 = new HashMap<Locale.Category, JSONObject>();
      hashMap0.put(locale_Category0, (JSONObject) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"getMethods\":0.0}");
      HashMap<MockFileInputStream, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<MockFileInputStream, Formatter.BigDecimalLayoutForm>();
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm0 = Formatter.BigDecimalLayoutForm.SCIENTIFIC;
      hashMap0.put((MockFileInputStream) null, formatter_BigDecimalLayoutForm0);
      // Undeclared exception!
      try { 
        jSONObject0.put("1=QDhM``XI)}CvK", (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      HashMap<SocketFlow.Status, Normalizer.Form> hashMap0 = new HashMap<SocketFlow.Status, Normalizer.Form>();
      SocketFlow.Status socketFlow_Status0 = SocketFlow.Status.IN_PROGRESS;
      Normalizer.Form normalizer_Form0 = Normalizer.Form.NFD;
      hashMap0.put(socketFlow_Status0, normalizer_Form0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"fruit\":\"%etnpd\"2>7us/l\",\"size\":{},\"color\":{},\"value\":true,\"le\":true,\"number\":[\"a string\"],\"~\":null,\"99\":[false,[],true]}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at 18 [character 19 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"fruiP\":null,\"intValue\":\"Large\",\"color\":\"Red\",\"&\":true,5getClass\":null,\"number\":\"1\",\"x\":\"a string\",\"xx\":false}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 66 [character 67 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"org.json.JSONException\":[],\"] is not a JSONArray.\":-99,\"Null key.\":true,\"value [%s] is not an array or object therefore its key %s cannot be resolved\":null}");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(4, map0.size());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"org.json.JSONException\":-1,\"] is not a JSONArray.\":true,\"Stepping back two steps is not supported\":true,\"value [%s] is not an array or object therefore its key %s cannot be resolved\":[],\"getDeclaringClass\":-99,\"xx\":99}");
      jSONObject0.remove("{\"org.json.JSONException\":-1,\"] is not a JSONArray.\":true,\"Stepping back two steps is not supported\":true,\"value [%s] is not an array or object therefore its key %s cannot be resolved\":[],\"getDeclaringClass\":-99,\"xx\":99}");
      assertEquals(6, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write((Writer) stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery("");
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("g8Cc>?d.![yz{ <LlNB");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<BufferedOutputStream, JavaFileObject.Kind> hashMap0 = new HashMap<BufferedOutputStream, JavaFileObject.Kind>();
      jSONObject0.put("]Null key.", (Map<?, ?>) hashMap0);
      Long long0 = new Long((-2806L));
      try { 
        jSONObject0.append("]Null key.", long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[]Null key.] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("J{8T?.}u$?", (Collection<?>) null);
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "J{8T?.}u$?");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-4260));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -4260
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query("xXV'ya9sjWln/)x8=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("jN&KTnS;H");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      HashMap<GroupLayout.Alignment, CardTerminals.State> hashMap0 = new HashMap<GroupLayout.Alignment, CardTerminals.State>(124);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.isNull("org.json.JSONArray");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Double double0 = new Double(632.9519);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("is", 632.9519);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Number number0 = jSONObject0.optNumber("org.json.JSONWriter");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"org.json.JSONException\":false,\"] is not a JSONArray.\":true,\"trim\":true,\"value [%s] is not an array or object therefore its key %s cannot be resolved\":[],\"by\":-99,\"xx\":null}");
      long long0 = jSONObject0.optLong("{\"org.json.JSONException\":false,\"] is not a JSONArray.\":true,\"trim\":true,\"value [%s] is not an array or object therefore its key %s cannot be resolved\":[],\"by\":-99,\"xx\":null}");
      assertEquals(0L, long0);
      assertEquals(6, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Class<DocumentationTool.Location> class0 = DocumentationTool.Location.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }
}
