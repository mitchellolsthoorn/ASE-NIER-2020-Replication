/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 16:45:59 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dialog;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.net.Proxy;
import java.net.StandardProtocolFamily;
import java.nio.CharBuffer;
import java.sql.JDBCType;
import java.util.Collection;
import java.util.Formatter;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import java.util.function.BiFunction;
import javax.annotation.Resource;
import javax.smartcardio.CardTerminals;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.put("-99", (Map<?, ?>) null);
      StringWriter stringWriter0 = new StringWriter(62);
      Writer writer0 = jSONObject0.write((Writer) stringWriter0, (-1955), 8192);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-2021.06894431");
      assertEquals((-2021.06894431), number0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("&-fMH{K}!,%");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [&-fMH{K}!,%] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("0Q>R9xYd%");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Q>R9xYd%\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"]_is not a BooleanQ\":-99,\"number\":[],\"7alue\":false,\"Expected '\":false,\"gethashCode\"h-99}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 86 [character 87 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}o452L/E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"] is not an enum of type \":0.0,\"] is not a JSONObject.\":[falsk,{},99],\"istoUpperCase\":true}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JSONObject.indent(stringWriter0, 0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("A JSONObject text must begin with '{'", (Object) hashMap0);
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[]}");
      jSONObject0.put("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[]}", 32);
      String[] stringArray0 = new String[8];
      stringArray0[1] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[]}";
      stringArray0[3] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[]}";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(5, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JSONObject jSONObject0 = new JSONObject(locale0, stringArray0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(3509L);
      JSONObject jSONObject0 = new JSONObject(bigDecimal0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}");
      jSONObject0.write((Writer) mockPrintWriter0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Map<String, Object> map0 = jSONObject0.toMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("1465.4794425532891");
      assertEquals((short)1465, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-430.4209604598215");
      assertEquals((byte)82, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.put("-99", (Map<?, ?>) null);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.remove("-99");
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(92);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query(jSONPointer0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Proxy.Type, MockFileInputStream> hashMap0 = new HashMap<Proxy.Type, MockFileInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = jSONObject0.query("/f");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query("");
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      String string0 = jSONObject0.optString("AfX", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<BufferedOutputStream, Object> hashMap0 = new HashMap<BufferedOutputStream, Object>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Vfz|bl2i,k+h1g6wA");
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("\"", true);
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(mockFileWriter0, stringArray0);
      Object object0 = jSONObject0.optQuery("/");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(77);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery("");
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] is not an enum of type \":0.0,\"] is not a JSONObject.\":[false,{},99],\"istoUpperCase\":true}");
      jSONObject0.optNumber("F8H]s4`BA", (Number) null);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      BigDecimal bigDecimal0 = new BigDecimal((-678L));
      Number number0 = jSONObject0.optNumber("MZAe", (Number) bigDecimal0);
      assertSame(bigDecimal0, number0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Number number0 = jSONObject0.optNumber("a(A x;os>vm$h_X", (Number) bigDecimal0);
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<BufferedOutputStream, Object> hashMap0 = new HashMap<BufferedOutputStream, Object>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal(485L);
      jSONObject0.optNumber("gettrim", (Number) bigDecimal0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      int int0 = jSONObject0.optInt("java.io.StringWriter@0000000008", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"tr\":{},\"7alue\":false,\"Expected '\":fals,\"gethashCode\":-99,\"x\":null}");
      int int0 = jSONObject0.optInt("{\"fruit\":\"Apple\",\"tr\":{},\"7alue\":false,\"Expected '\":fals,\"gethashCode\":-99,\"x\":null}", (-154));
      assertEquals((-154), int0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject("BQLT2m/Zb\"#eZ", stringArray0);
      jSONObject0.put("BQLT2m/Zb\"#eZ", (long) 19);
      int int0 = jSONObject0.optInt("BQLT2m/Zb\"#eZ");
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject("BQLT2m/Zb\"#eZ", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("BQLT2m/Zb\"#eZ", (long) 19);
      float float0 = jSONObject1.optFloat("BQLT2m/Zb\"#eZ");
      assertEquals(19.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject("BQLT2m/Zb\"#e", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("BQLT2m/Zb\"#e", (long) (-2));
      double double0 = jSONObject1.optDouble("BQLT2m/Zb\"#e", (double) 0);
      assertEquals((-2.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      Double double0 = new Double(0.0);
      jSONObject0.accumulate("\"", double0);
      double double1 = jSONObject0.optDouble("\"");
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("keys");
      double double0 = jSONObject0.optDouble("keys");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] not a string.\":-1,\"] is not an enum of type \":[[null]],\"ha\":[]}");
      boolean boolean0 = jSONObject0.optBoolean("{\"] not a string.\":-1,\"] is not an enum of type \":[[null]],\"ha\":[]}", false);
      assertFalse(boolean0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = jSONObject0.optBigInteger("=PV\"0w#", (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<FilterInputStream, Float> hashMap0 = new HashMap<FilterInputStream, Float>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal("4oA", (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      JSONObject jSONObject0 = new JSONObject(sequenceInputStream0);
      jSONObject0.put("A JSONObject text must begin with '{'", (-2839.21));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("A JSONObject text must begin with '{'", bigDecimal0);
      assertEquals((byte) (-23), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      jSONObject0.opt("A JSONObject text must begin with '{'");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("BQLT2m/Zb\"#e", locale0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("-99");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject1 = jSONObject0.accumulate("[", bigInteger0);
      Number number0 = jSONObject1.getNumber("[");
      assertSame(number0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.put("b3yPE(1uu[|", (-2337.1443F));
      long long0 = jSONObject0.getLong("b3yPE(1uu[|");
      assertEquals((-2337L), long0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.put("a(A x;os>vm$h_X", 424L);
      float float0 = jSONObject0.getFloat("a(A x;os>vm$h_X");
      assertEquals(424.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JSONObject jSONObject0 = new JSONObject(locale0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.writeValue(pipedWriter0, jSONObject0, 44, 44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.writeValue(pipedWriter0, pipedWriter0, (-1213), (-1213));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "false");
      StringWriter stringWriter0 = new StringWriter();
      try { 
        jSONObject0.write((Writer) stringWriter0, 2924, (-3482));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Short, Locale.FilteringMode> hashMap0 = new HashMap<Short, Locale.FilteringMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 131, 131);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "BQLT2m/Zb\"#e");
      try { 
        jSONObject0.toString(8448);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0.0F);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("{\"dZo\":tr");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [{\"dZo\":tr] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("longValue", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject jSONObject0 = new JSONObject(charArrayWriter0);
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 623L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] is not a Boolean.\":-99,\"org.json.JSONException\":[99],\"toL\":[],\"isstripExtensions\":-99,\"x\":{}}");
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"y\":7,\"{\":true,\"longValue\":{},\"] is not a number.\":99}");
      try { 
        jSONObject0.getLong("{\"y\":7,\"{\":true,\"longValue\":{},\"] is not a number.\":99}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000025] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] is not an enum of type \":0.0,\"] is not a JSONObject.\":[false,{},99],\"istoUpperCase\":true}");
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, "-99");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("$");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-5133), 1030);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      JSONTokener jSONTokener0 = new JSONTokener(dataInputStream0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name , locale fr_CA
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-3021));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -3021
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"toS\":\"Apple\",\"gettoCharArray\":-99,\"Expected '\":false,\"number\":[false]}");
      StringWriter stringWriter0 = new StringWriter(0);
      Writer writer0 = jSONObject0.write((Writer) stringWriter0, 0, (-1955));
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(0);
      jSONObject0.write((Writer) stringWriter0, 131, 131);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"gettoCharArray\":-99,\"7alue\":false,\"Expected '\":false,\"number\":[]}");
      StringWriter stringWriter0 = new StringWriter(0);
      jSONObject0.write((Writer) stringWriter0, 1640, (-1955));
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockPrintWriter0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader('h');
      Object object0 = JSONObject.wrap(pipedReader0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(locale0, stringArray0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      JSONArray jSONArray0 = (JSONArray)JSONObject.wrap(set0);
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Object object0 = JSONObject.wrap(boolean0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Integer integer0 = new Integer(1116);
      Object object0 = JSONObject.wrap(integer0);
      assertEquals(1116, object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Byte byte0 = new Byte((byte)46);
      Object object0 = JSONObject.wrap(byte0);
      assertEquals((byte)46, object0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\"";
      Object object0 = JSONObject.wrap(stringArray0[0]);
      assertEquals("\"", object0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedList<RoundingMode> linkedList0 = new LinkedList<RoundingMode>();
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      linkedList0.add(roundingMode0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject.testValidity("java.io.StringWriter@0000000002");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Double double0 = new Double(0.0F);
      JSONObject.testValidity(double0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-0");
      assertEquals(-0.0, object0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("{\"] is not an enum of type \":{},\"] is not a JSONObject.\":[false,null,false],\"getpoll\":true}");
      assertEquals("{\"] is not an enum of type \":{},\"] is not a JSONObject.\":[false,null,false],\"getpoll\":true}", object0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-99");
      assertEquals((-99), object0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("6R'd]Ea7");
      assertEquals("6R'd]Ea7", object0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("+fJ}}uC v]g|Z");
      assertEquals("+fJ}}uC v]g|Z", object0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote("|@da-TPTM$H.3B;4/=", (Writer) stringWriter0);
      assertEquals("\"|@da-TPTM$H.3B;4/=\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("&UU45}raX;@/Cl4eHd");
      Writer writer0 = JSONObject.quote("{\"] is not a Boolean.\":-99,\"org.json.JSONException\":[99],\"toL\":false,\"gethashCode\":-99,\"x\":{}}", (Writer) mockFileWriter0);
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" Hv-PwdxYW'(1r2=}", " Hv-PwdxYW'(1r2=}");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      Writer writer0 = JSONObject.quote("", (Writer) mockFileWriter0);
      assertSame(mockFileWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote("H@aFiU", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1000000);
      JSONObject.quote((String) null, (Writer) charArrayWriter0);
      assertEquals("\"\"", charArrayWriter0.toString());
      assertEquals(2, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.putOnce("-99", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("\"", true);
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject(mockFileWriter0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, "cm]:S!+tx@c:P(");
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("Stepping back two steps is not supported", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      Float float0 = new Float((double) 2924);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<Locale.FilteringMode, BufferedWriter> hashMap0 = new HashMap<Locale.FilteringMode, BufferedWriter>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("EavP.lang.Long@0000000X50", (-1624));
      String string0 = jSONObject0.optString("EavP.lang.Long@0000000X50", "a jsonobject tet must begin with '{'");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject("BQLT2m/Zb\"#eZ", stringArray0);
      jSONObject0.put("BQLT2m/Zb\"#eZ", (long) 19);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Number number0 = jSONObject0.optNumber("BQLT2m/Zb\"#eZ", (Number) bigDecimal0);
      assertEquals(19L, number0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("-99", (-557L));
      long long0 = jSONObject1.optLong("-99", (long) 612);
      assertEquals((-557L), long0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("-99", (Map<?, ?>) null);
      long long0 = jSONObject1.optLong("-99", (long) 612);
      assertEquals(612L, long0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JSONObject jSONObject0 = new JSONObject(locale0);
      jSONObject0.optLong("] is not a Boolean.", 0L);
      assertEquals(14, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("9");
      int int0 = jSONObject1.optInt("9", 104);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.put("-99", (Map<?, ?>) null);
      int int0 = jSONObject0.optInt("-99", 618);
      assertEquals(618, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.put("b3yPE(1uu[|", (-2337.1443F));
      float float0 = jSONObject0.optFloat("b3yPE(1uu[|", 200.8F);
      assertEquals((-2337.1443F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<BufferedOutputStream, Object> hashMap0 = new HashMap<BufferedOutputStream, Object>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(" z>V#q", (Map<?, ?>) hashMap0);
      float float0 = jSONObject1.optFloat(" z>V#q", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      float float0 = jSONObject0.optFloat("java.io.StringWriter@0000000002", 119.39477F);
      assertEquals(119.39477F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble(" z>V#q", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject tet must begin with '{'", "A JSONObject tet must begin with '{'");
      boolean boolean0 = jSONObject1.optBoolean("A JSONObject tet must begin with '{'", true);
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("-99", (Map<?, ?>) null);
      Class<StandardProtocolFamily> class0 = StandardProtocolFamily.class;
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET;
      StandardProtocolFamily standardProtocolFamily1 = jSONObject1.optEnum(class0, "-99", standardProtocolFamily0);
      assertSame(standardProtocolFamily0, standardProtocolFamily1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<StandardProtocolFamily> class0 = StandardProtocolFamily.class;
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET;
      StandardProtocolFamily standardProtocolFamily1 = jSONObject0.optEnum(class0, "c4M$;}~|yr[_58?w,R", standardProtocolFamily0);
      assertSame(standardProtocolFamily1, standardProtocolFamily0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"getintern\":\"Red\",\"value\":99,\"value2\":false,\"number\":\"1\"}");
      jSONObject0.opt("2ON9w1$0]?");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      String string0 = JSONObject.numberToString(bigInteger0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Short short0 = new Short((short) (-7));
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(57);
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("@hf$x^{SaAhgX", 479L);
      boolean boolean0 = jSONObject1.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("-99", (Map<?, ?>) null);
      Object object0 = jSONObject0.get("-99");
      assertNotSame(object0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("gettoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject("BQLT2m/Zb\"#eZ", stringArray0);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<MockFileOutputStream, Boolean> hashMap0 = new HashMap<MockFileOutputStream, Boolean>();
      Boolean boolean0 = new Boolean("utf-8");
      hashMap0.put((MockFileOutputStream) null, boolean0);
      // Undeclared exception!
      try { 
        jSONArray0.put((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Resource.AuthenticationType> class0 = Resource.AuthenticationType.class;
      jSONObject0.optEnum(class0, "intern");
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JSONObject jSONObject0 = new JSONObject(locale0);
      Set<String> set0 = jSONObject0.keySet();
      assertEquals(14, set0.size());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      Object object0 = jSONObject0.remove("-99");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] not a string.\":{},\"getISO3Language\":[[]],\"ha\":[],\"x\":\"a string\"}");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(4, map0.size());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "+fJAT}uC v]g|Z");
      jSONObject0.toString(69);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.writeValue(stringWriter0, linkedList0, 1637, 44);
      assertEquals("[]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<BufferedOutputStream, Object> hashMap0 = new HashMap<BufferedOutputStream, Object>();
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, hashMap0, (short)57, 67);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, locale_FilteringMode0, 92, 92);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"toS\":null,\"\t\":99}");
      String string0 = jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, (Object) null, (-1213), (-986));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Object object0 = JSONObject.wrap(bigDecimal0);
      assertSame(bigDecimal0, object0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Object> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Object>();
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm0 = Formatter.BigDecimalLayoutForm.SCIENTIFIC;
      Double double0 = new Double(2147.254914848);
      BiFunction<Object, Object, ProcessBuilder.Redirect.Type> biFunction0 = (BiFunction<Object, Object, ProcessBuilder.Redirect.Type>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(formatter_BigDecimalLayoutForm0, double0, biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Float float0 = new Float(0.0);
      Object object0 = JSONObject.wrap(float0);
      assertEquals(0.0F, object0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Long long0 = new Long(1714L);
      Object object0 = JSONObject.wrap(long0);
      assertEquals(1714L, object0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write((Writer) stringWriter0, 2924, (-4397));
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Short short0 = new Short((short) (-7));
      Object object0 = JSONObject.wrap(short0);
      assertEquals((short) (-7), object0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Object> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Object>();
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm0 = Formatter.BigDecimalLayoutForm.DECIMAL_FLOAT;
      Character character0 = new Character('U');
      hashMap0.put(formatter_BigDecimalLayoutForm0, character0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"tr\":[],\"-0\":[]}");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = (JSONArray)JSONObject.wrap(jSONArray0);
      assertEquals(2, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "+fJ}}uC v]g|Z");
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"spl\":-1623388224}");
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("@", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-99");
      assertEquals((-99), number0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("1907.1");
      assertEquals(1907.1, number0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"] not a stringB\":-1,6inEValu-\":[[]],\"ha\":[]}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 32 [character 33 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation(",h`` *JYehHv\"Dzu([");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      JSONObject jSONObject0 = new JSONObject(locale0);
      JSONObject jSONObject1 = new JSONObject();
      boolean boolean0 = jSONObject0.similar(jSONObject1);
      assertEquals(14, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.similar(charArrayWriter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      JSONObject jSONObject0 = new JSONObject(locale0);
      boolean boolean0 = jSONObject0.similar(jSONObject0);
      assertEquals(14, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = JSONObject.quote("\r");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      try { 
        jSONObject0.getJSONArray("wU\nD=uS#k=/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] not a string.\":-1,\"intValue\":[[]],\"ha\":[]}");
      JSONObject jSONObject1 = jSONObject0.putOpt("", (Object) null);
      assertEquals(3, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, bigInteger0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("java.io.StringWriter@0000000002", 2147483645);
      try { 
        jSONObject0.putOnce("java.io.StringWriter@0000000002", "java.io.StringWriter@0000000002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"java.io.StringWriter@0000000002\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[]}");
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      JSONObject jSONObject0 = new JSONObject(charBuffer0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      File file0 = MockFile.createTempFile("vz~,z62e.FSW1L*5slp", "vz~,z62e.FSW1L*5slp", (File) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.add((JSONObject) null);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("\"", true);
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(mockFileWriter0, stringArray0);
      Float float0 = new Float(1.0F);
      JSONObject jSONObject1 = jSONObject0.putOpt("f6-BCtHy%aAB>", float0);
      jSONObject1.optString("f6-BCtHy%aAB>");
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      jSONObject0.putOnce("A JSONObject tet must begin with '{'", "A JSONObject tet must begin with '{'");
      jSONObject0.optNumber("A JSONObject tet must begin with '{'");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("-99", (Map<?, ?>) null);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Number number0 = jSONObject1.optNumber("-99", (Number) bigDecimal0);
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Dialog.ModalityType, Float> hashMap0 = new HashMap<Dialog.ModalityType, Float>();
      jSONObject0.put(" z>V#q", (Map<?, ?>) hashMap0);
      long long0 = jSONObject0.optLong(" z>V#q");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(":57c`-*LQgv!", 479L);
      long long0 = jSONObject0.optLong(":57c`-*LQgv!");
      assertEquals(479L, long0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HashMap<Long, JDBCType> hashMap0 = new HashMap<Long, JDBCType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("-99", (Map<?, ?>) hashMap0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("-99");
      assertNotSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject("BQLT2m/Zb\"#eZ", stringArray0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("BQLT2m/Zb\"#eZ");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("-99", (Map<?, ?>) null);
      BigDecimal bigDecimal0 = new BigDecimal(627);
      jSONObject1.accumulate("-99", bigDecimal0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("-99");
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "+fJ}}uC v]g|Z");
      jSONObject0.optJSONArray((String) null);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] is not an enum of type \":0.0,\"] is not a JSONObject.\":[false,null,99],\"Unable to write JSONArray value at index: \":\"a string\"}");
      jSONObject0.accumulate("{\"] is not an enum of type \":0.0,\"] is not a JSONObject.\":[false,null,99],\"Unable to write JSONArray value at index: \":\"a string\"}", "{\"] is not an enum of type \":0.0,\"] is not a JSONObject.\":[false,null,99],\"Unable to write JSONArray value at index: \":\"a string\"}");
      int int0 = jSONObject0.optInt("{\"] is not an enum of type \":0.0,\"] is not a JSONObject.\":[false,null,99],\"Unable to write JSONArray value at index: \":\"a string\"}");
      assertEquals(4, jSONObject0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("@", (-239.361));
      int int0 = jSONObject1.optInt("@");
      assertEquals((-239), int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce("/", "/");
      float float0 = jSONObject1.optFloat("/");
      assertEquals(1, jSONObject0.length());
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"tr\":false}");
      jSONObject0.put("gettoArray", 0L);
      float float0 = jSONObject0.optFloat("gettoArray");
      assertEquals(2, jSONObject0.length());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      double double0 = jSONObject1.optDouble("A JSONObject text must begin with '{'");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Dialog.ModalityType, Float> hashMap0 = new HashMap<Dialog.ModalityType, Float>();
      jSONObject0.put(" z>V#q", (Map<?, ?>) hashMap0);
      double double0 = jSONObject0.optDouble(" z>V#q", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("{\"shortValue\":\"a string\",\"x\":false,\"xx\":{}}");
      double double0 = jSONObject0.optDouble("{\"shortValue\":\"a string\",\"x\":false,\"xx\":{}}", (-1.0));
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.put("-99", (Map<?, ?>) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("-99", bigInteger0);
      assertEquals((byte)1, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(" z>V#q", 0.0F);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject0.optBigInteger(" z>V#q", bigInteger0);
      assertEquals((short)0, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(":57c`-*LQgv!", 479L);
      BigInteger bigInteger0 = jSONObject0.optBigInteger(":57c`-*LQgv!", (BigInteger) null);
      assertNotNull(bigInteger0);
      assertEquals((byte) (-33), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      BigDecimal bigDecimal0 = new BigDecimal(612);
      jSONObject0.put("-99", 347.83564);
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("-99", bigDecimal0);
      assertEquals((byte)91, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      HashMap<SequenceInputStream, BigInteger> hashMap0 = new HashMap<SequenceInputStream, BigInteger>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject1 = jSONObject0.putOnce("] not found.", bigInteger0);
      BigDecimal bigDecimal0 = new BigDecimal(2);
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("] not found.", bigDecimal0);
      assertFalse(jSONObject0.isEmpty());
      assertNotSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("] is not an enum of type ", bigDecimal0);
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.put("-99", (Map<?, ?>) null);
      BigDecimal bigDecimal0 = new BigDecimal(612);
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("-99", bigDecimal0);
      assertEquals((byte)100, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.put("-99", (Map<?, ?>) null);
      boolean boolean0 = jSONObject0.optBoolean("-99");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("[", true);
      Class<Locale.Category> class0 = Locale.Category.class;
      try { 
        jSONObject1.getEnum(class0, "[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an enum of type java.io.StringWriter@0000000008.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Float float0 = new Float(0.0);
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(" z>V#q", 0.0F);
      JSONObject jSONObject2 = jSONObject1.increment(" z>V#q");
      assertFalse(jSONObject2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("ite", 8);
      JSONObject jSONObject2 = jSONObject1.increment("ite");
      assertSame(jSONObject0, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("-99", (Map<?, ?>) null);
      try { 
        jSONObject1.increment("-99");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000008].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] is not an enum of type \":0.0,\"] is not a JSONObject.\":[falsk,{},99],\"istoUpperCase\":true}");
      JSONObject jSONObject1 = jSONObject0.accumulate("{\"] is not an enum of type \":0.0,\"] is not a JSONObject.\":[falsk,{},99],\"istoUpperCase\":true}", "{\"] is not an enum of type \":0.0,\"] is not a JSONObject.\":[falsk,{},99],\"istoUpperCase\":true}");
      boolean boolean0 = jSONObject1.has("{\"] is not an enum of type \":0.0,\"] is not a JSONObject.\":[falsk,{},99],\"istoUpperCase\":true}");
      assertEquals(4, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"org.json.JSONPointerException\":true}");
      boolean boolean0 = jSONObject0.has("{\"org.json.JSONPointerException\":true}");
      assertFalse(jSONObject0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("@", (-239.361));
      try { 
        jSONObject1.getString("@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "{\"y\":7,\"{\":tr=e,\"unscaledValue\":[{}],\"] is not a number.\":99}");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "BQLT2m/Zb\"#e");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("9");
      long long0 = jSONObject1.getLong("9");
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("-99", (Map<?, ?>) null);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("-99");
      assertTrue(jSONObject2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject("BQLT2m/Zb\"#eZ", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("BQLT2m/Zb\"#eZ", (long) 19);
      try { 
        jSONObject1.getJSONObject("BQLT2m/Zb\"#eZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      HashMap<Resource.AuthenticationType, CardTerminals.State> hashMap0 = new HashMap<Resource.AuthenticationType, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("org.json.JSONObject", (Collection<?>) null);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("org.json.JSONObject");
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      HashMap<BufferedOutputStream, Object> hashMap0 = new HashMap<BufferedOutputStream, Object>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(" z>V#q", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.getJSONArray(" z>V#q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      JSONObject jSONObject0 = new JSONObject(fileDescriptor0);
      JSONObject jSONObject1 = jSONObject0.put("B%[$)(", (long) 11);
      int int0 = jSONObject1.getInt("B%[$)(");
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("-99", (Map<?, ?>) null);
      try { 
        jSONObject1.getInt("-99");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.put("-99", (Map<?, ?>) null);
      try { 
        jSONObject0.getNumber("-99");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject("BQLT2m/Zb\"#e", stringArray0);
      jSONObject0.put("BQLT2m/Zb\"#e", (long) (-2));
      float float0 = jSONObject0.getFloat("BQLT2m/Zb\"#e");
      assertEquals((-2.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("-99", (Map<?, ?>) null);
      try { 
        jSONObject1.getFloat("-99");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("@", (-239.361));
      assertFalse(jSONObject0.isEmpty());
      
      double double0 = jSONObject1.getDouble("@");
      assertEquals((-239.361), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.put("-99", (Map<?, ?>) null);
      try { 
        jSONObject0.getDouble("-99");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      HashMap<BufferedOutputStream, Object> hashMap0 = new HashMap<BufferedOutputStream, Object>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(" z>V#q", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.getBigDecimal(" z>V#q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("WPn.", "{\"] is not an enum of type \":0.0,\"] is not a JSONObject.\":[false,null,99],\"getclone\":true}");
      try { 
        jSONObject1.getBoolean("WPn.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] is not an enum of type \":0.0,\"] is not a JSONObject.\":[falsk,{},99],\"istoUpperCase\":true}");
      JSONObject jSONObject1 = jSONObject0.accumulate("{\"] is not an enum of type \":0.0,\"] is not a JSONObject.\":[falsk,{},99],\"istoUpperCase\":true}", "{\"] is not an enum of type \":0.0,\"] is not a JSONObject.\":[falsk,{},99],\"istoUpperCase\":true}");
      try { 
        jSONObject1.getBigInteger("{\"] is not an enum of type \":0.0,\"] is not a JSONObject.\":[falsk,{},99],\"istoUpperCase\":true}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000032] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1629.13225179));
      assertEquals("-1629.13225179", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("-99", (Map<?, ?>) null);
      BigDecimal bigDecimal0 = new BigDecimal(612);
      jSONObject1.accumulate("-99", bigDecimal0);
      jSONObject0.append("-99", bigDecimal0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      HashMap<Short, Locale.FilteringMode> hashMap0 = new HashMap<Short, Locale.FilteringMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("org.json.JSONException", jSONPointer0);
      Float float0 = new Float((float) (short)48);
      try { 
        jSONObject1.append("org.json.JSONException", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[org.json.JSONException] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"false\":0.0,\"Misplaced endObject.\":[]}");
      JSONArray jSONArray0 = jSONObject0.names();
      jSONObject0.accumulate("Misplaced key.", jSONArray0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Object> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Object>();
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm0 = Formatter.BigDecimalLayoutForm.SCIENTIFIC;
      hashMap0.put(formatter_BigDecimalLayoutForm0, (Object) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      HashMap<BufferedOutputStream, Object> hashMap0 = new HashMap<BufferedOutputStream, Object>();
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)1);
      hashMap0.put((BufferedOutputStream) null, short0);
      // Undeclared exception!
      try { 
        jSONObject0.put("DUuh\"^f N2{vfI4l", (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"y\":7,\"{\":tr=e,\"unscaledValue\":[{}],\"] is not a number.\":99}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at 14 [character 15 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] not a string.\":-1,\"] is not an enum of type \":[[null]],\"ha\":[]}");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(3, map0.size());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("-99", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] not a string.\":{},\"is\":[[],false],\"ha\":[]}");
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("-99");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("D^<%qOF?u@uWxS^95");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Dialog.ModalityType, Float> hashMap0 = new HashMap<Dialog.ModalityType, Float>();
      JSONObject jSONObject1 = jSONObject0.put(" z>V#q", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.getBoolean(" z>V#q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"org.json.JSONObject$Null\":99}");
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "+fJ}}uC v]g|Z");
      // Undeclared exception!
      try { 
        jSONObject0.query("+fJ}}uC v]g|Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "+fJAT}uC v]g|Z");
      try { 
        jSONObject0.put("+fJAT}uC v]g|Z", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull(" z>V#q");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.keys();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 1000000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }
}
