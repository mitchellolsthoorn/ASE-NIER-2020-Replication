/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 14:39:11 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Spliterator;
import java.util.UUID;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      boolean boolean0 = JSONPath.contains((Object) hashMap0, "/Cause/StackTrace/12");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull((-1580386065683472715L), 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("k ", "fastjson.parser.deny.internal", (-1), sQLTransientException0);
      Object object0 = JSONPath.eval((Object) sQLSyntaxErrorException0, "/Cause/StackTrace/0");
      assertNotNull(object0);
      assertEquals("sun.reflect.GeneratedConstructorAccessor305.newInstance(Unknown Source)", object0.toString());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(97, (-938), 55);
      JSONPath jSONPath0 = new JSONPath("between");
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, "vyE=_*Gt(", "vyE=_*Gt(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -17
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("H.\"q,");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      JSONPath jSONPath0 = new JSONPath("e");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(5, 0, (-1025));
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, "-", jSONPath_FilterSegment0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = new JSONPath("SX5];");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-2869), 1726, 1733);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(1733);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_ArrayAccessSegment0, classLoader0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<'3>k.TWls[Rw^Ql");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string\"");
      jSONPath_JSONPathParser0.next();
      jSONPath_JSONPathParser0.readName();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=:StN-z?!4{5`v");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("&4KHy");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("U0ST:W7lV>.$Bf]KrM");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-3851359326990528739L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("7TqU&g0j]fz,zqG");
      jSONPath_JSONPathParser0.readLongValue();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(92);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%%");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("~!Pq%//_2%PG");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string\"");
      String[] stringArray0 = new String[7];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("\"a string\"", stringArray0, true);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_StringInSegement0);
      assertSame(jSONPath_StringInSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("TLX[$V$Y2");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(47, 328, (-4003));
      // Undeclared exception!
      try { 
        JSONPath.set((Object) jSONPath_RangeSegment0, "TLX[$V$Y2", (Object) jSONPath0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. TLX[$V$Y2
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("H.\"q,");
      JSONPath jSONPath0 = JSONPath.compile("H.\"q,");
      jSONPath0.size((Object) jSONPath_NotNullSegement0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Z");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("1.2.68");
      boolean boolean0 = jSONPath0.set((Object) "Z", (Object) sQLTransactionRollbackException0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("z", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("a", serializeConfig0, parserConfig0);
      Object object0 = jSONPath0.eval((Object) serializeConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("RLIKE");
      jSONPath0.init();
      assertEquals("RLIKE", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("4[L~Tf/cmsJgnnZk");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('G');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'G, but '4'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 124, 3179);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, parserConfig0, classLoader0);
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("@type");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '., but 't'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(799, false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("U#Bv]HwTt/*Pmu?", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      int int0 = JSONPath.size((Object) classLoader0, "fastjson.parser.safeMode");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("fastjson.parser.deny.internal");
      Object object0 = JSONPath.reserveToArray(jSONPath_NotNullSegement0, (String[]) null);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      int int0 = jSONPath0.size(object0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      int int0 = jSONPath0.size((Object) "/stack_trace/11");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("resources");
      Byte byte0 = new Byte((byte)93);
      boolean boolean0 = jSONPath0.set((Object) serializeConfig0, (Object) byte0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("3amQ%yU0Kbw;<(;K[6%");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      boolean boolean0 = jSONPath0.set((Object) null, (Object) propertyNamingStrategy0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object object0 = JSONPath.reserveToObject((Object) null, (String[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      SQLDataException sQLDataException0 = new SQLDataException("F73X)lb");
      boolean boolean0 = jSONPath0.removePropertyValue(sQLDataException0, "fastjson.parser.deny", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object object0 = JSONPath.read((String) null, "fastjson.parser.autoTypeSupport");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("/StackTrace/8", "-", 644);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/stackTrace/7", "like", 6, sQLWarning0);
      Set<?> set0 = JSONPath.keySet((Object) sQLTransactionRollbackException0, "/StackTrace/8");
      assertEquals(5, set0.size());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(")");
      Set<?> set0 = jSONPath0.keySet((Object) "y");
      assertFalse(set0.contains(")"));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("LT");
      String[] stringArray0 = new String[6];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("57`jAqvHR2", stringArray0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      Object object0 = jSONPath0.getPropertyValue(jSONPath_FilterSegment0, (String) null, (-1308L));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      Class<Byte> class0 = Byte.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"NOT_LIKE\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":-99}");
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("7TqU&g0j]fz,zqG");
      Object object0 = jSONPath0.getArrayItem((Object) null, (-681));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(">");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(">", "F*j", 2569, (int[]) null);
      int int0 = jSONPath0.evalSize(batchUpdateException0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("\"BfY6CsQ8YUl");
      JSONPath jSONPath0 = JSONPath.compile("\"BfY6CsQ8YUl");
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_NotNullSegement0);
      assertFalse(set0.contains("\"BfY6CsQ8YUl"));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int[] intArray0 = new int[2];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      Object object0 = JSONPath.eval((Object) jSONPath_MultiIndexSegment0, ")");
      assertSame(object0, jSONPath_MultiIndexSegment0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("stackTrace");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      DataTruncation dataTruncation0 = new DataTruncation((-3581), true, true, (-3581), (-3581), batchUpdateException0);
      Object object0 = jSONPath0.eval((Object) dataTruncation0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("NhH%i;");
      boolean boolean0 = JSONPath.containsValue((Object) sQLRecoverableException0, "fastjson.parser.deny.internal", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1900), 1145, 1145, 49, 1145, 1145);
      int int0 = JSONPath.compare(mockGregorianCalendar0, mockGregorianCalendar0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NE;
      int int0 = JSONPath.compare(jSONPath_Operator1, jSONPath_Operator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Short short0 = new Short((short)2851);
      // Undeclared exception!
      try { 
        JSONPath.size((Object) short0, "-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/asmFactory/classLoader/parent/classLoader/parent/domains/0", "/asmFactory/classLoader/parent/classLoader/parent/domains/0");
      JSONPath jSONPath0 = JSONPath.compile("[.");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) sQLClientInfoException0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("g'j {1BrH,nB");
      Float float0 = new Float(0.0F);
      jSONPath0.size((Object) float0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("resources");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SQLWarning sQLWarning0 = new SQLWarning("/asmFactory/classLoader/parent/classLoader/parent/packages/sun.util.resources.it");
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(jSONPath_WildCardSegment0, "fastjson.parser.autoTypeSupport", 2738L, sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("+SGPl6*pa:");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      Integer integer0 = new Integer(1920);
      // Undeclared exception!
      jSONPath0.setPropertyValue(javaBeanDeserializer0, "MuuE vr<_Xx*z", (-3788129019525441317L), integer0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("JhVgQ[");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(propertyNamingStrategy0, "JhVgQ[", 163, "NonStringKeyAsString");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1226);
      JSONPath jSONPath0 = new JSONPath("0mT>vWbG", serializeConfig0, (ParserConfig) null);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_WildCardSegment0, serializeConfig0);
      Short short0 = new Short((short)600);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(short0, "#", 1024, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1226);
      JSONPath jSONPath0 = new JSONPath("0mT>vWbG", serializeConfig0, (ParserConfig) null);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, (Object) null, 1226, "\"V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[=VE");
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(303, 303, 303);
      jSONPath0.set((Object) parserConfig0, (Object) jSONPath_RangeSegment0, true);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) "[=VE", "fastjson.parser.safeMode", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("*");
      SQLDataException sQLDataException0 = new SQLDataException("y!ebzlf/Vn<j30", sQLTimeoutException0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) sQLTimeoutException0, "*", (Object) sQLDataException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Long long0 = new Long(1047L);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_WildCardSegment0, (Object) long0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = JSONPath.compile("(II)Z");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "(II)Z", (Object) parserConfig0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      Integer integer0 = new Integer((-18));
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) classLoader0, (Object) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("SdyE$]BSrcT");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "SdyE$]BSrcT", (Object) "SdyE$]BSrcT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : SdyE$]BSrcT
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "[short";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject("[short", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/stack_trace/11";
      stringArray0[1] = "/stack_trace/11";
      stringArray0[2] = "[true]";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject("[true]", stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "%";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(uUID0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(uUID0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "dalvik";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(javaBeanSerializer0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "3";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray("3", stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/stack_trace/11";
      stringArray0[1] = "/stack_trace/11";
      stringArray0[2] = "[true]";
      Integer integer0 = new Integer(387);
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(integer0, stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("kFd8.`MSHqVe", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(classLoader0, "fastjson.parser.deny.internal", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      jSONPath0.removePropertyValue(jSONPath0, "$#-", false);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("D");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, "D", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, (Object) null, (-1614));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) classLoader0, "stackTrace");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      // Undeclared exception!
      JSONPath.remove((Object) jSONPath0, "qrno");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("[short", "[short", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      boolean boolean0 = JSONPath.remove((Object) jSONPath_FilterSegment0, "[short");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$NotNullSegement");
      Class<Long> class0 = Long.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("/stackTrace/9", (SerializeConfig) null, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-3839), 11, (-3839));
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_RangeSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(")");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/,KRs");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLTransactionRollbackException0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Object object0 = JSONPath.read("\"a string\"", "\"a string\"");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) sQLTimeoutException0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) jSONPath_Operator0, "-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Set<?> set0 = JSONPath.keySet((Object) "#w?/L i,=?d)=", "#w?/L i,=?d)=");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("writeFloat");
      Class<Object> class0 = Object.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) "-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("[true]", serializeConfig0, parserConfig0);
      Object object0 = JSONPath.reserveToArray("illeal jsonpath syntax. ", (String[]) null);
      // Undeclared exception!
      try { 
        jSONPath0.keySet(object0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("*", (SerializeConfig) null, parserConfig0);
      DataTruncation dataTruncation0 = new DataTruncation(72, false, false, 72, 17);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) dataTruncation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[short");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("..");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("+SGPl6*pa:");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. +SGPl6*pa:
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[short");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("3");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      JSONPath jSONPath1 = new JSONPath("/stackTrace/2", serializeConfig0, parserConfig0);
      Class<DataTruncation> class0 = DataTruncation.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath1.getPropertyValues(javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.util.ParameterizedTypeImpl");
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue(class0, "/stackTrace/5", 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("{\"rlike\":\"hello\",\"y\":7,\"z\":\"a string\",\"a\":[],\"b\":99}", (String) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("*", (SerializeConfig) null, parserConfig0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLDataException0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue(sQLTransactionRollbackException0, "SX5];", (-2430L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{g8y#n$");
      Class<JSONPath> class0 = JSONPath.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("vgj\"qBIeJlk&'?~;<", serializeConfig0, (ParserConfig) null);
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("scanLong");
      SQLTransientException sQLTransientException0 = new SQLTransientException("scanLong", "scanLong", 5631);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("scanLong", "QaLqRnKsWV=-q", sQLTransientException0);
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem(sQLRecoverableException0, 5631);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[3];
      // Undeclared exception!
      try { 
        JSONPath.extract("value", "fastjson.parser.safeMode", parserConfig0, 62, featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Feature[] featureArray0 = new Feature[3];
      // Undeclared exception!
      try { 
        JSONPath.extract("}UxXZ~SkHMcRyv", "m", (ParserConfig) null, 3585, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSONPath.extract("wE`OQpu@K+s[b=XKs", "wE`OQpu@K+s[b=XKs", parserConfig0, (-2954), (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : wE`OQpu@K+s[b=XKs
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.parser.autoTypeSupport", "j31V#o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("true", parserConfig0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // true
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(">", parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -3
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{Cg.k2^");
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("processKey", parserConfig0, (-5020));
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2processKey
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(34);
      JSONPath jSONPath0 = new JSONPath("0]a", serializeConfig0, (ParserConfig) null);
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      String[] stringArray0 = new String[1];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("~]B5W1_5Pi+c", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.evalSize("~]B5W1_5Pi+c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("3", "3", jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("3");
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) jSONPath_StringOpSegement0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("yND[,S3f[Z\"", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"NOT_LIKE\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":-99}");
      jSONPath0.eval((Object) "{\"fruit\":\"NOT_LIKE\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":-99}");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(longArray0[0], bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny");
      Long long0 = new Long((-1580386065683472715L));
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(classLoader0, "60DHhHxXN", (-5787L), long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      // Undeclared exception!
      jSONPath0.deepSet(jSONPath0, "tyRUW6CR!z*4G\"=-y", 1434L, "-");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(":}1");
      // Undeclared exception!
      jSONPath0.deepSet(jSONPath0, "c.)!nY+m;:B&{LTU!", (-1477946458560579955L), "c.)!nY+m;:B&{LTU!");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("\"a string\"");
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(javaBeanSerializer0, "Ct'mf$^Z", arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("-", (List<Object>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(")");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLFeatureNotSupportedException0, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-755), false, false, (-2578), (-755));
      JSONPath jSONPath0 = new JSONPath("7TqVU3g0c]fz,zqW");
      Spliterator<Throwable> spliterator0 = dataTruncation0.spliterator();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(spliterator0, arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path 7TqVU3g0c]fz,zqW
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      boolean boolean0 = JSONPath.containsValue((Object) sQLClientInfoException0, "[]", (Object) parserConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("c", "fastjson.parser.autoTypeAccept", 2);
      JSONPath.containsValue((Object) classLoader0, "[99,null]", (Object) sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("[short", "[short", jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("[short");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) jSONPath_StringOpSegement0, (Object) jSONPath_SizeSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("cGS*']", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) parserConfig0, (Object) serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. cGS*']
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) class0, "I.7wA7^nQ+yhn=5/hPt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      JSONPath.contains((Object) sQLInvalidAuthorizationSpecException0, "l[,7Dn0k`tU");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) "", "fastjson.parser.deny.internal");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) jSONPath0, "miXdbexQkP\"{Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : miXdbexQkP\"{Y
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      // Undeclared exception!
      try { 
        JSONPath.compare(jSONPath_MinSegment0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) sQLNonTransientConnectionException0, objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONPath jSONPath0 = JSONPath.compile("..");
      jSONPath0.arrayAdd((Object) "'D{)8^l:-OCG[|{r", (Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) "/cause/stackTrace/9", "[short", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path [short
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null, serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("C9 !JlFX;", serializeConfig0, parserConfig0);
      DataTruncation dataTruncation0 = new DataTruncation((-1310), false, true, 3863, 3863);
      jSONPath0.deepSet(serializeConfig0.propertyNamingStrategy, "fastjson.parser.deny", (-1346L), dataTruncation0);
      assertEquals("01004", dataTruncation0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("lexer");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem((JSONPath) null, sQLClientInfoException0, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLClientInfoException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("`0DHhHxXN");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("`0DHhHxXN", false);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      jSONPath_PropertySegment0.setValue(jSONPath0, jSONPath_SizeSegment0, jSONPath_SizeSegment0);
      assertEquals("`0DHhHxXN", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("*", false);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, parserConfig0, jSONPath0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("1.2.68");
      jSONPath_JSONPathParser0.readValue();
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(2, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("UYV");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(1, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\\-");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. \\-
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" \"(oYs/]z");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1136);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$IntInSegement", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "[false]", (Object) parserConfig0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "rB'=P", (Object) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Float float0 = new Float((float) 1024);
      JSONPath jSONPath0 = new JSONPath("y@J7ZR");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) float0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/StackTrace/7");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/StackTrace/7", "null", 4003);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("/asmFactory/classLoader/parent/classLoader/parent/packages/sun.util.resources.zh", serializeConfig0, parserConfig0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/asmFactory/classLoader/parent/classLoader/parent/packages/sun.util.resources.zh");
      boolean boolean0 = jSONPath0.remove((Object) sQLTimeoutException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("$Br]eC< q[*y2)W");
      jSONPath0.arrayAdd((Object) null, (Object[]) null);
      assertEquals("$Br]eC< q[*y2)W", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath jSONPath0 = JSONPath.compile("java.util.HashMap");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("stack");
      jSONPath0.arrayAdd((Object) sQLTransientConnectionException0, (Object[]) stringArray0);
      assertEquals("java.util.HashMap", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      JSONPath jSONPath0 = new JSONPath(")");
      Byte byte0 = new Byte((byte)101);
      boolean boolean0 = jSONPath0.containsValue((Object) aSMDeserializerFactory0, (Object) byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("(");
      JSONPath jSONPath0 = JSONPath.compile("(");
      boolean boolean0 = jSONPath0.contains((Object) jSONPath_JSONPathParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(2763);
      JSONPath jSONPath0 = new JSONPath("/Cause/StackTrace/4", serializeConfig0, (ParserConfig) null);
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int[] intArray0 = new int[3];
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", serializeConfig0, parserConfig0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.alibaba.fastjson.parser.JSONScanner", "", 3179, intArray0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.BatchUpdateException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":false,\"value\":true,\"value2\":false,\"number\":\"1\"}");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("%PHV;=)7\"d-:.\":Xj");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-162));
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, jSONReaderScanner0.matchStat, "WriteTabAsSpecial");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Float float0 = new Float(1323.0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "RLIKE";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject(float0, stringArray0);
      assertEquals(0, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToObject(uUID0, stringArray0);
      assertEquals("00000000-0100-4000-8200-000003000000", object0.toString());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "3";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray((Object) null, stringArray0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray((Object) null, stringArray0);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$RefOpSegement");
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath jSONPath0 = JSONPath.compile("y{kQc>:y6k#v[5?");
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_Operator0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      Set<?> set0 = jSONPath0.keySet((Object) "avR4D[>+");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath jSONPath0 = new JSONPath("/asmFactory/classLoader/parent/classLoader/packages/com.thoughtworks.xstream.core", serializeConfig0, (ParserConfig) null);
      int int0 = jSONPath0.evalSize("`0DHhHxXN");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("fastjson.parser.deny.internal");
      Object object0 = JSONPath.reserveToArray(jSONPath_NotNullSegement0, (String[]) null);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("/asmFactory/classLoader/parent/classLoader/parent/defaultDomain/codesource", serializeConfig0, (ParserConfig) null);
      int int0 = jSONPath0.evalSize(object0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("\"a string\"");
      Collection<Object> collection0 = jSONPath0.getPropertyValues("l");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(collection0, "a string\"", false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("`0DHhHxXN");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("`0DHhHxXN", false);
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("[short", hashMap0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("[short", true);
      JSONPath jSONPath0 = JSONPath.compile("[short");
      jSONPath_PropertySegment0.remove(jSONPath0, sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("fastjson.parser.deny.internal");
      Object object0 = JSONPath.reserveToArray(jSONPath_NotNullSegement0, (String[]) null);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      boolean boolean0 = jSONPath0.set(object0, (Object) jSONPath_NotNullSegement0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("vz'");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("fastjson.parser.autoTypeSupport", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, (Throwable) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONPath0.deepSet(sQLClientInfoException0, "vz'", 0L, bigInteger0);
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("yyyy\u5E74M\u6708d\u65E5");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("yyyy\u5E74M\u6708d\u65E5");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("yyyy\u5E74M\u6708d\u65E5", sQLTransientConnectionException0);
      jSONPath0.deepSet((Object) null, "yyyy\u5E74M\u6708d\u65E5", (-3530L), sQLFeatureNotSupportedException0);
      assertEquals("yyyy\u5E74M\u6708d\u65E5", sQLFeatureNotSupportedException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("$Br]eC< q[*y2)W");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      jSONPath0.deepScan(serializeConfig0.propertyNamingStrategy, (String) null, (List<Object>) null);
      assertEquals("$Br]eC< q[*y2)W", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("pbbJ$");
      DataTruncation dataTruncation0 = new DataTruncation((-598), false, false, (-598), 58, sQLWarning0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Map<String, Object> map0 = JSONPath.paths((Object) dataTruncation0, serializeConfig0);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/9");
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(map0, "pbbJ$", (List<Object>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path /stackTrace/9, segement pbbJ$
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("wE`OQpu@K+s[b=XKs", hashMap0);
      SQLWarning sQLWarning0 = new SQLWarning(sQLClientInfoException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("like", "stack", 65, sQLWarning0);
      JSONPath jSONPath0 = new JSONPath(")");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(sQLInvalidAuthorizationSpecException0, "#^5>r%r~?T j'=m,bi", (List<Object>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path ), segement #^5>r%r~?T j'=m,bi
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Object object0 = JSONPath.eval((Object) mockGregorianCalendar0, "/asmFactory/classLoader/parent/classLoader/parent/packages/sun.util.resources.zh");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[] intArray0 = new int[3];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("mark_context", intArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "stackTrace";
      stringArray0[1] = "stackTrace";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject(batchUpdateException0, stringArray0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Double double0 = new Double(39L);
      boolean boolean0 = JSONPath.eqNotNull(double0, double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Float float0 = Float.valueOf((float) 0);
      boolean boolean0 = JSONPath.eqNotNull(0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-4503L));
      Float float0 = Float.valueOf((float) (byte)67);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Float float0 = new Float(1301.116943359375);
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = JSONPath.eqNotNull(float0, bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Float float0 = new Float(0.0F);
      boolean boolean0 = JSONPath.eqNotNull(float0, 799);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Long long0 = new Long((short)2738);
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Long long0 = new Long((short)2738);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(long0, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Integer integer0 = new Integer(831);
      Short short0 = new Short((short)82);
      boolean boolean0 = JSONPath.eqNotNull(integer0, short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-57));
      BigDecimal bigDecimal0 = new BigDecimal((double) 2569);
      boolean boolean0 = JSONPath.eqNotNull(byte0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(37);
      Integer integer0 = new Integer(1161);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Integer integer0 = new Integer((short)2738);
      Short short0 = new Short((short)2738);
      boolean boolean0 = JSONPath.eq(integer0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("`0DHhHxXN");
      Integer integer0 = new Integer(831);
      boolean boolean0 = JSONPath.eq(integer0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      boolean boolean0 = JSONPath.eq(" }jkM", "F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      boolean boolean0 = JSONPath.eq("=kaCu14", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1226);
      JSONPath jSONPath0 = new JSONPath("0mT>vWbG", serializeConfig0, (ParserConfig) null);
      boolean boolean0 = JSONPath.eq((Object) null, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("-?Lv76tA^j", true);
      boolean boolean0 = JSONPath.eq(jSONPath_PropertySegment0, jSONPath_PropertySegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("LKI$kR[g I(");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "/stackTrace/10", 95, hashMap0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLClientInfoException0);
      Class<SQLWarning> class0 = SQLWarning.class;
      String[] stringArray0 = new String[2];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues((Object) null);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLDataException0, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("tT_N");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      jSONPath0.deepGetPropertyValues(arrayList0, arrayList0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(9);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.util.ParameterizedTypeImpl", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(jSONPath_Operator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("vz'");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Collection<Object> collection0 = jSONPath0.getPropertyValues(hashMap0);
      assertFalse(collection0.contains("vz'"));
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      JSONPath jSONPath0 = JSONPath.compile("=:StN-z?!4{5`v");
      Collection<Object> collection0 = jSONPath0.getPropertyValues(arrayList0);
      assertFalse(collection0.contains("=:StN-z?!4{5`v"));
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/StackTrace/7");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("LU");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/StackTrace/7", sQLInvalidAuthorizationSpecException0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "vA&\"NE1W ";
      stringArray0[1] = "LU";
      stringArray0[2] = "/StackTrace/7";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLTimeoutException0, (Object) jSONPath_MultiPropertySegment0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("ml", serializeConfig0, parserConfig0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("fastjson.parser.deny", "*,", (-3242));
      Object object0 = JSONPath.reserveToArray(sQLRecoverableException0, (String[]) null);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, object0, (-3242), "Nm");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, parserConfig0, (-3126), javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.parser.ParserConfig
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = new JSONPath("j?OF0wum^M/'tJ`UDX");
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, " ,UWSV@", "{\"=$E&nNc]7g1UPLQ?\":true}");
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      Object object0 = JSONPath.eval((Object) map0, "-");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("$Br]eC< q[*y2)W");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("fastjson.parser.autoTypeAccept", parserConfig0, false);
      DataTruncation dataTruncation0 = new DataTruncation(219, false, true, (-3), 219);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("1.2.68");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue(3089);
      assertEquals(3090.0, double0, 0.01);
      
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_ValueSegment0, jSONPath_ValueSegment0, false);
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, dataTruncation0, (Object) null, jSONPath_Segment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("", "", jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringOpSegement0, jSONPath_StringOpSegement0, false);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("OKQ{bTWV", serializeConfig0, parserConfig0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, "", (Object) null, jSONPath_WildCardSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("{\"rlike\":\"hello\",\"y\":7,\"z\":\"a string\",\"a\":[],\"b\":99}", (-2639L), jSONPath_Operator0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("*", (SerializeConfig) null, parserConfig0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntOpSegement0, jSONPath_IntOpSegement0, true);
      Locale locale0 = Locale.TAIWAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, (Object) null, mockGregorianCalendar0, parserConfig0.propertyNamingStrategy);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("[short", "[short", jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("/cause/stackTrace/9");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringOpSegement0, jSONPath_StringOpSegement0, true);
      Byte byte0 = new Byte((byte)108);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, fileSystemHandling0, byte0, jSONPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("fastjson.parser.deny", "rBG='=P", true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RlikeSegement0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, parserConfig0, sQLTransientException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("\"BfY6CsQ8YUl");
      JSONPath jSONPath0 = JSONPath.compile("\"BfY6CsQ8YUl");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/asmFactory/classLoader/parent", "/asmFactory/classLoader/parent");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, sQLTimeoutException0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("@type", (-5472097725414717105L), jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("@type", serializeConfig0, parserConfig0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(512);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, aSMDeserializerFactory0, jSONPath_ArrayAccessSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("yK", jSONPath0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_MultiIndexSegment0, jSONPath0);
      assertSame(object0, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("$Br]eC< q[*y2)W");
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("fastjson.parser.autoTypeAccept", parserConfig0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      DataTruncation dataTruncation0 = new DataTruncation(219, false, true, (-3), 219);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, dataTruncation0, dataTruncation0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("{\"rlike\":\"hello\",\"y\":7,\"z\":\"a string\",\"a\":[],\"b\":99}", (-2660L), jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("{\"rlike\":\"hello\",\"y\":7,\"z\":\"a string\",\"a\":[],\"b\":99}");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, propertyNamingStrategy0, "{\"rlike\":\"hello\",\"y\":7,\"z\":\"a string\",\"a\":[],\"b\":99}");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "com.alibaba.fastjson.JSONPath$Operator", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("H.\"q,");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      JSONPath jSONPath0 = JSONPath.compile("H.\"q,");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("/stack-trace/8", "PELYg{X8]&!", 1);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, "/stack-trace/8", sQLRecoverableException0);
      assertNotNull(jSONArray0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("[short", "[short", jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("[short");
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, "[short", "[short", jSONPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("vz'", "vz'", jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("vz'");
      Float float0 = new Float((float) 1708);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, float0, jSONPath0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement(".", "/StackTrace/12", true);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$FilterSegment");
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, (Object) null, (Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("fastjson.parser.deny.internal");
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      Object object0 = JSONPath.reserveToArray(jSONPath_NotNullSegement0, (String[]) null);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("fastjson.parser.deny", "rBG='=P", false);
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, jSONPath_MultiIndexSegment0, sQLTransientException0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "7nsupportd}class ";
      stringArray0[1] = "7nsupportd}class ";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("7nsupportd}class ", "]<-]W.C_{:f#1]1", "]<-]W.C_{:f#1]1", stringArray0, false);
      JSONPath jSONPath0 = new JSONPath("7nsupportd}class ");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(21);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("s^tSfAu", sQLFeatureNotSupportedException0);
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, jSONPath_ArrayAccessSegment0, sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("s^tSfAuF", "s^tSfAuF", (String) null, stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.safeMode", "Cause", "E}zx1s!qSI{", (String[]) null, false);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.autoTypeAccept", (String) null, "fastjson.parser.deny.internal", (String[]) null, true);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("\"BfY6CsQ8YUl");
      JSONPath jSONPath0 = JSONPath.compile("\"BfY6CsQ8YUl");
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("\"BfY6CsQ8YUl", jSONPath_MinSegment0, jSONPath_Operator0);
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, jSONPath_NotNullSegement0, jSONPath0, jSONPath_MinSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath jSONPath0 = new JSONPath("+SGPl6*pa:");
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("MuuE vr<_Xx*z", 44, jSONPath_Operator0);
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, (Object) null, jSONPath_Operator0, "+SGPl6*pa:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("\"a string\"");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("a string\"", (-3851359326990528739L), jSONPath_Operator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("a string\"", "'@ BR])}zRzJAfA'", 185);
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, jSONPath_Operator0, sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String[] stringArray0 = new String[1];
      int[] intArray0 = new int[5];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("'D{)8^l:-OCG[|{r", "{\"rlike\":\"hello\",\"y\":7,\"unsupported set operation.\":\"a string\",\"a\":[],\"b\":99}", intArray0);
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("{\"rlike\":\"hello\",\"y\":7,\"unsupported set operation.\":\"a string\",\"a\":[],\"b\":99}", stringArray0, false);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("?\"}or.x-PR=k713", serializeConfig0, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/StackTrace/6", true);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(batchUpdateException0);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, jSONPath_PropertySegment0, "'D{)8^l:-OCG[|{r", sQLSyntaxErrorException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "scanDate";
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("'D{)8^l:-OCG[|{r", "a_", intArray0);
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement(":WV;yI", stringArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$IntObjInSegement");
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, batchUpdateException0, "scanDate", "com.alibaba.fastjson.JSONPath$IntObjInSegement");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("|!0SKw$tIk,ID]+JI", stringArray0, true);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("|!0SKw$tIk,ID]+JI", serializeConfig0, parserConfig0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("{BaB`", "`Yl|Ij5(_\"BD`9");
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "|!0SKw$tIk,ID]+JI", sQLTimeoutException0, sQLTimeoutException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "'D{)8^l:-OCG[|{r";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = new JSONPath("{\"rlike\":\"hello\",\"y\":7,\"z\":\"a string\",\"a\":[],\"b\":99}");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Long[] longArray0 = new Long[2];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("Z-MC3RJvg2", longArray0, true);
      Double double0 = new Double(29.0);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, jSONPath_MultiPropertySegment0, sQLFeatureNotSupportedException0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("$ref");
      Long long0 = new Long((short)2738);
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("$ref", longArray0, false);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, long0, long0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("$ref");
      Long long0 = new Long((short)2738);
      Long[] longArray0 = new Long[1];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("$ref", longArray0, false);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, long0, long0, long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("$Br]eC< q[*y2)W");
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      Object object0 = JSONPath.reserveToArray(parserConfig0, (String[]) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("$Br]eC< q[*y2)W", "fastjson.parser.autoTypeSupport", 219);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransactionRollbackException0);
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("$Br]eC< q[*y2)W", (Long[]) null, true);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/cause/cause/stackTrace/12", (String) null);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, sQLIntegrityConstraintViolationException0, sQLTransientConnectionException0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("/cVtyx'4wZ;bK", (-1188L), (-1188L), true);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("/cVtyx'4wZ;bK", serializeConfig0, parserConfig0);
      Long long0 = new Long((-1188L));
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, parserConfig0, parserConfig0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("fastjson.parser.deny.internal");
      Object object0 = JSONPath.reserveToArray(jSONPath_NotNullSegement0, (String[]) null);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("yyyy-MM-dd HH:mm:ss", 989, 989, true);
      SQLDataException sQLDataException0 = new SQLDataException();
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, sQLDataException0, sQLInvalidAuthorizationSpecException0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(10, 10, 1649);
      JSONPath jSONPath0 = new JSONPath("LT");
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, (Object) null);
      assertNotNull(arrayList0);
      
      long[] longArray0 = new long[7];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("vyE=_*Gt(", longArray0, false);
      Short short0 = new Short((short)5405);
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, short0, arrayList0, arrayList0);
      assertFalse(boolean0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("7En(@4q`V;Z((p)N6");
      Collection<Object> collection0 = jSONPath0.getPropertyValues("7En(@4q`V;Z((p)N6");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("7En(@4q`V;Z((p)N6", "7En(@4q`V;Z((p)N6", false);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, collection0, jSONPath0, serializeConfig0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("/cause/stackTrace/10", "/cause/stackTrace/10", true);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/7");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, mockGregorianCalendar0, jSONPath0, locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("|6=$_j_-2tl6~)", (Object) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("|6=$_j_-2tl6~)");
      JSONPath jSONPath0 = JSONPath.compile("|6=$_j_-2tl6~)");
      SQLWarning sQLWarning0 = new SQLWarning();
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, jSONPath_MaxSegment0, sQLWarning0, "|6=$_j_-2tl6~)");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("\"BfY6CsQ8YUl");
      JSONPath jSONPath0 = JSONPath.compile("\"BfY6CsQ8YUl");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, "\"BfY6CsQ8YUl", (Object) null, sQLNonTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("(&");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1128, (-1740), 1128);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, classLoader0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSONPath.extract("+SGPl6*pa:", "*", parserConfig0, 36, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.JSONPath$WildCardSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath0, fileSystemHandling0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("NWVoWKfzoNRjI:s|");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("l", true);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.setValue(jSONPath0, jSONPath_WildCardSegment0, "NWVoWKfzoNRjI:s|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[=^;NMnPLsOu'f<` ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[=^;NMnPLsOu'f<` ", 11);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json : 
         //
         verifyException("com.alibaba.fastjson.JSONPath$PropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[[]]", parserConfig0);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/3");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 2, line 1, column 3[[]]
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[99,null]", parserConfig0);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/3");
      Object object0 = jSONPath0.extract(defaultJSONParser0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("@");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("@", true);
      Byte byte0 = new Byte((byte)36);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("dalvik", "com.alibaba.fastjson.parmer.deserialier.EnumDserializer", true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RlikeSegement0);
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, byte0, jSONPath_FilterSegment0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Float float0 = new Float(0.0F);
      // Undeclared exception!
      try { 
        JSONPath.compare(float0, sQLTransactionRollbackException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLTransactionRollbackException cannot be cast to java.lang.Float
         //
         verifyException("java.lang.Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Integer integer0 = new Integer(3653);
      Byte byte0 = new Byte((byte)127);
      // Undeclared exception!
      try { 
        JSONPath.compare(integer0, byte0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Long long0 = new Long(3089);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      // Undeclared exception!
      try { 
        JSONPath.compare(long0, jSONPath_Operator0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath$Operator cannot be cast to java.lang.Long
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      int int0 = JSONPath.compare("*", "/stack_trace/11");
      assertEquals((-5), int0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSONPath.compare(parserConfig0, "nin");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.parser.ParserConfig cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath jSONPath0 = JSONPath.compile("ZBF~KC%wqGo");
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, hashMap0, jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("|6=$_j_-2tl6~)");
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, "|6=$_j_-2tl6~)", jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("dd");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement(":\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("c", "fastjson.parser.autoTypeAccept", 2);
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) classLoader0, "[99,99]", (Object) sQLSyntaxErrorException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"BfY6CsQ8YUl");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("\"BfY6CsQ8YUl");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string\"");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":null,\"b\":{}}");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":null,\"b\":", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("between");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("in");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("RLIKE");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("like");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nin");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(">=UkLW=fK5N");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<SM|7{");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("R1s2!zS(&O");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but 'z'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("e9C=dJpv/");
      jSONPath_JSONPathParser0.readSegement();
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("+SGPl6*pa:");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nin");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // nin
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'D{)8^l:-OCG[|{r");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '', but 'r'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string\"");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals("a string\"", object0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{a[0>7$2");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("C9 !JlFX;");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(2487L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("0000-00-00 00:00:00.000000000");
      long long0 = jSONPath_JSONPathParser0.readLongValue();
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertTrue(object0.equals((Object)long0));
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) mockGregorianCalendar0, "[-99]");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      boolean boolean0 = JSONPath.containsValue((Object) "l5E1<1?owo5 1t9u", "/Type/AnnotatedSuperclass/Type/AnnotatedInterfaces/0/AnnotatedActualTypeArguments/0/Type/AnnotatedSuperclass/Type/DeclaredMethods/1/AnnotatedExceptionTypes/0/Type/AnnotatedSuperclass/Type/Constructors/1/AnnotatedParameterTypes/0/Type/AnnotatedInterfaces/2/Type/DeclaredMethods/1/AnnotatedReturnType/Type/AnnotatedInterfaces/0/AnnotatedActualTypeArguments/0/Type/AnnotatedSuperclass/Type/Methods/12/AnnotatedReturnType/Type/RawType/DeclaredClasses/0/DeclaredConstructors/0/AnnotatedParameterTypes/0/Type/RawType/Classes/0/DeclaredMethods/5/AnnotatedParameterTypes/0/Type/DeclaredFields/1/AnnotatedType/AnnotatedActualTypeArguments/0", (Object) jSONPath_WildCardSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("zJrw>pHr(oC|<OX1z,");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(879, 879, 6);
      JSONPath jSONPath0 = new JSONPath("..");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_RangeSegment0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("}");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      Set<?> set0 = jSONPath0.evalKeySet(parserConfig0);
      Map<String, Object> map0 = JSONPath.paths((Object) set0);
      assertEquals(10, map0.size());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1024, true);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) serializeConfig0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put("(=}F)q*V6", clientInfoStatus0);
      Map<String, Object> map0 = JSONPath.paths((Object) hashMap0);
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, (Map<String, String>) null);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("\"xa string\"");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\"xa string\"";
      stringArray0[1] = "\"xa string\"";
      stringArray0[2] = "F73X)lb";
      stringArray0[3] = "\"xa string\"";
      stringArray0[4] = "\"xa string\"";
      stringArray0[5] = "\"xa string\"";
      stringArray0[6] = "\"xa string\"";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      boolean boolean0 = jSONPath0.setPropertyValue(jSONPath_MultiPropertySegment0, "length", 6534946468240507089L, "F73X)lb");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "/stack_trace/4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = new JSONPath(")");
      MockDate mockDate0 = new MockDate(1521, (-4872), 12, (-3925), (-1612162890), 1521);
      boolean boolean0 = jSONPath0.set((Object) mockDate0, (Object) classLoader0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_Operator0, (Object) "false");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "'");
      SQLTransientException sQLTransientException0 = new SQLTransientException("~*(*", "~*(*", 63, sQLIntegrityConstraintViolationException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "Lz#~", 2676, sQLTransientException0);
      boolean boolean0 = JSONPath.set((Object) null, "(=}F)q*V6", (Object) sQLFeatureNotSupportedException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, parserConfig0);
      BigDecimal bigDecimal0 = new BigDecimal((double) 7);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) bigDecimal0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("Cause");
      boolean boolean0 = jSONPath0.remove((Object) parserConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      boolean boolean0 = JSONPath.remove((Object) locale0, "com.alibaba.fastjson.serializer.FloatCodec");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("$ref");
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(")");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("stack");
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) sQLTransientConnectionException0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.sql.SQLTransientConnectionException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("*", false);
      Object[] objectArray0 = new Object[2];
      jSONPath0.arrayAdd((Object) jSONPath_PropertySegment0, objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("*", false);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath_PropertySegment0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path fastjson.parser.autoTypeAccept
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Integer integer0 = new Integer(112);
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) integer0, "JhVgQ[", (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path JhVgQ[
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/");
      Object[] objectArray0 = new Object[4];
      jSONPath0.arrayAdd((Object) null, objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSONPath.arrayAdd((Object) "|!0SKw$tIk,ID]+JI", "|!0SKw$tIk,ID]+JI", (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath jSONPath0 = JSONPath.compile("$ref");
      Set<?> set0 = jSONPath0.keySet((Object) hashMap0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("WmGz[");
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("writeFloat");
      Class<Double> class0 = Double.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      int int0 = jSONPath0.size((Object) javaBeanDeserializer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("D");
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      Float float0 = new Float(0.0F);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) float0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/StackTrace/7");
      boolean boolean0 = jSONPath0.containsValue((Object) "/StackTrace/7", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("vz'", serializeConfig0, parserConfig0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      boolean boolean0 = jSONPath0.containsValue((Object) bigDecimal0, (Object) "vz'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-1093059223), true, true, (-886), (-886));
      boolean boolean0 = JSONPath.contains((Object) dataTruncation0, "/stackTrace/7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "'D{)8^l:-OCG[|{r";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = new JSONPath("{\"rlike\":\"hello\",\"y\":7,\"z\":\"a string\",\"a\":[],\"b\":99}");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      DataTruncation dataTruncation0 = new DataTruncation((-1091), false, true, (-1091), (-1091), sQLFeatureNotSupportedException0);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, dataTruncation0, sQLFeatureNotSupportedException0);
      boolean boolean0 = JSONPath.contains((Object) arrayList0, "p");
      assertFalse(boolean0);
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(3, false);
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      JSONPath jSONPath0 = new JSONPath("com.google.common.collect.LinkedHashMultimap", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.contains((Object) parserConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("$Br]eC< q[*y2)W");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"/cause/stackTrace/6\":39.0,\"x\":99}", parserConfig0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      Object object0 = jSONPath0.extract(defaultJSONParser0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("7TqU&g0j]fz,zqG");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.isRef();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/0");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, parserConfig0);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("fastjson.parser.autoTypeAccept", "fastjson.parser.autoTypeSupport", false);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) serializeConfig0, (Object) jSONPath_RlikeSegement0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("JhVgQ[");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, jSONPath0, batchUpdateException0);
      Object object1 = jSONPath0.eval(object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement(".", "/StackTrace/12", true);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$FilterSegment");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("parent", "parent");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLNonTransientConnectionException0, (Object) jSONPath_RlikeSegement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("MunuE vr<_Xx*z", 44);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("+SGPl6*pa:", pattern0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("+SGPl6*pa:");
      Double double0 = new Double(44);
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, jSONPath_Operator0, double0, "MunuE vr<_Xx*z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("o`!]U", "8");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("b30*}_2=");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('3', char0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/StackTrace/7");
      boolean boolean0 = jSONPath0.set((Object) "/StackTrace/7", (Object) "/StackTrace/7", false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) null);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) sQLTransactionRollbackException0, "/stackTrace/9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(10);
      JSONPath jSONPath0 = JSONPath.compile("{\"x\":\"hello\",\"y\":7,\"z\":true,\"b\":{}}");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.eval(jSONPath0, "{\"x\":\"hello\",\"y\":7,\"z\":true,\"b\":{}}", jSONPath_SizeSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("domains", "domains");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2domains
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("dalvik");
      String string0 = jSONPath0.getPath();
      assertEquals("dalvik", string0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("internal");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("#w?/L i,=?d)=", "#w?/L i,=?d)=");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2#w?/L i,=?d)=
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Set<?> set0 = JSONPath.keySet((Object) null, "{\"/stackTrace/0\":[],\"size\":true,\"color\":\"Red\",\"com.alibaba.fastjson.serializer.ByteBufferCodec\":true,\"value2\":-99,\"number\":\"1\"}");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("D", true);
      boolean boolean0 = JSONPath.set((Object) jSONPath_PropertySegment0, "D", (Object) jSONPath_PropertySegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      long[] longArray0 = new long[2];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("/", longArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("/");
      BigDecimal bigDecimal0 = new BigDecimal((double) 208L);
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, "/", jSONPath0, bigDecimal0);
      assertFalse(boolean0);
  }
}
