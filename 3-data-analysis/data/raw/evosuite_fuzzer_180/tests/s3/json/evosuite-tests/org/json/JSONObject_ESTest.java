/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 13:43:49 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Desktop;
import java.awt.Dialog;
import java.awt.GraphicsDevice;
import java.awt.Window;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.Proxy;
import java.net.StandardProtocolFamily;
import java.sql.ClientInfoStatus;
import java.sql.PseudoColumnUsage;
import java.sql.RowIdLifetime;
import java.time.DayOfWeek;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.swing.JTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("\"\"");
      assertEquals("\"\"", object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0");
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("-.yM`17IBPxA6");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("#Cmf");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [#Cmf] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("9l!'^9+");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}%\"_xG+U4n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockFile mockFile0 = new MockFile("getClass");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      JSONObject.indent(mockFileWriter0, (-279));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"fruit\":\".\",\"size\":null,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"org.json.JSONPointer$Builder\":\"a string\"}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(7, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      JSONObject jSONObject0 = new JSONObject(set0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Float float0 = new Float(576.5789F);
      HashMap<SequenceInputStream, StandardProtocolFamily> hashMap0 = new HashMap<SequenceInputStream, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.accumulate("pointer cannot be null", float0);
      try { 
        jSONObject0.getBigInteger("pointer cannot be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("2428.2383472500173");
      assertEquals((short)2428, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JSONObject jSONObject0 = new JSONObject(pipedInputStream0);
      JSONObject jSONObject1 = jSONObject0.putOnce("", jSONObject0);
      Object object0 = jSONObject1.remove("");
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(":b", (-1741));
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("java.lang.Long@0000000008.");
      String string0 = jSONObject0.optString("java.lang.Long@0000000008.");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.addLast("Ia&24Dq");
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Integer integer0 = new Integer((-1544));
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery("");
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JSONObject jSONObject0 = new JSONObject(pipedInputStream0);
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      Number number0 = jSONObject0.optNumber("A_yl", (Number) bigDecimal0);
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal((-1579));
      Number number0 = jSONObject0.optNumber((String) null, (Number) bigDecimal0);
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      long long0 = jSONObject0.optLong("Mipaced object.", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt(":b", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<GraphicsDevice.WindowTranslucency, Dialog.ModalityType> hashMap0 = new HashMap<GraphicsDevice.WindowTranslucency, Dialog.ModalityType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("]", 0.0F);
      double double0 = jSONObject0.optDouble("]", Double.NaN);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("' and instead saw ''", stringArray0);
      jSONObject0.putOnce("0", "0");
      double double0 = jSONObject0.optDouble("0");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Float float0 = new Float(576.5789F);
      HashMap<SequenceInputStream, StandardProtocolFamily> hashMap0 = new HashMap<SequenceInputStream, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("pointer cannot be null", float0);
      double double0 = jSONObject1.optDouble("pointer cannot be null");
      assertEquals(576.5789184570312, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("pointer cannot be null", stringArray0);
      jSONObject0.put("pointer cannot be null", true);
      boolean boolean0 = jSONObject0.optBoolean("pointer cannot be null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(4548);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("Misplaced endArray.", bigInteger0);
      assertEquals((byte)0, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(byteArrayOutputStream0, stringArray0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("\n", bigDecimal0);
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("getavailable", bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JSONObject jSONObject0 = new JSONObject(pipedInputStream0);
      JSONObject jSONObject1 = jSONObject0.put("", false);
      boolean boolean0 = jSONObject1.isNull("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("m");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("pointer cannot be null", 1L);
      long long0 = jSONObject1.getLong("pointer cannot be null");
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JSONObject jSONObject0 = new JSONObject(pipedInputStream0);
      JSONObject jSONObject1 = jSONObject0.accumulate("A_yl", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Double double0 = new Double(93);
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, double0, (-1560), 1223);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 3374, 45);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Short short0 = new Short((short) (-4106));
      hashMap0.put((Float) null, short0);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<Map.Entry<Float, Short>> set0 = (Set<Map.Entry<Float, Short>>)hashMap0.entrySet();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      jSONArray0.put((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote("L^uxK7%xPbX", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<JTable.PrintMode, MockFileOutputStream> hashMap0 = new HashMap<JTable.PrintMode, MockFileOutputStream>();
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<StandardProtocolFamily, Integer> hashMap0 = new HashMap<StandardProtocolFamily, Integer>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<BigInteger, Object> hashMap0 = new HashMap<BigInteger, Object>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 1.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 2335.94);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Dialog.ModalExclusionType, PipedInputStream> hashMap0 = new HashMap<Dialog.ModalExclusionType, PipedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 79);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Double double0 = new Double(1450.462316728);
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getNumber(":b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, roundingMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(9);
      JSONTokener jSONTokener0 = new JSONTokener(pipedReader0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("F/NN", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name F/NN, locale it
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-2303));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2303
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("TLNfy';i$1gq,&z ");
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0, 209, (-2440));
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(":b", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".");
      Writer writer0 = jSONObject1.write((Writer) mockPrintWriter0, (-1629), 780);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("_rF+czZg;");
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockPrintStream0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Object object0 = JSONObject.wrap(boolean0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("3");
      Object object0 = JSONObject.wrap(number0);
      assertEquals(3, object0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object object0 = JSONObject.wrap("getCl8ass");
      assertEquals("getCl8ass", object0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Object object0 = JSONObject.wrap(locale_FilteringMode0);
      assertSame(locale_FilteringMode0, object0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2154, 1114.2389F);
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<PseudoColumnUsage> linkedList0 = new LinkedList<PseudoColumnUsage>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.put(32, Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      JSONObject.testValidity(class0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject.testValidity(double0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("3");
      assertEquals(3, object0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("3wqJw%6X2BR?");
      assertEquals("3wqJw%6X2BR?", object0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("false");
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("true");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.quote(",W(>0Qooxii,B*5/(", (Writer) charArrayWriter0);
      assertEquals(19, charArrayWriter0.size());
      assertEquals("\",W(>0Qooxii,B*5/(\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("rW|j<Bkf]6Z>-+", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      Writer writer0 = JSONObject.quote("\b", (Writer) mockPrintWriter0);
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("p4u=0WI{!.Tks");
      Writer writer0 = JSONObject.quote("rLJ{#Eb]^0\"~\"QtS", (Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.quote("", (Writer) charArrayWriter0);
      assertEquals("\"\"", charArrayWriter0.toString());
      assertEquals(2, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("_t*XV", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOnce("Expected a ',' or '}'", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<BigInteger, Object> hashMap0 = new HashMap<BigInteger, Object>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Boolean boolean0 = new Boolean("~");
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, boolean0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 65);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) bufferedWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("] is not an enum of type ", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Integer integer0 = new Integer((-1544));
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("", false);
      jSONObject1.optNumber("", (Number) null);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<DayOfWeek, MockPrintStream> hashMap0 = new HashMap<DayOfWeek, MockPrintStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal(46);
      Number number0 = jSONObject0.optNumber("\"", (Number) bigDecimal0);
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOnce("rW|j<Bkf]6Z>-+", "rW|j<Bkf]6Z>-+");
      BigDecimal bigDecimal0 = new BigDecimal(125);
      Number number0 = jSONObject0.optNumber("rW|j<Bkf]6Z>-+", (Number) bigDecimal0);
      assertEquals((byte)125, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JSONObject jSONObject0 = new JSONObject(pipedInputStream0);
      JSONObject jSONObject1 = jSONObject0.put("A_yl", false);
      long long0 = jSONObject1.optLong("A_yl", 757L);
      assertEquals(757L, long0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Float float0 = new Float(576.5789F);
      HashMap<SequenceInputStream, StandardProtocolFamily> hashMap0 = new HashMap<SequenceInputStream, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("pointer cannot be null", float0);
      long long0 = jSONObject1.optLong("pointer cannot be null", 0L);
      assertEquals(576L, long0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("^o4", 45);
      assertEquals(45, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(99L);
      JSONObject jSONObject1 = jSONObject0.putOnce("' and instead saw ''", long0);
      float float0 = jSONObject1.optFloat("' and instead saw ''", 0.0F);
      assertEquals(99.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<CharArrayReader, BufferedWriter> hashMap0 = new HashMap<CharArrayReader, BufferedWriter>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      float float0 = jSONObject0.optFloat("%0/", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("5S[)", 3901.00722);
      assertEquals(3901.00722, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<Dialog.ModalExclusionType, PipedInputStream> hashMap0 = new HashMap<Dialog.ModalExclusionType, PipedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("~Cvipv.bW", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<GraphicsDevice.WindowTranslucency, Dialog.ModalityType> hashMap0 = new HashMap<GraphicsDevice.WindowTranslucency, Dialog.ModalityType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("CEmWn/D", "CEmWn/D");
      Class<Proxy.Type> class0 = Proxy.Type.class;
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      jSONObject1.optEnum(class0, "CEmWn/D", proxy_Type0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Desktop.Action, BigDecimal> hashMap0 = new HashMap<Desktop.Action, BigDecimal>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      ClientInfoStatus clientInfoStatus1 = jSONObject0.optEnum(class0, "3xSH6a3X58\"3Rmqu*", clientInfoStatus0);
      assertSame(clientInfoStatus1, clientInfoStatus0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("{\"fruit\":\"Apple\",\"size\":{},\"color\":\"Red\",\"Expected a ',' or '}'\":[],\"value2\":false,\"number\":\"\",\"x\":null}");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Window.Type> class0 = Window.Type.class;
      jSONObject0.putOpt("Misplaced endObject.", class0);
      boolean boolean0 = jSONObject0.isEmpty();
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOnce("rW|j<Bkf]6Z>-+", "sq9?");
      try { 
        jSONObject0.getBoolean("rW|j<Bkf]6Z>-+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("rW|j<Bkf]6Z>-+", "rW|j<Bkf]6Z>-+");
      Object object0 = jSONObject1.get("rW|j<Bkf]6Z>-+");
      assertEquals("rW|j<Bkf]6Z>-+", object0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("x-h9f#QL?&zIm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JSONObject jSONObject0 = new JSONObject(pipedInputStream0);
      jSONObject0.put("A_yl", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      try { 
        jSONObject0.append("A_yl", bufferedOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[A_yl] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        jSONObject0.put(stringArray0[6], 1111);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<BufferedOutputStream, Locale.FilteringMode> hashMap0 = new HashMap<BufferedOutputStream, Locale.FilteringMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Character.UnicodeScript, Character> hashMap0 = new HashMap<Character.UnicodeScript, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<String> set0 = jSONObject0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("a3N@J", "a3N@J");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, ProcessBuilder.Redirect.Type>();
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.PIPE;
      hashMap0.put(processBuilder_Redirect_Type0, processBuilder_Redirect_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Window.Type> class0 = Window.Type.class;
      JSONObject jSONObject1 = jSONObject0.putOpt("Misplaced endObject.", class0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject1.append("", bigInteger0);
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "isisPrimitive");
      MockFileWriter mockFileWriter0 = new MockFileWriter("~9)0I~Ym6L*", false);
      jSONObject0.write((Writer) mockFileWriter0, 77, 77);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<GraphicsDevice.WindowTranslucency, Dialog.ModalityType> hashMap0 = new HashMap<GraphicsDevice.WindowTranslucency, Dialog.ModalityType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("istoUpperCase", (Object) hashMap0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("~9)0I~Ym6L*", true);
      Writer writer0 = jSONObject1.write((Writer) mockFileWriter0, 77, 77);
      assertSame(mockFileWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Window.Type> class0 = Window.Type.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      try { 
        jSONObject0.toString(1641);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: methods
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockFileWriter mockFileWriter0 = new MockFileWriter("getpeekLast", true);
      Writer writer0 = JSONObject.writeValue(mockFileWriter0, jSONObject0, 93, (-1560));
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, ProcessBuilder.Redirect.Type>();
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.PIPE;
      hashMap0.put(processBuilder_Redirect_Type0, processBuilder_Redirect_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("val [", linkedList0);
      String string0 = jSONObject1.toString((-508));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("Misplaced endObject.", object0);
      jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("G82B%wq(y=", false);
      Writer writer0 = JSONObject.writeValue(mockFileWriter0, (Object) null, (-1482), (-1482));
      assertSame(mockFileWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<BigInteger, Object> hashMap0 = new HashMap<BigInteger, Object>();
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(hashMap0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONArray jSONArray0 = (JSONArray)JSONObject.wrap(linkedList0);
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      Object object0 = JSONObject.wrap(bigDecimal0);
      assertSame(bigDecimal0, object0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = (BigInteger)JSONObject.wrap(bigInteger0);
      assertEquals((short)10, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<BigInteger, Object> hashMap0 = new HashMap<BigInteger, Object>();
      BigInteger bigInteger0 = BigInteger.TEN;
      Float float0 = new Float((-1206.3475271));
      hashMap0.put(bigInteger0, float0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Long long0 = new Long(1L);
      Object object0 = JSONObject.wrap(long0);
      assertEquals(1L, object0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Float float0 = new Float(0.0F);
      Short short0 = new Short((short)826);
      hashMap0.put(float0, short0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<Map.Entry<Float, Short>> set0 = (Set<Map.Entry<Float, Short>>)hashMap0.entrySet();
      Float float0 = new Float(0.0F);
      Short short0 = new Short((short)826);
      hashMap0.put(float0, short0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<Map.Entry<Float, Short>> set0 = (Set<Map.Entry<Float, Short>>)hashMap0.entrySet();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("istoUpperCase", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("pointer cannot be null", stringArray0);
      try { 
        jSONObject0.put("pointer cannot be null", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-2821.4872818999324");
      assertEquals((-2821.4872818999324), object0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("=6`W#");
      assertEquals("=6`W#", object0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("0");
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-1106.06418230471");
      assertEquals((byte) (-82), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-0");
      assertEquals(-0.0, number0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("zE-vR^|");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("GFBle)^V=#>iO5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("rW|j<Bkf]6Z>-+", "rW|j<Bkf]6Z>-+");
      boolean boolean0 = jSONObject1.similar(jSONObject0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("java.io.StringWriter@0000000001", stringArray0);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject0.put("]", (-417L));
      boolean boolean0 = jSONObject1.similar(jSONObject2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.similar((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBigDecimal("/\u0006:b_]d\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("cwK1n!y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("g/<U\"?;uXU[1)ud|tK*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = JSONObject.quote("\b");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(34);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      Writer writer0 = JSONObject.quote((String) null, (Writer) pipedWriter0);
      assertSame(pipedWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("getTypeParameters", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("java.lang.Long@0000000008.");
      try { 
        jSONObject0.putOnce("java.lang.Long@0000000008.", "java.lang.Long@0000000008.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"java.lang.Long@0000000008.\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "java.lang.Long@0000000008.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HashMap<RowIdLifetime, PipedWriter> hashMap0 = new HashMap<RowIdLifetime, PipedWriter>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("getgetSigners", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Ga|JtS?");
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("rW|j<Bkf]6Z>-+", "rW|j<Bkf]6Z>-+");
      String string0 = jSONObject1.optString("rW|j<Bkf]6Z>-+", "rW|j<Bkf]6Z>-+");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOnce("Unable to write JSONObject value for key: ", hashMap0);
      Number number0 = jSONObject0.optNumber("Unable to write JSONObject value for key: ");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      jSONObject0.putOnce("] not a string.", float0);
      Number number0 = jSONObject0.optNumber("] not a string.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("m", "m");
      long long0 = jSONObject1.optLong("m", (-2561L));
      assertEquals((-2561L), long0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Float float0 = new Float(576.5789F);
      HashMap<SequenceInputStream, StandardProtocolFamily> hashMap0 = new HashMap<SequenceInputStream, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("pointer cannot be null", float0);
      long long0 = jSONObject1.optLong("pointer cannot be null");
      assertEquals(576L, long0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("val [", linkedList0);
      long long0 = jSONObject1.optLong("val [");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("J2\bu=B,O,>Mv(");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("java.lang.Long@0000000008.");
      int int0 = jSONObject0.optInt("java.lang.Long@0000000008.", (-3036));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("^4", false);
      int int0 = jSONObject0.optInt("^4", (-1994665241));
      assertEquals((-1994665241), int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce(":b", ":b");
      float float0 = jSONObject1.optFloat(":b", (-883.3905F));
      assertEquals((-883.3905F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("] is not a valid number.");
      float float0 = jSONObject1.optFloat("] is not a valid number.");
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HashMap<DataOutputStream, DataInputStream> hashMap0 = new HashMap<DataOutputStream, DataInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("x");
      jSONObject0.putOnce("or.json.JSONObjec", mockPrintStream0);
      float float0 = jSONObject0.optFloat("or.json.JSONObjec", (-883.3905F));
      assertEquals((-883.3905F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Z", (Object) ".a");
      double double0 = jSONObject1.optDouble("Z", 1903.75371408);
      assertEquals(1903.75371408, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HashMap<GraphicsDevice.WindowTranslucency, Dialog.ModalityType> hashMap0 = new HashMap<GraphicsDevice.WindowTranslucency, Dialog.ModalityType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("istoUpperCase", (-1206.7F));
      double double0 = jSONObject0.optDouble("istoUpperCase", (double) (-1206.7F));
      assertEquals((-1206.699951171875), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("has", false);
      double double0 = jSONObject1.optDouble("has", (double) (-1629));
      assertEquals((-1629.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("re");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONObject1.optBigInteger("re", bigInteger0);
      assertEquals((short)1, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("pointer cannot be null", stringArray0);
      jSONObject0.put("&n]|r", (-1L));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("&n]|r", bigInteger0);
      assertEquals((short) (-1), bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Float float0 = new Float(576.5789F);
      HashMap<SequenceInputStream, StandardProtocolFamily> hashMap0 = new HashMap<SequenceInputStream, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("pointer cannot be null", float0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject1.optBigInteger("pointer cannot be null", bigInteger0);
      assertEquals((byte)64, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Integer integer0 = new Integer((-1544));
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("", false);
      jSONObject1.optBigInteger("", (BigInteger) null);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject1 = jSONObject0.accumulate("M@I)1", bigInteger0);
      BigInteger bigInteger1 = jSONObject1.optBigInteger("M@I)1", bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal("9!", (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JSONObject jSONObject0 = new JSONObject(pipedInputStream0);
      JSONObject jSONObject1 = jSONObject0.put("A_yl", false);
      BigDecimal bigDecimal0 = new BigDecimal((-21L));
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("A_yl", bigDecimal0);
      assertEquals((byte) (-21), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Integer integer0 = new Integer((-1544));
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("", false);
      boolean boolean0 = jSONObject1.optBoolean("", false);
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("java.lang.Long@0000000008.");
      Class<PseudoColumnUsage> class0 = PseudoColumnUsage.class;
      jSONObject1.optEnum(class0, "java.lang.Long@0000000008.");
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JTable.PrintMode, MockFileOutputStream> hashMap0 = new HashMap<JTable.PrintMode, MockFileOutputStream>();
      Float float0 = new Float(576.5789F);
      HashMap<SequenceInputStream, StandardProtocolFamily> hashMap1 = new HashMap<SequenceInputStream, StandardProtocolFamily>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap1);
      jSONObject0.accumulate("", hashMap0);
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject2 = new JSONObject(bigInteger0);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Integer integer0 = new Integer(0);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"org.json.JSONObject$Null\":\"Large\",\"color\":\"] not found.\",\"getclone\":99,\"isP\":false,\"numb&r\":\"true\",\"Misplaced endArray.\":null,\"x\":null}");
      jSONObject0.names();
      assertEquals(7, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)16);
      jSONObject0.append("java.lang.Long@0000000008.", short0);
      try { 
        jSONObject0.increment("java.lang.Long@0000000008.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000009].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("java.lang.Long@0000000008.");
      JSONObject jSONObject2 = jSONObject1.increment("java.lang.Long@0000000008.");
      assertSame(jSONObject2, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("rW|j<Bkf]6Z>-+", "rW|j<Bkf]6Z>-+");
      boolean boolean0 = jSONObject1.has("rW|j<Bkf]6Z>-+");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOnce("rW|j<Bkf]6Z>-+", "sq9?");
      String string0 = jSONObject0.getString("rW|j<Bkf]6Z>-+");
      assertEquals("sq9?", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String[] stringArray1 = JSONObject.getNames((Object) stringArray0[2]);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Boolean boolean0 = new Boolean((String) null);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      
      jSONObject0.increment("java.lang.Long@0000000008.");
      JSONObject.getNames(jSONObject0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isread", (-1939.0165F));
      long long0 = jSONObject1.getLong("isread");
      assertEquals((-1939L), long0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getnextProbablePrime", true);
      try { 
        jSONObject0.getLong("getnextProbablePrime");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JSONObject jSONObject0 = new JSONObject(pipedInputStream0);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.putOnce("rW|j<Bkf]6Z>-+", jSONObject0);
      JSONObject jSONObject3 = jSONObject2.getJSONObject("rW|j<Bkf]6Z>-+");
      assertNotSame(jSONObject3, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Float float0 = new Float(576.5789F);
      HashMap<SequenceInputStream, StandardProtocolFamily> hashMap0 = new HashMap<SequenceInputStream, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("pointer cannot be null", float0);
      try { 
        jSONObject1.getJSONObject("pointer cannot be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Float float0 = new Float(576.5789F);
      HashMap<SequenceInputStream, StandardProtocolFamily> hashMap0 = new HashMap<SequenceInputStream, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("pointer cannot be null", float0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.accumulate("pointer cannot be null", bigInteger0);
      assertFalse(jSONObject0.isEmpty());
      
      JSONArray jSONArray0 = jSONObject1.getJSONArray("pointer cannot be null");
      assertEquals(2, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("secI}0uE}PE");
      try { 
        jSONObject1.getJSONArray("secI}0uE}PE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("java.lang.LongL0000000008.");
      int int0 = jSONObject1.getInt("java.lang.LongL0000000008.");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("^4", true);
      try { 
        jSONObject1.getInt("^4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getClass", 1.0F);
      float float0 = jSONObject1.getFloat("getClass");
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("has", false);
      try { 
        jSONObject1.getFloat("has");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("^4", 2038.2964F);
      double double0 = jSONObject0.getDouble("^4");
      assertEquals(2038.29638671875, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a long.", "] is not a long.");
      try { 
        jSONObject1.getDouble("] is not a long.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("rW|j<Bkf]6Z>-+", "rW|j<Bkf]6Z>-+");
      try { 
        jSONObject1.getBigDecimal("rW|j<Bkf]6Z>-+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("rW|j<Bkf]6Z>-+", "rW|j<Bkf]6Z>-+");
      boolean boolean0 = jSONObject1.optBoolean("rW|j<Bkf]6Z>-+", true);
      assertFalse(jSONObject0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("java.lang.Long@0000000008.");
      try { 
        jSONObject1.getBoolean("java.lang.Long@0000000008.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("^4", false);
      assertFalse(jSONObject0.isEmpty());
      
      boolean boolean0 = jSONObject0.getBoolean("^4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Window.Type> class0 = Window.Type.class;
      try { 
        jSONObject0.getEnum(class0, "Gme");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1106.06418230471));
      assertEquals("-1106.06418230471", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Float float0 = new Float(0.0F);
      hashMap0.putIfAbsent(float0, (Short) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Short short0 = new Short((short)263);
      hashMap0.put((Float) null, short0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, ProcessBuilder.Redirect.Type>();
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.PIPE;
      hashMap0.put(processBuilder_Redirect_Type0, processBuilder_Redirect_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      JSONObject.wrap(jSONArray0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"fruit\":true,\"org.json.JSONObject$Null\":\"Large\",\"color\":\"Red\",\"value6l99,\"value2\":false,\"numb&r\":\"1\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 76 [character 77 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.wrap(object0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Byte byte0 = new Byte((byte)104);
      Object object0 = JSONObject.wrap(byte0);
      assertEquals((byte)104, object0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("Null key.");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery(jSONPointer0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Expected a ':' after a key");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Integer integer0 = new Integer((-1544));
      JSONObject jSONObject0 = new JSONObject(integer0);
      String string0 = "\\u";
      // Undeclared exception!
      try { 
        jSONObject0.optQuery(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("-0");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      HashMap<GraphicsDevice.WindowTranslucency, Dialog.ModalityType> hashMap0 = new HashMap<GraphicsDevice.WindowTranslucency, Dialog.ModalityType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("N&9VnyD-j@=swf", (Map<?, ?>) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      jSONObject0.put("' and instead saw ''", (Collection<?>) linkedList0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1575);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      Object object0 = jSONObject0.query(jSONPointer0);
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query("3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 1667L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Map<String, Object> map0 = jSONObject0.toMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("\"^W0MJ&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("73t|0WO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("3=/> *xci[o6^M)w", (-234.1F));
      try { 
        jSONObject1.getString("3=/> *xci[o6^M)w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Nnm'T$WUFCu", 1001.1238);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("#Y3I");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
