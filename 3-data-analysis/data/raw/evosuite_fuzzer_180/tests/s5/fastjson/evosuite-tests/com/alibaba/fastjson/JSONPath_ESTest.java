/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 14:19:51 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.BigDecimalCodec;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.ObjectSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.spi.Module;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.StringReader;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Set;
import java.util.Stack;
import java.util.TimeZone;
import java.util.UUID;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("<0sh,>8Q[X~", "<0sh,>8Q[X~", 2058);
      JSONPath jSONPath0 = new JSONPath("like");
      jSONPath0.containsValue((Object) null, (Object) sQLTimeoutException0);
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      jSONPath0.evalSize(jSONPath_MultiIndexSegment0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<0sh,>8Q[X~");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "[]^hysz:,1[";
      JSONPath jSONPath0 = new JSONPath("[]^hysz:,1[");
      JSONScanner jSONScanner0 = new JSONScanner("[]^hysz:,1[");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[]^hysz:,1[", "[]^hysz:,1[", 93);
      sQLRecoverableException0.spliterator();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) propertyNamingStrategy0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      jSONPath1.isRef();
      JSONPath.paths((Object) parserConfig0);
      int[] intArray0 = new int[8];
      intArray0[0] = 93;
      intArray0[1] = 1107297537;
      intArray0[2] = 3104;
      intArray0[3] = 495;
      intArray0[4] = 106;
      intArray0[5] = 5;
      intArray0[6] = (-242);
      intArray0[7] = 1855;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      Long long0 = new Long((-2788L));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
      try { 
        jSONPath1.set((Object) long0, (Object) bigDecimal0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "j(Nf}oJ-*;,gX";
      JSONPath jSONPath0 = new JSONPath("j(Nf}oJ-*;,gX");
      Byte byte0 = new Byte((byte)75);
      BigDecimal bigDecimal0 = new BigDecimal(7251392561921135270L);
      JSONPath.eqNotNull(byte0, bigDecimal0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("-l?R@");
      JSONPath jSONPath1 = new JSONPath(",");
      // Undeclared exception!
      try { 
        jSONPath1.extract(defaultJSONParser0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Object object0 = null;
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) javaBeanSerializer0, "com.alibaba.fastjson.JSONPath$PropertySegment");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Module module0 = mock(Module.class, new ViolatedAssumptionAnswer());
      String string0 = ")sg [a~{L{[sJV";
      SQLTransientException sQLTransientException0 = new SQLTransientException(")sg [a~{L{[sJV", ")sg [a~{L{[sJV");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(", name ", sQLIntegrityConstraintViolationException0);
      Stack<Object> stack0 = new Stack<Object>();
      JSONPath jSONPath0 = new JSONPath("'s*,s*'");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(module0, "jsonpath can not be null", stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path 's*,s*', segement jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.AllowSingleQuotes;
      featureArray0[0] = feature0;
      Stack<Object> stack0 = new Stack<Object>();
      JSONPath jSONPath0 = new JSONPath("}1BA!@(v|=._kO");
      jSONPath0.deepScan(stack0, (String) null, stack0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("read string from reader error");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : read string from reader error
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "WNOT_LIKE";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("ql6kN", "ql6kN", (-32768));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLRecoverableException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("l7jDg", "jeP3Ik", sQLRecoverableException0);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("l7jDg", "/0", false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", sQLInvalidAuthorizationSpecException0);
      JSONPath jSONPath0 = JSONPath.compile("/0");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1424), 271, 100, (-1424), 84);
      jSONPath0.eval((Object) "WNOT_LIKE");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("token");
      Object object0 = JSONPath.reserveToArray("jeP3Ik", stringArray0);
      jSONPath_RlikeSegement0.apply(jSONPath0, jSONPath0, sQLIntegrityConstraintViolationException1, object0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "WNOT_LIKE";
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("l7jDg", "/0", false);
      JSONPath jSONPath0 = JSONPath.compile("/0");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1424), 271, 100, (-1424), 84);
      jSONPath0.eval((Object) "WNOT_LIKE");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("token");
      Object object0 = JSONPath.reserveToArray("WNOT_LIKE", stringArray0);
      jSONPath_RlikeSegement0.apply(jSONPath0, jSONPath0, sQLIntegrityConstraintViolationException0, object0);
      System.setCurrentTimeMillis((-1424));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath.compile("astjson");
      String string0 = "k./#o]XQ$^V";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("k./#o]XQ$^V", "InternFieldNames");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTransactionRollbackException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson", (String) null, sQLInvalidAuthorizationSpecException0);
      String string1 = "hJ";
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("P", "P", false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("jYVNG.k2-R!-)(Di", sQLTimeoutException0);
      JSONPath jSONPath0 = JSONPath.compile("astjson");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(104, 93, 1953, 1953, 93);
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanSerializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" hch&hs");
      Float float0 = new Float(0.0F);
      String string0 = "[]^hysz:,1[";
      // Undeclared exception!
      try { 
        JSONPath.size((Object) float0, "[]^hysz:,1[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("\"");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      propertyNamingStrategy0.translate("\"");
      MockUUID.fromString("\"");
      JSONPath jSONPath1 = JSONPath.compile("\"");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("\"", "\"", (-770));
      jSONPath1.containsValue((Object) propertyNamingStrategy0, (Object) "\"");
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig.global = parserConfig0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("s.M+!,{`", sQLTimeoutException0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("S};BNmas'OatL#wJ?J-");
      Integer integer0 = new Integer((-770));
      Integer integer1 = new Integer(3);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONPath jSONPath1 = new JSONPath("\"");
      DataTruncation dataTruncation0 = new DataTruncation(468, true, true, 93, 32);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      jSONPath0.keySet((Object) fileSystemHandling0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("read string from reader error", (Throwable) null);
      Stack<Object> stack0 = new Stack<Object>();
      JSONPath jSONPath0 = new JSONPath("true");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLInvalidAuthorizationSpecException0);
      jSONPath0.deepScan((Object) null, "ndLnw#W", stack0);
      DataTruncation dataTruncation0 = new DataTruncation(27, true, false, 5, 5);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "nin";
      stringArray0[1] = "true";
      stringArray0[2] = "";
      stringArray0[3] = "read string from reader error";
      stringArray0[4] = "ndLnw#W";
      stringArray0[5] = "ndLnw#W";
      stringArray0[6] = "read string from reader error";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.alibaba.fastjson.JSONPath$PropertySegment", (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.alibaba.fastjson.JSONPath$PropertySegment", "com.alibaba.fastjson.JSONPath$PropertySegment", sQLNonTransientException0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ",";
      stringArray0[1] = "com.alibaba.fastjson.JSONPath$PropertySegment";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(sQLNonTransientConnectionException0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("'y.:e#aKU1g%", "KbUNn,qz(1@~q]", "MapSortField", (String[]) null, true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'s*,s*'");
      jSONPath_JSONPathParser0.buildArraySegement("'s*,s*'");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("SkipTransientField");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("'s*,s*'");
      jSONPath_JSONPathParser1.filterRest(jSONPath_MatchSegement0);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 's*,s*'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[]^hysz:,1[");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath.Operator.values();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONPath jSONPath1 = new JSONPath("[]^hysz:,1[");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("between");
      jSONPath_JSONPathParser0.readOp();
      jSONPath_JSONPathParser0.buildArraySegement("between");
      Random.setNextRandom((-2134068019));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath.JSONPathParser.isDigitFirst('-');
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("p", 0L, (-1580386065683472715L), false);
      Long[] longArray0 = new Long[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("p", longArray0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntBetweenSegement0, jSONPath_IntObjInSegement0, false);
      JSONPath jSONPath0 = JSONPath.compile("p");
      Long long0 = new Long(0L);
      jSONPath_FilterGroup0.apply(jSONPath0, long0, "p", "p");
      Double double0 = new Double((-4231.654108126098));
      jSONPath_FilterGroup0.apply(jSONPath0, jSONPath0, (Object) null, double0);
      // Undeclared exception!
      try { 
        JSONPath.extract("org.joda.time.tz.CachedDateTimeZone", "org.joda.time.tz.CachedDateTimeZone");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/0");
      JSONScanner jSONScanner0 = new JSONScanner("[]^hysz:,1[");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3[]^hysz:,1[
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 56;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(56, 38, 56);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) ",", ",");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "NOT_LIKE";
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-861), 281, 31186);
      JSONPath.size((Object) null, " jeP3Ik[;X#M5P}u}n");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(",");
      jSONPath_JSONPathParser0.skipWhitespace();
      Long long0 = new Long(281);
      JSONPath.set((Object) jSONPath_MinSegment0, ",", (Object) long0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Byte byte0 = new Byte((byte)1);
      JSONPath jSONPath0 = new JSONPath(" jeP3Ik[;X#M5P}u}n");
      jSONPath0.getPropertyValues(jSONPath_JSONPathParser0);
      jSONPath0.getPropertyValue("{\"fruit\":\"Apple\",\"size\":\"\",\"/stackTrace/0\":false,\"value\":true,\"rlike\":null,\"number\":null,\"ol\":-99,\"x\":null}", "{\"fruit\":\"Apple\",\"size\":\"\",\"/stackTrace/0\":false,\"value\":true,\"rlike\":null,\"number\":null,\"ol\":-99,\"x\":null}", (-861));
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      jSONPath0.keySet((Object) null);
      jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("read string from reader error", sQLIntegrityConstraintViolationException0);
      Stack<Object> stack0 = new Stack<Object>();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((Throwable) null);
      jSONPath0.deepScan((Object) null, "read string from reader error", stack0);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.autoTypeAccept", "z", "read string from reader error", (String[]) null, false);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(163);
      JSONPath.compile("fastjson.parser.deny.internal");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      jSONPath_MatchSegement0.apply(jSONPath0, sQLClientInfoException0, (Object) null, stack0);
      System.setCurrentTimeMillis(163);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath.eqNotNull(double0, double0);
      String string0 = "[7zrm)[:l-%6N";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[7zrm)[:l-%6N");
      JSONPath jSONPath0 = JSONPath.compile("[7zrm)[:l-%6N");
      SQLDataException sQLDataException0 = new SQLDataException();
      jSONPath0.containsValue((Object) sQLDataException0, (Object) jSONPath_JSONPathParser0);
      jSONPath0.evalSize(double0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser(string0);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. [7zrm)[:l-%6N
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(" FC3B,39mW{<xu^}");
      Module module0 = mock(Module.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectSerializer) null, (ObjectSerializer) null, (ObjectSerializer) null, (ObjectSerializer) null, (ObjectSerializer) null).when(module0).createSerializer(any(com.alibaba.fastjson.serializer.SerializeConfig.class) , any(java.lang.Class.class));
      serializeConfig0.register(module0);
      ClassLoader.getSystemClassLoader();
      String string0 = "LT";
      ClassLoader.getSystemClassLoader();
      SerializeConfig serializeConfig1 = new SerializeConfig();
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) sQLTransientConnectionException0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONPath.Operator.values();
      String string0 = "^C;}";
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("^C;}", serializeConfig0, (ParserConfig) null);
      String string1 = null;
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath jSONPath0 = new JSONPath("net.sf.cglib.proxy.Fa|ory");
      int[] intArray0 = new int[4];
      intArray0[0] = 409;
      intArray0[1] = 99;
      intArray0[2] = 99;
      JSONPath jSONPath1 = new JSONPath("net.sf.cglib.proxy.Fa|ory");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.And;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("net.sf.cglib.proxy.Fa|ory", "net.sf.cglib.proxy.Fa|ory", jSONPath_Operator1);
      jSONPath_StringOpSegement0.apply(jSONPath0, "net.sf.cglib.proxy.Fa|ory", "net.sf.cglib.proxy.Fa|ory", jSONPath1);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("net.sf.cglib.proxy.Fa|ory");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // net.sf.cglib.proxy.Fa|ory
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "NOT_LIKE";
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-861), 281, 31186);
      JSONPath.size((Object) null, " jeP3Ik[;X#M5P}u}n");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(",");
      jSONPath_JSONPathParser0.skipWhitespace();
      Long long0 = new Long(281);
      JSONPath.set((Object) jSONPath_MinSegment0, ",", (Object) long0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Byte byte0 = new Byte((byte)1);
      JSONPath jSONPath0 = JSONPath.compile(",");
      jSONPath0.getPropertyValues(jSONPath_JSONPathParser0);
      Short short0 = new Short((byte)1);
      jSONPath0.set((Object) "NOT_LIKE", (Object) short0);
      jSONPath0.getPropertyValue("{\"fruit\":\"Apple\",\"size\":\"\",\"/stackTrace/0\":false,\"value\":true,\"rlike\":null,\"number\":null,\"ol\":-99,\"x\":null}", "{\"fruit\":\"Apple\",\"size\":\"\",\"/stackTrace/0\":false,\"value\":true,\"rlike\":null,\"number\":null,\"ol\":-99,\"x\":null}", (-861));
      jSONPath0.set((Object) null, (Object) "NOT_LIKE", false);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      jSONPath0.set((Object) "{\"fruit\":\"Apple\",\"size\":\"\",\"/stackTrace/0\":false,\"value\":true,\"rlike\":null,\"number\":null,\"ol\":-99,\"x\":null}", (Object) jSONPath_WildCardSegment0, false);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("null");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLIntegrityConstraintViolationException0);
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(sQLInvalidAuthorizationSpecException0, "", stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path null, segement 
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-861), (-1342), 281);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      JSONPath.size((Object) throwableDeserializer0, "fastjson.parser.deny");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" jeP3Ik[;X#M5P}u}n");
      jSONPath_JSONPathParser0.skipWhitespace();
      Long long0 = new Long((-1));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("\"Pru~Y4H2j0pj&<");
      JSONPath.set((Object) sQLSyntaxErrorException0, "W", (Object) jSONPath_MultiIndexSegment0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Byte byte0 = new Byte((byte)1);
      JSONPath jSONPath0 = new JSONPath("k./#o]XQ$^V");
      jSONPath0.getPropertyValues((Object) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("cm.alibaba.fastjsn.JSONPath$RlieSegement", intArray0);
      jSONPath0.getPropertyValue(batchUpdateException0, "(~VZ6RU 5t", (-861));
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Byte byte1 = new Byte((byte) (-39));
      SQLWarning sQLWarning0 = new SQLWarning("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) byte1, (Object) sQLWarning0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. k./#o]XQ$^V
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("", "true", jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("true");
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.LT;
      jSONPath_StringOpSegement0.apply(jSONPath0, "true", jSONPath_Operator1, "=loMg");
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) "", (Object) jSONPath_Operator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "/stackTrace/5";
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("/stackTrace/5", "/stackTrace/5", false);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/5");
      JSONPath jSONPath1 = JSONPath.compile("wy.b40Sj(");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("I8!CIpM", "wy.b40Sj(", 4, (Map<String, ClientInfoStatus>) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jSONPath0;
      objectArray0[1] = (Object) sQLClientInfoException1;
      objectArray0[2] = (Object) jSONPath1;
      objectArray0[3] = (Object) jSONPath0;
      objectArray0[4] = (Object) jSONPath_ValueSegment0;
      objectArray0[5] = (Object) "I8!CIpM";
      objectArray0[6] = (Object) "I8!CIpM";
      objectArray0[7] = (Object) jSONPath_ValueSegment0;
      // Undeclared exception!
      try { 
        jSONPath1.arrayAdd((Object) sQLClientInfoException1, objectArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = JSONPath.compile("astjson");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{");
      jSONPath_JSONPathParser0.explain();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("*");
      // Undeclared exception!
      jSONPath0.set((Object) defaultJSONParser0, (Object) "{", true);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = new JSONPath("2");
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement(", but '", "2", false);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("not");
      JSONPath.NullSegement jSONPath_NullSegement1 = new JSONPath.NullSegement("not");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("UaQM~D7!$5%a");
      jSONPath_JSONPathParser0.filterRest(jSONPath_NullSegement0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("rlike");
      jSONPath_JSONPathParser1.readOp();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = ",#Z81P9(]}v4M63";
      stringArray0[1] = "UvUD?+Hq>gtswI";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("true", "U@{Wz/ZH,SE>", jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("hf6,-7 f}~");
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.LT;
      JSONPath.Operator jSONPath_Operator2 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement1 = new JSONPath.StringOpSegement(":^_CK}U\"R3%7Ws", "U@{Wz/ZH,SE>", jSONPath_Operator2);
      Double double0 = new Double((-4809.0));
      jSONPath_StringOpSegement1.apply(jSONPath0, "true", ":^_CK}U\"R3%7Ws", double0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("i#$FSb+qwJk\f");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("i#$FSb+qwJk\f", "i#$FSb+qwJk\f", false);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("g", serializeConfig0, parserConfig0);
      UUID uUID0 = MockUUID.randomUUID();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.initCause(sQLTimeoutException0);
      parserConfig0.setSafeMode(true);
      sQLTimeoutException0.printStackTrace();
      jSONPath_RlikeSegement0.apply(jSONPath0, uUID0, "i#$FSb+qwJk\f", sQLTimeoutException0);
      Stack<Object> stack0 = new Stack<Object>();
      JSONPath jSONPath1 = new JSONPath("\"");
      jSONPath1.deepScan(jSONPath_RlikeSegement0, "g", stack0);
      jSONPath0.keySet((Object) null);
      jSONPath_JSONPathParser0.filterRest(jSONPath_RlikeSegement0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Long long0 = new Long((-303L));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.add(bigInteger0);
      bigInteger1.getLowestSetBit();
      JSONPath.eqNotNull(bigInteger2, bigInteger2);
      JSONPath jSONPath0 = JSONPath.compile("KR");
      jSONPath0.keySet((Object) null);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"\",\"/stackTrace/0\":false,\"value\":true,\"rlike\":null,\"number\":null,\"ol\":-99,\"x\":null}";
      String string1 = "q{dD";
      JSONPath jSONPath0 = new JSONPath("q{dD");
      Long long0 = new Long(972L);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSONPath_MinSegment0;
      // Undeclared exception!
      try { 
        JSONPath.read("2", "2");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("za1N-(", "true", jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$RegMatchSegement");
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.LT;
      jSONPath_StringOpSegement0.apply(jSONPath0, "[long", "[long", jSONPath_Operator0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("za1N-(");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("true", "true", jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$RegMatchSegement");
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.LT;
      jSONPath_StringOpSegement0.apply(jSONPath0, "[@og", "[@og", jSONPath_Operator0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("true");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = JSONPath.compile("astjson");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{");
      jSONPath_JSONPathParser0.explain();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("r,|:!z-!hV1");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONPath.size((Object) "G'T=%Hrl~s|o)b .pF;", "Y");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("IgnoreNonFieldGetter", "Y", 2);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLRecoverableException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("IgnoreNonFieldGetter", "IgnoreNonFieldGetter");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("!/g u6i,e[# .0%F", "hJ", true);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("!/g u6i,e[# .0%F", sQLRecoverableException0);
      JSONPath jSONPath0 = JSONPath.compile("KR/?fB5+U)/");
      Long[] longArray0 = new Long[4];
      Long.getLong("parse unwrapped field error.");
      longArray0[0] = null;
      Long long0 = new Long((-15L));
      longArray0[1] = long0;
      Long long1 = new Long((-1));
      longArray0[2] = long1;
      Long long2 = new Long((-685L));
      longArray0[3] = long2;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("hJ", longArray0, true);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("FC3B", hashMap0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("com.alibaba.fastjson.JSONPath$1", "evalKeySet error : ");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(")");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      jSONPath_IntObjInSegement0.apply(jSONPath0, sQLNonTransientConnectionException0, jSONPath_SizeSegment0, long2);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Double double0 = new Double(1000.0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("2");
      String string0 = "~pNUBi\\U`MmW`";
      int int0 = 57344;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jSONPath0;
      objectArray0[1] = (Object) "';";
      objectArray0[2] = (Object) "~pNUBiU`MmW`";
      objectArray0[3] = (Object) "';";
      objectArray0[4] = (Object) "2";
      objectArray0[5] = (Object) jSONPath0;
      objectArray0[6] = (Object) serializeConfig0;
      objectArray0[7] = (Object) "';";
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) serializeConfig0, objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("c1~Xxd.Q");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("wy.b40Sj(");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "java/util/ArrayList", 94, sQLNonTransientException0);
      SQLWarning sQLWarning0 = new SQLWarning("4?KjhTDJ|Cfx");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("4?KjhTDJ|Cfx", sQLWarning0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SQLDataException sQLDataException0 = new SQLDataException("java/util/ArrayList");
      Double double0 = new Double(0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
      try { 
        JSONPath.compare(bigDecimal0, sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLInvalidAuthorizationSpecException cannot be cast to java.math.BigDecimal
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("c1~Xxd.Q");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("wy.b40Sj(");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "java/util/ArrayList", 94, sQLNonTransientException0);
      SQLWarning sQLWarning0 = new SQLWarning("4?KjhTDJ|Cfx");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("4?KjhTDJ|Cfx", sQLWarning0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
      try { 
        JSONPath.compare(bigDecimal0, sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLInvalidAuthorizationSpecException cannot be cast to java.math.BigDecimal
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("U@Wz/ZH,SE>");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("bkuh", (-8421588593326113468L), jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NotNullSegement0, jSONPath_IntOpSegement0, false);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
      String string0 = "-";
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath_FilterSegment0, "-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath$FilterSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("c1~Xxd.Q");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.json.JSONObject");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.json.JSONObject");
      JSONPath jSONPath0 = JSONPath.compile("hlUlU71");
      BigDecimal bigDecimal0 = new BigDecimal(2986.818045919401);
      jSONPath0.set((Object) sQLClientInfoException0, (Object) bigDecimal0, true);
      jSONPath0.set((Object) "hlUlU71", (Object) "hlUlU71");
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      System.setCurrentTimeMillis((-472L));
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1709, 60, 1001);
      SQLDataException sQLDataException0 = new SQLDataException(sQLClientInfoException0);
      jSONPath_RangeSegment0.eval(jSONPath0, "org.json.JSONObject", sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONPath.size((Object) null, "'/3|Bzq!l&[Nyk");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("not", "/g u6i,e[# .0%F", (-1));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("'/3|Bzq!l&[Nyk", "not", 5237, sQLRecoverableException0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NOT_LIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("/g u6i,e[# .0%F", 5237, jSONPath_Operator1);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      JSONPath jSONPath0 = JSONPath.compile("v\"HEVpo");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("W92tfKC.WD'|", sQLTransientConnectionException0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("/g u6i,e[# .0%F");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      sQLTransientConnectionException1.printStackTrace((PrintStream) mockPrintStream1);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(976, 976, 976);
      jSONPath_FilterSegment0.remove(jSONPath0, sQLTransientConnectionException1, jSONPath_RangeSegment0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1846), (-119), (-1846));
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/g u6i,e[# .0%F", false);
      Double double0 = new Double((-119));
      Integer integer0 = new Integer(976);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/g u6i,e[# .0%F");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONPath.JSONPathParser.isDigitFirst('L');
      JSONPath.JSONPathParser.isDigitFirst('[');
      String string0 = "[rn]^hysz:,f1[";
      JSONPath jSONPath0 = new JSONPath("[rn]^hysz:,f1[");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '), but '^'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONPath.JSONPathParser.isDigitFirst('L');
      String string0 = "[rn]^hysz:,f1[";
      JSONPath jSONPath0 = new JSONPath("[rn]^hysz:,f1[");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '), but '^'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONPath.compile("[]");
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("?", serializeConfig0, parserConfig0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-895), (-895), 21);
      JSONPath.compile("fastjson.parser.autoTypeSupport");
      JSONPath jSONPath1 = JSONPath.compile("alibaba");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath1.remove((Object) jSONPath_WildCardSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("'/3|Bzq!l&[Nyk");
      BigInteger bigInteger0 = BigInteger.ONE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONPath.contains((Object) bigInteger0, "$VALUES");
      String string0 = "g3dkIycv";
      JSONPath jSONPath1 = JSONPath.compile("2");
      // Undeclared exception!
      try { 
        jSONPath1.remove((Object) jSONPath0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.AllowSingleQuotes;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.UseObjectArray;
      Feature feature2 = Feature.SupportArrayToBean;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.SortFeidFastMatch;
      featureArray0[3] = feature3;
      featureArray0[4] = feature1;
      Feature feature4 = Feature.UseObjectArray;
      featureArray0[5] = feature4;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      JSONScanner jSONScanner0 = new JSONScanner("]$93F");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(feature1, jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1024);
      SerializeConfig serializeConfig1 = SerializeConfig.globalInstance;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig1, parserConfig0);
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      Byte byte0 = new Byte((byte)64);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fastjson.parser.autoTypeAccept", "!w");
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, parserConfig0, sQLIntegrityConstraintViolationException0);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      Integer integer0 = new Integer(1024);
      jSONPath_MaxSegment0.eval(jSONPath0, integer0, object0);
      JSONPath.eqNotNull(byte0, integer0);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement((String) null, "* %=1FTt~5YWnwXP@4", "in", (String[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1024);
      SerializeConfig serializeConfig1 = SerializeConfig.globalInstance;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig1, parserConfig0);
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      Byte byte0 = new Byte((byte)64);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fastjson.parser.autoTypeAccept", "!4w");
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, parserConfig0, sQLIntegrityConstraintViolationException0);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      Integer integer0 = new Integer(1024);
      jSONPath_MaxSegment0.eval(jSONPath0, integer0, object0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      JSONPath.reserveToArray(aSMDeserializerFactory0, (String[]) null);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Long long0 = new Long((-1948L));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("o", (SerializeConfig) null, parserConfig0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) sQLTimeoutException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONPath.size((Object) "G'T=%Hrl~s|o3b .pF6", "Y");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("!/g u6i,e[# .0%F", "hJ", false);
      JSONPath.compile("KR/?fB5+U)/");
      JSONPath.compare("parse unwrapped field error.", "!/g u6i,e[# .0%F");
      JSONPath.RlikeSegement jSONPath_RlikeSegement1 = new JSONPath.RlikeSegement("hJ", "Y", true);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("BETPEEN");
      String[] stringArray0 = new String[0];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("(II)V", "false", "KR/?fB5+U)/", stringArray0, true);
      JSONPath.NullSegement jSONPath_NullSegement1 = new JSONPath.NullSegement("hJ");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("parse unwrapped field error.");
      jSONPath_JSONPathParser0.filterRest(jSONPath_NullSegement1);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath(" FC3B,39mW{<xu^}", serializeConfig0, parserConfig0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(91, 91, (-958));
      Pattern pattern0 = Pattern.compile("fastjson.parser.autoTypeSupport", (-958));
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("fastjson.parser.safeMode", pattern0, jSONPath_Operator0);
      Class<Double> class0 = Double.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.autoTypeAccept", hashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("CA~`)xN=D(&F", class0, class0, class0, (Field) null, 12, (-958), 55296);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      jSONPath_RegMatchSegement0.apply(jSONPath0, (Object) null, (Object) null, (Object) null);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RegMatchSegement0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath.contains((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      boolean boolean0 = jSONPath1.isRef();
      Map<String, Object> map0 = JSONPath.paths((Object) parserConfig0);
      assertEquals(9, map0.size());
      
      boolean boolean1 = JSONPath.eq(jSONPath0, jSONPath1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONPath.contains((Object) null, "fastjson.parser.safeMode");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONScanner jSONScanner0 = new JSONScanner("{2N");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      JSONPath jSONPath0 = new JSONPath("[]^hysz:,1[");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONPath.JSONPathParser.isDigitFirst('L');
      String string0 = "like";
      JSONPath jSONPath0 = new JSONPath("like");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SQLDataException sQLDataException0 = new SQLDataException();
      jSONPath0.contains((Object) sQLDataException0);
      String string1 = "wy.b40Sj(";
      JSONPath jSONPath1 = JSONPath.compile("wy.b40Sj(");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("like");
      // Undeclared exception!
      try { 
        jSONPath1.extract(defaultJSONParser0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("/?#aG2Trace/#", "/?#aG2Trace/#", false);
      JSONPath jSONPath0 = JSONPath.compile("wy.b40Sj(");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("R");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONPath.compile("\"fruit\":\"AllowSingleQuotes\",\"com.alibaba.fastjson.JSONPath$FilterGroup\":99,\"color\":\"Red\",\"value2\":false,\"number\":false,\"x\":false}");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      String string0 = "2";
      JSONPath jSONPath0 = new JSONPath("2");
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) bigInteger0, "2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{}");
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("2", serializeConfig0, parserConfig0);
      Short short0 = new Short((short)4462);
      SQLDataException sQLDataException0 = new SQLDataException("2");
      int[] intArray0 = new int[4];
      intArray0[0] = 4079;
      intArray0[1] = 4079;
      intArray0[2] = (int) (short)92;
      intArray0[3] = (int) (short)4462;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("fastjson.parser.safeMode", intArray0, sQLDataException0);
      Byte byte0 = new Byte((byte)89);
      JSONPath jSONPath2 = new JSONPath("kotlin.ranges.ClosedDoubleRange");
      jSONPath0.getPropertyValues((Object) null);
      jSONPath2.getPropertyValue(sQLDataException0, "e2ym8L}$", 1438L);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, sQLDataException0);
      jSONPath1.set((Object) null, (Object) sQLFeatureNotSupportedException0, false);
      JSONPath.eqNotNull(4462, byte0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Feature feature0 = Feature.DisableASM;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[1];
      featureArray0[0] = feature0;
      JSONPath.extract("[]^hysz:,f1[", "like", parserConfig0, (-2162), featureArray0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      jSONPath0.evalKeySet(jSONPath_WildCardSegment0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("! .a\"0_p}&GM]L$7q");
      jSONPath_JSONPathParser0.isEOF();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("c1~Xxd.Q");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      String[] stringArray0 = new String[0];
      JSONPath.reserveToObject("dd/MM/yyyy HH:mm:ss", stringArray0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("dd/MM/yyyy HH:mm:ss", (Map<String, ClientInfoStatus>) null);
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = JSONPath.compile("i1");
      jSONPath_MultiPropertySegment0.eval(jSONPath0, jSONPath0, sQLClientInfoException0);
      JSONPath.reserveToArray(jSONPath_MultiPropertySegment0, stringArray0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("5");
      jSONPath_JSONPathParser0.readDoubleValue((-811277319855450459L));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeAccept");
      String[] stringArray0 = new String[16];
      stringArray0[0] = "fastjson.parser.autoTypeAccept";
      stringArray0[1] = "h";
      jSONPath_JSONPathParser0.next();
      stringArray0[2] = "fastjson.parser.autoTypeAccept";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("fastjson.parser.autoTypeAccept", stringArray0, false);
      JSONPath jSONPath0 = new JSONPath("L");
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "fastjson.parser.autoTypeAccept";
      ClassLoader.getSystemClassLoader();
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.safeMode");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      jSONPath_FilterSegment0.eval(jSONPath1, "L", "fastjson.parser.autoTypeAccept");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("\"");
      jSONPath0.contains((Object) "\"");
      JSONPath jSONPath1 = new JSONPath("\"");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("\"");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      jSONPath_FilterSegment0.eval(jSONPath0, propertyNamingStrategy0, jSONPath1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig1 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("write javaBean error, fastjson version 1.2.68", serializeConfig1, parserConfig0);
      Pattern pattern0 = Pattern.compile("", 40);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("g4]7-}W", pattern0, jSONPath_Operator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("hC", "fastjson.parser.safeMode", (-1858));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("8va?,1Z6.~!9", "hC", 268435455, sQLInvalidAuthorizationSpecException0);
      jSONPath_RegMatchSegement0.apply(jSONPath0, sQLTransientConnectionException0, "", sQLTransientConnectionException0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RegMatchSegement0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) "", "fastjson.parser.autoTypeAccept");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("U@Wz/ZH,SE>");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("U@Wz/ZH,SE>");
      Byte byte0 = new Byte((byte) (-4));
      JSONPath.eqNotNull(byte0, byte0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[]^hysz:,f1[");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      propertyNamingStrategy0.translate(";?k|K`z,eJ");
      MockUUID.fromString(";?k|K`z,eJ");
      String string0 = "fastjson";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("()Ljava/lang/Class;", "fastjson", 991);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("iO1CT711|P", sQLNonTransientException0);
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) sQLRecoverableException0, (Object) "[]^hysz:,f1[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("c1~Xxd.Q");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      String[] stringArray0 = new String[0];
      JSONPath.reserveToObject("c1~Xxd.Q", stringArray0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("dd/MM/yyyy HH:mm:ss", (Map<String, ClientInfoStatus>) null);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      long long0 = JSONPath.SIZE;
      JSONPath.eqNotNull(bigDecimal1, bigDecimal0);
      SerializeConfig serializeConfig0 = new SerializeConfig(777);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9sC!wA");
      jSONPath_JSONPathParser0.readValue();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("/stackTrace/5", "/stackTrace/5", false);
      JSONPath.compile("/stackTrace/5");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/5");
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MultiIndexSegment");
      Float float0 = new Float(0.0F);
      JSONPath.eqNotNull(float0, float0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("/stackTrace/5");
      jSONPath_JSONPathParser1.explain();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. /stackTrace/5
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("\"");
      jSONPath0.contains((Object) "\"");
      JSONPath jSONPath1 = new JSONPath("\"");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      String string0 = propertyNamingStrategy0.translate("\"");
      assertEquals("\"", string0);
      
      jSONPath1.evalSize("\"");
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      // Undeclared exception!
      try { 
        jSONPath1.size((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement(">\"(X=^.gRirt");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      long long0 = JSONPath.SIZE;
      Integer integer0 = new Integer((-1424));
      JSONPath.eqNotNull(bigDecimal0, integer0);
      String string0 = "=RLHT-&[S} w?rS3o";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=RLHT-&[S} w?rS3o");
      jSONPath_JSONPathParser0.readOp();
      JSONPath.JSONPathParser.isDigitFirst(')');
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("OPk`QT");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("wj'(*");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2, 299, 58);
      jSONPath_RangeSegment0.eval(jSONPath0, "F", "F");
      jSONPath_RangeSegment0.eval(jSONPath0, "F", jSONPath0);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("fastjson.parser.deny.internal");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      System.setCurrentTimeMillis(299);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("2");
      JSONPath.eqNotNull(double0, double0);
      Stack<Object> stack0 = new Stack<Object>();
      UUID uUID0 = MockUUID.randomUUID();
      jSONPath0.deepScan(uUID0, "fastjson.parser.deny", stack0);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) "[7zrm)[:l-%6N");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}");
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("?", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("?", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JSONPath jSONPath1 = new JSONPath("l");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath jSONPath2 = new JSONPath("*");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Byte byte0 = new Byte((byte)28);
      JSONPath.compile("fastjson.parser.safeMode");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(91, (-1118), (byte)28);
      JSONPath jSONPath3 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("KJy/", "*", 120, hashMap0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.deny", "value not found in path ", (-1118), sQLClientInfoException0);
      SQLDataException sQLDataException0 = new SQLDataException();
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath3, sQLFeatureNotSupportedException0, sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -42
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONPath.compile("{\"{apY'G}X?!* VJ1\":\" hch\"}");
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("?", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("?", "{\"{apY'G}X?!* VJ1\":\" hch\"}", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JSONPath jSONPath1 = new JSONPath("l");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLDataException sQLDataException0 = new SQLDataException("?", "l", (-459));
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLDataException0);
      jSONPath1.contains((Object) sQLClientInfoException0);
      JSONPath jSONPath2 = new JSONPath("/stackTrace/5", serializeConfig0, parserConfig0);
      jSONPath0.evalSize(jSONPath2);
      Class<Object> class0 = Object.class;
      jSONPath0.getJavaBeanDeserializer(class0);
      Byte byte0 = new Byte((byte) (-46));
      jSONPath0.size((Object) byte0);
      Double double1 = new Double((-1817.0));
      JSONPath.eq(double1, "?");
      jSONPath2.setPropertyValue(jSONPath_FilterSegment0, "fastjson.parser.autoTypeAccept", 5614464919154503228L, (Object) null);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "NOT_LIKE";
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-861), 281, 31186);
      JSONPath.remove((Object) ",", "NOT_LIKE");
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$WildCardSegment");
      SerializeConfig serializeConfig0 = new SerializeConfig(1247);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Double double0 = new Double(191);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.autoTypeAccept", false);
      JSONPath.eq(double0, jSONPath_PropertySegment0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.deny.internal", "-", (String) null, (String[]) null, true);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("|M9e\"[[||%)I'");
      jSONPath_JSONPathParser0.filterRest(jSONPath_MatchSegement0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("jeP3Ik");
      jSONPath_JSONPathParser1.explain();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "astjson";
      stringArray0[1] = " FC3B,39mW{<xu^}";
      stringArray0[2] = " FC3B,39mW{<xu^}";
      stringArray0[3] = "astjson";
      stringArray0[4] = "astjson";
      stringArray0[5] = "astjson";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("astjson", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath("astjson");
      SerializeConfig serializeConfig1 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.deny.internal", "-", (String) null, (String[]) null, true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("|M9e\"[[||%)I'");
      jSONPath_JSONPathParser0.filterRest(jSONPath_MatchSegement0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser(", fieldName : ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. , fieldName : 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("wj'(*");
      int[] intArray0 = new int[8];
      intArray0[0] = (-2395);
      intArray0[1] = 38;
      intArray0[2] = 2635;
      intArray0[3] = (-966);
      intArray0[4] = 409;
      intArray0[5] = 99;
      intArray0[6] = 1005;
      intArray0[7] = 99;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<mM*dz:3$=0S");
      jSONPath_JSONPathParser0.readOp();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('g');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'g, but 'm'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int[] intArray0 = new int[0];
      JSONPath.compile("2");
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<mM*dz:3$=0S");
      jSONPath_JSONPathParser0.readOp();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('s');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 's, but 'm'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement(">\"(X=^.gRirt");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      long long0 = JSONPath.SIZE;
      Integer integer0 = new Integer((-1424));
      JSONPath.eqNotNull(bigDecimal0, integer0);
      String string0 = "OPk`QT";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=RLHT-&[S} w?rS3o");
      jSONPath_JSONPathParser0.readOp();
      JSONPath.JSONPathParser.isDigitFirst(')');
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("OPk`QT");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("b`RHjt-%{$");
      jSONPath_JSONPathParser0.filterRest(jSONPath_NullSegement0);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("R@L|UgP", "J51[D9", 442);
      MockThrowable mockThrowable0 = new MockThrowable("/OVxu2&rwir]]qhE]a", sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.addSuppressed(mockThrowable0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("J51[D9", "RwH$W", 122);
      String string0 = "OJ>oNcs";
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/8", serializeConfig0, parserConfig0);
      boolean boolean0 = true;
      jSONPath0.removePropertyValue(sQLTransactionRollbackException0, "fastjson.parser.deny", true);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      serializeConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "tPx", 47, mockThrowable0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("OJ>oNcs", mockThrowable0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("0.Fp", "/stackTrace/8", 47);
      jSONPath0.size((Object) sQLTransientException0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(jSONPath_Operator0, linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // com.alibaba.fastjson.JSONPath$Operator
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/5");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/5");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(110, 122, 57, 43, (-214748364));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("(.d{a1&[ekO'", "/stackTrace/5", (-3317), sQLInvalidAuthorizationSpecException0);
      SQLWarning sQLWarning0 = new SQLWarning(sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("(.d{a1&[ekO'", sQLWarning0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("(.d{a1&[ekO'", "(.d{a1&[ekO'", 43, sQLTransactionRollbackException0);
      jSONPath0.eval((Object) sQLTimeoutException0);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = null;
      try {
        jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("(.d{a1&[ekO'", "(.d{a1&[ekO'", false);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 2
         // (.d{a1&[ekO'
         //   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "\"a string\"";
      JSONPath jSONPath0 = new JSONPath("\"a string\"");
      SerializeConfig.getGlobalInstance();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Kawc@a7J9S", "\"a string\"");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Kawc@a7J9S", sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      String string1 = "nZP0>!N$T^{M*y\"tfl";
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("nZP0>!N$T^{M*y\"tfl", "\"a string\"", 117);
      jSONPath0.removePropertyValue(sQLIntegrityConstraintViolationException0, "\"a string\"", true);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("nZP0>!N$T^{M*y\"tfl", "\"a string\"", 117, (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("nin", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) "Kawc@a7J9S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. \"a string\"
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "pz]GrjNTfs6P*8)6Z";
      JSONPath jSONPath0 = JSONPath.compile("pz]GrjNTfs6P*8)6Z");
      String string1 = "eXYe!h'$z9n]zu1)";
      Throwable throwable0 = null;
      SQLDataException sQLDataException0 = new SQLDataException("pz]GrjNTfs6P*8)6Z", "eXYe!h'$z9n]zu1)", (Throwable) null);
      String string2 = "autoTypeAccept";
      jSONPath0.removePropertyValue(sQLDataException0, "autoTypeAccept", true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("pz]GrjNTfs6P*8)6Z");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("false");
      int int0 = 41;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(41, 1834, 2046);
      Byte byte0 = new Byte((byte) (-67));
      jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, byte0);
      JSONPath.containsValue((Object) jSONPath_MinSegment0, "false", (Object) jSONPath_RangeSegment0);
      String string0 = "[7zrm)[:l-%6N";
      JSONPath jSONPath1 = JSONPath.compile("[7zrm)[:l-%6N");
      JSONPath.compile("between");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("<KZn%Dyakl'T)1,jO]");
      // Undeclared exception!
      try { 
        jSONPath1.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Long long0 = new Long((-1948L));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.add(bigInteger1);
      bigInteger0.getLowestSetBit();
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(long0, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Long long0 = new Long((-1948L));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.add(bigInteger1);
      bigInteger0.getLowestSetBit();
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(long0, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "NOT_LIKE";
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-861), 281, 31186);
      JSONPath.size((Object) null, " jeP3Ik[;X#M5P}u}n");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(",");
      jSONPath_JSONPathParser0.skipWhitespace();
      Long long0 = new Long(281);
      JSONPath.set((Object) jSONPath_MinSegment0, ",", (Object) long0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Byte byte0 = new Byte((byte)1);
      JSONPath jSONPath0 = new JSONPath(" jeP3Ik[;X#M5P}u}n");
      jSONPath0.getPropertyValues(jSONPath_JSONPathParser0);
      jSONPath0.getPropertyValue("{\"fruit\":\"Apple\",\"size\":\"\",\"/stackTrace/0\":false,\"value\":true,\"rlike\":null,\"number\":null,\"ol\":-99,\"x\":null}", "{\"fruit\":\"Apple\",\"size\":\"\",\"/stackTrace/0\":false,\"value\":true,\"rlike\":null,\"number\":null,\"ol\":-99,\"x\":null}", (-861));
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "{\"fruit\":\"Apple\",\"size\":\"\",\"/stackTrace/0\":false,\"value\":true,\"rlike\":null,\"number\":null,\"ol\":-99,\"x\":null}", (Object) jSONPath_WildCardSegment0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("OrderedField");
      Class<Date> class0 = Date.class;
      jSONPath0.getJavaBeanDeserializer(class0);
      // Undeclared exception!
      JSONPath.remove((Object) jSONPath0, "KR");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "[]^hysz:,1[";
      JSONPath jSONPath0 = new JSONPath("[]^hysz:,1[");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) propertyNamingStrategy0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long long0 = new Long((-1948L));
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(58, (-1948), 734);
      String string0 = "fxfci%\"At83f4(AZjK";
      JSONPath jSONPath0 = JSONPath.compile("fxfci%\"At83f4(AZjK");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONPath_RangeSegment0.eval(jSONPath0, long0, (Object) null);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(":N'8f\"^VP%_<^_");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1024);
      Module module0 = mock(Module.class, new ViolatedAssumptionAnswer());
      serializeConfig0.register(module0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "i1'aulP>,XE?1Y";
      stringArray0[1] = "/uRLs";
      stringArray0[2] = "i1'aulP>,XE?1Y";
      stringArray0[3] = "*";
      stringArray0[4] = "oracle";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("/uRLs", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath("*");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Byte byte0 = new Byte((byte) (-105));
      JSONPath jSONPath1 = JSONPath.compile("/uRLs");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((byte) (-105), (-2914), 1214);
      jSONPath_RangeSegment0.eval(jSONPath1, "*", "/uRLs");
      jSONPath_StringInSegement0.apply(jSONPath0, jSONPath1, (Object) null, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONPath.JSONPathParser.isDigitFirst('-');
      JSONPath jSONPath0 = new JSONPath("like");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      propertyNamingStrategy0.translate("like");
      UUID uUID0 = MockUUID.randomUUID();
      jSONPath0.containsValue((Object) "like", (Object) uUID0);
      jSONPath0.evalSize(propertyNamingStrategy0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("like");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1024);
      Module module0 = mock(Module.class, new ViolatedAssumptionAnswer());
      serializeConfig0.register(module0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("fastjson.parser.autoTypeSupport");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      Byte byte0 = new Byte((byte)121);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      jSONPath_FilterSegment0.eval(jSONPath0, classLoader0, serializeConfig0);
      JSONPath jSONPath1 = JSONPath.compile(">I:o*GlR*~PyMQB=E");
      int[] intArray0 = new int[4];
      intArray0[0] = 62;
      intArray0[1] = 1024;
      intArray0[2] = 62;
      intArray0[3] = (int) (byte)121;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("com", hashMap0);
      // Undeclared exception!
      jSONPath1.deepSet(jSONPath0, "BETWEEN", 92L, (Object) null);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "'b(4TI<-5[?[h?-P?{ ";
      stringArray0[0] = "'b(4TI<-5[?[h?-P?{ ";
      stringArray0[3] = "'b(4TI<-5[?[h?-P?{ ";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("'b(4TI<-5[?[h?-P?{ ", stringArray0, true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'b(4TI<-5[?[h?-P?{ ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '', but ' '
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig.getGlobalInstance();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", (Throwable) null);
      Stack<Object> stack0 = new Stack<Object>();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((Throwable) null);
      jSONPath0.deepScan(sQLTimeoutException0, "fastjson.parser.deny.internal", stack0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(", fieldName : ");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("}N@C`e*<");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("Z^T6J", 1L, 1L, false);
      jSONPath_JSONPathParser1.filterRest(jSONPath_IntBetweenSegement0);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. }N@C`e*<
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      String string0 = "bKuH^";
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.GT;
      JSONPath jSONPath0 = new JSONPath("-c>Y(L0O'&R!");
      SQLDataException sQLDataException0 = new SQLDataException("com.alibaba.fastjson.JSONPath$MinSegment");
      // Undeclared exception!
      JSONPath.set((Object) jSONPath0, "NE", (Object) jSONPath_Operator1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONPath.JSONPathParser.isDigitFirst('8');
      JSONPath jSONPath0 = new JSONPath("\"");
      jSONPath0.contains((Object) "\"");
      String string0 = "+zK 3! Uiev|VbD~=";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("+zK 3! Uiev|VbD~=");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.alibaba.fastjson.JSONPath$KeySetSegment", "\"", sQLTransientConnectionException0);
      sQLSyntaxErrorException0.getLocalizedMessage();
      sQLTransientConnectionException0.fillInStackTrace();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jSONPath0.keySet((Object) "\"");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("+zK 3! Uiev|VbD~=");
      long long0 = (-1425L);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-1425L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = null;
      JSONPath.paths((Object) null);
      String string0 = null;
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/0");
      ParserConfig parserConfig0 = ParserConfig.global;
      jSONPath0.isRef();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = JSONPath.compile("nin");
      jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath0, "nin");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(".");
      Object object0 = jSONPath_MultiIndexSegment0.eval(jSONPath0, ".", (Object) null);
      JSONPath.size(object0, ".");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("nin");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "G'T=%Hrl~s|o)b .pF;";
      stringArray0[1] = "java.nio.ByteBuffer";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = JSONPath.compile("java.nio.ByteBuffer");
      String string0 = "5(0'?X%ouc";
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("5(0'?X%ouc");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath_FilterSegment0, (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path java.nio.ByteBuffer
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "AH+z|yb<B_;po";
      boolean boolean0 = false;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("AH+z|yb<B_;po", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONPath jSONPath0 = null;
      String string1 = "rlike";
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.setValue((JSONPath) null, "AH+z|yb<B_;po", "rlike");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$PropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "v";
      JSONPath jSONPath0 = new JSONPath("v");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      int int0 = 2;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("internal", " q*f]e4 6N9", 2, sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.setNextException(sQLSyntaxErrorException1);
      List<Object> list0 = null;
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(sQLSyntaxErrorException0, "v", (List<Object>) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = JSONPath.compile("Rin");
      jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath0, "Rin");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(".");
      Object object0 = jSONPath_MultiIndexSegment0.eval(jSONPath0, ".", jSONPath_JSONPathParser0);
      JSONPath.size(object0, ".");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("Rin");
      long long0 = JSONPath.SIZE;
      jSONPath_JSONPathParser1.skipWhitespace();
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(45);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      // Undeclared exception!
      try { 
        JSONPath.size((Object) batchUpdateException0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONPath.size((Object) "Y", "*");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("*", "*", 2);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLRecoverableException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("$", "!/g u6i,e[# .0%F", sQLRecoverableException0);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("dd", "dd", false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[]4&fPj", sQLRecoverableException0);
      JSONPath jSONPath0 = JSONPath.compile("*");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(104, (-1875), (-1614161456), 104, 1024);
      jSONPath0.eval((Object) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("dd", "KR/?fB5+U)/", hashMap0, sQLTimeoutException0);
      jSONPath_RlikeSegement0.apply(jSONPath0, sQLSyntaxErrorException0, sQLClientInfoException0, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("99");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("", true);
      Long long0 = new Long(131L);
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      long[] longArray0 = new long[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      longArray0[0] = 131L;
      longArray0[1] = (long) 100;
      longArray0[3] = (-1903L);
      longArray0[4] = (long) 100;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("h+^\u0001<<^YP9i{$*+Q3t", "X8H}!J-GZci>$BiC7*B");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("REG_MATCH", (SerializeConfig) null, parserConfig0);
      JSONPath.keySet((Object) jSONPath0, "fastjson.parser.deny");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.TypeReference");
      jSONPath_JSONPathParser0.explain();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLWarning sQLWarning0 = new SQLWarning("#o N>w", "99");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLWarning0);
      jSONPath_PropertySegment0.setValue(jSONPath0, (Object) null, sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("'/3|Bzq!l&[Nyk");
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONPath.contains((Object) bigInteger0, "$VALUES");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("g3dkIycv");
      jSONPath_JSONPathParser0.buildArraySegement("$VALUES");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SQLDataException sQLDataException0 = new SQLDataException("'/3|Bzq!l&[Nyk", "g3dkIycv");
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      Class<SQLDataException> class1 = SQLDataException.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("$VALUES", hashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("kcY", class0, class1, class0, (Field) null, 19, 19, 4);
      Class<SQLTransientConnectionException> class2 = SQLTransientConnectionException.class;
      BeanContext beanContext0 = new BeanContext(class2, fieldInfo0);
      beanContext0.getMethod();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("NOT_LIKE", (String) null, 4);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      BigDecimal bigDecimal0 = new BigDecimal(173L);
      jSONPath_FilterSegment0.eval(jSONPath0, bigDecimal0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      ParserConfig.getGlobalInstance();
      String string0 = "scanInt";
      // Undeclared exception!
      try { 
        JSONPath.size((Object) class0, "scanInt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("c1~Xxd.Q");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("dd/MM/yyyy HH:mm:ss", (Map<String, ClientInfoStatus>) null);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      long long0 = JSONPath.SIZE;
      JSONPath.eqNotNull(bigDecimal1, bigDecimal0);
      String string0 = "&J (4";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" hch&hs");
      Long long0 = new Long((-3235027470545870510L));
      Object[] objectArray0 = new Object[0];
      jSONPath0.arrayAdd((Object) long0, objectArray0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("/stackTrace/5", 45);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("/stackTrace/5", pattern0, jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_RegMatchSegement0, jSONPath_RegMatchSegement0, true);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/5");
      jSONPath_FilterGroup0.apply(jSONPath0, jSONPath0, (Object) null, "/stackTrace/5");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("/stackTrace/5", 45, 1942L, true);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("([C)[F");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("/stackTrace/5", "/stackTrace/5", 82, sQLRecoverableException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      jSONPath_IntBetweenSegement0.apply(jSONPath0, sQLTimeoutException0, (Object) null, "/stackTrace/5");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("max", hashMap0);
      jSONPath_IntBetweenSegement0.apply(jSONPath0, bigDecimal0, sQLFeatureNotSupportedException0, (Object) null);
      JSONPath.JSONPathParser.isDigitFirst('U');
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/stackTrace/5", true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<JSONPath.RangeSegment> class0 = JSONPath.RangeSegment.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      jSONPath_PropertySegment0.setValue(jSONPath0, sQLRecoverableException0, javaBeanDeserializer0);
      jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_PropertySegment0, sQLTimeoutException0, sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("0qaf4EaR}`8u)SD]");
      UUID uUID0 = MockUUID.randomUUID();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionException0.getStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientConnectionException0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("0qaf4EaR}`8u)SD]", true);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("d<]b?ZOy58*9$h;Yc%", "0qaf4EaR}`8u)SD]");
      Integer integer0 = new Integer((-95));
      jSONPath_PropertySegment0.setValue(jSONPath0, sQLNonTransientConnectionException0, integer0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_PropertySegment0, (Object) uUID0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 0qaf4EaR}`8u)SD]
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Long long0 = new Long(1006L);
      Class<Object> class0 = Object.class;
      JSONPath.isInt(class0);
      Double double0 = new Double(1006L);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      ParserConfig parserConfig1 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      PropertyNamingStrategy propertyNamingStrategy0 = serializeConfig0.propertyNamingStrategy;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), (-1), (-1), 64, 44, (-1));
      jSONPath0.remove((Object) mockGregorianCalendar0);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = null;
      try {
        jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Long long0 = new Long(1006L);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1685), 182, 182);
      JSONPath jSONPath0 = JSONPath.compile("v/$");
      jSONPath0.remove((Object) "v/$");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "v/$";
      stringArray0[1] = "v/$";
      stringArray0[2] = "v/$";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("v/$", "Psgj2<!r`-}i@", "v/$", stringArray0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      Double double0 = new Double(182);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("v/$");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("v/$");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "in", 589, sQLNonTransientException0);
      SQLWarning sQLWarning0 = new SQLWarning(" FC3B,39mW{<xu^}");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" FC3B,39mW{<xu^}", "^&55)PP6?:]QX4avB", 589);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(", method : ", sQLIntegrityConstraintViolationException0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SQLDataException sQLDataException0 = new SQLDataException(" FC3B,39mW{<xu^}");
      Double double0 = new Double(65);
      JSONPath.compare("UrfXy?+u !q|{", "^&55)PP6?:]QX4avB");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" hch&:");
      Long long0 = new Long((-3235027470545870510L));
      Object[] objectArray0 = new Object[0];
      jSONPath0.arrayAdd((Object) long0, objectArray0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      jSONPath0.getPropertyValues(jSONPath_WildCardSegment0);
      int[] intArray0 = new int[6];
      intArray0[0] = 8;
      intArray0[1] = 8;
      intArray0[2] = 8;
      intArray0[3] = 8;
      intArray0[4] = 8;
      intArray0[5] = 8;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("scanStringArray", "scanStringArray", intArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.alibaba.fastjson.TypeReference", " hch&:", 8, batchUpdateException0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "com.alibaba.fastjson.TypeReference";
      stringArray0[1] = "scanStringArray";
      stringArray0[2] = "com.alibaba.fastjson.TypeReference";
      stringArray0[3] = "scanStringArray";
      stringArray0[4] = "scanStringArray";
      stringArray0[5] = "scanStringArray";
      stringArray0[6] = "vfa ";
      stringArray0[7] = " hch&:";
      stringArray0[8] = "com.alibaba.fastjson.TypeReference";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(sQLSyntaxErrorException0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath :  hch&:
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "astjson";
      stringArray0[1] = " FC3B,39mW{<xu^}";
      stringArray0[2] = " FC3B,39mW{<xu^}";
      stringArray0[3] = "astjson";
      stringArray0[1] = "astjson";
      String string0 = "{YHN^JW! )v";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("astjson", (Throwable) null);
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("", stringArray0, false);
      JSONPath jSONPath0 = new JSONPath("astjson", serializeConfig0, (ParserConfig) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(" FC3B,39mW{<xu^}", "", (-2931));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(" FC3B,39mW{<xu^}", " FC3B,39mW{<xu^}", (-2482), (Throwable) null);
      jSONPath_StringInSegement0.apply(jSONPath0, sQLTransientConnectionException0, (Object) null, sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        JSONPath.extract("", " FC3B,39mW{<xu^}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath :  FC3B,39mW{<xu^}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "astjson";
      stringArray0[1] = " FC3B,39mW{<xu^}";
      stringArray0[2] = " FC3B,39mW{<xu^}";
      stringArray0[3] = "astjson";
      stringArray0[4] = "astjson";
      stringArray0[5] = "astjson";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("astjson", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath("astjson");
      SerializeConfig serializeConfig1 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-958), (-958), (-958));
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("c1~Xxd.Q");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      String[] stringArray0 = new String[0];
      sQLClientInfoException0.getStackTrace();
      JSONPath.reserveToObject("c1~Xxd.Q", stringArray0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("dd/MM/yyyy HH:mm:ss", (Map<String, ClientInfoStatus>) null);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      long long0 = JSONPath.SIZE;
      JSONPath.eqNotNull(bigDecimal1, bigDecimal0);
      SerializeConfig serializeConfig0 = new SerializeConfig(781);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("&J (4");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONPath.compile("wj'(*");
      ParserConfig parserConfig0 = new ParserConfig(true);
      Module module0 = mock(Module.class, new ViolatedAssumptionAnswer());
      parserConfig0.register(module0);
      parserConfig0.setJacksonCompatible(false);
      JSONPath.compile("cause");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$");
      System.setCurrentTimeMillis((-1580386065683472715L));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath.paths((Object) parserConfig0, serializeConfig0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("`E#mko'*", "`E#mko'*", false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      JSONPath jSONPath0 = JSONPath.compile("pk#");
      Class<Integer> class0 = Integer.class;
      String string0 = "unsupported array put operation. ";
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("EQ");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("zb&<cOQ/Y,{\u0003b", true);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath.PropertySegment jSONPath_PropertySegment1 = new JSONPath.PropertySegment("deny", true);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("L", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1344, (-20), 1344);
      jSONPath_PropertySegment0.eval(jSONPath0, "?JYlQJ", jSONPath_RangeSegment0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONPath.size((Object) "G'T=%Hrl~s|o)b .pF;", "Y");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("IgnoreNonFieldGetter", "Y", 2);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLRecoverableException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("parse unwrapped field error.", "KR/?fB5+U)/", sQLRecoverableException0);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("!/g u6i,e[# .0%F", "hJ", false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("!/g u6i,e[# .0%F", sQLRecoverableException0);
      JSONPath jSONPath0 = JSONPath.compile("KR/?fB5+U)/");
      Long[] longArray0 = new Long[4];
      Long.getLong("parse unwrapped field error.");
      longArray0[0] = null;
      Long long0 = new Long(9L);
      longArray0[1] = long0;
      Long long1 = new Long((-1));
      longArray0[2] = long1;
      Long long2 = new Long((-685L));
      longArray0[3] = long2;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("hJ", longArray0, false);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("FC3B", hashMap0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("com.alibaba.fastjson.JSONPath$1", "evalKeySet error : ");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(")");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      jSONPath_IntObjInSegement0.apply(jSONPath0, sQLNonTransientConnectionException0, jSONPath_SizeSegment0, long2);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONPath.size((Object) "G'T=%Hrl~s|o)b .pF;", "Y");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("!/g u6i;e`[# .<%6", "hJ", false);
      JSONPath jSONPath0 = JSONPath.compile("KR/?fB5+U)/");
      Long[] longArray0 = new Long[4];
      Long.getLong("parse unwrapped field error.");
      longArray0[0] = null;
      Long long0 = new Long(9L);
      longArray0[1] = long0;
      Long long1 = new Long((-1));
      longArray0[2] = long1;
      Long long2 = new Long((-685L));
      longArray0[3] = long2;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("hJ", longArray0, false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.alibaba.fastjson.JSONPath$1", "evalKeySet error : ");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(")");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      jSONPath_IntObjInSegement0.apply(jSONPath0, sQLNonTransientConnectionException0, jSONPath_SizeSegment0, long2);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONPath.compile("\"a string\"");
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      ParserConfig parserConfig1 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.deny.internal");
      SerializeConfig serializeConfig1 = new SerializeConfig(false);
      ParserConfig parserConfig2 = new ParserConfig(false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      boolean boolean0 = true;
      Float float0 = new Float(1.0F);
      // Undeclared exception!
      try { 
        JSONPath.compare(float0, parserConfig0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.parser.ParserConfig cannot be cast to java.lang.Float
         //
         verifyException("java.lang.Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      Float float0 = new Float(2543.5637F);
      DataTruncation dataTruncation0 = new DataTruncation((-1844), false, false, (-1844), (-2927));
      SQLDataException sQLDataException0 = new SQLDataException(dataTruncation0);
      // Undeclared exception!
      try { 
        JSONPath.compare(float0, sQLDataException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLDataException cannot be cast to java.lang.Float
         //
         verifyException("java.lang.Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONPath.size((Object) null, "'/3|Bzq!l&[Nyk");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLRecoverableException0);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("'/3|Bzq!l&[Nyk", "scan null error", true);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("UaQM~D7!$5%a");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!/g u6i,e[# .0%F");
      JSONPath.RlikeSegement jSONPath_RlikeSegement1 = new JSONPath.RlikeSegement("'/3|Bzq!l&[Nyk", "scan null error", true);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but '/'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONPath.size((Object) null, "'/3|Bzq!l&[Nyk");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("not", "!/g u6i,e[# .0%F", (-1));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLRecoverableException0);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("'/3|Bzq!l&[Nyk", "scan null error", true);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("UaQM~D7!$5%a");
      String[] stringArray0 = new String[0];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("com.alibaba.fastjson.JSONPath$NotNullSegement", "!/g u6i,e[# .0%F", "false", stringArray0, true);
      JSONPath.NullSegement jSONPath_NullSegement1 = new JSONPath.NullSegement("TRAN{PM\"s}>rFE");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!/g u6i,e[# .0%F");
      jSONPath_JSONPathParser0.filterRest(jSONPath_RlikeSegement0);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but '/'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONPath.size((Object) null, "'/3|Bzq!l&[Nyk");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("not", "/g u6i,e[# .0%F", (-1));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("'/3|Bzq!l&[Nyk", "not", 5237, sQLRecoverableException0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NOT_LIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("/g u6i,e[# .0%F", 5237, jSONPath_Operator1);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      JSONPath jSONPath0 = JSONPath.compile("v\"HEVpo");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("W92tfKC.WD'|", sQLTransientConnectionException0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(976, 976, 976);
      jSONPath_FilterSegment0.remove(jSONPath0, sQLTransientConnectionException1, jSONPath_RangeSegment0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1846), (-119), (-1846));
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/g u6i,e[# .0%F", false);
      Double double0 = new Double((-119));
      int int0 = new Integer(976);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'s*,s*'");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      jSONPath0.getPropertyValues(parserConfig0);
      JSONPath jSONPath1 = new JSONPath("com.alibaba.fastjson.JSONPath$1");
      JSONPath.arrayAdd((Object) serializeConfig0, "fastjson.parser.autoTypeSupport", (Object[]) null);
      Long long0 = new Long(582L);
      int int0 = 633;
      int int1 = 4405;
      DataTruncation dataTruncation0 = new DataTruncation(633, false, true, 4405, 4405);
      // Undeclared exception!
      try { 
        JSONPath.compare(long0, dataTruncation0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.DataTruncation cannot be cast to java.lang.Long
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "(Ljava/util/List;)V";
      Long long0 = new Long(5614464919154503228L);
      int int0 = 127;
      // Undeclared exception!
      try { 
        JSONPath.compare(long0, "(Ljava/util/List;)V");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Long
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("\"");
      jSONPath0.contains((Object) "\"");
      int[] intArray0 = new int[20];
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONPath.JSONPathParser.isDigitFirst('8');
      JSONPath jSONPath0 = new JSONPath("\"");
      jSONPath0.contains((Object) "\"");
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[3] = "not";
      stringArray0[4] = " h7!-ds7W}_[Xr";
      stringArray0[5] = "not";
      stringArray0[6] = "\"";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("not", (String) null, "\"", stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      Double double0 = new Double((-1.0));
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Short short0 = new Short((short)38);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("fastjson.parser.autoTypeSupport", (String) null, hashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLClientInfoException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("hp0j_Ac0", "?_BY f~ ,0P", sQLInvalidAuthorizationSpecException0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(281, 83, (-1628));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("Q5bW", serializeConfig0, parserConfig0);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("size");
      Class<SQLWarning> class0 = SQLWarning.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, (Object) null, (Object) null, (Object) null);
      DataTruncation dataTruncation0 = new DataTruncation(83, false, false, 83, 99);
      jSONPath0.evalKeySet(dataTruncation0);
      boolean boolean1 = JSONPath.JSONPathParser.isDigitFirst('-');
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONPath.JSONPathParser.isDigitFirst('-');
      JSONPath jSONPath0 = new JSONPath("like");
      MockUUID.fromString("like");
      BigDecimal bigDecimal0 = new BigDecimal(358L);
      assertEquals((short)358, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}");
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("2", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("2", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      short short0 = (short)92;
      Short short1 = new Short((short)4462);
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.autoTypeSupport");
      BigDecimal bigDecimal0 = BigDecimal.valueOf((double) (short)92);
      JSONPath.eqNotNull(bigDecimal0, double0);
      Short short2 = new Short((short) (-565));
      String string0 = "}O]}Oo9)o#/h!YcE6";
      JSONPath.size((Object) null, "}O]}Oo9)o#/h!YcE6");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("country");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "astjson";
      SerializeConfig.getGlobalInstance();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      long long0 = JSONPath.SIZE;
      Double double0 = new Double(5614464919154503228L);
      JSONPath.eqNotNull(bigDecimal0, double0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. \"
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      JSONPath.isInt(class0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) class0, "com.alibaba.fastjson.JSONPath$Context", (Object) "com.alibaba.fastjson.JSONPath$Context");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("99");
      SQLWarning sQLWarning0 = new SQLWarning("99", "99");
      boolean boolean0 = JSONPath.eq("99", sQLWarning0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("99");
      jSONPath0.getPropertyValue(sQLWarning0, "99", 0L);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) sQLTransactionRollbackException0;
      JSONPath jSONPath1 = JSONPath.compile("o>A`S8U\"IK>uOpS");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-8773806119481270567L);
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("Utv@M?G<!I%l)yx", longArray0, false);
      boolean boolean1 = jSONPath_IntInSegement0.apply(jSONPath1, objectArray0[0], parserConfig0, jSONPath0);
      assertFalse(boolean1);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean2 = jSONPath0.set((Object) null, (Object) bigInteger0, false);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = JSONPath.JSONPathParser.isDigitFirst('D');
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":{},\"color\":[],\"value2\":false,\"number\":\"iFb7%\"}");
      Double double0 = new Double(3.0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(45, 0, 45);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("r");
      jSONPath_RangeSegment0.eval(jSONPath0, sQLFeatureNotSupportedException0, (Object) null);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.deny", "fastjson.parser.deny", "fastjson.parser.deny", (String[]) null, false);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("fastjson.parser.autoTypeSupport", "Qs =}F", false);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 45;
      intArray0[3] = 0;
      intArray0[4] = 45;
      intArray0[5] = 45;
      intArray0[6] = 0;
      intArray0[7] = 45;
      intArray0[8] = 45;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      DataTruncation dataTruncation0 = new DataTruncation(45, false, false, 297, 105);
      jSONPath_RlikeSegement0.apply(jSONPath0, jSONPath_MultiIndexSegment0, dataTruncation0, sQLFeatureNotSupportedException0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RlikeSegement0);
      Double double1 = new Double(3.0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("{\"fruit\":\"Apple\",\"size\":{},\"color\":[],\"value2\":false,\"number\":\"iFb7%\"}");
      try { 
        Byte.decode("r");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"r\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"(Ljava/lang/Class;)Ljava/util/Collection;\":\"Apple\",\"size\":\"\",\"address\":\"Red\",\"value\":true,\"value2\":null,\"number\":true}");
      SQLException sQLException0 = new SQLException((String) null, "com", 65);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 0, sQLException0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com", sQLWarning0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SQLDataException sQLDataException0 = new SQLDataException("UrfXy?+u !q|{", "com");
      Double double0 = new Double(0.0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"(Ljava/lang/Class;)Ljava/util/Collection;\":\"Apple\",\"size\":\"\",\"address\":\"Red\",\"value\":true,\"value2\":null,\"number\":true}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-692L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "NOT_LIKE";
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-861), 281, 281);
      JSONPath.size((Object) null, " jeP3Ik[;X#M5P}u}n");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(",");
      jSONPath_JSONPathParser0.skipWhitespace();
      Long long0 = new Long(281);
      JSONPath.set((Object) jSONPath_MinSegment0, ",", (Object) long0);
      ClassLoader.getSystemClassLoader();
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("nM.PtwdmAfD&/8}k-?");
      jSONPath_JSONPathParser0.skipWhitespace();
      assertNotSame(jSONPath_JSONPathParser0, jSONPath_JSONPathParser1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("Y(.&7-Wvmaf", "fastjson.parser.autoTypeAccept", true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      JSONPath jSONPath0 = JSONPath.compile("java");
      Class<SQLDataException> class0 = SQLDataException.class;
      Class<Field> class1 = Field.class;
      Class<Integer> class2 = Integer.class;
      FieldInfo fieldInfo0 = new FieldInfo("fastjson.parser.autoTypeSupport", class1, class2, class0, (Field) null, 832, 105, (-431));
      BeanContext beanContext0 = new BeanContext(class2, fieldInfo0);
      beanContext0.getMethod();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(",", "com.alibaba.fastjson.JSONPath$IntInSegement", 105);
      Long long0 = new Long((-1331L));
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, long0, sQLSyntaxErrorException1);
      assertNotNull(jSONArray0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "/stackTrace/5";
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("/stackTrace/5", "/stackTrace/5", true);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/5");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/5");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(57, 43, 57);
      jSONPath_ValueSegment0.apply(jSONPath0, jSONPath0, jSONPath_RangeSegment0, "/stackTrace/5");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = JSONPath.size((Object) null, "'/3|Bzq!l&[Nyk");
      assertEquals((-1), int0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'/3|Bzq!l&[Nyk");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('/', char0);
      
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("unsupported set operation.", jSONPath_JSONPathParser0, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_ValueSegment0, jSONPath_ValueSegment0, false);
      JSONPath.compile("unsupported set operation.");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("'/3|Bzq!l&[Nyk", "unsupported set operation.", 124);
      SerializeConfig serializeConfig0 = new SerializeConfig(329);
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig1 = SerializeConfig.getGlobalInstance();
      parserConfig0.addAccept("hO A>7Z*w<6G.");
      JSONPath jSONPath0 = new JSONPath("HY](So.{8T5#6{/OQ`&", serializeConfig1, parserConfig0);
      Double double0 = new Double(0.75);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Double double1 = new Double(124);
      int int1 = JSONPath.compare(double1, double1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-117L);
      longArray0[1] = (-5808554674130653198L);
      longArray0[2] = (-1887L);
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("/stackTrace/8", longArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/8");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      jSONPath_IntInSegement0.apply(jSONPath0, jSONPath0, jSONPath0, (Object) null);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) parserConfig0, (Object) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-117L);
      longArray0[1] = (-5808554674130653198L);
      longArray0[2] = (-1887L);
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("/stackTrace/8", longArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/8");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      jSONPath_IntInSegement0.apply(jSONPath0, jSONPath0, jSONPath0, (Object) null);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) parserConfig0, (Object) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("wj'(*");
      ParserConfig parserConfig0 = new ParserConfig(true);
      String string0 = ".T179($$A";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, ".T179($$A", 183);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fastjson.parser.autoTypeAccept", "fastjson.parser.safeMode", 70, sQLTransientConnectionException0);
      jSONPath0.getPropertyValues("wj'(*");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("fastjson.parser.deny");
      JSONPath jSONPath1 = new JSONPath(".T179($$A");
      Class<Method> class0 = Method.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONPath1.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.reflect.Method
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("3>5y=^K'wo4.8h");
      JSONPath jSONPath0 = new JSONPath("*");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ESZ", 5);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Object object0 = jSONPath0.getArrayItem(fileSystemHandling0, 0);
      assertNotNull(object0);
      
      boolean boolean0 = jSONPath0.isRef();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("Y");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("Y");
      JSONPath.compile("in");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("in");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}");
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("like", serializeConfig0, parserConfig0);
      jSONPath1.arrayAdd((Object) jSONPath0, (Object[]) null);
      BigDecimal bigDecimal0 = new BigDecimal((-1968L));
      JSONPath.eqNotNull(double0, bigDecimal0);
      System.setCurrentTimeMillis((-1968L));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONPath.compile("/stackTrace/4");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = true;
      Class<Float> class0 = Float.class;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/4");
      jSONPath_JSONPathParser0.readString();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/stackTrace/5");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("/stackTrace/5", "/stackTrace/5", false);
      JSONPath.compile("/stackTrace/5");
      JSONPath.compile("wy.b40Sj(");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("R");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/5");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "y");
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, sQLTransactionRollbackException0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.GT;
      JSONPath.Operator jSONPath_Operator2 = JSONPath.Operator.GT;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("bKuH^", (-4080L), jSONPath_Operator2);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntOpSegement0, jSONPath_IntOpSegement0, false);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Field> class0 = Field.class;
      serializeConfig0.createJavaBeanSerializer(class0);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("bKuH^", serializeConfig0, parserConfig0);
      JSONPath.remove((Object) jSONPath0, "fastjson.parser.autoTypeAccept");
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath0, jSONPath_Operator1, (Object) null);
      Float float0 = new Float((float) (-4080L));
      boolean boolean1 = JSONPath.eqNotNull(float0, float0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"iz08synpk\":\"\",\"color\":{},\"value2\":null,\"number\":null,\"ol\":\"a string\",\"x\":99}");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":\"Apple\",\"iz08synpk\":\"\",\"color\":{},\"value2\":null,\"number\":null,\"ol\":\"a string\",\"x\":99}");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com");
      JSONPath.NotNullSegement jSONPath_NotNullSegement1 = new JSONPath.NotNullSegement("{\"fruit\":\"Apple\",\"iz08synpk\":\"\",\"color\":{},\"value2\":null,\"number\":null,\"ol\":\"a string\",\"x\":99}");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com", "GT", 38);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SQLDataException sQLDataException0 = new SQLDataException("GT", "parse error : ");
      JSONPath jSONPath1 = JSONPath.compile("/");
      jSONPath1.size((Object) jSONPath_NotNullSegement0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("<KZn%Dyakl'T)1,jO]");
      // Undeclared exception!
      try { 
        JSONPath.read("com", "GT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2com
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      String[] stringArray0 = new String[6];
      stringArray0[0] = " FC3B,39mW{<xu^}";
      stringArray0[1] = " FC3B,39mW{<xu^}";
      stringArray0[2] = " FC3B,39mW{<xu^}";
      stringArray0[3] = " FC3B,39mW{<xu^}";
      stringArray0[4] = " FC3B,39mW{<xu^}";
      stringArray0[5] = " FC3B,39mW{<xu^}";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement(" FC3B,39mW{<xu^}", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath(" FC3B,39mW{<xu^}");
      SerializeConfig serializeConfig1 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      String string0 = null;
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.deny.internal", "-", (String) null, (String[]) null, true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" FC3B,39mW{<xu^}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      String string0 = "astjson";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("Q/XH@z", (String[]) null, true);
      JSONPath jSONPath0 = new JSONPath("-l");
      SerializeConfig serializeConfig1 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      String string1 = null;
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("[jEh`DdM", "KR", "-l", (String[]) null, false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[jEh`DdM");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("-");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. -
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "astjson";
      stringArray0[1] = " FC3B,39mW{<xu^}";
      stringArray0[2] = " FC3B,39mW{<xu^}";
      stringArray0[3] = "astjson";
      stringArray0[4] = "astjson";
      stringArray0[5] = "astjson";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("astjson", stringArray0, true);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1273));
      JSONPath.size((Object) jSONPath_ArrayAccessSegment0, "/stackTrace/0");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("\"fruit\":\"AllowSingleQuotes\",\"com.alibaba.fastjson.JSONPath$FilterGroup\":99,\"color\":\"Red\",\"value2\":false,\"number\":false,\"x\":false}");
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      int int0 = 101;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1814), (-54), 101);
      SQLDataException sQLDataException0 = new SQLDataException("dX07ht");
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, sQLDataException0, sQLDataException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String[] stringArray0 = new String[16];
      stringArray0[1] = "h";
      stringArray0[2] = stringArray0[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("fastjson.parser.autoTypeAccept", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath("L");
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "fastjson.parser.autoTypeAccept";
      stringArray1[1] = "fastjson.parser.autoTypeAccept";
      stringArray1[2] = stringArray0[0];
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-2083), 93, 16);
      jSONPath_RangeSegment0.eval(jSONPath0, "L", stringArray1[2]);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class0, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("3>5y=^K'wo4.8h");
      JSONPath jSONPath0 = new JSONPath("*");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONPath jSONPath1 = new JSONPath("3>5y=^K'wo4.8h");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("gkQ");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3gkQ
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      Stack<Object> stack0 = new Stack<Object>();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      jSONPath0.deepScan((Object) null, "read string from reader error", stack0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("tBa0/*~");
      jSONPath_JSONPathParser0.explain();
      // Undeclared exception!
      try { 
        JSONPath.read("tBa0/*~", "fastjson.parser.autoTypeSupport");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeAccept");
      String[] stringArray0 = new String[16];
      stringArray0[0] = "fastjson.parser.autoTypeAccept";
      stringArray0[1] = "h";
      jSONPath_JSONPathParser0.next();
      stringArray0[2] = "fastjson.parser.autoTypeAccept";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("fastjson.parser.autoTypeAccept", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath("L");
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "fastjson.parser.autoTypeAccept";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath1 = JSONPath.compile(".*|");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("h");
      // Undeclared exception!
      try { 
        jSONPath1.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2h
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int int0 = 351;
      SerializeConfig serializeConfig0 = new SerializeConfig(351);
      serializeConfig0.register((Module) null);
      ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      SerializeConfig serializeConfig1 = new SerializeConfig();
      Class<Long> class0 = Long.class;
      String[] stringArray0 = new String[9];
      stringArray0[2] = "[B{iyHE:~){Sb)";
      stringArray0[3] = "LT";
      stringArray0[5] = "<YLUfd";
      stringArray0[7] = "LT";
      stringArray0[8] = "*sm*BR";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) javaBeanSerializer0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("c1~Xxd.Q");
      JSONPath jSONPath0 = new JSONPath("(I)V");
      JSONPath.paths((Object) jSONPath0);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.eval((Object) "(I)V", "toJSON error");
      short short0 = (short)16;
      Short short1 = new Short(short0);
      double double0 = 0.0;
      BigDecimal bigDecimal0 = new BigDecimal(double0);
      JSONPath.eqNotNull(short1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"\",\"/stackTrace/0\":{},\"value\":true,\"value2\":null,\"number\":null,\"ol\":-99}");
      String string0 = "NOT_LIKE";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "NOT_LIKE";
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-861), 281, 31186);
      JSONPath.size((Object) null, " jeP3Ik[;X#M5P}u}n");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(",");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONPath.Operator.values();
      JSONPath jSONPath0 = JSONPath.compile("b");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1036), 182, 182);
      JSONPath.compile("v/$");
      String string0 = "4.lUteNo;8";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("YHf7", "4.lUteNo;8", 79);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("b", sQLTimeoutException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTransientConnectionException0);
      jSONPath0.remove((Object) sQLTransactionRollbackException0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(string0);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 4.lUteNo;8
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Double double0 = new Double((-1365.04185992284));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer", serializeConfig0, parserConfig1);
      JSONPath.eqNotNull(double0, double0);
      JSONPath.size((Object) "2", "hlUlU71[E_");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(parserConfig0.AUTOTYPE_ACCEPT);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "/stackTrace/8";
      stringArray0[1] = "/stackTrace/8";
      stringArray0[2] = "/stackTrace/8";
      stringArray0[3] = "/stackTrace/8";
      stringArray0[4] = "/stackTrace/8";
      JSONPath.reserveToObject(map0, stringArray0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("/stackTrace/8", map0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      long long0 = JSONPath.SIZE;
      JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      int int0 = 777;
      SerializeConfig serializeConfig0 = new SerializeConfig(777, false);
      serializeConfig0.setTypeKey(" FC3B,39mW{<xu^}");
      JSONPath jSONPath0 = JSONPath.compile("$TO.0g&pc_yG;\"");
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      jSONPath0.getJavaBeanSerializer(class0);
      String string0 = "_";
      try { 
        Byte.valueOf("DM=A1\"{iFC", (-457));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -457 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/8");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("/stackTrace/8", jSONPath_SizeSegment0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      jSONPath_FilterSegment0.eval(jSONPath0, jSONPath0, jSONPath0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/stackTrace/8";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject(jSONPath_FilterSegment0, stringArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("c1~Xxd.Q");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      String[] stringArray0 = new String[0];
      JSONPath.reserveToObject("c1~Xxd.Q", stringArray0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("dd/MM/yyyy HH:mm:ss", (Map<String, ClientInfoStatus>) null);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath jSONPath0 = new JSONPath("c1~Xxd.Q");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("c1~Xxd.Q");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-811277319855450455L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("c1~Xxd.Q");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      JSONPath jSONPath0 = new JSONPath("]16Zp4Tv'_5*<P5-QdH");
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Short short0 = new Short((short)3462);
      jSONPath_MultiIndexSegment0.eval(jSONPath0, sQLTransactionRollbackException0, short0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("yyyy-MM-dd HH:mm:ss", 3089, jSONPath_Operator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("yyyy-MM-dd HH:mm:ss", "@type");
      Float float0 = new Float((float) (short)3462);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      char[] charArray0 = new char[3];
      charArray0[0] = '!';
      charArray0[1] = '0';
      JSONPath.eqNotNull(3089, short0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      serializeConfig0.setTypeKey("&J (4");
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("1.2.68", serializeConfig0, parserConfig0);
      jSONPath1.getJavaBeanSerializer(class0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("c1~Xxd.Q");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-2777L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONPath.compile("\"fruit\":\"AllowSingleQuotes\",\"com.alibaba.fastjson.JSONPath$FilterGroup\":99,\"color\":\"Red\",\"value2\":false,\"number\":false,\"x\":false}");
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig.getGlobalInstance();
      Long long0 = new Long((-811277319855450459L));
      boolean boolean0 = JSONPath.eqNotNull(double0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Long long0 = new Long((-1014497654951707614L));
      Float float0 = new Float(0.75F);
      boolean boolean0 = JSONPath.eqNotNull(long0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONPath.compile("{\"fruit\":\"AllowSingleQuotes\",\"com.alibaba.fastjson.JSONPath$FilterGroup\":99,\"color\":\"Red\",\"value2\":false,\"number\":false,\"x\":false}");
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("2", serializeConfig0, parserConfig0);
      JSONPath.eqNotNull(double0, double0);
      short short0 = (short)4462;
      Short short1 = new Short((short)4462);
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.autoTypeSupport");
      int[] intArray0 = new int[4];
      intArray0[0] = 4079;
      intArray0[1] = 4079;
      intArray0[2] = (int) (short)92;
      intArray0[3] = (int) (short)4462;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("fastjson.parser.safeMode", intArray0, sQLDataException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("And", (String) null, (-119), sQLDataException0);
      SQLDataException sQLDataException1 = new SQLDataException("fastjson.parser.deny", "2");
      JSONPath.compile("2");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":\"AllowSingleQuotes\",\"com.alibaba.fastjson.JSONPath$FilterGroup\":99,\"color\":\"Red\",\"value2\":false,\"number\":false,\"x\":false}");
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.AllowComment;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.ErrorOnEnumNotMatch;
      featureArray0[1] = feature1;
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "fastjson.parser.deny.internal", parserConfig0, (-110), featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath.eqNotNull(double0, double0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = null;
      try {
        jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig.getGlobalInstance();
      Long long0 = new Long((-1468L));
      boolean boolean0 = JSONPath.eqNotNull(double0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      JSONPath.isInt(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      int int0 = 790;
      SerializeConfig serializeConfig0 = new SerializeConfig(790, true);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      int int1 = 108;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      JSONPath jSONPath1 = new JSONPath("M|C]_h9z");
      jSONPath1.size((Object) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(":K:W0", "fastjson.parser.deny.internal");
      SQLDataException sQLDataException0 = new SQLDataException(sQLRecoverableException0);
      SQLDataException sQLDataException1 = new SQLDataException("end must greater than or equals start. start ", sQLRecoverableException0);
      // Undeclared exception!
      try { 
        sQLDataException1.printStackTrace((PrintStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParserConfig.getGlobalInstance();
      Stack<Object> stack0 = new Stack<Object>();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      SQLWarning sQLWarning0 = new SQLWarning("fastjson.parser.autoTypeAccept", "SHQT", 43);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.printStackTrace();
      sQLWarning0.setNextException(sQLClientInfoException0);
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      JSONPath.isInt(class0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("parse unwrapped field error.", serializeConfig0, parserConfig0);
      jSONPath0.toJSONString();
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem((JSONPath) null, "parse unwrapped field error.", (-3900), "parse unwrapped field error.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/4");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Class<Float> class0 = Float.class;
      jSONPath0.getJavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) bigDecimal0, (Object) bigDecimal0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = "/stackTrace/4";
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/4");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Class<Float> class0 = Float.class;
      jSONPath0.getJavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) bigDecimal0, (Object) bigDecimal0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      String string0 = "F4)n' 5kHJt>8";
      JSONPath.compile("F4)n' 5kHJt>8");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/12", serializeConfig0, parserConfig0);
      int int0 = 2704;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1607, 1124075009, 1124075009, 2704, 907);
      jSONPath0.size((Object) mockGregorianCalendar0);
      String string1 = "xyqdfp2:pr _%xx.3U,";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(")3[Ib-Z?28gDnd`*(1Y", "com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer");
      SQLDataException sQLDataException0 = new SQLDataException(sQLRecoverableException0);
      SQLDataException sQLDataException1 = new SQLDataException("XR2j*@`!qBC", sQLDataException0);
      // Undeclared exception!
      try { 
        sQLDataException1.printStackTrace((PrintStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      serializeConfig0.clearSerializers();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      JSONPath jSONPath0 = new JSONPath("keySet", serializeConfig0, parserConfig0);
      Short short0 = new Short((short) (-1));
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.put("fastjson.parser.autoTypeAccept", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("hy&zej", "keySet", hashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLClientInfoException0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.autoTypeSupport", false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.deny.internal", "java.awt.Rectangle");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("BETWEEN", "java.awt.Rectangle", (short)38, sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(";io0 H,", sQLFeatureNotSupportedException0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      jSONPath_WildCardSegment0.eval(jSONPath0, javaBeanSerializer0, map0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLFeatureNotSupportedException0);
      Class<Byte> class1 = Byte.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class1, (Type) class1, (PropertyNamingStrategy) null, false, false, false);
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      Double double0 = new Double(846.2394);
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, javaBeanDeserializer0, double0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // java.lang.Double
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}");
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      ParserConfig parserConfig1 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      PropertyNamingStrategy propertyNamingStrategy0 = serializeConfig0.propertyNamingStrategy;
      jSONPath0.remove((Object) null);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/8");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("kj(]C*:a~e5N1=#6f-");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. /stackTrace/8
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("\"a string\"");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("\"a string\"", (-4080L), jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntOpSegement0, jSONPath_IntOpSegement0, false);
      SerializeConfig.getGlobalInstance();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      long long0 = JSONPath.SIZE;
      Double double0 = new Double((-4080L));
      JSONPath.eqNotNull(bigDecimal0, double0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string\"");
      jSONPath_JSONPathParser0.readValue();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. \"a string\"
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.GT;
      JSONPath.Operator jSONPath_Operator2 = JSONPath.Operator.GE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("com.alibaba.fastjson.JSONPath$MinSegment", (-4080L), jSONPath_Operator2);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntOpSegement0, jSONPath_IntOpSegement0, false);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("bKuH^", serializeConfig0, parserConfig0);
      JSONPath.remove((Object) jSONPath0, "fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(jSONPath_Operator1, "fastjson.parser.deny.internal", (-4080L), "bKuH^");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(31186, 55, 55);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/5");
      jSONPath0.size((Object) "2");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("2");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = JSONPath.compile(",#Z81P9(]}v4M63");
      Object object0 = jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath0, ",#Z81P9(]}v4M63");
      JSONPath.compile("@type");
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".";
      stringArray0[1] = "&";
      stringArray0[2] = ".";
      stringArray0[3] = "@type";
      stringArray0[4] = "1.2.68";
      stringArray0[5] = "@type";
      JSONPath.reserveToArray(object0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = "G'T=%Hrl~s|Mo)b .pF;";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!/g u6i,e[# .0%F");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      JSONPath jSONPath0 = new JSONPath("SD=LF@phX-swk", serializeConfig0, parserConfig0);
      JSONPath jSONPath1 = JSONPath.compile("e46\"pn3V](F*");
      int int0 = 47;
      Short short0 = new Short((short)24);
      // Undeclared exception!
      try { 
        jSONPath1.setPropertyValue(classLoader0, "fastjson.parser.autoTypeSupport", 47, short0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}");
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("2", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("2", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      Short short0 = new Short((short)92);
      int[] intArray0 = new int[0];
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.deny");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("LG<%pj`[Aa}l", intArray0, sQLDataException0);
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NOT_IN;
      jSONPath_FilterSegment0.remove(jSONPath0, (Object) null, jSONPath_Operator1);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JSONPath.size((Object) propertyNamingStrategy0, "c");
      Class<Object> class0 = Object.class;
      JSONPath.isInt(class0);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("5GnD\rT~pWg%_", (String) null, "IGmglEB0TJ(`>MS`z", (String[]) null, false);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("2", "y!/~axLUvW2qRtvju", (-712), batchUpdateException0);
      // Undeclared exception!
      try { 
        jSONPath1.containsValue((Object) sQLIntegrityConstraintViolationException0, (Object) short0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"\",\"/stackTrace/0\":{},\"value\":true,\"value2\":null,\"number\":null,\"ol\":-99}");
      String string0 = "NOT_LIKE";
      String[] stringArray0 = new String[1];
      ParserConfig parserConfig0 = new ParserConfig(false);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("like", serializeConfig0, parserConfig0);
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(stringArray0[0], stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      String string0 = "&@DDh2.Wfj+&R";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("&@DDh2.Wfj+&R", "&@DDh2.Wfj+&R", "", stringArray0, true);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("", jSONPath_MultiPropertySegment0, true);
      JSONPath jSONPath0 = JSONPath.compile("}c<,'");
      SQLDataException sQLDataException0 = new SQLDataException();
      // Undeclared exception!
      try { 
        jSONPath_ValueSegment0.apply(jSONPath0, "}c<,'", sQLDataException0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("/stackTrace/5", "/stackTrace/5", false);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/5");
      String string0 = "GE";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("GE");
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(jSONPath0, "z", 1, "z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONPath.size((Object) null, "'/3|Bzq!l&[Nyk");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("not", "!/g u6i,e[# .0%F", (-1));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "not";
      stringArray0[0] = "parse unwrapped field error.";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLRecoverableException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("not", "parse unwrapped field error.", sQLInvalidAuthorizationSpecException0);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("'/3|Bzq!l&[Nyk", "scan null error", true);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("parse", sQLTimeoutException0);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("UaQM~D7!$5%a");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!/g u6i,e[# .0%F");
      jSONPath_JSONPathParser0.filterRest(jSONPath_NullSegement0);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. !/g u6i,e[# .0%F
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}");
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("", serializeConfig0, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      jSONPath0.deepGetPropertyValues(arrayList0, arrayList0);
      Float float0 = new Float(0.0F);
      jSONPath1.removePropertyValue(float0, "NotWriteRootClassName", false);
      Random.setNextRandom(110);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(110, 2705, 1451);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(",", ",", 114);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("fastjson.parser.autoTypeAccept", jSONPath1, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      Long long0 = new Long(2705);
      Float float1 = new Float(0.0F);
      ArrayList arrayList1 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, long0, float1);
      assertTrue(arrayList1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(false);
      SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      Stack<Object> stack0 = new Stack<Object>();
      jSONPath0.deepGetPropertyValues(stack0, stack0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("8h' INlk.HS5sb8Z");
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONPath.compile("{\"fruit\":\"Apple\",\"com.alibaba.fastjson.JSONPath$FilterGroup\":99,\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}");
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("2", serializeConfig0, parserConfig0);
      Byte byte0 = new Byte((byte)42);
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) byte0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1114112);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("java", serializeConfig0, parserConfig0);
      jSONPath0.setPropertyValue("java", "I,", (-399485684437733377L), "java");
      jSONPath0.set((Object) "I,", (Object) "java");
      Short short0 = new Short((short)3037);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("o^I^1zhl[N2", ">oc'", hashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLClientInfoException0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeSupport");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser(",L");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ,L
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONPath.compile("{\"fruit\":\"Apple\",\"com.alibaba.fastjson.JSONPath$FilterGroup\":99,\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}");
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("2", serializeConfig0, parserConfig0);
      Short short0 = new Short((short)4462);
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.autoTypeSupport");
      int[] intArray0 = new int[4];
      intArray0[0] = 4079;
      intArray0[1] = 4079;
      intArray0[2] = (int) (short)92;
      intArray0[3] = (int) (short)4462;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("fastjson.parser.safeMode", intArray0, sQLDataException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("And", (String) null, (-119), sQLDataException0);
      SQLDataException sQLDataException1 = new SQLDataException("fastjson.parser.deny", "2");
      JSONPath jSONPath1 = JSONPath.compile("2");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":\"Apple\",\"com.alibaba.fastjson.JSONPath$FilterGroup\":99,\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}");
      // Undeclared exception!
      try { 
        jSONPath1.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"/stackTrace/10\":\"a string\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\",\"checkValue\":null,\"xx\":true}");
      Double double0 = new Double(0.0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("{\"/stackTrace/10\":\"a string\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\",\"checkValue\":null,\"xx\":true}");
      jSONPath1.arrayAdd((Object) jSONPath0, (Object[]) null);
      JSONPath jSONPath2 = new JSONPath("L", serializeConfig0, parserConfig0);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("NO_RLIKE");
      Class<JSONPath> class0 = JSONPath.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      jSONPath_NullSegement0.apply(jSONPath2, serializeConfig0, javaBeanDeserializer0, "{\"/stackTrace/10\":\"a string\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\",\"checkValue\":null,\"xx\":true}");
      long[] longArray0 = new long[6];
      longArray0[0] = 793L;
      longArray0[1] = 793L;
      longArray0[2] = 8963398325558730460L;
      longArray0[4] = (-1445L);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-r7t o<");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = "2";
      JSONPath.compile("2");
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) bigInteger0, "2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"REG_MATCH\",\"end must greater than or equals start. start \":true,\"value2\":[],\"/stackTrace/11\":false}");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"REG_MATCH\",\"end must greater than or equals start. start \":true,\"value2\":[],\"/stackTrace/11\":false}", (-4137L), jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntOpSegement0, jSONPath_IntOpSegement0, false);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      JSONPath jSONPath1 = new JSONPath("LT", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) parserConfig0, "nin");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("c1~Xxd.Q");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      JSONPath jSONPath0 = new JSONPath("]16Zp4Tv'_5*<P5-QdH");
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Short short0 = new Short((short)3462);
      jSONPath_MultiIndexSegment0.eval(jSONPath0, sQLTransactionRollbackException0, short0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("yyyy-MM-dd HH:mm:ss", 3089, jSONPath_Operator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("yyyy-MM-dd HH:mm:ss", "@type");
      Float float0 = new Float((float) (short)3462);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      char[] charArray0 = new char[3];
      charArray0[0] = '!';
      charArray0[1] = '0';
      charArray0[2] = 'X';
      Pattern pattern0 = Pattern.compile("_tN+Pv%Fe;4l~bQtv]", 15);
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("1.2.68", pattern0, jSONPath_Operator0);
      jSONPath_RegMatchSegement0.apply(jSONPath0, "\\-", float0, sQLTransientConnectionException0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 23, 1224736769);
      jSONReaderScanner0.scanUUID('o');
      jSONPath_DoubleOpSegement0.apply(jSONPath0, jSONPath_MultiIndexSegment0, jSONPath_NotNullSegement0, (Object) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("rlike", "@type");
      jSONPath_NotNullSegement0.apply(jSONPath0, propertyNamingStrategy0, short0, sQLInvalidAuthorizationSpecException0);
      SQLDataException sQLDataException0 = new SQLDataException("\\-");
      jSONPath_DoubleOpSegement0.apply(jSONPath0, jSONPath_MultiIndexSegment0, sQLDataException0, "\\-");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("1.2.68");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 1.2.68
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("DisableCircularReferenceDetect");
      JSONScanner jSONScanner0 = new JSONScanner("]$93F");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.deny", "fastjson.parser.deny", (-815), sQLNonTransientException0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(sQLInvalidAuthorizationSpecException0, jSONScanner0, parserConfig0);
      Object object0 = jSONPath0.extract(defaultJSONParser0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("java.vm.name");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "iFb7%";
      stringArray0[1] = "java.vm.name";
      stringArray0[2] = "java.vm.name";
      stringArray0[3] = "java.vm.name";
      stringArray0[4] = "iFb7%";
      stringArray0[5] = "java.vm.name";
      JSONPath.reserveToObject("java.vm.name", stringArray0);
      byte byte0 = (byte) (-80);
      Byte byte1 = new Byte(byte0);
      assertEquals((byte) (-80), (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONPath jSONPath0 = new JSONPath("iFb7%");
      ParserConfig parserConfig0 = new ParserConfig(false);
      int int0 = 10;
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.AllowArbitraryCommas;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.UseBigDecimal;
      featureArray0[1] = feature1;
      featureArray0[2] = feature1;
      Feature feature2 = Feature.InitStringFieldAsEmpty;
      featureArray0[3] = feature2;
      Feature feature3 = Feature.SortFeidFastMatch;
      featureArray0[4] = feature3;
      Feature feature4 = Feature.AllowArbitraryCommas;
      featureArray0[5] = feature4;
      Feature feature5 = Feature.CustomMapDeserializer;
      featureArray0[6] = feature5;
      Feature feature6 = Feature.IgnoreNotMatch;
      featureArray0[7] = feature6;
      // Undeclared exception!
      try { 
        JSONPath.extract("[I", "iFb7%", parserConfig0, 10, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json : pos 2, line 1, column 3[I
         //
         verifyException("com.alibaba.fastjson.JSONPath$PropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("KR");
      JSONScanner jSONScanner0 = new JSONScanner("[]^hysz:,1[");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      Object object0 = jSONPath0.extract(defaultJSONParser0);
      assertNull(object0);
      
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object1 = JSONPath.reserveToArray((Object) null, (String[]) null);
      JSONPath.reserveToArray(object1, (String[]) null);
      JSONPath jSONPath0 = new JSONPath("iFb7%");
      ParserConfig parserConfig0 = new ParserConfig(false);
      int int0 = 10;
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.AllowArbitraryCommas;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.UseBigDecimal;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.SupportArrayToBean;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.InitStringFieldAsEmpty;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.SortFeidFastMatch;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.AllowArbitraryCommas;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.CustomMapDeserializer;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.IgnoreNotMatch;
      featureArray0[7] = feature7;
      Feature feature8 = Feature.DisableASM;
      featureArray0[8] = feature8;
      // Undeclared exception!
      try { 
        JSONPath.extract("[I", "iFb7%", parserConfig0, 10, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json : pos 2, line 1, column 3[I
         //
         verifyException("com.alibaba.fastjson.JSONPath$PropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("L");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-249));
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_ArrayAccessSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"\",\"/stackTrace/0\":{},\"value\":true,\"value2\":null,\"number\":null,\"ol\":-99}");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "NOT_LIKE";
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-861), 281, 31186);
      JSONPath.size((Object) null, " jeP3Ik[;X#M5P}u}n");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(",");
      jSONPath_JSONPathParser0.skipWhitespace();
      Long long0 = new Long(281);
      JSONPath.set((Object) jSONPath_MinSegment0, ",", (Object) long0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"\",\"/stackTrace/0\":{},\"value\":true,\"value2\":null,\"number\":null,\"ol\":-99}");
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = JSONPath.compile("java");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com.alibaba.fastjson.JSONPath$RegMatchSegement", false);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "com.alibaba.fastjson.JSONPath$RegMatchSegement", (Object) jSONPath_PropertySegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      boolean boolean0 = JSONPath.isInt(class0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("parse unwrapped field error.", serializeConfig0, parserConfig0);
      DataTruncation dataTruncation0 = new DataTruncation(1548, true, false, 1548, 1548, (Throwable) null);
      JSONPath.eval((Object) dataTruncation0, "java.awt.Font");
      boolean boolean1 = JSONPath.set((Object) "java.awt.Font", "writeFieldNameDirect", (Object) "parse unwrapped field error.");
      assertFalse(boolean1 == boolean0);
      
      JSONPath.JSONPathParser.isDigitFirst('$');
      dataTruncation0.getTransferSize();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeSupport");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("com.alibaba.fastjson.JSONPath$JSONPathParser", jSONPath_Segment0, jSONPath_Operator0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1548, 1548, 1548);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("AH'+t=B", "com.alibaba.fastjson.JSONPath$JSONPathParser", 1548, dataTruncation0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("parse unwrapped field error.", hashMap0, sQLTransientConnectionException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("com.alibaba.fastjson.JSONPath$RangeSegment", map0);
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException1.getFailedProperties();
      sQLClientInfoException0.setNextException(dataTruncation0);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(map1);
      boolean boolean2 = jSONPath_RefOpSegement0.apply(jSONPath0, jSONPath_RangeSegment0, sQLTransientConnectionException0, sQLClientInfoException2);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("com", "com", false);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$RefOpSegement");
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, "a_0`2NcXYT=:&NSOF", 45L, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("L");
      int[] intArray0 = new int[8];
      intArray0[0] = 131072;
      intArray0[1] = 131072;
      intArray0[2] = 1002;
      intArray0[3] = 131072;
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("L", 131072, (-1663L), false);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com.alibaba.fastjson.JSONPath$1", false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "[]";
      stringArray0[1] = "[]";
      stringArray0[2] = "|, 5o5$7KNGrt8i;:47";
      stringArray0[3] = "[]";
      stringArray0[4] = "com.alibaba.fastjson.JSONPath$1";
      stringArray0[5] = "L";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath_PropertySegment0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. |, 5o5$7KNGrt8i;:47
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "G'T=%Hrl~s|o)b .pF;";
      stringArray0[1] = "NOT_LIKE";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.compile("NOT_LIKE");
      ParserConfig parserConfig0 = new ParserConfig();
      Feature feature0 = Feature.SupportAutoType;
      Feature feature1 = Feature.InternFieldNames;
      Feature feature2 = Feature.SupportAutoType;
      Feature[] featureArray0 = new Feature[8];
      featureArray0[0] = feature0;
      featureArray0[1] = feature2;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.InitStringFieldAsEmpty;
      featureArray0[3] = feature3;
      featureArray0[4] = feature0;
      featureArray0[6] = feature1;
      featureArray0[7] = feature0;
      Short short0 = new Short((short)9999);
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) short0, "com.alibaba.fastjson.JSONPath$ValueSegment", (Object[]) featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path com.alibaba.fastjson.JSONPath$ValueSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("wj'(*", 3495L, (-4438775680185074103L), false);
      JSONPath jSONPath0 = new JSONPath("wj'(*");
      JSON.DEFAULT_PARSER_FEATURE = 278;
      jSONPath_IntBetweenSegement0.apply(jSONPath0, jSONPath0, "wj'(*", jSONPath0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$NullSegement");
      jSONPath_JSONPathParser0.isEOF();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "wj'(*";
      objectArray0[1] = (Object) "com.alibaba.fastjson.JSONPath$NullSegement";
      objectArray0[2] = (Object) jSONPath_IntBetweenSegement0;
      objectArray0[3] = (Object) "com.alibaba.fastjson.JSONPath$NullSegement";
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) jSONPath_JSONPathParser0, "com.alibaba.fastjson.JSONPath$NullSegement", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path com.alibaba.fastjson.JSONPath$NullSegement
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("L");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("sa[Lx6ifWIxc5qPbTF", "sa[Lx6ifWIxc5qPbTF");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Map<String, Object> map0 = JSONPath.paths((Object) sQLTimeoutException0, serializeConfig0);
      assertEquals(83, map0.size());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("U@Wz/ZH,SE>");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("Z{k\"qkRNPJZ' QNMJ", serializeConfig0, parserConfig0);
      jSONPath_NotNullSegement0.apply(jSONPath0, "Z{k\"qkRNPJZ' QNMJ", "U@Wz/ZH,SE>", serializeConfig0);
      Stack<Object> stack0 = new Stack<Object>();
      jSONPath0.deepGetPropertyValues(serializeConfig0, stack0);
      assertEquals("[true, null, @type]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = "NOT_LIKE";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "NOT_LIKE";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[1] = "NOT_LIKE";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = JSONPath.compile("'/3|Bzq!l&[Nyk");
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONPath.contains((Object) bigInteger0, "$VALUES");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("'/3|Bzq!l&[Nyk", (-999L), 2894L, true);
      int[] intArray0 = new int[2];
      intArray0[0] = 4877;
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, "NOT_LIKE", sQLTimeoutException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("length");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=TV\rneAEyf");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("length");
      jSONPath_JSONPathParser0.filterRest(jSONPath_NotNullSegement0);
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.parserAllFieldToCache(class0, hashMap0);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath1 = new JSONPath("length", (SerializeConfig) null, parserConfig0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      long long0 = JSONPath.SIZE;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      serializeConfig0.setTypeKey("&J (4");
      Class<JSONPath.PropertySegment> class1 = JSONPath.PropertySegment.class;
      // Undeclared exception!
      try { 
        jSONPath1.getJavaBeanSerializer(class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(487);
      String string0 = "com.alibaba.fastjson.JSONPath$KeySetSegment";
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$KeySetSegment");
      JSON.DEFAULT_PARSER_FEATURE = (-1696);
      DataTruncation dataTruncation0 = new DataTruncation(2632, true, true, (-137), 487);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, (Object) null, dataTruncation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = " FC3B,39mW{<xu^}";
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      jSONPath0.getPropertyValues(parserConfig0);
      JSONPath jSONPath1 = new JSONPath("com.alibaba.fastjson.JSONPath$1");
      SQLDataException sQLDataException0 = new SQLDataException(" FC3B,39mW{<xu^}");
      // Undeclared exception!
      try { 
        JSONPath.set((Object) serializeConfig0, "com.alibaba.fastjson.JSONPath$1", (Object) parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      jSONPath0.getPropertyValues(parserConfig0);
      JSONPath jSONPath1 = new JSONPath("com.alibaba.fastjson.JSONPath$1");
      SQLDataException sQLDataException0 = new SQLDataException(" FC3B,39mW{<xu^}");
      // Undeclared exception!
      try { 
        JSONPath.set((Object) serializeConfig0, "com.alibaba.fastjson.JSONPath$1", (Object) parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.put("GXT", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("GXT", hashMap0);
      jSONPath0.eval((Object) sQLClientInfoException0);
      SQLWarning sQLWarning0 = new SQLWarning("com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer", "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer", sQLClientInfoException0);
      sQLWarning0.setNextException(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLWarning0, (Object) "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("true", (SerializeConfig) null, parserConfig0);
      String string0 = null;
      int[] intArray0 = new int[8];
      intArray0[0] = (-3290);
      intArray0[1] = (-3290);
      intArray0[2] = (-846);
      intArray0[3] = (-3290);
      intArray0[4] = (-3290);
      intArray0[5] = (-3290);
      intArray0[6] = (-3290);
      intArray0[7] = (-3290);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("fastjson.parser.deny", "LIKE", intArray0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(batchUpdateException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLNonTransientException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.safeMode", (String) null, (-3290), sQLRecoverableException0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue(sQLInvalidAuthorizationSpecException0, "fastjson.parser.autoTypeSupport", (-3290));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("like");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      jSONPath0.contains((Object) propertyNamingStrategy0);
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONPath.compile("{\"size\":\"Large\",\"color\":\"between\",\"value2\":\"a string\",\"number\":\"1\"}");
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("2", serializeConfig0, parserConfig0);
      Short short0 = new Short((short)38);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("hp0j_Ac0", "`C\"[27bU_>8*Bb,", hashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLClientInfoException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.safeMode", "fastjson.parser.autoTypeAccept", sQLInvalidAuthorizationSpecException0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2996), 83, 281);
      JSONPath.size((Object) " jeP3Ik[;X#M5P}u}n", ",");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny.internal");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      SerializeConfig serializeConfig0 = new SerializeConfig(280);
      BigDecimalCodec bigDecimalCodec0 = BigDecimalCodec.instance;
      Module module0 = mock(Module.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectSerializer) null, (ObjectSerializer) null, bigDecimalCodec0, (ObjectSerializer) null, bigDecimalCodec0).when(module0).createSerializer(any(com.alibaba.fastjson.serializer.SerializeConfig.class) , any(java.lang.Class.class));
      serializeConfig0.register(module0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      classLoader0.setPackageAssertionStatus("ul!%zTH\";Td", true);
      ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = new JSONPath("and", serializeConfig0, (ParserConfig) null);
      SerializeConfig serializeConfig1 = new SerializeConfig();
      JSONPath.paths((Object) null, serializeConfig0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("u`YVLr4", false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.deny");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.safeMode", "fastjson.parser.autoTypeSupport", 280, sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("fastjson.parser.deny", sQLTransactionRollbackException0);
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath_PropertySegment0, sQLTransactionRollbackException1);
      jSONPath0.eval(object0);
      System.setCurrentTimeMillis((-338L));
      System.setCurrentTimeMillis((-338L));
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      String string0 = "length";
      JSONPath jSONPath0 = new JSONPath("length");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=TV\rneAEyf");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("length");
      jSONPath_JSONPathParser0.filterRest(jSONPath_NotNullSegement0);
      int int0 = 195;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("=TV\rneAEyf", "{\"fruit\":\"Apple\",\"size\":\"\",\"color\":{},\"value\":true,\"value2\":null,\"nuber\":null,\"ol\":a string\"}", 195);
      String string1 = "parse error : ";
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SQLDataException sQLDataException0 = new SQLDataException("parse error : ", "fastjson");
      JSONPath.compile("writeFieldValueStringWithDoubleQuoteCheck");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("u?");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ident
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONPath.compile("\"fruit\":\"AllowSingleQuotes\",\"com.alibaba.fastjson.JSONPath$FilterGroup\":99,\"color\":\"Red\",\"value2\":false,\"number\":false,\"x\":false}");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("2");
      BigInteger bigInteger0 = BigInteger.ZERO;
      Long long0 = new Long(77L);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.add(bigInteger0);
      bigInteger1.getLowestSetBit();
      JSONPath.eqNotNull(bigInteger1, bigInteger1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("2");
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("J51[D9");
      jSONPath0.evalSize((Object) null);
      jSONPath0.containsValue((Object) "J51[D9", (Object) "");
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(parserConfig0.SAFE_MODE_PROPERTY);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("`E#mko'*", "`E#mko'*", false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      JSONPath jSONPath0 = JSONPath.compile("pk#");
      Class<Integer> class0 = Integer.class;
      Class<JSONPath> class1 = JSONPath.class;
      Class<SQLDataException> class2 = SQLDataException.class;
      FieldInfo fieldInfo0 = new FieldInfo("unsupported array put operation. ", class1, class2, class0, (Field) null, 117, (-431), (-1074));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, 2);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, sQLSyntaxErrorException0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("wj'(*");
      BigDecimal bigDecimal0 = new BigDecimal(1836.07792666003);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SQLDataException sQLDataException0 = new SQLDataException("E", "F");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("qbp29ZxcG*Qhjr");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      Byte byte0 = new Byte((byte)121);
      SQLWarning sQLWarning0 = new SQLWarning();
      jSONPath_FilterSegment0.eval(jSONPath0, byte0, sQLWarning0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("parse error : ", "value ", (-603), sQLWarning0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("wj'(*", "value ", 594, sQLDataException0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment1 = JSONPath.WildCardSegment.instance;
      jSONPath_FilterSegment0.remove(jSONPath0, jSONPath0, jSONPath_WildCardSegment1);
      Double double0 = new Double((byte)121);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      Short short0 = new Short((byte)121);
      jSONPath0.containsValue((Object) "t&", (Object) jSONPath_NotNullSegement0);
      String string0 = jSONPath0.getPath();
      assertEquals("wj'(*", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      Pattern pattern0 = Pattern.compile("net", 6);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("rlike", pattern0, jSONPath_Operator1);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RegMatchSegement0);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath.FilterSegment jSONPath_FilterSegment1 = new JSONPath.FilterSegment(jSONPath_RegMatchSegement0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment1.eval(jSONPath0, jSONPath_Operator0, sQLClientInfoException0);
      assertNotNull(jSONArray0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("country", serializeConfig0, parserConfig0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      jSONPath0.contains((Object) sQLRecoverableException0);
      jSONPath0.isRef();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but 'n'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("{\"(Ljava/lang/Class;)Ljava/util/Collection;\":\"short\",\"size\":\"\",\"color\":\"Red\",\"value\":true,\"value2\":null,\"number\":[],\"x\":[]}");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"(Ljava/lang/Class;)Ljava/util/Collection;\":\"short\",\"size\":\"\",\"color\":\"Red\",\"value\":true,\"value2\":null,\"number\":[],\"x\":[]}");
      SQLException sQLException0 = new SQLException((String) null, "com", 65);
      String string0 = null;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 0, sQLException0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com", sQLWarning0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("", jSONPath0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      jSONPath_FilterSegment0.remove(jSONPath0, sQLException0, (Object) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(163, 39, 0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLWarning0);
      // Undeclared exception!
      try { 
        JSONPath.size((Object) sQLRecoverableException1, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      int int0 = JSONPath.size((Object) null, "'/3|Bzq!l&[Nyk");
      assertEquals((-1), int0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLRecoverableException0);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("'/3|Bzq!l&[Nyk", "J,.gM}}e", true);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("UaQM~D7!$5%a");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RlikeSegement0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("qsvKXcO~DU5?)O,", sQLInvalidAuthorizationSpecException0);
      SQLDataException sQLDataException0 = new SQLDataException("MT;FK%xz", sQLFeatureNotSupportedException0);
      boolean boolean0 = jSONPath_FilterSegment0.remove((JSONPath) null, sQLDataException0, (Object) null);
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = new JSONPath("MT;FK%xz");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer", "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer", (-1));
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, sQLTransactionRollbackException0);
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("{\"(Ljava/lang/Class;)Ljava/util/Collection;\":\"Apple\",\"size\":\"\",\"color\":\"Red\",\"value\":true,\"value2\":null,\"number\":[]}");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"(Ljava/lang/Class;)Ljava/util/Collection;\":\"Apple\",\"size\":\"\",\"color\":\"Red\",\"value\":true,\"value2\":null,\"number\":[]}");
      SQLException sQLException0 = new SQLException((String) null, "com", 65);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 0, sQLException0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      JSONPath.compile("com");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(65, 910, 104, 910, 65);
      JSONPath jSONPath1 = JSONPath.compile("com.alibaba.fastjson.JSONPath$RlikeSegement");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      jSONPath1.eval((Object) sQLInvalidAuthorizationSpecException0);
      boolean boolean0 = false;
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = null;
      try {
        jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement((String) null, "com.alibaba.fastjson.JSONPath$RlikeSegement", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONPath.compile(", but '");
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      String string0 = "[Z";
      JSONScanner jSONScanner0 = new JSONScanner("7~", 30);
      Properties properties0 = new Properties();
      parserConfig0.configFromPropety(properties0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      JSONPath.eqNotNull(0, 0);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      defaultJSONParser0.checkListResolve(priorityQueue0);
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but int, pos 1, line 1, column 27~
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!/g u6i,e[# .0%F");
      jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      boolean boolean0 = JSONPath.eq("G'T=%Hrl~s|Mo)b .pF;", jSONPath_JSONPathParser0);
      assertFalse(boolean0);
      
      JSONPath jSONPath0 = new JSONPath("!/g u6i,e[# .0%F");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("%AgCisait;8O^", "!/g u6i,e[# .0%F", 2827, sQLNonTransientConnectionException0);
      jSONPath0.deepSet(sQLTimeoutException0, "%AgCisait;8O^", 6137737446243999215L, "%AgCisait;8O^");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "astjson";
      stringArray0[1] = " FC3B,39mW{<xu^}";
      stringArray0[2] = " FC3B,39mW{<xu^}";
      stringArray0[3] = "astjson";
      stringArray0[4] = "astjson";
      stringArray0[5] = "astjson";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("astjson", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath("astjson");
      SerializeConfig serializeConfig1 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.deny.internal", "-", (String) null, (String[]) null, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      Double double0 = new Double(214.499428893991);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("?pj},A<;WkRQn.Ap");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringInSegement0, jSONPath_StringInSegement0, true);
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      UUID uUID0 = MockUUID.randomUUID();
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath1, " FC3B,39mW{<xu^}", uUID0, serializeConfig1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("wj'(*", 3495L, (-4438775680185074100L), false);
      JSONPath jSONPath0 = JSONPath.compile("wj'(*");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath1 = new JSONPath("json-path can not be null or empty", serializeConfig0, parserConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("NOT_LIKE");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("com.alibaba.fastjson.JSONPath$1");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Integer integer0 = new Integer(1039);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("oracle.sql.DATE", jSONPath_Segment0, jSONPath_Operator0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      jSONPath_RefOpSegement0.apply(jSONPath0, "json-path can not be null or empty", jSONPath_WildCardSegment0, parserConfig0);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      jSONPath1.getJavaBeanDeserializer(class0);
      int int0 = 10;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1039, 1039, 20, 10, 10, 20);
      jSONPath0.set((Object) mockGregorianCalendar0, (Object) jSONPath_RefOpSegement0);
      Float float0 = new Float((float) int0);
      String string0 = "QcF>Qt)(";
      JSONPath.keySet((Object) float0, string0);
      String string1 = "i~Ap4@_Kom";
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement(string1);
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath1.getJavaBeanDeserializer(class0);
      jSONPath_NotNullSegement0.apply(jSONPath1, jSONPath_RefOpSegement0, string1, javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(158, true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("irO6f_me", serializeConfig0, parserConfig0);
      jSONPath0.getPath();
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("irO6f_me", jSONPath0, false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(",  end ", "getClass", 158);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(158);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, serializeConfig0, sQLNonTransientConnectionException0, jSONPath_ArrayAccessSegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("\"");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      propertyNamingStrategy0.translate("\"");
      MockUUID.randomUUID();
      JSONPath jSONPath1 = JSONPath.compile("\"");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("\"", "\"", (-770));
      jSONPath1.containsValue((Object) propertyNamingStrategy0, (Object) "\"");
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig.global = parserConfig0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("s.M+!,{`", sQLTimeoutException0);
      jSONPath0.evalSize(sQLRecoverableException0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("S};BNmas'OatL#wJ?J-");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}");
      BigDecimal bigDecimal0 = new BigDecimal(1836.07792666003);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SQLDataException sQLDataException0 = new SQLDataException("parse error : ", "rlike");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("[]");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      Byte byte0 = new Byte((byte)121);
      jSONPath_FilterSegment0.eval(jSONPath0, "rlike", byte0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("t&", "Epa'h>HK}Lt2", 71, sQLDataException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("autoTypeAccept", "t&", (byte)121, sQLDataException0);
      jSONPath_FilterSegment0.remove(jSONPath0, sQLNonTransientConnectionException0, jSONPath_NotNullSegement0);
      Double double0 = new Double(0.0);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      Short short0 = new Short((byte)121);
      jSONPath0.containsValue((Object) null, (Object) short0);
      String string0 = jSONPath0.getPath();
      assertEquals("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("deny");
      jSONPath_JSONPathParser0.readName();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-1436L));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      serializeConfig0.clearSerializers();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("Z{k\"qkRNPJZ' QNMJ", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue("U@Wz/ZH,SE>", "Z{k\"qkRNPJZ' QNMJ", true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = "=5y`M r:p";
      JSONPath jSONPath0 = JSONPath.compile("=5y`M r:p");
      String string1 = "ZtXou*~M=f3'";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("`", "J51[D9", 442);
      MockThrowable mockThrowable0 = new MockThrowable("ZtXou*~M=f3'", sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.addSuppressed(mockThrowable0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("ZtXou*~M=f3'", ", info : ", 442);
      jSONPath0.removePropertyValue(sQLTransactionRollbackException1, "OJ>oNcs", true);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("=5y`M r:p", "*LT.M5TX9m++A$tyE", 17, mockThrowable0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("`", sQLFeatureNotSupportedException0);
      jSONPath0.size((Object) sQLInvalidAuthorizationSpecException0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(string0, linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("c1~Xxd.Q");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("c1~Xxd.Q", serializeConfig0, parserConfig0);
      jSONPath0.arrayAdd((Object) "c1~Xxd.Q", (Object[]) null);
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath1, (Object) null, (-1354));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}");
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}");
      jSONPath1.arrayAdd((Object) jSONPath0, (Object[]) null);
      JSONPath jSONPath2 = new JSONPath("L", serializeConfig0, parserConfig0);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("NO_RLIKE");
      Class<JSONPath> class0 = JSONPath.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      jSONPath_NullSegement0.apply(jSONPath2, serializeConfig0, javaBeanDeserializer0, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}");
      long[] longArray0 = new long[6];
      longArray0[0] = 793L;
      longArray0[1] = (-2225L);
      longArray0[2] = 8963398325558730460L;
      longArray0[3] = (-3750763034362895579L);
      longArray0[4] = (-1445L);
      longArray0[5] = 793L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("org", longArray0, false);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("nV6qS", "rlike", 115, hashMap0, (Throwable) null);
      jSONPath_IntInSegement0.apply(jSONPath0, sQLClientInfoException0, "L", hashMap0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("fastjson.parser.deny.internal", "%u;", jSONPath_Operator0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONPath.JSONPathParser.isDigitFirst('&');
      JSONPath jSONPath0 = new JSONPath("$ike");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      jSONPath0.contains((Object) propertyNamingStrategy0);
      jSONPath0.evalSize(propertyNamingStrategy0);
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("?JYlQJ", "?JYlQJ", 1482);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1482;
      longArray0[1] = (long) 1482;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("ac", longArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("?JYlQJ");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntInSegement0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("l[X:=");
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, jSONPath_FilterSegment0, sQLTransientConnectionException0, "ac");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}");
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}");
      jSONPath1.arrayAdd((Object) jSONPath0, (Object[]) null);
      JSONPath jSONPath2 = new JSONPath("L", serializeConfig0, parserConfig0);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("NOT_RLIKE");
      Class<JSONPath> class0 = JSONPath.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath2, serializeConfig0, javaBeanDeserializer0, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}");
      long[] longArray0 = new long[6];
      longArray0[0] = 793L;
      longArray0[1] = (-2225L);
      longArray0[2] = 8963398325558730460L;
      longArray0[3] = (-3750763034362895579L);
      longArray0[4] = (-1445L);
      longArray0[5] = (-4270347329889690746L);
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("org", longArray0, false);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("nV6qS", "rlike", 115, hashMap0, (Throwable) null);
      boolean boolean1 = jSONPath_IntInSegement0.apply(jSONPath0, sQLClientInfoException0, "L", hashMap0);
      assertFalse(boolean1 == boolean0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("fastjson.parser.deny.internal", "%u;", jSONPath_Operator0);
      boolean boolean2 = jSONPath_StringOpSegement0.apply(jSONPath0, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}", "org", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}");
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 326;
      intArray0[1] = (-1982);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("com.alibaba.fastjson.JSONPath$PropertySegment");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      Short short0 = new Short((short)20);
      SQLDataException sQLDataException0 = new SQLDataException("u.Z7;/2");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("u.Z7;/2", intArray0, sQLDataException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[>EZ`hA8U1\"R2", "u.Z7;/2", 4079, sQLDataException0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("u.Z7;/2", serializeConfig0, parserConfig0);
      String string0 = "Yh/AhBkUi9GF]T}p^ZT";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.alibaba.fastjson.JSONPath$PropertySegment", "Yh/AhBkUi9GF]T}p^ZT");
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.remove(jSONPath0, (Object) null, sQLTransactionRollbackException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.SQLException$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}");
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("2", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("2", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      Short short0 = new Short((short)4462);
      BigDecimal bigDecimal0 = new BigDecimal((double) (short)4462);
      JSONPath.eqNotNull(bigDecimal0, short0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "com.alibaba.fastjson.JSONPath$KeySetSegment");
      JSONPath.compile("com.alibaba.fastjson.JSONPath$KeySetSegment");
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.autoTypeAccept");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Short short0 = new Short((short)43);
      boolean boolean0 = JSONPath.eqNotNull(short0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "NOT_LIKE";
      Long long0 = new Long(1L);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.bitLength();
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("read string from reader error", sQLIntegrityConstraintViolationException0);
      Stack<Object> stack0 = new Stack<Object>();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((Throwable) null);
      jSONPath0.deepScan((Object) null, "read string from reader error", stack0);
      DataTruncation dataTruncation0 = new DataTruncation(468, false, false, 468, 468, (Throwable) null);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      int[] intArray0 = new int[6];
      intArray0[1] = 468;
      intArray0[2] = 46;
      intArray0[3] = 62;
      intArray0[4] = 62;
      intArray0[5] = 62;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLTimeoutException0, (Object) jSONPath_MultiIndexSegment0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<JSONPath.SizeSegment> class0 = JSONPath.SizeSegment.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null, false, false, false);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", (SerializeConfig) null, parserConfig0);
      Byte byte0 = new Byte((byte)17);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      Class<SQLTransientException> class1 = SQLTransientException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo javaBeanInfo1 = JavaBeanInfo.build((Class<?>) class1, (Type) javaBeanInfo0.clazz, propertyNamingStrategy0);
      aSMDeserializerFactory1.createJavaBeanDeserializer(parserConfig0, javaBeanInfo1);
      Class<String> class2 = String.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class2);
      SQLTransientException sQLTransientException0 = new SQLTransientException("IF- Iz!0OiTS\u0004Oa", "fastjson.parser.autoTypeSupport", 42);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLNonTransientException0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) javaBeanSerializer0, (Object) sQLNonTransientConnectionException0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      JSONPath.isInt(class0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[7];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Or", "b~", (-3900), sQLNonTransientConnectionException0);
      JSONPath.remove((Object) sQLTransactionRollbackException0, "org.joda.");
      Feature feature0 = Feature.SortFeidFastMatch;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportAutoType;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.IgnoreAutoType;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.SortFeidFastMatch;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.UseObjectArray;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.UseBigDecimal;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.AllowUnQuotedFieldNames;
      featureArray0[6] = feature6;
      // Undeclared exception!
      try { 
        JSONPath.extract("b~", "com.alibaba.fastjson.JSONPath", parserConfig0, (-3900), featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}";
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}");
      double double0 = (-1.0);
      Double double1 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("2", serializeConfig0, parserConfig0);
      short short0 = (short)38;
      Short short1 = new Short((short)38);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("hp0j_Ac0", "`C\"[27bU_>8*Bb,", hashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLClientInfoException0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.deny.internal", false);
      String string1 = "e";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("e");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("2", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}", (short)38, sQLClientInfoException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("syntax error", sQLClientInfoException0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransactionRollbackException1);
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, sQLTransientConnectionException0, "syntax error");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("VA");
      JSONPath jSONPath0 = JSONPath.compile("VA");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      jSONPath_WildCardSegment0.eval(jSONPath0, "VA", jSONPath_NullSegement0);
      Integer integer0 = new Integer((-1434));
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, jSONPath_WildCardSegment0, integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 326;
      intArray0[1] = (-1982);
      intArray0[2] = (-4310);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = new JSONPath("91,@c s^Bt:qUGS");
      jSONPath_MultiIndexSegment0.eval(jSONPath0, (Object) null, (Object) null);
      // Undeclared exception!
      try { 
        jSONPath_MultiIndexSegment0.eval((JSONPath) null, (Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MultiIndexSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("wqK");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "wqK";
      stringArray0[1] = "wqK";
      JSONPath.reserveToObject("wqK", stringArray0);
      JSONPath.size((Object) jSONPath0, "wqK");
      String string0 = "";
      boolean boolean0 = false;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("", false);
      Object object0 = null;
      jSONPath0.arrayAdd((Object) null, (Object[]) stringArray0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath1 = new JSONPath("com.alibaba.fastjson.parser.JSONScanner", serializeConfig0, parserConfig0);
      JSONPath.compile("createinstance");
      // Undeclared exception!
      try { 
        JSONPath.read("]5EaMYD/jzZFxX4zD", ";#V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2]5EaMYD/jzZFxX4zD
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "X|a&^wKQsO";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("KXC:W>SWo7wpMBrby`", "X|a&^wKQsO", "'0>>)_U@{ A!", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath("KXC:W>SWo7wpMBrby`");
      jSONPath0.arrayAdd((Object) null, (Object[]) stringArray0);
      assertEquals("KXC:W>SWo7wpMBrby`", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = "[]";
      JSONPath jSONPath0 = JSONPath.compile("[]");
      jSONPath0.eval((Object) "[]");
      jSONPath0.keySet((Object) string0);
      jSONPath0.evalSize(string0);
      String string1 = "";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = null;
      try {
        jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(string1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Long long0 = new Long((-2069L));
      JSONPath jSONPath0 = new JSONPath("&$WI,!W$.a/qz?8d|");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. &$WI,!W$.a/qz?8d|
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("2");
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) "2");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = "*";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*");
      JSONPath jSONPath0 = new JSONPath("*");
      jSONPath0.isRef();
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) jSONPath0, "*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("2");
      jSONPath0.isRef();
      jSONPath0.getPropertyValues(serializeConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) double0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONPath.compile("false");
      JSONPath.compile("false");
      JSONPath jSONPath0 = new JSONPath("false");
      String string0 = "tf41";
      jSONPath0.isRef();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.spliterator();
      sQLClientInfoException0.getFailedProperties();
      SQLWarning sQLWarning0 = new SQLWarning();
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 1347, 29, sQLWarning0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig1);
      try { 
        aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, (JavaBeanInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Class<JSONPath.RangeSegment> class0 = JSONPath.RangeSegment.class;
      JSONPath.isDouble(class0);
      String string0 = "H8b)q";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("H8b)q");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = "GE";
      String string1 = "&$WI,!W$.\\a/qz?8d|";
      Vector<Object> vector0 = new Vector<Object>();
      boolean boolean0 = false;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("&$WI,!W$.a/qz?8d|");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '&, but '|'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("Y");
      JSONPath.NotNullSegement jSONPath_NotNullSegement1 = new JSONPath.NotNullSegement("Y");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement1);
      JSONPath jSONPath0 = new JSONPath("Y");
      Long long0 = new Long((-4438775680185074102L));
      jSONPath_NotNullSegement0.apply(jSONPath0, long0, jSONPath_Operator0, jSONPath_FilterSegment0);
      JSONPath.FilterSegment jSONPath_FilterSegment1 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      jSONPath0.getPropertyValue(jSONPath_NotNullSegement0, "rY<aQh=x7d7K_^3", (-1014497654951707614L));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "}IK4aNp%bMA2/";
      stringArray0[1] = "java.util.Collections$UnmodifiableMap";
      stringArray0[2] = " c~rv_li?;j<RkR";
      stringArray0[3] = "java.util.Collections$UnmodifiableMap";
      stringArray0[4] = "rY<aQh=x7d7K_^3";
      stringArray0[5] = "rY<aQh=x7d7K_^3";
      stringArray0[6] = "B[5'&_'9<S(IGDq";
      stringArray0[7] = "u6jdS>dQ";
      stringArray0[8] = "5PDGYpPR3W^}+w.";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("B[5'&_'9<S(IGDq", "Y", "B[5'&_'9<S(IGDq", stringArray0, false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("sNQ0PmnE-y?H?Vt");
      jSONPath_JSONPathParser0.buildArraySegement("nR1ZPFi");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement(":YK:~|%;eD");
      jSONPath_JSONPathParser0.filterRest(jSONPath_NotNullSegement0);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : sNQ0PmnE-y?H?Vt
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("c1~Xxd.Q");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      String[] stringArray0 = new String[0];
      JSONPath.reserveToObject("c1~Xxd.Q", stringArray0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("dd/MM/yyyy HH:mm:ss", (Map<String, ClientInfoStatus>) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("parse enum ");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      jSONPath_JSONPathParser0.readString();
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("u4}U8*Icd!j_T\"", 1542L, 365L, true);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("enum ", "c1~Xxd.Q", (Map<String, ClientInfoStatus>) null);
      String[] stringArray1 = new String[5];
      stringArray1[0] = "dd/MM/yyyy HH:mm:ss";
      stringArray1[1] = "unsupported set operation.";
      stringArray1[2] = "u4}U8*Icd!j_T\"";
      stringArray1[3] = "enum ";
      stringArray1[4] = "";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath_Segment0, stringArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : u4}U8*Icd!j_T\"
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("deny");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'd, but 'y'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "NOT_LIKE";
      JSONPath.compile("{\"fruit\":[],\"wmv/'JZu|\":\"\",\"/stackTrace/0\":[[]],\"autoTypeSupport\":true,\"'/3|Bzq!l&[Nyk\":null,\"com.alibaba.fastjson.asm.Label\":null,\"ol\":-99,\"}cRtt!uIq]AdK\":[],\"NOT_IN\":\"a string\"}");
      JSON.DEFAULT_GENERATE_FEATURE = 321;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("NOT_LIKE");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("{\"fruit\":[],\"wmv/'JZu|\":\"\",\"/stackTrace/0\":[[]],\"autoTypeSupport\":true,\"'/3|Bzq!l&[Nyk\":null,\"com.alibaba.fastjson.asm.Label\":null,\"ol\":-99,\"}cRtt!uIq]AdK\":[],\"NOT_IN\":\"a string\"}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser1.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '{, but '}'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig.getGlobalInstance();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.safeMode");
      jSONPath_JSONPathParser0.readString();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.GT;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("com.alibaba.fastjson.JSONPath$MinSegment", (-4080L), jSONPath_Operator1);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntOpSegement0, jSONPath_IntOpSegement0, false);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("bKuH^", serializeConfig0, parserConfig0);
      JSONPath.remove((Object) jSONPath0, "fastjson.parser.autoTypeAccept");
      String string0 = "!zZ=K(xZ9Yi%";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("z*GS.", "5(0'?X%ouc");
      SQLDataException sQLDataException0 = new SQLDataException("[ EQb*_v");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      sQLDataException0.setNextException(sQLIntegrityConstraintViolationException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("5(0'?X%ouc");
      JSONPath.eq("!zZ=K(xZ9Yi%", "duUIK=>");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = null;
      try {
        jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":{},\"number\":\"kotlin.reflect.KFunction\"}");
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("2", serializeConfig0, parserConfig0);
      Short short0 = new Short((short)38);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("hp0j_Ac0", "`C\"[27bU_>8*Bb,", hashMap0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)38;
      longArray0[1] = (long) (short)38;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("fastjson.parser.autoTypeAccept", "b]]n?mT j,qe", (short)38, longArray0, sQLClientInfoException0);
      JSONPath.reserveToObject(batchUpdateException0, (String[]) null);
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      JSONPath.arrayAdd((Object) mockGregorianCalendar0, "fastjson.parser.deny.internal", (Object[]) null);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONPath.reserveToObject((Object) null, (String[]) null);
      String string0 = "LE";
      JSONPath.size((Object) null, "LE");
      String string1 = "";
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("InternFieldNames", false);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("InternFieldNames", jSONPath_PropertySegment0, jSONPath_Operator0);
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("", (-1), jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("'>pYmrgQcH", "Q@V9V55GMTF5", intArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath(" FC3B,39mW{<xu^}", serializeConfig0, parserConfig0);
      jSONPath0.remove((Object) null);
      jSONPath0.arrayAdd((Object) " FC3B,39mW{<xu^}", (Object[]) null);
      JSONPath jSONPath1 = new JSONPath("not", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath1, "not", 64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("Y");
      JSONPath.NotNullSegement jSONPath_NotNullSegement1 = new JSONPath.NotNullSegement("Y");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement1);
      JSONPath jSONPath0 = new JSONPath("Y");
      Long long0 = new Long((-4438775680185074102L));
      jSONPath_NotNullSegement0.apply(jSONPath0, long0, jSONPath_Operator0, jSONPath_FilterSegment0);
      JSONPath.FilterSegment jSONPath_FilterSegment1 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      jSONPath0.getPropertyValue(jSONPath_NotNullSegement0, "rY<aQh=x7d7K_^3", (-1014497654951707614L));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "}IK4aNp%bMA2/";
      stringArray0[1] = "java.util.Collections$UnmodifiableMap";
      stringArray0[2] = " c~rv_li?;j<RkR";
      stringArray0[3] = "java.util.Collections$UnmodifiableMap";
      stringArray0[4] = "rY<aQh=x7d7K_^3";
      stringArray0[5] = "rY<aQh=x7d7K_^3";
      stringArray0[6] = "B[5'&_'9<S(IGDq";
      stringArray0[7] = "u6jdS>dQ";
      stringArray0[8] = "5PDGYpPR3W^}+w.";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("B[5'&_'9<S(IGDq", "Y", "B[5'&_'9<S(IGDq", stringArray0, false);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("rY<aQh=x7d7K_^3");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("java.util.Collections$UnmodifiableMap");
      Pattern pattern0 = Pattern.compile("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer");
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("java.util.Collections$UnmodifiableMap", pattern0, jSONPath_Operator0);
      jSONPath_JSONPathParser0.filterRest(jSONPath_NullSegement0);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("|Ob");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("autoTypeSupport", pattern0, jSONPath_Operator0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = "Zx*?W3P";
      JSONPath.compile("Zx*?W3P");
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONPath.JSONPathParser.isDigitFirst('&');
      JSONPath jSONPath0 = new JSONPath("like");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      jSONPath0.contains((Object) propertyNamingStrategy0);
      jSONPath0.evalSize(propertyNamingStrategy0);
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      SerializeConfig serializeConfig0 = new SerializeConfig(280);
      Module module0 = mock(Module.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectSerializer) null, (ObjectSerializer) null, (ObjectSerializer) null, (ObjectSerializer) null, (ObjectSerializer) null).when(module0).createSerializer(any(com.alibaba.fastjson.serializer.SerializeConfig.class) , any(java.lang.Class.class));
      serializeConfig0.register(module0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      classLoader0.setPackageAssertionStatus("ul!%zTH\";Td", true);
      ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = new JSONPath("and", serializeConfig0, (ParserConfig) null);
      SerializeConfig serializeConfig1 = new SerializeConfig();
      JSONPath.paths((Object) null, serializeConfig0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("u`YVLr4", false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.deny");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.safeMode", "fastjson.parser.autoTypeSupport", 280, sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("fastjson.parser.deny", sQLTransactionRollbackException0);
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath_PropertySegment0, sQLTransactionRollbackException1);
      // Undeclared exception!
      try { 
        jSONPath0.eval(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.StackTraceElement
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = JSONPath.compile(" FC3B,39mW{<xu^}");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(" FC3B,39mW{<xu^}", " FC3B,39mW{<xu^}", (-3312));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("6Y6", "k3.j", (-934), sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("L", " FC3B,39mW{<xu^}", (-934), sQLTransientConnectionException0);
      Collection<Object> collection0 = jSONPath0.getPropertyValues(sQLTransientConnectionException1);
      JSONArray jSONArray0 = (JSONArray)jSONPath0.getPropertyValue(collection0, "[iFq%i=3C-4qwxhd&)}", (-162L));
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}");
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Float> class0 = Float.class;
      serializeConfig0.getObjectWriter(class0, true);
      JSONPath jSONPath0 = new JSONPath("2", serializeConfig0, parserConfig0);
      jSONPath0.init();
      int int0 = 117;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("c");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Double double0 = new Double(1000.0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      String string0 = "2";
      JSONPath jSONPath0 = new JSONPath("2");
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) double0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" Kv.7%HhSKX<MP%D(");
      jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      boolean boolean0 = JSONPath.eq("read string from reader error", jSONPath_JSONPathParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = ", segement ";
      String[] stringArray0 = new String[5];
      stringArray0[0] = ", segement ";
      stringArray0[2] = ", segement ";
      stringArray0[3] = ", segement ";
      stringArray0[4] = ", segement ";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement(", segement ", stringArray0, true);
      String string1 = "com.alibaba.fastjson.JSONReader";
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONReader");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("y'v@w");
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("{YHN^JW! )v", (Throwable) null);
      sQLFeatureNotSupportedException0.getStackTrace();
      jSONPath_StringInSegement0.apply(jSONPath0, (Object) null, ", segement ", sQLFeatureNotSupportedException0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      jSONPath_StringInSegement0.apply(jSONPath0, mockGregorianCalendar0, stringArray0[1], ", segement ");
      String string2 = "\\K0Q(Ie/O^vx;l]&SF";
      String string3 = "JSONPath$IntOpSegement";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(", segement ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(6784070308145315211L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("k./#o]XQ$^V");
      JSONScanner jSONScanner0 = new JSONScanner("(Ljava/util/List;)V");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("NotWriteDefaultValue", "k./#o]XQ$^V");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(",", "B", 0, sQLTimeoutException0);
      JSONPath jSONPath1 = new JSONPath("NotWriteDefaultValue");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("T-F");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-2L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      String string0 = "false";
      JSONPath jSONPath0 = new JSONPath("false");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(41, 1834, 2046);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("false", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      String string1 = "V\"a._j|J<5yOPHZ";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("V\"a._j|J<5yOPHZ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but 'V'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "NOT_LIKE";
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"\",\"/stackTrace/0\":[false],\"value\":true,\"'/3|Bzq!l&[Nyk\":null,\"com.alibaba.fastjson.asm.Label\":null,\"ol\":-99}");
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) "NOT_LIKE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"fruit\":\"Apple\",\"size\":\"\",\"/stackTrace/0\":[false],\"value\":true,\"'/3|Bzq!l&[Nyk\":null,\"com.alibaba.fastjson.asm.Label\":null,\"ol\":-99}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}";
      JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}");
      Double double0 = new Double(3.0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("R98v", serializeConfig0, parserConfig0);
      Short short0 = new Short((short) (-647));
      JSONPath jSONPath1 = new JSONPath(".", serializeConfig0, parserConfig0);
      SerializeConfig serializeConfig1 = new SerializeConfig();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "serializer", 1513);
      JSONPath.paths((Object) sQLTransactionRollbackException0, serializeConfig0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = null;
      try {
        jSONPath_PropertySegment0 = new JSONPath.PropertySegment((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      int int0 = 1024;
      SerializeConfig serializeConfig0 = new SerializeConfig(1024);
      Module module0 = mock(Module.class, new ViolatedAssumptionAnswer());
      serializeConfig0.register(module0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      classLoader0.setPackageAssertionStatus("LT", true);
      ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = new JSONPath("i1'aulP>,XE?1Y", serializeConfig0, parserConfig0);
      SerializeConfig serializeConfig1 = new SerializeConfig();
      JSONPath.paths((Object) classLoader0, serializeConfig1);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : i1'aulP>,XE?1Y
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      Long long0 = new Long(1898L);
      Long long1 = Long.getLong("internal", long0);
      longArray0[0] = long1;
      Long long2 = new Long((-6586085717218287427L));
      longArray0[1] = long2;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("internal", longArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("internal");
      Integer integer0 = new Integer(18);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, integer0, long0, longArray0[1]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("Y");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      JSONPath jSONPath0 = new JSONPath("Y");
      Long long0 = new Long((-4438775680185074100L));
      jSONPath_NotNullSegement0.apply(jSONPath0, long0, jSONPath_Operator0, jSONPath_FilterSegment0);
      JSONPath.FilterSegment jSONPath_FilterSegment1 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      jSONPath0.getPropertyValue(jSONPath_NotNullSegement0, "rY<aQh=x7d7K_^3", (-1014497654951707614L));
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Object object0 = JSONPath.reserveToArray(jSONPath0, (String[]) null);
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("]U<n`W4B", longArray0, false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "1.2.68", 898);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("Y", "rY<aQh=x7d7K_^3", sQLNonTransientConnectionException0);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, object0, jSONPath_NotNullSegement0, sQLIntegrityConstraintViolationException1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("nR1ZPFi%!!ER\u0000;Gzr");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "nR1ZPFi%!!ER\u0000;Gzr";
      objectArray0[1] = (Object) "nR1ZPFi%!!ER\u0000;Gzr";
      objectArray0[2] = (Object) "nR1ZPFi%!!ER\u0000;Gzr";
      objectArray0[3] = (Object) jSONPath_SizeSegment0;
      objectArray0[4] = (Object) jSONPath0;
      objectArray0[5] = (Object) "nR1ZPFi%!!ER\u0000;Gzr";
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) jSONPath_SizeSegment0, "nR1ZPFi%!!ER\u0000;Gzr", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path nR1ZPFi%!!ER\u0000;Gzr
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      String string0 = "NE";
      JSONPath jSONPath0 = new JSONPath("NE", serializeConfig0, parserConfig0);
      JSON.DEFAULT_PARSER_FEATURE = (-2384);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("NE", linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("EQ", serializeConfig0, parserConfig0);
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("EQ", stack0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}");
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("2", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("2", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      Short short0 = new Short((short)92);
      int[] intArray0 = new int[0];
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.deny");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("LG<%pj`[Aa}l", intArray0, sQLDataException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "99", 4079, batchUpdateException0);
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NOT_IN;
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, (Object) null, jSONPath_Operator1);
      Float float0 = new Float((float) (short)92);
      boolean boolean1 = JSONPath.eq((Object) null, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      int int0 = JSONPath.size((Object) null, "'/3|Bzq!l&[Nyk");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[11];
      stringArray0[0] = "'/3|Bzq!l&[Nyk";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("AIClAjse)3p:");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      boolean boolean0 = JSONPath.eq((Object) null, sQLNonTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      String string0 = "-99";
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("-99", (-1L), jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("com");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      SQLTransientException sQLTransientException0 = new SQLTransientException("com", "1gG,G5 1-^9i", (-123008));
      SQLDataException sQLDataException0 = new SQLDataException("safeMode", "Zc$8?\u0004\"Nl=E", (-123008), sQLTransientException0);
      SQLWarning sQLWarning0 = new SQLWarning(sQLDataException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("safeMode", ", but '", (-123008), sQLWarning0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-123008);
      intArray0[1] = (-123008);
      intArray0[2] = (-123008);
      intArray0[3] = (-123008);
      intArray0[4] = (-123008);
      intArray0[5] = (-123008);
      intArray0[6] = (-123008);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, sQLFeatureNotSupportedException0, jSONPath_MultiIndexSegment0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com", sQLFeatureNotSupportedException0);
      jSONPath_IntOpSegement0.apply(jSONPath0, object0, sQLNonTransientConnectionException0, "-99");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntOpSegement0, jSONPath_IntOpSegement0, true);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath1 = new JSONPath("-99", serializeConfig0, parserConfig0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.alibaba.fastjson.JSONPath$FilterGroup");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("GvZqj-{k3/t-qzaP", sQLNonTransientException0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SQLDataException sQLDataException1 = new SQLDataException("GvZqj-{k3/t-qzaP", "fastjson.parser.deny.internal");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(291);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment1 = new JSONPath.ArrayAccessSegment(291);
      // Undeclared exception!
      try { 
        JSONPath.compare(jSONPath_ArrayAccessSegment0, jSONPath_ArrayAccessSegment1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath$ArrayAccessSegment cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = "Zx*?W3P";
      JSONPath jSONPath0 = new JSONPath("Zx*?W3P");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Float float0 = new Float((-961.1738F));
      // Undeclared exception!
      try { 
        JSONPath.compare(aSMDeserializerFactory0, aSMDeserializerFactory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath.compile("fastjson");
      Byte byte0 = new Byte((byte)64);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("Bg%I@f0", jSONPath_KeySetSegment0, jSONPath_Operator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("c1~Xxd.Q");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement(", but '", (String[]) null, false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("dd/MM/yyyy HH:mm:ss");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_StringInSegement0);
      jSONPath_JSONPathParser0.filterRest(jSONPath_Filter0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("99");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLIntegrityConstraintViolationException0.forEach(consumer0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath(", but '", (SerializeConfig) null, parserConfig0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fastjson.parser.safeMode", "dd/MM/yyyy HH:mm:ss", 93);
      // Undeclared exception!
      try { 
        jSONPath0.evalKeySet(sQLSyntaxErrorException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSONPath.extract("A6my:]HVc4MNu^'J#'>", (String) null, parserConfig0, (-2028211196), featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      String string0 = "{\"(Ljava/lang/Class;)Ljava/util/Collection;\":\"%ORz9nG\\0gz\",\"size\":\"\",\"color\":\"Red\",\"value\":true,\"value2\":null,\"number\":[-99]}";
      JSONPath jSONPath0 = new JSONPath("{\"(Ljava/lang/Class;)Ljava/util/Collection;\":\"%ORz9nG\u0000gz\",\"size\":\"\",\"color\":\"Red\",\"value\":true,\"value2\":null,\"number\":[-99]}");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.InternFieldNames;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowUnQuotedFieldNames;
      featureArray0[1] = feature1;
      // Undeclared exception!
      try { 
        JSONPath.extract("{\"(Ljava/lang/Class;)Ljava/util/Collection;\":\"%ORz9nG\u0000gz\",\"size\":\"\",\"color\":\"Red\",\"value\":true,\"value2\":null,\"number\":[-99]}", "{\"(Ljava/lang/Class;)Ljava/util/Collection;\":\"%ORz9nG\u0000gz\",\"size\":\"\",\"color\":\"Red\",\"value\":true,\"value2\":null,\"number\":[-99]}", parserConfig0, 52429, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"(Ljava/lang/Class;)Ljava/util/Collection;\":\"%ORz9nG\u0000gz\",\"size\":\"\",\"color\":\"Red\",\"value\":true,\"value2\":null,\"number\":[-99]}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("]U|W3mYrtN>L", 3);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("]U|W3mYrtN>L", pattern0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RegMatchSegement0);
      JSONPath jSONPath0 = JSONPath.compile("]U|W3mYrtN>L");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_SizeSegment0, jSONPath_SizeSegment0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("c1~Xxd.Q");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      JSONPath jSONPath0 = new JSONPath("]16Zp4Tv'_5*<P5-QdH");
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLWarning sQLWarning0 = new SQLWarning();
      sQLTransactionRollbackException0.printStackTrace();
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, (-3642), sQLTransactionRollbackException0);
      dataTruncation0.getNextWarning();
      JSONPath.FilterSegment jSONPath_FilterSegment1 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      Short short0 = new Short((short)92);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.alibaba.fastjson.JSONPath$IntBetweenSegement", "T)", 1396, sQLWarning0);
      JSONPath.FilterSegment jSONPath_FilterSegment2 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath1 = new JSONPath("]16Zp4Tv'_5*<P5-QdH", serializeConfig0, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      jSONPath_FilterSegment2.eval(jSONPath1, jSONPath_SizeSegment0, "c1~Xxd.Q");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("@!ZMzjRXt", ">zS?mQ!Z8]f2,Vc", 3678080, dataTruncation0);
      jSONPath_FilterSegment2.remove(jSONPath0, sQLTransientConnectionException1, jSONPath_NotNullSegement0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(">zS?mQ!Z8]f2,Vc", "dd", 0, hashMap0, dataTruncation0);
      // Undeclared exception!
      try { 
        JSONPath.size((Object) sQLClientInfoException0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("{\"(Ljava/lang/Class;)Ljava/util/Collection;\":\"Apple\",\"size\":\"\",\"color\":\"Red\",\"value\":true,\"value2\":null,\"number\":[]}");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"(Ljava/lang/Class;)Ljava/util/Collection;\":\"Apple\",\"size\":\"\",\"color\":\"Red\",\"value\":true,\"value2\":null,\"number\":[]}");
      SQLException sQLException0 = new SQLException((String) null, "com", 65);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 0, sQLException0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com", sQLWarning0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SQLDataException sQLDataException0 = new SQLDataException("UrfXy?+u !q|{", "com");
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        JSONPath.compare(double0, sQLException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLException cannot be cast to java.lang.Double
         //
         verifyException("java.lang.Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONPath jSONPath1 = new JSONPath("\"");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("stackTrace");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2stackTrace
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"\",\"color\":{},\"value\":true,\"value2\":null,\"number\":null,\"ol\":\"a string\"}");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":\"Apple\",\"size\":\"\",\"color\":{},\"value\":true,\"value2\":null,\"number\":null,\"ol\":\"a string\"}");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com");
      jSONPath_JSONPathParser0.filterRest(jSONPath_NotNullSegement0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com", "GT", 38);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SQLDataException sQLDataException0 = new SQLDataException("GT", "parse error : ");
      JSONPath jSONPath1 = JSONPath.compile("/");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("<KZn%Dyakl'T)1,jO]");
      // Undeclared exception!
      try { 
        jSONPath1.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2<KZn%Dyakl'T)1,jO]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(868);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      JSONPath jSONPath0 = new JSONPath("JSONPath$IntObjInSegement", serializeConfig0, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      jSONPath0.deepGetPropertyValues(jSONPath_SizeSegment0, arrayList0);
      jSONPath0.removePropertyValue(parserConfig0, "{\"fruit\":\"Apple\",\"size\":{},\"color\":\"com.alibaba.fastjson.JSONPath\",\"value2\":false,\"number\":\"1\",\"x\":false}", false);
      Random.setNextRandom(110);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(114, 114, 2705);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fastjson.parser.autoTypeSupport", "{\"fruit\":\"Apple\",\"size\":{},\"color\":\"com.alibaba.fastjson.JSONPath\",\"value2\":false,\"number\":\"1\",\"x\":false}", (-1089110336));
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("{\"fruit\":\"Apple\",\"size\":{},\"color\":\"com.alibaba.fastjson.JSONPath\",\"value2\":false,\"number\":\"1\",\"x\":false}", jSONPath0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      ArrayList arrayList1 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, sQLSyntaxErrorException0, jSONPath_FilterSegment0);
      assertTrue(arrayList1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("and", serializeConfig0, parserConfig0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("fastjson.parser.safeMode", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = "GE";
      JSONPath jSONPath0 = JSONPath.compile("GE");
      String string1 = "&$WI,iW$.\\aaqz?8d|";
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("&$WI,iW$.aaqz?8d|", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      int int0 = 15;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(15);
      String string0 = "com.alibaba.fastjson.JSONPath";
      JSONPath.compile("com.alibaba.fastjson.JSONPath");
      String string1 = "fastjson.parser.safeMode";
      JSONPath.set((Object) null, "fastjson.parser.safeMode", (Object) null);
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("ykP\"# ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = JSONPath.compile(",#Z81P9(]}v4M63");
      jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath0, ",#Z81P9(]}v4M63");
      String[] stringArray0 = new String[0];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement(",#Z81P9(]}v4M63", "Py:glqigDE%5a", "MBT@;b\"v", stringArray0, true);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(3089);
      JSONPath jSONPath1 = JSONPath.compile(",#Z81P9(]}v4M63");
      jSONPath_MatchSegement0.apply(jSONPath0, jSONPath1, ",#Z81P9(]}v4M63", jSONPath_MultiIndexSegment0);
      System.setCurrentTimeMillis(989);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}");
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("2", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("2", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      Short short0 = new Short((short)92);
      int[] intArray0 = new int[0];
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.deny");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("LG<%pj`[Aa}l", intArray0, sQLDataException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "99", 4079, batchUpdateException0);
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NOT_IN;
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, (Object) null, jSONPath_Operator1);
      assertFalse(boolean0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      int int0 = JSONPath.size((Object) propertyNamingStrategy0, "c");
      assertEquals((-1), int0);
      
      Class<Object> class0 = Object.class;
      boolean boolean1 = JSONPath.isInt(class0);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("5GnD\rT~pWg%_", (String) null, "IGmglEB0TJ(`>MS`z", (String[]) null, false);
      JSONPath jSONPath2 = new JSONPath("2", serializeConfig0, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONPath.Operator jSONPath_Operator2 = JSONPath.Operator.BETWEEN;
      boolean boolean2 = jSONPath_MatchSegement0.apply(jSONPath2, jSONPath_SizeSegment0, short0, jSONPath_Operator2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}");
      BigDecimal bigDecimal0 = new BigDecimal((-2061.86256));
      JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SQLDataException sQLDataException0 = new SQLDataException("parse error : ", "rlike");
      JSONPath.compile("G@Du&1hp=$Ea");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("parse error : ");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("c1~Xxd.Q");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      String[] stringArray0 = new String[0];
      JSONPath.reserveToObject("c1~Xxd.Q", stringArray0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("dd/MM/yyyy HH:mm:ss", (Map<String, ClientInfoStatus>) null);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = JSONPath.compile(":S=MP");
      Object object0 = JSONPath.reserveToArray(jSONPath_MultiPropertySegment0, stringArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.alibaba.fastjson.JSONPath$IntInSegement", "S_w\u0006T\"PJetzGEmBxa2", sQLClientInfoException0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("1.2.68");
      long long0 = JSONPath.LENGTH;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement(":S=MP", (-2930.106510499229), jSONPath_Operator0);
      Float float0 = new Float((float) 3089);
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, float0, "c1~Xxd.Q", object0);
      assertFalse(boolean0);
      
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("woJX<:JAU8_D", stringArray0, false);
      Object object1 = jSONPath_JSONPathParser0.readValue();
      UUID uUID0 = MockUUID.randomUUID();
      boolean boolean1 = jSONPath_StringInSegement0.apply(jSONPath0, sQLClientInfoException0, object1, uUID0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"/stackTrace/10\":\"a string\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\",\"x\":null}");
      Double double0 = new Double(0.0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("{\"/stackTrace/10\":\"a string\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\",\"x\":null}");
      jSONPath1.arrayAdd((Object) jSONPath0, (Object[]) null);
      JSONPath jSONPath2 = new JSONPath("L", serializeConfig0, parserConfig0);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("NO_RLIKE");
      Class<JSONPath> class0 = JSONPath.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      jSONPath_NullSegement0.apply(jSONPath2, serializeConfig0, javaBeanDeserializer0, "{\"/stackTrace/10\":\"a string\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\",\"x\":null}");
      long[] longArray0 = new long[6];
      longArray0[0] = 793L;
      longArray0[1] = 793L;
      longArray0[2] = 8963398325558730460L;
      longArray0[3] = (-3750763034362895579L);
      longArray0[4] = (-1445L);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-r7t o<");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/6", serializeConfig0, parserConfig0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[-EghSV)4C?^0~HZs<");
      JSONScanner jSONScanner0 = new JSONScanner("*L#a>%[?,'+>:AjFwV");
      jSONPath0.isRef();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}");
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("2", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("2", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      Short short0 = new Short((short)4462);
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.autoTypeSupport");
      int[] intArray0 = new int[4];
      intArray0[0] = 4079;
      intArray0[1] = 4079;
      intArray0[2] = (int) (short)92;
      intArray0[3] = (int) (short)4462;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("fastjson.parser.safeMode", intArray0, sQLDataException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("And", (String) null, (-119), sQLDataException0);
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NOT_IN;
      jSONPath_FilterSegment0.remove(jSONPath0, jSONPath1, jSONPath1);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2996), 163, 2475);
      JSONPath.size((Object) mockGregorianCalendar0, " jeP3Ik[;X#M5P}u}n");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("dd.MM.yyyy HH:mm:ss");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<JSONPath.SizeSegment> class0 = JSONPath.SizeSegment.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, false, false, false);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      Byte byte0 = new Byte((byte)64);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      JSONPath jSONPath0 = JSONPath.compile("*");
      Class<BigDecimal> class1 = BigDecimal.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class1);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.AllowSingleQuotes;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.UseObjectArray;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.SupportArrayToBean;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.SortFeidFastMatch;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.SupportArrayToBean;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.UseObjectArray;
      featureArray0[5] = feature5;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      JSONScanner jSONScanner0 = new JSONScanner("]$93F");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(feature2, jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.NonStringKeyAsString;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.IgnoreAutoType;
      featureArray0[1] = feature1;
      featureArray0[2] = feature1;
      SQLException sQLException0 = new SQLException("null", "fastjson.parser.safeMode", (-1880978939));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("rlike", "fastjson.parser.autoTypeAccept", 109, sQLException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("parse error : ", sQLException0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SQLDataException sQLDataException0 = new SQLDataException("' `YFK!", "illegal json : ");
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\\-");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" hch&hs");
      Long long0 = new Long((-3235027470545870510L));
      Object[] objectArray0 = new Object[0];
      jSONPath0.arrayAdd((Object) long0, objectArray0);
      Integer integer0 = new Integer((-841));
      JSONPath.eqNotNull(integer0, integer0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=RLHT-&[S} w?rS3o");
      jSONPath_JSONPathParser0.readOp();
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("=RLHT-&[S} w?rS3o", (-3235027470545870510L), (-841), true);
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) jSONPath_IntBetweenSegement0, "OPk`QT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : OPk`QT
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      SQLTransientException sQLTransientException0 = new SQLTransientException("MI2C=", "{\"x\":[],\"z\":false,\"step must greater than zero : \":false,\"java.util.Collection\":{}}", 10, (Throwable) null);
      sQLTransientException0.getSuppressed();
      sQLTransientException0.setNextException((SQLException) null);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath.JSONPathParser.isDigitFirst('N');
      SerializeConfig serializeConfig0 = new SerializeConfig();
      PropertyNamingStrategy propertyNamingStrategy0 = serializeConfig0.propertyNamingStrategy;
      JSONPath.eq((Object) null, (Object) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("MI2C=");
      jSONPath_JSONPathParser0.readSegement();
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("30).S", (String) null, "MI2C=", (String[]) null, true);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("Yjb~E'nj<z.NO$y");
      jSONPath_JSONPathParser0.filterRest(jSONPath_NullSegement0);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("keySet");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.setPackageAssertionStatus("fastjson.parser.autoTypeAccept", false);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONPath.keySet((Object) bigDecimal0, "keySet");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("fastjson.parser.autoTypeSupport", 8963398325558730460L, jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntOpSegement0, jSONPath_IntOpSegement0, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      String string0 = "_";
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("_");
      String string1 = "autoTypeAccept";
      JSONPath jSONPath0 = JSONPath.compile("autoTypeAccept");
      int int0 = (-1660);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1660), (-1660), (-1660));
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, "autoTypeAccept");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("c1~Xxd.Q");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      JSONPath jSONPath0 = new JSONPath("]16Zp4Tv'_5*<P5-QdH");
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLWarning sQLWarning0 = new SQLWarning();
      sQLTransactionRollbackException0.printStackTrace();
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, (-3642), sQLTransactionRollbackException0);
      dataTruncation0.getNextWarning();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (Throwable) null);
      jSONPath0.getArrayItem((Object) null, 3096);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(91, 91, 968);
      Integer integer0 = new Integer(635);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, integer0, (Object) null);
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[]^hysz:,1[");
      JSONScanner jSONScanner0 = new JSONScanner("v,[e?ds");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 0, 84);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("v,[e?ds", "not support jsonpath : ", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("v,[e?ds", "", sQLSyntaxErrorException0);
      jSONPath_RangeSegment0.eval(jSONPath0, sQLRecoverableException0, sQLSyntaxErrorException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"(Ljava/lang/Class;)Ljava/util/Collection;\":\"Apple\",\"size\":\"\",\"color\":\"Red\",\"value\":true,\"value2\":null,\"number\":[]}");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("{\"(Ljava/lang/Class;)Ljava/util/Collection;\":\"Apple\",\"size\":\"\",\"color\":\"Red\",\"value\":true,\"value2\":null,\"number\":[]}");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 0, sQLNonTransientException0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      MockUUID.fromString("com");
      JSONPath jSONPath1 = new JSONPath("com");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      jSONPath1.containsValue((Object) propertyNamingStrategy0, (Object) null);
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String string0 = "c1~Xxd.Q";
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("c1~Xxd.Q");
      Byte byte0 = new Byte((byte)55);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(99999, 114, 99999);
      JSONPath jSONPath0 = JSONPath.compile("dd/MM/yyyy HH:mm:ss");
      SQLDataException sQLDataException0 = new SQLDataException("safeMode", "c1~Xxd.Q");
      Byte byte1 = new Byte((byte)27);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, sQLDataException0, byte1);
      assertNotNull(object0);
      
      StringReader stringReader0 = new StringReader("sf_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      Date date0 = jSONReaderScanner0.scanDate('H');
      boolean boolean0 = JSONPath.containsValue((Object) null, "safeMode", (Object) null);
      JSONPath jSONPath1 = JSONPath.compile("nq P]Z");
      Set<?> set0 = jSONPath1.evalKeySet(stringReader0);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)55;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      jSONPath1.evalKeySet(jSONPath_MultiIndexSegment0);
      JSONPath jSONPath2 = new JSONPath("dd/MM/yyyy HH:mm:ss");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      Long long0 = new Long((-7858127399773263546L));
      boolean boolean1 = JSONPath.contains((Object) set0, "dd/MM/yyyy HH:mm:ss");
      assertFalse(boolean1 == boolean0);
      
      JSONPath.SizeSegment jSONPath_SizeSegment1 = JSONPath.SizeSegment.instance;
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath1, string0, date0);
      assertEquals((-1), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      String string0 = "nin";
      JSONPath.compile("nin");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) sQLFeatureNotSupportedException0, "nin");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      String string0 = "Zx*?W3P";
      JSONPath jSONPath0 = JSONPath.compile("Zx*?W3P");
      int int0 = (-3312);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("L", "t", (-3312));
      Byte byte0 = new Byte((byte) (-31));
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem((JSONPath) null, (Object) null, 60, byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("c1~Xxd.Q");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      JSONPath jSONPath0 = new JSONPath("]16Zp4Tv'_5*<P5-QdH");
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Short short0 = new Short((short)3462);
      jSONPath_MultiIndexSegment0.eval(jSONPath0, sQLTransactionRollbackException0, short0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      JSONPath.reserveToObject(throwableDeserializer0, (String[]) null);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment1 = new JSONPath.MultiIndexSegment((int[]) null);
      Float float0 = new Float(Float.NaN);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("S=y0AO(H])rY", "j51", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment1 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(57);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.eval(jSONPath0, jSONPath0, float0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      jSONPath0.isRef();
      Object object0 = JSONPath.reserveToObject(serializeConfig0, (String[]) null);
      assertSame(serializeConfig0, object0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Zx*?W3P");
      assertEquals("Zx*?W3P", jSONPath0.getPath());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("L", "Zx*?W3P", (-3312));
      SQLWarning sQLWarning0 = new SQLWarning("Zx*?W3P", "L", sQLTransientConnectionException0);
      sQLWarning0.setNextException(sQLTransientConnectionException0);
      jSONPath0.set((Object) "L", (Object) sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("it42RN_4\"f^=");
      String string0 = "P1A%x{7\"";
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath1 = new JSONPath("P1A%x{7\"", serializeConfig0, parserConfig0);
      String string1 = "9g,Xa=-_K`?D)QV";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("9g,Xa=-_K`?D)QV", (Throwable) null);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("fastjson.parser.autoTypeAccept", "fastjson.parser.autoTypeAccept", sQLNonTransientConnectionException0);
      sQLRecoverableException0.getSuppressed();
      int int0 = (-181);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : it42RN_4\"f^=
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String string0 = " FC3B,39mW{<xu^}";
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath(" FC3B,39mW{<xu^}", serializeConfig0, parserConfig0);
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) javaBeanSerializer0, "fastjson.parser.safeMode", (Object) jSONPath_Operator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "G'T=%Hrl~s|o)b .pF;";
      stringArray0[0] = "G'T=%Hrl~s|o)b .pF;";
      stringArray0[1] = "NOT_LIKE";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = JSONPath.compile("NOT_LIKE");
      String string1 = "5(0'?X%ouc";
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("5(0'?X%ouc");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      jSONPath_MultiPropertySegment0.eval(jSONPath0, "NOT_LIKE", jSONPath_FilterSegment0);
      JSONPath jSONPath1 = null;
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath_FilterSegment0, (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path NOT_LIKE
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("Y");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("in", serializeConfig0, parserConfig0);
      BigInteger bigInteger0 = BigInteger.ONE;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("fastjson.parser.autoTypeAccept", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("illegal json : ", "in", map0, sQLClientInfoException0);
      jSONPath_NotNullSegement0.apply(jSONPath0, serializeConfig0, bigInteger0, sQLClientInfoException1);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeSupport");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(42);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(42, 42, 42);
      JSONPath jSONPath0 = new JSONPath("B*\"5");
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, sQLNonTransientConnectionException0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("false");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(41, 1834, 2046);
      Byte byte0 = new Byte((byte) (-67));
      jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, byte0);
      JSONPath.containsValue((Object) jSONPath_MinSegment0, "false", (Object) jSONPath_RangeSegment0);
      JSONPath jSONPath1 = JSONPath.compile("[7zrm)[:l-%6N");
      jSONPath1.evalKeySet("[7zrm)[:l-%6N");
      jSONPath0.evalKeySet("false");
      JSONPath jSONPath2 = new JSONPath(":9Km/#1zfKB-R=$g(");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      Long long0 = new Long(1894L);
      JSONPath.contains((Object) ":9Km/#1zfKB-R=$g(", "[7zrm)[:l-%6N");
      JSONPath.SizeSegment jSONPath_SizeSegment1 = JSONPath.SizeSegment.instance;
      jSONPath_SizeSegment1.eval(jSONPath2, long0, jSONPath1);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-4001L));
      JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("NaN");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("3R", "3R", jSONPath_Operator0);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_StringOpSegement0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_Filter0);
      JSONPath.keySet((Object) jSONPath_FilterSegment0, "3R");
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      JSONPath.isInt(class0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("parse unwrapped field error.", serializeConfig0, parserConfig0);
      Short short0 = new Short((short)61);
      Set<?> set0 = JSONPath.keySet((Object) short0, "com.alibaba.fastjson.JSONPath$NotNullSegement");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.GT;
      JSONPath.Operator jSONPath_Operator2 = JSONPath.Operator.GT;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("com.alibaba.fastjson.JSONPath$MinSegment", (-4080L), jSONPath_Operator2);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntOpSegement0, jSONPath_IntOpSegement0, false);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("bKuH^", serializeConfig0, parserConfig0);
      JSONPath.remove((Object) jSONPath0, "fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) "bKuH^", "%UAjq[d>.jRcGI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. %UAjq[d>.jRcGI
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("false");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(41, 1834, 2046);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("false", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      Map<String, ClientInfoStatus> map0 = new HashMap<String, ClientInfoStatus>();
      SQLDataException sQLDataException0 = new SQLDataException();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "false";
      stringArray0[1] = "false";
      JSONPath.reserveToObject(sQLDataException0, stringArray0);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("false", map0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.reserveToArray(sQLClientInfoException2, stringArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("false", sQLClientInfoException1);
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, sQLFeatureNotSupportedException0, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      int int0 = JSONPath.size((Object) null, "'/3|Bzq!l&[Nyk");
      assertEquals((-1), int0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("not", "!/g u6i,e[# .0%F", (-1));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "not";
      stringArray0[0] = "parse unwrapped field error.";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLRecoverableException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("not", "parse unwrapped field error.", sQLInvalidAuthorizationSpecException0);
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("not", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath("8ci&");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Float float0 = new Float((float) (-1));
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, float0, "parse unwrapped field error.", jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("E_Ax*M3IzT)jSc>bO", false);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, false, true, false);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("@9(G", serializeConfig0, parserConfig1);
      jSONPath_PropertySegment0.eval(jSONPath0, jSONPath0, parserConfig1);
      String string0 = null;
      JSONPath.PropertySegment jSONPath_PropertySegment1 = null;
      try {
        jSONPath_PropertySegment1 = new JSONPath.PropertySegment((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("c1~Xxd.Q");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      JSONPath jSONPath0 = new JSONPath("]16Zp4Tv'_5*<P5-QdH");
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JSONPath.JSONPathParser.isDigitFirst(']');
      JSONPath.eq(jSONPath_FilterSegment0, (Object) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      jSONPath_JSONPathParser0.readSegement();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "c1~Xxd.Q";
      stringArray0[1] = "]16Zp4Tv'_5*<P5-QdH";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("false", "FlT[K7p\"Ra27`Bf", (String) null, stringArray0, false);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_MatchSegement0);
      assertSame(jSONPath_Filter0, jSONPath_MatchSegement0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("k./#o]XQ$^V");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Kfd=eOQ#3L?@", "Kfd=eOQ#3L?@");
      JSONPath.eq(sQLTransactionRollbackException0, (Object) null);
      Byte byte0 = new Byte((byte)1);
      JSONPath.eqNotNull(byte0, byte0);
      String string0 = "OrderedField";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("OrderedField");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("]16Zp4Tv'_5*<P5-QdH");
      String string0 = "]16Zp4Tv'_5*<P5-QdH";
      String string1 = "create instance error, class ";
      JSONPath jSONPath1 = JSONPath.compile("create instance error, class ");
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(jSONPath1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Zx*?W3P");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("L", "Zx*?W3P", (-3312));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Zx*?W3P", "L", (-3312));
      Collection<Object> collection0 = jSONPath0.getPropertyValues(sQLSyntaxErrorException0);
      assertTrue(collection0.contains("Zx*?W3P"));
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      JSONPath.JSONPathParser.isDigitFirst('-');
      JSONPath jSONPath0 = new JSONPath("like");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      propertyNamingStrategy0.translate("like");
      UUID uUID0 = MockUUID.fromString("like");
      jSONPath0.containsValue((Object) "like", (Object) uUID0);
      jSONPath0.evalSize(propertyNamingStrategy0);
      BigDecimal bigDecimal0 = new BigDecimal(358L);
      assertEquals((byte)102, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("false");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(41, 1834, 2046);
      boolean boolean0 = JSONPath.containsValue((Object) jSONPath_MinSegment0, "false", (Object) jSONPath_RangeSegment0);
      assertFalse(boolean0);
      
      JSONPath jSONPath1 = JSONPath.compile("[7zrm)[:l-%6N");
      jSONPath1.evalKeySet("[7zrm)[:l-%6N");
      jSONPath0.evalKeySet("false");
      JSONPath jSONPath2 = new JSONPath(":9Km/#1zfKB-R=$g(");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      Long long0 = new Long(1894L);
      JSONPath.SizeSegment jSONPath_SizeSegment1 = JSONPath.SizeSegment.instance;
      Integer integer0 = jSONPath_SizeSegment1.eval(jSONPath2, long0, jSONPath1);
      assertEquals((-1), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" hch&:");
      Long long0 = new Long((-3235027470545870510L));
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSONPath.extract(" hch&:", " hch&:", (ParserConfig) null, 861, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("J51[D9");
      jSONPath0.evalSize((Object) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("unsupported array put operation. ");
      jSONPath_JSONPathParser0.skipWhitespace();
      jSONPath0.init();
      assertEquals("J51[D9", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("Y");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      String[] stringArray0 = new String[0];
      JSONPath.reserveToArray("tf41:})v9Y", stringArray0);
      boolean boolean0 = JSONPath.eqNotNull(989, 3089);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Integer integer0 = new Integer((-1434));
      boolean boolean0 = JSONPath.eqNotNull(integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      JSONPath.isInt(class0);
      byte byte0 = (byte) (-128);
      Byte byte1 = new Byte((byte) (-128));
      JSONPath.eval((Object) byte1, "com.alibaba.fastjson.JSONPath$IntOpSegement");
      String string0 = "}/#52@lg";
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("}/#52@lg", serializeConfig0, parserConfig0);
      Double double0 = new Double((byte) (-128));
      String string1 = "YBS{Kr*a8^u#bs*U38H";
      BigInteger bigInteger0 = BigInteger.TEN;
      char[] charArray0 = null;
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner((char[]) null, 1482, (byte) (-128));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("wj'(*", 3495L, (-4438775680185074100L), false);
      JSONPath jSONPath0 = JSONPath.compile("wj'(*");
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, jSONPath0, "wj'(*", jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("c1~Xxd.Q");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      JSONPath jSONPath0 = new JSONPath("]16Zp4Tv'_5*<P5-QdH");
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Short short0 = new Short((short)3462);
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, sQLTransactionRollbackException0, short0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      jSONPath_FilterSegment0.remove(jSONPath0, jSONArray0, batchUpdateException0);
      JSONPath.size((Object) jSONPath_FilterSegment0, "i_Ysmk");
      jSONPath0.deepScan(jSONPath_FilterSegment0, "1.2.68", jSONArray0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("1.2.68", "jcLa", intArray0);
      Collection<Object> collection0 = jSONPath0.getPropertyValues(batchUpdateException1);
      assertTrue(collection0.contains("1.2.68"));
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      JSONPath.isInt(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("parse unwrapped field error.", serializeConfig0, parserConfig0);
      JSONPath.reserveToArray(jSONPath0, (String[]) null);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) parserConfig0, (Object) "fastjson.parser.safeMode", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : parse unwrapped field error.
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = JSONPath.compile(",#Z81P9(]}v4M63");
      jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath0, ",#Z81P9(]}v4M63");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(".");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(0, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<JSONPath.SizeSegment> class0 = JSONPath.SizeSegment.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, false, false, false);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      JSONPath jSONPath0 = new JSONPath("qbp29ZxcG*Qhjr", serializeConfig0, parserConfig0);
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      Byte byte0 = new Byte((byte)64);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, jSONPath0, byte0);
      jSONPath_MaxSegment0.eval(jSONPath0, object0, object0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) parserConfig0, (Object) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : qbp29ZxcG*Qhjr
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "G'T=%Hrl~s|o) .pF;";
      stringArray0[1] = "=~";
      ClassLoader classLoader0 = null;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("G'T=%Hrl~s|o) .pF;", (SerializeConfig) null, parserConfig0);
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      Byte byte0 = new Byte((byte)64);
      Class<String> class0 = String.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      jSONPath_KeySetSegment0.eval(jSONPath0, javaBeanSerializer0, (Object) null);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, byte0, "G'T=%Hrl~s|o) .pF;");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("-", serializeConfig0, parserConfig0);
      jSONPath0.arrayAdd((Object) "-", (Object[]) null);
      Class<Object> class0 = Object.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "NOT_LIKE";
      JSONPath jSONPath0 = JSONPath.compile("{\"c1~Xxd.Q\":\"Apple\",\"size\":\"\",\"/stackTrace/0\":[false],\"value\":true,\"'/3|Bzq!l&[Nyk\":null,\"com.alibaba.fastjson.asm.Label\":null,\"ol\":false}");
      JSONPath.reserveToArray(jSONPath0, stringArray0);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, jSONPath_MinSegment0, jSONPath_MinSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("qbp29ZxcG*Qhjr", serializeConfig0, parserConfig0);
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      Byte byte0 = new Byte((byte)64);
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, jSONPath0, byte0);
      jSONPath_MaxSegment0.eval(jSONPath0, object0, object0);
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval((JSONPath) null, (Object) null, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath jSONPath0 = new JSONPath(":Q#jkDF_UX+_aM:&", serializeConfig0, parserConfig0);
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      SQLTransientException sQLTransientException0 = new SQLTransientException("-99");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(".U<71[2_N", "]'{iJ]7iE4TO0rfV", sQLTransientException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("=;", "=;", 40, sQLTransientException0);
      Integer integer0 = new Integer((-198));
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("krIt&uA38m6B", "'s*,s*'", sQLNonTransientException0);
      jSONPath_SizeSegment0.eval(jSONPath1, sQLRecoverableException0, integer0);
      // Undeclared exception!
      try { 
        jSONPath1.deepSet(jSONPath0, "+`?jah EI;w", 40, sQLTransientException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(2901, true);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("NDB:~ImaZT.*((&#Q", serializeConfig0, parserConfig0);
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = jSONPath0.evalSize(bigInteger0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("=7ca}S1%+65CrX", serializeConfig0, parserConfig0);
      JSONPath jSONPath1 = JSONPath.compile("*");
      SQLTransientException sQLTransientException0 = new SQLTransientException("=7ca}S1%+65CrX");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("*", "fastjson.parser.autoTypeSupport", sQLTransientException0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(110, 110, 2);
      serializeConfig0.clearSerializers();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment(",  end ", true);
      jSONPath_PropertySegment0.remove(jSONPath0, jSONPath1);
      DataTruncation dataTruncation0 = new DataTruncation(46, false, false, (-2034739705), 46);
      char[] charArray0 = new char[2];
      charArray0[0] = 'D';
      charArray0[1] = 'E';
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-2421));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      String[] stringArray0 = new String[6];
      SerializeConfig serializeConfig1 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.deny.internal", "-", (String) null, (String[]) null, true);
      boolean boolean0 = JSONPath.eq((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("GaQ)H<N <Fvw_l");
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("M,|p!", parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : GaQ)H<N <Fvw_l
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = "";
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\".U<71[2_N\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\",\"x\":{},\"xx\":-99}");
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("2", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("2", "{\"fruit\":\"Apple\",\"size\":\".U<71[2_N\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\",\"x\":{},\"xx\":-99}", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      Short short0 = new Short((short)92);
      int int0 = 4079;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("or[cBak", parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"fruit\":\"Apple\",\"size\":\".U<71[2_N\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\",\"x\":{},\"xx\":-99}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}");
      jSONPath0.evalSize("");
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("2", serializeConfig0, parserConfig0);
      Short short0 = new Short((short)65);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("hp0j_Ac0", "`C\"[27bU_>8*Bb,", hashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLClientInfoException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.safeMode", "fastjson.parser.autoTypeAccept", sQLInvalidAuthorizationSpecException0);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("", "2", false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[5#7?", sQLClientInfoException0);
      jSONPath_RlikeSegement0.apply(jSONPath1, "2", short0, sQLIntegrityConstraintViolationException0);
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("hp0j_Ac0", jSONPath_MinSegment0, jSONPath_Operator0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("3>5y=^K'wo4.8h");
      JSONPath jSONPath0 = JSONPath.compile("3>5y=^K'wo4.8h");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Integer integer0 = new Integer((-1434));
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, jSONPath_WildCardSegment0, integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("c1~Xxd.Q");
      JSONPath jSONPath0 = JSONPath.compile("dd/MM/yyyy HH:mm:ss");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      String[] stringArray0 = new String[0];
      JSONPath.reserveToObject("c1~Xxd.Q", stringArray0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("dd/MM/yyyy HH:mm:ss", (Map<String, ClientInfoStatus>) null);
      jSONPath_NotNullSegement0.apply(jSONPath0, sQLClientInfoException1, jSONPath0, "c1~Xxd.Q");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      String[] stringArray1 = new String[4];
      stringArray1[0] = "{\"x\":\"[]\",\"y\":[99],\"z\":true,\"a\":[],\"b\":{}}";
      stringArray1[1] = "com.alibaba.fastjson.JSONPath$NotNullSegement";
      stringArray1[2] = "tf41:})v9Y";
      stringArray1[3] = "tf41:})v9Y";
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("c1~Xxd.Q");
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, "tf41:})v9Y", sQLClientInfoException0, sQLClientInfoException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      BigDecimal.valueOf(1577.1400146484375);
      BigDecimal bigDecimal1 = new BigDecimal(1577.1400146484375);
      MathContext mathContext0 = new MathContext(2659);
      bigDecimal0.divideToIntegralValue(bigDecimal1, mathContext0);
      // Undeclared exception!
      JSONPath.set((Object) bigDecimal0, "com.alibaba.fastjson.JSONPath$KeySetSegment", (Object) bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("qbp29ZxcG*Qhjr", serializeConfig0, parserConfig0);
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      Byte byte0 = new Byte((byte)64);
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, jSONPath0, byte0);
      assertNotNull(object0);
      
      Object object1 = jSONPath_MaxSegment0.eval(jSONPath0, object0, object0);
      assertNull(object1);
      
      boolean boolean0 = JSONPath.eqNotNull(byte0, byte0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":true}");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("", true);
      Long long0 = new Long(131L);
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      long[] longArray0 = new long[5];
      longArray0[0] = 131L;
      longArray0[1] = (long) 100;
      longArray0[2] = 131L;
      longArray0[3] = (-1903L);
      longArray0[4] = (long) 100;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("h+^\u0001<<^YP9i{$*+Q3t", "X8H}!J-GZci>$BiC7*B");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":true}", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":true}", 100, longArray0, sQLTransientConnectionException0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("REG_MATCH", (SerializeConfig) null, parserConfig0);
      jSONPath_KeySetSegment0.eval(jSONPath0, batchUpdateException0, jSONPath1);
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, long0, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String string0 = "c1~Xxd.Q";
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("c1~Xxd.Q");
      String string1 = "dd/MM/yyyy HH:mm:ss";
      JSONPath jSONPath0 = JSONPath.compile("dd/MM/yyyy HH:mm:ss");
      jSONPath0.isRef();
      Map<String, ClientInfoStatus> map0 = null;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(map0);
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException0.getFailedProperties();
      String[] stringArray0 = new String[0];
      JSONPath.reserveToObject(string0, stringArray0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(string1, map1);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.reserveToArray(jSONPath_MultiPropertySegment0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("j}[@i|9RF|2q4jm\"", "Oyi{).;!", 39);
      JSONPath.size((Object) sQLTransientConnectionException0, "create instance error, class ");
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("wj'(*", 3495L, (-4438775680185074100L), false);
      JSONPath jSONPath0 = new JSONPath("wj'(*");
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("O_LIKE");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.autoTypeSupport", "fastjson.parser.deny", (-1178));
      Integer integer0 = new Integer((-1178));
      jSONPath_WildCardSegment0.eval(jSONPath0, sQLTransientConnectionException0, integer0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("fastjson.parser.deny", "java.time.ZonedDateTime");
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) sQLTransientConnectionException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : wj'(*
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("c1~Xxd.Q");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      JSONPath jSONPath0 = new JSONPath("]16Zp4Tv'_5*<P5-QdH");
      jSONPath0.getPropertyValues(jSONPath_NotNullSegement0);
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      String string0 = "tf41:})v9\\Y";
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "]16Zp4Tv'_5*<P5-QdH";
      stringArray0[1] = "GRr1c#v&[XIlh4";
      stringArray0[2] = "tf41:})v9Y";
      stringArray0[3] = "GRr1c#v&[XIlh4";
      Class<Integer> class0 = Integer.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, "]16Zp4Tv'_5*<P5-QdH", javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.ASMSerializer_3_Integer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      jSONPath_MultiPropertySegment0.eval((JSONPath) null, (Object) null, (Object) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":\"Apple\",\"wmv/'JZu|\":\"\",\"/stackTrace/0\":[false],\"value\":true,\"'/3|Bzq!l&[Nyk\":null,\"com.alibaba.fastjson.asm.Label\":null,\"ol\":-99,\"x\":[],\"xx\":-99}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"fruit\":\"Apple\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("c1~Xxd.Q");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      JSONPath jSONPath0 = JSONPath.compile("]16Zp4Tv'_5*<P5-QdH");
      jSONPath0.getPropertyValues(jSONPath_NotNullSegement0);
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "]16Zp4Tv'_5*<P5-QdH";
      stringArray0[2] = "c1~Xxd.Q";
      stringArray0[3] = "]16Zp4Tv'_5*<P5-QdH";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("]16Zp4Tv'_5*<P5-QdH", stringArray0, false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("GRr1c#v&[XIlh4");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_StringInSegement0);
      jSONPath_JSONPathParser0.filterRest(jSONPath_Filter0);
      String string0 = "5(0'?X%ouc";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("5(0'?X%ouc", "!zZ=K(xZ9Yi%");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLIntegrityConstraintViolationException0.forEach(consumer0);
      jSONPath0.evalKeySet("]16Zp4Tv'_5*<P5-QdH");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("rM,]Z0o]DXgU,");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"rM\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("hkg6DzcFp*mLN");
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) "hkg6DzcFp*mLN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : hkg6DzcFp*mLN
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeAccept");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "fastjson.parser.autoTypeAccept";
      stringArray0[1] = "h";
      jSONPath_JSONPathParser0.next();
      stringArray0[2] = "o]?F6";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("fastjson.parser.autoTypeAccept", stringArray0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      ParserConfig parserConfig0 = new ParserConfig();
      Class<DataTruncation> class0 = DataTruncation.class;
      parserConfig0.addDenyInternal((String) null);
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(javaBeanDeserializer0, (String[]) null);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = JSONPath.compile("like");
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath0, (String[]) null);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("c1~Xxd.Q");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      JSONPath jSONPath0 = new JSONPath("]16Zp4Tv'_5*<P5-QdH");
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Short short0 = new Short((short)3462);
      Object object0 = jSONPath_MultiIndexSegment0.eval(jSONPath0, sQLTransactionRollbackException0, short0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, object0, batchUpdateException0);
      assertTrue(boolean0);
      
      int int0 = JSONPath.size((Object) jSONPath_FilterSegment0, "i_Ysmk");
      assertEquals((-1), int0);
      
      Class<UUID> class0 = UUID.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeAccept");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "fastjson.parser.autoTypeAccept";
      stringArray0[1] = "h";
      jSONPath_JSONPathParser0.next();
      stringArray0[2] = "o]?F6";
      JSONPath jSONPath0 = new JSONPath("L");
      Integer integer0 = new Integer(16);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Float float0 = new Float(0.0F);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("L", false);
      jSONPath_PropertySegment0.remove(jSONPath0, "o]?F6");
      Class<JSONPath.SizeSegment> class0 = JSONPath.SizeSegment.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeAccept");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "fastjson.parser.autoTypeAccept";
      stringArray0[1] = "h";
      jSONPath_JSONPathParser0.next();
      stringArray0[2] = "o]?F6";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("fastjson.parser.autoTypeAccept", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath("L");
      Integer integer0 = new Integer(16);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "fastjson.parser.autoTypeAccept", "o]?F6", integer0);
      jSONPath_JSONPathParser0.filterRest(jSONPath_StringInSegement0);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath1 = new JSONPath("evalKeySet error : ", serializeConfig0, parserConfig0);
      jSONPath1.extract((DefaultJSONParser) null);
      Float float0 = new Float(0.0F);
      boolean boolean1 = jSONPath1.setPropertyValue(parserConfig0, "\"l34G6.b\"{]o4YQH?<", 1073634739308289776L, float0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"\",\"color\":{},\"value\":true,\"value2\":null,\"number\":null,\"ol\":\"a string\"}");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":\"Apple\",\"size\":\"\",\"color\":{},\"value\":true,\"value2\":null,\"number\":null,\"ol\":\"a string\"}");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com");
      jSONPath_JSONPathParser0.filterRest(jSONPath_NotNullSegement0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com", "GT", 38);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SQLDataException sQLDataException0 = new SQLDataException("GT", "parse error : ");
      JSONPath jSONPath1 = JSONPath.compile("GT");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":\"Apple\",\"size\":\"\",\"color\":{},\"value\":true,\"value2\":null,\"number\":null,\"ol\":\"a string\"}");
      jSONPath1.extract(defaultJSONParser0);
      JavaBeanSerializer javaBeanSerializer0 = null;
      try {
        javaBeanSerializer0 = new JavaBeanSerializer((SerializeBeanInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      int int0 = 46;
      Feature feature0 = Feature.DisableFieldSmartMatch;
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[2];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      // Undeclared exception!
      try { 
        JSONPath.extract("/stackTrace/5", "/stackTrace/5", parserConfig0, 1054, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      JSONPath.JSONPathParser.isDigitFirst('+');
      JSONPath jSONPath0 = new JSONPath("\"");
      jSONPath0.contains((Object) "\"");
      JSONPath jSONPath1 = new JSONPath("cu|5W}m'");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      propertyNamingStrategy1.translate("cu|5W}m'");
      jSONPath1.evalSize("cu|5W}m'");
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      jSONPath1.getJavaBeanDeserializer(class0);
      byte byte0 = (byte) (-119);
      Byte byte1 = new Byte((byte) (-119));
      // Undeclared exception!
      try { 
        jSONPath1.size((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : cu|5W}m'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      String string0 = "=7ca}S1%+65CrX";
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      long[] longArray0 = new long[2];
      longArray0[0] = (-5808554674130653198L);
      longArray0[1] = (-1014497654951707614L);
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("=7ca}S1%+65CrX", longArray0, true);
      String string1 = "not";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.safeMode");
      jSONPath_JSONPathParser0.readName();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("xyqdfp2:pr _%xx.3U,", "wj'(*");
      SQLDataException sQLDataException0 = new SQLDataException(sQLRecoverableException0);
      JSONPath jSONPath0 = JSONPath.compile("xyqdfp2:pr _%xx.3U,");
      int[] intArray0 = new int[6];
      intArray0[1] = 137;
      intArray0[2] = 5;
      intArray0[3] = 5;
      intArray0[4] = 137;
      intArray0[5] = 137;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      jSONPath0.deepSet(batchUpdateException0, "L", (-4438775680185074100L), (Object) null);
      assertEquals("xyqdfp2:pr _%xx.3U,", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("OrderedField");
      jSONPath0.deepSet("OrderedField", "OrderedField", (-5160191432812731075L), "OrderedField");
      assertEquals("OrderedField", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("=7ca}S1%+65CrX", serializeConfig0, parserConfig0);
      JSONPath jSONPath1 = JSONPath.compile("*");
      SQLTransientException sQLTransientException0 = new SQLTransientException("=7ca}S1%+65CrX");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("*", "fastjson.parser.autoTypeSupport", sQLTransientException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("-99", "fastjson.parser.autoTypeSupport", (-2435), sQLNonTransientException0);
      Integer integer0 = new Integer(91);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", sQLNonTransientException0);
      Integer integer1 = jSONPath_SizeSegment0.eval(jSONPath0, sQLRecoverableException1, "-99");
      jSONPath0.deepSet(integer1, "fastjson.parser.deny.internal", 91, sQLNonTransientException0);
      assertNotSame(jSONPath0, jSONPath1);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("wqK");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "wqK";
      stringArray0[1] = "wqK";
      JSONPath.reserveToObject("wqK", stringArray0);
      JSONPath.size((Object) jSONPath0, "wqK");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("", false);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("", "{\"x\":{},\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", (String) null, stringArray0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JSONPath.NullSegement jSONPath_NullSegement0 = null;
      try {
        jSONPath_NullSegement0 = new JSONPath.NullSegement((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Long[] longArray0 = new Long[6];
      Long long0 = new Long((-1916L));
      longArray0[5] = long0;
      Long long1 = new Long((-1916L));
      longArray0[1] = long1;
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      charArray0[1] = 'v';
      charArray0[2] = '*';
      charArray0[3] = 'L';
      charArray0[4] = '9';
      charArray0[5] = 'L';
      charArray0[6] = 'L';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 832);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      JSONPath jSONPath0 = new JSONPath("rlike");
      boolean boolean0 = jSONPath0.set((Object) longArray0[0], (Object) longArray0[1]);
      assertFalse(boolean0);
      
      JSONPath.paths((Object) long1, (SerializeConfig) null);
      Map<String, Object> map0 = JSONPath.paths((Object) long1, (SerializeConfig) null);
      assertEquals(1, map0.size());
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("q*E$h^-*10");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "rlike";
      stringArray0[1] = "rlike";
      stringArray0[2] = "io";
      stringArray0[3] = "4N8`V{*woR1p}F";
      stringArray0[4] = "q*E$h^-*10";
      stringArray0[5] = "io";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("io", "4N8`V{*woR1p}F", "rlike", stringArray0, true);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_MatchSegement0);
      assertSame(jSONPath_Filter0, jSONPath_MatchSegement0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("q+#B+&]FyohF-J");
      jSONPath_JSONPathParser0.isEOF();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "p~";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("X|a&^wKQsO", "X|a&^wKQsO", "'0>>)_U@{ A!", stringArray0, false);
      JSONPath jSONPath0 = new JSONPath("p~");
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "q+#B+&]FyohF-J", (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path p~
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"REG_MATCH\",\"value\":true,\"value2\":[],\"number\":true}");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"REG_MATCH\",\"value\":true,\"value2\":[],\"number\":true}", (-4080L), jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntOpSegement0, jSONPath_IntOpSegement0, false);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath1 = new JSONPath("LT", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) parserConfig0, "nin");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Long long0 = new Long(972L);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1685), 182, 182);
      String string0 = "v";
      JSONPath jSONPath0 = JSONPath.compile("v");
      boolean boolean0 = jSONPath0.remove((Object) "v");
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      String string1 = "L3";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(string1);
      boolean boolean1 = JSONPath.eqNotNull(long0, long0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(".U<71[2_N");
      int int0 = jSONPath0.size((Object) ".U<71[2_N");
      String string0 = "XR2j*@`!qBC";
      String string1 = "xyqdfp2:pr _%xx.3U,";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(string0, string1);
      SQLDataException sQLDataException0 = new SQLDataException(sQLRecoverableException0);
      String string2 = "";
      int int1 = 5;
      Integer integer0 = new Integer(int1);
      jSONPath0.deepSet(sQLDataException0, string2, int0, integer0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("a");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONPath jSONPath1 = new JSONPath("a");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("stackTrace");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      String string0 = ",GQoR[oG#D5";
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.parser.deny.internal", (-1L), (-1014497654951707586L), true);
      JSONPath jSONPath1 = JSONPath.compile("32fK");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 11, 92);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath1, mockGregorianCalendar0, (-1487), jSONPath_IntBetweenSegement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class org.evosuite.runtime.mock.java.util.MockGregorianCalendar
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem((JSONPath) null, "true", 87, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.GT;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("com.alibaba.fastjson.JSONPath$MinSegment", (-4080L), jSONPath_Operator1);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$MinSegment");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.alibaba.fastjson.JSONPath$MinSegment", "0K`!A)", 1685);
      jSONPath_IntOpSegement0.apply(jSONPath0, sQLIntegrityConstraintViolationException0, "0K`!A)", sQLIntegrityConstraintViolationException0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntOpSegement0, jSONPath_IntOpSegement0, false);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath1 = new JSONPath("c>>L6q.Af;lp", serializeConfig0, parserConfig0);
      jSONPath1.getPropertyValue(jSONPath_Operator1, "fastjson.parser.safeMode", 5614464919154503228L);
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransactionRollbackException0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-402);
      intArray0[1] = 99999;
      intArray0[2] = 94;
      intArray0[3] = (-1198);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath2 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath_MultiIndexSegment0.eval(jSONPath2, (Object) null, classLoader0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("like");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      boolean boolean0 = jSONPath0.contains((Object) propertyNamingStrategy0);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.add(bigInteger0);
      bigInteger0.getLowestSetBit();
      boolean boolean1 = JSONPath.eqNotNull(bigInteger0, bigInteger0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "'/3|Bzq!l&[Nyk";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("'/3|Bzq!l&[Nyk", "'/3|Bzq!l&[Nyk", "'/3|Bzq!l&[Nyk", stringArray0, true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'/3|Bzq!l&[Nyk");
      jSONPath_JSONPathParser0.buildArraySegement("'/3|Bzq!l&[Nyk");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("'/3|Bzq!l&[Nyk");
      String string0 = "syntax error, unexpect token ':'";
      JSONPath jSONPath0 = JSONPath.compile("8fHx\"&%0");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 8fHx\"&%0
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("-99", (-1L), jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntOpSegement0, jSONPath_IntOpSegement0, true);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("-99", serializeConfig0, parserConfig0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      jSONPath_FilterGroup0.apply(jSONPath0, jSONPath0, (Object) null, jSONPath_SizeSegment0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("o>He!~jAm^@k-");
      jSONPath_JSONPathParser0.buildArraySegement("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('E');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'E, but 'o'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      UUID uUID0 = MockUUID.fromString("");
      boolean boolean0 = JSONPath.set((Object) null, "", (Object) uUID0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment(string1, boolean0);
      String string2 = "L<^@hI)7K0e-Rg[A<E[";
      JSONPath jSONPath0 = new JSONPath(string2);
      int int0 = 11;
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      FieldInfo fieldInfo0 = null;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class0, fieldInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      jSONPath_MultiPropertySegment0.eval((JSONPath) null, (Object) null, (Object) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":\"Apple\",\"wmv/'JZu|\":\"\",\"/stackTrace/0\":[false],\"value\":true,\"'/3|Bzq!l&[Nyk\":null,\"com.alibaba.fastjson.asm.Label\":null,\"ol\":-99,\"x\":[],\"xx\":-99}");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "evalSize error : ";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = JSONPath.compile("/hZSbE ~r'gRPyl{");
      Float float0 = new Float((-793.71457683));
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, "evalSize error : ", float0);
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Random.setNextRandom(2514);
      String[] stringArray0 = new String[2];
      String string0 = "G'T=%Hrl~s|o) .pF;";
      stringArray0[0] = "G'T=%Hrl~s|o) .pF;";
      String string1 = "=~";
      stringArray0[1] = "=~";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = JSONPath.compile("=~");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("5(0'?X%ouc");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      jSONPath_MultiPropertySegment0.eval(jSONPath0, "=~", jSONPath_FilterSegment0);
      // Undeclared exception!
      try { 
        jSONPath_MultiPropertySegment0.eval((JSONPath) null, (Object) null, "=~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MultiPropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.GT;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("com.alibaba.fastjson.JSONPath$MinSegment", (-4080L), jSONPath_Operator1);
      SerializeConfig.getGlobalInstance();
      Feature feature0 = Feature.UseObjectArray;
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[1];
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSONPath.extract("com.alibaba.fastjson.JSONPath$MinSegment", "jGv", parserConfig0, (-1190), featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      JSONPath.compile("Zx*?W3P");
      JSONPath jSONPath0 = JSONPath.compile("z.z");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("z.z");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-117L);
      longArray0[1] = (-5808554674130653198L);
      longArray0[2] = (-1887L);
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("/stackTrace/8", longArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/8");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("LE");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("/stackTrace/5", "/stackTrace/5", false);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/5");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("GE");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.NonStringKeyAsString;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.IgnoreAutoType;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.InternFieldNames;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.InternFieldNames;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.IgnoreAutoType;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.InitStringFieldAsEmpty;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.DisableSpecialKeyDetect;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.SafeMode;
      Module module0 = mock(Module.class, new ViolatedAssumptionAnswer());
      parserConfig0.register(module0);
      featureArray0[7] = feature7;
      Feature feature8 = Feature.SupportAutoType;
      featureArray0[8] = feature8;
      // Undeclared exception!
      try { 
        JSONPath.extract("java/io/IOException", "java/io/IOException", parserConfig0, 109, featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = null;
      try {
        jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      String string0 = "=(% `P.  r5*";
      JSONPath jSONPath0 = new JSONPath("=(% `P.  r5*");
      Class<Short> class0 = Short.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "=(% `P.  r5*";
      stringArray0[1] = "=(% `P.  r5*";
      stringArray0[2] = "=(% `P.  r5*";
      stringArray0[3] = "=(% `P.  r5*";
      stringArray0[4] = "=(% `P.  r5*";
      stringArray0[5] = "com.alibaba.fastjson.JSONPath$StringOpSegement";
      stringArray0[6] = "=(% `P.  r5*";
      stringArray0[7] = "=(% `P.  r5*";
      stringArray0[8] = "=(% `P.  r5*";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.eval((Object) javaBeanSerializer0, "-v0%ws2JO'rw]W");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(string0);
      String string1 = null;
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      String string0 = "l \\s2.";
      // Undeclared exception!
      try { 
        JSONPath.extract("l s2.", "fastjson");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      // Undeclared exception!
      try { 
        JSONPath.extract("com.alibaba.fastjson.JSONPath$IntOpSegement", "nin");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("OrderedField");
      JSONPath jSONPath1 = new JSONPath("OrderedField");
      JSONScanner jSONScanner0 = new JSONScanner("OrderedField");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONPath0, jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath jSONPath0 = JSONPath.compile("j(Nf}oJ-*;,gX");
      assertEquals("j(Nf}oJ-*;,gX", jSONPath0.getPath());
      
      // Undeclared exception!
      try { 
        JSONPath.extract("j(Nf}oJ-*;,gX", "j(Nf}oJ-*;,gX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2j(Nf}oJ-*;,gX
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("bKuH^", serializeConfig0, parserConfig0);
      JSONPath.remove((Object) jSONPath0, "fastjson.parser.autoTypeAccept");
      JSONPath.Operator[] jSONPath_OperatorArray0 = JSONPath.Operator.values();
      assertEquals(17, jSONPath_OperatorArray0.length);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("%tU4_NK", 3315L, jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig(8, false);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("%tU4_NK", serializeConfig0, parserConfig0);
      jSONPath_IntOpSegement0.apply(jSONPath0, jSONPath_Operator0, parserConfig0, jSONPath0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntOpSegement0, jSONPath_IntOpSegement0, false);
      Float float0 = new Float((double) 3315L);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("tRE2#z|p4r*)$:#", "fastjson.parser.safeMode", 8);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, parserConfig0, float0, sQLNonTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("2", "true", jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("BETWEEN");
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.LT;
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, "true", jSONPath_Operator1, "BETWEEN");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":true,\"value\":true,\"value2\":false,\"number\":\"1\"}");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":true,\"value\":true,\"value2\":false,\"number\":\"1\"}", 0);
      JSONPath jSONPath1 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":true,\"value\":true,\"value2\":false,\"number\":\"1\"}");
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Short short0 = new Short((short)3462);
      jSONPath_MultiIndexSegment0.eval(jSONPath1, sQLTransactionRollbackException0, jSONReaderScanner0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("c", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":true,\"value\":true,\"value2\":false,\"number\":\"1\"}", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      Short short1 = new Short((short)92);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "{\"x\":\"hello\",\"L\":true,\"a\":[],\"b\":{\"x\":\"a string\",\"xx\":99}}", 3678080, sQLTransactionRollbackException0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath1, short1, sQLTransientConnectionException0);
      assertTrue(boolean0);
      
      int int0 = JSONPath.size((Object) short0, "i_Ysmk");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      String string0 = "c1~Xxd.Q";
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("c1~Xxd.Q");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      JSONPath jSONPath0 = new JSONPath("]16Zp4Tv'_5*<P5-QdH");
      jSONPath0.getPropertyValues(jSONPath_NotNullSegement0);
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      String string1 = "GRr1c#v&[XIlh4";
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "]16Zp4Tv'_5*<P5-QdH";
      stringArray0[1] = "GRr1c#v&[XIlh4";
      stringArray0[2] = "tf41:})v9Y";
      stringArray0[3] = "GRr1c#v&[XIlh4";
      stringArray0[4] = "tf41:})v9Y";
      JSONPath.reserveToArray(jSONPath_WildCardSegment0, stringArray0);
      String string2 = null;
      // Undeclared exception!
      try { 
        JSONPath.size((Object) string0, string2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("c1~Xxd.Q");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "{\"x\":\"[]\",\"y\":[99],\"z\":true,\"a\":[],\"b\":{}}";
      stringArray0[1] = "com.alibaba.fastjson.JSONPath$NotNullSegement";
      stringArray0[2] = "tf41:})v9Y";
      stringArray0[3] = "tf41:})v9Y";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(bigDecimal0, stringArray0);
      assertEquals(4, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("OrderedField");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath.paths((Object) "OrderedField", serializeConfig0);
      // Undeclared exception!
      try { 
        JSONPath.read("aD3'7~8i]", "OrderedField");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2aD3'7~8i]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("step must greater than zero : ");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      jSONPath0.set((Object) null, (Object) null);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "step must greater than zero : ");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Map<String, Object> map0 = JSONPath.paths((Object) classLoader0, serializeConfig0);
      assertEquals(4, map0.size());
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Zx*?W3P");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("L", "t", (-3312));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Zx*?W3P", "Zx*?W3P", (-3312), sQLTransientConnectionException0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("not", ":PTjt_;GaUBCk/T=", jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringOpSegement0, jSONPath_StringOpSegement0, true);
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      boolean boolean0 = JSONPath.contains((Object) null, "G'T=%Hrl~s|Mo)b .pF;");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("com.alibaba.fastjson.JSONPath$MultiPropertySegment", 715L, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("end must greater than or equals start. start ");
      boolean boolean1 = jSONPath_IntOpSegement0.apply(jSONPath0, "com.alibaba.fastjson.JSONPath$MultiPropertySegment", jSONPath_Operator0, jSONPath_Operator0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("-99", (-1L), jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntOpSegement0, jSONPath_IntOpSegement0, true);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("-99", serializeConfig0, parserConfig0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      jSONPath_FilterGroup0.apply(jSONPath0, jSONPath0, (Object) null, jSONPath_SizeSegment0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("o>He!~jAm^@k-");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('E');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'E, but 'o'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("U@Wz/ZH,SE>");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("U@Wz/ZH,SE>", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, "U@Wz/ZH,SE>", "U@Wz/ZH,SE>", serializeConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      JSONPath.JSONPathParser.isDigitFirst('8');
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = JSONPath.compile("nin");
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath0, "nin");
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Long[] longArray0 = new Long[6];
      Long long0 = new Long((-1916L));
      longArray0[0] = long0;
      Long long1 = new Long((-1916L));
      longArray0[1] = long1;
      Long long2 = new Long((-1580386065683472715L));
      longArray0[2] = long2;
      Long long3 = new Long((long) longArray0[0]);
      longArray0[3] = long3;
      Long long4 = new Long((long) longArray0[2]);
      longArray0[4] = long4;
      Long long5 = new Long((-1090L));
      longArray0[5] = long5;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("=rK)ji&-0!6Q+`", longArray0, false);
      SerializeConfig serializeConfig0 = new SerializeConfig(46);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("=rK)ji&-0!6Q+`", serializeConfig0, parserConfig0);
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = null;
      try {
        jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MultiPropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("5$rOIY<pFy[LP*s|~");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLIntegrityConstraintViolationException0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("N*mL '<9>#x%B<>_P", (Long[]) null, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntObjInSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "5$rOIY<pFy[LP*s|~", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      String string0 = null;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null, serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      SQLTransientException sQLTransientException0 = new SQLTransientException("MI2C=", "{\"x\":\"hello\",\"z\":true,\"a\":[],\"b\":{}}", 10, (Throwable) null);
      sQLTransientException0.getSuppressed();
      sQLTransientException0.setNextException((SQLException) null);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath.JSONPathParser.isDigitFirst('N');
      SerializeConfig serializeConfig0 = new SerializeConfig();
      PropertyNamingStrategy propertyNamingStrategy0 = serializeConfig0.propertyNamingStrategy;
      JSONPath.eq((Object) null, (Object) null);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("MI2C=");
      jSONPath_JSONPathParser0.readSegement();
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("30).S", (String) null, "MI2C=", (String[]) null, true);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("Yjb~E'nj<z.NO$y");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_NullSegement0);
      assertSame(jSONPath_Filter0, jSONPath_NullSegement0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("end must greater than or equals start. start ", "", "end must greater than or equals start. start ", (String[]) null, true);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      JSONPath.compile("com.alibaba.fastjson.JSONPath$IntOpSegement");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("kcOtWFb5]");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      boolean boolean0 = JSONPath.eq(jSONPath0, jSONPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = JSONPath.compile("nin");
      jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath0, "nin");
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("org.joda.time.DateTimeZone", (String) null, "fastjson.parser.safeMode", (String[]) null, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      Double double0 = new Double(989);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("in} 0'r90RBXB");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      String string0 = null;
      String string1 = "prg)";
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "prg)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("t", "and");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      String string0 = "5(0'?X%ouc";
      JSONPath.compile("5(0'?X%ouc");
      int int0 = 50;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("5(0'?X%ouc");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 5(0'?X%ouc
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      JSONPath.read((String) null, "prg)");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "prg)";
      stringArray0[1] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":99}";
      stringArray0[2] = "prg)";
      stringArray0[3] = null;
      stringArray0[4] = "Hz[KW&";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("writeNormal", stringArray0, false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":99}");
      jSONPath_JSONPathParser0.filterRest(jSONPath_StringInSegement0);
      int int0 = (-32);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fu.rYb@ poz?", "ASMSerializer_", (-32));
      // Undeclared exception!
      try { 
        sQLIntegrityConstraintViolationException0.forEach((Consumer<? super Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      jSONPath1.isRef();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeSupport");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("/stackTrace/5", "/stackTrace/5", false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Long long0 = new Long(1383L);
      boolean boolean0 = JSONPath.eqNotNull(long0, long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      serializeConfig0.clearSerializers();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("keySet", serializeConfig0, parserConfig0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "fastjson.parser.autoTypeSupport", (-2730));
      SQLTransientException sQLTransientException1 = new SQLTransientException("fastjson.parser.autoTypeAccept", sQLTransientException0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("fastjson.parser.autoTypeSupport", sQLTransientException1, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_ValueSegment0, jSONPath_ValueSegment0, false);
      String string0 = "(Ljava/lang/Class;)";
      JSONPath.compile("(Ljava/lang/Class;)");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("keySet", (String) null, (-2730));
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "LIKE");
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, batchUpdateException0, jSONPath_ValueSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("Y");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("in", serializeConfig0, parserConfig0);
      BigInteger bigInteger0 = BigInteger.ONE;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("fastjson.parser.autoTypeAccept", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("illegal json : ", "in", map0, sQLClientInfoException0);
      jSONPath_NotNullSegement0.apply(jSONPath0, serializeConfig0, bigInteger0, sQLClientInfoException1);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("]GZENT9=2uIP/)", "matchStat", " h7!-ds7W}_[Xr", (String[]) null, true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.safeMode");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement(":YK:~|%;eD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"YK\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      String string0 = "country";
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("country");
      String string1 = ":YK:~|%C;eD";
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement(":YK:~|%C;eD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"YK\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/6", serializeConfig0, parserConfig0);
      jSONPath0.init();
      assertEquals("/stackTrace/6", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("'y.:e#aKU1g%", "KbUNn,qz(1@~q]", "MapSortField", (String[]) null, true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'s*,s*'");
      jSONPath_JSONPathParser0.parseArrayAccess(false);
      jSONPath_JSONPathParser0.buildArraySegement("'s*,s*'");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("SkipTransientField");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("'s*,s*'");
      jSONPath_JSONPathParser1.filterRest(jSONPath_MatchSegement0);
      JSONPath jSONPath0 = JSONPath.compile("WriteNonStringValueAsString");
      jSONPath0.init();
      jSONPath_JSONPathParser0.explain();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 's*,s*'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("5v;<");
      jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      boolean boolean0 = JSONPath.eq("G'T=%Hrl~s|Mo)b .pF;", jSONPath_JSONPathParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("#`81;7;u{y:R");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"#`81;7;u{y\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("hh9]f");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : hh9]f
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      String string0 = "99";
      JSONPath jSONPath0 = new JSONPath("99");
      SQLWarning sQLWarning0 = new SQLWarning("99", "99");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 99
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath.size((Object) sQLIntegrityConstraintViolationException0, "KR");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("{\"fruit\":-99,\"wmv/'JZu|\":\"\",\"/stackTrace/0\":-99,\"autoTypeSupport\":true,\"'/3|Bzq!l&[Nyk\":null,\"com.alibaba.fastjson.asm.Label\":null,\"ol\":-99,\"\u0000\":[],\"NOT_IN\":{}}", "KR", true);
      JSONPath jSONPath0 = new JSONPath("KR");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("{\"fruit\":-99,\"wmv/'JZu|\":\"\",\"/stackTrace/0\":-99,\"autoTypeSupport\":true,\"'/3|Bzq!l&[Nyk\":null,\"com.alibaba.fastjson.asm.Label\":null,\"ol\":-99,\"\u0000\":[],\"NOT_IN\":{}}", false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("|", "Ci=~%>s@2b2lwOdgZWv", (-1));
      boolean boolean1 = jSONPath_RlikeSegement0.apply(jSONPath0, "{\"fruit\":-99,\"wmv/'JZu|\":\"\",\"/stackTrace/0\":-99,\"autoTypeSupport\":true,\"'/3|Bzq!l&[Nyk\":null,\"com.alibaba.fastjson.asm.Label\":null,\"ol\":-99,\"\u0000\":[],\"NOT_IN\":{}}", jSONPath_PropertySegment0, sQLIntegrityConstraintViolationException1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value2\":false,\"number\":\"1\"}");
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("2", serializeConfig0, parserConfig0);
      Short short0 = new Short((short)38);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("hp0j_Ac0", "`C\"[27bU_>8*Bb,", hashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLClientInfoException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.safeMode", "fastjson.parser.autoTypeAccept", sQLInvalidAuthorizationSpecException0);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("", "2", false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[5#7?", sQLClientInfoException0);
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, "2", short0, sQLIntegrityConstraintViolationException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("U@Wz/ZH,SE>");
      JSONPath.compile(",#Z81P9(]}v4M63");
      String[] stringArray0 = new String[0];
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("-99");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("-99", false);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("-99");
      Throwable throwable0 = null;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      int[] intArray0 = new int[3];
      intArray0[0] = 37;
      intArray0[1] = 37;
      intArray0[2] = 37;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      String string0 = "xyw`^Mh+7";
      int int0 = (-2018);
      SerializeConfig serializeConfig0 = null;
      try {
        serializeConfig0 = new SerializeConfig((-2018));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IdentityHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      JSONPath.read((String) null, "prg)");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("prg)", sQLIntegrityConstraintViolationException0);
      Stack<Object> stack0 = new Stack<Object>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("prg)", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(aSMDeserializerFactory0, "fastjson.parser.safeMode", stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Double double0 = new Double((-1.0));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig.getGlobalInstance();
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("r");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.safeMode");
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, "r", jSONPath1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      String string0 = "";
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[]^hysz:,1[");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JSONPath.Operator.values();
      JSONPath jSONPath1 = JSONPath.compile("/stackTrace/5");
      Set<?> set0 = jSONPath1.evalKeySet(jSONPath0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      String string0 = null;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = null;
      try {
        jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement((String) null, 193.382987337, jSONPath_Operator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("com.alibaba.fastjson.JSONPath$MultiIndexSegment", Double.NaN, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("rlike");
      jSONPath0.evalKeySet("rlike");
      MockDate mockDate0 = new MockDate();
      SQLDataException sQLDataException0 = new SQLDataException("rlike", "|>'@Z*Oq;e,Vc/Q>0");
      jSONPath_DoubleOpSegement0.apply(jSONPath0, jSONPath_Operator0, mockDate0, sQLDataException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("|>'@Z*Oq;e,Vc/Q>0");
      jSONPath0.deepSet("?", "rlike", (-1081L), sQLFeatureNotSupportedException0);
      assertEquals("rlike", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("h#)'T>n!", 1084.03866, jSONPath_Operator0);
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":null,\"number\":\"1\"}";
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":null,\"number\":\"1\"}");
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataException0.printStackTrace();
      jSONPath_DoubleOpSegement0.apply(jSONPath0, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":null,\"number\":\"1\"}", sQLDataException0, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":null,\"number\":\"1\"}");
      String string1 = "can't create non-static inner class instance.";
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NOT_LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("can't create non-static inner class instance.", "can't create non-static inner class instance.", jSONPath_Operator1);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath1 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":null,\"number\":\"1\"}", serializeConfig0, parserConfig0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      jSONPath1.evalKeySet(jSONPath_Operator0);
      Class<Long> class0 = Long.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class0, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      String string0 = "fastjson.parser.autoTypeAccept";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeAccept");
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        JSONPath.set((Object) "fastjson.parser.autoTypeAccept", "fastjson.parser.autoTypeAccept", (Object) jSONPath0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny.internal");
      UUID uUID0 = MockUUID.randomUUID();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionException0.getStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) uUID0, (Object) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      JSONPath.isInt(class0);
      JSONPath jSONPath0 = JSONPath.compile("REG_MATCH");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("C`:NHb:Yc");
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      charArray0[1] = 'v';
      charArray0[2] = '9';
      charArray0[3] = 'D';
      charArray0[4] = 'L';
      charArray0[5] = '*';
      charArray0[6] = '+';
      charArray0[7] = '/';
      charArray0[8] = 't';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) class0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      Locale locale0 = Locale.TAIWAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      JSONPath.set((Object) mockGregorianCalendar0, "(I)Ljava/lang/Integer;", (Object) sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[99],\"b\":{}}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[99],\"b\":{}}", jSONPath_Operator0);
      String string0 = "$ {r/olBw7%]U'";
      SerializeConfig serializeConfig0 = null;
      try {
        serializeConfig0 = new SerializeConfig((-900));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IdentityHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("", "true", jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("=loMg");
      assertEquals("=loMg", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("99");
      SQLWarning sQLWarning0 = new SQLWarning();
      DataTruncation dataTruncation0 = new DataTruncation(8, true, true, 8, 0, sQLWarning0);
      dataTruncation0.getNextWarning();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = (SQLIntegrityConstraintViolationException)jSONPath0.getArrayItem(sQLIntegrityConstraintViolationException0, 0);
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("c1~Xxd.Q");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      Integer integer0 = new Integer((-1424));
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal1, integer0);
      assertFalse(boolean0);
      
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("OPk`QT");
      long long0 = JSONPath.SIZE;
      boolean boolean1 = JSONPath.eqNotNull(bigDecimal0, bigDecimal1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Long long0 = new Long(1006L);
      BigDecimal bigDecimal0 = new BigDecimal(882L);
      boolean boolean0 = JSONPath.eqNotNull(long0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(6114875255374330593L);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.parserAllFieldToCache(class0, hashMap0);
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":-99}", serializeConfig0, parserConfig0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      long long0 = JSONPath.SIZE;
      JSONPath.eqNotNull(bigDecimal0, 5614464919154503228L);
      serializeConfig0.setTypeKey("&J (4");
      Class<JSONPath.PropertySegment> class1 = JSONPath.PropertySegment.class;
      jSONPath0.getJavaBeanSerializer(class1);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("WU_EI,6FiB~`kKr \"t");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-1014497654951707614L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("at`@");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-2905L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("wj'(*");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.containsValue((Object) jSONPath_Operator0, "wj'(*", (Object) jSONPath0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      boolean boolean0 = false;
      ParserConfig parserConfig0 = new ParserConfig(boolean0);
      ParserConfig parserConfig1 = new ParserConfig();
      JSONPath jSONPath1 = new JSONPath(parserConfig0.SAFE_MODE_PROPERTY, serializeConfig0, parserConfig1);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(parserConfig0.AUTOTYPE_ACCEPT);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      String string0 = "#`81;7;u{y:R";
      JSONPath jSONPath0 = new JSONPath("#`81;7;u{y:R");
      String string1 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":[]}";
      Integer integer0 = Integer.getInteger("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":[]}");
      String string2 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}";
      JSONPath.containsValue((Object) jSONPath0, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", (Object) null);
      jSONPath0.evalKeySet(integer0);
      jSONPath0.evalKeySet(string0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string2;
      stringArray0[3] = string1;
      stringArray0[4] = string1;
      stringArray0[5] = string2;
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      String string3 = null;
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) jSONPath_MultiPropertySegment0, string3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      String string0 = "{\"x\":\"hello\",\"y\":false,\"z\":true,\"a\":[],\"b\":{}}";
      String string1 = null;
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = null;
      try {
        jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("{\"x\":\"hello\",\"y\":false,\"z\":true,\"a\":[],\"b\":{}}", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("3>5y=^K'wo4.8h");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("3>5y=^K'wo4.8h", "3>5y=^K'wo4.8h", false);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("3>5y=^K'wo4.8h");
      JSONPath.compile("*");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      String string0 = "@hcvulv9BxpdI";
      SQLTransientException sQLTransientException0 = new SQLTransientException("@hcvulv9BxpdI");
      JSONPath.contains((Object) sQLTransientException0, "@hcvulv9BxpdI");
      SQLException sQLException0 = null;
      sQLTransientException0.setNextException(sQLException0);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      char char0 = 'N';
      JSONPath.JSONPathParser.isDigitFirst(char0);
      JSONPath.eq(sQLTransientException0, jSONPath_MaxSegment0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(string0);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readSegement();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. @hcvulv9BxpdI
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Short short0 = new Short((short) (-1683));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      JSONPath.contains((Object) short0, "gV+'lSQ_vHe%C/");
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("k./#o]XQ$^V");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("NotWriteDefaultValue", "k./#o]XQ$^V");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(",", sQLTimeoutException0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
      try { 
        JSONPath.compare("k./#o]XQ$^V", sQLTimeoutException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("wj'(*", "{Sl48?`");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("wj'(*", sQLDataException0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SQLDataException sQLDataException1 = new SQLDataException("wj'(*");
      Double double0 = new Double((-4438775680185074140L));
      // Undeclared exception!
      try { 
        JSONPath.compare(double0, jSONPath_WildCardSegment0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath$WildCardSegment cannot be cast to java.lang.Double
         //
         verifyException("java.lang.Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Object object0 = null;
      String string0 = "'/3|Bzq!l&[Nyk";
      JSONPath.size((Object) null, "'/3|Bzq!l&[Nyk");
      JSONPath jSONPath0 = JSONPath.compile("'/3|Bzq!l&[Nyk");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "'/3|Bzq!l&[Nyk");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      JSONPath.read((String) null, "prg)");
      SQLException sQLException0 = new SQLException("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":99}", "(`2B", 0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 0, sQLException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("prg)", sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        JSONPath.compare(sQLRecoverableException0, "prg)");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLRecoverableException cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("", (-1580386065683472715L), jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntOpSegement0, jSONPath_IntOpSegement0, true);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) "", "");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      JSONPath.JSONPathParser.isDigitFirst('&');
      long long0 = JSONPath.SIZE;
      Integer integer0 = new Integer((-1424));
      JSONPath.eqNotNull(integer0, integer0);
      String string0 = "OPk`QT";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("like");
      jSONPath_JSONPathParser0.readOp();
      JSONPath.JSONPathParser.isDigitFirst('<');
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("OPk`QT");
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("[char");
      jSONPath_JSONPathParser1.filterRest(jSONPath_NullSegement0);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      String string0 = "J51[D9";
      JSONPath jSONPath0 = JSONPath.compile("J51[D9");
      Object object0 = null;
      String string1 = "";
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      jSONPath0.deepScan((Object) null, "", arrayList0);
      jSONPath0.init();
      jSONPath0.evalSize(object0);
      jSONPath0.containsValue((Object) string0, (Object) string1);
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(string0, string1, arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path J51[D9, segement 
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$RlikeSegement");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("t2$}Y ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. t2$}Y 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[]^hysz:,1[");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      ParserConfig.global = parserConfig0;
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) "[]^hysz:,1[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      String string0 = "GE";
      String string1 = "&$WI,!W$.\\a/qz?8d|";
      Vector<Object> vector0 = new Vector<Object>();
      boolean boolean0 = false;
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("&$WI,!W$.a/qz?8d|");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"&$WI\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig.getGlobalInstance();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", (Throwable) null);
      Stack<Object> stack0 = new Stack<Object>();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$KeySetSegment");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((Throwable) null);
      jSONPath0.deepScan(sQLTimeoutException0, "fastjson.parser.deny.internal", stack0);
      DataTruncation dataTruncation0 = new DataTruncation((-1555), false, false, 62, (-1555), (Throwable) null);
      Set<?> set0 = jSONPath0.keySet((Object) dataTruncation0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      String string0 = "$U";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$U");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      String string0 = "[]";
      JSONPath jSONPath0 = JSONPath.compile("[]");
      jSONPath0.keySet((Object) "[]");
      String string1 = "";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = null;
      try {
        jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(string1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[]^hysz:,1[");
      JSONScanner jSONScanner0 = new JSONScanner("[]^hysz:,1[");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath jSONPath0 = JSONPath.compile("j(Nf}oJ-*;,gX");
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, "j(Nf}oJ-*;,gX", "j(Nf}oJ-*;,gX");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":true}");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":true}", false);
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, jSONPath_PropertySegment0, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("5$rOIY<pFy[LP*s|~");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLIntegrityConstraintViolationException0);
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(sQLInvalidAuthorizationSpecException0, "", stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path 5$rOIY<pFy[LP*s|~, segement 
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("astjson");
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan("astjson", "_", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path astjson, segement _
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      String string0 = "5$rOIY<pFy[LP*s|~";
      JSONPath jSONPath0 = new JSONPath("5$rOIY<pFy[LP*s|~");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLIntegrityConstraintViolationException0);
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(sQLInvalidAuthorizationSpecException0, "", stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path 5$rOIY<pFy[LP*s|~, segement 
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      String string0 = "{\"x\":\"hello\",\"y\":[],\"z\":true,\"a\":[],\"b\":{}}";
      JSONPath jSONPath0 = JSONPath.compile("{\"x\":\"hello\",\"y\":[],\"z\":true,\"a\":[],\"b\":{}}");
      JSONPath jSONPath1 = JSONPath.compile("{\"x\":\"hello\",\"y\":[],\"z\":true,\"a\":[],\"b\":{}}");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("{\"x\":\"hello\",\"y\":[],\"z\":true,\"a\":[],\"b\":{}}");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("{\"x\":\"hello\",\"y\":[],\"z\":true,\"a\":[],\"b\":{}}", sQLFeatureNotSupportedException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLFeatureNotSupportedException1);
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath1, sQLInvalidAuthorizationSpecException0, (-2));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLInvalidAuthorizationSpecException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      // Undeclared exception!
      try { 
        JSONPath.compare(uUID0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("m:1qV?M", (-214L), jSONPath_Operator0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("#AiDIuFUM", serializeConfig0, parserConfig0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1462));
      UUID uUID0 = MockUUID.fromString("fastjson.parser.safeMode");
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.eval(jSONPath0, "#AiDIuFUM", uUID0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.GT;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("com.alibaba.fastjson.JSONPath$MinSegment", (-4080L), jSONPath_Operator1);
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[1];
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      String string0 = "/stackTrace/5";
      JSONPath jSONPath0 = new JSONPath("!BbYvQ>(H>w(~(");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) "/stackTrace/5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. !BbYvQ>(H>w(~(
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONPath jSONPath0 = JSONPath.compile("n/<6UOzS7rS^ea");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
      
      JSONPath jSONPath1 = JSONPath.compile("n/<6UOzS7rS^ea");
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath1);
      assertEquals(1, map0.size());
      
      boolean boolean1 = jSONPath0.remove((Object) null);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("F8Wn;", 1589L, jSONPath_Operator0);
      boolean boolean2 = jSONPath_IntOpSegement0.apply(jSONPath1, "F8Wn;", "F8Wn;", (Object) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/5");
      jSONPath0.contains((Object) "/stackTrace/5");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_WildCardSegment0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      String string0 = "5(0'?X%ouc";
      JSONPath jSONPath0 = JSONPath.compile("5(0'?X%ouc");
      jSONPath0.contains((Object) "5(0'?X%ouc");
      String[] stringArray0 = null;
      boolean boolean0 = true;
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement(string0, stringArray0, boolean0);
      double double0 = 0.0;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement(string0, double0, jSONPath_Operator0);
      boolean boolean1 = false;
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringInSegement0, jSONPath_DoubleOpSegement0, boolean1);
      JSONPath.contains((Object) jSONPath_StringInSegement0, string0);
      Object object0 = jSONPath0.eval((Object) jSONPath_StringInSegement0);
      String string1 = "jsonpath can not be null";
      String string2 = "/$gpx\\S$";
      MockThrowable mockThrowable0 = new MockThrowable(string2);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(string0, string1, mockThrowable0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransactionRollbackException0.forEach(consumer0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      String string3 = "Ta+'@Zrw8";
      int[] intArray0 = new int[2];
      int int0 = (-1037);
      intArray0[0] = int0;
      int int1 = (-30);
      intArray0[1] = int1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(string3, string2, intArray0, sQLTransactionRollbackException0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONPath_DoubleOpSegement0.apply(jSONPath0, jSONPath_SizeSegment0, batchUpdateException0, bigInteger0);
      jSONPath_DoubleOpSegement0.apply(jSONPath0, jSONPath_FilterGroup0, object0, sQLTransactionRollbackException0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        jSONPath_FilterGroup0.apply(jSONPath0, propertyNamingStrategy0, jSONPath_StringInSegement0, jSONPath_DoubleOpSegement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$StringInSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("Y");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("tf41:})v9Y", stringArray0);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      String[] stringArray0 = new String[1];
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":\"\",\"/stackTrace/0\":[false],\"value\":true,\"'/3|Bzq!l&[Nyk\":null,\"com.alibaba.fastjson.asm.Label\":null,\"ol\":-99}");
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      Byte byte0 = new Byte((byte)72);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "type not match. ";
      stringArray0[2] = "";
      stringArray0[3] = "com.alibaba.fastjson.JSONPath$NotNullSegement";
      stringArray0[4] = "";
      stringArray0[5] = "GRr1c#v&[XIlh4";
      stringArray0[6] = "tf41:})v9Y";
      stringArray0[7] = "jsonpath can not be null";
      stringArray0[8] = "{\"x\":\"hello\",\"y\":[],\"z\":true,\"a\":[],\"b\":{}}";
      JSONPath.reserveToArray(byte0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      String[] stringArray0 = new String[0];
      JSONPath.reserveToArray("tf41:})v9Y", stringArray0);
      boolean boolean0 = JSONPath.eqNotNull(989, 3089);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath(" FC3B,39mW{<xu^}", serializeConfig0, parserConfig0);
      jSONPath0.arrayAdd((Object) " FC3B,39mW{<xu^}", (Object[]) null);
      JSONPath jSONPath1 = new JSONPath("not", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath1, "not", 64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      String string0 = "{\"fruit\":[],\"size\":\"\",\"/stackTrace/0\":{},\"value\":true,\"checkValue\":null,\"number\":null,\"ol\":-99}";
      String[] stringArray0 = new String[1];
      JSONPath.arrayAdd((Object) "{\"fruit\":[],\"size\":\"\",\"/stackTrace/0\":{},\"value\":true,\"checkValue\":null,\"number\":null,\"ol\":-99}", "{\"fruit\":[],\"size\":\"\",\"/stackTrace/0\":{},\"value\":true,\"checkValue\":null,\"number\":null,\"ol\":-99}", (Object[]) stringArray0);
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(string0);
      String string1 = "]]o,dnUkM_I.";
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement(string1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"]]o\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("wj'(*", "{Sl48?`");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("wj'(*", sQLDataException0);
      SerializeConfig serializeConfig0 = new SerializeConfig(55);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Double double0 = new Double(43.0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("TU,KEN%{!V'wJ", false);
      Float float0 = Float.valueOf((-251.8549F));
      boolean boolean0 = JSONPath.eq(float0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("?JYlQJ", "?JYlQJ", 1482);
      boolean boolean0 = JSONPath.eq(sQLFeatureNotSupportedException0, "?JYlQJ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      String string0 = "99";
      JSONPath jSONPath0 = new JSONPath("99");
      SQLWarning sQLWarning0 = new SQLWarning("99", "99");
      JSONPath.eq("99", sQLWarning0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("99");
      jSONPath0.getPropertyValue(sQLWarning0, "99", 0L);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) sQLTransactionRollbackException0;
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) sQLTransactionRollbackException0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 99
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.register((Module) null);
      JSONPath jSONPath0 = JSONPath.compile("true");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("e8RT", (-199L), (-199L), false);
      JSONPath jSONPath0 = new JSONPath("L");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue("e8RT", "e8RT", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":true,\"value\":true,\"value2\":false,\"number\":\"1\"}");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":true,\"value\":true,\"value2\":false,\"number\":\"1\"}", 0);
      JSONPath jSONPath1 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":true,\"value\":true,\"value2\":false,\"number\":\"1\"}");
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Short short0 = new Short((short)3462);
      jSONPath_MultiIndexSegment0.eval(jSONPath1, sQLTransactionRollbackException0, jSONReaderScanner0);
      jSONPath0.remove((Object) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("c", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":true,\"value\":true,\"value2\":false,\"number\":\"1\"}", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      Short short1 = new Short((short)92);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "{\"x\":\"hello\",\"L\":true,\"a\":[],\"b\":{\"x\":\"a string\",\"xx\":99}}", 284, sQLTransactionRollbackException0);
      JSONPath.size((Object) short0, "i_Ysmk");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        jSONPath0.deepSet("i_Ysmk", "i_Ysmk", (short)92, sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("v/$");
      jSONPath0.remove((Object) "v/$");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      Collection<Object> collection0 = jSONPath0.getPropertyValues(jSONPath_SizeSegment0);
      assertFalse(collection0.contains("v/$"));
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      String string0 = "keySet";
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      serializeConfig0.clearSerializers();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("keySet", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "keySet");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("OrderedField");
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      String string0 = null;
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("3>5y=^K'wo4.8h");
      JSONPath.compile("3>5y=^K'wo4.8h");
      Integer integer0 = new Integer((-1434));
      assertEquals((-1434), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "NOT_LIKE";
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"wmv/'JZu|\":\"\",\"/stackTrace/0\":[false],\"value\":true,\"'/3|Bzq!l&[Nyk\":null,\"com.alibaba.fastjson.asm.Label\":null,\"ol\":-99,\"x\":[],\"xx\":-99}");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}";
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "NOT_LIKE";
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"wmv/'JZu|\":\"\",\"/stackTrace/0\":[false],\"value\":true,\"'/3|Bzq!l&[Nyk\":null,\"com.alibaba.fastjson.asm.Label\":null,\"ol\":-99,\"x\":[],\"xx\":-99}");
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath0, stringArray0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToObject(javaBeanDeserializer0, stringArray0);
      assertSame(javaBeanDeserializer0, object0);
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny.internal");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      JSONPath.compile("/stackTrace/5");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(57, 43, 57);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("nin");
      jSONPath0.eval((Object) "nin");
      jSONPath0.init();
      assertEquals("nin", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("toJdbc", jSONPath_MultiPropertySegment0, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile(". H)6");
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, jSONPath_MultiPropertySegment0, ". H)6", ". H)6");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      String string0 = "q\\g*'";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("qg*'");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but 'q'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("unclosed.str.lit");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but 'u'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("!0R.whJ?'b*=M:9%4x", (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      String string0 = null;
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment((String) null, (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":[],\"a\":[],\"b\":{}}", serializeConfig0, parserConfig0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      int int0 = JSONPath.size((Object) null, "'/3|Bzq!l&[Nyk");
      assertEquals((-1), int0);
      
      JSONPath jSONPath0 = new JSONPath("_");
      JSONScanner jSONScanner0 = new JSONScanner("stackTrace");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      String string0 = "L";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("L");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.getNextChar();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = null;
      try {
        jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement((String) null, 402L, 402L, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("=(% `P.  r5*");
      Class<Short> class0 = Short.class;
      jSONPath0.getJavaBeanSerializer(class0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath jSONPath1 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":-99}}");
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath1, "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":-99}}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":-99}}");
      assertEquals(2, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath.compile("net.sf.cglib.proxy.Fa|ory");
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 326;
      intArray0[1] = (-1982);
      intArray0[2] = (-4310);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      // Undeclared exception!
      try { 
        jSONPath_MultiIndexSegment0.eval((JSONPath) null, (Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MultiIndexSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      int[] intArray0 = new int[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = JSONPath.compile("nin");
      jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath0, "nin");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(".");
      jSONPath_JSONPathParser0.explain();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. .
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":-99,\"/stackTrace/0\":{},\"isEmpty\":true,\"value2\":null,\"number\":null}");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1969125659), (-1969125659), (-1969125659));
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("FW;PG");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (-5808554674130653198L);
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("/stackTrace/8", longArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/8");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("LE");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      Double double0 = new Double(1000.0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("2");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"fruit\":\"AllowSingleQuotes\",\"com.alibaba.fastjson.JSONPath$FilterGroup\":99,\"color\":\"Red\",\"value2\":false,\"number\":false,\"x\":false}");
      jSONPath_JSONPathParser0.readValue();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. \"fruit\":\"AllowSingleQuotes\",\"com.alibaba.fastjson.JSONPath$FilterGroup\":99,\"color\":\"Red\",\"value2\":false,\"number\":false,\"x\":false}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      String string0 = "&p~0Ge^<";
      long[] longArray0 = new long[2];
      longArray0[0] = (-514L);
      longArray0[1] = 0L;
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("&p~0Ge^<", longArray0, true);
      String string1 = "not";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      jSONPath_JSONPathParser0.readName();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{}");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("L", "O", (-3312));
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":true,\"value\":true,\"value2\":false,\"number\":\"1\"}");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":true,\"value\":true,\"value2\":false,\"number\":\"1\"}", 0);
      char[] charArray0 = new char[6];
      charArray0[0] = '0';
      charArray0[1] = 'Z';
      charArray0[2] = '6';
      charArray0[3] = 'C';
      charArray0[4] = 'W';
      charArray0[5] = 'C';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      String string0 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[true],\"b\":{}}";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[true],\"b\":{}}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readSegement();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[true],\"b\":{}}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.GT;
      JSONPath.Operator jSONPath_Operator2 = JSONPath.Operator.GT;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("com.alibaba.fastjson.JSONPath$MinSegment", (-4080L), jSONPath_Operator2);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntOpSegement0, jSONPath_IntOpSegement0, false);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("bKuH^", serializeConfig0, parserConfig0);
      JSONPath.remove((Object) jSONPath0, "fastjson.parser.autoTypeAccept");
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath0, jSONPath_Operator1, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      String string0 = "L";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("L");
      jSONPath_JSONPathParser0.explain();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.getNextChar();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("astjson");
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{");
      jSONPath_JSONPathParser0.explain();
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("L7R7N*_- Ht#");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "NOT_LIKE";
      stringArray0[1] = "NOT_LIKE";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.compile("'/3|Bzq!l&[Nyk");
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = JSONPath.contains((Object) bigInteger0, "$VALUES");
      assertFalse(boolean0);
      
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("'/3|Bzq!l&[Nyk", (-999L), 2894L, true);
      int[] intArray0 = new int[2];
      intArray0[0] = 4877;
      intArray0[1] = 48;
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath_MultiIndexSegment0, stringArray0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("@e>@g3hZD\"\"(*gqz9A7");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readSegement();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. @e>@g3hZD\"\"(*gqz9A7
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      JSONPath.JSONPathParser.isDigitFirst('&');
      JSONPath jSONPath0 = new JSONPath("like");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      propertyNamingStrategy0.translate("like");
      jSONPath0.evalSize(propertyNamingStrategy0);
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("nin");
      jSONPath0.init();
      assertEquals("nin", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      Long long0 = new Long(1006L);
      BigDecimal bigDecimal0 = new BigDecimal(1006L);
      boolean boolean0 = JSONPath.eqNotNull(long0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "astjson";
      stringArray0[1] = " FC3B,39mW{<xu^}";
      SerializeConfig.getGlobalInstance();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      long long0 = JSONPath.SIZE;
      Double double0 = new Double(5614464919154503228L);
      Byte byte0 = new Byte((byte) (-30));
      JSONPath.eqNotNull(bigDecimal0, byte0);
      SerializeConfig serializeConfig1 = null;
      try {
        serializeConfig1 = new SerializeConfig((-1550));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IdentityHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      Long long0 = new Long((-1014497654951707614L));
      boolean boolean0 = JSONPath.eqNotNull(long0, long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      JSONPath.isInt(class0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "kHXA&~^(E`p<DY";
      stringArray0[1] = "sq?Ui";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = "kHXA&~^(E`p<DY";
      stringArray0[5] = "kHXA&~^(E`p<DY";
      stringArray0[6] = null;
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement((String) null, "kHXA&~^(E`p<DY", (String) null, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "NOT_LIKE";
      JSONPath.compile("{\"fruit\":[],\"wmv/'JZu|\":\"\",\"/stackTrace/0\":[[]],\"autoTypeSupport\":true,\"'/3|Bzq!l&[Nyk\":null,\"com.alibaba.fastjson.asm.Label\":null,\"ol\":-99,\"x\":[],\"NOT_IN\":{}}");
      int int0 = JSONPath.size((Object) "{\"fruit\":[],\"wmv/'JZu|\":\"\",\"/stackTrace/0\":[[]],\"autoTypeSupport\":true,\"'/3|Bzq!l&[Nyk\":null,\"com.alibaba.fastjson.asm.Label\":null,\"ol\":-99,\"x\":[],\"NOT_IN\":{}}", "NOT_LIKE");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/8");
      Set<?> set0 = jSONPath0.keySet((Object) "/stackTrace/8");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      String string0 = ", segement ";
      String[] stringArray0 = new String[5];
      stringArray0[0] = ", segement ";
      stringArray0[2] = ", segement ";
      stringArray0[3] = ", segement ";
      stringArray0[4] = ", segement ";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement(", segement ", stringArray0, true);
      String string1 = "com.alibaba.fastjson.JSONReader";
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONReader");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("y'v@w");
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("{YHN^JW! )v", (Throwable) null);
      jSONPath_StringInSegement0.apply(jSONPath0, (Object) null, ", segement ", sQLFeatureNotSupportedException0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      jSONPath_StringInSegement0.apply(jSONPath0, mockGregorianCalendar0, stringArray0[1], ", segement ");
      String string2 = "\\K0Q(Ie/O^vx;l]&SF";
      String string3 = "JSONPath$IntOpSegement";
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      String string0 = "{\"x\":\"hello\",\"y\":true,\"z\":true,\"a\":[],\"b\":{}}";
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("{\"x\":\"hello\",\"y\":true,\"z\":true,\"a\":[],\"b\":{}}");
      String string1 = null;
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2499), (-2499), (-2492), (-2499), (-2499), (-2492));
      Object object0 = JSONPath.eval((Object) mockGregorianCalendar0, "nin");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("KR");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement(")dqjgS>~%wC@2;!ofv&");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      jSONPath_NotNullSegement0.apply(jSONPath0, jSONPath_FilterSegment0, "KR", ")dqjgS>~%wC@2;!ofv&");
      JSONPath.FilterSegment jSONPath_FilterSegment1 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      assertFalse(jSONPath_FilterSegment1.equals((Object)jSONPath_FilterSegment0));
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("L");
      jSONPath_JSONPathParser0.explain();
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment(":brfeHG3Vl", "L", false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_ValueSegment0, jSONPath_ValueSegment0, false);
      JSONPath jSONPath0 = JSONPath.compile("L");
      Set<?> set0 = jSONPath0.evalKeySet("L");
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      int int0 = jSONPath0.size((Object) parserConfig0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      Long long0 = new Long(1006L);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Or";
      stringArray0[1] = "Or";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("Or", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath("Or");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Byte byte0 = new Byte((byte) (-105));
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "Or", byte0, long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("wRu:&2.]Lm", stringArray0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      JSONPath jSONPath0 = JSONPath.compile("wRu:&2.]Lm");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, "wRu:&2.]Lm", jSONPath0);
      assertFalse(boolean0);
      
      Float float0 = new Float(0.0F);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "wRu:&2.]Lm", float0);
      assertNotNull(object0);
      assertEquals(0.0F, object0);
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      String string0 = "1_";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "1_";
      stringArray0[1] = "1_";
      String string1 = "";
      stringArray0[2] = "";
      boolean boolean0 = true;
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("1_", stringArray0, true);
      Byte byte0 = new Byte((byte)18);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      // Undeclared exception!
      try { 
        jSONPath_StringInSegement0.apply((JSONPath) null, byte0, (Object) null, jSONPath_Operator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$StringInSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      String string0 = "U@W\\z/ZH,SE>";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("U@Wz/ZH,SE>", (String[]) null, true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("U@Wz/ZH,SE>");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/uRLs");
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem("/uRLs", 773);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      JSONPath.compile("{\"charAt\":99,\"color\":99,\"value2\":\"a string\",\"number\":\"1\"}");
      Double double0 = new Double((-1.0));
      ParserConfig.getGlobalInstance();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      String string0 = "{\"fruit\":\"Apple\",\"size\":{},\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}";
      JSONPath jSONPath0 = JSONPath.compile("{\"fruit\":\"Apple\",\"size\":{},\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      String string1 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[]}";
      jSONPath0.setPropertyValue("{\"fruit\":\"Apple\",\"size\":{},\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[]}", 1L, (Object) null);
      PipedReader pipedReader0 = new PipedReader();
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(pipedReader0, (-48));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("juZl");
      boolean boolean0 = jSONPath0.setPropertyValue("juZl", "'/", 718L, "'/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("wqK");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "wqK";
      stringArray0[1] = "wqK";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject("wqK", stringArray0);
      assertTrue(jSONObject0.isEmpty());
      
      int int0 = JSONPath.size((Object) jSONPath0, "wqK");
      assertEquals((-1), int0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("", false);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("{\"x\":{},\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", jSONPath_PropertySegment0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("{\"x\":{},\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", "wqK", intArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, batchUpdateException0, sQLRecoverableException0, (Object) null);
      assertFalse(boolean0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1), 1179, (-1));
      boolean boolean1 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_RangeSegment0, "");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("5(0'?X%ouc");
      assertEquals("5(0'?X%ouc", jSONPath0.getPath());
  }
}
