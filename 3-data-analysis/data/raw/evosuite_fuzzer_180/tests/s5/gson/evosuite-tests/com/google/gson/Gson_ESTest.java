/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 14:18:24 GMT 2020
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.DefaultDateTypeAdapter;
import com.google.gson.ExclusionStrategy;
import com.google.gson.FieldNamingStrategy;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.InstanceCreator;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.Excluder;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.Date;
import java.util.HashMap;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.function.LongUnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Gson_ESTest extends Gson_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      JsonArray jsonArray0 = new JsonArray(12);
      assertNotNull(jsonArray0);
      assertTrue(jsonArray0.isJsonArray());
      assertFalse(jsonArray0.isJsonPrimitive());
      assertEquals(0, jsonArray0.size());
      assertFalse(jsonArray0.isJsonNull());
      assertFalse(jsonArray0.isJsonObject());
      
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      AtomicLongArray atomicLongArray0 = gson0.fromJson((JsonElement) jsonArray0, class0);
      assertNotNull(atomicLongArray0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertTrue(jsonArray0.isJsonArray());
      assertFalse(jsonArray0.isJsonPrimitive());
      assertEquals(0, jsonArray0.size());
      assertFalse(jsonArray0.isJsonNull());
      assertFalse(jsonArray0.isJsonObject());
      assertEquals("[]", atomicLongArray0.toString());
      assertEquals(0, atomicLongArray0.length());
      
      JsonArray jsonArray1 = (JsonArray)gson0.toJsonTree((Object) atomicLongArray0, (Type) class0);
      assertTrue(jsonArray1.equals((Object)jsonArray0));
      assertNotNull(jsonArray1);
      assertNotSame(jsonArray0, jsonArray1);
      assertNotSame(jsonArray1, jsonArray0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertTrue(jsonArray0.isJsonArray());
      assertFalse(jsonArray0.isJsonPrimitive());
      assertEquals(0, jsonArray0.size());
      assertFalse(jsonArray0.isJsonNull());
      assertFalse(jsonArray0.isJsonObject());
      assertEquals("[]", atomicLongArray0.toString());
      assertEquals(0, atomicLongArray0.length());
      assertEquals(0, jsonArray1.size());
      assertFalse(jsonArray1.isJsonObject());
      assertFalse(jsonArray1.isJsonNull());
      assertFalse(jsonArray1.isJsonPrimitive());
      assertTrue(jsonArray1.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JsonArray jsonArray0 = new JsonArray(61);
      assertNotNull(jsonArray0);
      assertEquals(0, jsonArray0.size());
      assertFalse(jsonArray0.isJsonPrimitive());
      assertFalse(jsonArray0.isJsonObject());
      assertFalse(jsonArray0.isJsonNull());
      assertTrue(jsonArray0.isJsonArray());
      
      jsonArray0.add((Boolean) null);
      assertFalse(jsonArray0.isJsonPrimitive());
      assertFalse(jsonArray0.isJsonObject());
      assertEquals(1, jsonArray0.size());
      assertFalse(jsonArray0.isJsonNull());
      assertTrue(jsonArray0.isJsonArray());
      
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      JsonArray jsonArray0 = new JsonArray(3640);
      assertNotNull(jsonArray0);
      assertFalse(jsonArray0.isJsonObject());
      assertFalse(jsonArray0.isJsonNull());
      assertTrue(jsonArray0.isJsonArray());
      assertEquals(0, jsonArray0.size());
      assertFalse(jsonArray0.isJsonPrimitive());
      
      boolean boolean0 = true;
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      jsonArray0.add(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertEquals(1, jsonArray0.size());
      assertFalse(jsonArray0.isJsonObject());
      assertFalse(jsonArray0.isJsonNull());
      assertTrue(jsonArray0.isJsonArray());
      assertFalse(jsonArray0.isJsonPrimitive());
      
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected NUMBER but was BOOLEAN at path $[0]
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      JsonArray jsonArray0 = new JsonArray();
      assertNotNull(jsonArray0);
      assertFalse(jsonArray0.isJsonNull());
      assertFalse(jsonArray0.isJsonObject());
      assertEquals(0, jsonArray0.size());
      assertFalse(jsonArray0.isJsonPrimitive());
      assertTrue(jsonArray0.isJsonArray());
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      jsonArray0.add(boolean0);
      assertFalse(jsonArray0.isJsonNull());
      assertFalse(jsonArray0.isJsonObject());
      assertEquals(1, jsonArray0.size());
      assertFalse(jsonArray0.isJsonPrimitive());
      assertTrue(jsonArray0.isJsonArray());
      
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected NUMBER but was BOOLEAN at path $[0]
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      assertNotNull(jsonElement0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(jsonElement0.isJsonPrimitive());
      assertFalse(jsonElement0.isJsonArray());
      assertFalse(jsonElement0.isJsonObject());
      assertTrue(jsonElement0.isJsonNull());
      
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Type type0 = gson0.fromJson(jsonElement0, (Type) class0);
      assertNull(type0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(jsonElement0.isJsonPrimitive());
      assertFalse(jsonElement0.isJsonArray());
      assertFalse(jsonElement0.isJsonObject());
      assertTrue(jsonElement0.isJsonNull());
      assertFalse(class0.isAnnotation());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      String string0 = "BL|'qNmKMqgcwh";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("BL|'qNmKMqgcwh", "BL|'qNmKMqgcwh");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // BL|'qNmKMqgcwh
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Date> class0 = Date.class;
      TypeToken<Date> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      TypeAdapter<Date> typeAdapter0 = gson0.getAdapter(typeToken0);
      assertNotNull(typeAdapter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) typeAdapter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class java.text.DecimalFormat declares multiple JSON fields named maximumFractionDigits
         //
         verifyException("com.google.gson.internal.bind.ReflectiveTypeAdapterFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<DefaultDateTypeAdapter> class0 = DefaultDateTypeAdapter.class;
      TypeToken<DefaultDateTypeAdapter> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class class1 = (Class)typeToken0.getType();
      assertNotNull(class1);
      assertEquals("class com.google.gson.DefaultDateTypeAdapter", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(0, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) class1, (Type) class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      boolean boolean0 = gson0.serializeNulls();
      assertFalse(boolean0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-1L);
      longArray0[1] = 767L;
      longArray0[2] = (-1L);
      longArray0[3] = 1L;
      longArray0[4] = (-45L);
      longArray0[5] = 0L;
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(longArray0);
      assertArrayEquals(new long[] {(-1L), 767L, (-1L), 1L, (-45L), 0L, 0L}, longArray0);
      assertNotNull(atomicLongArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, atomicLongArray0.length());
      assertEquals("[-1, 767, -1, 1, -45, 0, 0]", atomicLongArray0.toString());
      
      Class<DefaultDateTypeAdapter> class0 = DefaultDateTypeAdapter.class;
      TypeToken<DefaultDateTypeAdapter> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class class1 = (Class)typeToken0.getType();
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("class com.google.gson.DefaultDateTypeAdapter", class1.toString());
      assertFalse(class1.isPrimitive());
      assertEquals(0, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0);
      assertNotNull(outputStreamWriter0);
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) atomicLongArray0, (Type) class1, (Appendable) outputStreamWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      String string0 = gson0.toString();
      assertNotNull(string0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(1068);
      assertNotNull(atomicLongArray0);
      assertEquals(1068, atomicLongArray0.length());
      
      String string1 = gson0.toJson((Object) atomicLongArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals(1068, atomicLongArray0.length());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(string0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(jsonPrimitive0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isString());
      
      JsonPrimitive jsonPrimitive1 = jsonPrimitive0.deepCopy();
      assertFalse(string0.equals((Object)string1));
      assertNotNull(jsonPrimitive1);
      assertSame(jsonPrimitive0, jsonPrimitive1);
      assertSame(jsonPrimitive1, jsonPrimitive0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive1.isNumber());
      assertFalse(jsonPrimitive1.isBoolean());
      assertFalse(jsonPrimitive1.isJsonArray());
      assertFalse(jsonPrimitive1.isJsonNull());
      assertTrue(jsonPrimitive1.isString());
      assertFalse(jsonPrimitive1.isJsonObject());
      assertTrue(jsonPrimitive1.isJsonPrimitive());
      
      Class<Type> class0 = Type.class;
      TypeToken<Type> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class<? super Type> class1 = typeToken0.getRawType();
      assertNotNull(class1);
      assertEquals("interface java.lang.reflect.Type", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(1537, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive1, (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.lang.reflect.Type. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Random.setNextRandom((-3777));
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      JsonObject jsonObject0 = new JsonObject();
      assertNotNull(jsonObject0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonArray());
      
      JsonArray jsonArray0 = jsonObject0.getAsJsonArray("<");
      assertNull(jsonArray0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonArray());
      
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) null, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Excluder excluder0 = Excluder.DEFAULT;
      assertNotNull(excluder0);
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      
      String string0 = gson0.toString();
      assertNotNull(string0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Object> class1 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class1);
      assertNotNull(typeToken0);
      
      Class<? super Object> class2 = typeToken0.getRawType();
      assertNotNull(class2);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isAnnotation());
      
      String string1 = gson0.fromJson("|", (Type) class2);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("|", string1);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isAnnotation());
      
      Excluder excluder1 = gson0.excluder();
      assertNotNull(excluder1);
      assertSame(excluder1, excluder0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-41);
      byteArray0[8] = (byte)24;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-33), (byte) (-8), (byte)27, (byte)58, (byte) (-123), (byte)2, (byte)1, (byte) (-41), (byte)24}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(9, byteArray0.length);
      assertEquals((byte)24, bigInteger0.byteValue());
      assertEquals((short) (-10472), bigInteger0.shortValue());
      
      String string2 = gson0.toJson((Object) bigInteger0, (Type) class0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte) (-33), (byte) (-8), (byte)27, (byte)58, (byte) (-123), (byte)2, (byte)1, (byte) (-41), (byte)24}, byteArray0);
      assertNotNull(string2);
      assertEquals(9, byteArray0.length);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertEquals((byte)24, bigInteger0.byteValue());
      assertEquals((short) (-10472), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(8232);
      assertNotNull(atomicLongArray0);
      assertEquals(8232, atomicLongArray0.length());
      
      String string0 = gson0.toJson((Object) atomicLongArray0);
      assertNotNull(string0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertEquals(8232, atomicLongArray0.length());
      
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class<? super Object> class1 = typeToken0.getRawType();
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      // Undeclared exception!
      gson0.fromJson(string0, (Type) class1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      stringReader0.mark(843);
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertEquals("boolean", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      AtomicLongArray atomicLongArray0 = gson0.fromJson(jsonReader0, (Type) class0);
      assertNull(atomicLongArray0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(jsonReader0.isLenient());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertEquals("boolean", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      GsonBuilder gsonBuilder0 = gson0.newBuilder();
      assertNotNull(gsonBuilder0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      boolean boolean0 = gson0.serializeNulls();
      assertFalse(boolean0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      System.setCurrentTimeMillis((-1457L));
      // Undeclared exception!
      try { 
        gson0.toJson((Object) gsonBuilder0, (Type) class0, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Excluder excluder0 = Excluder.DEFAULT;
      assertNotNull(excluder0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '';
      charArray0[1] = 'h';
      charArray0[2] = 'E';
      charArray0[3] = '~';
      charArray0[4] = '#';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'', 'h', 'E', '~', '#'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(5, charArray0.length);
      assertEquals(5, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.limit());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("hE~#", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertArrayEquals(new char[] {'', 'h', 'E', '~', '#'}, charArray0);
      assertNotNull(charBuffer1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.limit());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("hE~#", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer1.hasArray());
      assertEquals(5, charBuffer1.length());
      assertEquals(5, charBuffer1.limit());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(5, charBuffer1.capacity());
      assertEquals(5, charBuffer1.remaining());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals("hE~#", charBuffer1.toString());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) excluder0, (Appendable) charBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      MockDate mockDate0 = new MockDate(60, 60, 60, 60, 916, 916);
      assertNotNull(mockDate0);
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) mockDate0, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      JsonElement jsonElement0 = null;
      Class<Type> class0 = Type.class;
      TypeToken<Type> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class<? super Type> class1 = typeToken0.getRawType();
      assertNotNull(class1);
      assertTrue(class1.isInterface());
      assertEquals("interface java.lang.reflect.Type", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1537, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      
      Double double0 = gson0.fromJson((JsonElement) null, (Type) class1);
      assertNull(double0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertTrue(class1.isInterface());
      assertEquals("interface java.lang.reflect.Type", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1537, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      
      Class<Float> class2 = Float.TYPE;
      assertNotNull(class2);
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals("float", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      
      Object object0 = gson0.fromJson("", (Type) class2);
      assertNull(object0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals("float", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      
      // Undeclared exception!
      try { 
        gson0.fromJson("33`p&S;q1", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.lang.reflect.Type. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      JsonObject jsonObject0 = new JsonObject();
      assertNotNull(jsonObject0);
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonNull());
      assertTrue(jsonObject0.isJsonObject());
      
      JsonArray jsonArray0 = jsonObject0.getAsJsonArray((String) null);
      assertNull(jsonArray0);
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonNull());
      assertTrue(jsonObject0.isJsonObject());
      
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) null, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("'rl~s|>) ");
      assertNotNull(jsonPrimitive0);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonArray());
      
      JsonPrimitive jsonPrimitive1 = jsonPrimitive0.deepCopy();
      assertNotNull(jsonPrimitive1);
      assertSame(jsonPrimitive0, jsonPrimitive1);
      assertSame(jsonPrimitive1, jsonPrimitive0);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive1.isJsonPrimitive());
      assertFalse(jsonPrimitive1.isNumber());
      assertTrue(jsonPrimitive1.isString());
      assertFalse(jsonPrimitive1.isBoolean());
      assertFalse(jsonPrimitive1.isJsonArray());
      assertFalse(jsonPrimitive1.isJsonObject());
      assertFalse(jsonPrimitive1.isJsonNull());
      
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive1, (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      StringReader stringReader0 = new StringReader("+rl\"pLbs|o) ");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      JsonArray jsonArray0 = new JsonArray();
      assertNotNull(jsonArray0);
      assertFalse(jsonArray0.isJsonPrimitive());
      assertFalse(jsonArray0.isJsonNull());
      assertEquals(0, jsonArray0.size());
      assertTrue(jsonArray0.isJsonArray());
      assertFalse(jsonArray0.isJsonObject());
      
      JsonArray jsonArray1 = jsonArray0.deepCopy();
      assertTrue(jsonArray1.equals((Object)jsonArray0));
      assertNotNull(jsonArray1);
      assertNotSame(jsonArray0, jsonArray1);
      assertNotSame(jsonArray1, jsonArray0);
      assertFalse(jsonArray0.isJsonPrimitive());
      assertFalse(jsonArray0.isJsonNull());
      assertEquals(0, jsonArray0.size());
      assertTrue(jsonArray0.isJsonArray());
      assertFalse(jsonArray0.isJsonObject());
      assertFalse(jsonArray1.isJsonNull());
      assertFalse(jsonArray1.isJsonPrimitive());
      assertFalse(jsonArray1.isJsonObject());
      assertTrue(jsonArray1.isJsonArray());
      assertEquals(0, jsonArray1.size());
      
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonArray1, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      JsonArray jsonArray0 = new JsonArray(1072);
      assertNotNull(jsonArray0);
      assertFalse(jsonArray0.isJsonPrimitive());
      assertFalse(jsonArray0.isJsonObject());
      assertEquals(0, jsonArray0.size());
      assertTrue(jsonArray0.isJsonArray());
      assertFalse(jsonArray0.isJsonNull());
      
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      AtomicLongArray atomicLongArray0 = gson0.fromJson((JsonElement) jsonArray0, class0);
      assertNotNull(atomicLongArray0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(jsonArray0.isJsonPrimitive());
      assertFalse(jsonArray0.isJsonObject());
      assertEquals(0, jsonArray0.size());
      assertTrue(jsonArray0.isJsonArray());
      assertFalse(jsonArray0.isJsonNull());
      assertEquals(0, atomicLongArray0.length());
      assertEquals("[]", atomicLongArray0.toString());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Integer> class0 = Integer.class;
      TypeToken<Integer> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      TypeAdapter<Integer> typeAdapter0 = gson0.getAdapter(typeToken0);
      assertNotNull(typeAdapter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Float> class1 = Float.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("float", class1.toString());
      assertTrue(class1.isPrimitive());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      JsonArray jsonArray0 = new JsonArray(16);
      assertNotNull(jsonArray0);
      assertFalse(jsonArray0.isJsonObject());
      assertEquals(0, jsonArray0.size());
      assertFalse(jsonArray0.isJsonPrimitive());
      assertTrue(jsonArray0.isJsonArray());
      assertFalse(jsonArray0.isJsonNull());
      
      Class<AtomicLongArray> class2 = AtomicLongArray.class;
      AtomicLongArray atomicLongArray0 = gson0.fromJson((JsonElement) jsonArray0, class2);
      assertNotNull(atomicLongArray0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(jsonArray0.isJsonObject());
      assertEquals(0, jsonArray0.size());
      assertFalse(jsonArray0.isJsonPrimitive());
      assertTrue(jsonArray0.isJsonArray());
      assertFalse(jsonArray0.isJsonNull());
      assertEquals(0, atomicLongArray0.length());
      assertEquals("[]", atomicLongArray0.toString());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Excluder excluder0 = Excluder.DEFAULT;
      assertNotNull(excluder0);
      
      Excluder excluder1 = excluder0.withVersion(653.42814089);
      assertFalse(excluder1.equals((Object)excluder0));
      assertNotNull(excluder1);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder1, excluder0);
      
      TypeToken<Double> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      TypeAdapter<Double> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      assertFalse(excluder0.equals((Object)excluder1));
      assertNotNull(typeAdapter0);
      assertNotSame(excluder0, excluder1);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      FieldNamingStrategy fieldNamingStrategy0 = gson0.fieldNamingStrategy();
      assertNotNull(fieldNamingStrategy0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      BigDecimal bigDecimal0 = new BigDecimal(1690);
      assertNotNull(bigDecimal0);
      assertEquals((short)1690, bigDecimal0.shortValue());
      assertEquals((byte) (-102), bigDecimal0.byteValue());
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(bigDecimal0);
      assertNotNull(jsonPrimitive0);
      assertEquals((short)1690, bigDecimal0.shortValue());
      assertEquals((byte) (-102), bigDecimal0.byteValue());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("putBoolean");
      assertNotNull(mockFileWriter0);
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 1690);
      assertNotNull(bufferedWriter0);
      
      JsonWriter jsonWriter0 = new JsonWriter(bufferedWriter0);
      assertNotNull(jsonWriter0);
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      assertNotNull(jsonWriter1);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isLenient());
      
      JsonWriter jsonWriter2 = jsonWriter1.name("putBoolean");
      assertNotNull(jsonWriter2);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter0);
      assertSame(jsonWriter1, jsonWriter2);
      assertSame(jsonWriter2, jsonWriter0);
      assertSame(jsonWriter2, jsonWriter1);
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isLenient());
      assertFalse(jsonWriter2.isLenient());
      assertTrue(jsonWriter2.getSerializeNulls());
      assertFalse(jsonWriter2.isHtmlSafe());
      
      JsonWriter jsonWriter3 = jsonWriter2.nullValue();
      assertNotNull(jsonWriter3);
      assertSame(jsonWriter0, jsonWriter3);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter0);
      assertSame(jsonWriter1, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter3);
      assertSame(jsonWriter2, jsonWriter3);
      assertSame(jsonWriter2, jsonWriter0);
      assertSame(jsonWriter2, jsonWriter1);
      assertSame(jsonWriter3, jsonWriter2);
      assertSame(jsonWriter3, jsonWriter0);
      assertSame(jsonWriter3, jsonWriter1);
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isLenient());
      assertFalse(jsonWriter2.isLenient());
      assertTrue(jsonWriter2.getSerializeNulls());
      assertFalse(jsonWriter2.isHtmlSafe());
      assertTrue(jsonWriter3.getSerializeNulls());
      assertFalse(jsonWriter3.isLenient());
      assertFalse(jsonWriter3.isHtmlSafe());
      
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) jsonPrimitive0, jsonWriter3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Float float0 = new Float((-1.0));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      Class<Type> class0 = Type.class;
      TypeToken<Type> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class class1 = (Class)typeToken0.getType();
      assertNotNull(class1);
      assertFalse(class1.isArray());
      assertEquals("interface java.lang.reflect.Type", class1.toString());
      assertEquals(1537, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertTrue(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      
      JsonObject jsonObject0 = (JsonObject)gson0.toJsonTree((Object) float0, (Type) class1);
      assertNotNull(jsonObject0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(class1.isArray());
      assertEquals("interface java.lang.reflect.Type", class1.toString());
      assertEquals(1537, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertTrue(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonPrimitive());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        gson0.getAdapter((TypeToken<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Gson gson1 = new Gson();
      assertFalse(gson1.equals((Object)gson0));
      assertNotNull(gson1);
      assertTrue(gson1.htmlSafe());
      assertFalse(gson1.serializeNulls());
      
      Excluder excluder0 = Excluder.DEFAULT;
      assertNotNull(excluder0);
      
      Class<Double> class0 = Double.class;
      TypeToken<Double> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      TypeAdapter<Double> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      assertFalse(gson0.equals((Object)gson1));
      assertNotNull(typeAdapter0);
      assertNotSame(gson0, gson1);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      FieldNamingStrategy fieldNamingStrategy0 = gson0.fieldNamingStrategy();
      assertFalse(gson0.equals((Object)gson1));
      assertNotNull(fieldNamingStrategy0);
      assertNotSame(gson0, gson1);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Long long0 = new Long(1930L);
      assertNotNull(long0);
      assertEquals(1930L, (long)long0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = '~';
      charArray0[2] = 'U';
      charArray0[3] = '&';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'J', '~', 'U', '&'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("J~U&", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(4, charBuffer0.length());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertArrayEquals(new char[] {'J', '~', 'U', '&'}, charArray0);
      assertNotNull(charBuffer1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("J~U&", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(4, charBuffer0.length());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(4, charBuffer1.capacity());
      assertEquals(4, charBuffer1.limit());
      assertEquals(4, charBuffer1.length());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals("J~U&", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      assertEquals(4, charBuffer1.remaining());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.position());
      
      // Undeclared exception!
      try { 
        gson1.toJson((Object) long0, (Type) class0, (Appendable) charBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertNotNull(jsonElement0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(jsonElement0.isJsonObject());
      assertFalse(jsonElement0.isJsonArray());
      assertFalse(jsonElement0.isJsonPrimitive());
      assertTrue(jsonElement0.isJsonNull());
      
      String string0 = gson0.toString();
      assertNotNull(string0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      
      String string0 = gson0.toJson((Object) null, (Type) class0);
      assertNotNull(string0);
      assertEquals("null", string0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      String string0 = gson0.toString();
      assertNotNull(string0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      JsonArray jsonArray0 = new JsonArray();
      assertNotNull(jsonArray0);
      assertFalse(jsonArray0.isJsonObject());
      assertEquals(0, jsonArray0.size());
      assertFalse(jsonArray0.isJsonPrimitive());
      assertFalse(jsonArray0.isJsonNull());
      assertTrue(jsonArray0.isJsonArray());
      
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(8232);
      assertNotNull(atomicLongArray0);
      assertEquals(8232, atomicLongArray0.length());
      
      Float float0 = new Float((float) 8232);
      assertNotNull(float0);
      assertEquals(8232.0F, (float)float0, 0.01F);
      
      String string1 = gson0.toJson((Object) atomicLongArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals(8232, atomicLongArray0.length());
      
      // Undeclared exception!
      gson0.toJson((Object) atomicLongArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertNotNull(jsonElement0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(jsonElement0.isJsonArray());
      assertFalse(jsonElement0.isJsonPrimitive());
      assertTrue(jsonElement0.isJsonNull());
      assertFalse(jsonElement0.isJsonObject());
      
      Excluder excluder0 = gson0.excluder();
      assertNotNull(excluder0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      JsonWriter jsonWriter0 = null;
      try {
        jsonWriter0 = new JsonWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // out == null
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Object object0 = gson0.fromJson("", (Type) class0);
      assertNull(object0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      boolean boolean0 = gson0.htmlSafe();
      assertTrue(boolean0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      TypeAdapter<Float> typeAdapter0 = gson0.getAdapter(class0);
      assertNotNull(typeAdapter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertNotNull(jsonElement0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(jsonElement0.isJsonNull());
      assertFalse(jsonElement0.isJsonPrimitive());
      assertFalse(jsonElement0.isJsonObject());
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      StringReader stringReader0 = new StringReader("n&");
      assertNotNull(stringReader0);
      
      Class<Object> class0 = Object.class;
      Object object0 = gson0.fromJson((Reader) stringReader0, class0);
      assertNotNull(object0);
      assertEquals("n&", object0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Double> class1 = Double.TYPE;
      assertNotNull(class1);
      assertEquals("double", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      
      InstanceCreator<Object> instanceCreator0 = gson0.fromJson((Reader) stringReader0, (Type) class1);
      assertNull(instanceCreator0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertEquals("double", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      boolean boolean0 = gson0.serializeNulls();
      assertFalse(boolean0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Float float0 = new Float((-3029.0));
      assertNotNull(float0);
      assertEquals((-3029.0F), (float)float0, 0.01F);
      
      Class<Double> class0 = Double.class;
      TypeToken<Double> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class<? super Double> class1 = typeToken0.getRawType();
      assertNotNull(class1);
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertEquals("class java.lang.Double", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) float0, (Type) class1, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Character character0 = Character.valueOf('s');
      assertNotNull(character0);
      assertEquals('s', (char)character0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      
      Class<Type> class0 = Type.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.lang.reflect.Type. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      Class<Integer> class0 = Integer.class;
      TypeToken<Integer> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class class1 = (Class)typeToken0.getType();
      assertNotNull(class1);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Integer", class1.toString());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      MockDate mockDate0 = gson0.fromJson((String) null, (Type) class1);
      assertNull(mockDate0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Integer", class1.toString());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(0);
      assertNotNull(atomicLongArray0);
      assertEquals("[]", atomicLongArray0.toString());
      assertEquals(0, atomicLongArray0.length());
      
      Float float0 = new Float((float) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      String string0 = gson0.toJson((Object) float0);
      assertNotNull(string0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      Class<Float> class2 = Float.class;
      TypeToken<Float> typeToken1 = TypeToken.get(class2);
      assertNotNull(typeToken1);
      
      TypeAdapter<Float> typeAdapter0 = gson0.getAdapter(typeToken1);
      assertNotNull(typeAdapter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      String string0 = gson0.toString();
      assertNotNull(string0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      FieldNamingStrategy fieldNamingStrategy0 = gson0.fieldNamingStrategy();
      assertNotNull(fieldNamingStrategy0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      String string1 = gson0.toString();
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      MockFile mockFile0 = new MockFile(string1, string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(mockPrintWriter0);
      
      JsonWriter jsonWriter0 = gson0.newJsonWriter(mockPrintWriter0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(jsonWriter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      
      Short short0 = new Short((short)3);
      assertNotNull(short0);
      assertEquals((short)3, (short)short0);
      
      Class<Integer> class0 = Integer.class;
      TypeToken<Integer> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class class1 = (Class)typeToken0.getType();
      assertNotNull(class1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Integer", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      
      gson0.toJson((Object) short0, (Type) class1, jsonWriter0);
      assertTrue(string1.equals((Object)string0));
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Integer", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      String string0 = gson0.toJson((Object) mockDate0);
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      boolean boolean0 = gson0.serializeNulls();
      assertFalse(boolean0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      MockFile mockFile0 = new MockFile("{}");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) mockDate0, (Type) null, (Appendable) mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Short> class0 = Short.class;
      TypeToken<Short> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      TypeAdapter<Short> typeAdapter0 = gson0.getAdapter(typeToken0);
      assertNotNull(typeAdapter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Double double0 = new Double((-420.3275470888382));
      assertNotNull(double0);
      assertEquals((-420.3275470888382), (double)double0, 0.01);
      
      StringWriter stringWriter0 = new StringWriter(108);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      gson0.toJson((Object) double0, (Type) class0, (Appendable) stringBuffer0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertEquals(27, stringBuffer0.length());
      
      System.setCurrentTimeMillis((-1358L));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      
      String string0 = gson0.toString();
      assertNotNull(string0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      GsonBuilder gsonBuilder0 = gson0.newBuilder();
      assertNotNull(gsonBuilder0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, (Type) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      JsonObject jsonObject0 = new JsonObject();
      assertNotNull(jsonObject0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonNull());
      
      JsonElement jsonElement0 = jsonObject0.remove((String) null);
      assertNull(jsonElement0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonNull());
      
      Class<Double> class0 = Double.class;
      Double double0 = gson0.fromJson((JsonElement) null, class0);
      assertNull(double0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      String string0 = "Hrl~s|o) ";
      JsonArray jsonArray0 = new JsonArray(8232);
      assertNotNull(jsonArray0);
      assertFalse(jsonArray0.isJsonPrimitive());
      assertFalse(jsonArray0.isJsonNull());
      assertEquals(0, jsonArray0.size());
      assertTrue(jsonArray0.isJsonArray());
      assertFalse(jsonArray0.isJsonObject());
      
      JsonArray jsonArray1 = jsonArray0.getAsJsonArray();
      assertNotNull(jsonArray1);
      assertSame(jsonArray0, jsonArray1);
      assertSame(jsonArray1, jsonArray0);
      assertFalse(jsonArray0.isJsonPrimitive());
      assertFalse(jsonArray0.isJsonNull());
      assertEquals(0, jsonArray0.size());
      assertTrue(jsonArray0.isJsonArray());
      assertFalse(jsonArray0.isJsonObject());
      assertTrue(jsonArray1.isJsonArray());
      assertFalse(jsonArray1.isJsonPrimitive());
      assertEquals(0, jsonArray1.size());
      assertFalse(jsonArray1.isJsonNull());
      assertFalse(jsonArray1.isJsonObject());
      
      Class<Boolean> class1 = Boolean.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("boolean", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, (Type) class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      // Undeclared exception!
      try { 
        gson0.fromJson("C0/4{$KC,1DGYUfwd:", (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      GsonBuilder gsonBuilder0 = gson0.newBuilder();
      assertNotNull(gsonBuilder0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Integer integer0 = new Integer(100);
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) integer0);
      assertNotNull(jsonPrimitive0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      
      // Undeclared exception!
      try { 
        gson0.getAdapter((TypeToken<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      stringWriter0.close();
      assertEquals("", stringWriter0.toString());
      
      String string0 = "PIxi!q}M?KhemX";
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      try { 
        gson0.fromJson("PIxi!q}M?KhemX", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      // Undeclared exception!
      try { 
        gson0.newJsonWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // out == null
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      StringReader stringReader0 = new StringReader("V9-^wUxn='yW>>ky2");
      assertNotNull(stringReader0);
      
      Class<Double> class0 = Double.class;
      TypeToken<Double> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class class1 = (Class)typeToken0.getType();
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Double", class1.toString());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(2592);
      assertNotNull(atomicLongArray0);
      assertEquals(2592, atomicLongArray0.length());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) null, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) null, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      
      // Undeclared exception!
      try { 
        gson0.fromJson("Hrl~s|o) ", (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      boolean boolean0 = gson0.serializeNulls();
      assertFalse(boolean0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Excluder excluder0 = new Excluder();
      assertNotNull(excluder0);
      
      Excluder excluder1 = excluder0.disableInnerClassSerialization();
      assertFalse(excluder1.equals((Object)excluder0));
      assertNotNull(excluder1);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder1, excluder0);
      
      Excluder excluder2 = excluder1.excludeFieldsWithoutExposeAnnotation();
      assertFalse(excluder0.equals((Object)excluder1));
      assertFalse(excluder1.equals((Object)excluder0));
      assertFalse(excluder2.equals((Object)excluder1));
      assertFalse(excluder2.equals((Object)excluder0));
      assertNotNull(excluder2);
      assertNotSame(excluder0, excluder2);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder1, excluder2);
      assertNotSame(excluder1, excluder0);
      assertNotSame(excluder2, excluder1);
      assertNotSame(excluder2, excluder0);
      
      ExclusionStrategy exclusionStrategy0 = mock(ExclusionStrategy.class, new ViolatedAssumptionAnswer());
      Excluder excluder3 = excluder2.withExclusionStrategy(exclusionStrategy0, true, true);
      assertFalse(excluder0.equals((Object)excluder2));
      assertFalse(excluder0.equals((Object)excluder1));
      assertFalse(excluder1.equals((Object)excluder2));
      assertFalse(excluder1.equals((Object)excluder0));
      assertFalse(excluder2.equals((Object)excluder1));
      assertFalse(excluder2.equals((Object)excluder0));
      assertFalse(excluder3.equals((Object)excluder2));
      assertFalse(excluder3.equals((Object)excluder1));
      assertFalse(excluder3.equals((Object)excluder0));
      assertNotNull(excluder3);
      assertNotSame(excluder0, excluder3);
      assertNotSame(excluder0, excluder2);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder1, excluder3);
      assertNotSame(excluder1, excluder2);
      assertNotSame(excluder1, excluder0);
      assertNotSame(excluder2, excluder3);
      assertNotSame(excluder2, excluder1);
      assertNotSame(excluder2, excluder0);
      assertNotSame(excluder3, excluder2);
      assertNotSame(excluder3, excluder1);
      assertNotSame(excluder3, excluder0);
      
      Excluder excluder4 = excluder3.withVersion(3065.44180947873);
      assertFalse(excluder0.equals((Object)excluder3));
      assertFalse(excluder0.equals((Object)excluder2));
      assertFalse(excluder0.equals((Object)excluder1));
      assertFalse(excluder1.equals((Object)excluder3));
      assertFalse(excluder1.equals((Object)excluder2));
      assertFalse(excluder1.equals((Object)excluder0));
      assertFalse(excluder2.equals((Object)excluder3));
      assertFalse(excluder2.equals((Object)excluder1));
      assertFalse(excluder2.equals((Object)excluder0));
      assertFalse(excluder3.equals((Object)excluder2));
      assertFalse(excluder3.equals((Object)excluder1));
      assertFalse(excluder3.equals((Object)excluder0));
      assertFalse(excluder4.equals((Object)excluder2));
      assertFalse(excluder4.equals((Object)excluder0));
      assertFalse(excluder4.equals((Object)excluder3));
      assertFalse(excluder4.equals((Object)excluder1));
      assertNotNull(excluder4);
      assertNotSame(excluder0, excluder3);
      assertNotSame(excluder0, excluder4);
      assertNotSame(excluder0, excluder2);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder1, excluder3);
      assertNotSame(excluder1, excluder4);
      assertNotSame(excluder1, excluder2);
      assertNotSame(excluder1, excluder0);
      assertNotSame(excluder2, excluder3);
      assertNotSame(excluder2, excluder1);
      assertNotSame(excluder2, excluder4);
      assertNotSame(excluder2, excluder0);
      assertNotSame(excluder3, excluder2);
      assertNotSame(excluder3, excluder1);
      assertNotSame(excluder3, excluder4);
      assertNotSame(excluder3, excluder0);
      assertNotSame(excluder4, excluder2);
      assertNotSame(excluder4, excluder0);
      assertNotSame(excluder4, excluder3);
      assertNotSame(excluder4, excluder1);
      
      Class<Excluder> class0 = Excluder.class;
      boolean boolean1 = excluder2.excludeClass(class0, true);
      assertFalse(excluder0.equals((Object)excluder3));
      assertFalse(excluder0.equals((Object)excluder4));
      assertFalse(excluder0.equals((Object)excluder2));
      assertFalse(excluder0.equals((Object)excluder1));
      assertFalse(excluder1.equals((Object)excluder3));
      assertFalse(excluder1.equals((Object)excluder4));
      assertFalse(excluder1.equals((Object)excluder2));
      assertFalse(excluder1.equals((Object)excluder0));
      assertFalse(excluder2.equals((Object)excluder3));
      assertFalse(excluder2.equals((Object)excluder1));
      assertFalse(excluder2.equals((Object)excluder4));
      assertFalse(excluder2.equals((Object)excluder0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(excluder0, excluder3);
      assertNotSame(excluder0, excluder4);
      assertNotSame(excluder0, excluder2);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder1, excluder3);
      assertNotSame(excluder1, excluder4);
      assertNotSame(excluder1, excluder2);
      assertNotSame(excluder1, excluder0);
      assertNotSame(excluder2, excluder3);
      assertNotSame(excluder2, excluder1);
      assertNotSame(excluder2, excluder4);
      assertNotSame(excluder2, excluder0);
      
      Class<Object> class1 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class1);
      assertNotNull(typeToken0);
      
      TypeAdapter<Object> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder4, typeToken0);
      assertFalse(excluder0.equals((Object)excluder3));
      assertFalse(excluder0.equals((Object)excluder4));
      assertFalse(excluder0.equals((Object)excluder2));
      assertFalse(excluder0.equals((Object)excluder1));
      assertFalse(excluder1.equals((Object)excluder3));
      assertFalse(excluder1.equals((Object)excluder4));
      assertFalse(excluder1.equals((Object)excluder2));
      assertFalse(excluder1.equals((Object)excluder0));
      assertFalse(excluder2.equals((Object)excluder3));
      assertFalse(excluder2.equals((Object)excluder1));
      assertFalse(excluder2.equals((Object)excluder4));
      assertFalse(excluder2.equals((Object)excluder0));
      assertFalse(excluder3.equals((Object)excluder2));
      assertFalse(excluder3.equals((Object)excluder1));
      assertFalse(excluder3.equals((Object)excluder4));
      assertFalse(excluder3.equals((Object)excluder0));
      assertFalse(excluder4.equals((Object)excluder2));
      assertFalse(excluder4.equals((Object)excluder0));
      assertFalse(excluder4.equals((Object)excluder3));
      assertFalse(excluder4.equals((Object)excluder1));
      assertNotNull(typeAdapter0);
      assertNotSame(excluder0, excluder3);
      assertNotSame(excluder0, excluder4);
      assertNotSame(excluder0, excluder2);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder1, excluder3);
      assertNotSame(excluder1, excluder4);
      assertNotSame(excluder1, excluder2);
      assertNotSame(excluder1, excluder0);
      assertNotSame(excluder2, excluder3);
      assertNotSame(excluder2, excluder1);
      assertNotSame(excluder2, excluder4);
      assertNotSame(excluder2, excluder0);
      assertNotSame(excluder3, excluder2);
      assertNotSame(excluder3, excluder1);
      assertNotSame(excluder3, excluder4);
      assertNotSame(excluder3, excluder0);
      assertNotSame(excluder4, excluder2);
      assertNotSame(excluder4, excluder0);
      assertNotSame(excluder4, excluder3);
      assertNotSame(excluder4, excluder1);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      String string0 = gson0.toJson((Object) excluder1, (Type) class1);
      assertFalse(excluder0.equals((Object)excluder3));
      assertFalse(excluder0.equals((Object)excluder4));
      assertFalse(excluder0.equals((Object)excluder2));
      assertFalse(excluder0.equals((Object)excluder1));
      assertFalse(excluder1.equals((Object)excluder3));
      assertFalse(excluder1.equals((Object)excluder4));
      assertFalse(excluder1.equals((Object)excluder2));
      assertFalse(excluder1.equals((Object)excluder0));
      assertNotNull(string0);
      assertNotSame(excluder0, excluder3);
      assertNotSame(excluder0, excluder4);
      assertNotSame(excluder0, excluder2);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder1, excluder3);
      assertNotSame(excluder1, excluder4);
      assertNotSame(excluder1, excluder2);
      assertNotSame(excluder1, excluder0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      AtomicLong atomicLong0 = new AtomicLong(20L);
      assertNotNull(atomicLong0);
      assertEquals((byte)20, atomicLong0.byteValue());
      assertEquals("20", atomicLong0.toString());
      assertEquals(20.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(20L, atomicLong0.longValue());
      assertEquals(20, atomicLong0.intValue());
      assertEquals(20.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(20L, atomicLong0.get());
      assertEquals((short)20, atomicLong0.shortValue());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'B';
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) atomicLong0);
      assertNotNull(jsonPrimitive0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals((byte)20, atomicLong0.byteValue());
      assertEquals("20", atomicLong0.toString());
      assertEquals(20.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(20L, atomicLong0.longValue());
      assertEquals(20, atomicLong0.intValue());
      assertEquals(20.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(20L, atomicLong0.get());
      assertEquals((short)20, atomicLong0.shortValue());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      
      Gson gson1 = new Gson();
      assertFalse(gson1.equals((Object)gson0));
      assertNotNull(gson1);
      assertTrue(gson1.htmlSafe());
      assertFalse(gson1.serializeNulls());
      
      boolean boolean0 = gson1.htmlSafe();
      assertFalse(gson1.equals((Object)gson0));
      assertTrue(boolean0);
      assertNotSame(gson1, gson0);
      assertTrue(gson1.htmlSafe());
      assertFalse(gson1.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(305);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0, 305);
      assertNotNull(bufferedWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      JsonWriter jsonWriter0 = gson0.newJsonWriter(bufferedWriter0);
      assertNotNull(jsonWriter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      gson0.toJson((JsonElement) null, jsonWriter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      String string0 = gson0.toString();
      assertNotNull(string0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Long long0 = new Long((-2917L));
      assertNotNull(long0);
      assertEquals((-2917L), (long)long0);
      
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charsetEncoder0);
      assertNotNull(outputStreamWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      
      JsonWriter jsonWriter0 = new JsonWriter(outputStreamWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      Charset charset1 = Charset.defaultCharset();
      assertNotNull(charset1);
      assertSame(charset1, charset0);
      assertEquals("UTF-8", charset1.displayName());
      assertTrue(charset1.isRegistered());
      assertTrue(charset1.canEncode());
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.toString());
      
      Class<AtomicLong> class1 = AtomicLong.class;
      AtomicLong atomicLong0 = gson0.fromJson("99", class1);
      assertNotNull(atomicLong0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals(99.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(99L, atomicLong0.get());
      assertEquals((byte)99, atomicLong0.byteValue());
      assertEquals(99L, atomicLong0.longValue());
      assertEquals(99.0, atomicLong0.doubleValue(), 0.01);
      assertEquals((short)99, atomicLong0.shortValue());
      assertEquals(99, atomicLong0.intValue());
      assertEquals("99", atomicLong0.toString());
      
      Class<String> class2 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class2);
      assertNotNull(typeToken0);
      
      TypeAdapter<String> typeAdapter0 = gson0.getAdapter(typeToken0);
      assertNotNull(typeAdapter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = gson0.toJson(object0);
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      stringWriter0.close();
      assertEquals("", stringWriter0.toString());
      
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(0);
      assertNotNull(atomicLongArray0);
      assertEquals(0, atomicLongArray0.length());
      assertEquals("[]", atomicLongArray0.toString());
      
      Float float0 = new Float((float) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      String string0 = gson0.toJson((Object) float0);
      assertNotNull(string0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      String string0 = gson0.toJson((Object) "");
      assertNotNull(string0);
      assertEquals("\"\"", string0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      int int0 = 113;
      try { 
        gson0.toJson((Object) "", (Appendable) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(0);
      assertNotNull(atomicLongArray0);
      assertEquals("[]", atomicLongArray0.toString());
      assertEquals(0, atomicLongArray0.length());
      
      gson0.toJson((Object) atomicLongArray0, (Appendable) stringWriter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertEquals("[]", stringWriter0.toString());
      assertEquals("[]", atomicLongArray0.toString());
      assertEquals(0, atomicLongArray0.length());
      
      gson0.toJson((Object) "FVnjbmLuxt", (Appendable) stringWriter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertEquals("[]\"FVnjbmLuxt\"", stringWriter0.toString());
      
      long[] longArray0 = new long[0];
      AtomicLongArray atomicLongArray1 = new AtomicLongArray(longArray0);
      assertFalse(atomicLongArray1.equals((Object)atomicLongArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(atomicLongArray1);
      assertEquals(0, longArray0.length);
      assertEquals("[]", atomicLongArray1.toString());
      assertEquals(0, atomicLongArray1.length());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        gson0.toJson((Object) atomicLongArray1, (Appendable) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      String string0 = gson0.toString();
      assertNotNull(string0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Character> class0 = Character.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) "oTk%rhl4!n$K!", (Type) class0, (Appendable) pipedWriter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Long long0 = new Long(663L);
      assertNotNull(long0);
      assertEquals(663L, (long)long0);
      
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) long0);
      assertNotNull(jsonPrimitive0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertTrue(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isString());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      char[] charArray0 = new char[10];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      charArray0[4] = 'R';
      charArray0[5] = 'R';
      charArray0[6] = 'R';
      charArray0[7] = 'R';
      MockFile mockFile0 = new MockFile("U'AYEo!{Hto^h=<g=");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("U'AYEo!{Hto^h=<g=");
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)mockPrintWriter0.append('R');
      assertNotNull(mockPrintWriter1);
      assertSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter1, mockPrintWriter0);
      
      gson0.toJson((Object) stringWriter0, (Appendable) mockPrintWriter1);
      assertSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter1, mockPrintWriter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals("", stringWriter0.toString());
      
      Excluder excluder0 = Excluder.DEFAULT;
      assertNotNull(excluder0);
      
      Class<Double> class0 = Double.class;
      TypeToken<Double> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      TypeToken<Double> typeToken1 = TypeToken.get(class0);
      assertTrue(typeToken1.equals((Object)typeToken0));
      assertNotNull(typeToken1);
      assertNotSame(typeToken1, typeToken0);
      
      TypeAdapter<Double> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken1);
      assertTrue(typeToken1.equals((Object)typeToken0));
      assertNotNull(typeAdapter0);
      assertNotSame(typeToken1, typeToken0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      MockDate mockDate0 = new MockDate((-1465), (-1555), (-412), (-1555), 1, (-412));
      assertNotNull(mockDate0);
      
      Class<Character> class1 = Character.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertEquals("char", class1.toString());
      assertFalse(class1.isAnnotation());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) mockDate0, (Type) class1, (Appendable) stringWriter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertEquals("double", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      
      BigInteger bigInteger0 = gson0.fromJson((String) null, (Type) class0);
      assertNull(bigInteger0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals("double", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Short> class0 = Short.class;
      TypeToken<Short> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      TypeAdapter<Short> typeAdapter0 = gson0.getAdapter(typeToken0);
      assertNotNull(typeAdapter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      MockDate mockDate0 = new MockDate(0, 0, 1056);
      assertNotNull(mockDate0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(726);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      JsonWriter jsonWriter0 = new JsonWriter(mockPrintWriter0);
      assertNotNull(jsonWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) mockDate0, (Type) class0, jsonWriter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockDate cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$6", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Long long0 = new Long(663L);
      assertNotNull(long0);
      assertEquals(663L, (long)long0);
      
      Class<Double> class0 = Double.class;
      TypeToken<Double> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      boolean boolean0 = gson0.serializeNulls();
      assertFalse(boolean0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      BigInteger bigInteger0 = gson0.fromJson((String) null, (Type) class0);
      assertNull(bigInteger0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      JsonElement jsonElement0 = gson0.toJsonTree((Object) gson_FutureTypeAdapter0);
      assertNotNull(jsonElement0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertTrue(jsonElement0.isJsonObject());
      assertFalse(jsonElement0.isJsonNull());
      assertFalse(jsonElement0.isJsonPrimitive());
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Excluder excluder0 = gson0.excluder();
      assertNotNull(excluder0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Short> class0 = Short.class;
      TypeToken<Short> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      TypeAdapter<Short> typeAdapter0 = gson0.getAdapter(typeToken0);
      assertNotNull(typeAdapter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Short> class1 = Short.class;
      TypeToken<Short> typeToken1 = TypeToken.get(class1);
      assertTrue(typeToken1.equals((Object)typeToken0));
      assertNotNull(typeToken1);
      assertSame(class1, class0);
      assertNotSame(typeToken1, typeToken0);
      
      Excluder excluder0 = gson0.excluder();
      assertNotNull(excluder0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      char[] charArray0 = new char[1];
      charArray0[0] = ']';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {']'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals("]", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) null, (Appendable) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      AtomicLong atomicLong0 = new AtomicLong((-2109L));
      assertNotNull(atomicLong0);
      assertEquals((byte) (-61), atomicLong0.byteValue());
      assertEquals((short) (-2109), atomicLong0.shortValue());
      assertEquals((-2109.0), atomicLong0.doubleValue(), 0.01);
      assertEquals((-2109), atomicLong0.intValue());
      assertEquals((-2109L), atomicLong0.get());
      assertEquals("-2109", atomicLong0.toString());
      assertEquals((-2109L), atomicLong0.longValue());
      assertEquals((-2109.0F), atomicLong0.floatValue(), 0.01F);
      
      String string0 = gson0.toJson((Object) atomicLong0);
      assertNotNull(string0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertEquals((byte) (-61), atomicLong0.byteValue());
      assertEquals((short) (-2109), atomicLong0.shortValue());
      assertEquals((-2109.0), atomicLong0.doubleValue(), 0.01);
      assertEquals((-2109), atomicLong0.intValue());
      assertEquals((-2109L), atomicLong0.get());
      assertEquals("-2109", atomicLong0.toString());
      assertEquals((-2109L), atomicLong0.longValue());
      assertEquals((-2109.0F), atomicLong0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      AtomicLong atomicLong0 = new AtomicLong(0L);
      assertNotNull(atomicLong0);
      assertEquals(0, atomicLong0.intValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0L, atomicLong0.longValue());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0L, atomicLong0.get());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'R'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.remaining());
      assertEquals("R", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) atomicLong0, (Appendable) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      BigDecimal bigDecimal0 = new BigDecimal((-472.8369));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-472), bigDecimal0.shortValue());
      assertEquals((byte)40, bigDecimal0.byteValue());
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) bigDecimal0, (Type) class0);
      assertNotNull(jsonPrimitive0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals((short) (-472), bigDecimal0.shortValue());
      assertEquals((byte)40, bigDecimal0.byteValue());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      
      TypeToken<Double> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Excluder excluder0 = new Excluder();
      assertNotNull(excluder0);
      
      Excluder excluder1 = excluder0.disableInnerClassSerialization();
      assertFalse(excluder1.equals((Object)excluder0));
      assertNotNull(excluder1);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder1, excluder0);
      
      ExclusionStrategy exclusionStrategy0 = mock(ExclusionStrategy.class, new ViolatedAssumptionAnswer());
      Excluder excluder2 = excluder1.withExclusionStrategy(exclusionStrategy0, false, false);
      assertFalse(excluder0.equals((Object)excluder1));
      assertFalse(excluder1.equals((Object)excluder0));
      assertFalse(excluder2.equals((Object)excluder0));
      assertFalse(excluder2.equals((Object)excluder1));
      assertNotNull(excluder2);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder0, excluder2);
      assertNotSame(excluder1, excluder0);
      assertNotSame(excluder1, excluder2);
      assertNotSame(excluder2, excluder0);
      assertNotSame(excluder2, excluder1);
      
      Excluder excluder3 = excluder2.excludeFieldsWithoutExposeAnnotation();
      assertFalse(excluder0.equals((Object)excluder1));
      assertFalse(excluder0.equals((Object)excluder2));
      assertFalse(excluder1.equals((Object)excluder0));
      assertFalse(excluder1.equals((Object)excluder2));
      assertFalse(excluder2.equals((Object)excluder0));
      assertFalse(excluder2.equals((Object)excluder1));
      assertFalse(excluder3.equals((Object)excluder2));
      assertFalse(excluder3.equals((Object)excluder1));
      assertFalse(excluder3.equals((Object)excluder0));
      assertNotNull(excluder3);
      assertNotSame(excluder0, excluder3);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder0, excluder2);
      assertNotSame(excluder1, excluder3);
      assertNotSame(excluder1, excluder0);
      assertNotSame(excluder1, excluder2);
      assertNotSame(excluder2, excluder0);
      assertNotSame(excluder2, excluder1);
      assertNotSame(excluder2, excluder3);
      assertNotSame(excluder3, excluder2);
      assertNotSame(excluder3, excluder1);
      assertNotSame(excluder3, excluder0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1388);
      intArray0[1] = (-3304);
      intArray0[2] = (-2198);
      intArray0[3] = 102;
      intArray0[4] = 3285;
      intArray0[5] = (-1210);
      Excluder excluder4 = excluder3.withModifiers(intArray0);
      assertFalse(excluder4.equals((Object)excluder3));
      assertFalse(excluder4.equals((Object)excluder0));
      assertFalse(excluder4.equals((Object)excluder1));
      assertFalse(excluder4.equals((Object)excluder2));
      assertFalse(excluder0.equals((Object)excluder3));
      assertFalse(excluder0.equals((Object)excluder1));
      assertFalse(excluder0.equals((Object)excluder2));
      assertFalse(excluder1.equals((Object)excluder3));
      assertFalse(excluder1.equals((Object)excluder0));
      assertFalse(excluder1.equals((Object)excluder2));
      assertFalse(excluder2.equals((Object)excluder0));
      assertFalse(excluder2.equals((Object)excluder1));
      assertFalse(excluder2.equals((Object)excluder3));
      assertFalse(excluder3.equals((Object)excluder2));
      assertFalse(excluder3.equals((Object)excluder1));
      assertFalse(excluder3.equals((Object)excluder0));
      assertArrayEquals(new int[] {(-1388), (-3304), (-2198), 102, 3285, (-1210)}, intArray0);
      assertNotNull(excluder4);
      assertEquals(6, intArray0.length);
      assertNotSame(excluder4, excluder3);
      assertNotSame(excluder4, excluder0);
      assertNotSame(excluder4, excluder1);
      assertNotSame(excluder4, excluder2);
      assertNotSame(excluder0, excluder3);
      assertNotSame(excluder0, excluder4);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder0, excluder2);
      assertNotSame(excluder1, excluder3);
      assertNotSame(excluder1, excluder0);
      assertNotSame(excluder1, excluder4);
      assertNotSame(excluder1, excluder2);
      assertNotSame(excluder2, excluder0);
      assertNotSame(excluder2, excluder4);
      assertNotSame(excluder2, excluder1);
      assertNotSame(excluder2, excluder3);
      assertNotSame(excluder3, excluder2);
      assertNotSame(excluder3, excluder1);
      assertNotSame(excluder3, excluder4);
      assertNotSame(excluder3, excluder0);
      
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) excluder4, typeToken0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // GSON cannot serialize double
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Excluder excluder0 = new Excluder();
      assertNotNull(excluder0);
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      
      TypeToken<Double> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // GSON cannot serialize double
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Character> class0 = Character.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      
      try { 
        gson0.fromJson("out == null", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expecting character, got: out
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$15", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      
      TypeToken<Double> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      
      boolean boolean0 = gson0.serializeNulls();
      assertFalse(boolean0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      // Undeclared exception!
      try { 
        gson0.fromJson("out == null", (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      BigDecimal bigDecimal0 = new BigDecimal((-472.8369));
      assertNotNull(bigDecimal0);
      assertEquals((byte)40, bigDecimal0.byteValue());
      assertEquals((short) (-472), bigDecimal0.shortValue());
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) bigDecimal0, (Type) class0);
      assertNotNull(jsonPrimitive0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals((byte)40, bigDecimal0.byteValue());
      assertEquals((short) (-472), bigDecimal0.shortValue());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isString());
      
      JsonPrimitive jsonPrimitive1 = new JsonPrimitive("\\");
      assertFalse(jsonPrimitive1.equals((Object)jsonPrimitive0));
      assertNotNull(jsonPrimitive1);
      assertFalse(jsonPrimitive1.isJsonNull());
      assertFalse(jsonPrimitive1.isJsonObject());
      assertFalse(jsonPrimitive1.isBoolean());
      assertFalse(jsonPrimitive1.isNumber());
      assertTrue(jsonPrimitive1.isJsonPrimitive());
      assertTrue(jsonPrimitive1.isString());
      assertFalse(jsonPrimitive1.isJsonArray());
      
      String string0 = gson0.toJson((JsonElement) jsonPrimitive1);
      assertFalse(jsonPrimitive1.equals((Object)jsonPrimitive0));
      assertNotNull(string0);
      assertEquals("\"\\\\\"", string0);
      assertNotSame(jsonPrimitive1, jsonPrimitive0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(jsonPrimitive1.isJsonNull());
      assertFalse(jsonPrimitive1.isJsonObject());
      assertFalse(jsonPrimitive1.isBoolean());
      assertFalse(jsonPrimitive1.isNumber());
      assertTrue(jsonPrimitive1.isJsonPrimitive());
      assertTrue(jsonPrimitive1.isString());
      assertFalse(jsonPrimitive1.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Gson.FutureTypeAdapter<BigInteger> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<BigInteger>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      GsonBuilder gsonBuilder0 = gson0.newBuilder();
      assertNotNull(gsonBuilder0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      JsonElement jsonElement0 = gson0.toJsonTree((Object) gson_FutureTypeAdapter0);
      assertNotNull(jsonElement0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(jsonElement0.isJsonNull());
      assertFalse(jsonElement0.isJsonPrimitive());
      assertTrue(jsonElement0.isJsonObject());
      assertFalse(jsonElement0.isJsonArray());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<Byte> class0 = Byte.class;
      TypeToken<Byte> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class<? super Byte> class1 = typeToken0.getRawType();
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Byte", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      double double0 = 0.0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      charArray0[1] = '.';
      charArray0[2] = 'S';
      charArray0[3] = 'k';
      Class<Object> class2 = Object.class;
      Object object0 = gson0.fromJson(jsonElement0, class2);
      assertNotNull(object0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(jsonElement0.isJsonNull());
      assertFalse(jsonElement0.isJsonPrimitive());
      assertTrue(jsonElement0.isJsonObject());
      assertFalse(jsonElement0.isJsonArray());
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-42), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) null, (TypeToken<InstanceCreator<Long>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Gson.checkValidFloatingPoint(1040.1652878858752);
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      JsonArray jsonArray0 = new JsonArray();
      assertNotNull(jsonArray0);
      assertEquals(0, jsonArray0.size());
      assertFalse(jsonArray0.isJsonObject());
      assertFalse(jsonArray0.isJsonNull());
      assertFalse(jsonArray0.isJsonPrimitive());
      assertTrue(jsonArray0.isJsonArray());
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Class<Object> class0 = Object.class;
      Object object0 = gson0.fromJson((Reader) stringReader0, class0);
      assertNull(object0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      String string0 = "{\"x\":-99,\">\":false,\"\":{},\"a\":[99],\"b\":\"a string\"}";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.gson.internal.LinkedTreeMap$EntrySet");
      assertFalse(boolean0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      FieldNamingStrategy fieldNamingStrategy0 = gson0.fieldNamingStrategy();
      assertNotNull(fieldNamingStrategy0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      StringWriter stringWriter1 = new StringWriter();
      assertFalse(stringWriter1.equals((Object)stringWriter0));
      assertNotNull(stringWriter1);
      assertEquals("", stringWriter1.toString());
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "{\"x\":-99,\">\":false,\"\":{},\"a\":[99],\"b\":\"a string\"}", 7, 7);
      assertFalse(stringWriter1.equals((Object)stringWriter0));
      assertFalse(stringWriter2.equals((Object)stringWriter0));
      assertNotNull(stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertNotSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertNotSame(stringWriter2, stringWriter0);
      assertEquals("", stringWriter1.toString());
      assertEquals("", stringWriter2.toString());
      
      Excluder excluder0 = Excluder.DEFAULT;
      assertNotNull(excluder0);
      
      ExclusionStrategy exclusionStrategy0 = mock(ExclusionStrategy.class, new ViolatedAssumptionAnswer());
      Excluder excluder1 = excluder0.withExclusionStrategy(exclusionStrategy0, true, false);
      assertFalse(excluder1.equals((Object)excluder0));
      assertNotNull(excluder1);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder1, excluder0);
      
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<Object>();
      assertFalse(gson_FutureTypeAdapter1.equals((Object)gson_FutureTypeAdapter0));
      assertNotNull(gson_FutureTypeAdapter1);
      
      gson_FutureTypeAdapter0.setDelegate(gson_FutureTypeAdapter1);
      assertFalse(gson_FutureTypeAdapter0.equals((Object)gson_FutureTypeAdapter1));
      assertFalse(gson_FutureTypeAdapter1.equals((Object)gson_FutureTypeAdapter0));
      assertNotSame(gson_FutureTypeAdapter0, gson_FutureTypeAdapter1);
      assertNotSame(gson_FutureTypeAdapter1, gson_FutureTypeAdapter0);
      
      GsonBuilder gsonBuilder0 = gson0.newBuilder();
      assertNotNull(gsonBuilder0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "{\"x\":-99,\">\":false,\"\":{},\"a\":[99],\"b\":\"a string\"}");
      assertFalse(stringWriter3.equals((Object)stringWriter0));
      assertFalse(stringWriter1.equals((Object)stringWriter0));
      assertFalse(stringWriter2.equals((Object)stringWriter0));
      assertNotNull(stringWriter3);
      assertSame(stringWriter3, stringWriter2);
      assertNotSame(stringWriter3, stringWriter0);
      assertSame(stringWriter3, stringWriter1);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter3);
      assertNotSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter3);
      assertNotSame(stringWriter2, stringWriter0);
      assertEquals("{\"x\":-99,\">\":false,\"\":{},\"a\":[99],\"b\":\"a string\"}", stringWriter3.toString());
      assertEquals("{\"x\":-99,\">\":false,\"\":{},\"a\":[99],\"b\":\"a string\"}", stringWriter1.toString());
      assertEquals("{\"x\":-99,\">\":false,\"\":{},\"a\":[99],\"b\":\"a string\"}", stringWriter2.toString());
      
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.toJson((Writer) stringWriter3, (Object) stringWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.gson.internal.LinkedTreeMap$EntrySet");
      assertFalse(boolean0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      FieldNamingStrategy fieldNamingStrategy0 = gson0.fieldNamingStrategy();
      assertNotNull(fieldNamingStrategy0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      StringWriter stringWriter1 = new StringWriter();
      assertFalse(stringWriter1.equals((Object)stringWriter0));
      assertNotNull(stringWriter1);
      assertEquals("", stringWriter1.toString());
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "{\"x\":\"\",\"y\":false,\"\":true,\"a\":[99],\"b\":\"a string\",\"\":{}}", 7, 7);
      assertFalse(stringWriter1.equals((Object)stringWriter0));
      assertFalse(stringWriter2.equals((Object)stringWriter0));
      assertNotNull(stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertNotSame(stringWriter1, stringWriter0);
      assertNotSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertEquals("", stringWriter1.toString());
      assertEquals("", stringWriter2.toString());
      
      Excluder excluder0 = Excluder.DEFAULT;
      assertNotNull(excluder0);
      
      ExclusionStrategy exclusionStrategy0 = mock(ExclusionStrategy.class, new ViolatedAssumptionAnswer());
      Excluder excluder1 = excluder0.withExclusionStrategy(exclusionStrategy0, true, false);
      assertFalse(excluder1.equals((Object)excluder0));
      assertNotNull(excluder1);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder1, excluder0);
      
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      TypeAdapter<Object> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder1, typeToken0);
      assertFalse(excluder0.equals((Object)excluder1));
      assertFalse(excluder1.equals((Object)excluder0));
      assertNotNull(typeAdapter0);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder1, excluder0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      gson_FutureTypeAdapter0.setDelegate(typeAdapter0);
      assertFalse(excluder0.equals((Object)excluder1));
      assertFalse(excluder1.equals((Object)excluder0));
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder1, excluder0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      GsonBuilder gsonBuilder0 = gson0.newBuilder();
      assertNotNull(gsonBuilder0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "{\"x\":\"\",\"y\":false,\"\":true,\"a\":[99],\"b\":\"a string\",\"\":{}}");
      assertFalse(stringWriter3.equals((Object)stringWriter0));
      assertFalse(stringWriter1.equals((Object)stringWriter0));
      assertFalse(stringWriter2.equals((Object)stringWriter0));
      assertNotNull(stringWriter3);
      assertSame(stringWriter3, stringWriter1);
      assertNotSame(stringWriter3, stringWriter0);
      assertSame(stringWriter3, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter3);
      assertNotSame(stringWriter1, stringWriter0);
      assertNotSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter3);
      assertEquals("{\"x\":\"\",\"y\":false,\"\":true,\"a\":[99],\"b\":\"a string\",\"\":{}}", stringWriter3.toString());
      assertEquals("{\"x\":\"\",\"y\":false,\"\":true,\"a\":[99],\"b\":\"a string\",\"\":{}}", stringWriter1.toString());
      assertEquals("{\"x\":\"\",\"y\":false,\"\":true,\"a\":[99],\"b\":\"a string\",\"\":{}}", stringWriter2.toString());
      
      gson_FutureTypeAdapter0.toJson((Writer) stringWriter3, (Object) stringWriter1);
      assertFalse(stringWriter3.equals((Object)stringWriter0));
      assertFalse(stringWriter1.equals((Object)stringWriter0));
      assertFalse(stringWriter2.equals((Object)stringWriter0));
      assertSame(stringWriter3, stringWriter1);
      assertNotSame(stringWriter3, stringWriter0);
      assertSame(stringWriter3, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter3);
      assertNotSame(stringWriter1, stringWriter0);
      assertNotSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter3);
      assertEquals("{\"x\":\"\",\"y\":false,\"\":true,\"a\":[99],\"b\":\"a string\",\"\":{}}{}", stringWriter3.toString());
      assertEquals("{\"x\":\"\",\"y\":false,\"\":true,\"a\":[99],\"b\":\"a string\",\"\":{}}{}", stringWriter1.toString());
      assertEquals("{\"x\":\"\",\"y\":false,\"\":true,\"a\":[99],\"b\":\"a string\",\"\":{}}{}", stringWriter2.toString());
      
      Object object0 = gson_FutureTypeAdapter0.fromJson("{\"x\":\"\",\"y\":false,\"\":true,\"a\":[99],\"b\":\"a string\",\"\":{}}");
      assertNotNull(object0);
      
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        gson_FutureTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      GsonBuilder gsonBuilder0 = gson0.newBuilder();
      assertNotNull(gsonBuilder0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      JsonArray jsonArray0 = new JsonArray(1155);
      assertNotNull(jsonArray0);
      assertFalse(jsonArray0.isJsonPrimitive());
      assertEquals(0, jsonArray0.size());
      assertTrue(jsonArray0.isJsonArray());
      assertFalse(jsonArray0.isJsonNull());
      assertFalse(jsonArray0.isJsonObject());
      
      Class<Long> class0 = Long.class;
      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected NUMBER but was BEGIN_ARRAY at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      try { 
        gson0.fromJson((Reader) pipedReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      String string0 = "*;";
      StringReader stringReader0 = new StringReader("*;");
      assertNotNull(stringReader0);
      
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("long", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"*\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      StringReader stringReader0 = new StringReader("Hrl~s|o) ");
      assertNotNull(stringReader0);
      
      Class<Object> class0 = Object.class;
      Object object0 = gson0.fromJson((Reader) stringReader0, class0);
      assertNotNull(object0);
      assertEquals("Hrl~s|o)", object0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      // Undeclared exception!
      gson0.toJsonTree((Object) pipedReader0, (Type) class0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(8232);
      assertNotNull(atomicLongArray0);
      assertEquals(8232, atomicLongArray0.length());
      
      String string0 = gson0.toJson((Object) atomicLongArray0);
      assertNotNull(string0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertEquals(8232, atomicLongArray0.length());
      
      boolean boolean0 = gson0.serializeNulls();
      assertFalse(boolean0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      // Undeclared exception!
      gson0.toJsonTree((Object) atomicLongArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      // Undeclared exception!
      try { 
        gson0.getAdapter((TypeToken<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Gson gson0 = new Gson();
      Long long0 = new Long((-2917L));
      Class<Float> class0 = Float.TYPE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charsetEncoder0);
      JsonWriter jsonWriter0 = new JsonWriter(outputStreamWriter0);
      jsonWriter0.jsonValue("com.google.gson.internal.Primitives");
      Excluder excluder0 = Excluder.DEFAULT;
      Class<Short> class1 = Short.TYPE;
      JsonObject jsonObject0 = new JsonObject();
      Class<Double> class2 = Double.TYPE;
      gson0.fromJson((JsonElement) null, (Type) class1);
      AtomicLong atomicLong0 = new AtomicLong((-2917L));
      gson0.toJson((Object) byteArrayOutputStream0, (Appendable) outputStreamWriter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      gson0.fromJson((JsonElement) null, class0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Gson gson0 = new Gson();
      Short short0 = new Short((short)97);
      gson0.toJsonTree((Object) short0);
      StringWriter stringWriter0 = new StringWriter();
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      gson0.toJson((Object) gson_FutureTypeAdapter0, (Appendable) stringWriter0);
      assertEquals("{}", stringWriter0.toString());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      gson0.toJson((Object) bigInteger0, (Appendable) stringWriter0);
      Excluder excluder0 = Excluder.DEFAULT;
      Class<Double> class0 = Double.class;
      TypeToken<Double> typeToken0 = TypeToken.get(class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      gson0.toJson((Object) null, (Appendable) stringWriter0);
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) null, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      gson0.fieldNamingStrategy();
      Class<Byte> class0 = Byte.class;
      gson0.getAdapter(class0);
      Class<Object> class1 = Object.class;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class1);
      gson0.fromJson(jsonElement0, (Type) class0);
      Byte byte0 = new Byte((byte)1);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "(Gs$R]?r](+uIN");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // (Gs$R]?r](+uIN
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.class;
      TypeToken<Double> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonReader) null, type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson("out == null", (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Gson gson0 = new Gson();
      Long long0 = new Long(663L);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) long0);
      StringWriter stringWriter0 = new StringWriter();
      gson0.toJson((Object) long0, (Appendable) stringWriter0);
      gson0.toJson((Object) jsonElement0, (Appendable) stringWriter0);
      Excluder excluder0 = Excluder.DEFAULT;
      Class<Short> class0 = Short.TYPE;
      JsonElement jsonElement1 = gson0.toJsonTree((Object) stringWriter0);
      Class<Double> class1 = Double.TYPE;
      try { 
        gson0.fromJson(jsonElement1, (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected NUMBER but was BEGIN_OBJECT at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Gson.FutureTypeAdapter<DefaultDateTypeAdapter> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<DefaultDateTypeAdapter>();
      Gson.checkValidFloatingPoint(0.0);
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      int[] intArray0 = new int[9];
      intArray0[0] = 547;
      intArray0[1] = 2695;
      intArray0[2] = 84;
      intArray0[4] = 233;
      String string0 = " is not a valid double value as per JSON specification. To override this behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.";
      Class<Object> class0 = Object.class;
      try { 
        gson0.fromJson(" is not a valid double value as per JSON specification. To override this behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 6 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: float. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.newJsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.TYPE;
      gson0.fromJson((String) null, (Type) class0);
      gson0.toJsonTree((Object) null);
      boolean boolean0 = gson0.htmlSafe();
      assertTrue(boolean0);
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      JsonArray jsonArray1 = jsonArray0.deepCopy();
      JsonArray jsonArray2 = jsonArray1.getAsJsonArray();
      Class<Float> class0 = Float.TYPE;
      try { 
        gson0.fromJson((JsonElement) jsonArray2, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected NUMBER but was BEGIN_ARRAY at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      gson0.fieldNamingStrategy();
      Class<Byte> class0 = Byte.class;
      gson0.newBuilder();
      gson0.getAdapter(class0);
      Class<Object> class1 = Object.class;
      gson0.fromJson("  ", class1);
      Class<AtomicLong> class2 = AtomicLong.class;
      try { 
        gson0.fromJson("{\"fruit\":true,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a long but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      PipedReader pipedReader0 = new PipedReader(694);
      JsonReader jsonReader0 = gson0.newJsonReader(pipedReader0);
      Class<Float> class0 = Float.TYPE;
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLong> class0 = AtomicLong.class;
      try { 
        gson0.fromJson("J", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"J\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      gson0.getAdapter(class0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.fieldNamingStrategy();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      gson0.fieldNamingStrategy();
      String string0 = "  ";
      Class<Byte> class0 = Byte.class;
      gson0.getAdapter(class0);
      Class<Object> class1 = Object.class;
      gson0.fromJson("  ", class1);
      String string1 = "{\"fruit\":true,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}";
      Class<AtomicLong> class2 = AtomicLong.class;
      try { 
        gson0.fromJson("{\"fruit\":true,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a long but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      gson0.fromJson("L", (Type) class0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      StringWriter stringWriter0 = new StringWriter();
      gson0.toJson((JsonElement) jsonArray0, (Appendable) stringWriter0);
      Class<String> class0 = String.class;
      gson0.fromJson("r-~Rg%U", class0);
      StringReader stringReader0 = new StringReader("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":-99,\"value\":true,\"value2\":false,\"number\":\"1\"}");
      stringReader0.close();
      gson0.newJsonReader(stringReader0);
      Gson.FutureTypeAdapter<BigInteger> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<BigInteger>();
      JsonWriter jsonWriter0 = gson0.newJsonWriter(stringWriter0);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.write(jsonWriter0, bigInteger0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray(0);
      Class<Long> class0 = Long.class;
      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected NUMBER but was BEGIN_ARRAY at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Gson.FutureTypeAdapter<String> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<String>();
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      JsonNull jsonNull1 = jsonNull0.deepCopy();
      Class<Short> class0 = Short.TYPE;
      gson0.fromJson((JsonElement) jsonNull1, (Type) class0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      Class<Short> class0 = Short.TYPE;
      int int0 = 1;
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(1);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) atomicLongArray0);
      Class<Double> class1 = Double.TYPE;
      Class<Short> class2 = Short.TYPE;
      try { 
        gson0.fromJson(jsonElement0, (Type) class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected NUMBER but was BEGIN_ARRAY at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(1068);
      gson0.toJson((Object) atomicLongArray0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) null);
      assertTrue(gson0.htmlSafe());
      assertEquals("null", string0);
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Gson.checkValidFloatingPoint(1040.1652878858752);
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      MockFile mockFile0 = new MockFile(". Forgot to register a type adapter?", "{\"x\":\"hello\",\"y\":99,\"z\":true,\"a\":[],\"b\":{}}");
      File file0 = MockFile.createTempFile(". Forgot to register a type adapter?", ". Forgot to register a type adapter?", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "{\"x\":\"hello\",\"y\":99,\"z\":true,\"a\":[],\"b\":{}}", 0, 0);
      gson0.toJson((JsonElement) jsonArray0, (Appendable) printWriter0);
      PipedWriter pipedWriter0 = new PipedWriter();
      int int0 = 0;
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(0);
      gson0.toJsonTree((Object) atomicLongArray0);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(pipedWriter0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Gson gson0 = new Gson();
      boolean boolean0 = gson0.htmlSafe();
      assertFalse(gson0.serializeNulls());
      assertTrue(boolean0);
      
      Gson.FutureTypeAdapter<Double> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Double>();
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) gson_FutureTypeAdapter0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.Gson$FutureTypeAdapter cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.Gson$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Gson gson0 = new Gson();
      Float float0 = Float.valueOf(1.0F);
      Class<Character> class0 = Character.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) float0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Gson gson0 = new Gson();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      Float float0 = new Float((-567.6F));
      Class<Double> class0 = Double.TYPE;
      gson0.toJsonTree((Object) float0, (Type) class0);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)47;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.signum();
      gson0.toJson((Object) bigInteger0);
      Integer integer0 = new Integer((-1));
      gson0.toJsonTree((Object) integer0);
      Gson.FutureTypeAdapter<HashMap<AtomicLongArray, String>> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<HashMap<AtomicLongArray, String>>();
      MockFile mockFile0 = new MockFile("java.math.BigInteger@0000000033");
      String string0 = "99";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "99");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 99
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Gson gson0 = new Gson();
      MockDate mockDate0 = new MockDate((-2464), (-2464), (-33), 1180, (-1));
      Type type0 = null;
      mockDate0.toInstant();
      gson0.toJson((Object) null);
      MockDate mockDate1 = new MockDate(1180, 0, (-42), 0, (-42));
      gson0.toJsonTree((Object) mockDate1);
      mockDate0.setTime((-33));
      // Undeclared exception!
      try { 
        gson0.toJson((Object) mockDate0, (Type) null, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0, (Appendable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: short. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Gson gson0 = new Gson();
      Long long0 = new Long(663L);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) long0);
      StringWriter stringWriter0 = new StringWriter();
      gson0.toJson((Object) long0, (Appendable) stringWriter0);
      gson0.toJson((Object) jsonElement0, (Appendable) stringWriter0);
      Excluder excluder0 = Excluder.DEFAULT;
      Class<Double> class0 = Double.class;
      TypeToken<Double> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Double> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(typeAdapter0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      Class<Float> class0 = Float.TYPE;
      Class<Byte> class1 = Byte.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) class1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: byte. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Gson gson0 = new Gson();
      gson0.toJsonTree((Object) null);
      Reader reader0 = null;
      // Undeclared exception!
      try { 
        gson0.newJsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      gson0.toJsonTree((Object) string0);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonReader jsonReader0 = null;
      Class<String> class0 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class0);
      TypeToken.get((Type) class0);
      Class<AtomicLong> class1 = AtomicLong.class;
      TypeToken.get(class1);
      typeToken0.getType();
      Class<Byte> class2 = Byte.class;
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) typeToken0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.lang.String. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) class0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.Gson$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Gson gson0 = new Gson();
      Long long0 = new Long((-2917L));
      Class<Float> class0 = Float.TYPE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charsetEncoder0);
      JsonWriter jsonWriter0 = new JsonWriter(outputStreamWriter0);
      Charset.defaultCharset();
      JsonWriter jsonWriter1 = jsonWriter0.name("99");
      // Undeclared exception!
      try { 
        gson0.toJson((Object) long0, (Type) class0, jsonWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Gson gson0 = new Gson();
      Float float0 = new Float(0.0);
      gson0.toJson((Object) float0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Gson gson0 = new Gson();
      Long long0 = new Long((-2917L));
      Class<Float> class0 = Float.TYPE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charsetEncoder0);
      JsonWriter jsonWriter0 = new JsonWriter(outputStreamWriter0);
      jsonWriter0.jsonValue("com.google.gson.internal.Primitives");
      Charset.defaultCharset();
      JsonWriter jsonWriter1 = jsonWriter0.name("99");
      // Undeclared exception!
      try { 
        gson0.toJson((Object) long0, (Type) class0, jsonWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("{\"fruit\":\"Apple\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      gson0.newJsonReader(stringReader0);
      // Undeclared exception!
      try { 
        stringReader0.mark((-3224));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Read-ahead limit < 0
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.serializeNulls();
      Gson.FutureTypeAdapter<String> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<String>();
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.toJsonTree("#GvF*!_9eDX?>=/L(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Gson.FutureTypeAdapter<AtomicLongArray> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<AtomicLongArray>();
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      longArray0[2] = 3004L;
      longArray0[3] = (-1L);
      longArray0[4] = 0L;
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(longArray0);
      int int0 = 0;
      LongUnaryOperator longUnaryOperator0 = LongUnaryOperator.identity();
      atomicLongArray0.getAndUpdate(0, longUnaryOperator0);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.write((JsonWriter) null, atomicLongArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Gson.FutureTypeAdapter<DefaultDateTypeAdapter> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<DefaultDateTypeAdapter>();
      Gson.checkValidFloatingPoint(0.0);
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      int[] intArray0 = new int[9];
      intArray0[0] = 547;
      intArray0[1] = 2695;
      intArray0[2] = 84;
      intArray0[3] = 4170;
      intArray0[4] = 233;
      intArray0[5] = (-2389);
      intArray0[6] = 0;
      intArray0[7] = 3002;
      intArray0[8] = (-1756);
      Excluder excluder1 = excluder0.withModifiers(intArray0);
      Excluder excluder2 = excluder1.excludeFieldsWithoutExposeAnnotation();
      ExclusionStrategy exclusionStrategy0 = mock(ExclusionStrategy.class, new ViolatedAssumptionAnswer());
      Excluder excluder3 = excluder2.withExclusionStrategy(exclusionStrategy0, false, false);
      Class<Long> class0 = Long.class;
      TypeToken<Long> typeToken0 = TypeToken.get(class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder3, typeToken0);
      boolean boolean0 = gson0.serializeNulls();
      assertFalse(boolean0);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Integer>();
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<Integer>();
      gson_FutureTypeAdapter0.setDelegate(gson_FutureTypeAdapter1);
      assertFalse(gson_FutureTypeAdapter1.equals((Object)gson_FutureTypeAdapter0));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      Class<Double> class0 = Double.class;
      TypeToken<Double> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Double> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      assertNotNull(typeAdapter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Gson.FutureTypeAdapter<Short> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Short>();
      String string0 = "b;W";
      StringReader stringReader0 = new StringReader("b;W");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.fromJson("com.google.gson.internal.bind.TreeTypeAdapter");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      PipedReader pipedReader0 = new PipedReader();
      try { 
        gson0.fromJson((Reader) pipedReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLong> class0 = AtomicLong.class;
      gson0.fromJson("", class0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.checkValidFloatingPoint((-1.0));
      int int0 = 1718;
      PipedReader pipedReader0 = new PipedReader(1718);
      Class<BigDecimal> class0 = BigDecimal.class;
      try { 
        gson0.fromJson((Reader) pipedReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      Gson gson0 = new Gson();
      Class<DefaultDateTypeAdapter> class0 = DefaultDateTypeAdapter.class;
      gson0.htmlSafe();
      // Undeclared exception!
      gson0.toJsonTree((Object) jsonReader0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      Excluder excluder1 = excluder0.disableInnerClassSerialization();
      int[] intArray0 = new int[6];
      intArray0[0] = (-1257);
      intArray0[1] = (-1738);
      intArray0[2] = 3338;
      intArray0[3] = 1149;
      intArray0[4] = 0;
      intArray0[5] = (-568);
      Excluder excluder2 = excluder1.withModifiers(intArray0);
      Excluder excluder3 = excluder2.excludeFieldsWithoutExposeAnnotation();
      Excluder excluder4 = excluder3.withVersion(1149);
      gson0.toJsonTree((Object) excluder4);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toJson((Object) gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      Class<String> class1 = String.class;
      TypeToken<String> typeToken1 = TypeToken.get(class1);
      Class<? super String> class2 = typeToken1.getRawType();
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class2;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class1;
      TypeToken.getParameterized(class2, typeArray0);
      gson0.getDelegateAdapter((TypeAdapterFactory) null, typeToken0);
      StringReader stringReader0 = new StringReader("{\"x\":\"hello\",\"z\":true,\"a\":[],\"b\":{}}");
      Class<Integer> class3 = Integer.class;
      try { 
        gson0.fromJson((Reader) stringReader0, class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected an int but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      Class<Integer> class0 = Integer.class;
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = (-1310);
      intArray0[2] = 0;
      intArray0[3] = 15;
      intArray0[4] = 39;
      intArray0[5] = 0;
      intArray0[6] = 506;
      excluder0.withModifiers(intArray0);
      TypeToken<Integer> typeToken0 = TypeToken.get(class0);
      typeToken0.toString();
      TypeAdapter<Integer> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      assertNotNull(typeAdapter0);
      
      Class<BigInteger> class1 = BigInteger.class;
      TypeToken<BigInteger> typeToken1 = TypeToken.get(class1);
      TypeAdapter<BigInteger> typeAdapter1 = gson0.getAdapter(typeToken1);
      assertNotNull(typeAdapter1);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      Class<Double> class0 = Double.class;
      TypeToken<Double> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Double> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      assertNotNull(typeAdapter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":-99,\"b\":{}}");
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, (-3990), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }
}
