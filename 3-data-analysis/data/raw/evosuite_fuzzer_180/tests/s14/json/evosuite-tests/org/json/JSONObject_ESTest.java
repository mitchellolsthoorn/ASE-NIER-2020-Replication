/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 17:59:52 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Desktop;
import java.awt.MultipleGradientPaint;
import java.awt.TrayIcon;
import java.io.BufferedWriter;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.net.Proxy;
import java.net.StandardProtocolFamily;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.security.CryptoPrimitive;
import java.sql.JDBCType;
import java.sql.PseudoColumnUsage;
import java.sql.RowIdLifetime;
import java.time.DayOfWeek;
import java.util.Collection;
import java.util.Formatter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.jws.WebParam;
import javax.tools.DocumentationTool;
import javax.tools.StandardLocation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = JSONObject.stringToValue(",+:WwhmC*W79)");
      assertEquals(",+:WwhmC*W79)", object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        JSONObject.stringToNumber(",:}/\"[{;=#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [,:}/\"[{;=#] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("9(0%Mg");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9(0%Mg\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"\"\":null,\" at \":false,\"[\":true,\"] not a string.\":[true,{}],\"b\":{},\"x\":{}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 4 [character 5 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject.indent((Writer) null, (-792));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      StringWriter stringWriter0 = new StringWriter(44);
      JSONObject.writeValue(stringWriter0, hashMap0, 44, 87);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("7(;^");
      assertEquals("7(;^", object0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.putOpt("java.io.StringWriter@0000000004", "2EQb|Koosc{0qz(");
      jSONObject0.optNumber("java.io.StringWriter@0000000004");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.put("", (-2248.369F));
      try { 
        jSONObject0.getBigInteger("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Locale locale0 = new Locale("l]B", "l]B");
      JSONObject jSONObject0 = new JSONObject(locale0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("l]B");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      jSONObject0.write((Writer) mockPrintWriter0);
      assertEquals(13, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-2673.9671206375");
      assertEquals((short) (-2673), number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<PushbackReader> linkedList0 = new LinkedList<PushbackReader>();
      jSONObject0.put("am", (Collection<?>) linkedList0);
      JSONArray jSONArray0 = (JSONArray)jSONObject0.remove("am");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query(jSONPointer0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.query("");
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(bigDecimal0, stringArray0);
      String string0 = jSONObject0.optString("sho", stringArray0[1]);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"le\":[],\"Expected '\":true,\"isintern\":\"\",\"value\":true,\"value2\":true,\"byt\":\"a Etring\",\"Unterminated string\":99,\"false\":{\"x\":-99},\"x\":false}");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("pu");
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      jSONObject0.optQuery(jSONPointer0);
      assertEquals(9, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"le\":true,\"size\":true,\"isintern\":\"Red\",\"value\":true,\"value2\":true,\"byt\":\"a Etring\",\"Unterminated string\":99,\"false\":{}}");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery(jSONPointer0);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"fruit\":{},\"size\":\"Large\",\"color\":\"byt\",\"value\":true,\"value2\":false,\"number\":\"1\",\"fl\":true}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      byte[] byteArray0 = new byte[9];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject0.optNumber("ha", (Number) bigInteger0);
      assertEquals(7, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.valueOf((-1.0));
      Number number0 = jSONObject0.optNumber("7X^9VJ", (Number) bigDecimal0);
      assertEquals((byte) (-1), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{\"Null Zpointer\":14,\"] i not a number.\":full}");
      jSONObject0.put("{\"Null Zpointer\":14,\"] i not a number.\":full}", (-3865));
      long long0 = jSONObject0.optLong("{\"Null Zpointer\":14,\"] i not a number.\":full}");
      assertEquals(3, jSONObject0.length());
      assertEquals((-3865L), long0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat("o[-55!$", (-23.67039F));
      assertEquals((-23.67039F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{");
      jSONObject0.optDouble("r'7;sTjs*@", 0.0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"true\":null,\" at \":false,\"[\":true,\"] not a string.\":[[]],\"b\":{},\"x\":{}}");
      jSONObject0.optBigInteger("] is not a valid number.", (BigInteger) null);
      assertEquals(6, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.valueOf((-2986L));
      BigInteger bigInteger1 = jSONObject0.optBigInteger("isisEmpty", bigInteger0);
      assertEquals((byte)86, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"hello\",\"y\":-99,\"z\":true,\"-99\":[],\"b\":false,\"istoLowerCase\":-99}");
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte) (-121);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject0.optBigInteger("=", bigInteger0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal("h)v{_dyWj", (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(5253);
      BigDecimal bigDecimal0 = BigDecimal.valueOf((-1187.028453509));
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal(",:]}/\"[{;=#", bigDecimal0);
      assertEquals((short) (-1187), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.valueOf(169.664573395);
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("java.math.BigInteger@0000000002", bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Integer integer0 = new Integer(1085);
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.accumulate("04=[Dl;%+/7U!RH1", "04=[Dl;%+/7U!RH1");
      boolean boolean0 = jSONObject0.isNull("04=[Dl;%+/7U!RH1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("Ir5vxUy#_d^");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(60);
      JSONObject jSONObject1 = jSONObject0.accumulate("java.io.LineNumberReader@0000000001", "-99");
      long long0 = jSONObject1.getLong("java.io.LineNumberReader@0000000001");
      assertEquals((-99L), long0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(" j^-J!y%", (-1L));
      float float0 = jSONObject0.getFloat(" j^-J!y%");
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, "toString", 15, (-1046));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.writeValue(pipedWriter0, ",+:WwhmC*W79)", 1230, (-3937));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0, 424, (-319));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 417, 417);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Locale locale0 = new Locale("l]B", "l]B");
      JSONObject jSONObject0 = new JSONObject(locale0);
      // Undeclared exception!
      jSONObject0.toString(1344);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LinkedList<JDBCType> linkedList0 = new LinkedList<JDBCType>();
      JDBCType jDBCType0 = JDBCType.INTEGER;
      linkedList0.offerFirst(jDBCType0);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"JSON does not allow non-finite numbers.\":{\"x\":-99},\"] could not be converted to BigInteger.\":true,\"un\":\"a string\",\"]\":99,\"[\":null,\"xx\":false}");
      HashMap<MultipleGradientPaint.ColorSpaceType, CryptoPrimitive> hashMap0 = new HashMap<MultipleGradientPaint.ColorSpaceType, CryptoPrimitive>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<CharArrayReader> linkedList0 = new LinkedList<CharArrayReader>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<List<String>, Long> hashMap0 = new HashMap<List<String>, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(charArrayWriter0, stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("8l`9]*[jX|tR", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "1");
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 864.78335);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("-0", stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{enV7kU},[.@P3HWks+");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 8 [character 9 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("pgIv)|~xqHtYzw])q5S", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name pgIv)|~xqHtYzw])q5S, locale zh_CN
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("Q!?^", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(hashMap0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-3330));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -3330
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"true\":null,\"to\":false,\"[\":true,\"] not a string.\":[],\"b\":{}}");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.write((Writer) charArrayWriter0, 4, 370);
      assertEquals(2481, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"Misplaced key.\":0.0,\"islongValue\":[]}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{\"Misplaced key.\":0.0,\"islongValue\":[]}");
      jSONObject0.write((Writer) mockPrintWriter0, (-1886), (-830));
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write((Writer) stringWriter0, (int) (byte)0, (int) (byte)35);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      Double double0 = new Double(1.0);
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      hashMap0.put(double0, dayOfWeek0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.write((Writer) charArrayWriter0, 370, 370);
      assertEquals(66, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Locale locale0 = new Locale("l]B", "l]B");
      JSONObject jSONObject0 = new JSONObject(locale0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("l]B");
      // Undeclared exception!
      jSONObject0.write((Writer) mockPrintWriter0, 1981, 1981);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"Misplaced key.\":0.0}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{\"Misplaced key.\":0.0}");
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0, (-1886), (-830));
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockFile mockFile0 = new MockFile("pollFirst");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockFileWriter0);
      assertNotNull(jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-0");
      Object object0 = JSONObject.wrap(stringReader0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Object object0 = JSONObject.wrap(boolean0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Character character0 = new Character('4');
      Object object0 = JSONObject.wrap(character0);
      assertEquals('4', object0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Integer integer0 = new Integer(4);
      Object object0 = JSONObject.wrap(integer0);
      assertEquals(4, object0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Byte byte0 = new Byte((byte)65);
      Object object0 = JSONObject.wrap(byte0);
      assertEquals((byte)65, object0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject.testValidity("Duplicate key \"");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Double double0 = new Double((-1184.618999110801));
      JSONObject.testValidity(double0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Float float0 = new Float(30.601923F);
      JSONObject.testValidity(float0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-99");
      assertEquals((-99), object0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("f2lse");
      assertEquals("f2lse", object0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("null");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("false");
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("true");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"Null Zpointer\":14,\"] is not a number.\":null}");
      boolean boolean0 = jSONObject0.similar(jSONObject0);
      assertTrue(boolean0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(16);
      JSONObject.quote(",:J]}/\"[;=#", (Writer) stringWriter0);
      assertEquals("\",:J]}/\\\"[;=#\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote("F(l>HCS/NQl", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3);
      JSONObject.quote((String) null, (Writer) charArrayWriter0);
      assertEquals("\"\"", charArrayWriter0.toString());
      assertEquals(2, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, pipedWriter0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("UhQaJz=FNELX", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("java.math.BigInteger@0000000002", 10.0);
      String string0 = jSONObject1.optString("java.math.BigInteger@0000000002", "^w=`7[x_+");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      String string0 = jSONObject0.optString("5K-?9C($e#@#^(`l P", "");
      assertEquals(1, jSONObject0.length());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<PushbackReader> linkedList0 = new LinkedList<PushbackReader>();
      jSONObject0.put("toM", (Collection<?>) linkedList0);
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigDecimal bigDecimal0 = new BigDecimal((long) 4, mathContext0);
      Number number0 = jSONObject0.optNumber("toM", (Number) bigDecimal0);
      assertSame(bigDecimal0, number0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Number number0 = jSONObject0.optNumber(")'YOWpzMMt*rbY)nHD", (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(14);
      JSONObject jSONObject1 = jSONObject0.putOpt("getslice", "getslice");
      long long0 = jSONObject1.optLong("getslice", (-2851L));
      assertEquals(1, jSONObject0.length());
      assertEquals((-2851L), long0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"\"", 0.0);
      long long0 = jSONObject1.optLong("\"\"", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      long long0 = jSONObject0.optLong("5%r qxuI$;m", 14L);
      assertEquals(14L, long0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      int int0 = jSONObject0.optInt("clo", 0);
      assertEquals(0, int0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(",:J]}/\"[;=#", 3);
      float float0 = jSONObject0.optFloat(",:J]}/\"[;=#", (-2339.9F));
      assertEquals(3.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat("Bad value from toJSONString: ", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("isdoubleValue", (-1808.209849995));
      assertEquals((-1808.209849995), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"true\":null,\"to\":false,\"[\":true,\"] not a string.\":[],\"b\":{}}");
      jSONObject0.put("{\"true\":null,\"to\":false,\"[\":true,\"] not a string.\":[],\"b\":{}}", (-1L));
      boolean boolean0 = jSONObject0.optBoolean("{\"true\":null,\"to\":false,\"[\":true,\"] not a string.\":[],\"b\":{}}", true);
      assertEquals(6, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"Misplaced key.\":0.0,\"islongValue\":[]}");
      boolean boolean0 = jSONObject0.optBoolean("{\"Misplaced key.\":0.0,\"islongValue\":[]}", false);
      assertFalse(jSONObject0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.KEY_WRAP;
      HashMap<StandardProtocolFamily, BufferedWriter> hashMap0 = new HashMap<StandardProtocolFamily, BufferedWriter>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("f2lse", (-4478.59F));
      Class<CryptoPrimitive> class0 = CryptoPrimitive.class;
      CryptoPrimitive cryptoPrimitive1 = jSONObject0.optEnum(class0, "f2lse", cryptoPrimitive0);
      assertSame(cryptoPrimitive0, cryptoPrimitive1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt(",:j]}/\"[;=#");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = JSONObject.numberToString(bigInteger0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(70);
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      boolean boolean0 = jSONObject0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isE", 1794.92F);
      try { 
        jSONObject1.getBoolean("isE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("nam", "nam");
      Object object0 = jSONObject0.get("nam");
      assertEquals("nam", object0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<MultipleGradientPaint.ColorSpaceType> class0 = MultipleGradientPaint.ColorSpaceType.class;
      jSONObject0.optEnum(class0, "2E*c`OGA");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"le\":true,\"size\":true,\"isintern\":\"Red\",\"value\":true,\"value2\":true,\"byt\":\"a Etring\",\"Unterminated string\":99,\"false\":{}}");
      int int0 = jSONObject0.length();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<String> set0 = jSONObject0.keySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"getpeekLast\":false,\"JSON does not allow non-finite numbers.\":\"a string\",\"] could not be converted to BigInteger.\":[],\"key\":null,\"xx\":\"a string\"}");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(5, map0.size());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"Null Zpointer\":14,\"] i not a number.\":full}");
      jSONObject0.toString(68);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = JSONObject.writeValue(stringWriter0, set0, 115, 115);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Double> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Double>();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.writeValue(pipedWriter0, hashMap0, (-988), (-988));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"JSON does not allow non-finite numbers.\":{\"0\":-99},\"] could not be converted to BigInteger.\":-99,\"hashCode\":\"a string\",\"]\":99,\"[\":null,\"xx\":[],\"0\":true}");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(7, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.writeValue(stringWriter0, (Object) null, 54, 54);
      assertEquals("null", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Object object0 = JSONObject.wrap(charset0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Object object0 = JSONObject.wrap(bigDecimal0);
      assertSame(bigDecimal0, object0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = (BigInteger)JSONObject.wrap(bigInteger0);
      assertEquals((byte)0, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Double double0 = new Double(1.0);
      Object object0 = JSONObject.wrap(double0);
      assertEquals(1.0, object0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Float float0 = new Float((-2244.0F));
      Object object0 = JSONObject.wrap(float0);
      assertEquals((-2244.0F), object0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Long long0 = new Long(258L);
      Object object0 = JSONObject.wrap(long0);
      assertEquals(258L, object0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Short short0 = new Short((short)12);
      Object object0 = JSONObject.wrap(short0);
      assertEquals((short)12, object0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.wrap(object0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = (JSONArray)JSONObject.wrap(jSONArray0);
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(2, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "7yGKHZkq%\":k");
      jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<PipedInputStream, PipedWriter> hashMap0 = new HashMap<PipedInputStream, PipedWriter>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.put("] is not an int.", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("03000");
      assertEquals("03000", object0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-0");
      assertEquals(-0.0, object0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("03000");
      assertEquals(3000, number0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-0");
      assertEquals(-0.0, number0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("2EQ|Kosc{0qz(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("neg");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "-0");
      JSONObject jSONObject1 = new JSONObject((Object) "-0");
      boolean boolean0 = jSONObject1.similar(jSONObject0);
      assertTrue(boolean0);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.similar("f2lse");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong(")I</W&i[fFX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      try { 
        jSONObject0.getString(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = JSONObject.quote("=9/OH");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<RoundingMode> class0 = RoundingMode.class;
      try { 
        jSONObject0.getEnum(class0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt(",:j]}/\"[;=#", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(14);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"JSON does not allow non-finite numbers.\":{\"x\":-99,\"xx\":true},\"] could not be converted to BigInteger.\":[],\"~0\":\"a string\",\"]\":99,\"[\":null,\"xx\":false}");
      JSONObject jSONObject0 = new JSONObject("{\"JSON does not allow non-finite numbers.\":{\"x\":-99,\"xx\":true},\"] could not be converted to BigInteger.\":[],\"~0\":\"a string\",\"]\":99,\"[\":null,\"xx\":false}");
      JSONObject jSONObject1 = jSONObject0.append("{\"JSON does not allow non-finite numbers.\":{\"x\":-99,\"xx\":true},\"] could not be converted to BigInteger.\":[],\"~0\":\"a string\",\"]\":99,\"[\":null,\"xx\":false}", stringReader0);
      try { 
        jSONObject1.putOnce("{\"JSON does not allow non-finite numbers.\":{\"x\":-99,\"xx\":true},\"] could not be converted to BigInteger.\":[],\"~0\":\"a string\",\"]\":99,\"[\":null,\"xx\":false}", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"{\"JSON does not allow non-finite numbers.\":{\"x\":-99,\"xx\":true},\"] could not be converted to BigInteger.\":[],\"~0\":\"a string\",\"]\":99,\"[\":null,\"xx\":false}\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("gn;O&+j\"!!_JY{", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("\b", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HashMap<Character, DayOfWeek> hashMap0 = new HashMap<Character, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("f2lse", false);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(11);
      JSONObject jSONObject0 = new JSONObject(byteBuffer0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("o[-55!$", "o[-55!$");
      String string0 = jSONObject1.optString("o[-55!$");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.KEY_WRAP;
      HashMap<StandardProtocolFamily, BufferedWriter> hashMap0 = new HashMap<StandardProtocolFamily, BufferedWriter>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Class<CryptoPrimitive> class0 = CryptoPrimitive.class;
      CryptoPrimitive cryptoPrimitive1 = jSONObject0.optEnum(class0, "f2lse", cryptoPrimitive0);
      jSONObject0.putOnce("f2lse", cryptoPrimitive1);
      jSONObject0.optNumber("f2lse");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(4);
      jSONObject0.put(";`oj6_xZjsC=QKI,", (double) 4);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Number number0 = jSONObject0.optNumber(";`oj6_xZjsC=QKI,", (Number) bigDecimal0);
      assertEquals(4.0, number0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HashMap<Double, DayOfWeek> hashMap0 = new HashMap<Double, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject(1234);
      jSONObject0.putOpt("getslice", hashMap0);
      long long0 = jSONObject0.optLong("getslice", (long) 1234);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1234L, long0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("isEmpty", "isEmpty");
      long long0 = jSONObject1.optLong("isEmpty");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("+?m");
      long long0 = jSONObject1.optLong("+?m");
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject(")'YOWpzMMt*rbY)nHD");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      JSONObject jSONObject1 = jSONObject0.put("org.json.JSONWriter", (Collection<?>) linkedList0);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("org.json.JSONWriter");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("VS[|]l");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("og.jon.JSONTokener", (Object) "og.jon.JSONTokener");
      int int0 = jSONObject1.optInt("og.jon.JSONTokener", 276);
      assertEquals(276, int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<PushbackReader> linkedList0 = new LinkedList<PushbackReader>();
      jSONObject0.put("nam", (Collection<?>) linkedList0);
      int int0 = jSONObject0.optInt("nam", (-4));
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("+?m");
      int int0 = jSONObject0.optInt("+?m", 57);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"JSON does not allow non-finite numbers.\":{\"] is not a JSONArray.\":-99,\"] not found.\":true},\"] could not be converted to BigInteger.\":[99],\"~0\":[false],\"]\":99,\"[\":true,\"] not found.\":false}");
      JSONObject jSONObject0 = new JSONObject("{\"JSON does not allow non-finite numbers.\":{\"] is not a JSONArray.\":-99,\"] not found.\":true},\"] could not be converted to BigInteger.\":[99],\"~0\":[false],\"]\":99,\"[\":true,\"] not found.\":false}");
      JSONObject jSONObject1 = jSONObject0.append("{\"JSON does not allow non-finite numbers.\":{\"] is not a JSONArray.\":-99,\"] not found.\":true},\"] could not be converted to BigInteger.\":[99],\"~0\":[false],\"]\":99,\"[\":true,\"] not found.\":false}", stringReader0);
      float float0 = jSONObject1.optFloat("{\"JSON does not allow non-finite numbers.\":{\"] is not a JSONArray.\":-99,\"] not found.\":true},\"] could not be converted to BigInteger.\":[99],\"~0\":[false],\"]\":99,\"[\":true,\"] not found.\":false}", 3809.8303F);
      assertEquals(3809.8303F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"JSON does not allow non-finite numbers.\":{\"Null key.\":-99,\"xx\":true},\"] could not be converted to BigInteger.\":[null],\"~0\":\"a string\",\"]\":99,\"[\":null,\"xx\":false}");
      JSONObject jSONObject1 = jSONObject0.increment("{\"JSON does not allow non-finite numbers.\":{\"Null key.\":-99,\"xx\":true},\"] could not be converted to BigInteger.\":[null],\"~0\":\"a string\",\"]\":99,\"[\":null,\"xx\":false}");
      float float0 = jSONObject1.optFloat("{\"JSON does not allow non-finite numbers.\":{\"Null key.\":-99,\"xx\":true},\"] could not be converted to BigInteger.\":[null],\"~0\":\"a string\",\"]\":99,\"[\":null,\"xx\":false}");
      assertEquals(7, jSONObject0.length());
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      JSONObject jSONObject1 = jSONObject0.append("n", charArrayWriter0);
      double double0 = jSONObject1.optDouble("n", (double) 1);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(bigInteger0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("signum", 15);
      double double0 = jSONObject1.optDouble("signum", 1259.8450799);
      assertEquals(15.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("HH");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("HH", bigInteger0);
      assertEquals((byte)1, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isE", 1794.92F);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = jSONObject1.optBigInteger("isE", bigInteger0);
      assertEquals((byte)2, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.putOpt("2A'd1ueJdUTknf:K,NR", double0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.optBigInteger("2A'd1ueJdUTknf:K,NR", bigInteger0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(14);
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject jSONObject1 = jSONObject0.putOpt("", bigInteger0);
      jSONObject1.optBigInteger("", bigInteger0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("getremove", "getremove");
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.optBigInteger("getremove", bigInteger0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      HashMap<RowIdLifetime, StandardProtocolFamily> hashMap0 = new HashMap<RowIdLifetime, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("{\"Null Zpointer\":false,\"] is not a number.\":null,\"\r\":{},\"index %d is out of bounds - the array has %d elements\":[],\"iterator\":99}", (Collection<?>) linkedList0);
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("{\"Null Zpointer\":false,\"] is not a number.\":null,\"\r\":{},\"index %d is out of bounds - the array has %d elements\":[],\"iterator\":99}", bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isE", 1794.92F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("isE", bigDecimal0);
      assertEquals((byte)2, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("|<Kt.", true);
      boolean boolean0 = jSONObject0.optBoolean("|<Kt.", false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Long long0 = new Long((-1846L));
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "-0");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("-", 1434.1F);
      JSONObject jSONObject1 = jSONObject0.increment("-");
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("+?m");
      JSONObject jSONObject2 = jSONObject1.increment("+?m");
      assertSame(jSONObject0, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"JSON does not allow non-finite numbers.\":{\"x\":-99,\"xx\":true},\"] could not be converted to BigInteger.\":[],\"~0\":\"a string\",\"]\":99,\"[\":null,\"xx\":false}");
      JSONObject jSONObject0 = new JSONObject("{\"JSON does not allow non-finite numbers.\":{\"x\":-99,\"xx\":true},\"] could not be converted to BigInteger.\":[],\"~0\":\"a string\",\"]\":99,\"[\":null,\"xx\":false}");
      jSONObject0.append("{\"JSON does not allow non-finite numbers.\":{\"x\":-99,\"xx\":true},\"] could not be converted to BigInteger.\":[],\"~0\":\"a string\",\"]\":99,\"[\":null,\"xx\":false}", stringReader0);
      try { 
        jSONObject0.increment("{\"JSON does not allow non-finite numbers.\":{\"x\":-99,\"xx\":true},\"] could not be converted to BigInteger.\":[],\"~0\":\"a string\",\"]\":99,\"[\":null,\"xx\":false}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000085].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("\r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.accumulate("04=[Dl;%+/7U!RH1", "04=[Dl;%+/7U!RH1");
      String string0 = jSONObject0.getString("04=[Dl;%+/7U!RH1");
      assertEquals("04=[Dl;%+/7U!RH1", string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] not found.", (-1.0));
      try { 
        jSONObject1.getString("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, DocumentationTool.Location> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, DocumentationTool.Location>();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      HashMap<Proxy.Type, PseudoColumnUsage> hashMap0 = new HashMap<Proxy.Type, PseudoColumnUsage>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("@I", (Object) bigDecimal0);
      long long0 = jSONObject0.getLong("@I");
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<PushbackReader> linkedList0 = new LinkedList<PushbackReader>();
      JSONObject jSONObject1 = jSONObject0.put("+?m", (Collection<?>) linkedList0);
      try { 
        jSONObject1.getLong("+?m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<TrayIcon.MessageType, Desktop.Action> hashMap0 = new HashMap<TrayIcon.MessageType, Desktop.Action>();
      jSONObject0.put("getlongValue", (Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("getlongValue");
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"Null Zpointer\":\"a string\",\"] is not a number.\":null,\"spl\":99}");
      JSONObject jSONObject1 = jSONObject0.putOnce("{\"Null Zpointer\":\"a string\",\"] is not a number.\":null,\"spl\":99}", "vrzC8W!9fxtdR;8Q");
      try { 
        jSONObject1.getJSONObject("{\"Null Zpointer\":\"a string\",\"] is not a number.\":null,\"spl\":99}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000028] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"Null Zpointer\":99,\"] is not a number.\":null,\"JSONObject[\":99}");
      jSONObject0.putOnce("{\"Null Zpointer\":99,\"] is not a number.\":null,\"JSONObject[\":99}", "vrzC8W!9fxtdR;8Q");
      try { 
        jSONObject0.getJSONArray("{\"Null Zpointer\":99,\"] is not a number.\":null,\"JSONObject[\":99}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000027] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("");
      int int0 = jSONObject0.getInt("");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "");
      try { 
        jSONObject1.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.putOnce("true", bigDecimal0);
      jSONObject0.getNumber("true");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("nam", "nam");
      try { 
        jSONObject1.getNumber("nam");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment(" j^-J!y%");
      float float0 = jSONObject1.getFloat(" j^-J!y%");
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("].", (Object) jSONObject0);
      try { 
        jSONObject1.getFloat("].");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000006666] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("java.math.BigInteger@0000000002", 10.0);
      assertFalse(jSONObject0.isEmpty());
      
      double double0 = jSONObject1.getDouble("java.math.BigInteger@0000000002");
      assertEquals(10.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("+?m");
      try { 
        jSONObject0.getBigDecimal("+?m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("+?m");
      boolean boolean0 = jSONObject0.optBoolean("+?m");
      assertFalse(jSONObject0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1184.271));
      assertEquals("-1184.271", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(60);
      JSONObject jSONObject1 = jSONObject0.append("-99", "-99");
      jSONObject1.append("-99", "-99");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.put("java.math.BigInteger@0000000002", 10.0);
      try { 
        jSONObject0.append("java.math.BigInteger@0000000002", bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.math.BigInteger@0000000002] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<PushbackReader> linkedList0 = new LinkedList<PushbackReader>();
      jSONObject0.put("toM", (Collection<?>) linkedList0);
      jSONObject0.accumulate("toM", jSONObject0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("isEmpty", "isEmpty");
      try { 
        jSONObject1.getBoolean("isEmpty");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject(locale_Category0, stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 1130.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, DocumentationTool.Location> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, DocumentationTool.Location>();
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm0 = Formatter.BigDecimalLayoutForm.SCIENTIFIC;
      hashMap0.put(formatter_BigDecimalLayoutForm0, (DocumentationTool.Location) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      HashMap<PipedInputStream, PipedWriter> hashMap0 = new HashMap<PipedInputStream, PipedWriter>();
      PipedWriter pipedWriter0 = new PipedWriter();
      hashMap0.put((PipedInputStream) null, pipedWriter0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{t36EoOw:j8k;c54zBP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 19 [character 20 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("7yGKHZkq%\":k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] is not a valid number.\":false,\"JSON does not allow non-finite numbers.\":{\"x\":-99},\"] could not be converted to BigInteger.\":true,\"toLowerCase\":\"a string\",\"]\":99,\"[\":null,\"xx\":false}");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(7, map0.size());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("-99");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("Misplaced key.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("o[-55!$");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Character.UnicodeScript> linkedList0 = new LinkedList<Character.UnicodeScript>();
      jSONObject0.put("{\"Null Zpointer\":{\"org.json.JSONObject\":true,\"un\":99},\"] is not a number.\":null,\"\r\":{},\"index %d is out of bounds - the array has %d elements\":[99]}", (Collection<?>) linkedList0);
      boolean boolean0 = jSONObject0.has("{\"Null Zpointer\":{\"org.json.JSONObject\":true,\"un\":99},\"] is not a number.\":null,\"\r\":{},\"index %d is out of bounds - the array has %d elements\":[99]}");
      assertFalse(jSONObject0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      HashMap<StandardLocation, WebParam.Mode> hashMap0 = new HashMap<StandardLocation, WebParam.Mode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(56);
      double double0 = jSONObject0.optDouble("/Vsh5f1?r)RyAL");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query("{z7Y0<M1[?WVR]1v#!(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("Gb6");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(70);
      int int0 = jSONObject0.optInt("u!LwPICLvIy");
      assertEquals(0, int0);
  }
}
