/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 17:48:22 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.XML;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XML_ESTest extends XML_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = XML.stringToValue("9|.2)ob");
      assertEquals("9|.2)ob", object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = XML.escape("utjqKZ<H`,; 9U;o");
      assertEquals("utjqKZ&lt;H`,; 9U;o", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = XML.escape("\f");
      assertEquals("&#xc;", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = XML.unescape("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONObject jSONObject0 = XML.toJSONObject("<content><bytes>java.lang.Byte@0000000007</bytes><bytes>java.lang.Byte@0000000010</bytes><bytes>java.lang.Byte@0000000013</bytes><bytes>java.lang.Byte@0000000016</bytes><bytes>java.lang.Byte@0000000019</bytes><bytes>java.lang.Byte@0000000022</bytes><bytes>java.lang.Byte@0000000025</bytes><empty>java.lang.Boolean@0000000028</empty></content>", true);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<n(>null</n(>");
      JSONObject jSONObject0 = XML.toJSONObject((Reader) stringReader0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = XML.escape("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        XML.unescape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.XML", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, Character> hashMap0 = new HashMap<Object, Character>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1597, (Map<?, ?>) hashMap0);
      // Undeclared exception!
      XML.toString((Object) jSONArray0, "empty");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(240, 240);
      String string0 = XML.toString((Object) jSONArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      XML.toJSONObject("]BmQWF]6GIp-p<!)!$k", true);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        XML.toJSONObject((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        XML.toJSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Byl4{e@0K<\"JFy1");
      try { 
        XML.toJSONObject((Reader) stringReader0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at 15 [character 16 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_5BmQWF]6GIp-p<!)!$k");
      // Undeclared exception!
      XML.toJSONObject((Reader) stringReader0, false);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        XML.toJSONObject((Reader) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<\">java.langSstring@0000000001</\">");
      try { 
        XML.toJSONObject((Reader) stringReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unclosed tag >java.langSstring@0000000001</ at 34 [character 35 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Missing '>' after '<!'.");
      // Undeclared exception!
      XML.toJSONObject((Reader) stringReader0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        XML.toJSONObject((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        XML.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        XML.noSpace((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.XML", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        XML.escape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = XML.toString((Object) null, "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":{},\"b\":{}}");
      assertEquals("<{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":{},\"b\":{}}>null</{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":{},\"b\":{}}>", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cXVPy0]Ye");
      JSONObject jSONObject0 = XML.toJSONObject((Reader) stringReader0, true);
      String string0 = XML.toString((Object) jSONObject0, (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = XML.stringToValue("xDnww[");
      assertEquals("xDnww[", object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object object0 = XML.stringToValue(" [character ");
      assertEquals(" [character ", object0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object object0 = XML.stringToValue("null");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Object, Character> hashMap0 = new HashMap<Object, Character>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      String string0 = XML.toString((Object) jSONArray1, (String) null);
      assertEquals("<array></array>", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = XML.toString((Object) null);
      assertEquals("\"null\"", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONObject jSONObject0 = XML.toJSONObject("", false);
      jSONObject0.accumulate("{\"M~b;e8>v\":[]}", "");
      String string0 = XML.toString((Object) jSONObject0);
      assertEquals("<{\"M~b;e8>v\":[]}/>", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "_BmQWF]6GIp-p<!)!$k");
      String string0 = XML.toString((Object) jSONObject0, "&lt;/");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONObject jSONObject0 = XML.toJSONObject("]");
      String string0 = XML.toString((Object) jSONObject0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object object0 = XML.stringToValue("0000");
      assertEquals("0000", object0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object object0 = XML.stringToValue("-0");
      assertEquals(-0.0, object0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Object object0 = XML.stringToValue("8je]f:!b=?");
      assertEquals("8je]f:!b=?", object0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Object object0 = XML.stringToValue("-9");
      assertEquals((-9), object0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Object object0 = XML.stringToValue("1FuXlf@v[LyuBhE%$");
      assertEquals("1FuXlf@v[LyuBhE%$", object0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONObject jSONObject0 = XML.toJSONObject("<gf_~>null</gf_~>");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Object object0 = XML.stringToValue("false");
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Object object0 = XML.stringToValue("true");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Object object0 = XML.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<GF_~><$></$></GF_~>");
      JSONObject jSONObject0 = XML.toJSONObject((Reader) stringReader0, false);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      try { 
        XML.toJSONObject("<\n></\n>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Misshaped tag at 3 [character 1 line 2]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONObject jSONObject0 = XML.toJSONObject("<content><bytes>java.lang.Byte@0000000005</bytes><bytes>java.lang.Byte@0000000008</bytes><bytes>java.lang.Byte@0000000011</bytes><bytes>java.lang.Byte@0000000014</bytes><bytes>java.lang.Byte@0000000017</bytes><bytes>java.lang.Byte@0000000020</bytes><bytes>java.lang.Byte@0000000023</bytes><q_x(:>java.lang.Integer@0000000026</q_x(:><empty>java.lang.Boolean@0000000029</empty></content>");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      try { 
        XML.toJSONObject("R&c<Wr!~F\"h=+Qsb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Misshaped tag at 7 [character 8 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      try { 
        XML.toJSONObject("5SGMAI<o/Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Misshaped tag at 10 [character 11 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      try { 
        XML.toJSONObject("<45[C{=j>$n[>java.lang.String@0000000001</45[C{=j>$n[>", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Misshaped close tag at 47 [character 48 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      try { 
        XML.toJSONObject("<45[C{=j>$n[>java.lang.String@0000000001</45[C{=j>$n[>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Misshaped close tag at 47 [character 48 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      try { 
        XML.toJSONObject("<gf_~>ull</gf_~S->", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Mismatched gf_~ and gf_~S- at 17 [character 18 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      try { 
        XML.toJSONObject("<&lt;a[/><bytes>java.lang.Byte@0000000005</bytes><bytes>java.lang.Byte@0000000008</bytes><bytes>java.lang.Byte@0000000011</bytes><bytes>java.lang.Byte@0000000014</bytes><bytes>java.lang.Byte@0000000017</bytes><bytes>java.lang.Byte@0000000020</bytes><bytes>java.lang.Byte@0000000023</bytes><bytes>java.lang.Byte@0000000026</bytes><bytes>java.lang.Byte@0000000029</bytes><bytes>java.lang.Byte@0000000032</bytes><bytes>java.lang.Byte@0000000035</bytes><bytes>java.lang.Byte@0000000038</bytes><bytes>java.lang.Byte@0000000041</bytes><bytes>java.lang.Byte@0000000044</bytes><bytes>java.lang.Byte@0000000047</bytes><bytes>java.lang.Byte@0000000050</bytes><bytes>java.lang.Byte@0000000053</bytes><bytes>java.lang.Byte@0000000056</bytes><bytes>java.lang.Byte@0000000059</bytes><empty>java.lang.Boolean@0000000062</empty></&lt;a[/>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Mismatched close tag &lt;a at 819 [character 820 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      try { 
        XML.toJSONObject("<&lt;/><bytes>java.lang.Byte@0000000005</bytes><bytes>java.lang.Byte@0000000008</bytes><bytes>java.lang.Byte@0000000011</bytes><bytes>java.lang.Byte@0000000014</bytes><bytes>java.lang.Byte@0000000017</bytes><bytes>java.lang.Byte@0000000020</bytes><bytes>java.lang.Byte@0000000023</bytes><bytes>java.lang.Byte@0000000026</bytes><bytes>java.lang.Byte@0000000029</bytes><bytes>java.lang.Byte@0000000032</bytes><bytes>java.lang.Byte@0000000035</bytes><bytes>java.lang.Byte@0000000038</bytes><bytes>java.lang.Byte@0000000041</bytes><bytes>java.lang.Byte@0000000044</bytes><bytes>java.lang.Byte@0000000047</bytes><bytes>java.lang.Byte@0000000050</bytes><bytes>java.lang.Byte@0000000053</bytes><bytes>java.lang.Byte@0000000056</bytes><bytes>java.lang.Byte@0000000059</bytes><_BmQWF]6GIp-p<!)!$k>java.lang.Integer@0000000062</_BmQWF]6GIp-p<!)!$k><empty>java.lang.Boolean@0000000065</empty></&lt;/>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Bad character in a name at 782 [character 783 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{^'j4 ;dm7Kyb<?f8");
      JSONObject jSONObject0 = XML.toJSONObject((Reader) stringReader0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONObject jSONObject0 = XML.toJSONObject("d/}oF<!^C^uOC-%C>YI9");
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      XML.toJSONObject("_BmQWF]6GIp-p<!)!$k");
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      try { 
        XML.noSpace("utjqKZ<H`,; 9U;o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 'utjqKZ<H`,; 9U;o' contains a space character.
         //
         verifyException("org.json.XML", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      try { 
        XML.noSpace("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Empty string.
         //
         verifyException("org.json.XML", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XML.noSpace("-99");
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = XML.unescape("{&amp;quot;fruit&amp;quot;:&amp;quot;apple&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;large&amp;quot;,&amp;quot;color&amp;quot;:&amp;quot;red&amp;quot;,&amp;quot;value&amp;quot;:null,&amp;quot;value2&amp;quot;:false,&amp;quot;number&amp;quot;:&amp;quot;1&amp;quot;}");
      assertEquals("{&quot;fruit&quot;:&quot;apple&quot;,&quot;size&quot;:&quot;large&quot;,&quot;color&quot;:&quot;red&quot;,&quot;value&quot;:null,&quot;value2&quot;:false,&quot;number&quot;:&quot;1&quot;}", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = XML.unescape("&#x");
      assertEquals("&#x", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = XML.escape("-->");
      assertEquals("--&gt;", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = XML.escape("(~+FdMEx.Xe%N4tu'");
      assertEquals("&#x7f;(~+FdMEx.Xe%N4tu&apos;", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = XML.escape("&#x");
      assertEquals("&amp;#x", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = XML.escape("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":{},\"number\":\"1\"}");
      assertEquals("{&quot;fruit&quot;:&quot;Apple&quot;,&quot;size&quot;:&quot;Large&quot;,&quot;color&quot;:&quot;Red&quot;,&quot;value&quot;:true,&quot;value2&quot;:{},&quot;number&quot;:&quot;1&quot;}", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSONObject jSONObject0 = XML.toJSONObject("M~b;e8>v");
      jSONObject0.put("$", (Object) jSONObject0);
      // Undeclared exception!
      try { 
        XML.toString((Object) jSONObject0, "GF_~");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XML xML0 = new XML();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = XML.toString((Object) "M~b;e8>v", (String) null);
      assertNotNull(string0);
  }
}
