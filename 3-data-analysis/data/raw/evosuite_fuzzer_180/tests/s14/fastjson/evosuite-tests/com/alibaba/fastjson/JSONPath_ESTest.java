/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 17:55:00 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.chrono.JapaneseDate;
import java.time.chrono.MinguoDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.TimeZone;
import java.util.UUID;
import java.util.Vector;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("true");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "syntax error :";
      stringArray0[1] = "true";
      stringArray0[2] = "{\"x\":true,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      stringArray0[3] = "RLIKE";
      stringArray0[4] = "{\"x\":99,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      stringArray0[5] = "true";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, "{\"x\":true,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", "{\"x\":true,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      assertEquals(6, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull(3089, 989);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("E8(khOuW");
      int[] intArray0 = new int[8];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      boolean boolean0 = JSONPath.set((Object) jSONPath_JSONPathParser0, "/stackTrace/10", (Object) jSONPath_MultiIndexSegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("width", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2637, 10, 93);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -27
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-1), true, true, 81, 81);
      SQLDataException sQLDataException0 = new SQLDataException();
      JSONPath.set((Object) dataTruncation0, "[D>KHLMI", (Object) sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" RbYTeK[K{y&4");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"x\":\"hello\",\"joda\":7,\"z\":\"a string\",\"a\":\"a string\",\"b\":{}}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("52uq8y>1");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue((-1417L));
      assertEquals((-1365.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-99");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(1172L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"0Pwg8K{");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-1417L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(">=$?NDZ~+\"A");
      jSONPath_JSONPathParser0.readOp();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(1827L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("99");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*icC,Xwj_0>WZO`");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" RbYTeK[K{y&4");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".-g}`#!:/hrC)lZ");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-g}`#!\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      DataTruncation dataTruncation0 = new DataTruncation(1024, false, false, 425, 0);
      JSONPath jSONPath0 = new JSONPath("A", serializeConfig0, parserConfig0);
      int[] intArray0 = new int[7];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("fastjson.parser.autoTypeAccept", "[C6},*IXpqR3{Cat|", 92, intArray0, dataTruncation0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "A", (Object) batchUpdateException0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("z");
      Integer integer0 = new Integer(45);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("\\-", "\\-");
      boolean boolean0 = jSONPath0.containsValue((Object) integer0, (Object) sQLNonTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("true");
      Long long0 = new Long((-1963L));
      Object object0 = jSONPath0.eval((Object) long0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("es/k");
      assertEquals("es/k", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("7jTr|K-;3H+}");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(7L, object0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("E8(khOuW");
      String string0 = jSONPath_JSONPathParser0.readName();
      assertEquals("E8", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("0vD8T1e{F:4}$s");
      long long0 = jSONPath_JSONPathParser0.readLongValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("&4T+e[g;");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("getCurrent");
      jSONPath0.init();
      assertEquals("getCurrent", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("C=|", "C=|", true);
      JSONPath jSONPath0 = JSONPath.compile("/Lddfa");
      Short short0 = new Short((short)46);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("/Lddfa", "org.springframework.security.core.userdetails.User", (-1730));
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, jSONPath0, short0, sQLRecoverableException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("REG_MATCH");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("REG_MATCH", "REG_MATCH");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("1.2.68", sQLFeatureNotSupportedException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org", (String) null, 3382, sQLFeatureNotSupportedException0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLNonTransientConnectionException0);
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, batchUpdateException0, sQLTimeoutException0);
      assertEquals(5, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("0v^$");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('_');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/aBha!yPklK");
      jSONPath_JSONPathParser0.accept('/');
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("writeNull", serializeConfig0, parserConfig0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fastjson.parser.autoTypeSupport", "fastjson.parser.deny.internal", sQLTimeoutException0);
      Object object0 = jSONPath_ArrayAccessSegment0.eval(jSONPath0, jSONPath0, sQLIntegrityConstraintViolationException0);
      assertSame(sQLIntegrityConstraintViolationException0, object0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("06fJwCBvob75=E", serializeConfig0, parserConfig0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("fastjson.parser.autoTypeSupport", "fastjson.parser.autoTypeAccept", jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringOpSegement0, jSONPath_StringOpSegement0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, sQLRecoverableException0, jSONPath_FilterSegment0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("~+u2K", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 0, 56320);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, parserConfig0, "GT");
      assertNotNull(arrayList0);
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(3968, false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("true", serializeConfig0, parserConfig0);
      String string0 = jSONPath0.toJSONString();
      assertEquals("\"true\"", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("qKxaNbd[6,o}");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("[");
      int int0 = JSONPath.size((Object) jSONPath_Segment0, "[");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(";0nk|#nl(");
      boolean boolean0 = jSONPath0.setPropertyValue(";0nk|#nl(", ";0nk|#nl(", 5614464919154503228L, ";0nk|#nl(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("in");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("in", (String) null, 2183, sQLFeatureNotSupportedException0);
      boolean boolean0 = jSONPath0.set((Object) "in", (Object) sQLIntegrityConstraintViolationException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object object0 = JSONPath.reserveToObject((Object) null, (String[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(")c9N!(y $_J^9");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", (String) null, (Throwable) null);
      boolean boolean0 = jSONPath0.removePropertyValue(sQLInvalidAuthorizationSpecException0, "{\"not\":null,\"com.google.common.collect.\":{},\"list_item\":null,\"com.alibaba.fastjson.JSONPath$FilterGroup\":\"hello\",\"x\":[[]]}", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object object0 = JSONPath.read("true", "true");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      Set<?> set0 = JSONPath.keySet((Object) jSONPath_MultiIndexSegment0, "xkn_");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("d", "d", 2480);
      Set<?> set0 = JSONPath.keySet((Object) sQLDataException0, "/stackTrace/8");
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("'");
      Set<?> set0 = jSONPath0.keySet((Object) "'");
      assertFalse(set0.contains("'"));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("yB[7B\"y3VsZK*<");
      Float float0 = new Float(10.0F);
      Object object0 = jSONPath0.getPropertyValue(float0, "", (-4270347329889690746L));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("~+u2K", serializeConfig0, parserConfig0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Collection<Object> collection0 = jSONPath0.getPropertyValues(bigInteger0);
      Object object0 = jSONPath0.getPropertyValue(collection0, "fastjson.parser.autoTypeSupport", 601L);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("yB[7B\"y3VsZK*<");
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{Y0NP");
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("deserialze", serializeConfig0, parserConfig0);
      Object object0 = jSONPath0.getArrayItem((Object) null, 3612);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("nin");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "USo7.v";
      stringArray0[1] = "USo7.v";
      stringArray0[2] = "nin";
      stringArray0[3] = "nin";
      stringArray0[4] = "USo7.v";
      stringArray0[5] = "nin";
      stringArray0[6] = "nin";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      int int0 = jSONPath0.evalSize(jSONPath_MultiPropertySegment0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("java/lang/String", serializeConfig0, parserConfig0);
      int int0 = jSONPath0.evalSize(parserConfig0);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("true");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_Operator0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Z#6r<fM0Q8;&");
      Long long0 = new Long((-1499L));
      Set<?> set0 = jSONPath0.evalKeySet(long0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("e");
      Set<?> set0 = jSONPath0.evalKeySet("e");
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[->g");
      Object object0 = JSONPath.eval((Object) jSONPath0, "~");
      assertSame(object0, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = JSONPath.compare("*", "*");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = JSONPath.compare("s\tn#", "");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = JSONPath.compare("BbR", "Jf");
      assertEquals((-8), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
      try { 
        JSONPath.size((Object) class0, "fastjson.parser.autoTypeSupport");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("oFGy_@y_<D");
      DataTruncation dataTruncation0 = new DataTruncation(43, false, false, 27, 62, sQLTimeoutException0);
      int int0 = JSONPath.size((Object) dataTruncation0, "..");
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONPath jSONPath0 = JSONPath.compile("\"R<R4T3aG\"F6=");
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      // Undeclared exception!
      jSONPath0.setPropertyValue(bigInteger0, "V-LK;5P[", 120L, javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("NEb?]h'!ce\u0003w}9lr6l", serializeConfig0, parserConfig0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue("/stakTrace", "NEb?]h'!ce\u0003w}9lr6l", (-1101L), sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/8");
      Float float0 = new Float((double) (-3547));
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, "/stackTrace/8", 1114L, float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) javaBeanSerializer0, "tue", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-1), false, true, 81, 81);
      SQLDataException sQLDataException0 = new SQLDataException();
      // Undeclared exception!
      try { 
        JSONPath.set((Object) dataTruncation0, "-", (Object) sQLDataException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("CSB");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      // Undeclared exception!
      jSONPath0.set((Object) bigDecimal0, (Object) null, false);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath jSONPath0 = JSONPath.compile("qKxaNbd[6,o}");
      boolean boolean0 = jSONPath0.set((Object) jSONPath_Operator0, (Object) "[", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":[],\"a\":[],\"b\":{}}", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "{\"x\":\"hello\",\"y\":7,\"z\":[],\"a\":[],\"b\":{}}", (Object) serializeConfig0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"x\":\"hello\",\"y\":7,\"z\":[],\"a\":[],\"b\":{}}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      DataTruncation dataTruncation0 = new DataTruncation(91, false, false, 0, 0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) parserConfig0, (Object) dataTruncation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("x8)D}edU$kB|5CudV*6");
      DataTruncation dataTruncation0 = new DataTruncation(45, true, true, 745, 45);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) dataTruncation0, (Object) jSONPath_WildCardSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : x8)D}edU$kB|5CudV*6
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<JSONPath> class0 = JSONPath.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "applyName";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(javaBeanSerializer0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "VI[g U-!h=IuH3[]K";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(sQLClientInfoException0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "qKxaNbd[6,o}";
      Float float0 = new Float((float) 6044326033226007548L);
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(float0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "com.alibaba.fastjson.serializer.JSONAwareSerializer";
      stringArray0[1] = "/";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject("com.alibaba.fastjson.serializer.JSONAwareSerializer", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "in";
      stringArray0[1] = "-";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray("-", stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "qKxaNbd[6,o}";
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath_SizeSegment0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("oFGy_@y_/<D");
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      jSONPath0.removePropertyValue(javaBeanSerializer0, "oFGy_@y_/<D", false);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("true");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, "true", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("parseRest");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, (Object) null, 91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) classLoader0, "R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("06fJwCBvob75=E");
      // Undeclared exception!
      JSONPath.remove((Object) jSONPath0, "rlike");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockDate mockDate0 = new MockDate(631, 45380, 48, 120, 111, 48);
      JSONPath.remove((Object) mockDate0, "[~([<g%,iG#m");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) "", "fastjson.parser.deny");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) "~", "~");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("writeReference");
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("[->g", "Iz0uvae");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ParserConfig.global = null;
      // Undeclared exception!
      try { 
        JSONPath.read("Z7ybiS,RR(,B", "[->g");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("JSONPath$Operator", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.addDenyInternal("Metaspace");
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      JSONPath.isInt(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("DateTimeFormatter");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLSyntaxErrorException0);
      JSONPath.paths((Object) parserConfig0);
      LocalDate localDate0 = MockLocalDate.now();
      JapaneseDate japaneseDate0 = MockJapaneseDate.from(localDate0);
      JSONPath.paths((Object) japaneseDate0, serializeConfig0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("fastjson.parser.deny", (String[]) null, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) jSONPath_FilterSegment0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<JSONPath.MultiPropertySegment> class0 = JSONPath.MultiPropertySegment.class;
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) class0, ":false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("cau");
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", (SerializeConfig) null, parserConfig0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("O)^", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : O)^
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("H,rj&@DP^", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : H,rj&@DP^
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("C0q[.L<sn<;CN1?");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("getResolveStatus");
      Class<String> class0 = String.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("true");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      serializeConfig0.clearSerializers();
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues("true");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("yB[7B\"y3VsZK*<");
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue("", "yB[7B\"y3VsZK*<", 13L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("$VALUES");
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(";)`lx&!BA8~=5+w>b;R");
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSONPath jSONPath0 = new JSONPath("index must > 0, but ", serializeConfig0, (ParserConfig) null);
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("evalKeySet error : ");
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem(javaBeanSerializer0, (-2045));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.parser.autoTypeSupport", "~>5_=4pA7[", parserConfig0, (-1787), featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[2];
      // Undeclared exception!
      try { 
        JSONPath.extract("[", "qKxaNbd[6,o}", parserConfig0, 44, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[6];
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "fastjson.parser.autoTypeAccept", parserConfig0, (-149), featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSONPath.extract("RbYTeK", " SO[pn,$,j", parserConfig0, (-877), featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax.  SO[pn,$,j
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("[->g", "~");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "U {XtM{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0");
      JSONPath jSONPath0 = new JSONPath("^=X%2}}2h");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ^=X%2}}2h
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("tue");
      Class<String> class0 = String.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, (Map<String, String>) null);
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("java.util.concurrent.atomic.DoubleAdder", (SerializeConfig) null, parserConfig0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(sQLRecoverableException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) class0, "fastjson.parser.safeMode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONPath.eval((Object) "Jf:", "VI[g U-!h=IuH3[]K");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("qKxaNbd[6,o}");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("[");
      JSONPath.eval((Object) jSONPath_Segment0, "qKxaNbd[6,o}");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) "null", "lgK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("KAF_[");
      jSONPath0.eval((Object) "KAF_[");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("C", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) "C");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(">=$?NDZ~+\"A");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) jSONPath_SizeSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. >=$?NDZ~+\"A
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(bigInteger0, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Long long0 = new Long((-811277319855450459L));
      JSONPath jSONPath0 = new JSONPath("oFGy_@y_<D");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      MinguoDate minguoDate0 = MockMinguoDate.now();
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(jSONPath_WildCardSegment0, "!sM", (long) long0, minguoDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("yB[7B\"y3VsZK*<");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      // Undeclared exception!
      jSONPath1.deepSet(jSONPath1, "C", 4389238039309364973L, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("E(khOuW", serializeConfig0, (ParserConfig) null);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(classLoader0, "keySet", (-1511L), jSONPath_Operator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("X");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("X", '1');
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-2));
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(jSONReaderScanner0, "org.joda.", 653L, jSONPath_ArrayAccessSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path X, segement org.joda.
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("<w=");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(javaBeanSerializer0, "wQKqN73", arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("true");
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) "]J");
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(vector0, vector0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("tue");
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(jSONPath0, (List<Object>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("kG(;");
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues((Object) null, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) sQLNonTransientConnectionException0, "{\"unclosed str, \":\"a string\",\"joda\":7,\"/stackTrace/2\":null,\"!\":99,\"b\":{\"unclosed str, \":true}}", (Object) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"unclosed str, \":\"a string\",\"joda\":7,\"/stackTrace/2\":null,\"!\":99,\"b\":{\"unclosed str, \":true}}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("qKxaNbd[6,o}");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      JSONPath jSONPath0 = new JSONPath("qKxaNbd[6,o}");
      DataTruncation dataTruncation0 = new DataTruncation(401, true, true, 401, 41, sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) dataTruncation0, (Object) jSONPath_JSONPathParser0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"o\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Zm'");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("AllowUnQuotedFieldNames", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) "AllowUnQuotedFieldNames", (Object) mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Q![");
      Object object0 = new Object();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("Q![", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) jSONPath_JSONPathParser0, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : Q![
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) "US", "2");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) jSONPath_SizeSegment0, "{\"x\":true,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"x\":true,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compare("DateTimeFormatter", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("b[6Ab2:H|.%");
      Double double0 = new Double(0.0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) double0, objectArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"6Ab2\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) "tv:87", "java.awt.Point", (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path java.awt.Point
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("true");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      jSONPath0.deepSet(jSONPath_Operator0, "true", 338L, (Object) null);
      assertEquals("true", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("i");
      MockDate mockDate0 = new MockDate((-843L));
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, mockDate0, 64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class org.evosuite.runtime.mock.java.util.MockDate
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[e=");
      Short short0 = new Short((short)2010);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, (Object) null, 14, short0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("REG_MATCH");
      long[] longArray0 = new long[9];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("com.alibaba.fastjson.serializer.SimplePropertyPreFilter", longArray0, false);
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("yyyy-MM-dd HH:mm:ss", false);
      jSONPath_PropertySegment0.setValue(jSONPath0, jSONPath_IntInSegement0, jSONPath_KeySetSegment0);
      assertEquals("REG_MATCH", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("3K'EAw{r!Ts)|\":", false);
      JSONPath jSONPath0 = new JSONPath("3K'EAw{r!Ts)|\":");
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, (Object) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTc/2");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(2, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = "{\"x\":99,\"Y9\":7,\"setter not found, class \":null,\"a\":false,\"NOT_RLIKE\":{\"x\":true}}";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("{\"x\":99,\"Y9\":7,\"setter not found, class \":null,\"a\":false,\"NOT_RLIKE\":{\"x\":true}}", "true", 47);
      StackTraceElement stackTraceElement0 = new StackTraceElement("true", "true", "{\"x\":99,\"Y9\":7,\"setter not found, class \":null,\"a\":false,\"NOT_RLIKE\":{\"x\":true}}", 47);
      StackTraceElement stackTraceElement1 = new StackTraceElement("{\"x\":99,\"Y9\":7,\"setter not found, class \":null,\"a\":false,\"NOT_RLIKE\":{\"x\":true}}", "true", "{\"x\":99,\"Y9\":7,\"setter not found, class \":null,\"a\":false,\"NOT_RLIKE\":{\"x\":true}}", 47);
      JSONPath jSONPath0 = new JSONPath("{\"x\":99,\"Y9\":7,\"setter not found, class \":null,\"a\":false,\"NOT_RLIKE\":{\"x\":true}}");
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("{\"x\":99,\"Y9\":7,\"setter not found, class \":null,\"a\":false,\"NOT_RLIKE\":{\"x\":true}}");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("true");
      jSONPath_JSONPathParser0.next();
      String string1 = "Spg_LB7p\\ZLB";
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      Float float0 = new Float((-814.21411165708));
      jSONPath_KeySetSegment0.eval(jSONPath0, sQLSyntaxErrorException0, float0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = new JSONPath.JSONPathParser("Spg_LB7pZLB");
      String string2 = "tv:87";
      JSONPath jSONPath1 = new JSONPath("tv:87");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException(sQLIntegrityConstraintViolationException0);
      String string3 = "\\\\\\.";
      JSONPath.size((Object) sQLSyntaxErrorException2, "\\.");
      Byte byte0 = new Byte((byte)52);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues(byte0);
      jSONPath1.deepGetPropertyValues(byte0, list0);
      // Undeclared exception!
      try { 
        JSONPath.Operator.valueOf("true");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.alibaba.fastjson.JSONPath.Operator.true
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[->g");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" i@Mf");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) "writeNull", "..");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/3");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_WildCardSegment0, (Object) jSONPath_WildCardSegment0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("yB[7B\"y3VsZK*<");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("SupportAutoType", "{\"x\":true,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", (-1248));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "yB[7B\"y3VsZK*<", sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLTransientConnectionException0, (Object) aSMDeserializerFactory0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("'");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(107, 107, 34, 63, 63);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "7M7rW5uuJ";
      stringArray0[1] = "[!K2L(`Q!1']";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      boolean boolean0 = jSONPath0.set((Object) jSONPath_MultiPropertySegment0, (Object) mockGregorianCalendar0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("true");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) "com.alibaba.fastjson.JSONPath$JSONPathParser", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Class<JSONPath.SizeSegment> class0 = JSONPath.SizeSegment.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      boolean boolean0 = jSONPath0.remove((Object) javaBeanDeserializer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/12", serializeConfig0, parserConfig0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fastjson.parser.autoTypeSupport");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("[|ZhY9", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("he");
      String[] stringArray0 = new String[3];
      jSONPath0.arrayAdd((Object) null, (Object[]) stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("F\"u", "com.alibaba.fastjson.serializer.JSONAwareSerializer");
      JSONPath jSONPath0 = JSONPath.compile("!");
      boolean boolean0 = jSONPath0.containsValue((Object) sQLNonTransientConnectionException0, (Object) "!H;nsK45I9c");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("BETWEEN");
      Stack<Object> stack0 = new Stack<Object>();
      boolean boolean0 = jSONPath0.containsValue((Object) stack0, (Object) "BETWEEN");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("yB[7B\"y3VsZK*<");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("G+ P\"J7Ibd|j~![P", "Qgl(I4b$:G");
      DataTruncation dataTruncation0 = new DataTruncation((-1726), false, false, 2388, (-1726), sQLRecoverableException0);
      boolean boolean0 = jSONPath0.containsValue((Object) dataTruncation0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/6");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      boolean boolean0 = jSONPath0.contains((Object) sQLIntegrityConstraintViolationException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("yB[7B\"y3VsZK*<");
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 61);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]");
      JSONPath jSONPath0 = new JSONPath("JJf:");
      Object object0 = jSONPath0.extract(defaultJSONParser0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(":");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2", 32);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      jSONPath0.extract(defaultJSONParser0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("getResolveStatus", serializeConfig0, (ParserConfig) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("E8|2W");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("z`n{V&&[0}e");
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("", serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(110);
      JSONPath jSONPath0 = new JSONPath("{\"{\"fruit\":\"Apple\",\"size\":false,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}\":null,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, "{\"{\"fruit\":\"Apple\",\"size\":false,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}\":null,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/cause/stackTrace/6";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject("/cause/stackTrace/6", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("yB[7B\"y3VsZK*<");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "yB[7B\"y3VsZK*<";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject(jSONPath0, stringArray0);
      assertEquals(0, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      String[] stringArray0 = new String[0];
      SerializeConfig serializeConfig1 = (SerializeConfig)JSONPath.reserveToObject(serializeConfig0, stringArray0);
      assertEquals("@type", serializeConfig1.getTypeKey());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      JSONPath jSONPath0 = new JSONPath("/stakTrace");
      Set<?> set0 = jSONPath0.keySet((Object) stack0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("true");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      serializeConfig0.clearSerializers();
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = jSONPath0.evalSize(bigInteger0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      boolean boolean0 = JSONPath.remove((Object) sQLTimeoutException0, "writeNull");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("'");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("'", "'", 74);
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(sQLFeatureNotSupportedException0, "stackTrace", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // set property error, java.sql.SQLFeatureNotSupportedException#stackTrace
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.FieldDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("yB[7B\"y3VsZK*<");
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      hashMap0.put("fastjson.parser.autoTypeAccept", clientInfoStatus0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("ij{|8I_,en;/", true);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("fastjson.parser.autoTypeAccept", "ofgy_", hashMap0);
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, sQLClientInfoException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("yB[7B\"y3VsZK*<");
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      hashMap0.put("fastjson.parser.deny", clientInfoStatus0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.deny", true);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("fastjson.parser.deny", "BkQ5Gc", hashMap0);
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("c<bw;%D}xq+X");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("EK/9`MEa>E5MU", false);
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath.set((Object) hashMap0, "fastjson.parser.deny.internal", (Object) aSMDeserializerFactory0.classLoader);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("cau");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      jSONPath0.deepSet(sQLClientInfoException0, "", 4841947709850912914L, "");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("99");
      jSONPath0.deepSet((Object) null, "99", 110L, "99");
      assertEquals("99", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("BETWEEN");
      Stack<Object> stack0 = new Stack<Object>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(92, (-1708), 92);
      jSONPath0.deepScan(mockGregorianCalendar0, "}hS4[a9qP[=s~", stack0);
      assertFalse(stack0.contains("BETWEEN"));
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "REG_MATCH";
      JSONPath jSONPath0 = new JSONPath("REG_MATCH");
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer", stringArray0);
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(jSONArray0, "~", jSONArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("REG_MATCH");
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("REG_MATCH", (String[]) null);
      jSONPath0.deepScan(jSONArray0, "~", jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(serializeConfig0, "fastjson.parser.safeMode", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path fastjson.parser.deny, segement fastjson.parser.safeMode
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("qKxaNbd");
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      Collection<Object> collection0 = jSONPath0.getPropertyValues(sQLDataException0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "qKxaNbd";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(collection0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((byte)17, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Integer integer0 = new Integer(2480);
      Float float0 = new Float((float) 110);
      boolean boolean0 = JSONPath.eqNotNull(integer0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Float float0 = new Float(828.68286F);
      BigDecimal bigDecimal0 = new BigDecimal(6331715106177304033L);
      boolean boolean0 = JSONPath.eqNotNull(float0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Float float0 = new Float((float) 110);
      boolean boolean0 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(5614464919154503228L, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Long long0 = new Long(5614464919154503228L);
      boolean boolean0 = JSONPath.eqNotNull(long0, long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Short short0 = new Short((short) (-27008));
      boolean boolean0 = JSONPath.eqNotNull((-1580386065683472715L), short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Long long0 = new Long(339L);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      boolean boolean0 = JSONPath.eq("&4T+e[g;", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" SO[pn,$,j");
      boolean boolean0 = JSONPath.eq((Object) null, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = JSONPath.eq((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("yB[7B\"y3VsZK*<");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      UUID uUID0 = MockUUID.fromString("Sn{J.s3Z");
      int[] intArray0 = new int[5];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("(Ljava/util/Collection;C)V", "fastjson.parser.safeMode", hashMap0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLClientInfoException0);
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, uUID0, batchUpdateException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(">=$?NDZ~+\"A");
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(">=$?NDZ~+\"A", (List<Object>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("REG_MATCH");
      Vector<Object> vector0 = new Vector<Object>();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("REG_MATCH");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Vector vector1 = (Vector)jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath_JSONPathParser0, vector0);
      assertEquals(0, vector1.size());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("yB[7B\"y3VsZK*<");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Collection<Object> collection0 = jSONPath0.getPropertyValues(hashMap0);
      assertFalse(collection0.contains("yB[7B\"y3VsZK*<"));
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("99");
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("/stackTrace/2", "/stackTrace/2", hashMap0);
      DataTruncation dataTruncation0 = new DataTruncation(105, true, false, 105, (-1163), sQLClientInfoException0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) dataTruncation0, "/stackTrace/2", (Object) "/stackTrace/2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("y");
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, stack0, (-1), "y");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      DataTruncation dataTruncation0 = new DataTruncation((-11), false, false, 118, (-11), sQLInvalidAuthorizationSpecException0);
      int int0 = JSONPath.size((Object) dataTruncation0, "/stackTrace/13");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("g");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, false);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("Roe", serializeConfig0, parserConfig0);
      byte[] byteArray0 = new byte[8];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-2000));
      Integer integer0 = new Integer((byte) (-35));
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, bigInteger0, jSONPath_ArrayAccessSegment0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("true");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("true", "true");
      Long[] longArray0 = new Long[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("$yd+n+?Dc-X=&d", longArray0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntObjInSegement0, jSONPath_IntObjInSegement0, true);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, sQLSyntaxErrorException0, jSONPath_IntObjInSegement0, jSONPath_IntObjInSegement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "%.nQWIy^a";
      stringArray0[1] = "";
      stringArray0[2] = "LV^?:ko|sg6yGa;<Y";
      stringArray0[3] = "%.nQWIy^a";
      stringArray0[4] = "%.nQWIy^a";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("%.nQWIy^a", jSONPath_MultiPropertySegment0, jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_RefOpSegement0, jSONPath_RefOpSegement0, true);
      JSONPath jSONPath0 = JSONPath.compile("q");
      Short short0 = new Short((short) (-545));
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("LV^?:ko|sg6yGa;<Y", "q");
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, short0, jSONPath_MultiPropertySegment0, sQLTimeoutException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.parser.autoTypeSupport", 110, (-5790706549355281123L), false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntBetweenSegement0, jSONPath_IntBetweenSegement0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_IntBetweenSegement0, jSONPath_IntBetweenSegement0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("qKxaNbd");
      Long long0 = new Long(1L);
      Long[] longArray0 = new Long[7];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      longArray0[4] = longArray0[2];
      longArray0[5] = long0;
      longArray0[6] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("&;$Im +4C6<0&fslk", longArray0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntObjInSegement0);
      JSONPath jSONPath0 = new JSONPath("[");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("]-KU&");
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.remove(jSONPath0, sQLTimeoutException0, sQLRecoverableException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.SQLException$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-2536), (-56613910), (-2536));
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("(Ljava/lang/Object;Ljava/lang/String;)V", jSONPath_RangeSegment0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      JSONPath jSONPath0 = JSONPath.compile("(Ljava/lang/Object;Ljava/lang/String;)V");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, "[", sQLNonTransientConnectionException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("value is null");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      SerializeConfig serializeConfig0 = new SerializeConfig(64);
      JSONPath jSONPath0 = new JSONPath("(Ljava/lang/Oject;Lava/lang/Object;", serializeConfig0, (ParserConfig) null);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, (Object) null, "(Ljava/lang/Oject;Lava/lang/Object;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("tue");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-2536), (-2536), 42);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("new", jSONPath_RangeSegment0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, ")gH#z$3gEPgq'pr[R-", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("=*m$M[M,", 0, 0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      JSONPath jSONPath0 = new JSONPath("3$/5n*");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("yyyy/MM/dd HH:mm:ss", "De", 101, sQLTimeoutException0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, jSONPath0, sQLInvalidAuthorizationSpecException0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("getResolveStatus");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      JSONPath jSONPath0 = new JSONPath("WriteMapNullValue");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, sQLNonTransientConnectionException0, sQLNonTransientConnectionException0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup((JSONPath.Filter) null, (JSONPath.Filter) null, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      JSONPath jSONPath0 = new JSONPath("Jf");
      Byte byte0 = new Byte((byte)90);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, byte0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"6DbEk=9Q>IO\"u'\":\"hello\",\"joda\":7,\"/stackTrace/2\":\"a string\",\"a\":\"a string\",\"b\":{}}");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("~|.iyy", "WJ7gY!oKx,FN", jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("in");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/stackTrace2", "JLZscQJVY");
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath_JSONPathParser0, "{\"6DbEk=9Q>IO\"u'\":\"hello\",\"joda\":7,\"/stackTrace/2\":\"a string\",\"a\":\"a string\",\"b\":{}}", sQLTransactionRollbackException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("532OI}s;(!<^os|Lrc");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("532OI}s;(!<^os|Lrc", "532OI}s;(!<^os|Lrc", jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("532OI}s;(!<^os|Lrc");
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath0, jSONPath_JSONPathParser0, serializeConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("oFGy_@y_/<D");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("oFGy_@y_/<D", "oFGy_@y_/<D", jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("oFGy_@y_/<D");
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath0, "oFGy_@y_/<D", jSONPath_JSONPathParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/XRLs/t");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("/XRLs/t", "/XRLs/t", true);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(34, 34, 34);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RlikeSegement0);
      Class<Short> class0 = Short.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNotNull(javaBeanDeserializer0);
      
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, jSONPath_RangeSegment0, jSONPath_FilterSegment0, javaBeanDeserializer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("", "99", (String) null, (String[]) null, true);
      JSONPath jSONPath0 = JSONPath.compile("76");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("99", "76", 100000000);
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, jSONPath_WildCardSegment0, jSONPath_FilterSegment0, sQLTimeoutException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "com.alibaba.fastjson.serializer.JSONAwareSerializer";
      stringArray0[1] = "/";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("com.alibaba.fastjson.serializer.JSONAwareSerializer", "", "com.alibaba.fastjson.serializer.JSONAwareSerializer", stringArray0, true);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("!*eF (4M/\"k<V)vqAE", (String) null, "86v?9)A ", stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Float float0 = new Float(703.0F);
      JSONPath jSONPath0 = JSONPath.compile("y");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "y";
      stringArray0[1] = "BbR";
      stringArray0[2] = "y";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment(")", false);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, jSONPath_PropertySegment0, sQLInvalidAuthorizationSpecException0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("y", jSONPath_PropertySegment0, jSONPath_Operator0);
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, float0, jSONPath_PropertySegment0, arrayList0);
      assertEquals(3, arrayList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[|ZhY9");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("not support jsonpath : ", 1132.18994140625, jSONPath_Operator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "fastjson.parser.safeMode", 1017);
      Object object0 = JSONPath.reserveToArray((Object) null, (String[]) null);
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, sQLTransientConnectionException0, (Object) null, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "&hrTT-";
      stringArray0[1] = "E(khOu@tW";
      stringArray0[2] = "&hrTT-";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("getContext", stringArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("&hrTT-");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2480, (-1742), (-1742));
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "E(khOu@tW", ":,>g'", mockGregorianCalendar0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Long[] longArray0 = new Long[7];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("]U_s)g6geQj-]1^|Ha", longArray0, false);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("DisableSpecialKeyDetect", serializeConfig0, parserConfig0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("DisableSpecialKeyDetect", "ZGL(I)p", sQLIntegrityConstraintViolationException0);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, longArray0[6], sQLNonTransientConnectionException0, longArray0[2]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("wvajk4 ", longArray0, true);
      JSONPath jSONPath0 = new JSONPath("oFGy_@y_<D");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("\";sH'+p", "\";sH'+p", 4);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("wvajk4 ", sQLRecoverableException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("wvajk4 ", sQLIntegrityConstraintViolationException0);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, sQLIntegrityConstraintViolationException0, sQLTransientConnectionException0, "wvajk4 ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      long[] longArray0 = new long[0];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("yB[7B\"y3VsZK*<", longArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("@I");
      SQLDataException sQLDataException0 = new SQLDataException();
      UUID uUID0 = MockUUID.fromString("yB[7B\"y3VsZK*<");
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, sQLDataException0, uUID0, "yB[7B\"y3VsZK*<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("99");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("99", jSONPath0, false);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("lgK", false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ZGL(I)p", "lgK");
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, sQLTimeoutException0, jSONPath_PropertySegment0);
      assertSame(object0, jSONPath_PropertySegment0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("-qIF 3q?]OL", (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("{\"-\":-99,\"joda\":7S\"NOT_RLIKE\":-9r,\"a\":\"a s&ring\"}");
      BigDecimal bigDecimal0 = new BigDecimal((long) 110);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, "{\"-\":-99,\"joda\":7S\"NOT_RLIKE\":-9r,\"a\":\"a s&ring\"}", bigDecimal0, sQLRecoverableException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-3547), (-3547), 339);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/8");
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/stackTrace/8", "/stackTrace/8", sQLWarning0);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, sQLWarning0, sQLTransientConnectionException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("99", false);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(24, 62, 62);
      JSONPath jSONPath0 = JSONPath.compile("ca");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("ca");
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_PropertySegment0, sQLRecoverableException0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("5lec,_e_}@e*Q|6ZG|", "*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.JSONPath$WildCardSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(">=$?NDZ~+\"A");
      String[] stringArray0 = new String[2];
      stringArray0[0] = ">=$?NDZ~+\"A";
      stringArray0[1] = ">=$?NDZ~+\"A";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment(">=$?NDZ~+\"A", true);
      // Undeclared exception!
      jSONPath_PropertySegment0.setValue(jSONPath0, jSONPath0, jSONPath_MultiPropertySegment0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("[", "must");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json : pos 2, line 1, column 3[
         //
         verifyException("com.alibaba.fastjson.JSONPath$PropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("[->g", "[->g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json : pos 3, line 1, column 4[->g
         //
         verifyException("com.alibaba.fastjson.JSONPath$PropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("yB[7B\"y3VsZK*<");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("nlW+KJL96fObt", true);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(72);
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, "yB[7B\"y3VsZK*<", jSONPath_ArrayAccessSegment0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Float float0 = new Float(828.68286F);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        JSONPath.compare(float0, sQLClientInfoException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLClientInfoException cannot be cast to java.lang.Float
         //
         verifyException("java.lang.Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("he");
      Double double0 = new Double(3291.6757746868);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("he", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        JSONPath.compare(double0, sQLTransientConnectionException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLTransientConnectionException cannot be cast to java.lang.Double
         //
         verifyException("java.lang.Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Integer integer0 = new Integer(97);
      // Undeclared exception!
      try { 
        JSONPath.compare(integer0, hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Long long0 = new Long(1203232727967308606L);
      // Undeclared exception!
      try { 
        JSONPath.compare(long0, "/");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Long
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTc/2");
      BigInteger bigInteger0 = BigInteger.ZERO;
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0, mathContext0);
      // Undeclared exception!
      try { 
        JSONPath.compare(bigDecimal0, jSONPath_JSONPathParser0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath$JSONPathParser cannot be cast to java.math.BigDecimal
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("\"");
      // Undeclared exception!
      try { 
        JSONPath.compare(jSONPath0, "\"");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "REG_MATCH";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = new JSONPath("REG_MATCH");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, "REG_MATCH", sQLFeatureNotSupportedException0);
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      ArrayList arrayList1 = (ArrayList)jSONPath_MinSegment0.eval(jSONPath0, "com.alibaba.fastjson.JSONPath$1", arrayList0);
      assertNull(arrayList1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("true");
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("{c{ _Dz[Ozt$Rl}gd?");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      Long long0 = new Long((-1963L));
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, long0, sQLSyntaxErrorException0);
      assertNotNull(object0);
      
      Object object1 = jSONPath_MinSegment0.eval(jSONPath0, sQLTransientConnectionException0, object0);
      assertEquals("errorCode", object1);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("true");
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, jSONPath0, jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      Object object0 = JSONPath.reserveToArray(jSONPath0, (String[]) null);
      Object object1 = jSONPath_MaxSegment0.eval(jSONPath0, jSONPath0, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath jSONPath0 = JSONPath.compile("getResolveStatus");
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, batchUpdateException0, jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Jf:");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(",");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement(",");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("V-LK;5P[");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("\"R<R4T3aG\"F6=");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"a\":[],\"y\":7,\"unclosed single-quote string\":{\"x\":99},\"z\":\"a string\",\"x\":\"hello\"}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"a\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string\"");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("a string\"", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"a\":99,\".\":7,\"applyLabel\":{\"x\":99},\"z\":true,\"x\":\"hello\"}");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("\"a\":99,\".\":7,\"applyLabel\":", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("BETWEEN");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("rlike");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("LIKE");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Q![");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but '['
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nyDTFA#;QtKRw#");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // nyDTFA#;QtKRw#
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"A0.'");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '\", but '''
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("52'q8y>1");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue(0);
      assertEquals(52.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" -> ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.parser.safeMode", (-3851359326990528739L), (-5790706549355281094L), false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("|K:,Me?4cR3lb<S");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntBetweenSegement0);
      assertSame(jSONPath_Filter0, jSONPath_IntBetweenSegement0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Q![");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("Q![");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_NotNullSegement0);
      assertSame(jSONPath_Filter0, jSONPath_NotNullSegement0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"y\":7,\"b\":\"a string\",\"z\":true,\"unsupported set operation.\":\"hello\"}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"y\":7\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Wp>2UWGI{");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("?\"D6Qwna@");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '(, but '\"'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("e", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) ">=$?NDZ~+\"A");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("99");
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("y");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLTransientConnectionException0);
      SerializeConfig serializeConfig0 = new SerializeConfig(19);
      Map<String, Object> map0 = JSONPath.paths((Object) sQLClientInfoException0, serializeConfig0);
      //  // Unstable assertion: assertEquals(165, map0.size());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, " RbYTeK[K{y&4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      boolean boolean0 = JSONPath.set((Object) ":", ",", (Object) "@I");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "/uRLs/0";
      stringArray0[1] = "s^T4GVLZ[|";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      boolean boolean0 = JSONPath.set((Object) jSONPath_MultiPropertySegment0, "/uRLs/0", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(25, 3174, 79, 61, 3174, 79);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) mockGregorianCalendar0, "fastjson.parser.autoTypeAccept", (Object) mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      SerializeConfig serializeConfig0 = new SerializeConfig(110, false);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "qKxaNbd", (Object) javaBeanDeserializer0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("true");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1900, 79, 1900, 79, 25, 40);
      // Undeclared exception!
      JSONPath.set((Object) jSONPath0, "com.alibaba.fastjson.serializer.ClobSeriliazer", (Object) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Long long0 = new Long((-1987L));
      int[] intArray0 = new int[2];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = new JSONPath("yTY_%");
      Object object0 = jSONPath_MultiIndexSegment0.eval(jSONPath0, (Object) null, long0);
      boolean boolean0 = JSONPath.set(object0, "h8mW", (Object) "yTY_%");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("ca");
      boolean boolean0 = jSONPath0.set((Object) "/aBha!yPklK", (Object) "ca", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      boolean boolean0 = JSONPath.remove((Object) jSONPath_Operator0, "com.alibaba.fastjson.JSONPath$StringOpSegement");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("'");
      Object[] objectArray0 = new Object[7];
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) propertyNamingStrategy0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("yB[7B\"y3VsZK*<");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) classLoader0, (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path yB[7B\"y3VsZK*<
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Throwable[] throwableArray0 = batchUpdateException0.getSuppressed();
      JSONPath jSONPath0 = JSONPath.compile("getResolveStatus");
      jSONPath0.arrayAdd((Object) null, (Object[]) throwableArray0);
      assertEquals("getResolveStatus", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("Y|3aGm&Vemsb5q", (SerializeConfig) null, parserConfig0);
      jSONPath0.arrayAdd((Object) null, (Object[]) null);
      assertEquals("Y|3aGm&Vemsb5q", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("yB[7B\"y3VsZK*<");
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("moduleVersion");
      int int0 = jSONPath0.size((Object) "!<MXo`5q4!h");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("tue");
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Tpvc]c6(R9I ur3)*");
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) "!<MXo`5q4!h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : Tpvc]c6(R9I ur3)*
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("'");
      Integer integer0 = new Integer(45);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("\\-", "\\-");
      boolean boolean0 = jSONPath0.containsValue((Object) integer0, (Object) sQLNonTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      boolean boolean0 = JSONPath.containsValue((Object) "tue", "tue", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      boolean boolean0 = JSONPath.contains((Object) sQLTimeoutException0, "/stackTrace/8");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("X");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      boolean boolean0 = jSONPath0.contains((Object) jSONPath_WildCardSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = "r,q\\ue";
      JSONPath jSONPath0 = new JSONPath(string0);
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[8];
      // Undeclared exception!
      try { 
        JSONPath.extract("}kMN!7<", "/stackTrace/8", parserConfig0, (-1), featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Object object0 = JSONPath.extract("{\"kotlin.ranges.LongRange\":[]}", "yB[7B\"y3VsZK*<");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"unclosed str, \":\"hello\",\"joda\":7,\"/stackTrace/2\":\"a string\",\"a\":99,\"index\":{\"unclosed str, \":true},\"x\":-99}");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      boolean boolean0 = jSONPath0.isRef();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("3", (SerializeConfig) null, parserConfig0);
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      int int0 = JSONPath.size((Object) batchUpdateException0, "*");
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement(" :^?& {%", "EZEnLXA", false);
      Object object0 = JSONPath.eval((Object) jSONPath_RlikeSegement0, "EZEnLXA");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("*rPhy|&", (-1188.917), jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile(">=$?NDZ~+\"A");
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, ">=$?NDZ~+\"A", ">=$?NDZ~+\"A", ">=$?NDZ~+\"A");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("oFGy_@y_/<D", "oFGy_@y_/<D", jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("oFGy_@y_/<D");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, jSONPath_StringOpSegement0, 70, "oFGy_@y_/<D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath$StringOpSegement
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("cau");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("cau", pattern0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("cau");
      byte[] byteArray0 = new byte[6];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, bigInteger0, bigInteger0, "cau");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("E8(khOuW", "org.json.JSONObject");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("|&u[p6h_Be/<=-x.S");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('&', char0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(110);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.deny.internal", (Throwable) null);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, sQLInvalidAuthorizationSpecException0, jSONPath0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLInvalidAuthorizationSpecException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) sQLTimeoutException0, "/stackTrace/0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement(":");
      JSONPath jSONPath0 = JSONPath.compile(":");
      Float float0 = new Float(100.0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(":", ":", 8);
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, ":", float0, sQLRecoverableException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("j@UGz'IMz8Ja];%", 3328L, (-631L), false);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("9Z.-1Ebe/*nie", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, (Object) null, jSONPath0, parserConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath_MinSegment0, stringArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("e", "[?bDgR[t|!!G~:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2e
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      boolean boolean0 = JSONPath.containsValue((Object) sQLNonTransientConnectionException0, "[", (Object) "[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("J0kkJ[j54,lF-1d");
      String string0 = jSONPath0.getPath();
      assertEquals("J0kkJ[j54,lF-1d", string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("qKxaNbd[6,o}");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("`![<Iii2,,\"", "`![<Iii2,,\"");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3`![<Iii2,,\"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      JSONPath.arrayAdd((Object) null, "~", objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Integer integer0 = new Integer(45);
      Set<?> set0 = JSONPath.keySet((Object) integer0, "'");
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("X");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) mockGregorianCalendar0, (String) null, (Object) locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("VTl", 5614464919154503228L, jSONPath_Operator0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("VTl", serializeConfig0, parserConfig0);
      Float float0 = new Float((float) 5614464919154503228L);
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, classLoader0, serializeConfig0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) propertyNamingStrategy0, "getCurrent");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement(", fieldName : ", jSONPath_MultiIndexSegment0, jSONPath_Operator0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("cOA_m");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_RefOpSegement0);
      assertSame(jSONPath_RefOpSegement0, jSONPath_Filter0);
  }
}
