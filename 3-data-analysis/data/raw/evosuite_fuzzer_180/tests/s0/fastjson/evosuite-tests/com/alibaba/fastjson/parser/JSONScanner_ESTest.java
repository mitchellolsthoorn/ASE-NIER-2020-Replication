/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 12:33:37 GMT 2020
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONScanner_ESTest extends JSONScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      long[] longArray0 = new long[4];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"9b9\":\"Large\",\"x\":[{\"x\":false}],\"com.alibaba.fastjson.serializer.JSONLibDataFormatSerializer\":99,\"\":false,\"getFieldType\":null,\"om.alibaba.fastjson.parser.JSONScanner\":-99,\"syntax error\":\"java.nio.file.Path\",\"com.alibaba.fastjson.parsr.ParseContext\":true,\"illegal state. \":\"illegal json, \"}");
      jSONScanner0.nextToken(0);
      jSONScanner0.ch = '\u008B';
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((-37L), false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".m}R");
      jSONScanner0.nextToken((-2832));
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(1744L, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // .
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("jaEa.utilOptdonalLong");
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken(821);
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(821);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("ru1:lHGin o", 532);
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0gT]D-f'7J<Q&U9%R");
      char[] charArray0 = new char[0];
      ParserConfig parserConfig0 = ParserConfig.global;
      jSONScanner0.scanFieldStringArray(charArray0, 8, parserConfig0.symbolTable);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      jSONScanner0.nextIdent();
      jSONScanner0.scanLong('#');
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0gT]D-f'7J<Q&U9%R");
      int int0 = jSONScanner0.scanInt('e');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("m13wYz{bK");
      jSONScanner0.bp = 32;
      int int0 = jSONScanner0.scanInt('s');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":-99,\"size\":\"Large\",\"illegal json.\":\"Red\",\"value\":false,\"value2\":99,\"number\":\"1\"}");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-191));
      char[] charArray1 = new char[0];
      long long0 = jSONScanner0.scanFieldSymbol(charArray1);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" -Qd[%o4LBuRU}", (-938));
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 2);
      jSONScanner0.nextToken(0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('3', '3', '3', '3', '\u0017', '3', (-92), 115);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('9', '9', '9', '9', '9', '9', 1765, 66);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("clazz", 69);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONScanner0.setTimeZone('.', 't', '|', 't', '|');
      assertNull(jSONScanner0.stringDefaultValue());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ull99", (-426));
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone(')', '0', '?');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" -Qd[%o4LBuRU}", (-938));
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal str, ", (-9));
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fied_ser");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" -Qd[%o4LBuRU}", (-938));
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("clazz", 69);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONScanner0.setTimeZone('.', '.', '|', '.', '|');
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("j!,'2EsSx0fItsJ~:~");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1j!,'2EsSx0fItsJ~:~
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".:5y>}_l;", 147);
      jSONScanner0.skipObject();
      assertEquals(6, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("^f\u0002@juB");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1^f\u0002@juB
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ull99", (-426));
      Locale locale0 = Locale.GERMANY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONScanner0.setTime('8', '&', 'z', '&', 'l', '?');
      assertEquals(0, jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("jaEa.utilOptdonalLong");
      char[] charArray0 = new char[1];
      jSONScanner0.nextIdent();
      jSONScanner0.integerValue();
      jSONScanner0.sbuf = charArray0;
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!,'2EsSx0", 88);
      char[] charArray0 = new char[2];
      jSONScanner0.copyTo(2, 0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-99\":[{");
      char[] charArray0 = new char[9];
      jSONScanner0.arrayCopy(1, charArray0, 1, 1);
      assertArrayEquals(new char[] {'\u0000', '\"', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("jaEa.ulilOptdonalLong");
      char[] charArray0 = jSONScanner0.sub_chars(5, 5);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'u', 'l', 'i', 'l', 'O'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("c60/b7^(Mvc1&mW");
      char[] charArray0 = jSONScanner0.sub_chars(0, 0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("parseInt error : ", 0);
      String string0 = jSONScanner0.subString(0, 14);
      assertEquals("parseInt error", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", 20);
      String string0 = jSONScanner0.subString(0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":true,\"size\":false,\"color\":\"ull\",\"value\":99,\"\"@type\":\"{\"size\":\"\",\"parseInt \":{},\"value\":{},\"com.alibaba.fastjson.parser.JSONScanner\":true}\":false,\"\":\"a string\",\"x\":\"a string\"}");
      jSONScanner0.next();
      jSONScanner0.nextIdent();
      jSONScanner0.stringVal();
      assertEquals(4, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8z9");
      jSONScanner0.stringDefaultValue = "8z9";
      char[] charArray0 = new char[7];
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals("8z9", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0000-00-00 00:00:00.00000000");
      jSONScanner0.nextIdent();
      String string0 = jSONScanner0.numberString();
      assertEquals("0000", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+l%D&R");
      jSONScanner0.nextIdent();
      String string0 = jSONScanner0.numberString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("c60/b7^(Moc1&mW", 13);
      char char0 = jSONScanner0.next();
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals('6', char0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      char char0 = jSONScanner0.next();
      assertEquals('a', jSONScanner0.getCurrent());
      assertEquals('a', char0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.isEOF();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("P ,^1n?EAkGkZBf7");
      boolean boolean0 = jSONScanner0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("parseInt error : ", 0);
      int int0 = jSONScanner0.indexOf('p', 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":\"\"@type\":\"parseInt error : \",\"illegal json.\":null,\"z\":true,\"a\":[],\"b\":[],\"xx\":99,\"xxx\":null}", 163);
      int int0 = jSONScanner0.indexOf('.', (-2));
      assertEquals(46, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"size\":\"\",\"color\":\"[B\",\"value\":{\"\"@type\":\"parseInt error : \":[]},\"value2\":false}");
      int int0 = jSONScanner0.indexOf(')', 95);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0gT]D-f'7J<Q&U9%R");
      jSONScanner0.nextIdent();
      BigDecimal bigDecimal0 = jSONScanner0.decimalValue();
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      jSONScanner0.scanNumber();
      jSONScanner0.decimalValue();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99", 92);
      char char0 = jSONScanner0.charAt(108);
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9*9");
      char char0 = jSONScanner0.charAt(0);
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("j}}pnfG-bm^DEV4>zAY");
      char char0 = jSONScanner0.charAt(0);
      assertEquals('j', char0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-99\":[{");
      char[] charArray0 = new char[9];
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-99\":[{");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONScanner0);
      jSONScanner0.bytesValue();
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":2");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      String string0 = jSONScanner0.addSymbol(0, 1, 240, defaultJSONParser0.symbolTable);
      assertEquals(":", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9*9");
      ParserConfig parserConfig0 = new ParserConfig();
      String string0 = jSONScanner0.addSymbol(0, 0, (-4153), parserConfig0.symbolTable);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("javax.servlet.http.Cookie");
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars((-30), (-30));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("c60/b7^(Mvc1&mW");
      // Undeclared exception!
      try { 
        jSONScanner0.subString(193, 193);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("snET6rNC");
      jSONScanner0.nextIdent();
      jSONScanner0.integerValue();
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"syntax error\":\"java.nio.file.Path\",\"com.alibaba.fastjson.parser.JSONScanner\":null,\"\":false,\"getFieldType\":null,\"illegal state. \":\"illegal json, \",\"WriteNullListAsEmpty\":[{\"WriteNullListAsEmpty\":false,\"\"@type\":\"{\"syntax error\":\"java.nio.file.Path\",\"com.alibaba.fastjson.parser.JSONScanner\":{},\"\":false,\"getFieldType\":null,\"illegal state. \":\"illegal json, \",\"x\":[{\"x\":false},{}],\"com.alibaba.fastjson.serializer.JSONLibDataFormatSerializer\":99,\"com.alibaba.fastjson.parser.ParseContext\":true,\"unclosed str, \":\"a string\"}\":-99},{\"WriteNullListAsEmpty\":false}],\"com.alibaba.fastjson.serializer.JSONLibDataFormatSerializer\":99,\"com.alibaba.fastjson.parser.ParseC'ntext\":true}");
      jSONScanner0.bp = (-527);
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9*9");
      jSONScanner0.bp = 4;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        jSONScanner0.scanTypeName(parserConfig0.symbolTable);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nET");
      jSONScanner0.bp = (-1353);
      // Undeclared exception!
      try { 
        jSONScanner0.scanLong('E');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("als");
      jSONScanner0.bp = (-1833);
      // Undeclared exception!
      try { 
        jSONScanner0.scanISO8601DateIfMatch();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("GG1=:>P9^'U");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("snET6rNC");
      jSONScanner0.nextIdent();
      Class<Object> class0 = Object.class;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("");
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, (-1), parserConfig0.symbolTable);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("utilOptdo", (-4694));
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("clazz", 69);
      char[] charArray0 = new char[5];
      jSONScanner0.bp = (-601);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldLong(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[D");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("getResolveStatus");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("N ~BzjS=:]Hv0VX}F", 0);
      jSONScanner0.bp = (-1886);
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBoolean(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("c60/b7^(Moc1&mW");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"89/9\":[{");
      jSONScanner0.bp = (-1072);
      // Undeclared exception!
      try { 
        jSONScanner0.scanDouble('\\');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.Rectangle");
      jSONScanner0.bp = (-4198);
      // Undeclared exception!
      try { 
        jSONScanner0.scanDate('\\');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'k`");
      jSONScanner0.bp = 89;
      // Undeclared exception!
      try { 
        jSONScanner0.info();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("C)Ljava/lang/Enum;");
      jSONScanner0.nextIdent();
      jSONScanner0.close();
      jSONScanner0.integerValue();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0gT]D-f'7J<Q&U9%R");
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(0, 0, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"9b9\":\"Large\",\"x\":[{\"x\":false}],\"com.alibaba.fastjson.serializer.JSONLibDataFormatSerializer\":99,\"\":false,\"getFieldType\":null,\"om.alibaba.fastjson.parser.JSONScanner\":-99,\"syntax error\":\"java.nio.file.Path\",\"com.alibaba.fastjson.parsr.ParseContext\":true,\"illegal state. \":\"illegal json, \"}");
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(20, 90, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("*");
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-316));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"", 2046);
      // Undeclared exception!
      try { 
        jSONScanner0.charArrayCompare((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("bY~A", 97, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9");
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.bytesValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("i[|pG~!/mwI)G7'E", (-810));
      jSONScanner0.nextIdent();
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.bytesValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ull\":false,\"parseInt \":{},\"vale\":{\"parseInt eror : \":[false],\"x\":99,\"\"a string\":[]},\"illegal json.\":false}");
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(63, (char[]) null, 1936, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'9W");
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(1, charArray0, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONScanner jSONScanner0 = new JSONScanner("()Ljava/l");
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(2133, 2133, 2133, parserConfig0.symbolTable);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("S[]r&ll");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("S[]r&ll");
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol((-461), (-461), (-461), defaultJSONParser0.symbolTable);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 844, 844);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 54);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, (-401));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("m13wYz{bK");
      jSONScanner0.bp = 32;
      jSONScanner0.skipArray(true);
      assertEquals(0, jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("PXHP9]HN)*4b,op1W/&", 0);
      jSONScanner0.skipArray(true);
      assertEquals(0, jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":\"\"@type\":\"parseInt error : \",\"illegal json.\":null,\"z\":true,\"a\":[],\"b\":[],\"xx\":99,\"xxx\":null}", 163);
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"\":\"\"@type\":\"parseInt error : \",\"illegal json.\":null,\"z\":true,\"a\":[],\"b\":[],\"xx\":99,\"xxx\":null}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[D");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1[D
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      boolean boolean0 = JSONScanner.charArrayCompare("{\"-9/9\":[{", 1, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = JSONScanner.charArrayCompare(" -Qd[%o4LBuRU}", (-1), charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("2`FPh`q,!MP[<", (-252), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = JSONScanner.charArrayCompare("7\"'msm%Z{W", 14, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("=wqNRA:*r<xb4w$mv", (-715));
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo((-841), (-715), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" -Qd[%o4LBuRU}", (-938));
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"}x`[7?prJ*'iRe\"bf");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      String string0 = jSONScanner0.scanTypeName(parserConfig0.symbolTable);
      assertNull(string0);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"parseInt error : ");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      String string0 = jSONScanner0.scanTypeName(parserConfig0.symbolTable);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-9V");
      String string0 = jSONScanner0.scanTypeName((SymbolTable) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"9b9\":\"Large\",\"x\":[{\"x\":false}],\"com.alibaba.fastjson.serializer.JSONLibDataFormatSerializer\":99,\"\":false,\"getFieldType\":null,\"om.alibaba.fastjson.parser.JSONScanner\":-99,\"syntax error\":\"java.nio.file.Path\",\"com.alibaba.fastjson.parsr.ParseContext\":true,\"illegal state. \":\"illegal json, \"}");
      jSONScanner0.nextToken(0);
      jSONScanner0.ch = '{';
      jSONScanner0.nextToken(1900);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-9/9\":[{", 1932735283);
      jSONScanner0.nextToken((-214));
      long[] longArray0 = new long[2];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 9, line 1, column 10{\"-9/9\":[{
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"syntax error\":\"java.nio.fileWPath\",\"\"@type\":\".:5y>}_l;\":\"Large\",\"\":false,\"com.alibaba.fastjson.parser.JSONScanner\":-99,\"getFieldType\":null,\"illegal state. \":\"illegal json, \",\"x\":[{\"x\":false}],\"com.alibaba.fastjson.srializer.JSONLibDataFormatSerializer\":alse,\"com.alibaba.fastjson.parser.ParseContext\":true}");
      jSONScanner0.nextIdent();
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 39, line 1, column 40{\"syntax error\":\"java.nio.fileWPath\",\"\"@type\":\".:5y>}_l;\":\"Large\",\"\":false,\"com.alibaba.fastjson.parser.JSONScanner\":-99,\"getFieldType\":null,\"illegal state. \":\"illegal json, \",\"x\":[{\"x\":false}],\"com.alibaba.fastjson.srializer.JSONLibDataFormatSerializer\":alse,\"com.alibaba.fastjson.parser.ParseContext\":true}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"size\":\"\",\"parseSnt \":{,\"vaue\":{}k\"valueB\":false}", 3);
      jSONScanner0.nextToken((-1455));
      long[] longArray0 = new long[5];
      jSONScanner0.seekObjectToField(longArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ull\":false,\"parseInt \":{},\"vale\":{\"parseInt eror : \":[false],\"x\":99,\"\"a string\":[]},\"illegal json.\":false}");
      jSONScanner0.scanString();
      jSONScanner0.skipObject(false);
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[D");
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"syntax ", 22);
      jSONScanner0.nextToken((-1455));
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-99\":Z{");
      jSONScanner0.nextToken(1000);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 1000, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ull\":false,\"parseInt \":{},\"vale\":{\"parseInt eror : \":[false],\"x\":99,\"\"a string\":[]},\"illegal json.\":false}", 8);
      jSONScanner0.nextToken(8);
      int int0 = jSONScanner0.seekObjectToField((long) 8, true);
      assertEquals('}', jSONScanner0.getCurrent());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"syntax error\":\"java.nio.file.Path\",\"com.alibaba.fastjson.parser.JSONScanner\":null,\"\":false,\"getFieldType\":null,\"illegal state. \":\"illegal json, \",\"WriteNullListAsEmpty\":[{\"WriteNullListAsEmpty\":false,\"\"@type\":\"{\"syntax error\":\"java.nio.file.Path\",\"com.alibaba.fastjson.parser.JSONScanner\":{},\"\":false,\"getFieldType\":null,\"illegal state. \":\"illegal json, \",\"x\":[{\"x\":false},{}],\"com.alibaba.fastjson.serializer.JSONLibDataFormatSerializer\":99,\"com.alibaba.fastjson.parser.ParseContext\":true,\"unclosed str, \":\"a string\"}\":-99},{\"WriteNullListAsEmpty\":false}],\"com.alibaba.fastjson.serializer.JSONLibDataFormatSerializer\":99,\"com.alibaba.fastjson.parser.ParseC'ntext\":true}", 8);
      jSONScanner0.nextToken((-1455));
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((-520L), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 172, line 1, column 173{\"syntax error\":\"java.nio.file.Path\",\"com.alibaba.fastjson.parser.JSONScanner\":null,\"\":false,\"getFieldType\":null,\"illegal state. \":\"illegal json, \",\"WriteNullListAsEmpty\":[{\"WriteNullListAsEmpty\":false,\"\"@type\":\"{\"syntax error\":\"java.nio.file.Path\",\"com.alibaba.fastjson.parser.JSONScanner\":{},\"\":false,\"getFieldType\":null,\"illegal state. \":\"illegal json, \",\"x\":[{\"x\":false},{}],\"com.alibaba.fastjson.serializer.JSONLibDataFormatSerializer\":99,\"com.alibaba.fastjson.parser.ParseContext\":true,\"unclosed str, \":\"a string\"}\":-99},{\"WriteNullListAsEmpty\":false}],\"com.alibaba.fastjson.serializer.JSONLibDataFormatSerializer\":99,\"com.alibaba.fastjson.parser.ParseC'ntext\":true}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"9b9\":\"Large\",\"x\":[{\"x\":false}],\"com.alibaba.fastjson.serializer.JSONLibDataFormatSerializer\":99,\"\":false,\"getFieldType\":null,\"om.alibaba.fastjson.parser.JSONScanner\":-99,\"syntax error\":\"java.nio.file.Path\",\"com.alibaba.fastjson.parsr.ParseContext\":true,\"illegal state. \":\"illegal json, \"}");
      jSONScanner0.nextToken(22);
      jSONScanner0.ch = '{';
      jSONScanner0.nextToken(73);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 73, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ull\":false,\"parseInt \":{},\"vale\":{\"parseInt eror : \":[false],\"x\":99,\"\"a string\":[]},\"illegal json.\":false}");
      jSONScanner0.nextToken((-3647));
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) (-3647), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 72, line 1, column 73{\"ull\":false,\"parseInt \":{},\"vale\":{\"parseInt eror : \":[false],\"x\":99,\"\"a string\":[]},\"illegal json.\":false}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"syntax ", 26);
      jSONScanner0.nextToken(123);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 123, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 1, line 1, column 2{\"syntax 
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-99\":Z{");
      jSONScanner0.nextToken(1000);
      jSONScanner0.skipString();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 1000, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"size\":\"\",\"parseInt \":{,\"value\":{},\"value2\":false}");
      jSONScanner0.nextToken((-2626));
      jSONScanner0.seekObjectToField((long) (-2626), false);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-9/9\":[{");
      jSONScanner0.nextToken(0);
      int int0 = jSONScanner0.seekObjectToField((long) 0, true);
      assertEquals(14, jSONScanner0.token());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ull0gT]D-f'7J<Q&U9%R", 874);
      jSONScanner0.nextToken((-1428));
      jSONScanner0.nextToken(112);
      int int0 = jSONScanner0.seekObjectToField((long) 32, true);
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}x`[7?prJ*'iRe\"bf");
      jSONScanner0.nextToken(67);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(966L, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. `
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      assertEquals(2, jSONScanner0.token());
      
      jSONScanner0.nextToken(0);
      int int0 = jSONScanner0.seekObjectToField(1940L, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("_E", 1443);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 1443, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unknown
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[|2G~!/mw");
      jSONScanner0.nextToken(0);
      jSONScanner0.seekArrayToItem(0);
      assertEquals('2', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[|2G~!/mw");
      jSONScanner0.nextToken(1125);
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(1125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json.
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":2");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      jSONScanner0.scanDate('~');
      assertTrue(jSONScanner0.isEOF());
      
      jSONScanner0.seekArrayToItem(0);
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"K1&[e(o;hDySw");
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem((-1915));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -1915
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("jaEa.utilOptdonalLong");
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"K1&[Ue(o;hDySwM");
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!,'2EsSx0");
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("kw7KoQu");
      jSONScanner0.nextIdent();
      jSONScanner0.ch = ':';
      jSONScanner0.nextIdent();
      jSONScanner0.skipArray();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[]");
      jSONScanner0.nextToken(20);
      jSONScanner0.skipArray(false);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"syntax error\":\"java.nio.file.Path\",\"com.alibaba.fastjson.parser.JSONScanner\":-99,\"\":false,\"getFieldType\":null,\"illegal state. \":\"illegal json, \",\"x\":[{\"x\":false},{}],\"com.alibaba.fastjson.serializer.JSONLibDataFormatSerializer\":\"a string\",\"com.alibaba.fastjson.parser.ParseContext\":true,\"scanFieldFloatArray\":null}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-99\":[{");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"-99\":[{
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" '=-_Acq&^N){pxtn");
      jSONScanner0.bp = 1833;
      jSONScanner0.skipObject(true);
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ull\":false,\"parseInt \":{},\"vale\":{\"parseInt eror : \":[false],\"x\":99,\"\"a string\":[]},\"illegal json.\":false}");
      jSONScanner0.scanString();
      jSONScanner0.skipObject(false);
      int int0 = jSONScanner0.seekObjectToField((long) 0, false);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("E}n");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" -Qd[%o4LBuRU}", (-938));
      jSONScanner0.skipObject(false);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"syntax error\":\"java.nio.file.Path\",\"\"@type\":\".:5y>}_l;\":\"Large\",\"\":false,\"cm.alibaba.fastjson.parser.JSONScanner\":-99,\"getFieldType\":null,\"illegal state. \":\"illegal json, \",\"x\":[{\"x\":false}],\"com.alibaba.fastjson.serializer.JSONLibDataFormatSerializer\":false,\"com.alibaba.fastjson.parser.ParseContext\":true}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"syntax error\":\"java.nio.file.Path\",\"\"@type\":\".:5y>}_l;\":\"Large\",\"\":false,\"cm.alibaba.fastjson.parser.JSONScanner\":-99,\"getFieldType\":null,\"illegal state. \":\"illegal json, \",\"x\":[{\"x\":false}],\"com.alibaba.fastjson.serializer.JSONLibDataFormatSerializer\":false,\"com.alibaba.fastjson.parser.ParseContext\":true}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"89/9\":[{");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      char[] charArray0 = new char[0];
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONScanner0);
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals(1, jSONScanner0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9b9");
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[D");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      jSONScanner0.scanFieldStringArray((char[]) null, (-1736), parserConfig0.symbolTable);
      assertEquals('[', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[D");
      char[] charArray0 = new char[0];
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, (-722));
      jSONScanner0.scanFieldStringArray((char[]) null, 0, defaultJSONParser0.symbolTable);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('[', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-99\":Z{");
      char[] charArray0 = new char[1];
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"-99\":Z{");
      jSONScanner0.scanFieldStringArray(charArray0, 0, defaultJSONParser0.symbolTable);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("W4ZKt{-,@nr2eNvU\"&");
      char[] charArray0 = new char[0];
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      jSONScanner0.scanFieldStringArray(charArray0, (-2278), parserConfig0.symbolTable);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" -Qd[%o4L9BpRU}", (-927));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("P!}H24+O+P+2<G0sk@");
      jSONScanner0.scanFieldStringArray((char[]) null, 18, defaultJSONParser0.symbolTable);
      jSONScanner0.info();
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not support type : ");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("^.\"3{2$75oa5");
      jSONScanner0.scanFieldStringArray((char[]) null, 0, defaultJSONParser0.symbolTable);
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-]%z^S]Qw~\"", (-1));
      jSONScanner0.scanDate('Q');
      assertEquals(4, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not support type : ");
      jSONScanner0.scanDate('E');
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4]A)5(tv\"&deH+z@S~");
      jSONScanner0.scanDate('~');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-", 111);
      jSONScanner0.scanDate('o');
      assertEquals(4, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[D");
      jSONScanner0.scanDate('G');
      assertFalse(jSONScanner0.isEOF());
      assertEquals('[', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      jSONScanner0.scanDate('^');
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" <M");
      jSONScanner0.scanDate('E');
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9*9");
      long long0 = jSONScanner0.scanLong('*');
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not support type : ");
      long long0 = jSONScanner0.scanLong('&');
      assertEquals(0L, long0);
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-99\":[{");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      long long0 = jSONScanner0.scanLong('~');
      assertEquals(12, jSONScanner0.token());
      assertEquals(99L, long0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0gT]D-f'7J<Q&U9%R");
      long long0 = jSONScanner0.scanLong('4');
      assertEquals(0L, long0);
      assertEquals('0', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0000-00-0");
      long long0 = jSONScanner0.scanLong('Z');
      assertEquals(0L, long0);
      assertEquals('0', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"-9/9\":[{");
      long long0 = jSONScanner0.scanLong('Z');
      assertEquals(0L, long0);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9*9");
      double double0 = jSONScanner0.scanDouble('*');
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(9.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not support type : ");
      jSONScanner0.scanDouble('_');
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-99\":Z{");
      jSONScanner0.nextToken(1000);
      double double0 = jSONScanner0.scanDouble('i');
      assertEquals(12, jSONScanner0.token());
      assertEquals((-99.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"-9/9\":[{");
      double double0 = jSONScanner0.scanDouble('\u001B');
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0gT]D-f'7J<Q&U9%R");
      double double0 = jSONScanner0.scanDouble('e');
      assertEquals(0.0, double0, 0.01);
      assertEquals('0', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0000-00-00 00:00:00.0000000Z");
      double double0 = jSONScanner0.scanDouble('f');
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-X9");
      double double0 = jSONScanner0.scanDouble('\u001B');
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("20 lVixr0Y8mV?%s", 40);
      int int0 = jSONScanner0.scanInt('$');
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9*9");
      int int0 = jSONScanner0.scanInt('*');
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not close json text, token : ");
      int int0 = jSONScanner0.scanInt('d');
      assertEquals(0, int0);
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-99\":Z{");
      jSONScanner0.nextToken(1000);
      int int0 = jSONScanner0.scanInt('i');
      assertEquals(12, jSONScanner0.token());
      assertEquals((-99), int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"-9/9\":[{");
      int int0 = jSONScanner0.scanInt('$');
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" -Qd[%o4LBuRU}", (-926));
      jSONScanner0.scanInt('w');
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0-gT]D-f'7J<f&U9%R");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1&:7R'Eg)8ZM");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.deny", 2);
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"K1&[e([Ao;hDySw");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"syntax error\":\"java.nio.fileWPath\",\"\"@type\":\".:5y>}_l;\":\"Large\",\"\":false,\"com.alibaba.fastjson.parser.JSONScanner\":-99,\"getFieldType\":null,\"illegal state. \":\"illegal json, \",\"x\":[{\"x\":false}],\"com.alibaba.fastjson.srializer.JSONLibDataFormatSerializer\":alse,\"com.alibaba.fastjson.parser.ParseContext\":true}");
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"89/9\":[{");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals(12, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0-gT]D-f'7J<Q&U9%R");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9b9");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-X9");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONScanner jSONScanner0 = new JSONScanner("");
      long long0 = jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[D");
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" ");
      char[] charArray0 = new char[4];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" -Qd[%o4LBuRU}", (-938));
      char[] charArray0 = new char[0];
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("snET6rNC");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONScanner jSONScanner0 = new JSONScanner("");
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"K1&[e(o;hDySw");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals(4, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0000-00-00 00:00:00.0000000Z");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals('0', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8{TOzTM");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals('8', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("jaEa.utilOptdonalLong");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0-gT]D-f'7J<f&U9%R");
      char[] charArray0 = new char[0];
      jSONScanner0.scanNumber();
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"syntax error\":\"java.nio.fileWPath\",\"\"@type\":\".:5y>}_l;\":\"Large\",\"\":false,\"com.alibaba.fastjson.parser.JSONScanner\":-99,\"getFieldType\":null,\"illegal state. \":\"illegal json, \",\"x\":[{\"x\":false}],\"cm.alibaba.fastjson.srializer.JSONLibDataFormatSerializer\":alse,\"com.alibaba.fastjson.parser.ParsContext\":true}");
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"K1&[e(o;hDySw");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONScanner jSONScanner0 = new JSONScanner("9b9");
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"K1&[e(o;hDySw");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" -Qd[%o4LBuRU}", (-938));
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0gT]D-f'7J<Q&U9%R");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"899\"[{");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals(12, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"89/9\":[{");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0gT]D-f'7J<Q&U9%R");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("kw7KoQu");
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0-gT]D-f'7J<f&U9%R");
      char[] charArray0 = new char[0];
      jSONScanner0.scanNumber();
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9*9");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('8', '8', '8', 'l', '8', 'l', 0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('8', '8', '8', '(', '8', '8', (-1684), 5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('2', '2', '[', '2', 'B', '[', 0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('7', '7', ',', ',', 'H', '@', (-32), 771);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0gT]D-f'7J<Q&U9%R");
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('0', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('2', '+', '2', 'g', 'B', '[', 102, 99);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[D");
      Locale locale0 = Locale.TAIWAN;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      jSONScanner0.calendar = calendar0;
      jSONScanner0.setTimeZone('P', 'P', 'G');
      assertEquals('[', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[D");
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('-', 'Q', 'Q', 'Q', 'w');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("_UN-Ed8gT");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('_', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("C.A(4fdC|p<");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('C', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-9/9\":[{");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0000-00-00 00:00:00.00000000");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('0', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("?9s(5Y,; s_zp!R$g");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('?', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan false error", (-1));
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('s', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0gT]-f'7J<Q&U9%R", 26);
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('0', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      jSONScanner0.scanDate('E');
      assertEquals(0, jSONScanner0.token());
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2|f}p", 84);
      jSONScanner0.sp = 826;
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[D");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9*9");
      jSONScanner0.nextIdent();
      BigDecimal bigDecimal0 = jSONScanner0.decimalValue();
      assertEquals((short)9, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"K1&[e(o;hDySw");
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(2056, 2056);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ok?_f]-qgB,@]y/1_");
      String string0 = jSONScanner0.stringVal();
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("j{lTO#Ds;~Sg");
      jSONScanner0.bytesValue();
      assertEquals('j', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%02d");
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" -Qd[%o4LBuRU}", (-938));
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      double double0 = jSONScanner0.scanDouble('Z');
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str, ", (-684));
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-9V");
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('(', '(', '(', '(', '(', '(');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0-gT]D-f'7J<Q&U9%R", (-1319));
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy((-1319), (char[]) null, (-1319), (-1319));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[D");
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(1595, 1595, 1595, (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"K1&[Ue(o;hDySwM");
      // Undeclared exception!
      try { 
        jSONScanner0.scanDate('E');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1-99
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }
}
