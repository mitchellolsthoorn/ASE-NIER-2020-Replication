/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 18:47:30 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.TrayIcon;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.ObjectInputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.net.Proxy;
import java.nio.charset.Charset;
import java.security.KeyRep;
import java.sql.ClientInfoStatus;
import java.sql.PseudoColumnUsage;
import java.time.Month;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import java.util.Spliterator;
import javax.annotation.Resource;
import javax.jws.WebParam;
import javax.swing.SortOrder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":[{}],\"size\":false,\"color\":\"to\",\"value\":true,\"'\":null,\"number\":{},\"ha\":\"a string\"}");
      MockFileWriter mockFileWriter0 = new MockFileWriter("{\"fruit\":[{}],\"size\":false,\"color\":\"to\",\"value\":true,\"'\":null,\"number\":{},\"ha\":\"a string\"}");
      jSONObject0.write((Writer) mockFileWriter0, 1671, (-1610612734));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject.stringToNumber("-2289.269320");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        JSONObject.stringToNumber(",p");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [,p] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject.stringToNumber("0");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"\"\":[],\"Misplaced object.\":[],\"color\":\"value [%s] is not an array or object therefore its key %s cannot be resolved\",\"si\":true,\"value2\":false,\"x\":\"a string\",\"xx\":false}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 4 [character 5 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}TDInu&iSRTa0Rb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(125);
      jSONObject0.entrySet();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Locale locale0 = new Locale("Misplaced object.", "getClass");
      JSONObject jSONObject0 = new JSONObject(locale0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Spliterator<Object> spliterator0 = jSONArray0.spliterator();
      JSONObject jSONObject0 = new JSONObject(spliterator0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.putOnce("islongValxe", "islongValxe");
      try { 
        jSONObject0.getBigInteger("islongValxe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(10);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.write((Writer) charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toMap();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2202);
      JSONObject jSONObject1 = jSONObject0.putOnce("nam", "nam");
      jSONObject1.remove("nam");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":[],\"number\":\"1\"}");
      jSONObject0.query("");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      jSONObject0.put("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":null,\"number\":\"1\"}", (Object) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("org.json.JSONObject$Null", (String) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.put("&p^PDyO -f", (long) (byte)0);
      jSONObject0.optString("&p^PDyO -f");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JSONObject jSONObject0 = new JSONObject(locale0);
      jSONObject0.optQuery("");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("has", (Number) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"] not found.\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\",\"0.00\":[null]}");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject0.optNumber("7ga", (Number) bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Double double0 = new Double((-566.161376319));
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.optLong("|RL", 0L);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<Proxy.Type, Authenticator.RequestorType> hashMap0 = new HashMap<Proxy.Type, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optInt(".", (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-26));
      JSONObject jSONObject1 = jSONObject0.put("?u%Yk\"", (Object) byte0);
      jSONObject1.optInt("?u%Yk\"");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optFloat("-2289.269320", (float) 1187);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(10);
      jSONObject0.optFloat("~;y>qi8Xz@S2", (-1.0F));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1649);
      jSONObject0.optDouble("is", 0.0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Proxy.Type, Authenticator.RequestorType> hashMap0 = new HashMap<Proxy.Type, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optBoolean("Y`+Uq}_Zu1", false);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(roundingMode0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("", true);
      jSONObject1.optBoolean("");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.not();
      jSONObject0.optBigInteger("] not a string.", bigInteger1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.optBigInteger("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":null,\"number\":\"1\"}", bigInteger0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<ObjectInputStream, TrayIcon.MessageType> hashMap0 = new HashMap<ObjectInputStream, TrayIcon.MessageType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optBigDecimal("-0", (BigDecimal) null);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      jSONObject0.optBigDecimal("^rVl", bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      BigDecimal bigDecimal0 = new BigDecimal((-3685));
      jSONObject0.optBigDecimal("JSONArray[", bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"Misplaced object.\":[],\"color\":\"value [%s] is not an array or object therefore its key %s cannot be resolved\",\"si\":true,\"to\":null,\"x\":\"a string\",\"xx\":false}");
      jSONObject0.append("Mhz%", ",O8vENIf&bV");
      jSONObject0.opt("Mhz%");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(20);
      JSONObject jSONObject1 = jSONObject0.putOnce("{\"fruit\":\"Apple\",\"Misplaced object.\":[],\"color\":\"value [%s] is not an array or object therefore its key %s cannot be resolved\",\"si\":true,\"value2\":false,\"x\":\"a string\",\"xx\":false}", "{\"fruit\":\"Apple\",\"Misplaced object.\":[],\"color\":\"value [%s] is not an array or object therefore its key %s cannot be resolved\",\"si\":true,\"value2\":false,\"x\":\"a string\",\"xx\":false}");
      jSONObject1.length();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject.isDecimalNotation("D%6Q>(l*11PG");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, dataOutputStream0, 14, (-550));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":[],\"size\":\"Large\",\"color\":\"to\",\"value\":true,\"value2\":false,\"number\":{},\"x\":\"a string\"}");
      jSONObject0.accumulate("{\"fruit\":[],\"size\":\"Large\",\"color\":\"to\",\"value\":true,\"value2\":false,\"number\":{},\"x\":\"a string\"}", jSONObject0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("true");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      try { 
        jSONObject0.write((Writer) mockPrintWriter0, 125, 125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: {\"fruit\":[],\"size\":\"Large\",\"color\":\"to\",\"value\":true,\"value2\":false,\"number\":{},\"x\":\"a string\"}
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Proxy.Type, Authenticator.RequestorType> hashMap0 = new HashMap<Proxy.Type, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 1346, 5493);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\"}");
      // Undeclared exception!
      jSONObject0.toString(3012);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<BufferedReader, Proxy.Type> hashMap0 = new HashMap<BufferedReader, Proxy.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      // Undeclared exception!
      try { 
        jSONObject0.query(jSONPointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\".\",\"] not found.\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\",\"0.00\":true}");
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<Component.BaselineResizeBehavior, KeyRep.Type> hashMap0 = new HashMap<Component.BaselineResizeBehavior, KeyRep.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-905));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(234);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-1.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<ByteArrayOutputStream, BufferedWriter> hashMap0 = new HashMap<ByteArrayOutputStream, BufferedWriter>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.put("true", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Proxy.Type, Authenticator.RequestorType> hashMap0 = new HashMap<Proxy.Type, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":[{},[]],\"size\":\"Large\",\"color\":\"to\",\"value\":true,\"value2\":false,\"number\":{},\"[\":\"a string\",\"x\":fase}");
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("isunscaledValue");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 1187);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"Misplaced object.\":[],\"color\":\"value [%s] is not an array or object therefore its key %s cannot be resolved\",\"si\":true,\"value2\":false,\"x\":\"a string\",\"xx\":false}");
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":[{}],\"size\":\"Large\",\"color\":\"to\",\"value\":true,\"value2\":false,\"number\":{},\"ha\":\"a string\"}");
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, "{\"fruit\":[{}],\"size\":\"Large\",\"color\":\"to\",\"value\":true,\"value2\":false,\"number\":{},\"ha\":\"a string\"}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("'n'", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name 'n', locale ko
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(".", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("nam", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-560));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -560
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Proxy.Type, Authenticator.RequestorType> hashMap0 = new HashMap<Proxy.Type, Authenticator.RequestorType>();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.SERVER;
      hashMap0.put(proxy_Type0, authenticator_RequestorType0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("\"a string\"", (int) (byte)0);
      File file0 = MockFile.createTempFile("false", "\"a string\"");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      Writer writer0 = jSONObject0.write((Writer) mockFileWriter0, (int) (byte)0, 73);
      assertSame(mockFileWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1649);
      StringWriter stringWriter0 = new StringWriter(125);
      jSONObject0.write((Writer) stringWriter0, (-1057), 83);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(125);
      PipedInputStream pipedInputStream0 = new PipedInputStream(125);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) pipedInputStream0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("istoCharArray", false);
      Writer writer0 = jSONObject1.write((Writer) mockFileWriter0, (-1246), (-1246));
      assertSame(mockFileWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Object object0 = JSONObject.wrap(byteArrayOutputStream0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Object object0 = JSONObject.wrap(byte0);
      assertEquals((byte)0, object0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = JSONObject.wrap("s+");
      assertEquals("s+", object0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      Object object0 = JSONObject.wrap(roundingMode0);
      assertSame(object0, roundingMode0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      JSONObject.testValidity(byte0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Float float0 = new Float((-2505.51));
      JSONObject.testValidity(float0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Double double0 = new Double((-732.2205182));
      JSONObject.testValidity(double0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0");
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("JSON does not allow non-finite numbers.");
      assertEquals("JSON does not allow non-finite numbers.", object0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object object0 = JSONObject.stringToValue(",");
      assertEquals(",", object0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("false");
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("true");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("null");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Writer writer0 = JSONObject.quote("{\"fruit\":\"Apple\",\"Misplaced object.\":[],\"color\":\"value [%s] is not an array or object therefore its key %s cannot be resolved\",\"si\":true,\"value2\":false,\"x\":\"a string\",\"xx\":false}", (Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Writer writer0 = JSONObject.quote("#/", (Writer) mockPrintWriter0);
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1020);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Writer writer0 = JSONObject.quote("", (Writer) mockPrintWriter0);
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("4pIYqdN", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(";", (Object) bigInteger0);
      try { 
        jSONObject1.putOnce(";", bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \";\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("Null pointer", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(10);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Rd^C");
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charset0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(outputStreamWriter0, 1121);
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, bufferedWriter0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Dialog.ModalityType, Float> hashMap0 = new HashMap<Dialog.ModalityType, Float>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Integer integer0 = new Integer(863);
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"] is not an int.\":true,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":null,\"x\":\"a string\"}");
      jSONObject0.put("java.lang.Long@00000000280", false);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONObject0.optNumber("java.lang.Long@00000000280", (Number) bigDecimal0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Boolean boolean0 = new Boolean("}TDInu&iSRTa0Rb");
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.put("}dZ55~nYt,;spVU", 373L);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Number number0 = jSONObject0.optNumber("}dZ55~nYt,;spVU", (Number) bigDecimal0);
      assertEquals(373L, number0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("Tp=+n", 2520L);
      assertEquals(2520L, long0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("toString");
      int int0 = jSONObject1.optInt("toString", 12);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      int int0 = jSONObject0.optInt("\n", (-2705));
      assertEquals((-2705), int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat("RrOxhio(;2`by)Dh", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("1187..", 970.308092461508);
      assertEquals(970.308092461508, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"Misplaced object.\":[],\"color\":\"Red\",\"si\":true,\"value2\":false,\"x\":\"a string\"}");
      JSONObject jSONObject1 = jSONObject0.put(",O8vENIf&bV", (Object) "{\"fruit\":\"Apple\",\"Misplaced object.\":[],\"color\":\"Red\",\"si\":true,\"value2\":false,\"x\":\"a string\"}");
      boolean boolean0 = jSONObject1.optBoolean(",O8vENIf&bV", true);
      assertEquals(7, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      boolean boolean0 = jSONObject0.optBoolean("#\"p{dr?&*.p|5", true);
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("}TDInu&iSRTa0Rb", stringArray0);
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      Class<SortOrder> class0 = SortOrder.class;
      SortOrder sortOrder1 = jSONObject0.optEnum(class0, "}TDInu&iSRTa0Rb", sortOrder0);
      assertSame(sortOrder0, sortOrder1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"] not found.\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\",\"0.00\":[null]}");
      jSONObject0.opt("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"] not found.\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\",\"0.00\":[null]}");
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":-99,\"Unable to write JSONObject value for key: \":true,\"value2\":false,\"number\":\"1\",\"x\":[]}");
      jSONObject0.opt((String) null);
      assertEquals(7, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((long) 70);
      String string0 = JSONObject.numberToString(bigDecimal0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Short short0 = new Short((short)2080);
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Double double0 = new Double(291.2);
      JSONObject jSONObject0 = new JSONObject(double0);
      boolean boolean0 = jSONObject0.isEmpty();
      assertFalse(boolean0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("\f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("getclone", "islongValxe");
      try { 
        jSONObject1.getBoolean("getclone");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(10);
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      try { 
        jSONObject0.getEnum(class0, " O%1ZG.F RnN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\f", (Object) "Rd^C");
      Object object0 = jSONObject0.get("\f");
      assertEquals("Rd^C", object0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"x\":\"hello\",\"] not found.\":7,\"java.lang.Float@00000000030\":null,\"a\":[false],\"b\":{\"x\":99}}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<WebParam.Mode> class0 = WebParam.Mode.class;
      jSONObject0.optEnum(class0, "NjF lFlNW");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = jSONObject0.toString(637);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] not a string.\":false}");
      JSONPointer jSONPointer0 = new JSONPointer("");
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query(jSONPointer0);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(125);
      Set<String> set0 = jSONObject0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Boolean boolean0 = new Boolean((String) null);
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery(jSONPointer0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"] is not an int.\":true,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":null,\"x\":\"a string\"}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{\"fruit\":\"Apple\",\"] is not an int.\":true,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":null,\"x\":\"a string\"}");
      jSONObject0.write((Writer) mockPrintWriter0, 125, 198);
      assertEquals(7, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":[{}],\"size\":\"Large\",\"color\":\"to\",\"value\":true,\"value2\":false,\"number\":{},\"ha\":\"a string\"}");
      StringWriter stringWriter0 = new StringWriter(913);
      // Undeclared exception!
      jSONObject0.write((Writer) stringWriter0, 69, 2014);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      jSONObject0.put(",O8vENIf&bV", (Object) "{}");
      MockFileWriter mockFileWriter0 = new MockFileWriter("3}xqp7,", false);
      Writer writer0 = jSONObject0.write((Writer) mockFileWriter0, 1673, (-71));
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{\"fruit\":\"istoBigIntegerExact\",\"size\":[],\"3\":99,\"value\":true,\".\":99,\"number\":null,\"null\":{}}");
      JSONObject.indent(mockPrintWriter0, 125);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<Proxy.Type, Authenticator.RequestorType> hashMap0 = new HashMap<Proxy.Type, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[]}", hashMap0);
      jSONObject1.toString();
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("pointer cannot be null", true);
      Writer writer0 = JSONObject.writeValue(mockFileWriter0, (Object) null, 5827, 117);
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Object object0 = JSONObject.wrap(bigDecimal0);
      assertSame(object0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = (BigInteger)JSONObject.wrap(bigInteger0);
      assertEquals((short)0, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Double double0 = new Double(1.0);
      Object object0 = JSONObject.wrap(double0);
      assertEquals(1.0, object0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Float float0 = new Float((-104.6500036));
      Object object0 = JSONObject.wrap(float0);
      assertEquals((-104.65F), object0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Long long0 = new Long(1L);
      Object object0 = JSONObject.wrap(long0);
      assertEquals(1L, object0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Short short0 = new Short((short) (-1226));
      Object object0 = JSONObject.wrap(short0);
      assertEquals((short) (-1226), object0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.wrap(object0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = JSONObject.wrap(jSONArray0);
      assertSame(jSONArray0, object0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":[-99],\"1.0\":false,\"] is not a JSONObject.\":\"to\",\"value\":true,\"value2\":\"a string\",\"number\":-99,\"ha\":\"a string\"}");
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<ByteArrayInputStream, Resource.AuthenticationType> hashMap0 = new HashMap<ByteArrayInputStream, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.put("o i", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.accumulate((String) null, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0000");
      assertEquals("0000", object0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-458.059879847");
      assertEquals((-458.059879847), number0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("-@`Bd9We50U&c OJeBp");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("3Y;&cbfqM,Y49");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3Y;&c\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      try { 
        JSONObject.stringToNumber(".");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [.] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-0");
      assertEquals(-0.0, object0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("7E[");
      assertEquals("7E[", object0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("isnextProbable}rBme");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(10);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      boolean boolean0 = jSONObject1.similar(jSONObject0);
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertTrue(jSONObject0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"Misplaced object.\":[],\"color\":\"value [%s] is not an array or object therefore its key %s cannot be resolved\",\"si\":true,\"value2\":false,\"x\":\"a string\",\"xx\":false}");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = jSONObject0.similar(bigDecimal0);
      assertEquals(7, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = JSONObject.quote(",:]}/\"[{;=#");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote((String) null, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      JSONObject jSONObject1 = jSONObject0.putOpt("true", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(98);
      MockFile mockFile0 = new MockFile((File) null, "gettoList");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, mockFileWriter0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("nam", "nam");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "nam";
      stringArray0[1] = "nam";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(fileSystemHandling0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate(".L_5`", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<WebParam.Mode> class0 = WebParam.Mode.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      assertEquals(35, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"Misplaced object.\":[],\"color\":\"Red\",\"si\":true,\"value2\":false,\"x\":\"a string\"}");
      JSONObject jSONObject1 = jSONObject0.put(",O8vENIf&bV", (Object) "{\"fruit\":\"Apple\",\"Misplaced object.\":[],\"color\":\"Red\",\"si\":true,\"value2\":false,\"x\":\"a string\"}");
      jSONObject1.optString(",O8vENIf&bV", "{\"fruit\":\"Apple\",\"Misplaced object.\":[],\"color\":\"Red\",\"si\":true,\"value2\":false,\"x\":\"a string\"}");
      assertEquals(7, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"] is not an int.\":true,\"color\":\"Misplaced object.\",\"value\":true,\"value2\":false,\"number\":\"a string\",\"x\":\"a string\"}");
      jSONObject0.put("java.lang.Long@00000000280", false);
      jSONObject0.optNumber("java.lang.Long@00000000280");
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.put("islongValue", (Object) "islongValue");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Number number0 = jSONObject0.optNumber("islongValue", (Number) bigDecimal0);
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(125);
      JSONObject jSONObject1 = jSONObject0.put("xW!J", (float) 125);
      long long0 = jSONObject1.optLong("xW!J", (long) 125);
      assertEquals(125L, long0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("islongValue", (Object) "islongValue");
      long long0 = jSONObject1.optLong("islongValue", (-3317L));
      assertEquals((-3317L), long0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[12];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject1.put("true", (Object) jSONObject0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("true");
      assertSame(jSONObject2, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("\"");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"iskeySet\":true,\"] not found.\":\"a string\",\"java.lang.Float@00000000030\":null,\"a\":[false,null],\"getDeclaringClass\":{\"iskeySet\":99}}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      jSONObject0.optJSONArray("{\"iskeySet\":true,\"] not found.\":\"a string\",\"java.lang.Float@00000000030\":null,\"a\":[false,null],\"getDeclaringClass\":{\"iskeySet\":99}}");
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"Misplaced object.\":[],\"gettoUpperCase\":\"value [%s] is not an array or object therefore its key %s cannot be resolved\",\"si\":null,\"\":false,\"x\":\"a string\",\"xx\":false}");
      jSONObject0.put("Mhz%", true);
      int int0 = jSONObject0.optInt("Mhz%", 4);
      assertEquals(7, jSONObject0.length());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      JSONObject jSONObject1 = jSONObject0.increment("{}");
      int int0 = jSONObject1.optInt("{}");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(125);
      JSONObject jSONObject1 = jSONObject0.putOnce("nam", "nam");
      int int0 = jSONObject1.optInt("nam", 125);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(125, int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "4pIYqdN");
      char[] charArray0 = new char[9];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      jSONObject0.put("{\"true\":true,\"] not found.\":99,\"java.lang.Float@00000000030\":-99,\"a\":[false],\"~1\":[]}", (Object) charArrayReader0);
      float float0 = jSONObject0.optFloat("{\"true\":true,\"] not found.\":99,\"java.lang.Float@00000000030\":-99,\"a\":[false],\"~1\":[]}", 0.0F);
      assertEquals(3, jSONObject0.length());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("ne%y?XC\"\"!)i/tF;Y", 0L);
      float float0 = jSONObject0.optFloat("ne%y?XC\"\"!)i/tF;Y", (-1.0F));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":[],\"size\":\"Large\",\"color\":\"to\",\"value\":true,\"value2\":false,\"number\":{\"gettoString\":\"a string\"},\"[\":\"a string\",\"gettoString\":false}");
      jSONObject0.put("4pIYqdN", (Object) "{\"fruit\":[],\"size\":\"Large\",\"color\":\"to\",\"value\":true,\"value2\":false,\"number\":{\"gettoString\":\"a string\"},\"[\":\"a string\",\"gettoString\":false}");
      float float0 = jSONObject0.optFloat("4pIYqdN", 0.0F);
      assertEquals(9, jSONObject0.length());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(125);
      jSONObject0.putOnce("nam", "nam");
      double double0 = jSONObject0.optDouble("nam", (-580.37));
      assertEquals(1, jSONObject0.length());
      assertEquals((-580.37), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"] not found.\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\",\"0.00\":[null]}");
      jSONObject0.put("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"] not found.\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\",\"0.00\":[null]}", 1187);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.optBigInteger("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"] not found.\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\",\"0.00\":[null]}", bigInteger0);
      assertEquals(9, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(125);
      BigInteger bigInteger0 = jSONObject0.optBigInteger("iO&W", (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":[],\"] is not an int.\":true,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":null,\"ha\":\"a string\"}");
      JSONObject jSONObject1 = jSONObject0.put("false", (Object) "false");
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject1.optBigInteger("false", bigInteger0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HashMap<Proxy.Type, Authenticator.RequestorType> hashMap0 = new HashMap<Proxy.Type, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("IcprL5:(g#", bigDecimal0);
      assertEquals((short)1, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("m*rwPnuD", 99L);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("m*rwPnuD", bigDecimal0);
      assertEquals((short)99, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0);
      jSONObject0.put("] is not a JSONObject.", false);
      boolean boolean0 = jSONObject0.optBoolean("] is not a JSONObject.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOnce("nam", "nam");
      Class<ProcessBuilder.Redirect.Type> class0 = ProcessBuilder.Redirect.Type.class;
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.PIPE;
      jSONObject0.optEnum(class0, "nam", processBuilder_Redirect_Type0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(8448);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(125);
      JSONObject jSONObject1 = jSONObject0.put("xW!J", (float) 125);
      JSONArray jSONArray0 = jSONObject1.names();
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("[ 3x", (-1429.464F));
      JSONObject jSONObject1 = jSONObject0.increment("[ 3x");
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.put("] not found.", 122L);
      JSONObject jSONObject1 = jSONObject0.increment("] not found.");
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("nam", 1521);
      JSONObject jSONObject2 = jSONObject1.increment("nam");
      assertFalse(jSONObject2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("$q7d-rIBj7", (Object) bigInteger0);
      JSONObject jSONObject2 = jSONObject1.increment("$q7d-rIBj7");
      assertEquals(1, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":[{},[]],\"size\":\"Large\",\"color\":\"to\",\"value\":true,\"value2\":false,\"number\":{},\"[\":\"a string\",\"x\":fase}");
      jSONObject0.put("4pIYqdN", (Object) "{\"fruit\":[{},[]],\"size\":\"Large\",\"color\":\"to\",\"value\":true,\"value2\":false,\"number\":{},\"[\":\"a string\",\"x\":fase}");
      try { 
        jSONObject0.increment("4pIYqdN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000076].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("[ 3x", (-1429.464F));
      boolean boolean0 = jSONObject0.has("[ 3x");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("[ 3x", (Object) "[ 3x");
      String string0 = jSONObject1.getString("[ 3x");
      assertEquals("[ 3x", string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String[] stringArray0 = JSONObject.getNames((Object) byteArrayOutputStream0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "{\"fruit\":\"java.lang.Long@00000000030\",\"size\":null,\"color\":\"0\",\"] not found.\":\"a string\",\"value2\":null,\"number\":true,\"Unable to increment [\":\"a string\",\"0.00\":[null]}");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":-99,\"Unable to write JSONObject value for key: \":true,\"value2\":false,\"number\":\"1\",\"x\":[]}");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      HashMap<ObjectInputStream, TrayIcon.MessageType> hashMap0 = new HashMap<ObjectInputStream, TrayIcon.MessageType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("\r", 98);
      long long0 = jSONObject1.getLong("\r");
      assertEquals(98L, long0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":[{},[]],\"size\":\"Large\",\"color\":\"to\",\"trim\":true,\"value2\":false,\"number\":{},\"x\":false}");
      JSONObject jSONObject1 = jSONObject0.put("4pIYqdN", (Object) "{\"fruit\":[{},[]],\"size\":\"Large\",\"color\":\"to\",\"trim\":true,\"value2\":false,\"number\":{},\"x\":false}");
      try { 
        jSONObject1.getLong("4pIYqdN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000063] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"\":true,\"color\":-99,\"] not found.\":true,\"value2\":false,\"number\":\"1\",\"isisEmpty\":\"a string\",\"0.00\":-99}");
      JSONObject jSONObject1 = jSONObject0.put("{\"fruit\":\"Apple\",\"\":true,\"color\":-99,\"] not found.\":true,\"value2\":false,\"number\":\"1\",\"isisEmpty\":\"a string\",\"0.00\":-99}", (Object) "{\"fruit\":\"Apple\",\"\":true,\"color\":-99,\"] not found.\":true,\"value2\":false,\"number\":\"1\",\"isisEmpty\":\"a string\",\"0.00\":-99}");
      try { 
        jSONObject1.getJSONObject("{\"fruit\":\"Apple\",\"\":true,\"color\":-99,\"] not found.\":true,\"value2\":false,\"number\":\"1\",\"isisEmpty\":\"a string\",\"0.00\":-99}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000072] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("a*\"BX]![", "a*\"BX]![");
      JSONArray jSONArray0 = jSONObject1.getJSONArray("a*\"BX]![");
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("{\"\"\":\"a string\",\"1.0\":false,\"] is not a JSONObject.\":\"0000\",\"org.json.JSONPointer$Builder\":99,\"gettoString\":\"a string\",\"org.json.JSONObject\":-99,\"ha\":{}}", (Object) "{\"\"\":\"a string\",\"1.0\":false,\"] is not a JSONObject.\":\"0000\",\"org.json.JSONPointer$Builder\":99,\"gettoString\":\"a string\",\"org.json.JSONObject\":-99,\"ha\":{}}");
      try { 
        jSONObject0.getJSONArray("{\"\"\":\"a string\",\"1.0\":false,\"] is not a JSONObject.\":\"0000\",\"org.json.JSONPointer$Builder\":99,\"gettoString\":\"a string\",\"org.json.JSONObject\":-99,\"ha\":{}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(125);
      jSONObject0.put("xW!J", (float) 125);
      int int0 = jSONObject0.getInt("xW!J");
      assertEquals(125, int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(125);
      jSONObject0.putOnce("nam", "nam");
      try { 
        jSONObject0.getInt("nam");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"] not found.\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\",\"0.00\":[null]}");
      JSONObject jSONObject1 = jSONObject0.put("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"] not found.\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\",\"0.00\":[null]}", 1187);
      Number number0 = jSONObject1.getNumber("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"] not found.\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\",\"0.00\":[null]}");
      assertEquals(9, jSONObject0.length());
      assertEquals(1187, number0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      LinkedList<ClientInfoStatus> linkedList0 = new LinkedList<ClientInfoStatus>();
      JSONObject jSONObject0 = new JSONObject((int) (byte)0);
      JSONObject jSONObject1 = jSONObject0.put("toM", (Collection<?>) linkedList0);
      try { 
        jSONObject1.getNumber("toM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      HashMap<Locale.Category, BigInteger> hashMap0 = new HashMap<Locale.Category, BigInteger>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("lGW@,Q.IQe4IH]I1l-.", 7L);
      float float0 = jSONObject1.getFloat("lGW@,Q.IQe4IH]I1l-.");
      assertEquals(7.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(125);
      jSONObject0.putOnce("nam", "nam");
      try { 
        jSONObject0.getFloat("nam");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\"}");
      jSONObject0.put("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\"}", 5);
      double double0 = jSONObject0.getDouble("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\"}");
      assertEquals(8, jSONObject0.length());
      assertEquals(5.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":[],\"size\":\"Large\",\"color\":\"to\",\"value\":true,\"value2\":false,\"number\":{},\"x\":\"a string\"}");
      jSONObject0.accumulate("{\"fruit\":[],\"size\":\"Large\",\"color\":\"to\",\"value\":true,\"value2\":false,\"number\":{},\"x\":\"a string\"}", jSONObject0);
      try { 
        jSONObject0.getDouble("{\"fruit\":[],\"size\":\"Large\",\"color\":\"to\",\"value\":true,\"value2\":false,\"number\":{},\"x\":\"a string\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000876] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("islongValue", (Object) "islongValue");
      try { 
        jSONObject1.getBigDecimal("islongValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"] is not an int.\":true,\"color\":\"Misplaced object.\",\"value\":true,\"value2\":false,\"number\":\"a string\",\"x\":\"a string\"}");
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@00000000280", false);
      boolean boolean0 = jSONObject1.getBoolean("java.lang.Long@00000000280");
      assertEquals(8, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = JSONObject.doubleToString(125);
      assertEquals("125", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = JSONObject.doubleToString(104.3790104714);
      assertEquals("104.3790104714", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("a*\"BX]![", "a*\"BX]![");
      try { 
        jSONObject0.getBoolean("a*\"BX]![");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":{},\"1.0\":false,\"] is not a JSONObject.\":\"0000\",\"org.json.JSONPointer$Builder\":99,\"value2\":\"a string\",\"number\":-99,\"ha\":\"a string\"}");
      JSONObject jSONObject1 = jSONObject0.put("{\"fruit\":{},\"1.0\":false,\"] is not a JSONObject.\":\"0000\",\"org.json.JSONPointer$Builder\":99,\"value2\":\"a string\",\"number\":-99,\"ha\":\"a string\"}", (Object) "{\"fruit\":{},\"1.0\":false,\"] is not a JSONObject.\":\"0000\",\"org.json.JSONPointer$Builder\":99,\"value2\":\"a string\",\"number\":-99,\"ha\":\"a string\"}");
      try { 
        jSONObject1.append("{\"fruit\":{},\"1.0\":false,\"] is not a JSONObject.\":\"0000\",\"org.json.JSONPointer$Builder\":99,\"value2\":\"a string\",\"number\":-99,\"ha\":\"a string\"}", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[{\"fruit\":{},\"1.0\":false,\"] is not a JSONObject.\":\"0000\",\"org.json.JSONPointer$Builder\":99,\"value2\":\"a string\",\"number\":-99,\"ha\":\"a string\"}] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject0.accumulate("e;LK6j`.p0cEMD|}WK", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.putOnce("islongValxe", "islongValxe");
      jSONObject0.accumulate("islongValxe", (Object) null);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      HashMap<Character.UnicodeScript, PipedReader> hashMap0 = new HashMap<Character.UnicodeScript, PipedReader>();
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.OLD_TURKIC;
      hashMap0.put(character_UnicodeScript0, (PipedReader) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"fruit\":[{},[]],\"size\":\"LargeI,\"color\":\"to\",\"value\"true,7valu,2\":false,\"number(:{},\"[\":\"a string\",\"x\":false}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at 34 [character 35 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"Null pointer\":null,\"toMap\":\"Large\",\"color\":99,\"] not found.\":true,\"value2\":false,\"\\\":null,\"Unable to increment [\":99,\"0.00\":[null],\"x\":null}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 94 [character 95 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("true");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":null,\"to\":\"0\",\"] not found.\":true,\"value2\":false,\"number\":true,\"Unable to increment [\":false,\"0.00\":[null]}");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(8, map0.size());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = JSONObject.valueToString("j^>l,TS'");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("abs");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(160);
      Object object0 = jSONObject0.optQuery("/");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(125);
      String string0 = jSONObject0.optString("java.io.StringWriter@0000000007");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      HashMap<PseudoColumnUsage, BufferedReader> hashMap0 = new HashMap<PseudoColumnUsage, BufferedReader>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("getentrySet", (Map<?, ?>) hashMap0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":[{},[]],\"size\":\"Large\",\"color\":\"to\",\"value\":true,\"value2\":false,\"number\":{},\"[\":\"a string\",\"x\":false}");
      LinkedList<Month> linkedList0 = new LinkedList<Month>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      Object object0 = jSONObject0.query("/_Tg");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "^rVl");
      double double0 = jSONObject0.optDouble(",ch@2.Q7K");
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "java.io.StringWriter@0000000001");
      // Undeclared exception!
      try { 
        jSONObject0.query("] not found.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("[ 3x", (-1429.464F));
      try { 
        jSONObject1.getString("[ 3x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      boolean boolean1 = jSONObject0.isNull("t;?pf.SG:HL:&n");
      assertTrue(jSONObject0.isEmpty());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(fileSystemHandling0, stringArray0);
      jSONObject0.put(",:]}/\"[{;=#", (-1.0));
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(fileSystemHandling0);
      assertNotNull(jSONObject0);
      
      float float0 = jSONObject0.optFloat((String) null);
      assertEquals(Float.NaN, float0, 0.01F);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"] not found.\":true,\"value2\":true,\"number\":\"1\",\"] could not convert to BigDecimal.\":\"a string\",\"0.00\":[null]}");
      boolean boolean0 = jSONObject0.similar(jSONObject0);
      assertTrue(boolean0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2401);
      long long0 = jSONObject0.optLong("p");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
  }
}
