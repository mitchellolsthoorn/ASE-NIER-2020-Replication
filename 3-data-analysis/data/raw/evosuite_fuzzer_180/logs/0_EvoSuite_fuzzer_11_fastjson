* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.JSONReader
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.parser.JSONScanner
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.JSONPath
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.JSONObject
* Starting Client-0
* Starting Client-0
* Connecting to master process on port 8220
* Connecting to master process on port 8222
* Starting Client-0
* Connecting to master process on port 8221
* Starting Client-0
* Connecting to master process on port 8223
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:28:08.480 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 18:28:08.481 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONReader
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 740
* Using seed 11
* Starting evolution
[MASTER] 18:28:09.514 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 18:28:09.524 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Initial Number of Goals in DynaMOSA = 232 / 740
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONObject
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1211
* Using seed 11
* Starting evolution
* Initial Number of Goals in DynaMOSA = 496 / 1211
[MASTER] 18:28:11.138 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 18:28:11.139 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 18:28:11.139 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 18:28:11.139 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:28:13.457 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 18:28:13.458 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.parser.JSONScanner
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONPath
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 5652
* Using seed 11
* Starting evolution
* Initial Number of Goals in DynaMOSA = 470 / 5652
* Total number of test goals for DYNAMOSA: 7058
* Using seed 11
* Starting evolution
* Initial Number of Goals in DynaMOSA = 865 / 7058
[MASTER] 18:28:14.933 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 18:28:14.941 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayDeque<E> : Type points to itself
[MASTER] 18:28:14.942 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayList<E> : Type points to itself
[MASTER] 18:28:14.942 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumSet<E> : Type points to itself
[MASTER] 18:28:14.942 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashSet<E> : Type points to itself
[MASTER] 18:28:14.942 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 18:28:14.942 [logback-2] ERROR TestCluster - Failed to check cache for java.util.PriorityQueue<E> : Type points to itself
[MASTER] 18:28:14.942 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ServiceLoader<S> : Type points to itself
[MASTER] 18:28:14.942 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Stack<E> : Type points to itself
[MASTER] 18:28:14.942 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeSet<E> : Type points to itself
[MASTER] 18:28:14.943 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Vector<E> : Type points to itself
[MASTER] 18:28:14.943 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 18:28:14.949 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.Enum<E> : Type points to itself
[MASTER] 18:28:14.951 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 18:28:14.952 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 18:28:20.488 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 18:28:20.489 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
[MASTER] 18:28:22.880 [logback-2] ERROR ClientNodeImpl - Cannot inform master of change of state
java.rmi.ServerException: RemoteException occurred in server thread; nested exception is: 
	java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_Object.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:393) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(StreamRemoteCall.java:283) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:260) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:161) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_161]
	at com.sun.proxy.$Proxy7.evosuite_collectStatistics(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl.updateStatistics(ClientNodeImpl.java:266) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.sendIndividualToMaster(StatisticsSender.java:68) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsListener.lambda$new$0(StatisticsListener.java:69) [evosuite.jar:1.0.7-SNAPSHOT]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
Caused by: java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_Object.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:352) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	... 1 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_Object.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:203) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:168) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:149) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:115) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.readObject(GenericClass.java:1720) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor9.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:556) ~[na:1.8.0_161]
	at org.evosuite.testcase.DefaultTestCase.readObject(DefaultTestCase.java:1103) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.unmarshalValue(UnicastRef.java:322) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:341) ~[na:1.8.0_161]
	... 12 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_Object.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:190) ~[evosuite.jar:1.0.7-SNAPSHOT]
	... 75 common frames omitted
[MASTER] 18:28:25.217 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 18:28:25.900 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.reflect.Constructor<T> : Type points to itself
[MASTER] 18:28:53.834 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 18:29:21.122 [logback-2] ERROR ClientNodeImpl - Cannot inform master of change of state
java.rmi.ServerException: RemoteException occurred in server thread; nested exception is: 
	java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_Object.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:393) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(StreamRemoteCall.java:283) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:260) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:161) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_161]
	at com.sun.proxy.$Proxy7.evosuite_collectStatistics(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl.updateStatistics(ClientNodeImpl.java:266) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.sendIndividualToMaster(StatisticsSender.java:68) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsListener.lambda$new$0(StatisticsListener.java:69) [evosuite.jar:1.0.7-SNAPSHOT]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
Caused by: java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_Object.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:352) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	... 1 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_Object.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:203) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:168) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:149) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:115) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.readObject(GenericClass.java:1720) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor9.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:556) ~[na:1.8.0_161]
	at org.evosuite.testcase.DefaultTestCase.readObject(DefaultTestCase.java:1103) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor15.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.unmarshalValue(UnicastRef.java:322) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:341) ~[na:1.8.0_161]
	... 12 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_Object.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:190) ~[evosuite.jar:1.0.7-SNAPSHOT]
	... 74 common frames omitted
[MASTER] 18:30:03.613 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Map<K, V>.Entry<K, V> : Type points to itself
[MASTER] 18:30:09.897 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 18:30:22.569 [logback-2] ERROR ClientNodeImpl - Cannot inform master of change of state
java.rmi.ServerException: RemoteException occurred in server thread; nested exception is: 
	java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_Object.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:393) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(StreamRemoteCall.java:283) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:260) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:161) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_161]
	at com.sun.proxy.$Proxy7.evosuite_collectStatistics(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl.updateStatistics(ClientNodeImpl.java:266) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.sendIndividualToMaster(StatisticsSender.java:68) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsListener.lambda$new$0(StatisticsListener.java:69) [evosuite.jar:1.0.7-SNAPSHOT]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
Caused by: java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_Object.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:352) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	... 1 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_Object.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:203) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:168) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:149) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:115) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.readObject(GenericClass.java:1720) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor9.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:556) ~[na:1.8.0_161]
	at org.evosuite.testcase.DefaultTestCase.readObject(DefaultTestCase.java:1103) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor15.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.unmarshalValue(UnicastRef.java:322) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:341) ~[na:1.8.0_161]
	... 12 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_Object.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:190) ~[evosuite.jar:1.0.7-SNAPSHOT]
	... 74 common frames omitted
[MASTER] 18:30:38.636 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 182s and 49 generations, 16037 statements, best individual has fitness: 134.0
* Minimizing test suite
* Search finished after 183s and 118 generations, 37224 statements, best individual has fitness: 533.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 89%
* Total number of goals: 157
* Number of covered goals: 140
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 115
* Number of covered goals: 101
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 33
* Number of covered goals: 33
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 88%
* Total number of goals: 266
* Number of covered goals: 235
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 46%
* Total number of goals: 37
* Number of covered goals: 17
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 96%
* Total number of goals: 25
* Number of covered goals: 24
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 92%
* Total number of goals: 25
* Number of covered goals: 23
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 88%
* Total number of goals: 115
* Number of covered goals: 101
* Generated 60 tests with total length 239
* Resulting test suite's coverage: 80% (average coverage for all fitness functions)
* Generating assertions
* Minimizing test suite
* Resulting test suite's mutation score: 49%
* Compiling and checking tests
* Search finished after 185s and 244 generations, 181519 statements, best individual has fitness: 3634.0
[MASTER] 18:31:21.385 [logback-2] ERROR ClientNodeImpl - Cannot inform master of change of state
java.rmi.ServerException: RemoteException occurred in server thread; nested exception is: 
	java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_Object.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:393) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(StreamRemoteCall.java:283) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:260) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:161) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_161]
	at com.sun.proxy.$Proxy7.evosuite_collectStatistics(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl.updateStatistics(ClientNodeImpl.java:266) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.sendIndividualToMaster(StatisticsSender.java:68) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsListener.lambda$new$0(StatisticsListener.java:69) [evosuite.jar:1.0.7-SNAPSHOT]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
Caused by: java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_Object.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:352) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	... 1 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_Object.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:203) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:168) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:149) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:115) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.readObject(GenericClass.java:1720) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor9.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:556) ~[na:1.8.0_161]
	at org.evosuite.testcase.DefaultTestCase.readObject(DefaultTestCase.java:1103) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor15.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.unmarshalValue(UnicastRef.java:322) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:341) ~[na:1.8.0_161]
	... 12 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_Object.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:190) ~[evosuite.jar:1.0.7-SNAPSHOT]
	... 74 common frames omitted
* Search finished after 189s and 539 generations, 260550 statements, best individual has fitness: 3226.0
[MASTER] 18:31:25.421 [logback-2] ERROR ClientNodeImpl - Cannot inform master of change of state
java.rmi.ServerException: RemoteException occurred in server thread; nested exception is: 
	java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_Object.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:393) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(StreamRemoteCall.java:283) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:260) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:161) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_161]
	at com.sun.proxy.$Proxy7.evosuite_collectStatistics(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl.updateStatistics(ClientNodeImpl.java:266) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.sendIndividualToMaster(StatisticsSender.java:68) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.executedAndThenSendIndividualToMaster(StatisticsSender.java:98) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.generateTests(TestSuiteGenerator.java:687) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:245) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:155) [evosuite.jar:1.0.7-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
Caused by: java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_Object.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:352) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	... 3 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_Object.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:203) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:168) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:149) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:115) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.readObject(GenericClass.java:1720) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor9.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:556) ~[na:1.8.0_161]
	at org.evosuite.testcase.DefaultTestCase.readObject(DefaultTestCase.java:1103) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor15.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.unmarshalValue(UnicastRef.java:322) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:341) ~[na:1.8.0_161]
	... 12 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_Object.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:190) ~[evosuite.jar:1.0.7-SNAPSHOT]
	... 74 common frames omitted
* Minimizing test suite
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 60%
* Total number of goals: 254
* Number of covered goals: 152
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 51%
* Total number of goals: 172
* Number of covered goals: 87
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 24
* Number of covered goals: 24
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 58%
* Total number of goals: 333
* Number of covered goals: 192
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 41%
* Total number of goals: 162
* Number of covered goals: 67
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 95%
* Total number of goals: 59
* Number of covered goals: 56
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 92%
* Total number of goals: 59
* Number of covered goals: 54
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 51%
* Total number of goals: 172
* Number of covered goals: 87
* Generated 91 tests with total length 231
* Resulting test suite's coverage: 63% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 18%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'JSONReader_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s11/fastjson/evosuite-tests
* Done!

* Computation finished
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 46%
* Total number of goals: 1857
* Number of covered goals: 855
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 42%
* Total number of goals: 1519
* Number of covered goals: 635
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 66
* Number of covered goals: 66
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 67%
* Total number of goals: 567
* Number of covered goals: 378
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 66%
* Total number of goals: 94
* Number of covered goals: 62
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 48
* Number of covered goals: 48
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 48
* Number of covered goals: 47
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 38%
* Total number of goals: 1519
* Number of covered goals: 576
* Generated 253 tests with total length 672
* Resulting test suite's coverage: 63% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 18:32:08.298 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 18:32:08.299 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONObject jSONObject0 = new JSONObject(2147483645, false);
jSONObject0.fluentPut("istoString", jSONObject0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'JSONObject_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s11/fastjson/evosuite-tests
* Done!

* Computation finished
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 56%
* Total number of goals: 2079
* Number of covered goals: 1155
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 45%
* Total number of goals: 1850
* Number of covered goals: 834
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 87%
* Total number of goals: 157
* Number of covered goals: 137
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 61%
* Total number of goals: 913
* Number of covered goals: 559
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 72%
* Total number of goals: 114
* Number of covered goals: 82
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 99%
* Total number of goals: 126
* Number of covered goals: 125
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 94%
* Total number of goals: 126
* Number of covered goals: 118
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 42%
* Total number of goals: 1850
* Number of covered goals: 785
* Generated 376 tests with total length 1313
* Resulting test suite's coverage: 52% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 17%
* Compiling and checking tests
* Resulting test suite's mutation score: 30%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing tests to file
* Writing JUnit test case 'JSONScanner_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s11/fastjson/evosuite-tests
* Done!

* Computation finished
[MASTER] 18:34:11.567 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class com.alibaba.fastjson.JSONPathException: json-path can not be null or empty
[MASTER] 18:34:11.567 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
JSONPath.arrayAdd((Object) jSONPath_WildCardSegment0, "", (Object[]) null);

[MASTER] 18:34:13.537 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class com.alibaba.fastjson.JSONPathException: illeal jsonpath syntax. !cbzs2
[MASTER] 18:34:13.537 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONPath.size((Object) "!cbzs2", "!cbzs2");

[MASTER] 18:34:23.441 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class com.alibaba.fastjson.JSONPathException: not support jsonpath : bgj2WBmQFVa>+=9K
[MASTER] 18:34:23.441 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONPath jSONPath0 = JSONPath.compile("bgj2WBmQFVa>+=9K");
jSONPath0.contains((Object) "bgj2WBmQFVa>+=9K");

[MASTER] 18:34:33.890 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<180> but was:<168>
[MASTER] 18:34:33.891 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(2105);
SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("G;=hBQ544u+7ROjg", "com.alibaba.fastjson.PropertyNamingStrategy", 2105, hashMap0);
SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("G;=hBQ544u+7ROjg", hashMap0, sQLClientInfoException0);
SerializeConfig serializeConfig0 = new SerializeConfig(2105, false);
Map<String, Object> map0 = JSONPath.paths((Object) sQLClientInfoException1, serializeConfig0);
assertEquals(180, map0.size());


[MASTER] 18:34:36.398 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class com.alibaba.fastjson.JSONPathException: not support jsonpath : oE/*Y'k`Zk^
[MASTER] 18:34:36.398 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
JSONPath.eval((Object) jSONPath_WildCardSegment0, "oE/*Y'k`Zk^");

[MASTER] 18:34:37.797 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.UnsupportedOperationException: null
[MASTER] 18:34:37.797 [logback-1] WARN  JUnitAnalyzer - Failing test:
 String[] stringArray0 = new String[4];
stringArray0[0] = "CpjBl[Ok<J0p<j";
JSONPath.reserveToObject("ql", stringArray0);

[MASTER] 18:34:38.814 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StringIndexOutOfBoundsException: String index out of range: 0
[MASTER] 18:34:38.814 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Long long0 = new Long((-2332));
JSONPath.keySet((Object) long0, "[.~LP1F\"o(7t=SURpK");

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 10
* Writing tests to file
* Writing JUnit test case 'JSONPath_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s11/fastjson/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.parser.JSONReaderScanner
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.parser.DefaultJSONParser
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.JSON
* Starting Client-0
* Starting Client-0
* Connecting to master process on port 8221
* Connecting to master process on port 8220
* Starting Client-0
* Connecting to master process on port 8222
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.parser.JSONReaderScanner
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1110
* Using seed 11
* Starting evolution
* Initial Number of Goals in DynaMOSA = 338 / 1110
[MASTER] 18:35:04.400 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 18:35:04.408 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSON
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2080
* Using seed 11
* Starting evolution
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
* Initial Number of Goals in DynaMOSA = 747 / 2080
[MASTER] 18:35:05.596 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 18:35:05.598 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 18:35:05.610 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.Enum<E> : Type points to itself
[MASTER] 18:35:05.610 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 18:35:05.611 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 18:35:08.154 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 18:35:08.155 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
[MASTER] 18:35:08.568 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.parser.DefaultJSONParser
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3512
* Using seed 11
* Starting evolution
* Initial Number of Goals in DynaMOSA = 650 / 3512
[MASTER] 18:35:09.353 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 18:35:09.356 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 18:35:09.364 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayDeque<E> : Type points to itself
[MASTER] 18:35:09.364 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayList<E> : Type points to itself
[MASTER] 18:35:09.365 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumMap<K, V> : Type points to itself
[MASTER] 18:35:09.365 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumSet<E> : Type points to itself
[MASTER] 18:35:09.366 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashSet<E> : Type points to itself
[MASTER] 18:35:09.366 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Hashtable<K, V> : Type points to itself
[MASTER] 18:35:09.366 [logback-2] ERROR TestCluster - Failed to check cache for java.util.IdentityHashMap<K, V> : Type points to itself
[MASTER] 18:35:09.367 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashMap<K, V> : Type points to itself
[MASTER] 18:35:09.367 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 18:35:09.370 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Stack<E> : Type points to itself
[MASTER] 18:35:09.371 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeMap<K, V> : Type points to itself
[MASTER] 18:35:09.372 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeSet<E> : Type points to itself
[MASTER] 18:35:09.373 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Vector<E> : Type points to itself
[MASTER] 18:35:14.719 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 18:35:16.075 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 18:35:16.076 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
[MASTER] 18:35:22.939 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for java.lang.reflect.Constructor<java.lang.Double> canUseFunctionalMocks=false, canBeMocked: false
[MASTER] 18:35:31.457 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 18:35:31.472 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.alibaba.fastjson.serializer.BeanContext due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.alibaba.fastjson.util.FieldInfo due to org.evosuite.ga.ConstructionFailedException: No generators of type java.util.Map<java.lang.reflect.TypeVariable, java.lang.reflect.Type>
[MASTER] 18:35:31.639 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: No generators of type java.util.Map<java.lang.reflect.TypeVariable, java.lang.reflect.Type>
[MASTER] 18:35:35.888 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.alibaba.fastjson.serializer.BeanContext due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.alibaba.fastjson.util.FieldInfo due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.util.HashMap due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 18:35:49.082 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.alibaba.fastjson.util.ParameterizedTypeImpl due to org.evosuite.ga.ConstructionFailedException: Have no generator for java.lang.reflect.Constructor<java.lang.Double> canUseFunctionalMocks=false, canBeMocked: false
[MASTER] 18:35:50.153 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 18:36:12.306 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.alibaba.fastjson.util.ParameterizedTypeImpl due to org.evosuite.ga.ConstructionFailedException: No generators of type java.util.Map<java.lang.reflect.TypeVariable, java.lang.reflect.Type>
[MASTER] 18:36:16.601 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 18:36:30.101 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.alibaba.fastjson.serializer.BeanContext due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.alibaba.fastjson.util.FieldInfo due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 18:36:37.184 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 18:36:51.335 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for class java.lang.reflect.Method canUseFunctionalMocks=false, canBeMocked: false
[MASTER] 18:36:57.977 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.alibaba.fastjson.serializer.BeanContext due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.alibaba.fastjson.util.FieldInfo due to org.evosuite.ga.ConstructionFailedException: Have no generator for class java.lang.reflect.Method canUseFunctionalMocks=true, canBeMocked: false
[MASTER] 18:37:38.599 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Map<K, V>.Entry<K, V> : Type points to itself
[MASTER] 18:37:43.036 [logback-2] ERROR TestCluster - Failed to check cache for java.time.temporal.TemporalQuery<R> : Type points to itself
[MASTER] 18:38:04.696 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.alibaba.fastjson.util.ParameterizedTypeImpl due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.alibaba.fastjson.serializer.BeanContext due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.alibaba.fastjson.util.FieldInfo due to org.evosuite.ga.ConstructionFailedException: Have no generator for class java.lang.reflect.Method canUseFunctionalMocks=true, canBeMocked: false
* Search finished after 184s and 202 generations, 121339 statements, best individual has fitness: 555.0
* Search finished after 186s and 65 generations, 34175 statements, best individual has fitness: 173.0
* Minimizing test suite
* Search finished after 183s and 146 generations, 95745 statements, best individual has fitness: 1333.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 83%
* Total number of goals: 156
* Number of covered goals: 129
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 78%
* Total number of goals: 104
* Number of covered goals: 81
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 40
* Number of covered goals: 40
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 91%
* Total number of goals: 662
* Number of covered goals: 602
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 70%
* Total number of goals: 40
* Number of covered goals: 28
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 78%
* Total number of goals: 104
* Number of covered goals: 81
* Generated 81 tests with total length 242
* Resulting test suite's coverage: 82% (average coverage for all fitness functions)
* Generating assertions
* Minimizing test suite
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 64%
* Total number of goals: 973
* Number of covered goals: 621
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 61%
* Total number of goals: 707
* Number of covered goals: 431
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 59
* Number of covered goals: 59
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 72%
* Total number of goals: 897
* Number of covered goals: 649
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 58%
* Total number of goals: 102
* Number of covered goals: 59
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 63
* Number of covered goals: 63
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 87%
* Total number of goals: 63
* Number of covered goals: 55
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 51%
* Total number of goals: 707
* Number of covered goals: 360
* Generated 182 tests with total length 836
* Resulting test suite's coverage: 68% (average coverage for all fitness functions)
* Generating assertions
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 86%
* Total number of goals: 435
* Number of covered goals: 373
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 82%
* Total number of goals: 283
* Number of covered goals: 233
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 98%
* Total number of goals: 136
* Number of covered goals: 133
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 74%
* Total number of goals: 716
* Number of covered goals: 532
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 43%
* Total number of goals: 197
* Number of covered goals: 84
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 83
* Number of covered goals: 83
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 92%
* Total number of goals: 83
* Number of covered goals: 76
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 78%
* Total number of goals: 283
* Number of covered goals: 222
* Generated 265 tests with total length 1150
* Resulting test suite's coverage: 77% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 29%
* Compiling and checking tests
* Resulting test suite's mutation score: 30%
* Compiling and checking tests
* Resulting test suite's mutation score: 26%
* Compiling and checking tests
[MASTER] 18:39:21.528 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 18:39:21.530 [logback-1] WARN  JUnitAnalyzer - Failing test:
 SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
MockFile mockFile0 = new MockFile("{c`zK)?1W");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
JSON.writeJSONString((OutputStream) mockPrintStream0, (Object) mockFile0, serializerFeatureArray0);

[MASTER] 18:39:26.992 [logback-2] ERROR ClassStateSupport - Could not initialize null: null
[MASTER] 18:39:26.996 [logback-2] ERROR ClassStateSupport - Could not initialize com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/parser/deserializer/AbstractDateDeserializer.deserialze(Lcom/alibaba/fastjson/parser/DefaultJSONParser;Ljava/lang/reflect/Type;Ljava/lang/Object;Ljava/lang/String;I)Ljava/lang/Object; @341: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[3]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @341
    flags: { }
    locals: { 'com/alibaba/fastjson/parser/deserializer/AbstractDateDeserializer', 'com/alibaba/fastjson/parser/DefaultJSONParser', 'java/lang/reflect/Type', 'java/lang/Object', 'java/lang/String', integer, 'com/alibaba/fastjson/parser/JSONLexer', top, top, top, 'java/lang/String', null, 'java/util/Locale', 'java/lang/String' }
    stack: { uninitialized 333, uninitialized 333, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 10b8 0022 2bb4 0036 3a06 b800 10b8
    0x0000010: 0022 1906 b900 3c01 0005 b800 4212 43b6
    0x0000020: 0047 b800 10a0 006b b800 10b8 0022 1906
    0x0000030: b900 4b01 0037 07b8 0010 b800 2219 0610
    0x0000040: 10b9 004e 0200 b800 10b8 0022 1250 1904
    0x0000050: b600 56b8 0042 1243 b600 47b8 0010 9900
    0x0000060: 11b8 0010 b800 2216 0714 0057 6937 07b8
    0x0000070: 0010 b800 2216 07b8 005e 3a09 b800 10b8
    0x0000080: 0022 b800 4212 5fb6 0047 b800 10a7 07b3
    0x0000090: 1906 b900 3c01 0007 b800 4212 60b6 0047
    0x00000a0: b800 10a0 04a6 b800 10b8 0022 1906 b900
    0x00000b0: 6401 003a 0ab8 0010 b800 2219 04b8 0042
    0x00000c0: 1265 b600 47b8 0010 c603 d2b8 0010 b800
    0x00000d0: 2212 6719 04b6 0056 b800 4212 68b6 0047
    0x00000e0: b800 1099 0041 2cc1 006a b800 4212 6bb6
    0x00000f0: 0047 b800 1099 002f 2cc0 006a b800 10b8
    0x0000100: 0022 b600 6e12 70b6 0056 b800 4212 71b6
    0x0000110: 0047 b800 1099 000f b800 10b8 0022 190a
    0x0000120: b800 77b0 b800 10b8 0022 013a 0bb8 0010
    0x0000130: b800 22bb 0079 5919 042b b400 36b9 007d
    0x0000140: 0100 b800 8399 0016 3a0c 3a0d 58bb 0085
    0x0000150: 5919 0d19 0db7 0088 a700 06b7 0089 3a0b
    0x0000160: b800 10b8 0022 b800 4212 8ab6 0047 b800
    0x0000170: 10a7 0097 b800 10b8 0022 3a0e b800 10b8
    0x0000180: 0022 1904 128c b600 90b8 0042 1291 b600
    0x0000190: 47b8 0010 9900 74b8 0010 b800 2219 0412
    0x00001a0: 8c12 93b6 0097 3a0f b800 10b8 0022 bb00
    0x00001b0: 7959 190f 2bb4 0036 b900 7d01 00b8 0083
    0x00001c0: 9900 163a 103a 1158 bb00 8559 1911 1911
    0x00001d0: b700 88a7 0006 b700 893a 0bb8 0010 b800
    0x00001e0: 22b8 0042 1298 b600 47b8 0010 a700 1cb8
    0x00001f0: 0010 b800 223a 12b8 0010 b800 2219 0e59
    0x0000200: 1299 129a b800 9ebf b800 10b8 0022 b200
    0x0000210: a4b8 0042 12a5 b600 47b8 0010 c600 17b8
    0x0000220: 0010 b800 2219 0b2b b400 36b9 00a9 0100
    0x0000230: b600 adb8 0010 b800 2219 0b19 0ab6 00b1
    0x0000240: 3a09 b800 10b8 0022 b800 4212 b2b6 0047
    0x0000250: b800 10a7 0014 b800 10b8 0022 3a0e b800
    0x0000260: 10b8 0022 013a 09b8 0010 b800 2219 09b8
    0x0000270: 0042 12b3 b600 47b8 0010 c701 34b2 00b7
    0x0000280: b200 bcb8 0042 12bd b600 47b8 0010 a601
    0x0000290: 20b8 0010 b800 22bb 0079 5919 04b2 00c0
    0x00002a0: b800 8399 0016 3a13 3a14 58bb 0085 5919
    0x00002b0: 1419 14b7 0088 a700 06b7 0089 3a0b b800
    0x00002c0: 10b8 0022 b800 4212 c1b6 0047 b800 10a7
    0x00002d0: 0097 b800 10b8 0022 3a0e b800 10b8 0022
    0x00002e0: 1904 128c b600 90b8 0042 12c2 b600 47b8
    0x00002f0: 0010 9900 74b8 0010 b800 2219 0412 8c12
    0x0000300: 93b6 0097 3a0f b800 10b8 0022 bb00 7959
    0x0000310: 190f 2bb4 0036 b900 7d01 00b8 0083 9900
    0x0000320: 163a 153a 1658 bb00 8559 1916 1916 b700
    0x0000330: 88a7 0006 b700 893a 0bb8 0010 b800 22b8
    0x0000340: 0042 12c3 b600 47b8 0010 a700 1cb8 0010
    0x0000350: b800 223a 12b8 0010 b800 2219 0e59 1299
    0x0000360: 129a b800 9ebf b800 10b8 0022 190b 2bb4
    0x0000370: 0036 b900 a901 00b6 00ad b800 10b8 0022
    0x0000380: 190b 190a b600 b13a 09b8 0010 b800 22b8
    0x0000390: 0042 12c4 b600 47b8 0010 a700 14b8 0010
    0x00003a0: b800 223a 0eb8 0010 b800 2201 3a09 b800
    0x00003b0: 10b8 0022 1909 b800 4212 c5b6 0047 b800
    0x00003c0: 10c7 00c5 b800 10b8 0022 1904 12c7 b600
    0x00003d0: 56b8 0042 12c8 b600 47b8 0010 9900 a119
    0x00003e0: 0ab8 0010 b800 22b6 00cb 1013 b800 4212
    0x00003f0: ccb6 0047 b800 10a0 0086 b800 10b8 0022
    0x0000400: bb00 7959 12ce b200 b7b8 0083 9900 163a
    0x0000410: 173a 1858 bb00 8559 1918 1918 b700 88a7
    0x0000420: 0006 b700 893a 0eb8 0010 b800 2219 0eb2
    0x0000430: 00a4 b600 adb8 0010 b800 2219 0e19 0ab6
    0x0000440: 00b1 3a09 b800 10b8 0022 b800 4212 cfb6
    0x0000450: 0047 b800 10a7 0031 b800 10b8 0022 3a0e
    0x0000460: b800 10b8 0022 013a 09b8 0010 b800 22b8
    0x0000470: 0042 12d0 b600 47b8 0010 a700 0cb8 0010
    0x0000480: b800 2201 3a09 b800 10b8 0022 b800 4212
    0x0000490: d1b6 0047 b800 10a7 000c b800 10b8 0022
    0x00004a0: 013a 09b8 0010 b800 2219 09b8 0042 12d2
    0x00004b0: b600 47b8 0010 c700 7fb8 0010 b800 2219
    0x00004c0: 0a3a 09b8 0010 b800 2219 0610 10b9 004e
    0x00004d0: 0200 b800 10b8 0022 1906 b200 d8b9 00db
    0x00004e0: 0200 b800 4212 dcb6 0047 b800 1099 0048
    0x00004f0: b800 10b8 0022 bb00 de59 190a b700 e13a
    0x0000500: 0bb8 0010 b800 2219 0bb6 00e4 b800 4212
    0x0000510: e5b6 0047 b800 1099 0013 b800 10b8 0022
    0x0000520: 190b b600 e9b6 00ef 3a09 b800 10b8 0022
    0x0000530: 190b b600 f2b8 0010 b800 22b8 0042 12f3
    0x0000540: b600 47b8 0010 a702 fa19 06b9 003c 0100
    0x0000550: 1008 b800 4212 f4b6 0047 b800 10a0 0027
    0x0000560: b800 10b8 0022 1906 b900 f601 00b8 0010
    0x0000570: b800 2201 3a09 b800 4212 f7b6 0047 b800
    0x0000580: 10a7 02bf b800 10b8 0022 1906 b900 3c01
    0x0000590: 0010 0cb8 0042 12f8 b600 47b8 0010 a001
    0x00005a0: abb8 0010 b800 2219 06b9 00f6 0100 b800
    0x00005b0: 10b8 0022 1906 b900 3c01 0007 b800 4212
    0x00005c0: f9b6 0047 b800 10a0 00c3 b800 10b8 0022
    0x00005d0: 1906 b900 6401 003a 0ab8 0010 b800 22b2
    0x00005e0: 00fd 190a b600 56b8 0042 12fe b600 47b8
    0x00005f0: 0010 9900 7bb8 0010 b800 2219 06b9 00f6
    0x0000600: 0100 b800 10b8 0022 2b10 11b6 0101 b800
    0x0000610: 10b8 0022 1906 b900 6401 003a 0bb8 0010
    0x0000620: b800 222b b601 0519 0b01 1906 b901 0801
    0x0000630: 00b6 010e 3a0e b800 10b8 0022 190e b800
    0x0000640: 4213 010f b600 47b8 0010 c600 0cb8 0010
    0x0000650: b800 2219 0e4d b800 10b8 0022 2b07 b601
    0x0000660: 01b8 0010 b800 222b 1010 b601 01b8 0010
    0x0000670: b800 2219 0605 b901 1202 00b8 0042 1301
    0x0000680: 13b6 0047 b800 10a7 001c b800 10b8 0022
    0x0000690: bb01 1559 1301 17b7 0118 5912 9912 9ab8
    0x00006a0: 009e bfb8 0010 b800 2219 06b9 003c 0100
    0x00006b0: 05b8 0042 1301 19b6 0047 b800 10a0 002e
    0x00006c0: b800 10b8 0022 1906 b900 4b01 0037 19b8
    0x00006d0: 0010 b800 2219 06b9 00f6 0100 b800 4213
    0x00006e0: 011a b600 47b8 0010 a700 33b8 0010 b800
    0x00006f0: 22bb 0115 59bb 011c 59b7 011d 1301 1fb6
    0x0000700: 0123 1906 b901 2601 00b6 0123 b601 29b7
    0x0000710: 0118 5912 9912 9ab8 009e bfb8 0010 b800
    0x0000720: 2216 19b8 005e 3a09 b800 10b8 0022 2b10
    0x0000730: 0db6 0101 b800 10b8 0022 b800 4213 012a
    0x0000740: b600 47b8 0010 a700 fa2b b601 2d05 b800
    0x0000750: 4213 012e b600 47b8 0010 a000 dab8 0010
    0x0000760: b800 222b 03b6 0131 b800 10b8 0022 2b10
    0x0000770: 10b6 0101 b800 10b8 0022 1906 b900 3c01
    0x0000780: 0007 b800 4213 0132 b600 47b8 0010 a000
    0x0000790: 5ab8 0010 b800 2213 0134 1906 b900 6401
    0x00007a0: 00b6 0056 b800 4213 0135 b600 47b8 0010
    0x00007b0: 9a00 1cb8 0010 b800 22bb 0115 5913 0117
    0x00007c0: b701 1859 1299 129a b800 9ebf b800 10b8
    0x00007d0: 0022 1906 b900 f601 00b8 0042 1301 36b6
    0x00007e0: 0047 b800 10a7 001c b800 10b8 0022 bb01
    0x00007f0: 1559 1301 17b7 0118 5912 9912 9ab8 009e
    0x0000800: bfb8 0010 b800 222b 1011 b601 01b8 0010
    0x0000810: b800 222b b601 393a 09b8 0010 b800 222b
    0x0000820: 100d b601 01b8 0042 1301 3ab6 0047 b800
    0x0000830: 10a7 000f b800 10b8 0022 2bb6 0139 3a09
    0x0000840: b800 10b8 0022 2a2b 2c2d 1909 b601 3eb0
    0x0000850:                                        
  Exception Handler Table:
    bci [301, 352] => handler: 372
    bci [424, 475] => handler: 495
    bci [563, 578] => handler: 598
    bci [657, 702] => handler: 722
    bci [774, 825] => handler: 845
    bci [890, 905] => handler: 925
    bci [1018, 1092] => handler: 1112
  Stackmap Table:
    append_frame(@111,Object[#56],Long)
    chop_frame(@144,1)
    full_frame(@292,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Top,Object[#82]},{})
    full_frame(@347,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Top,Object[#82],Null},{Uninitialized[#307],Uninitialized[#307],Object[#82],Object[#185]})
    same_locals_1_stack_item_frame(@350,Object[#121])
    full_frame(@372,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Top,Object[#82],Object[#121]},{Object[#46]})
    full_frame(@470,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Top,Object[#82],Object[#121],Top,Top,Object[#46],Object[#82]},{Uninitialized[#430],Uninitialized[#430],Object[#82],Object[#185]})
    same_locals_1_stack_item_frame(@473,Object[#121])
    same_locals_1_stack_item_frame(@495,Object[#46])
    full_frame(@520,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Top,Object[#82],Object[#121]},{})
    same_frame(@563)
    same_locals_1_stack_item_frame(@598,Object[#48])
    full_frame(@615,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Object[#347],Object[#82],Object[#121]},{})
    full_frame(@697,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Object[#347],Object[#82],Object[#121]},{Uninitialized[#663],Uninitialized[#663],Object[#82],Object[#185]})
    same_locals_1_stack_item_frame(@700,Object[#121])
    same_locals_1_stack_item_frame(@722,Object[#46])
    full_frame(@820,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Object[#347],Object[#82],Object[#121],Top,Top,Object[#46],Object[#82]},{Uninitialized[#780],Uninitialized[#780],Object[#82],Object[#185]})
    same_locals_1_stack_item_frame(@823,Object[#121])
    same_locals_1_stack_item_frame(@845,Object[#46])
    full_frame(@870,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Object[#347],Object[#82],Object[#121]},{})
    same_locals_1_stack_item_frame(@925,Object[#48])
    same_frame(@942)
    full_frame(@1058,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Object[#347],Object[#82],Object[#121]},{Uninitialized[#1024],Uninitialized[#1024],Object[#82],Object[#185]})
    same_locals_1_stack_item_frame(@1061,Object[#121])
    same_locals_1_stack_item_frame(@1112,Object[#48])
    same_frame(@1149)
    same_frame(@1158)
    full_frame(@1178,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Top,Object[#82]},{})
    full_frame(@1187,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Object[#347],Object[#82]},{})
    full_frame(@1322,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Object[#345],Object[#82],Object[#222]},{})
    chop_frame(@1333,1)
    full_frame(@1353,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56]},{})
    same_frame(@1412)
    full_frame(@1622,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Top,Object[#82],Object[#82],Top,Top,Object[#106]},{})
    full_frame(@1645,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Top,Object[#82]},{})
    full_frame(@1674,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56]},{})
    full_frame(@1699,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Top,Object[#82]},{})
    same_frame_extended(@1771)
    full_frame(@1819,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Top,Object[#82],Top,Top,Top,Top,Top,Top,Top,Top,Top,Top,Top,Top,Top,Top,Long},{})
    full_frame(@1865,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56]},{})
    same_frame_extended(@1996)
    same_frame(@2024)
    same_frame(@2049)
    same_frame(@2100)
    append_frame(@2112,Top,Top,Object[#345])

[MASTER] 18:39:27.111 [logback-2] ERROR ClassStateSupport - Could not initialize com.alibaba.fastjson.serializer.DateCodec: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/parser/deserializer/AbstractDateDeserializer.deserialze(Lcom/alibaba/fastjson/parser/DefaultJSONParser;Ljava/lang/reflect/Type;Ljava/lang/Object;Ljava/lang/String;I)Ljava/lang/Object; @341: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[3]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @341
    flags: { }
    locals: { 'com/alibaba/fastjson/parser/deserializer/AbstractDateDeserializer', 'com/alibaba/fastjson/parser/DefaultJSONParser', 'java/lang/reflect/Type', 'java/lang/Object', 'java/lang/String', integer, 'com/alibaba/fastjson/parser/JSONLexer', top, top, top, 'java/lang/String', null, 'java/util/Locale', 'java/lang/String' }
    stack: { uninitialized 333, uninitialized 333, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 10b8 0022 2bb4 0036 3a06 b800 10b8
    0x0000010: 0022 1906 b900 3c01 0005 b800 4212 43b6
    0x0000020: 0047 b800 10a0 006b b800 10b8 0022 1906
    0x0000030: b900 4b01 0037 07b8 0010 b800 2219 0610
    0x0000040: 10b9 004e 0200 b800 10b8 0022 1250 1904
    0x0000050: b600 56b8 0042 1243 b600 47b8 0010 9900
    0x0000060: 11b8 0010 b800 2216 0714 0057 6937 07b8
    0x0000070: 0010 b800 2216 07b8 005e 3a09 b800 10b8
    0x0000080: 0022 b800 4212 5fb6 0047 b800 10a7 07b3
    0x0000090: 1906 b900 3c01 0007 b800 4212 60b6 0047
    0x00000a0: b800 10a0 04a6 b800 10b8 0022 1906 b900
    0x00000b0: 6401 003a 0ab8 0010 b800 2219 04b8 0042
    0x00000c0: 1265 b600 47b8 0010 c603 d2b8 0010 b800
    0x00000d0: 2212 6719 04b6 0056 b800 4212 68b6 0047
    0x00000e0: b800 1099 0041 2cc1 006a b800 4212 6bb6
    0x00000f0: 0047 b800 1099 002f 2cc0 006a b800 10b8
    0x0000100: 0022 b600 6e12 70b6 0056 b800 4212 71b6
    0x0000110: 0047 b800 1099 000f b800 10b8 0022 190a
    0x0000120: b800 77b0 b800 10b8 0022 013a 0bb8 0010
    0x0000130: b800 22bb 0079 5919 042b b400 36b9 007d
    0x0000140: 0100 b800 8399 0016 3a0c 3a0d 58bb 0085
    0x0000150: 5919 0d19 0db7 0088 a700 06b7 0089 3a0b
    0x0000160: b800 10b8 0022 b800 4212 8ab6 0047 b800
    0x0000170: 10a7 0097 b800 10b8 0022 3a0e b800 10b8
    0x0000180: 0022 1904 128c b600 90b8 0042 1291 b600
    0x0000190: 47b8 0010 9900 74b8 0010 b800 2219 0412
    0x00001a0: 8c12 93b6 0097 3a0f b800 10b8 0022 bb00
    0x00001b0: 7959 190f 2bb4 0036 b900 7d01 00b8 0083
    0x00001c0: 9900 163a 103a 1158 bb00 8559 1911 1911
    0x00001d0: b700 88a7 0006 b700 893a 0bb8 0010 b800
    0x00001e0: 22b8 0042 1298 b600 47b8 0010 a700 1cb8
    0x00001f0: 0010 b800 223a 12b8 0010 b800 2219 0e59
    0x0000200: 1299 129a b800 9ebf b800 10b8 0022 b200
    0x0000210: a4b8 0042 12a5 b600 47b8 0010 c600 17b8
    0x0000220: 0010 b800 2219 0b2b b400 36b9 00a9 0100
    0x0000230: b600 adb8 0010 b800 2219 0b19 0ab6 00b1
    0x0000240: 3a09 b800 10b8 0022 b800 4212 b2b6 0047
    0x0000250: b800 10a7 0014 b800 10b8 0022 3a0e b800
    0x0000260: 10b8 0022 013a 09b8 0010 b800 2219 09b8
    0x0000270: 0042 12b3 b600 47b8 0010 c701 34b2 00b7
    0x0000280: b200 bcb8 0042 12bd b600 47b8 0010 a601
    0x0000290: 20b8 0010 b800 22bb 0079 5919 04b2 00c0
    0x00002a0: b800 8399 0016 3a13 3a14 58bb 0085 5919
    0x00002b0: 1419 14b7 0088 a700 06b7 0089 3a0b b800
    0x00002c0: 10b8 0022 b800 4212 c1b6 0047 b800 10a7
    0x00002d0: 0097 b800 10b8 0022 3a0e b800 10b8 0022
    0x00002e0: 1904 128c b600 90b8 0042 12c2 b600 47b8
    0x00002f0: 0010 9900 74b8 0010 b800 2219 0412 8c12
    0x0000300: 93b6 0097 3a0f b800 10b8 0022 bb00 7959
    0x0000310: 190f 2bb4 0036 b900 7d01 00b8 0083 9900
    0x0000320: 163a 153a 1658 bb00 8559 1916 1916 b700
    0x0000330: 88a7 0006 b700 893a 0bb8 0010 b800 22b8
    0x0000340: 0042 12c3 b600 47b8 0010 a700 1cb8 0010
    0x0000350: b800 223a 12b8 0010 b800 2219 0e59 1299
    0x0000360: 129a b800 9ebf b800 10b8 0022 190b 2bb4
    0x0000370: 0036 b900 a901 00b6 00ad b800 10b8 0022
    0x0000380: 190b 190a b600 b13a 09b8 0010 b800 22b8
    0x0000390: 0042 12c4 b600 47b8 0010 a700 14b8 0010
    0x00003a0: b800 223a 0eb8 0010 b800 2201 3a09 b800
    0x00003b0: 10b8 0022 1909 b800 4212 c5b6 0047 b800
    0x00003c0: 10c7 00c5 b800 10b8 0022 1904 12c7 b600
    0x00003d0: 56b8 0042 12c8 b600 47b8 0010 9900 a119
    0x00003e0: 0ab8 0010 b800 22b6 00cb 1013 b800 4212
    0x00003f0: ccb6 0047 b800 10a0 0086 b800 10b8 0022
    0x0000400: bb00 7959 12ce b200 b7b8 0083 9900 163a
    0x0000410: 173a 1858 bb00 8559 1918 1918 b700 88a7
    0x0000420: 0006 b700 893a 0eb8 0010 b800 2219 0eb2
    0x0000430: 00a4 b600 adb8 0010 b800 2219 0e19 0ab6
    0x0000440: 00b1 3a09 b800 10b8 0022 b800 4212 cfb6
    0x0000450: 0047 b800 10a7 0031 b800 10b8 0022 3a0e
    0x0000460: b800 10b8 0022 013a 09b8 0010 b800 22b8
    0x0000470: 0042 12d0 b600 47b8 0010 a700 0cb8 0010
    0x0000480: b800 2201 3a09 b800 10b8 0022 b800 4212
    0x0000490: d1b6 0047 b800 10a7 000c b800 10b8 0022
    0x00004a0: 013a 09b8 0010 b800 2219 09b8 0042 12d2
    0x00004b0: b600 47b8 0010 c700 7fb8 0010 b800 2219
    0x00004c0: 0a3a 09b8 0010 b800 2219 0610 10b9 004e
    0x00004d0: 0200 b800 10b8 0022 1906 b200 d8b9 00db
    0x00004e0: 0200 b800 4212 dcb6 0047 b800 1099 0048
    0x00004f0: b800 10b8 0022 bb00 de59 190a b700 e13a
    0x0000500: 0bb8 0010 b800 2219 0bb6 00e4 b800 4212
    0x0000510: e5b6 0047 b800 1099 0013 b800 10b8 0022
    0x0000520: 190b b600 e9b6 00ef 3a09 b800 10b8 0022
    0x0000530: 190b b600 f2b8 0010 b800 22b8 0042 12f3
    0x0000540: b600 47b8 0010 a702 fa19 06b9 003c 0100
    0x0000550: 1008 b800 4212 f4b6 0047 b800 10a0 0027
    0x0000560: b800 10b8 0022 1906 b900 f601 00b8 0010
    0x0000570: b800 2201 3a09 b800 4212 f7b6 0047 b800
    0x0000580: 10a7 02bf b800 10b8 0022 1906 b900 3c01
    0x0000590: 0010 0cb8 0042 12f8 b600 47b8 0010 a001
    0x00005a0: abb8 0010 b800 2219 06b9 00f6 0100 b800
    0x00005b0: 10b8 0022 1906 b900 3c01 0007 b800 4212
    0x00005c0: f9b6 0047 b800 10a0 00c3 b800 10b8 0022
    0x00005d0: 1906 b900 6401 003a 0ab8 0010 b800 22b2
    0x00005e0: 00fd 190a b600 56b8 0042 12fe b600 47b8
    0x00005f0: 0010 9900 7bb8 0010 b800 2219 06b9 00f6
    0x0000600: 0100 b800 10b8 0022 2b10 11b6 0101 b800
    0x0000610: 10b8 0022 1906 b900 6401 003a 0bb8 0010
    0x0000620: b800 222b b601 0519 0b01 1906 b901 0801
    0x0000630: 00b6 010e 3a0e b800 10b8 0022 190e b800
    0x0000640: 4213 010f b600 47b8 0010 c600 0cb8 0010
    0x0000650: b800 2219 0e4d b800 10b8 0022 2b07 b601
    0x0000660: 01b8 0010 b800 222b 1010 b601 01b8 0010
    0x0000670: b800 2219 0605 b901 1202 00b8 0042 1301
    0x0000680: 13b6 0047 b800 10a7 001c b800 10b8 0022
    0x0000690: bb01 1559 1301 17b7 0118 5912 9912 9ab8
    0x00006a0: 009e bfb8 0010 b800 2219 06b9 003c 0100
    0x00006b0: 05b8 0042 1301 19b6 0047 b800 10a0 002e
    0x00006c0: b800 10b8 0022 1906 b900 4b01 0037 19b8
    0x00006d0: 0010 b800 2219 06b9 00f6 0100 b800 4213
    0x00006e0: 011a b600 47b8 0010 a700 33b8 0010 b800
    0x00006f0: 22bb 0115 59bb 011c 59b7 011d 1301 1fb6
    0x0000700: 0123 1906 b901 2601 00b6 0123 b601 29b7
    0x0000710: 0118 5912 9912 9ab8 009e bfb8 0010 b800
    0x0000720: 2216 19b8 005e 3a09 b800 10b8 0022 2b10
    0x0000730: 0db6 0101 b800 10b8 0022 b800 4213 012a
    0x0000740: b600 47b8 0010 a700 fa2b b601 2d05 b800
    0x0000750: 4213 012e b600 47b8 0010 a000 dab8 0010
    0x0000760: b800 222b 03b6 0131 b800 10b8 0022 2b10
    0x0000770: 10b6 0101 b800 10b8 0022 1906 b900 3c01
    0x0000780: 0007 b800 4213 0132 b600 47b8 0010 a000
    0x0000790: 5ab8 0010 b800 2213 0134 1906 b900 6401
    0x00007a0: 00b6 0056 b800 4213 0135 b600 47b8 0010
    0x00007b0: 9a00 1cb8 0010 b800 22bb 0115 5913 0117
    0x00007c0: b701 1859 1299 129a b800 9ebf b800 10b8
    0x00007d0: 0022 1906 b900 f601 00b8 0042 1301 36b6
    0x00007e0: 0047 b800 10a7 001c b800 10b8 0022 bb01
    0x00007f0: 1559 1301 17b7 0118 5912 9912 9ab8 009e
    0x0000800: bfb8 0010 b800 222b 1011 b601 01b8 0010
    0x0000810: b800 222b b601 393a 09b8 0010 b800 222b
    0x0000820: 100d b601 01b8 0042 1301 3ab6 0047 b800
    0x0000830: 10a7 000f b800 10b8 0022 2bb6 0139 3a09
    0x0000840: b800 10b8 0022 2a2b 2c2d 1909 b601 3eb0
    0x0000850:                                        
  Exception Handler Table:
    bci [301, 352] => handler: 372
    bci [424, 475] => handler: 495
    bci [563, 578] => handler: 598
    bci [657, 702] => handler: 722
    bci [774, 825] => handler: 845
    bci [890, 905] => handler: 925
    bci [1018, 1092] => handler: 1112
  Stackmap Table:
    append_frame(@111,Object[#56],Long)
    chop_frame(@144,1)
    full_frame(@292,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Top,Object[#82]},{})
    full_frame(@347,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Top,Object[#82],Null},{Uninitialized[#307],Uninitialized[#307],Object[#82],Object[#185]})
    same_locals_1_stack_item_frame(@350,Object[#121])
    full_frame(@372,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Top,Object[#82],Object[#121]},{Object[#46]})
    full_frame(@470,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Top,Object[#82],Object[#121],Top,Top,Object[#46],Object[#82]},{Uninitialized[#430],Uninitialized[#430],Object[#82],Object[#185]})
    same_locals_1_stack_item_frame(@473,Object[#121])
    same_locals_1_stack_item_frame(@495,Object[#46])
    full_frame(@520,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Top,Object[#82],Object[#121]},{})
    same_frame(@563)
    same_locals_1_stack_item_frame(@598,Object[#48])
    full_frame(@615,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Object[#347],Object[#82],Object[#121]},{})
    full_frame(@697,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Object[#347],Object[#82],Object[#121]},{Uninitialized[#663],Uninitialized[#663],Object[#82],Object[#185]})
    same_locals_1_stack_item_frame(@700,Object[#121])
    same_locals_1_stack_item_frame(@722,Object[#46])
    full_frame(@820,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Object[#347],Object[#82],Object[#121],Top,Top,Object[#46],Object[#82]},{Uninitialized[#780],Uninitialized[#780],Object[#82],Object[#185]})
    same_locals_1_stack_item_frame(@823,Object[#121])
    same_locals_1_stack_item_frame(@845,Object[#46])
    full_frame(@870,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Object[#347],Object[#82],Object[#121]},{})
    same_locals_1_stack_item_frame(@925,Object[#48])
    same_frame(@942)
    full_frame(@1058,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Object[#347],Object[#82],Object[#121]},{Uninitialized[#1024],Uninitialized[#1024],Object[#82],Object[#185]})
    same_locals_1_stack_item_frame(@1061,Object[#121])
    same_locals_1_stack_item_frame(@1112,Object[#48])
    same_frame(@1149)
    same_frame(@1158)
    full_frame(@1178,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Top,Object[#82]},{})
    full_frame(@1187,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Object[#347],Object[#82]},{})
    full_frame(@1322,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Object[#345],Object[#82],Object[#222]},{})
    chop_frame(@1333,1)
    full_frame(@1353,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56]},{})
    same_frame(@1412)
    full_frame(@1622,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Top,Object[#82],Object[#82],Top,Top,Object[#106]},{})
    full_frame(@1645,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Top,Object[#82]},{})
    full_frame(@1674,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56]},{})
    full_frame(@1699,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Top,Object[#82]},{})
    same_frame_extended(@1771)
    full_frame(@1819,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Top,Object[#82],Top,Top,Top,Top,Top,Top,Top,Top,Top,Top,Top,Top,Top,Top,Long},{})
    full_frame(@1865,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56]},{})
    same_frame_extended(@1996)
    same_frame(@2024)
    same_frame(@2049)
    same_frame(@2100)
    append_frame(@2112,Top,Top,Object[#345])

[MASTER] 18:39:27.219 [logback-2] ERROR ClassStateSupport - Could not initialize com.alibaba.fastjson.parser.DefaultJSONParser: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/parser/DefaultJSONParser.getDateFormat()Ljava/text/DateFormat; @63: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[4]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @63
    flags: { }
    locals: { 'com/alibaba/fastjson/parser/DefaultJSONParser', 'java/util/Locale', 'java/lang/String' }
    stack: { 'com/alibaba/fastjson/parser/DefaultJSONParser', uninitialized 57, uninitialized 57, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 3fb8 0044 2ab4 004c b800 5212 53b6
    0x0000010: 0057 b800 3fc7 004c b800 3fb8 0044 2abb
    0x0000020: 0059 592a b400 462a b400 5bb9 0061 0100
    0x0000030: b800 6799 0012 4c4d 58bb 0069 592c 2cb7
    0x0000040: 006d a700 06b7 006e b500 4cb8 003f b800
    0x0000050: 442a b400 4c2a b400 5bb9 0072 0100 b600
    0x0000060: 78b8 003f b800 442a b400 4cb0          
  Stackmap Table:
    full_frame(@69,{Object[#2]},{Object[#2],Uninitialized[#31],Uninitialized[#31],Object[#122],Object[#124]})
    full_frame(@72,{Object[#2]},{Object[#2],Object[#89]})
    same_frame(@97)

[MASTER] 18:39:27.228 [logback-2] ERROR ClassStateSupport - Could not initialize com.alibaba.fastjson.serializer.CalendarCodec: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/serializer/CalendarCodec.write(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Lcom/alibaba/fastjson/serializer/BeanContext;)V @197: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[3]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @197
    flags: { }
    locals: { 'com/alibaba/fastjson/serializer/CalendarCodec', 'com/alibaba/fastjson/serializer/JSONSerializer', 'java/lang/Object', 'com/alibaba/fastjson/serializer/BeanContext', 'com/alibaba/fastjson/serializer/SerializeWriter', 'java/lang/String', 'java/util/Calendar', top, top, top, 'java/text/SimpleDateFormat', 'java/util/Locale', 'java/lang/String' }
    stack: { uninitialized 189, uninitialized 189, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 18b8 002a 2bb4 0030 3a04 b800 18b8
    0x0000010: 002a 2db6 0036 3a05 b800 18b8 002a 2cc0
    0x0000020: 0038 3a06 b800 18b8 002a 1905 123a b600
    0x0000030: 40b8 0046 1247 b600 4bb8 0018 9900 29b8
    0x0000040: 0018 b800 2a19 06b6 004f 1400 506d 3707
    0x0000050: b800 18b8 002a 1904 1607 88b6 0056 b800
    0x0000060: 18b8 002a b1b8 0018 b800 2abb 0058 5919
    0x0000070: 05b8 005e 9900 123a 0958 bb00 6059 1909
    0x0000080: b700 63a7 0006 b700 643a 0ab8 0018 b800
    0x0000090: 2a19 0ab8 0046 1247 b600 4bb8 0018 c700
    0x00000a0: 32b8 0018 b800 2abb 0058 59b2 006a 2bb4
    0x00000b0: 006e b800 5e99 0016 3a0b 3a0c 58bb 0060
    0x00000c0: 5919 0c19 0cb7 0071 a700 06b7 0072 3a0a
    0x00000d0: b800 18b8 002a 190a 2bb4 0076 b600 7cb8
    0x00000e0: 0018 b800 2a19 0a19 06b6 0080 b600 843a
    0x00000f0: 0db8 0018 b800 2a19 0419 0db6 0087 b800
    0x0000100: 18b8 002a b1                           
  Stackmap Table:
    append_frame(@101,Object[#83],Object[#60],Object[#56])
    full_frame(@134,{Object[#2],Object[#44],Object[#150],Object[#50],Object[#83],Object[#60],Object[#56]},{Uninitialized[#107],Uninitialized[#107],Object[#60]})
    same_locals_1_stack_item_frame(@137,Object[#88])
    full_frame(@203,{Object[#2],Object[#44],Object[#150],Object[#50],Object[#83],Object[#60],Object[#56],Top,Top,Top,Object[#88]},{Uninitialized[#167],Uninitialized[#167],Object[#60],Object[#152]})
    same_locals_1_stack_item_frame(@206,Object[#88])
    same_frame(@208)

[MASTER] 18:39:27.234 [logback-2] ERROR ClassStateSupport - Could not initialize com.alibaba.fastjson.util.TypeUtils: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/util/TypeUtils.castToDate(Ljava/lang/Object;Ljava/lang/String;)Ljava/util/Date; @1094: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[3]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @1094
    flags: { }
    locals: { 'java/lang/Object', 'java/lang/String', long, long_2nd, top, top, top, top, 'java/lang/String', 'com/alibaba/fastjson/parser/JSONScanner', top, top, top, 'java/util/Locale', 'java/lang/String' }
    stack: { uninitialized 1086, uninitialized 1086, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 49b8 005c 2ab8 0064 1301 c1b6 0069
    0x0000010: b800 49c7 000b b800 49b8 005c 01b0 b800
    0x0000020: 49b8 005c 2ac1 01c3 b800 6413 01c4 b600
    0x0000030: 69b8 0049 9900 0eb8 0049 b800 5c2a c001
    0x0000040: c3b0 b800 49b8 005c 2ac1 01c6 b800 6413
    0x0000050: 01c7 b600 69b8 0049 9900 11b8 0049 b800
    0x0000060: 5c2a c001 c6b6 01cb b0b8 0049 b800 5c14
    0x0000070: 01cc 41b8 0049 b800 5c2a c100 dab8 0064
    0x0000080: 1301 ceb6 0069 b800 4999 0035 b800 49b8
    0x0000090: 005c 2ac0 00da b801 d141 b800 49b8 005c
    0x00000a0: bb01 c359 20b8 00cd 9900 1237 0458 bb01
    0x00000b0: d359 1604 b701 d6a7 0006 b701 d7b0 b800
    0x00000c0: 49b8 005c 2ac1 00e7 b800 6413 01d8 b600
    0x00000d0: 69b8 0049 9900 5db8 0049 b800 5c2a c000
    0x00000e0: e7b6 0167 41b8 0049 b800 5c13 01da 2bb6
    0x00000f0: 00f7 b800 6413 01db b600 69b8 0049 9900
    0x0000100: 0fb8 0049 b800 5c20 1401 dc69 41b8 0049
    0x0000110: b800 5cbb 01c3 5920 b800 cd99 0012 3706
    0x0000120: 58bb 01d3 5916 06b7 01d6 a700 06b7 01d7
    0x0000130: b0b8 0049 b800 5c2a c100 d5b8 0064 1301
    0x0000140: deb6 0069 b800 4999 0389 b800 49b8 005c
    0x0000150: 2ac0 00d5 3a08 b800 49b8 005c bb01 e059
    0x0000160: 1908 b701 e13a 09b8 0049 b800 5c19 0903
    0x0000170: b601 e5b8 0064 1301 e6b6 0069 b800 4999
    0x0000180: 0031 b800 49b8 005c 1909 b601 ea3a 0ab8
    0x0000190: 0049 b800 5c19 0ab6 01cb 3a0b b800 49b8
    0x00001a0: 005c 1909 b601 edb8 0049 b800 5c19 0bb0
    0x00001b0: b800 49b8 005c 1909 b601 edb8 0049 b800
    0x00001c0: 5cb8 0064 1301 eeb6 0069 b800 49a7 0023
    0x00001d0: b800 49b8 005c 3a0c 1909 b601 edb8 0049
    0x00001e0: b800 5c19 0c59 1301 1213 01ef b801 17bf
    0x00001f0: b800 49b8 005c 1908 1301 f1b6 01f5 b800
    0x0000200: 6413 01f6 b600 69b8 0049 9900 3019 0813
    0x0000210: 01f8 b601 fbb8 0064 1301 fcb6 0069 b800
    0x0000220: 4999 0019 b800 49b8 005c 1908 1006 1908
    0x0000230: b600 f005 64b6 0200 3a08 b800 49b8 005c
    0x0000240: 1908 102d b601 8eb8 0064 1302 01b6 0069
    0x0000250: b800 499d 0019 1908 102b b601 8eb8 0064
    0x0000260: 1302 02b6 0069 b800 499e 0239 b800 49b8
    0x0000270: 005c 2bb8 0064 1302 03b6 0069 b800 49c7
    0x0000280: 01a6 b800 49b8 005c 1908 b600 f0b2 0208
    0x0000290: b600 f0b8 0064 1302 09b6 0069 b800 499f
    0x00002a0: 0037 1908 b800 49b8 005c b600 f010 16b8
    0x00002b0: 0064 1302 0ab6 0069 b800 49a0 0034 b202
    0x00002c0: 0813 020c b600 f7b8 0064 1302 0db6 0069
    0x00002d0: b800 4999 001c b800 49b8 005c b202 084c
    0x00002e0: b800 6413 020e b600 69b8 0049 a701 39b8
    0x00002f0: 0049 b800 5c19 08b6 00f0 100a b800 6413
    0x0000300: 020f b600 69b8 0049 a000 1cb8 0049 b800
    0x0000310: 5c13 0211 4cb8 0064 1302 12b6 0069 b800
    0x0000320: 49a7 0104 b800 49b8 005c 1908 b600 f013
    0x0000330: 0214 b600 f0b8 0064 1302 15b6 0069 b800
    0x0000340: 49a0 001c b800 49b8 005c 1302 144c b800
    0x0000350: 6413 0216 b600 69b8 0049 a700 cbb8 0049
    0x0000360: b800 5c19 08b6 00f0 101d b800 6413 0217
    0x0000370: b600 69b8 0049 a000 5819 0810 1ab8 0049
    0x0000380: b800 5cb6 0129 103a b800 6413 0218 b600
    0x0000390: 69b8 0049 a000 3a19 0810 1cb8 0049 b800
    0x00003a0: 5cb6 0129 1030 b800 6413 0219 b600 69b8
    0x00003b0: 0049 a000 1cb8 0049 b800 5c13 021b 4cb8
    0x00003c0: 0064 1302 1cb6 0069 b800 49a7 005a b800
    0x00003d0: 49b8 005c 1908 b600 f010 17b8 0064 1302
    0x00003e0: 1db6 0069 b800 49a0 0034 1908 1013 b601
    0x00003f0: 2910 2cb8 0064 1302 1eb6 0069 b800 49a0
    0x0000400: 001c b800 49b8 005c 1302 204c b800 6413
    0x0000410: 0221 b600 69b8 0049 a700 0db8 0049 b800
    0x0000420: 5c13 0223 4cb8 0049 b800 5cbb 0225 592b
    0x0000430: b202 29b8 00cd 9900 163a 0d3a 0e58 bb02
    0x0000440: 2b59 190e 190e b702 2ea7 0006 b702 2f3a
    0x0000450: 0ab8 0049 b800 5c19 0ab2 0233 b602 37b8
    0x0000460: 0049 b800 5c19 0a19 08b6 023b b0b8 0049
    0x0000470: b800 5c3a 0bb8 0049 b800 5cbb 0101 59bb
    0x0000480: 0103 59b7 0104 1302 3db6 010a 1908 b601
    0x0000490: 0ab6 010e b701 1159 1301 1213 01ef b801
    0x00004a0: 17bf b800 49b8 005c 1908 b600 f0b8 0064
    0x00004b0: 1302 3eb6 0069 b800 499a 000b b800 49b8
    0x00004c0: 005c 01b0 b800 49b8 005c 1908 b802 4441
    0x00004d0: b800 49b8 005c 2014 01cc 94b8 0064 1302
    0x00004e0: 45b6 0069 b800 499a 0275 b800 49b8 005c
    0x00004f0: 2ab6 0249 3a08 b800 49b8 005c 1302 4b19
    0x0000500: 08b6 024e b600 f7b8 0064 1302 4fb6 0069
    0x0000510: b800 4999 0100 b800 49b8 005c b202 51b8
    0x0000520: 0064 1302 52b6 0069 b800 49c7 008f b202
    0x0000530: 54b8 0064 1302 55b6 0069 b800 499a 007d
    0x0000540: b800 49b8 005c 1908 1302 5703 bd00 70b6
    0x0000550: 0085 b302 51b8 0049 b800 5c04 b302 54b8
    0x0000560: 0049 b800 5cb8 0064 1302 58b6 0069 b800
    0x0000570: 49a7 0049 b800 49b8 005c 3a09 b800 49b8
    0x0000580: 005c 04b3 0254 b800 49b8 005c b800 6413
    0x0000590: 0259 b600 69b8 0049 a700 22b8 0049 b800
    0x00005a0: 5c3a 0f04 b302 54b8 0049 b800 5c19 0f59
    0x00005b0: 1301 1213 01ef b801 17bf b800 49b8 005c
    0x00005c0: b202 512a 03bd 0004 b600 8e3a 09b8 0049
    0x00005d0: b800 5cb8 0064 1302 5ab6 0069 b800 49a7
    0x00005e0: 0028 b800 49b8 005c 3a0a b800 49b8 005c
    0x00005f0: bb01 0159 1302 5c19 0ab7 025f 5913 0112
    0x0000600: 1301 efb8 0117 bfb8 0049 b800 5c19 09c0
    0x0000610: 01c3 b0b8 0049 b800 5c13 0261 1908 b602
    0x0000620: 4eb6 00f7 b800 6413 0262 b600 69b8 0049
    0x0000630: 9901 00b8 0049 b800 5cb2 0264 b800 6413
    0x0000640: 0265 b600 69b8 0049 c700 8fb2 0267 b800
    0x0000650: 6413 0268 b600 69b8 0049 9a00 7db8 0049
    0x0000660: b800 5c19 0813 0257 03bd 0070 b600 85b3
    0x0000670: 0264 b800 49b8 005c 04b3 0267 b800 49b8
    0x0000680: 005c b800 6413 0269 b600 69b8 0049 a700
    0x0000690: 49b8 0049 b800 5c3a 09b8 0049 b800 5c04
    0x00006a0: b302 67b8 0049 b800 5cb8 0064 1302 6ab6
    0x00006b0: 0069 b800 49a7 0022 b800 49b8 005c 3a10
    0x00006c0: 04b3 0267 b800 49b8 005c 1910 5913 0112
    0x00006d0: 1301 efb8 0117 bfb8 0049 b800 5cb2 0264
    0x00006e0: 2a03 bd00 04b6 008e 3a09 b800 49b8 005c
    0x00006f0: b800 6413 026b b600 69b8 0049 a700 28b8
    0x0000700: 0049 b800 5c3a 0ab8 0049 b800 5cbb 0101
    0x0000710: 5913 026d 190a b702 5f59 1301 1213 01ef
    0x0000720: b801 17bf b800 49b8 005c 1909 c001 c3b0
    0x0000730: b800 49b8 005c bb01 0159 bb01 0359 b701
    0x0000740: 0413 023d b601 0a2a b601 0db6 010e b701
    0x0000750: 1159 1301 1213 01ef b801 17bf b800 49b8
    0x0000760: 005c bb01 c359 20b8 00cd 9900 1237 1158
    0x0000770: bb01 d359 1611 b701 d6a7 0006 b701 d7b0
    0x0000780:                                        
  Exception Handler Table:
    bci [359, 412] => handler: 464
    bci [464, 472] => handler: 464
    bci [1119, 1132] => handler: 1133
    bci [1344, 1365] => handler: 1396
    bci [1344, 1365] => handler: 1435
    bci [1396, 1404] => handler: 1435
    bci [1435, 1443] => handler: 1435
    bci [1466, 1485] => handler: 1506
    bci [1629, 1650] => handler: 1681
    bci [1629, 1650] => handler: 1720
    bci [1681, 1689] => handler: 1720
    bci [1720, 1728] => handler: 1720
    bci [1751, 1770] => handler: 1791
  Stackmap Table:
    same_frame(@30)
    same_frame(@66)
    same_frame(@105)
    full_frame(@186,{Object[#4],Object[#213],Long},{Uninitialized[#160],Uninitialized[#160],Long})
    same_locals_1_stack_item_frame(@189,Object[#451])
    same_frame(@190)
    same_frame_extended(@269)
    full_frame(@301,{Object[#4],Object[#213],Long},{Uninitialized[#275],Uninitialized[#275],Long})
    same_locals_1_stack_item_frame(@304,Object[#451])
    same_frame(@305)
    full_frame(@432,{Object[#4],Object[#213],Long,Top,Top,Top,Top,Object[#213],Object[#480]},{})
    same_locals_1_stack_item_frame(@464,Object[#87])
    same_frame(@496)
    same_frame_extended(@570)
    same_frame(@620)
    same_frame_extended(@726)
    same_frame(@751)
    same_frame(@804)
    same_frame(@861)
    same_frame_extended(@974)
    same_frame_extended(@1051)
    same_frame(@1061)
    full_frame(@1100,{Object[#4],Object[#213],Long,Top,Top,Top,Top,Object[#213],Object[#480]},{Uninitialized[#1067],Uninitialized[#1067],Object[#213],Object[#635]})
    same_locals_1_stack_item_frame(@1103,Object[#549])
    full_frame(@1133,{Object[#4],Object[#213],Long,Top,Top,Top,Top,Object[#213],Object[#480],Object[#549]},{Object[#444]})
    chop_frame(@1186,1)
    same_frame(@1220)
    full_frame(@1232,{Object[#4],Object[#213],Long},{})
    full_frame(@1396,{Object[#4],Object[#213],Long,Top,Top,Top,Top,Object[#112]},{Object[#446]})
    same_locals_1_stack_item_frame(@1435,Object[#87])
    same_frame(@1466)
    same_locals_1_stack_item_frame(@1506,Object[#448])
    append_frame(@1543,Object[#4])
    chop_frame(@1555,1)
    same_locals_1_stack_item_extended(@1681,Object[#446])
    same_locals_1_stack_item_frame(@1720,Object[#87])
    same_frame(@1751)
    same_locals_1_stack_item_frame(@1791,Object[#448])
    append_frame(@1828,Object[#4])
    chop_frame(@1840,1)
    full_frame(@1884,{Object[#4],Object[#213],Long},{})
    full_frame(@1916,{Object[#4],Object[#213],Long},{Uninitialized[#1890],Uninitialized[#1890],Long})
    same_locals_1_stack_item_frame(@1919,Object[#451])

[MASTER] 18:39:27.246 [logback-2] ERROR ClassStateSupport - Could not initialize com.alibaba.fastjson.serializer.MiscCodec: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/serializer/MiscCodec.deserialze(Lcom/alibaba/fastjson/parser/DefaultJSONParser;Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object; @489: invokespecial
  Reason:
    Type 'java/net/InetAddress' (current frame, stack[3]) is not assignable to integer
  Current Frame:
    bci: @489
    flags: { }
    locals: { 'com/alibaba/fastjson/serializer/MiscCodec', 'com/alibaba/fastjson/parser/DefaultJSONParser', 'java/lang/reflect/Type', 'java/lang/Object', 'com/alibaba/fastjson/parser/JSONLexer', 'java/net/InetAddress', integer, 'java/lang/String', integer, 'java/net/InetAddress' }
    stack: { uninitialized 481, uninitialized 481, 'java/net/InetAddress', 'java/net/InetAddress' }
  Bytecode:
    0x0000000: b800 1eb8 0030 2bb4 0176 3a04 b800 1eb8
    0x0000010: 0030 2c12 7ab8 003c 1301 77b6 0041 b800
    0x0000020: 1ea6 01d2 b800 1eb8 0030 1904 b901 7c01
    0x0000030: 0010 08b8 003c 1301 7db6 0041 b800 1ea0
    0x0000040: 0018 b800 1eb8 0030 1904 b901 8001 00b8
    0x0000050: 001e b800 3001 b0b8 001e b800 302b 100c
    0x0000060: b601 83b8 001e b800 3001 3a05 b800 1eb8
    0x0000070: 0030 0336 06b8 001e b800 3019 04b9 0186
    0x0000080: 0100 3a07 b800 1eb8 0030 1904 1011 b901
    0x0000090: 8802 00b8 001e b800 3019 0712 82b6 00df
    0x00000a0: b800 3c13 0189 b600 41b8 001e 9900 2fb8
    0x00000b0: 001e b800 302b 1011 b601 83b8 001e b800
    0x00000c0: 302b 1296 b601 8dc0 0096 3a05 b800 3c13
    0x00000d0: 018e b600 41b8 001e a700 a4b8 001e b800
    0x00000e0: 3019 0712 86b6 00df b800 3c13 018f b600
    0x00000f0: 41b8 001e 9900 71b8 001e b800 302b 1011
    0x0000100: b601 83b8 001e b800 3019 04b9 017c 0100
    0x0000110: 05b8 003c 1301 90b6 0041 b800 1e9f 001d
    0x0000120: b800 1eb8 0030 bb00 ea59 1301 92b7 00fa
    0x0000130: 5912 fb13 0193 b801 00bf b800 1eb8 0030
    0x0000140: 1904 b901 9601 0036 06b8 001e b800 3019
    0x0000150: 04b9 0180 0100 b800 3c13 0197 b600 41b8
    0x0000160: 001e a700 1ab8 001e b800 302b 1011 b601
    0x0000170: 83b8 001e b800 302b b601 9a57 b800 1eb8
    0x0000180: 0030 1904 b901 7c01 0010 10b8 003c 1301
    0x0000190: 9bb6 0041 b800 1ea0 0025 b800 1eb8 0030
    0x00001a0: 1904 b901 8001 00b8 001e b800 30b8 003c
    0x00001b0: 1301 9cb6 0041 b800 1ea7 febc b800 1eb8
    0x00001c0: 0030 2b10 0db6 0183 b800 1eb8 0030 bb00
    0x00001d0: 7a59 1905 1506 b800 9c99 0016 3608 3a09
    0x00001e0: 58bb 019e 5919 0919 09b7 01a1 a700 06b7
    0x00001f0: 01a2 b0b8 001e b800 302b b401 a505 b800
    0x0000200: 3c13 01a6 b600 41b8 001e a000 dbb8 001e
    0x0000210: b800 302b 03b5 01a5 b800 1eb8 0030 2b10
    0x0000220: 10b6 0183 b800 1eb8 0030 1904 b901 7c01
    0x0000230: 0007 b800 3c13 01a7 b600 41b8 001e a000
    0x0000240: 5ab8 001e b800 3012 7119 04b9 0186 0100
    0x0000250: b600 dfb8 003c 1301 a8b6 0041 b800 1e9a
    0x0000260: 001d b800 1eb8 0030 bb00 ea59 1301 aab7
    0x0000270: 00fa 5912 fb13 0193 b801 00bf b800 1eb8
    0x0000280: 0030 1904 b901 8001 00b8 003c 1301 abb6
    0x0000290: 0041 b800 1ea7 001d b800 1eb8 0030 bb00
    0x00002a0: ea59 1301 aab7 00fa 5912 fb13 0193 b801
    0x00002b0: 00bf b800 1eb8 0030 2b10 11b6 0183 b800
    0x00002c0: 1eb8 0030 2bb6 019a 3a05 b800 1eb8 0030
    0x00002d0: 2b10 0db6 0183 b800 3c13 01ac b600 41b8
    0x00002e0: 001e a700 0fb8 001e b800 302b b601 9a3a
    0x00002f0: 05b8 001e b800 3019 05b8 003c 1301 adb6
    0x0000300: 0041 b800 1ec7 001b b800 1eb8 0030 013a
    0x0000310: 06b8 003c 1301 aeb6 0041 b800 1ea7 0133
    0x0000320: b800 1eb8 0030 1905 c100 d2b8 003c 1301
    0x0000330: afb6 0041 b800 1e99 001f b800 1eb8 0030
    0x0000340: 1905 c000 d23a 06b8 003c 1301 b0b6 0041
    0x0000350: b800 1ea7 00fd b800 1eb8 0030 1905 c101
    0x0000360: b2b8 003c 1301 b3b6 0041 b800 1e99 00c9
    0x0000370: b800 1eb8 0030 1905 c001 b23a 07b8 001e
    0x0000380: b800 302c 12ae b800 3c13 01b4 b600 41b8
    0x0000390: 001e a600 69b8 001e b800 3019 0713 01b5
    0x00003a0: b601 b93a 0ab8 001e b800 3019 0ab8 003c
    0x00003b0: 1301 bab6 0041 b800 1ec6 000f b800 1eb8
    0x00003c0: 0030 190a b801 bdb0 b800 1eb8 0030 1907
    0x00003d0: 1301 bfb6 01b9 3a0b b800 1eb8 0030 190b
    0x00003e0: b800 3c13 01c0 b600 41b8 001e c600 0fb8
    0x00003f0: 001e b800 3019 0bb8 01bd b0b8 001e b800
    0x0000400: 302c 120d b800 3c13 01c1 b600 41b8 001e
    0x0000410: a600 19b8 001e b800 3019 07b6 01c5 b901
    0x0000420: c801 00b9 0160 0100 b0b8 001e b800 3019
    0x0000430: 072c b601 ccb0 b800 1eb8 0030 bb00 ea59
    0x0000440: 1301 ceb7 00fa 5912 fb13 0193 b801 00bf
    0x0000450: b800 1eb8 0030 1906 b800 3c13 01cf b600
    0x0000460: 41b8 001e c600 1719 06b6 01d2 b800 3c13
    0x0000470: 01d3 b600 41b8 001e 9a00 0bb8 001e b800
    0x0000480: 3001 b0b8 001e b800 302c 1301 d5b8 003c
    0x0000490: 1301 d6b6 0041 b800 1ea6 001b b800 1eb8
    0x00004a0: 0030 1906 b800 9c99 0009 b801 dca7 0006
    0x00004b0: b801 ddb0 b800 1eb8 0030 2c13 01df b800
    0x00004c0: 3c13 01e0 b600 41b8 001e a600 1bb8 001e
    0x00004d0: b800 3019 06b8 009c 9900 09b8 01e6 a700
    0x00004e0: 06b8 01e7 b0b8 001e b800 302c 1301 e9b8
    0x00004f0: 003c 1301 eab6 0041 b800 1ea6 0049 b800
    0x0000500: 1eb8 0030 bb01 e959 1906 b800 9c99 000f
    0x0000510: 3a0c 5757 190c b801 f0a7 0006 b701 f1b0
    0x0000520: b800 1eb8 0030 3a07 b800 1eb8 0030 bb00
    0x0000530: ea59 1301 f319 07b7 014b 5912 fb13 0193
    0x0000540: b801 00bf b800 1eb8 0030 2c13 01f5 b800
    0x0000550: 3c13 01f6 b600 41b8 001e a600 0fb8 001e
    0x0000560: b800 3019 06b8 01fa b0b8 001e b800 302c
    0x0000570: 1301 fcb8 003c 1301 fdb6 0041 b800 1ea6
    0x0000580: 000f b800 1eb8 0030 1906 b802 03b0 b800
    0x0000590: 1eb8 0030 2c12 4cb8 003c 1302 04b6 0041
    0x00005a0: b800 1ea6 004f b800 1eb8 0030 bb00 4c59
    0x00005b0: 1906 1904 b902 0801 00b8 009c 9900 163a
    0x00005c0: 0d3a 0e58 bb02 0a59 190e 190e b702 0da7
    0x00005d0: 0006 b702 0e3a 07b8 001e b800 3019 0719
    0x00005e0: 04b9 0212 0100 b602 16b8 001e b800 3019
    0x00005f0: 07b0 b800 1eb8 0030 2c12 96b8 003c 1302
    0x0000600: 17b6 0041 b800 1ea5 0029 2c13 0219 b800
    0x0000610: 3c13 021a b600 41b8 001e a500 162c 1302
    0x0000620: 1cb8 003c 1302 1db6 0041 b800 1ea6 003f
    0x0000630: b800 1eb8 0030 1906 b800 9c99 0009 b802
    0x0000640: 21a7 0006 b802 22b0 b800 1eb8 0030 3a07
    0x0000650: b800 1eb8 0030 bb00 ea59 1302 2419 07b7
    0x0000660: 014b 5912 fb13 0193 b801 00bf b800 1eb8
    0x0000670: 0030 2c12 8fb8 003c 1302 25b6 0041 b800
    0x0000680: 1ea6 0071 b800 1eb8 0030 1906 1302 27b6
    0x0000690: 022b b800 3c13 022c b600 41b8 001e 9b00
    0x00006a0: 2fb2 022e b800 3c13 022f b600 41b8 001e
    0x00006b0: 9a00 1db8 001e b800 30bb 00ea 5913 0231
    0x00006c0: b700 fa59 12fb 1301 93b8 0100 bfb8 001e
    0x00006d0: b800 30bb 008f 5919 06b8 009c 9900 123a
    0x00006e0: 0f58 bb02 3359 190f b702 34a7 0006 b702
    0x00006f0: 35b0 b800 1eb8 0030 2c12 a7b8 003c 1302
    0x0000700: 36b6 0041 b800 1ea6 000f b800 1eb8 0030
    0x0000710: 1906 b802 39b0 b800 1eb8 0030 2cc1 023b
    0x0000720: b800 3c13 023c b600 41b8 001e 9900 1db8
    0x0000730: 001e b800 302c c002 3b3a 07b8 001e b800
    0x0000740: 3019 07b9 0240 0100 4db8 001e b800 302c
    0x0000750: 126a b800 3c13 0241 b600 41b8 001e a600
    0x0000760: 17b8 001e b800 3019 062b b602 45b6 024b
    0x0000770: 03b8 024f b0b8 001e b800 302c 1302 51b8
    0x0000780: 003c 1302 52b6 0041 b800 1ea6 000f b800
    0x0000790: 1eb8 0030 1906 b802 56b0 b800 1eb8 0030
    0x00007a0: 2c12 aeb8 003c 1302 57b6 0041 b800 1ea6
    0x00007b0: 000f b800 1eb8 0030 1906 b801 bdb0 b800
    0x00007c0: 1eb8 0030 2c13 0259 b800 3c13 025a b600
    0x00007d0: 41b8 001e a600 13b8 001e b800 30bb 0259
    0x00007e0: 5919 06b7 025b b0b8 001e b800 302c c100
    0x00007f0: 6ab8 003c 1302 5cb6 0041 b800 1e99 0172
    0x0000800: b800 1eb8 0030 2cc0 006a b600 6d3a 07b8
    0x0000810: 001e b800 3019 0713 025e b600 dfb8 003c
    0x0000820: 1302 5fb6 0041 b800 1e99 011a b800 1eb8
    0x0000830: 0030 b202 61b8 003c 1302 62b6 0041 b800
    0x0000840: 1ec7 0043 b202 64b8 003c 1302 65b6 0041
    0x0000850: b800 1e9a 0031 b800 1eb8 0030 1302 67b8
    0x0000860: 026a 3a0a b800 1eb8 0030 190a 1302 6c05
    0x0000870: bd00 6a59 0312 d253 5904 1302 6e53 b602
    0x0000880: 72b3 0261 b800 1eb8 0030 b202 61b8 003c
    0x0000890: 1302 73b6 0041 b800 1ec6 0021 b800 1eb8
    0x00008a0: 0030 b202 6101 05bd 0004 5903 1906 5359
    0x00008b0: 0403 bd00 d253 b602 79b0 b800 1eb8 0030
    0x00008c0: bb00 ea59 1302 7bb7 00fa 5912 fb13 0193
    0x00008d0: b801 00bf b800 1eb8 0030 3a0a b800 1eb8
    0x00008e0: 0030 04b3 0264 b800 1eb8 0030 b800 3c13
    0x00008f0: 027c b600 41b8 001e a700 4bb8 001e b800
    0x0000900: 303a 0ab8 001e b800 30bb 00ea 5913 027b
    0x0000910: 190a b701 4b59 12fb 1301 93b8 0100 bfb8
    0x0000920: 001e b800 303a 0ab8 001e b800 30bb 00ea
    0x0000930: 5913 027b 190a b701 4b59 12fb 1301 93b8
    0x0000940: 0100 bfb8 001e b800 30bb 00ea 59bb 00ec
    0x0000950: 59b7 00ed 1302 7eb6 00f3 1907 b600 f3b6
    0x0000960: 00f8 b700 fa59 12fb 1301 93b8 0100 bfb8
    0x0000970: 001e b800 30bb 00ea 59bb 00ec 59b7 00ed
    0x0000980: 1302 7eb6 00f3 2cb8 009c 9900 09b8 0281
    0x0000990: a700 06b6 0282 b600 f3b6 00f8 b700 fa59
    0x00009a0: 12fb 1301 93b8 0100 bf                 
  Exception Handler Table:
    bci [1278, 1311] => handler: 1312
    bci [1584, 1607] => handler: 1608
    bci [2092, 2233] => handler: 2260
    bci [2234, 2260] => handler: 2260
    bci [2092, 2233] => handler: 2299
    bci [2234, 2260] => handler: 2299
    bci [2092, 2233] => handler: 2335
    bci [2234, 2260] => handler: 2335
  Stackmap Table:
    append_frame(@87,Object[#377])
    append_frame(@117,Object[#150],Integer)
    append_frame(@219,Object[#210])
    same_frame_extended(@314)
    same_frame(@357)
    same_frame(@380)
    same_frame(@444)
    full_frame(@495,{Object[#2],Object[#370],Object[#294],Object[#4],Object[#377],Object[#150],Integer,Object[#210]},{Uninitialized[#462],Uninitialized[#462],Object[#150],Integer})
    same_locals_1_stack_item_frame(@498,Object[#122])
    chop_frame(@499,3)
    same_frame_extended(@636)
    same_frame(@664)
    same_frame(@690)
    same_frame(@741)
    append_frame(@753,Object[#4])
    same_frame(@800)
    same_frame(@854)
    full_frame(@968,{Object[#2],Object[#370],Object[#294],Object[#4],Object[#377],Object[#4],Top,Object[#434],Top,Top,Object[#210]},{})
    chop_frame(@1019,3)
    same_frame(@1065)
    chop_frame(@1078,2)
    append_frame(@1104,Object[#210])
    same_frame(@1147)
    same_frame(@1155)
    same_locals_1_stack_item_frame(@1200,Object[#210])
    same_locals_1_stack_item_frame(@1203,Object[#469])
    same_frame(@1204)
    same_locals_1_stack_item_frame(@1249,Object[#210])
    same_locals_1_stack_item_frame(@1252,Object[#479])
    same_frame(@1253)
    full_frame(@1308,{Object[#2],Object[#370],Object[#294],Object[#4],Object[#377],Object[#4],Object[#210]},{Uninitialized[#1284],Uninitialized[#1284],Object[#210]})
    same_locals_1_stack_item_frame(@1311,Object[#489])
    same_locals_1_stack_item_frame(@1312,Object[#360])
    same_frame(@1348)
    same_frame(@1385)
    same_frame(@1422)
    full_frame(@1490,{Object[#2],Object[#370],Object[#294],Object[#4],Object[#377],Object[#4],Object[#210]},{Uninitialized[#1452],Uninitialized[#1452],Object[#210],Object[#508]})
    same_locals_1_stack_item_frame(@1493,Object[#76])
    same_frame(@1522)
    same_frame(@1584)
    same_locals_1_stack_item_frame(@1604,Object[#210])
    same_locals_1_stack_item_frame(@1607,Object[#150])
    same_locals_1_stack_item_frame(@1608,Object[#362])
    same_frame(@1644)
    same_frame_extended(@1741)
    full_frame(@1774,{Object[#2],Object[#370],Object[#294],Object[#4],Object[#377],Object[#4],Object[#210]},{Uninitialized[#1747],Uninitialized[#1747],Object[#210]})
    same_locals_1_stack_item_frame(@1777,Object[#143])
    same_frame(@1778)
    same_frame(@1814)
    same_frame(@1865)
    same_frame(@1909)
    same_frame(@1946)
    same_frame(@1982)
    same_frame(@2023)
    append_frame(@2180,Object[#210])
    same_frame(@2234)
    same_locals_1_stack_item_frame(@2260,Object[#364])
    same_locals_1_stack_item_frame(@2299,Object[#366])
    same_locals_1_stack_item_frame(@2335,Object[#368])
    same_frame(@2371)
    chop_frame(@2415,1)
    full_frame(@2451,{Object[#2],Object[#370],Object[#294],Object[#4],Object[#377],Object[#4],Object[#210]},{Uninitialized[#2421],Uninitialized[#2421],Object[#236],Object[#294]})
    full_frame(@2454,{Object[#2],Object[#370],Object[#294],Object[#4],Object[#377],Object[#4],Object[#210]},{Uninitialized[#2421],Uninitialized[#2421],Object[#236],Object[#210]})

[MASTER] 18:39:27.252 [logback-2] ERROR ClassStateSupport - Could not initialize com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/parser/deserializer/AbstractDateDeserializer.deserialze(Lcom/alibaba/fastjson/parser/DefaultJSONParser;Ljava/lang/reflect/Type;Ljava/lang/Object;Ljava/lang/String;I)Ljava/lang/Object; @341: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[3]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @341
    flags: { }
    locals: { 'com/alibaba/fastjson/parser/deserializer/AbstractDateDeserializer', 'com/alibaba/fastjson/parser/DefaultJSONParser', 'java/lang/reflect/Type', 'java/lang/Object', 'java/lang/String', integer, 'com/alibaba/fastjson/parser/JSONLexer', top, top, top, 'java/lang/String', null, 'java/util/Locale', 'java/lang/String' }
    stack: { uninitialized 333, uninitialized 333, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 10b8 0022 2bb4 0036 3a06 b800 10b8
    0x0000010: 0022 1906 b900 3c01 0005 b800 4212 43b6
    0x0000020: 0047 b800 10a0 006b b800 10b8 0022 1906
    0x0000030: b900 4b01 0037 07b8 0010 b800 2219 0610
    0x0000040: 10b9 004e 0200 b800 10b8 0022 1250 1904
    0x0000050: b600 56b8 0042 1243 b600 47b8 0010 9900
    0x0000060: 11b8 0010 b800 2216 0714 0057 6937 07b8
    0x0000070: 0010 b800 2216 07b8 005e 3a09 b800 10b8
    0x0000080: 0022 b800 4212 5fb6 0047 b800 10a7 07b3
    0x0000090: 1906 b900 3c01 0007 b800 4212 60b6 0047
    0x00000a0: b800 10a0 04a6 b800 10b8 0022 1906 b900
    0x00000b0: 6401 003a 0ab8 0010 b800 2219 04b8 0042
    0x00000c0: 1265 b600 47b8 0010 c603 d2b8 0010 b800
    0x00000d0: 2212 6719 04b6 0056 b800 4212 68b6 0047
    0x00000e0: b800 1099 0041 2cc1 006a b800 4212 6bb6
    0x00000f0: 0047 b800 1099 002f 2cc0 006a b800 10b8
    0x0000100: 0022 b600 6e12 70b6 0056 b800 4212 71b6
    0x0000110: 0047 b800 1099 000f b800 10b8 0022 190a
    0x0000120: b800 77b0 b800 10b8 0022 013a 0bb8 0010
    0x0000130: b800 22bb 0079 5919 042b b400 36b9 007d
    0x0000140: 0100 b800 8399 0016 3a0c 3a0d 58bb 0085
    0x0000150: 5919 0d19 0db7 0088 a700 06b7 0089 3a0b
    0x0000160: b800 10b8 0022 b800 4212 8ab6 0047 b800
    0x0000170: 10a7 0097 b800 10b8 0022 3a0e b800 10b8
    0x0000180: 0022 1904 128c b600 90b8 0042 1291 b600
    0x0000190: 47b8 0010 9900 74b8 0010 b800 2219 0412
    0x00001a0: 8c12 93b6 0097 3a0f b800 10b8 0022 bb00
    0x00001b0: 7959 190f 2bb4 0036 b900 7d01 00b8 0083
    0x00001c0: 9900 163a 103a 1158 bb00 8559 1911 1911
    0x00001d0: b700 88a7 0006 b700 893a 0bb8 0010 b800
    0x00001e0: 22b8 0042 1298 b600 47b8 0010 a700 1cb8
    0x00001f0: 0010 b800 223a 12b8 0010 b800 2219 0e59
    0x0000200: 1299 129a b800 9ebf b800 10b8 0022 b200
    0x0000210: a4b8 0042 12a5 b600 47b8 0010 c600 17b8
    0x0000220: 0010 b800 2219 0b2b b400 36b9 00a9 0100
    0x0000230: b600 adb8 0010 b800 2219 0b19 0ab6 00b1
    0x0000240: 3a09 b800 10b8 0022 b800 4212 b2b6 0047
    0x0000250: b800 10a7 0014 b800 10b8 0022 3a0e b800
    0x0000260: 10b8 0022 013a 09b8 0010 b800 2219 09b8
    0x0000270: 0042 12b3 b600 47b8 0010 c701 34b2 00b7
    0x0000280: b200 bcb8 0042 12bd b600 47b8 0010 a601
    0x0000290: 20b8 0010 b800 22bb 0079 5919 04b2 00c0
    0x00002a0: b800 8399 0016 3a13 3a14 58bb 0085 5919
    0x00002b0: 1419 14b7 0088 a700 06b7 0089 3a0b b800
    0x00002c0: 10b8 0022 b800 4212 c1b6 0047 b800 10a7
    0x00002d0: 0097 b800 10b8 0022 3a0e b800 10b8 0022
    0x00002e0: 1904 128c b600 90b8 0042 12c2 b600 47b8
    0x00002f0: 0010 9900 74b8 0010 b800 2219 0412 8c12
    0x0000300: 93b6 0097 3a0f b800 10b8 0022 bb00 7959
    0x0000310: 190f 2bb4 0036 b900 7d01 00b8 0083 9900
    0x0000320: 163a 153a 1658 bb00 8559 1916 1916 b700
    0x0000330: 88a7 0006 b700 893a 0bb8 0010 b800 22b8
    0x0000340: 0042 12c3 b600 47b8 0010 a700 1cb8 0010
    0x0000350: b800 223a 12b8 0010 b800 2219 0e59 1299
    0x0000360: 129a b800 9ebf b800 10b8 0022 190b 2bb4
    0x0000370: 0036 b900 a901 00b6 00ad b800 10b8 0022
    0x0000380: 190b 190a b600 b13a 09b8 0010 b800 22b8
    0x0000390: 0042 12c4 b600 47b8 0010 a700 14b8 0010
    0x00003a0: b800 223a 0eb8 0010 b800 2201 3a09 b800
    0x00003b0: 10b8 0022 1909 b800 4212 c5b6 0047 b800
    0x00003c0: 10c7 00c5 b800 10b8 0022 1904 12c7 b600
    0x00003d0: 56b8 0042 12c8 b600 47b8 0010 9900 a119
    0x00003e0: 0ab8 0010 b800 22b6 00cb 1013 b800 4212
    0x00003f0: ccb6 0047 b800 10a0 0086 b800 10b8 0022
    0x0000400: bb00 7959 12ce b200 b7b8 0083 9900 163a
    0x0000410: 173a 1858 bb00 8559 1918 1918 b700 88a7
    0x0000420: 0006 b700 893a 0eb8 0010 b800 2219 0eb2
    0x0000430: 00a4 b600 adb8 0010 b800 2219 0e19 0ab6
    0x0000440: 00b1 3a09 b800 10b8 0022 b800 4212 cfb6
    0x0000450: 0047 b800 10a7 0031 b800 10b8 0022 3a0e
    0x0000460: b800 10b8 0022 013a 09b8 0010 b800 22b8
    0x0000470: 0042 12d0 b600 47b8 0010 a700 0cb8 0010
    0x0000480: b800 2201 3a09 b800 10b8 0022 b800 4212
    0x0000490: d1b6 0047 b800 10a7 000c b800 10b8 0022
    0x00004a0: 013a 09b8 0010 b800 2219 09b8 0042 12d2
    0x00004b0: b600 47b8 0010 c700 7fb8 0010 b800 2219
    0x00004c0: 0a3a 09b8 0010 b800 2219 0610 10b9 004e
    0x00004d0: 0200 b800 10b8 0022 1906 b200 d8b9 00db
    0x00004e0: 0200 b800 4212 dcb6 0047 b800 1099 0048
    0x00004f0: b800 10b8 0022 bb00 de59 190a b700 e13a
    0x0000500: 0bb8 0010 b800 2219 0bb6 00e4 b800 4212
    0x0000510: e5b6 0047 b800 1099 0013 b800 10b8 0022
    0x0000520: 190b b600 e9b6 00ef 3a09 b800 10b8 0022
    0x0000530: 190b b600 f2b8 0010 b800 22b8 0042 12f3
    0x0000540: b600 47b8 0010 a702 fa19 06b9 003c 0100
    0x0000550: 1008 b800 4212 f4b6 0047 b800 10a0 0027
    0x0000560: b800 10b8 0022 1906 b900 f601 00b8 0010
    0x0000570: b800 2201 3a09 b800 4212 f7b6 0047 b800
    0x0000580: 10a7 02bf b800 10b8 0022 1906 b900 3c01
    0x0000590: 0010 0cb8 0042 12f8 b600 47b8 0010 a001
    0x00005a0: abb8 0010 b800 2219 06b9 00f6 0100 b800
    0x00005b0: 10b8 0022 1906 b900 3c01 0007 b800 4212
    0x00005c0: f9b6 0047 b800 10a0 00c3 b800 10b8 0022
    0x00005d0: 1906 b900 6401 003a 0ab8 0010 b800 22b2
    0x00005e0: 00fd 190a b600 56b8 0042 12fe b600 47b8
    0x00005f0: 0010 9900 7bb8 0010 b800 2219 06b9 00f6
    0x0000600: 0100 b800 10b8 0022 2b10 11b6 0101 b800
    0x0000610: 10b8 0022 1906 b900 6401 003a 0bb8 0010
    0x0000620: b800 222b b601 0519 0b01 1906 b901 0801
    0x0000630: 00b6 010e 3a0e b800 10b8 0022 190e b800
    0x0000640: 4213 010f b600 47b8 0010 c600 0cb8 0010
    0x0000650: b800 2219 0e4d b800 10b8 0022 2b07 b601
    0x0000660: 01b8 0010 b800 222b 1010 b601 01b8 0010
    0x0000670: b800 2219 0605 b901 1202 00b8 0042 1301
    0x0000680: 13b6 0047 b800 10a7 001c b800 10b8 0022
    0x0000690: bb01 1559 1301 17b7 0118 5912 9912 9ab8
    0x00006a0: 009e bfb8 0010 b800 2219 06b9 003c 0100
    0x00006b0: 05b8 0042 1301 19b6 0047 b800 10a0 002e
    0x00006c0: b800 10b8 0022 1906 b900 4b01 0037 19b8
    0x00006d0: 0010 b800 2219 06b9 00f6 0100 b800 4213
    0x00006e0: 011a b600 47b8 0010 a700 33b8 0010 b800
    0x00006f0: 22bb 0115 59bb 011c 59b7 011d 1301 1fb6
    0x0000700: 0123 1906 b901 2601 00b6 0123 b601 29b7
    0x0000710: 0118 5912 9912 9ab8 009e bfb8 0010 b800
    0x0000720: 2216 19b8 005e 3a09 b800 10b8 0022 2b10
    0x0000730: 0db6 0101 b800 10b8 0022 b800 4213 012a
    0x0000740: b600 47b8 0010 a700 fa2b b601 2d05 b800
    0x0000750: 4213 012e b600 47b8 0010 a000 dab8 0010
    0x0000760: b800 222b 03b6 0131 b800 10b8 0022 2b10
    0x0000770: 10b6 0101 b800 10b8 0022 1906 b900 3c01
    0x0000780: 0007 b800 4213 0132 b600 47b8 0010 a000
    0x0000790: 5ab8 0010 b800 2213 0134 1906 b900 6401
    0x00007a0: 00b6 0056 b800 4213 0135 b600 47b8 0010
    0x00007b0: 9a00 1cb8 0010 b800 22bb 0115 5913 0117
    0x00007c0: b701 1859 1299 129a b800 9ebf b800 10b8
    0x00007d0: 0022 1906 b900 f601 00b8 0042 1301 36b6
    0x00007e0: 0047 b800 10a7 001c b800 10b8 0022 bb01
    0x00007f0: 1559 1301 17b7 0118 5912 9912 9ab8 009e
    0x0000800: bfb8 0010 b800 222b 1011 b601 01b8 0010
    0x0000810: b800 222b b601 393a 09b8 0010 b800 222b
    0x0000820: 100d b601 01b8 0042 1301 3ab6 0047 b800
    0x0000830: 10a7 000f b800 10b8 0022 2bb6 0139 3a09
    0x0000840: b800 10b8 0022 2a2b 2c2d 1909 b601 3eb0
    0x0000850:                                        
  Exception Handler Table:
    bci [301, 352] => handler: 372
    bci [424, 475] => handler: 495
    bci [563, 578] => handler: 598
    bci [657, 702] => handler: 722
    bci [774, 825] => handler: 845
    bci [890, 905] => handler: 925
    bci [1018, 1092] => handler: 1112
  Stackmap Table:
    append_frame(@111,Object[#56],Long)
    chop_frame(@144,1)
    full_frame(@292,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Top,Object[#82]},{})
    full_frame(@347,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Top,Object[#82],Null},{Uninitialized[#307],Uninitialized[#307],Object[#82],Object[#185]})
    same_locals_1_stack_item_frame(@350,Object[#121])
    full_frame(@372,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Top,Object[#82],Object[#121]},{Object[#46]})
    full_frame(@470,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Top,Object[#82],Object[#121],Top,Top,Object[#46],Object[#82]},{Uninitialized[#430],Uninitialized[#430],Object[#82],Object[#185]})
    same_locals_1_stack_item_frame(@473,Object[#121])
    same_locals_1_stack_item_frame(@495,Object[#46])
    full_frame(@520,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Top,Object[#82],Object[#121]},{})
    same_frame(@563)
    same_locals_1_stack_item_frame(@598,Object[#48])
    full_frame(@615,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Object[#347],Object[#82],Object[#121]},{})
    full_frame(@697,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Object[#347],Object[#82],Object[#121]},{Uninitialized[#663],Uninitialized[#663],Object[#82],Object[#185]})
    same_locals_1_stack_item_frame(@700,Object[#121])
    same_locals_1_stack_item_frame(@722,Object[#46])
    full_frame(@820,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Object[#347],Object[#82],Object[#121],Top,Top,Object[#46],Object[#82]},{Uninitialized[#780],Uninitialized[#780],Object[#82],Object[#185]})
    same_locals_1_stack_item_frame(@823,Object[#121])
    same_locals_1_stack_item_frame(@845,Object[#46])
    full_frame(@870,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Object[#347],Object[#82],Object[#121]},{})
    same_locals_1_stack_item_frame(@925,Object[#48])
    same_frame(@942)
    full_frame(@1058,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Object[#347],Object[#82],Object[#121]},{Uninitialized[#1024],Uninitialized[#1024],Object[#82],Object[#185]})
    same_locals_1_stack_item_frame(@1061,Object[#121])
    same_locals_1_stack_item_frame(@1112,Object[#48])
    same_frame(@1149)
    same_frame(@1158)
    full_frame(@1178,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Top,Object[#82]},{})
    full_frame(@1187,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Object[#347],Object[#82]},{})
    full_frame(@1322,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Object[#345],Object[#82],Object[#222]},{})
    chop_frame(@1333,1)
    full_frame(@1353,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56]},{})
    same_frame(@1412)
    full_frame(@1622,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Top,Object[#82],Object[#82],Top,Top,Object[#106]},{})
    full_frame(@1645,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Top,Object[#82]},{})
    full_frame(@1674,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56]},{})
    full_frame(@1699,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Top,Object[#82]},{})
    same_frame_extended(@1771)
    full_frame(@1819,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56],Top,Top,Top,Object[#82],Top,Top,Top,Top,Top,Top,Top,Top,Top,Top,Top,Top,Top,Top,Long},{})
    full_frame(@1865,{Object[#2],Object[#50],Object[#343],Object[#345],Object[#82],Integer,Object[#56]},{})
    same_frame_extended(@1996)
    same_frame(@2024)
    same_frame(@2049)
    same_frame(@2100)
    append_frame(@2112,Top,Top,Object[#345])

[MASTER] 18:39:27.256 [logback-2] ERROR ClassStateSupport - Could not initialize com.alibaba.fastjson.serializer.JSONSerializer: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/serializer/JSONSerializer.writeWithFormat(Ljava/lang/Object;Ljava/lang/String;)V @217: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[3]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @217
    flags: { }
    locals: { 'com/alibaba/fastjson/serializer/JSONSerializer', 'java/lang/Object', 'java/lang/String', top, top, 'java/text/DateFormat', 'java/util/Locale', 'java/lang/String' }
    stack: { uninitialized 209, uninitialized 209, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 22b8 0034 2bc1 01a7 b800 6313 01a8
    0x0000010: b600 68b8 0022 9901 61b8 0022 b800 3413
    0x0000020: 01aa 2cb6 01ad b800 6313 01ae b600 68b8
    0x0000030: 0022 9900 2bb8 0022 b800 342b c001 a7b6
    0x0000040: 01b2 1401 b36d 42b8 0022 b800 342a b400
    0x0000050: 5521 88b6 01b7 b800 22b8 0034 b1b8 0022
    0x0000060: b800 3413 01b9 2cb6 01ad b800 6313 01ba
    0x0000070: b600 68b8 0022 9900 1eb8 0022 b800 342a
    0x0000080: b400 552b c001 a7b6 01b2 b601 beb8 0022
    0x0000090: b800 34b1 b800 22b8 0034 2ab6 01c0 3a05
    0x00000a0: b800 22b8 0034 1905 b800 6313 01c1 b600
    0x00000b0: 68b8 0022 c700 9cb8 0022 b800 34bb 005d
    0x00000c0: 592c 2ab4 0053 b800 7799 0016 3a06 3a07
    0x00000d0: 58bb 0079 5919 0719 07b7 007c a700 06b7
    0x00000e0: 007d 3a05 b800 22b8 0034 b800 6313 01c2
    0x00000f0: b600 68b8 0022 a700 4bb8 0022 b800 343a
    0x0000100: 08b8 0022 b800 342c 1301 c413 01c6 b601
    0x0000110: ca3a 09b8 0022 b800 34bb 005d 5919 092a
    0x0000120: b400 53b8 0077 9900 163a 0a3a 0b58 bb00
    0x0000130: 7959 190b 190b b700 7ca7 0006 b700 7d3a
    0x0000140: 05b8 0022 b800 3419 052a b400 4eb6 0083
    0x0000150: b800 22b8 0034 1905 2bc0 01a7 b601 ce3a
    0x0000160: 08b8 0022 b800 342a b400 5519 08b6 01d1
    0x0000170: b800 22b8 0034 b1b8 0022 b800 342b c101
    0x0000180: d3b8 0063 1301 d4b6 0068 b800 2299 0199
    0x0000190: b800 22b8 0034 2bc0 01d3 c001 d33a 05b8
    0x00001a0: 0022 b800 3413 01d6 2cb6 01ad b800 6313
    0x00001b0: 01d7 b600 68b8 0022 9a00 1913 01d9 2cb6
    0x00001c0: 01ad b800 6313 01da b600 68b8 0022 9901
    0x00001d0: 0eb8 0022 b800 3401 3a08 b800 22b8 0034
    0x00001e0: bb01 dc59 b701 dd3a 09b8 0022 b800 3419
    0x00001f0: 05be 1102 00b8 0063 1301 deb6 0068 b800
    0x0000200: 22a2 0026 b800 22b8 0034 bb01 e059 1909
    0x0000210: 1905 beb7 01e3 3a08 b800 6313 01e4 b600
    0x0000220: 68b8 0022 a700 14b8 0022 b800 34bb 01e0
    0x0000230: 5919 09b7 01e7 3a08 b800 22b8 0034 1908
    0x0000240: 1905 b601 eab8 0022 b800 3419 08b6 01ed
    0x0000250: b800 22b8 0034 2ab4 0055 1909 b601 f1b6
    0x0000260: 01f4 b800 22b8 0034 1908 b801 f9b8 0022
    0x0000270: b800 34b8 0063 1301 fab6 0068 b800 22a7
    0x0000280: 0048 b800 22b8 0034 3a09 b800 22b8 0034
    0x0000290: bb01 5f59 1301 fc19 09b7 0165 5913 0166
    0x00002a0: 1301 fdb8 016b bfb8 0022 b800 343a 0c19
    0x00002b0: 08b8 01f9 b800 22b8 0034 190c 5913 0166
    0x00002c0: 1301 fdb8 016b bfb8 0022 b800 34b8 0063
    0x00002d0: 1301 feb6 0068 b800 22a7 0046 1302 002c
    0x00002e0: b601 adb8 0063 1302 01b6 0068 b800 2299
    0x00002f0: 0021 b800 22b8 0034 2ab4 0055 1905 b602
    0x0000300: 04b8 0063 1302 05b6 0068 b800 22a7 0012
    0x0000310: b800 22b8 0034 2ab4 0055 1905 b601 f4b8
    0x0000320: 0022 b800 34b1 b800 22b8 0034 2bc1 0207
    0x0000330: b800 6313 0208 b600 68b8 0022 9900 beb8
    0x0000340: 0022 b800 342b c002 073a 05b8 0022 b800
    0x0000350: 3419 05b9 020c 0100 3a08 b800 22b8 0034
    0x0000360: 2ab4 0055 105b b601 3fb8 0022 b800 3403
    0x0000370: 3609 1509 1905 b902 0d01 00b8 0063 1302
    0x0000380: 0eb6 0068 b800 22a2 005d b800 22b8 0034
    0x0000390: 1908 b902 1401 003a 0cb8 0022 b800 3415
    0x00003a0: 09b8 0063 1302 15b6 0068 b800 2299 0012
    0x00003b0: b800 22b8 0034 2ab4 0055 102c b601 3fb8
    0x00003c0: 0022 b800 342a 190c 2cb6 0217 b800 22b8
    0x00003d0: 0034 8409 01b8 0063 1302 18b6 0068 b800
    0x00003e0: 22a7 ff91 b800 22b8 0034 2ab4 0055 105d
    0x00003f0: b601 3fb8 0022 b800 34b1 b800 22b8 0034
    0x0000400: 2a2b b601 55b8 0022 b800 34b1          
  Exception Handler Table:
    bci [183, 228] => handler: 249
    bci [474, 610] => handler: 642
    bci [474, 610] => handler: 679
    bci [642, 687] => handler: 679
  Stackmap Table:
    same_frame_extended(@93)
    same_frame(@148)
    full_frame(@223,{Object[#2],Object[#230],Object[#133],Top,Top,Object[#127]},{Uninitialized[#189],Uninitialized[#189],Object[#133],Object[#135]})
    same_locals_1_stack_item_frame(@226,Object[#93])
    same_locals_1_stack_item_frame(@249,Object[#421])
    full_frame(@316,{Object[#2],Object[#230],Object[#133],Top,Top,Object[#127],Top,Top,Object[#421],Object[#133]},{Uninitialized[#281],Uninitialized[#281],Object[#133],Object[#135]})
    same_locals_1_stack_item_frame(@319,Object[#93])
    full_frame(@321,{Object[#2],Object[#230],Object[#133],Top,Top,Object[#93]},{})
    full_frame(@336,{Object[#2],Object[#230],Object[#133],Top,Top,Object[#127]},{})
    chop_frame(@375,3)
    append_frame(@465,Top,Top,Object[#467])
    full_frame(@551,{Object[#2],Object[#230],Object[#133],Top,Top,Object[#467],Top,Top,Null,Object[#476]},{})
    full_frame(@568,{Object[#2],Object[#230],Object[#133],Top,Top,Object[#467],Top,Top,Object[#480],Object[#476]},{})
    full_frame(@642,{Object[#2],Object[#230],Object[#133],Top,Top,Object[#467],Top,Top,Object[#480]},{Object[#337]})
    same_locals_1_stack_item_frame(@679,Object[#372])
    append_frame(@711,Object[#476])
    full_frame(@732,{Object[#2],Object[#230],Object[#133],Top,Top,Object[#467]},{})
    same_frame(@784)
    same_frame(@799)
    chop_frame(@806,3)
    full_frame(@882,{Object[#2],Object[#230],Object[#133],Top,Top,Object[#519],Top,Top,Object[#528],Integer},{})
    append_frame(@959,Top,Top,Object[#230])
    chop_frame(@996,3)
    full_frame(@1018,{Object[#2],Object[#230],Object[#133]},{})

[MASTER] 18:39:27.278 [logback-2] ERROR ClassStateSupport - Could not initialize com.alibaba.fastjson.serializer.SerializeConfig: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/serializer/MiscCodec.deserialze(Lcom/alibaba/fastjson/parser/DefaultJSONParser;Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object; @489: invokespecial
  Reason:
    Type 'java/net/InetAddress' (current frame, stack[3]) is not assignable to integer
  Current Frame:
    bci: @489
    flags: { }
    locals: { 'com/alibaba/fastjson/serializer/MiscCodec', 'com/alibaba/fastjson/parser/DefaultJSONParser', 'java/lang/reflect/Type', 'java/lang/Object', 'com/alibaba/fastjson/parser/JSONLexer', 'java/net/InetAddress', integer, 'java/lang/String', integer, 'java/net/InetAddress' }
    stack: { uninitialized 481, uninitialized 481, 'java/net/InetAddress', 'java/net/InetAddress' }
  Bytecode:
    0x0000000: b800 1eb8 0030 2bb4 0176 3a04 b800 1eb8
    0x0000010: 0030 2c12 7ab8 003c 1301 77b6 0041 b800
    0x0000020: 1ea6 01d2 b800 1eb8 0030 1904 b901 7c01
    0x0000030: 0010 08b8 003c 1301 7db6 0041 b800 1ea0
    0x0000040: 0018 b800 1eb8 0030 1904 b901 8001 00b8
    0x0000050: 001e b800 3001 b0b8 001e b800 302b 100c
    0x0000060: b601 83b8 001e b800 3001 3a05 b800 1eb8
    0x0000070: 0030 0336 06b8 001e b800 3019 04b9 0186
    0x0000080: 0100 3a07 b800 1eb8 0030 1904 1011 b901
    0x0000090: 8802 00b8 001e b800 3019 0712 82b6 00df
    0x00000a0: b800 3c13 0189 b600 41b8 001e 9900 2fb8
    0x00000b0: 001e b800 302b 1011 b601 83b8 001e b800
    0x00000c0: 302b 1296 b601 8dc0 0096 3a05 b800 3c13
    0x00000d0: 018e b600 41b8 001e a700 a4b8 001e b800
    0x00000e0: 3019 0712 86b6 00df b800 3c13 018f b600
    0x00000f0: 41b8 001e 9900 71b8 001e b800 302b 1011
    0x0000100: b601 83b8 001e b800 3019 04b9 017c 0100
    0x0000110: 05b8 003c 1301 90b6 0041 b800 1e9f 001d
    0x0000120: b800 1eb8 0030 bb00 ea59 1301 92b7 00fa
    0x0000130: 5912 fb13 0193 b801 00bf b800 1eb8 0030
    0x0000140: 1904 b901 9601 0036 06b8 001e b800 3019
    0x0000150: 04b9 0180 0100 b800 3c13 0197 b600 41b8
    0x0000160: 001e a700 1ab8 001e b800 302b 1011 b601
    0x0000170: 83b8 001e b800 302b b601 9a57 b800 1eb8
    0x0000180: 0030 1904 b901 7c01 0010 10b8 003c 1301
    0x0000190: 9bb6 0041 b800 1ea0 0025 b800 1eb8 0030
    0x00001a0: 1904 b901 8001 00b8 001e b800 30b8 003c
    0x00001b0: 1301 9cb6 0041 b800 1ea7 febc b800 1eb8
    0x00001c0: 0030 2b10 0db6 0183 b800 1eb8 0030 bb00
    0x00001d0: 7a59 1905 1506 b800 9c99 0016 3608 3a09
    0x00001e0: 58bb 019e 5919 0919 09b7 01a1 a700 06b7
    0x00001f0: 01a2 b0b8 001e b800 302b b401 a505 b800
    0x0000200: 3c13 01a6 b600 41b8 001e a000 dbb8 001e
    0x0000210: b800 302b 03b5 01a5 b800 1eb8 0030 2b10
    0x0000220: 10b6 0183 b800 1eb8 0030 1904 b901 7c01
    0x0000230: 0007 b800 3c13 01a7 b600 41b8 001e a000
    0x0000240: 5ab8 001e b800 3012 7119 04b9 0186 0100
    0x0000250: b600 dfb8 003c 1301 a8b6 0041 b800 1e9a
    0x0000260: 001d b800 1eb8 0030 bb00 ea59 1301 aab7
    0x0000270: 00fa 5912 fb13 0193 b801 00bf b800 1eb8
    0x0000280: 0030 1904 b901 8001 00b8 003c 1301 abb6
    0x0000290: 0041 b800 1ea7 001d b800 1eb8 0030 bb00
    0x00002a0: ea59 1301 aab7 00fa 5912 fb13 0193 b801
    0x00002b0: 00bf b800 1eb8 0030 2b10 11b6 0183 b800
    0x00002c0: 1eb8 0030 2bb6 019a 3a05 b800 1eb8 0030
    0x00002d0: 2b10 0db6 0183 b800 3c13 01ac b600 41b8
    0x00002e0: 001e a700 0fb8 001e b800 302b b601 9a3a
    0x00002f0: 05b8 001e b800 3019 05b8 003c 1301 adb6
    0x0000300: 0041 b800 1ec7 001b b800 1eb8 0030 013a
    0x0000310: 06b8 003c 1301 aeb6 0041 b800 1ea7 0133
    0x0000320: b800 1eb8 0030 1905 c100 d2b8 003c 1301
    0x0000330: afb6 0041 b800 1e99 001f b800 1eb8 0030
    0x0000340: 1905 c000 d23a 06b8 003c 1301 b0b6 0041
    0x0000350: b800 1ea7 00fd b800 1eb8 0030 1905 c101
    0x0000360: b2b8 003c 1301 b3b6 0041 b800 1e99 00c9
    0x0000370: b800 1eb8 0030 1905 c001 b23a 07b8 001e
    0x0000380: b800 302c 12ae b800 3c13 01b4 b600 41b8
    0x0000390: 001e a600 69b8 001e b800 3019 0713 01b5
    0x00003a0: b601 b93a 0ab8 001e b800 3019 0ab8 003c
    0x00003b0: 1301 bab6 0041 b800 1ec6 000f b800 1eb8
    0x00003c0: 0030 190a b801 bdb0 b800 1eb8 0030 1907
    0x00003d0: 1301 bfb6 01b9 3a0b b800 1eb8 0030 190b
    0x00003e0: b800 3c13 01c0 b600 41b8 001e c600 0fb8
    0x00003f0: 001e b800 3019 0bb8 01bd b0b8 001e b800
    0x0000400: 302c 120d b800 3c13 01c1 b600 41b8 001e
    0x0000410: a600 19b8 001e b800 3019 07b6 01c5 b901
    0x0000420: c801 00b9 0160 0100 b0b8 001e b800 3019
    0x0000430: 072c b601 ccb0 b800 1eb8 0030 bb00 ea59
    0x0000440: 1301 ceb7 00fa 5912 fb13 0193 b801 00bf
    0x0000450: b800 1eb8 0030 1906 b800 3c13 01cf b600
    0x0000460: 41b8 001e c600 1719 06b6 01d2 b800 3c13
    0x0000470: 01d3 b600 41b8 001e 9a00 0bb8 001e b800
    0x0000480: 3001 b0b8 001e b800 302c 1301 d5b8 003c
    0x0000490: 1301 d6b6 0041 b800 1ea6 001b b800 1eb8
    0x00004a0: 0030 1906 b800 9c99 0009 b801 dca7 0006
    0x00004b0: b801 ddb0 b800 1eb8 0030 2c13 01df b800
    0x00004c0: 3c13 01e0 b600 41b8 001e a600 1bb8 001e
    0x00004d0: b800 3019 06b8 009c 9900 09b8 01e6 a700
    0x00004e0: 06b8 01e7 b0b8 001e b800 302c 1301 e9b8
    0x00004f0: 003c 1301 eab6 0041 b800 1ea6 0049 b800
    0x0000500: 1eb8 0030 bb01 e959 1906 b800 9c99 000f
    0x0000510: 3a0c 5757 190c b801 f0a7 0006 b701 f1b0
    0x0000520: b800 1eb8 0030 3a07 b800 1eb8 0030 bb00
    0x0000530: ea59 1301 f319 07b7 014b 5912 fb13 0193
    0x0000540: b801 00bf b800 1eb8 0030 2c13 01f5 b800
    0x0000550: 3c13 01f6 b600 41b8 001e a600 0fb8 001e
    0x0000560: b800 3019 06b8 01fa b0b8 001e b800 302c
    0x0000570: 1301 fcb8 003c 1301 fdb6 0041 b800 1ea6
    0x0000580: 000f b800 1eb8 0030 1906 b802 03b0 b800
    0x0000590: 1eb8 0030 2c12 4cb8 003c 1302 04b6 0041
    0x00005a0: b800 1ea6 004f b800 1eb8 0030 bb00 4c59
    0x00005b0: 1906 1904 b902 0801 00b8 009c 9900 163a
    0x00005c0: 0d3a 0e58 bb02 0a59 190e 190e b702 0da7
    0x00005d0: 0006 b702 0e3a 07b8 001e b800 3019 0719
    0x00005e0: 04b9 0212 0100 b602 16b8 001e b800 3019
    0x00005f0: 07b0 b800 1eb8 0030 2c12 96b8 003c 1302
    0x0000600: 17b6 0041 b800 1ea5 0029 2c13 0219 b800
    0x0000610: 3c13 021a b600 41b8 001e a500 162c 1302
    0x0000620: 1cb8 003c 1302 1db6 0041 b800 1ea6 003f
    0x0000630: b800 1eb8 0030 1906 b800 9c99 0009 b802
    0x0000640: 21a7 0006 b802 22b0 b800 1eb8 0030 3a07
    0x0000650: b800 1eb8 0030 bb00 ea59 1302 2419 07b7
    0x0000660: 014b 5912 fb13 0193 b801 00bf b800 1eb8
    0x0000670: 0030 2c12 8fb8 003c 1302 25b6 0041 b800
    0x0000680: 1ea6 0071 b800 1eb8 0030 1906 1302 27b6
    0x0000690: 022b b800 3c13 022c b600 41b8 001e 9b00
    0x00006a0: 2fb2 022e b800 3c13 022f b600 41b8 001e
    0x00006b0: 9a00 1db8 001e b800 30bb 00ea 5913 0231
    0x00006c0: b700 fa59 12fb 1301 93b8 0100 bfb8 001e
    0x00006d0: b800 30bb 008f 5919 06b8 009c 9900 123a
    0x00006e0: 0f58 bb02 3359 190f b702 34a7 0006 b702
    0x00006f0: 35b0 b800 1eb8 0030 2c12 a7b8 003c 1302
    0x0000700: 36b6 0041 b800 1ea6 000f b800 1eb8 0030
    0x0000710: 1906 b802 39b0 b800 1eb8 0030 2cc1 023b
    0x0000720: b800 3c13 023c b600 41b8 001e 9900 1db8
    0x0000730: 001e b800 302c c002 3b3a 07b8 001e b800
    0x0000740: 3019 07b9 0240 0100 4db8 001e b800 302c
    0x0000750: 126a b800 3c13 0241 b600 41b8 001e a600
    0x0000760: 17b8 001e b800 3019 062b b602 45b6 024b
    0x0000770: 03b8 024f b0b8 001e b800 302c 1302 51b8
    0x0000780: 003c 1302 52b6 0041 b800 1ea6 000f b800
    0x0000790: 1eb8 0030 1906 b802 56b0 b800 1eb8 0030
    0x00007a0: 2c12 aeb8 003c 1302 57b6 0041 b800 1ea6
    0x00007b0: 000f b800 1eb8 0030 1906 b801 bdb0 b800
    0x00007c0: 1eb8 0030 2c13 0259 b800 3c13 025a b600
    0x00007d0: 41b8 001e a600 13b8 001e b800 30bb 0259
    0x00007e0: 5919 06b7 025b b0b8 001e b800 302c c100
    0x00007f0: 6ab8 003c 1302 5cb6 0041 b800 1e99 0172
    0x0000800: b800 1eb8 0030 2cc0 006a b600 6d3a 07b8
    0x0000810: 001e b800 3019 0713 025e b600 dfb8 003c
    0x0000820: 1302 5fb6 0041 b800 1e99 011a b800 1eb8
    0x0000830: 0030 b202 61b8 003c 1302 62b6 0041 b800
    0x0000840: 1ec7 0043 b202 64b8 003c 1302 65b6 0041
    0x0000850: b800 1e9a 0031 b800 1eb8 0030 1302 67b8
    0x0000860: 026a 3a0a b800 1eb8 0030 190a 1302 6c05
    0x0000870: bd00 6a59 0312 d253 5904 1302 6e53 b602
    0x0000880: 72b3 0261 b800 1eb8 0030 b202 61b8 003c
    0x0000890: 1302 73b6 0041 b800 1ec6 0021 b800 1eb8
    0x00008a0: 0030 b202 6101 05bd 0004 5903 1906 5359
    0x00008b0: 0403 bd00 d253 b602 79b0 b800 1eb8 0030
    0x00008c0: bb00 ea59 1302 7bb7 00fa 5912 fb13 0193
    0x00008d0: b801 00bf b800 1eb8 0030 3a0a b800 1eb8
    0x00008e0: 0030 04b3 0264 b800 1eb8 0030 b800 3c13
    0x00008f0: 027c b600 41b8 001e a700 4bb8 001e b800
    0x0000900: 303a 0ab8 001e b800 30bb 00ea 5913 027b
    0x0000910: 190a b701 4b59 12fb 1301 93b8 0100 bfb8
    0x0000920: 001e b800 303a 0ab8 001e b800 30bb 00ea
    0x0000930: 5913 027b 190a b701 4b59 12fb 1301 93b8
    0x0000940: 0100 bfb8 001e b800 30bb 00ea 59bb 00ec
    0x0000950: 59b7 00ed 1302 7eb6 00f3 1907 b600 f3b6
    0x0000960: 00f8 b700 fa59 12fb 1301 93b8 0100 bfb8
    0x0000970: 001e b800 30bb 00ea 59bb 00ec 59b7 00ed
    0x0000980: 1302 7eb6 00f3 2cb8 009c 9900 09b8 0281
    0x0000990: a700 06b6 0282 b600 f3b6 00f8 b700 fa59
    0x00009a0: 12fb 1301 93b8 0100 bf                 
  Exception Handler Table:
    bci [1278, 1311] => handler: 1312
    bci [1584, 1607] => handler: 1608
    bci [2092, 2233] => handler: 2260
    bci [2234, 2260] => handler: 2260
    bci [2092, 2233] => handler: 2299
    bci [2234, 2260] => handler: 2299
    bci [2092, 2233] => handler: 2335
    bci [2234, 2260] => handler: 2335
  Stackmap Table:
    append_frame(@87,Object[#377])
    append_frame(@117,Object[#150],Integer)
    append_frame(@219,Object[#210])
    same_frame_extended(@314)
    same_frame(@357)
    same_frame(@380)
    same_frame(@444)
    full_frame(@495,{Object[#2],Object[#370],Object[#294],Object[#4],Object[#377],Object[#150],Integer,Object[#210]},{Uninitialized[#462],Uninitialized[#462],Object[#150],Integer})
    same_locals_1_stack_item_frame(@498,Object[#122])
    chop_frame(@499,3)
    same_frame_extended(@636)
    same_frame(@664)
    same_frame(@690)
    same_frame(@741)
    append_frame(@753,Object[#4])
    same_frame(@800)
    same_frame(@854)
    full_frame(@968,{Object[#2],Object[#370],Object[#294],Object[#4],Object[#377],Object[#4],Top,Object[#434],Top,Top,Object[#210]},{})
    chop_frame(@1019,3)
    same_frame(@1065)
    chop_frame(@1078,2)
    append_frame(@1104,Object[#210])
    same_frame(@1147)
    same_frame(@1155)
    same_locals_1_stack_item_frame(@1200,Object[#210])
    same_locals_1_stack_item_frame(@1203,Object[#469])
    same_frame(@1204)
    same_locals_1_stack_item_frame(@1249,Object[#210])
    same_locals_1_stack_item_frame(@1252,Object[#479])
    same_frame(@1253)
    full_frame(@1308,{Object[#2],Object[#370],Object[#294],Object[#4],Object[#377],Object[#4],Object[#210]},{Uninitialized[#1284],Uninitialized[#1284],Object[#210]})
    same_locals_1_stack_item_frame(@1311,Object[#489])
    same_locals_1_stack_item_frame(@1312,Object[#360])
    same_frame(@1348)
    same_frame(@1385)
    same_frame(@1422)
    full_frame(@1490,{Object[#2],Object[#370],Object[#294],Object[#4],Object[#377],Object[#4],Object[#210]},{Uninitialized[#1452],Uninitialized[#1452],Object[#210],Object[#508]})
    same_locals_1_stack_item_frame(@1493,Object[#76])
    same_frame(@1522)
    same_frame(@1584)
    same_locals_1_stack_item_frame(@1604,Object[#210])
    same_locals_1_stack_item_frame(@1607,Object[#150])
    same_locals_1_stack_item_frame(@1608,Object[#362])
    same_frame(@1644)
    same_frame_extended(@1741)
    full_frame(@1774,{Object[#2],Object[#370],Object[#294],Object[#4],Object[#377],Object[#4],Object[#210]},{Uninitialized[#1747],Uninitialized[#1747],Object[#210]})
    same_locals_1_stack_item_frame(@1777,Object[#143])
    same_frame(@1778)
    same_frame(@1814)
    same_frame(@1865)
    same_frame(@1909)
    same_frame(@1946)
    same_frame(@1982)
    same_frame(@2023)
    append_frame(@2180,Object[#210])
    same_frame(@2234)
    same_locals_1_stack_item_frame(@2260,Object[#364])
    same_locals_1_stack_item_frame(@2299,Object[#366])
    same_locals_1_stack_item_frame(@2335,Object[#368])
    same_frame(@2371)
    chop_frame(@2415,1)
    full_frame(@2451,{Object[#2],Object[#370],Object[#294],Object[#4],Object[#377],Object[#4],Object[#210]},{Uninitialized[#2421],Uninitialized[#2421],Object[#236],Object[#294]})
    full_frame(@2454,{Object[#2],Object[#370],Object[#294],Object[#4],Object[#377],Object[#4],Object[#210]},{Uninitialized[#2421],Uninitialized[#2421],Object[#236],Object[#210]})

[MASTER] 18:39:27.286 [logback-2] ERROR ClassStateSupport - Could not initialize com.alibaba.fastjson.serializer.FieldSerializer: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/serializer/FieldSerializer.getPropertyValue(Ljava/lang/Object;)Ljava/lang/Object; @147: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[3]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @147
    flags: { }
    locals: { 'com/alibaba/fastjson/serializer/FieldSerializer', 'java/lang/Object', 'java/lang/Object', 'java/util/Locale', 'java/lang/String' }
    stack: { uninitialized 139, uninitialized 139, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 2bb8 0032 2ab4 003e 2bb6 0120 4db8
    0x0000010: 002b b800 322a b400 afb8 004a 1301 2bb6
    0x0000020: 004f b800 2bc6 0094 2cb8 004a 1301 2cb6
    0x0000030: 004f b800 2bc6 0084 b800 2bb8 0032 2ab4
    0x0000040: 003e b401 2f13 0131 b800 4a13 0132 b600
    0x0000050: 4fb8 002b a500 1c2a b400 3eb4 012f 1301
    0x0000060: 34b8 004a 1301 35b6 004f b800 2ba6 004c
    0x0000070: b800 2bb8 0032 bb01 3759 2ab4 00af b201
    0x0000080: 3db8 0142 9900 154e 3a04 58bb 0144 5919
    0x0000090: 0419 04b7 0147 a700 06b7 0148 3a05 b800
    0x00000a0: 2bb8 0032 1905 b201 4cb6 0150 b800 2bb8
    0x00000b0: 0032 1905 2cb6 0153 b0b8 002b b800 322c
    0x00000c0: b0                                     
  Stackmap Table:
    append_frame(@112,Object[#5])
    full_frame(@153,{Object[#2],Object[#5],Object[#5]},{Uninitialized[#118],Uninitialized[#118],Object[#177],Object[#344]})
    same_locals_1_stack_item_frame(@156,Object[#311])
    same_frame(@185)

[MASTER] 18:39:27.295 [logback-2] ERROR ClassStateSupport - Could not initialize com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/parser/deserializer/ThrowableDeserializer.deserialze(Lcom/alibaba/fastjson/parser/DefaultJSONParser;Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object; @1176: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[3]) is not assignable to 'java/lang/Throwable'
  Current Frame:
    bci: @1176
    flags: { }
    locals: { 'com/alibaba/fastjson/parser/deserializer/ThrowableDeserializer', 'com/alibaba/fastjson/parser/DefaultJSONParser', 'java/lang/reflect/Type', 'java/lang/Object', 'com/alibaba/fastjson/parser/JSONLexer', 'java/lang/Throwable', 'java/lang/Class', 'java/lang/String', '[Ljava/lang/StackTraceElement;', 'java/util/HashMap', null, top, 'java/lang/Throwable', 'java/lang/String' }
    stack: { uninitialized 1168, uninitialized 1168, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 15b8 001d 2bb4 0035 3a04 b800 15b8
    0x0000010: 001d 1904 b900 3b01 0010 08b8 0041 1242
    0x0000020: b600 46b8 0015 a000 18b8 0015 b800 1d19
    0x0000030: 04b9 0049 0100 b800 15b8 001d 01b0 b800
    0x0000040: 15b8 001d 2bb6 004c 05b8 0041 1242 b600
    0x0000050: 46b8 0015 a000 1cb8 0015 b800 1d2b 03b6
    0x0000060: 004f b800 4112 50b6 0046 b800 15a7 0038
    0x0000070: b800 15b8 001d 1904 b900 3b01 0010 0cb8
    0x0000080: 0041 1251 b600 46b8 0015 9f00 1bb8 0015
    0x0000090: b800 1dbb 0053 5912 55b7 0058 5912 5912
    0x00000a0: 5ab8 005e bfb8 0015 b800 1d01 3a05 b800
    0x00000b0: 15b8 001d 013a 06b8 0015 b800 1d2c b800
    0x00000c0: 4112 5fb6 0046 b800 15c6 0046 2cc1 0061
    0x00000d0: b800 4112 62b6 0046 b800 1599 0034 b800
    0x00000e0: 15b8 001d 2cc0 0061 3a07 b800 15b8 001d
    0x00000f0: 1264 1907 b600 68b8 0041 1269 b600 46b8
    0x0000100: 0015 9900 0db8 0015 b800 1d19 073a 06b8
    0x0000110: 0015 b800 1d01 3a07 b800 15b8 001d 013a
    0x0000120: 08b8 0015 b800 1d01 3a09 b800 15b8 001d
    0x0000130: 1904 2bb6 006d b900 7102 003a 0ab8 0015
    0x0000140: b800 1d19 0ab8 0041 1272 b600 46b8 0015
    0x0000150: c700 92b8 0015 b800 1d19 04b9 003b 0100
    0x0000160: 100d b800 4112 73b6 0046 b800 15a0 0026
    0x0000170: b800 15b8 001d 1904 1010 b900 7502 00b8
    0x0000180: 0015 b800 1db8 0041 1276 b600 46b8 0015
    0x0000190: a702 c8b8 0015 b800 1d19 04b9 003b 0100
    0x00001a0: 1010 b800 4112 77b6 0046 b800 15a0 0035
    0x00001b0: b800 15b8 001d 1904 b200 7db9 0081 0200
    0x00001c0: b800 4112 82b6 0046 b800 1599 0017 b800
    0x00001d0: 15b8 001d b800 4112 83b6 0046 b800 15a7
    0x00001e0: ff4b b800 15b8 001d 1904 07b9 0086 0200
    0x00001f0: b800 15b8 001d b200 8c19 0ab6 0092 b800
    0x0000200: 4112 93b6 0046 b800 1599 0091 b800 15b8
    0x0000210: 001d 1904 b900 3b01 0007 b800 4112 94b6
    0x0000220: 0046 b800 15a0 0040 b800 15b8 001d 1904
    0x0000230: b900 9801 003a 0bb8 0015 b800 1d2b b600
    0x0000240: 9c19 0b12 6419 04b9 009f 0100 b600 a53a
    0x0000250: 06b8 0015 b800 1db8 0041 12a6 b600 46b8
    0x0000260: 0015 a700 1bb8 0015 b800 1dbb 0053 5912
    0x0000270: 55b7 0058 5912 5912 5ab8 005e bfb8 0015
    0x0000280: b800 1d19 0410 10b9 0075 0200 b800 4112
    0x0000290: a7b6 0046 b800 15a7 016d b800 15b8 001d
    0x00002a0: 12a9 190a b600 92b8 0041 12aa b600 46b8
    0x00002b0: 0015 9900 a3b8 0015 b800 1d19 04b9 003b
    0x00002c0: 0100 1008 b800 4112 abb6 0046 b800 15a0
    0x00002d0: 001a b800 15b8 001d 013a 07b8 0041 12ac
    0x00002e0: b600 46b8 0015 a700 54b8 0015 b800 1d19
    0x00002f0: 04b9 003b 0100 07b8 0041 12ad b600 46b8
    0x0000300: 0015 a000 20b8 0015 b800 1d19 04b9 0098
    0x0000310: 0100 3a07 b800 4112 aeb6 0046 b800 15a7
    0x0000320: 001b b800 15b8 001d bb00 5359 1255 b700
    0x0000330: 5859 1259 125a b800 5ebf b800 15b8 001d
    0x0000340: 1904 b900 4901 00b8 0041 12af b600 46b8
    0x0000350: 0015 a700 b2b8 0015 b800 1d12 b119 0ab6
    0x0000360: 0092 b800 4112 b2b6 0046 b800 1599 0024
    0x0000370: b800 15b8 001d 2a2b 0112 b1b6 00b4 c000
    0x0000380: 643a 05b8 0041 12b5 b600 46b8 0015 a700
    0x0000390: 76b8 0015 b800 1d12 b719 0ab6 0092 b800
    0x00003a0: 4112 b8b6 0046 b800 1599 0022 b800 15b8
    0x00003b0: 001d 2b12 bab6 00be c000 ba3a 08b8 0041
    0x00003c0: 12bf b600 46b8 0015 a700 3cb8 0015 b800
    0x00003d0: 1d19 09b8 0041 12c0 b600 46b8 0015 c700
    0x00003e0: 12b8 0015 b800 1dbb 00c2 59b7 00c4 3a09
    0x00003f0: b800 15b8 001d 1909 190a 2bb6 00c8 b900
    0x0000400: cc03 0057 b800 15b8 001d 1904 b900 3b01
    0x0000410: 0010 0db8 0041 12cd b600 46b8 0015 a000
    0x0000420: 26b8 0015 b800 1d19 0410 10b9 0075 0200
    0x0000430: b800 15b8 001d b800 4112 ceb6 0046 b800
    0x0000440: 15a7 0017 b800 15b8 001d b800 4112 cfb6
    0x0000450: 0046 b800 15a7 fcd5 b800 15b8 001d 013a
    0x0000460: 0ab8 0015 b800 1d19 06b8 0041 12d0 b600
    0x0000470: 46b8 0015 c700 3db8 0015 b800 1dbb 002f
    0x0000480: 5919 0719 05b8 00d5 9900 163a 0c3a 0d58
    0x0000490: bb00 d759 190d 190d b700 daa7 0006 b700
    0x00004a0: db3a 0ab8 0041 12dc b600 46b8 0015 a700
    0x00004b0: d5b8 0015 b800 1d12 6419 06b6 0068 b800
    0x00004c0: 4112 ddb6 0046 b800 159a 0030 b800 15b8
    0x00004d0: 001d bb00 5359 bb00 df59 b700 e012 e2b6
    0x00004e0: 00e6 1906 b600 e9b6 00e6 b600 ecb7 0058
    0x00004f0: 5912 5912 5ab8 005e bfb8 0015 b800 1d2a
    0x0000500: 1907 1905 1906 b700 f03a 0ab8 0015 b800
    0x0000510: 1d19 0ab8 0041 12f1 b600 46b8 0015 c700
    0x0000520: 2fb8 0015 b800 1dbb 002f 5919 0719 05b8
    0x0000530: 00d5 9900 163a 0e3a 0f58 bb00 d759 190f
    0x0000540: 190f b700 daa7 0006 b700 db3a 0ab8 0015
    0x0000550: b800 1db8 0041 12f2 b600 46b8 0015 a700
    0x0000560: 25b8 0015 b800 1d3a 0bb8 0015 b800 1dbb
    0x0000570: 0053 5912 f419 0bb7 00f5 5912 5912 5ab8
    0x0000580: 005e bfb8 0015 b800 1d19 08b8 0041 12f6
    0x0000590: b600 46b8 0015 c600 10b8 0015 b800 1d19
    0x00005a0: 0a19 08b6 00fa b800 15b8 001d 1909 b800
    0x00005b0: 4112 fbb6 0046 b800 15c6 0144 b800 15b8
    0x00005c0: 001d 013a 0bb8 0015 b800 1d19 06b8 0041
    0x00005d0: 12fc b600 46b8 0015 c600 6db8 0015 b800
    0x00005e0: 1d19 062a b400 feb8 0041 12ff b600 46b8
    0x00005f0: 0015 a600 1bb8 0015 b800 1d2a 3a0b b800
    0x0000600: 4113 0100 b600 46b8 0015 a700 3bb8 0015
    0x0000610: b800 1d2b b600 9c19 06b6 0104 3a10 b800
    0x0000620: 15b8 001d 1910 c100 04b8 0041 1301 05b6
    0x0000630: 0046 b800 1599 0010 b800 15b8 001d 1910
    0x0000640: c000 043a 0bb8 0015 b800 1d19 0bb8 0041
    0x0000650: 1301 06b6 0046 b800 15c6 00a4 b800 15b8
    0x0000660: 001d 1909 b901 0a01 00b9 0110 0100 3a10
    0x0000670: 1910 b901 1501 00b8 0041 1301 16b6 0046
    0x0000680: b800 1599 007a 1910 b901 1901 00c0 0009
    0x0000690: 3a11 b800 15b8 001d 1911 b901 1c01 00c0
    0x00006a0: 008e 3a12 b800 15b8 001d 1911 b901 1f01
    0x00006b0: 003a 13b8 0015 b800 1d19 0b19 12b6 0123
    0x00006c0: 3a14 b800 15b8 001d 1914 b800 4113 0124
    0x00006d0: b600 46b8 0015 c600 12b8 0015 b800 1d19
    0x00006e0: 1419 0a19 13b6 012a b800 15b8 001d b800
    0x00006f0: 4113 012b b600 46b8 0015 a7ff 76b8 0015
    0x0000700: b800 1d19 0ab0                         
  Exception Handler Table:
    bci [1273, 1357] => handler: 1377
  Stackmap Table:
    append_frame(@62,Object[#55])
    same_frame(@112)
    same_frame(@165)
    append_frame(@271,Null,Object[#97])
    full_frame(@298,{Object[#2],Object[#49],Object[#327],Object[#329],Object[#55],Object[#100],Object[#97],Object[#142],Object[#186],Object[#194]},{})
    append_frame(@403,Object[#142])
    same_frame_extended(@482)
    same_frame_extended(@613)
    append_frame(@637,Object[#142])
    chop_frame(@666,1)
    same_frame_extended(@745)
    same_frame(@802)
    same_frame(@826)
    same_frame(@853)
    same_frame(@913)
    same_frame(@971)
    same_frame(@1008)
    same_frame(@1028)
    same_frame(@1092)
    same_frame(@1112)
    full_frame(@1182,{Object[#2],Object[#49],Object[#327],Object[#329],Object[#55],Object[#100],Object[#97],Object[#142],Object[#186],Object[#194],Null},{Uninitialized[#1149],Uninitialized[#1149],Object[#142],Object[#100]})
    same_locals_1_stack_item_frame(@1185,Object[#47])
    same_frame(@1201)
    same_frame_extended(@1273)
    full_frame(@1352,{Object[#2],Object[#49],Object[#327],Object[#329],Object[#55],Object[#100],Object[#97],Object[#142],Object[#186],Object[#194],Object[#100]},{Uninitialized[#1319],Uninitialized[#1319],Object[#142],Object[#100]})
    same_locals_1_stack_item_frame(@1355,Object[#47])
    same_frame(@1357)
    same_locals_1_stack_item_frame(@1377,Object[#47])
    same_frame(@1411)
    same_frame(@1446)
    append_frame(@1549,Null)
    full_frame(@1605,{Object[#2],Object[#49],Object[#327],Object[#329],Object[#55],Object[#100],Object[#97],Object[#142],Object[#186],Object[#194],Object[#100],Object[#4]},{})
    full_frame(@1648,{Object[#2],Object[#49],Object[#327],Object[#329],Object[#55],Object[#100],Object[#97],Object[#142],Object[#186],Object[#194],Object[#100],Object[#4],Top,Top,Top,Top,Object[#274]},{})
    full_frame(@1768,{Object[#2],Object[#49],Object[#327],Object[#329],Object[#55],Object[#100],Object[#97],Object[#142],Object[#186],Object[#194],Object[#100],Object[#4],Top,Top,Top,Top,Object[#274],Object[#9],Object[#142],Object[#329],Object[#294]},{})
    full_frame(@1789,{Object[#2],Object[#49],Object[#327],Object[#329],Object[#55],Object[#100],Object[#97],Object[#142],Object[#186],Object[#194],Object[#100]},{})

[MASTER] 18:39:27.319 [logback-2] ERROR ClassStateSupport - Could not initialize com.alibaba.fastjson.parser.ParserConfig: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/util/TypeUtils.castToDate(Ljava/lang/Object;Ljava/lang/String;)Ljava/util/Date; @1094: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[3]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @1094
    flags: { }
    locals: { 'java/lang/Object', 'java/lang/String', long, long_2nd, top, top, top, top, 'java/lang/String', 'com/alibaba/fastjson/parser/JSONScanner', top, top, top, 'java/util/Locale', 'java/lang/String' }
    stack: { uninitialized 1086, uninitialized 1086, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 49b8 005c 2ab8 0064 1301 c1b6 0069
    0x0000010: b800 49c7 000b b800 49b8 005c 01b0 b800
    0x0000020: 49b8 005c 2ac1 01c3 b800 6413 01c4 b600
    0x0000030: 69b8 0049 9900 0eb8 0049 b800 5c2a c001
    0x0000040: c3b0 b800 49b8 005c 2ac1 01c6 b800 6413
    0x0000050: 01c7 b600 69b8 0049 9900 11b8 0049 b800
    0x0000060: 5c2a c001 c6b6 01cb b0b8 0049 b800 5c14
    0x0000070: 01cc 41b8 0049 b800 5c2a c100 dab8 0064
    0x0000080: 1301 ceb6 0069 b800 4999 0035 b800 49b8
    0x0000090: 005c 2ac0 00da b801 d141 b800 49b8 005c
    0x00000a0: bb01 c359 20b8 00cd 9900 1237 0458 bb01
    0x00000b0: d359 1604 b701 d6a7 0006 b701 d7b0 b800
    0x00000c0: 49b8 005c 2ac1 00e7 b800 6413 01d8 b600
    0x00000d0: 69b8 0049 9900 5db8 0049 b800 5c2a c000
    0x00000e0: e7b6 0167 41b8 0049 b800 5c13 01da 2bb6
    0x00000f0: 00f7 b800 6413 01db b600 69b8 0049 9900
    0x0000100: 0fb8 0049 b800 5c20 1401 dc69 41b8 0049
    0x0000110: b800 5cbb 01c3 5920 b800 cd99 0012 3706
    0x0000120: 58bb 01d3 5916 06b7 01d6 a700 06b7 01d7
    0x0000130: b0b8 0049 b800 5c2a c100 d5b8 0064 1301
    0x0000140: deb6 0069 b800 4999 0389 b800 49b8 005c
    0x0000150: 2ac0 00d5 3a08 b800 49b8 005c bb01 e059
    0x0000160: 1908 b701 e13a 09b8 0049 b800 5c19 0903
    0x0000170: b601 e5b8 0064 1301 e6b6 0069 b800 4999
    0x0000180: 0031 b800 49b8 005c 1909 b601 ea3a 0ab8
    0x0000190: 0049 b800 5c19 0ab6 01cb 3a0b b800 49b8
    0x00001a0: 005c 1909 b601 edb8 0049 b800 5c19 0bb0
    0x00001b0: b800 49b8 005c 1909 b601 edb8 0049 b800
    0x00001c0: 5cb8 0064 1301 eeb6 0069 b800 49a7 0023
    0x00001d0: b800 49b8 005c 3a0c 1909 b601 edb8 0049
    0x00001e0: b800 5c19 0c59 1301 1213 01ef b801 17bf
    0x00001f0: b800 49b8 005c 1908 1301 f1b6 01f5 b800
    0x0000200: 6413 01f6 b600 69b8 0049 9900 3019 0813
    0x0000210: 01f8 b601 fbb8 0064 1301 fcb6 0069 b800
    0x0000220: 4999 0019 b800 49b8 005c 1908 1006 1908
    0x0000230: b600 f005 64b6 0200 3a08 b800 49b8 005c
    0x0000240: 1908 102d b601 8eb8 0064 1302 01b6 0069
    0x0000250: b800 499d 0019 1908 102b b601 8eb8 0064
    0x0000260: 1302 02b6 0069 b800 499e 0239 b800 49b8
    0x0000270: 005c 2bb8 0064 1302 03b6 0069 b800 49c7
    0x0000280: 01a6 b800 49b8 005c 1908 b600 f0b2 0208
    0x0000290: b600 f0b8 0064 1302 09b6 0069 b800 499f
    0x00002a0: 0037 1908 b800 49b8 005c b600 f010 16b8
    0x00002b0: 0064 1302 0ab6 0069 b800 49a0 0034 b202
    0x00002c0: 0813 020c b600 f7b8 0064 1302 0db6 0069
    0x00002d0: b800 4999 001c b800 49b8 005c b202 084c
    0x00002e0: b800 6413 020e b600 69b8 0049 a701 39b8
    0x00002f0: 0049 b800 5c19 08b6 00f0 100a b800 6413
    0x0000300: 020f b600 69b8 0049 a000 1cb8 0049 b800
    0x0000310: 5c13 0211 4cb8 0064 1302 12b6 0069 b800
    0x0000320: 49a7 0104 b800 49b8 005c 1908 b600 f013
    0x0000330: 0214 b600 f0b8 0064 1302 15b6 0069 b800
    0x0000340: 49a0 001c b800 49b8 005c 1302 144c b800
    0x0000350: 6413 0216 b600 69b8 0049 a700 cbb8 0049
    0x0000360: b800 5c19 08b6 00f0 101d b800 6413 0217
    0x0000370: b600 69b8 0049 a000 5819 0810 1ab8 0049
    0x0000380: b800 5cb6 0129 103a b800 6413 0218 b600
    0x0000390: 69b8 0049 a000 3a19 0810 1cb8 0049 b800
    0x00003a0: 5cb6 0129 1030 b800 6413 0219 b600 69b8
    0x00003b0: 0049 a000 1cb8 0049 b800 5c13 021b 4cb8
    0x00003c0: 0064 1302 1cb6 0069 b800 49a7 005a b800
    0x00003d0: 49b8 005c 1908 b600 f010 17b8 0064 1302
    0x00003e0: 1db6 0069 b800 49a0 0034 1908 1013 b601
    0x00003f0: 2910 2cb8 0064 1302 1eb6 0069 b800 49a0
    0x0000400: 001c b800 49b8 005c 1302 204c b800 6413
    0x0000410: 0221 b600 69b8 0049 a700 0db8 0049 b800
    0x0000420: 5c13 0223 4cb8 0049 b800 5cbb 0225 592b
    0x0000430: b202 29b8 00cd 9900 163a 0d3a 0e58 bb02
    0x0000440: 2b59 190e 190e b702 2ea7 0006 b702 2f3a
    0x0000450: 0ab8 0049 b800 5c19 0ab2 0233 b602 37b8
    0x0000460: 0049 b800 5c19 0a19 08b6 023b b0b8 0049
    0x0000470: b800 5c3a 0bb8 0049 b800 5cbb 0101 59bb
    0x0000480: 0103 59b7 0104 1302 3db6 010a 1908 b601
    0x0000490: 0ab6 010e b701 1159 1301 1213 01ef b801
    0x00004a0: 17bf b800 49b8 005c 1908 b600 f0b8 0064
    0x00004b0: 1302 3eb6 0069 b800 499a 000b b800 49b8
    0x00004c0: 005c 01b0 b800 49b8 005c 1908 b802 4441
    0x00004d0: b800 49b8 005c 2014 01cc 94b8 0064 1302
    0x00004e0: 45b6 0069 b800 499a 0275 b800 49b8 005c
    0x00004f0: 2ab6 0249 3a08 b800 49b8 005c 1302 4b19
    0x0000500: 08b6 024e b600 f7b8 0064 1302 4fb6 0069
    0x0000510: b800 4999 0100 b800 49b8 005c b202 51b8
    0x0000520: 0064 1302 52b6 0069 b800 49c7 008f b202
    0x0000530: 54b8 0064 1302 55b6 0069 b800 499a 007d
    0x0000540: b800 49b8 005c 1908 1302 5703 bd00 70b6
    0x0000550: 0085 b302 51b8 0049 b800 5c04 b302 54b8
    0x0000560: 0049 b800 5cb8 0064 1302 58b6 0069 b800
    0x0000570: 49a7 0049 b800 49b8 005c 3a09 b800 49b8
    0x0000580: 005c 04b3 0254 b800 49b8 005c b800 6413
    0x0000590: 0259 b600 69b8 0049 a700 22b8 0049 b800
    0x00005a0: 5c3a 0f04 b302 54b8 0049 b800 5c19 0f59
    0x00005b0: 1301 1213 01ef b801 17bf b800 49b8 005c
    0x00005c0: b202 512a 03bd 0004 b600 8e3a 09b8 0049
    0x00005d0: b800 5cb8 0064 1302 5ab6 0069 b800 49a7
    0x00005e0: 0028 b800 49b8 005c 3a0a b800 49b8 005c
    0x00005f0: bb01 0159 1302 5c19 0ab7 025f 5913 0112
    0x0000600: 1301 efb8 0117 bfb8 0049 b800 5c19 09c0
    0x0000610: 01c3 b0b8 0049 b800 5c13 0261 1908 b602
    0x0000620: 4eb6 00f7 b800 6413 0262 b600 69b8 0049
    0x0000630: 9901 00b8 0049 b800 5cb2 0264 b800 6413
    0x0000640: 0265 b600 69b8 0049 c700 8fb2 0267 b800
    0x0000650: 6413 0268 b600 69b8 0049 9a00 7db8 0049
    0x0000660: b800 5c19 0813 0257 03bd 0070 b600 85b3
    0x0000670: 0264 b800 49b8 005c 04b3 0267 b800 49b8
    0x0000680: 005c b800 6413 0269 b600 69b8 0049 a700
    0x0000690: 49b8 0049 b800 5c3a 09b8 0049 b800 5c04
    0x00006a0: b302 67b8 0049 b800 5cb8 0064 1302 6ab6
    0x00006b0: 0069 b800 49a7 0022 b800 49b8 005c 3a10
    0x00006c0: 04b3 0267 b800 49b8 005c 1910 5913 0112
    0x00006d0: 1301 efb8 0117 bfb8 0049 b800 5cb2 0264
    0x00006e0: 2a03 bd00 04b6 008e 3a09 b800 49b8 005c
    0x00006f0: b800 6413 026b b600 69b8 0049 a700 28b8
    0x0000700: 0049 b800 5c3a 0ab8 0049 b800 5cbb 0101
    0x0000710: 5913 026d 190a b702 5f59 1301 1213 01ef
    0x0000720: b801 17bf b800 49b8 005c 1909 c001 c3b0
    0x0000730: b800 49b8 005c bb01 0159 bb01 0359 b701
    0x0000740: 0413 023d b601 0a2a b601 0db6 010e b701
    0x0000750: 1159 1301 1213 01ef b801 17bf b800 49b8
    0x0000760: 005c bb01 c359 20b8 00cd 9900 1237 1158
    0x0000770: bb01 d359 1611 b701 d6a7 0006 b701 d7b0
    0x0000780:                                        
  Exception Handler Table:
    bci [359, 412] => handler: 464
    bci [464, 472] => handler: 464
    bci [1119, 1132] => handler: 1133
    bci [1344, 1365] => handler: 1396
    bci [1344, 1365] => handler: 1435
    bci [1396, 1404] => handler: 1435
    bci [1435, 1443] => handler: 1435
    bci [1466, 1485] => handler: 1506
    bci [1629, 1650] => handler: 1681
    bci [1629, 1650] => handler: 1720
    bci [1681, 1689] => handler: 1720
    bci [1720, 1728] => handler: 1720
    bci [1751, 1770] => handler: 1791
  Stackmap Table:
    same_frame(@30)
    same_frame(@66)
    same_frame(@105)
    full_frame(@186,{Object[#4],Object[#213],Long},{Uninitialized[#160],Uninitialized[#160],Long})
    same_locals_1_stack_item_frame(@189,Object[#451])
    same_frame(@190)
    same_frame_extended(@269)
    full_frame(@301,{Object[#4],Object[#213],Long},{Uninitialized[#275],Uninitialized[#275],Long})
    same_locals_1_stack_item_frame(@304,Object[#451])
    same_frame(@305)
    full_frame(@432,{Object[#4],Object[#213],Long,Top,Top,Top,Top,Object[#213],Object[#480]},{})
    same_locals_1_stack_item_frame(@464,Object[#87])
    same_frame(@496)
    same_frame_extended(@570)
    same_frame(@620)
    same_frame_extended(@726)
    same_frame(@751)
    same_frame(@804)
    same_frame(@861)
    same_frame_extended(@974)
    same_frame_extended(@1051)
    same_frame(@1061)
    full_frame(@1100,{Object[#4],Object[#213],Long,Top,Top,Top,Top,Object[#213],Object[#480]},{Uninitialized[#1067],Uninitialized[#1067],Object[#213],Object[#635]})
    same_locals_1_stack_item_frame(@1103,Object[#549])
    full_frame(@1133,{Object[#4],Object[#213],Long,Top,Top,Top,Top,Object[#213],Object[#480],Object[#549]},{Object[#444]})
    chop_frame(@1186,1)
    same_frame(@1220)
    full_frame(@1232,{Object[#4],Object[#213],Long},{})
    full_frame(@1396,{Object[#4],Object[#213],Long,Top,Top,Top,Top,Object[#112]},{Object[#446]})
    same_locals_1_stack_item_frame(@1435,Object[#87])
    same_frame(@1466)
    same_locals_1_stack_item_frame(@1506,Object[#448])
    append_frame(@1543,Object[#4])
    chop_frame(@1555,1)
    same_locals_1_stack_item_extended(@1681,Object[#446])
    same_locals_1_stack_item_frame(@1720,Object[#87])
    same_frame(@1751)
    same_locals_1_stack_item_frame(@1791,Object[#448])
    append_frame(@1828,Object[#4])
    chop_frame(@1840,1)
    full_frame(@1884,{Object[#4],Object[#213],Long},{})
    full_frame(@1916,{Object[#4],Object[#213],Long},{Uninitialized[#1890],Uninitialized[#1890],Long})
    same_locals_1_stack_item_frame(@1919,Object[#451])

[MASTER] 18:39:27.332 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:27.332 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.global;
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"fruit\":-99,\"\":99,\"color\":\"Red\",\"value\":true,\"value2\":null,\"\":\"1\"}", parserConfig1, 1);
defaultJSONParser1.parseObject((Object) parserConfig1);

[MASTER] 18:39:27.332 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:28.069 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:28.070 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Dimension dimension1 = new Dimension();
JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("{\"\":16,\"{\"creae asm serialize error, verson 1.2.68, class \":\"a stYing\",\"com.alibaba.fastjson.serializer.ArraySerializer\":{},\"expect ':' at \":true,\"..\":true,\", pos \":false,\"\":false}\":{},\"$\":{},\"xx\":false}");
ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(dimension1, jSONReaderScanner1, parserConfig1);
DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(jSONReaderScanner1, parserConfig1);
defaultJSONParser2.acceptType("fastjson.parser.deny.internal");

[MASTER] 18:39:28.070 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:28.425 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:28.425 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.global;
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{}", parserConfig1, 1);
TreeMap<Timestamp, BigInteger> treeMap1 = new TreeMap<Timestamp, BigInteger>();
MockDate mockDate1 = new MockDate(2, 1, 1, (-4678), 0, 35);
defaultJSONParser1.parseObject((Map) treeMap1, (Object) mockDate1);
Object object1 = defaultJSONParser1.getObject("fastjson.parser.safeMode");
assertEquals(0, defaultJSONParser1.resolveStatus);
assertNull(object1);


[MASTER] 18:39:28.425 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:28.773 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:28.773 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.global;
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"\":null,\"syntax error\":\"a string\",\"object key level > 512\":-99,\";Ljava/lang/String;Ljava/lang/Object;)V\":\"a string\"}", parserConfig1, 1);
DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(defaultJSONParser1, defaultJSONParser1.lexer, parserConfig1);
Class<Byte> class1 = Byte.TYPE;
DefaultJSONParser defaultJSONParser3 = new DefaultJSONParser(defaultJSONParser1.lexer);
DefaultJSONParser defaultJSONParser4 = new DefaultJSONParser(class1, defaultJSONParser2.lexer, parserConfig1);
defaultJSONParser1.parseObject();
assertEquals(0, defaultJSONParser1.resolveStatus);


[MASTER] 18:39:28.773 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:29.224 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/parser/DefaultJSONParser.getDateFormat()Ljava/text/DateFormat; @63: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[4]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @63
    flags: { }
    locals: { 'com/alibaba/fastjson/parser/DefaultJSONParser', 'java/util/Locale', 'java/lang/String' }
    stack: { 'com/alibaba/fastjson/parser/DefaultJSONParser', uninitialized 57, uninitialized 57, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 3fb8 0044 2ab4 004c b800 5212 53b6
    0x0000010: 0057 b800 3fc7 004c b800 3fb8 0044 2abb
    0x0000020: 0059 592a b400 462a b400 5bb9 0061 0100
    0x0000030: b800 6799 0012 4c4d 58bb 0069 592c 2cb7
    0x0000040: 006d a700 06b7 006e b500 4cb8 003f b800
    0x0000050: 442a b400 4c2a b400 5bb9 0072 0100 b600
    0x0000060: 78b8 003f b800 442a b400 4cb0          
  Stackmap Table:
    full_frame(@69,{Object[#2]},{Object[#2],Uninitialized[#31],Uninitialized[#31],Object[#122],Object[#124]})
    full_frame(@72,{Object[#2]},{Object[#2],Object[#89]})
    same_frame(@97)

[MASTER] 18:39:29.224 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"\":-99,\"syntax error\":99,\"syntax error, expect \":false,\"obfect key level > 512\":true,\"com.alibaba.fastjson.serializer.SerializeWriter\":-99,\"x\":-99}");
JSONObject jSONObject1 = defaultJSONParser1.parseObject();
assertFalse(jSONObject1.isEmpty());


[MASTER] 18:39:29.224 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:29.593 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:29.593 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.global;
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("[G&VFhQRI", parserConfig1, 0);
defaultJSONParser1.parse((PropertyProcessable) null, (Object) "[G&VFhQRI");

[MASTER] 18:39:29.593 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:30.004 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:30.005 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONScanner jSONScanner1 = new JSONScanner("[\"a string\",99,99,true,[],true]", (-2050));
ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
ParserConfig parserConfig1 = new ParserConfig(classLoader1);
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(classLoader1, jSONScanner1, parserConfig1);
Object object1 = defaultJSONParser1.parseKey();
assertNotNull(object1);


[MASTER] 18:39:30.005 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:30.472 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/parser/DefaultJSONParser.getDateFormat()Ljava/text/DateFormat; @63: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[4]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @63
    flags: { }
    locals: { 'com/alibaba/fastjson/parser/DefaultJSONParser', 'java/util/Locale', 'java/lang/String' }
    stack: { 'com/alibaba/fastjson/parser/DefaultJSONParser', uninitialized 57, uninitialized 57, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 3fb8 0044 2ab4 004c b800 5212 53b6
    0x0000010: 0057 b800 3fc7 004c b800 3fb8 0044 2abb
    0x0000020: 0059 592a b400 462a b400 5bb9 0061 0100
    0x0000030: b800 6799 0012 4c4d 58bb 0069 592c 2cb7
    0x0000040: 006d a700 06b7 006e b500 4cb8 003f b800
    0x0000050: 442a b400 4c2a b400 5bb9 0072 0100 b600
    0x0000060: 78b8 003f b800 442a b400 4cb0          
  Stackmap Table:
    full_frame(@69,{Object[#2]},{Object[#2],Uninitialized[#31],Uninitialized[#31],Object[#122],Object[#124]})
    full_frame(@72,{Object[#2]},{Object[#2],Object[#89]})
    same_frame(@97)

[MASTER] 18:39:30.472 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("aD[>|2Y>Q{R.&C");
defaultJSONParser1.getResolveTaskList();
List<DefaultJSONParser.ResolveTask> list1 = defaultJSONParser1.getResolveTaskList();
assertNotNull(list1);
assertEquals(0, defaultJSONParser1.resolveStatus);


[MASTER] 18:39:30.472 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:30.851 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:30.852 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(" ~!`d", parserConfig1);
ParseContext parseContext1 = defaultJSONParser1.setContext((Object) parserConfig1, (Object) null);
assertNotNull(parseContext1);

List<DefaultJSONParser.ResolveTask> list1 = defaultJSONParser1.getResolveTaskList();
assertNotNull(list1);

DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask1 = new DefaultJSONParser.ResolveTask(parseContext1, (String) null);
defaultJSONParser1.addResolveTask(defaultJSONParser_ResolveTask1);
assertEquals(0, defaultJSONParser1.resolveStatus);


[MASTER] 18:39:30.852 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:30.871 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_232_1590165570852/com/alibaba/fastjson/parser/DefaultJSONParser_232_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_232_1590165570852/com/alibaba/fastjson/parser/DefaultJSONParser_232_tmp__ESTest_scaffolding.java]]
[MASTER] 18:39:30.871 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:30.871 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:30.874 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  cannot find symbol
   symbol:   variable parserConfig1
   location:  class com.alibaba.fastjson.parser.DefaultJSONParser_232_tmp__ESTest: 24
[MASTER] 18:39:30.875 [logback-1] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 18:39:30.875 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_232_1590165570852/com/alibaba/fastjson/parser/DefaultJSONParser_232_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 16:39:30 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson.parser;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.alibaba.fastjson.parser.DefaultJSONParser;
11: import com.alibaba.fastjson.parser.ParserConfig;
12: import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
13: import java.util.List;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
19: public class DefaultJSONParser_232_tmp__ESTest extends DefaultJSONParser_232_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       ParserConfig.getGlobalInstance();
24:       DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("false", parserConfig1);
25:       List<ExtraProcessor> list1 = defaultJSONParser1.getExtraProcessors();
26:       assertEquals(0, defaultJSONParser1.resolveStatus);
27:       assertNotNull(list1);
28:   }
29: }
RegularFileObject[/tmp/EvoSuite_232_1590165570852/com/alibaba/fastjson/parser/DefaultJSONParser_232_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 16:39:30 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson.parser;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class DefaultJSONParser_232_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.parser.DefaultJSONParser"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultJSONParser_232_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.serializer.AwtCodec",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
90:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
91:       "com.alibaba.fastjson.serializer.JSONSerializable",
92:       "com.alibaba.fastjson.serializer.SerializeWriter",
93:       "com.alibaba.fastjson.serializer.ReferenceCodec",
94:       "com.alibaba.fastjson.JSONException",
95:       "com.alibaba.fastjson.asm.TypeCollector$1",
96:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
97:       "com.alibaba.fastjson.serializer.ToStringSerializer",
98:       "com.alibaba.fastjson.serializer.SerialContext",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.serializer.ObjectSerializer",
103:       "com.alibaba.fastjson.serializer.MapSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
106:       "com.alibaba.fastjson.serializer.DateCodec",
107:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
114:       "com.alibaba.fastjson.util.FieldInfo",
115:       "com.alibaba.fastjson.serializer.PropertyFilter",
116:       "com.alibaba.fastjson.annotation.JSONField",
117:       "com.alibaba.fastjson.parser.SymbolTable",
118:       "com.alibaba.fastjson.serializer.NameFilter",
119:       "com.alibaba.fastjson.serializer.ListSerializer",
120:       "com.alibaba.fastjson.JSONArray",
121:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
122:       "com.alibaba.fastjson.JSONAware",
123:       "com.alibaba.fastjson.serializer.LongCodec",
124:       "com.alibaba.fastjson.util.ASMClassLoader",
125:       "com.alibaba.fastjson.PropertyNamingStrategy",
126:       "com.alibaba.fastjson.parser.JSONToken",
127:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
128:       "com.alibaba.fastjson.serializer.AppendableSerializer",
129:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
130:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
131:       "com.alibaba.fastjson.serializer.ContextValueFilter",
132:       "com.alibaba.fastjson.util.ServiceLoader",
133:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
134:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
135:       "com.alibaba.fastjson.parser.DefaultJSONParser",
136:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
137:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
138:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
139:       "com.alibaba.fastjson.serializer.BeanContext",
140:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
141:       "com.alibaba.fastjson.util.IdentityHashMap",
142:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
143:       "com.alibaba.fastjson.JSON",
144:       "com.alibaba.fastjson.serializer.StringCodec",
145:       "com.alibaba.fastjson.serializer.SerializeFilterable",
146:       "com.alibaba.fastjson.JSONWriter",
147:       "com.alibaba.fastjson.asm.Opcodes",
148:       "com.alibaba.fastjson.JSONReader",
149:       "com.alibaba.fastjson.JSONStreamAware",
150:       "com.alibaba.fastjson.asm.MethodWriter",
151:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
152:       "com.alibaba.fastjson.serializer.SerializerFeature",
153:       "com.alibaba.fastjson.TypeReference$1",
154:       "com.alibaba.fastjson.serializer.CalendarCodec",
155:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
156:       "com.alibaba.fastjson.util.IOUtils",
157:       "com.alibaba.fastjson.util.TypeUtils",
158:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
159:       "com.alibaba.fastjson.asm.ClassReader",
160:       "com.alibaba.fastjson.spi.Module",
161:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
162:       "com.alibaba.fastjson.serializer.MiscCodec",
163:       "com.alibaba.fastjson.util.IOUtils$1",
164:       "com.alibaba.fastjson.serializer.IntegerCodec",
165:       "com.alibaba.fastjson.serializer.SerializeFilter",
166:       "com.alibaba.fastjson.JSONPObject",
167:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
168:       "com.alibaba.fastjson.serializer.BeforeFilter",
169:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
170:       "com.alibaba.fastjson.serializer.ArraySerializer",
171:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
172:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
173:       "com.alibaba.fastjson.JSONObject",
174:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
175:       "com.alibaba.fastjson.serializer.CharacterCodec",
176:       "com.alibaba.fastjson.asm.TypeCollector",
177:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
178:       "com.alibaba.fastjson.asm.ByteVector",
179:       "com.alibaba.fastjson.parser.JSONLexer",
180:       "com.alibaba.fastjson.util.ASMClassLoader$1",
181:       "com.alibaba.fastjson.asm.Label",
182:       "com.alibaba.fastjson.asm.FieldWriter",
183:       "com.alibaba.fastjson.serializer.JSONSerializer",
184:       "com.alibaba.fastjson.util.JavaBeanInfo",
185:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
186:       "com.alibaba.fastjson.serializer.SerializeConfig",
187:       "com.alibaba.fastjson.serializer.AtomicCodec",
188:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
189:       "com.alibaba.fastjson.asm.Type",
190:       "com.alibaba.fastjson.serializer.FieldSerializer",
191:       "com.alibaba.fastjson.serializer.FloatCodec",
192:       "com.alibaba.fastjson.parser.JSONReaderScanner",
193:       "com.alibaba.fastjson.serializer.ValueFilter",
194:       "com.alibaba.fastjson.JSONPathException",
195:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
196:       "com.alibaba.fastjson.serializer.Labels",
197:       "com.alibaba.fastjson.serializer.CollectionCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
199:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
200:       "com.alibaba.fastjson.serializer.CharArrayCodec",
201:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
202:       "com.alibaba.fastjson.asm.MethodVisitor",
203:       "com.alibaba.fastjson.annotation.JSONCreator",
204:       "com.alibaba.fastjson.asm.MethodCollector",
205:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
206:       "com.alibaba.fastjson.annotation.JSONType",
207:       "com.alibaba.fastjson.serializer.LabelFilter",
208:       "com.alibaba.fastjson.util.UTF8Decoder",
209:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
210:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
211:       "com.alibaba.fastjson.serializer.DoubleSerializer",
212:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
213:       "com.alibaba.fastjson.serializer.BooleanCodec",
214:       "com.alibaba.fastjson.parser.ParserConfig",
215:       "com.alibaba.fastjson.parser.ParseContext",
216:       "com.alibaba.fastjson.parser.Feature",
217:       "com.alibaba.fastjson.serializer.PropertyPreFilter"
218:     );
219:   } 
220: 
221:   private static void resetClasses() {
222:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DefaultJSONParser_232_tmp__ESTest_scaffolding.class.getClassLoader()); 
223: 
224:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
225:       "com.alibaba.fastjson.parser.DefaultJSONParser",
226:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
227:       "com.alibaba.fastjson.util.IOUtils$1",
228:       "com.alibaba.fastjson.util.IOUtils",
229:       "com.alibaba.fastjson.util.IdentityHashMap",
230:       "com.alibaba.fastjson.util.ASMUtils",
231:       "com.alibaba.fastjson.parser.SymbolTable",
232:       "com.alibaba.fastjson.parser.Feature",
233:       "com.alibaba.fastjson.serializer.SerializerFeature",
234:       "com.alibaba.fastjson.JSON",
235:       "com.alibaba.fastjson.util.TypeUtils",
236:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
237:       "com.alibaba.fastjson.util.ASMClassLoader$1",
238:       "com.alibaba.fastjson.util.ASMClassLoader",
239:       "com.alibaba.fastjson.serializer.MiscCodec",
240:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
241:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
242:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
243:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
244:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
245:       "com.alibaba.fastjson.serializer.DateCodec",
246:       "com.alibaba.fastjson.serializer.CalendarCodec",
247:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
248:       "com.alibaba.fastjson.serializer.CollectionCodec",
249:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
250:       "com.alibaba.fastjson.serializer.StringCodec",
251:       "com.alibaba.fastjson.serializer.CharacterCodec",
252:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
253:       "com.alibaba.fastjson.serializer.IntegerCodec",
254:       "com.alibaba.fastjson.serializer.LongCodec",
255:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
256:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
257:       "com.alibaba.fastjson.serializer.FloatCodec",
258:       "com.alibaba.fastjson.serializer.BooleanCodec",
259:       "com.alibaba.fastjson.serializer.CharArrayCodec",
260:       "com.alibaba.fastjson.serializer.ReferenceCodec",
261:       "com.alibaba.fastjson.serializer.AtomicCodec",
262:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
263:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
264:       "com.alibaba.fastjson.parser.ParserConfig",
265:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
266:       "com.alibaba.fastjson.serializer.DoubleSerializer",
267:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
268:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
269:       "com.alibaba.fastjson.serializer.AppendableSerializer",
270:       "com.alibaba.fastjson.serializer.ToStringSerializer",
271:       "com.alibaba.fastjson.serializer.SerializeConfig",
272:       "com.alibaba.fastjson.JSONPath",
273:       "com.alibaba.fastjson.parser.JSONLexerBase",
274:       "com.alibaba.fastjson.parser.JSONReaderScanner",
275:       "com.alibaba.fastjson.JSONException",
276:       "com.alibaba.fastjson.parser.JSONToken",
277:       "com.alibaba.fastjson.parser.JSONScanner",
278:       "com.alibaba.fastjson.util.ServiceLoader",
279:       "com.alibaba.fastjson.util.JavaBeanInfo",
280:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
281:       "com.alibaba.fastjson.util.FieldInfo",
282:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
283:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
284:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
285:       "com.alibaba.fastjson.parser.ParseContext",
286:       "com.alibaba.fastjson.asm.ClassReader",
287:       "com.alibaba.fastjson.asm.TypeCollector$1",
288:       "com.alibaba.fastjson.asm.TypeCollector",
289:       "com.alibaba.fastjson.asm.Type",
290:       "com.alibaba.fastjson.asm.MethodCollector",
291:       "com.alibaba.fastjson.JSONObject",
292:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
293:       "com.alibaba.fastjson.JSONArray",
294:       "com.alibaba.fastjson.asm.ClassWriter",
295:       "com.alibaba.fastjson.asm.ByteVector",
296:       "com.alibaba.fastjson.asm.Item",
297:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
298:       "com.alibaba.fastjson.asm.FieldWriter",
299:       "com.alibaba.fastjson.asm.MethodWriter",
300:       "com.alibaba.fastjson.asm.Label",
301:       "com.alibaba.fastjson.serializer.SerializeWriter",
302:       "com.alibaba.fastjson.serializer.SerializeFilterable",
303:       "com.alibaba.fastjson.serializer.JSONSerializer",
304:       "com.alibaba.fastjson.serializer.MapSerializer",
305:       "com.alibaba.fastjson.serializer.SerialContext",
306:       "com.alibaba.fastjson.serializer.ListSerializer",
307:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
308:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
309:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
315:       "com.alibaba.fastjson.serializer.AwtCodec",
316:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
317:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
318:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.serializer.ArraySerializer",
321:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
322:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
323:       "com.alibaba.fastjson.PropertyNamingStrategy"
324:     );
325:   }
326: }

[MASTER] 18:39:31.205 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:31.206 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.global;
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"create asm serializer error, verson 1.2.68, class \":false,\"com.alibaba.fastjson.serializer.ArraySerializer\":{\"%Z.tB'P.4k`?oU<\":{}},\"..\":true,\", pos \":true,\"\":false}", parserConfig1);
defaultJSONParser1.getExtraTypeProviders();
List<ExtraTypeProvider> list1 = defaultJSONParser1.getExtraTypeProviders();
assertNotNull(list1);
assertEquals(0, defaultJSONParser1.resolveStatus);


[MASTER] 18:39:31.206 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:31.543 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/parser/DefaultJSONParser.getDateFormat()Ljava/text/DateFormat; @63: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[4]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @63
    flags: { }
    locals: { 'com/alibaba/fastjson/parser/DefaultJSONParser', 'java/util/Locale', 'java/lang/String' }
    stack: { 'com/alibaba/fastjson/parser/DefaultJSONParser', uninitialized 57, uninitialized 57, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 3fb8 0044 2ab4 004c b800 5212 53b6
    0x0000010: 0057 b800 3fc7 004c b800 3fb8 0044 2abb
    0x0000020: 0059 592a b400 462a b400 5bb9 0061 0100
    0x0000030: b800 6799 0012 4c4d 58bb 0069 592c 2cb7
    0x0000040: 006d a700 06b7 006e b500 4cb8 003f b800
    0x0000050: 442a b400 4c2a b400 5bb9 0072 0100 b600
    0x0000060: 78b8 003f b800 442a b400 4cb0          
  Stackmap Table:
    full_frame(@69,{Object[#2]},{Object[#2],Uninitialized[#31],Uninitialized[#31],Object[#122],Object[#124]})
    full_frame(@72,{Object[#2]},{Object[#2],Object[#89]})
    same_frame(@97)

[MASTER] 18:39:31.543 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask");
defaultJSONParser1.popContext();

[MASTER] 18:39:31.544 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:31.888 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/parser/DefaultJSONParser.getDateFormat()Ljava/text/DateFormat; @63: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[4]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @63
    flags: { }
    locals: { 'com/alibaba/fastjson/parser/DefaultJSONParser', 'java/util/Locale', 'java/lang/String' }
    stack: { 'com/alibaba/fastjson/parser/DefaultJSONParser', uninitialized 57, uninitialized 57, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 3fb8 0044 2ab4 004c b800 5212 53b6
    0x0000010: 0057 b800 3fc7 004c b800 3fb8 0044 2abb
    0x0000020: 0059 592a b400 462a b400 5bb9 0061 0100
    0x0000030: b800 6799 0012 4c4d 58bb 0069 592c 2cb7
    0x0000040: 006d a700 06b7 006e b500 4cb8 003f b800
    0x0000050: 442a b400 4c2a b400 5bb9 0072 0100 b600
    0x0000060: 78b8 003f b800 442a b400 4cb0          
  Stackmap Table:
    full_frame(@69,{Object[#2]},{Object[#2],Uninitialized[#31],Uninitialized[#31],Object[#122],Object[#124]})
    full_frame(@72,{Object[#2]},{Object[#2],Object[#89]})
    same_frame(@97)

[MASTER] 18:39:31.888 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONScanner jSONScanner1 = new JSONScanner("false", (-2044));
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONScanner1);
defaultJSONParser1.popContext();
assertEquals(0, defaultJSONParser1.resolveStatus);


[MASTER] 18:39:31.888 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:32.284 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:32.284 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.global;
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"\":[true,99],\"syntax error\":{\"$.T\":\"a string\",\"$.create asm serializer error, verson 1.2.68, class \":[],\"null\":[]},\";Ljava/lang/Object;C)C\":[[],\"a string\"],\"$.create asm serializer error, verson 1.2.68, class \":99,\"java.util.Collections$EmptyMap\":-99}");
Dimension dimension1 = new Dimension(3059, 3059);
defaultJSONParser1.setContext((Object) parserConfig1, (Object) dimension1);
Hashtable<MockDate, JobAttributes> hashtable1 = new Hashtable<MockDate, JobAttributes>();
defaultJSONParser1.parseObject((Map) hashtable1);
assertEquals(5, hashtable1.size());
assertFalse(hashtable1.isEmpty());


[MASTER] 18:39:32.284 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:32.306 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_237_1590165572286/com/alibaba/fastjson/parser/DefaultJSONParser_237_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_237_1590165572286/com/alibaba/fastjson/parser/DefaultJSONParser_237_tmp__ESTest_scaffolding.java]]
[MASTER] 18:39:32.306 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:32.306 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:32.306 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  cannot find symbol
   symbol:   variable classLoader1
   location:  class com.alibaba.fastjson.parser.DefaultJSONParser_237_tmp__ESTest: 23
[MASTER] 18:39:32.307 [logback-1] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 18:39:32.307 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_237_1590165572286/com/alibaba/fastjson/parser/DefaultJSONParser_237_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 16:39:32 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson.parser;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.alibaba.fastjson.parser.DefaultJSONParser;
11: import com.alibaba.fastjson.parser.ParserConfig;
12: import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
18: public class DefaultJSONParser_237_tmp__ESTest extends DefaultJSONParser_237_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       ClassLoader.getSystemClassLoader();
23:       ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
24:       ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory1);
25:       DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("ST?T{ix\"_ *%/7Ow6S", parserConfig1);
26:       defaultJSONParser1.parseKey();
27:       assertEquals(0, defaultJSONParser1.resolveStatus);
28:   }
29: }
RegularFileObject[/tmp/EvoSuite_237_1590165572286/com/alibaba/fastjson/parser/DefaultJSONParser_237_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 16:39:32 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson.parser;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class DefaultJSONParser_237_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.parser.DefaultJSONParser"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultJSONParser_237_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.serializer.AwtCodec",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
90:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
91:       "com.alibaba.fastjson.serializer.JSONSerializable",
92:       "com.alibaba.fastjson.serializer.SerializeWriter",
93:       "com.alibaba.fastjson.serializer.ReferenceCodec",
94:       "com.alibaba.fastjson.JSONException",
95:       "com.alibaba.fastjson.asm.TypeCollector$1",
96:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
97:       "com.alibaba.fastjson.serializer.ToStringSerializer",
98:       "com.alibaba.fastjson.serializer.SerialContext",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.serializer.ObjectSerializer",
103:       "com.alibaba.fastjson.serializer.MapSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
106:       "com.alibaba.fastjson.serializer.DateCodec",
107:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
114:       "com.alibaba.fastjson.util.FieldInfo",
115:       "com.alibaba.fastjson.serializer.PropertyFilter",
116:       "com.alibaba.fastjson.annotation.JSONField",
117:       "com.alibaba.fastjson.parser.SymbolTable",
118:       "com.alibaba.fastjson.serializer.NameFilter",
119:       "com.alibaba.fastjson.serializer.ListSerializer",
120:       "com.alibaba.fastjson.JSONArray",
121:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
122:       "com.alibaba.fastjson.JSONAware",
123:       "com.alibaba.fastjson.serializer.LongCodec",
124:       "com.alibaba.fastjson.util.ASMClassLoader",
125:       "com.alibaba.fastjson.PropertyNamingStrategy",
126:       "com.alibaba.fastjson.parser.JSONToken",
127:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
128:       "com.alibaba.fastjson.serializer.AppendableSerializer",
129:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
130:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
131:       "com.alibaba.fastjson.serializer.ContextValueFilter",
132:       "com.alibaba.fastjson.util.ServiceLoader",
133:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
134:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
135:       "com.alibaba.fastjson.parser.DefaultJSONParser",
136:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
137:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
138:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
139:       "com.alibaba.fastjson.serializer.BeanContext",
140:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
141:       "com.alibaba.fastjson.util.IdentityHashMap",
142:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
143:       "com.alibaba.fastjson.JSON",
144:       "com.alibaba.fastjson.serializer.StringCodec",
145:       "com.alibaba.fastjson.serializer.SerializeFilterable",
146:       "com.alibaba.fastjson.JSONWriter",
147:       "com.alibaba.fastjson.asm.Opcodes",
148:       "com.alibaba.fastjson.JSONReader",
149:       "com.alibaba.fastjson.JSONStreamAware",
150:       "com.alibaba.fastjson.asm.MethodWriter",
151:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
152:       "com.alibaba.fastjson.serializer.SerializerFeature",
153:       "com.alibaba.fastjson.TypeReference$1",
154:       "com.alibaba.fastjson.serializer.CalendarCodec",
155:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
156:       "com.alibaba.fastjson.util.IOUtils",
157:       "com.alibaba.fastjson.util.TypeUtils",
158:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
159:       "com.alibaba.fastjson.asm.ClassReader",
160:       "com.alibaba.fastjson.spi.Module",
161:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
162:       "com.alibaba.fastjson.serializer.MiscCodec",
163:       "com.alibaba.fastjson.util.IOUtils$1",
164:       "com.alibaba.fastjson.serializer.IntegerCodec",
165:       "com.alibaba.fastjson.serializer.SerializeFilter",
166:       "com.alibaba.fastjson.JSONPObject",
167:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
168:       "com.alibaba.fastjson.serializer.BeforeFilter",
169:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
170:       "com.alibaba.fastjson.serializer.ArraySerializer",
171:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
172:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
173:       "com.alibaba.fastjson.JSONObject",
174:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
175:       "com.alibaba.fastjson.serializer.CharacterCodec",
176:       "com.alibaba.fastjson.asm.TypeCollector",
177:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
178:       "com.alibaba.fastjson.asm.ByteVector",
179:       "com.alibaba.fastjson.parser.JSONLexer",
180:       "com.alibaba.fastjson.util.ASMClassLoader$1",
181:       "com.alibaba.fastjson.asm.Label",
182:       "com.alibaba.fastjson.asm.FieldWriter",
183:       "com.alibaba.fastjson.serializer.JSONSerializer",
184:       "com.alibaba.fastjson.util.JavaBeanInfo",
185:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
186:       "com.alibaba.fastjson.serializer.SerializeConfig",
187:       "com.alibaba.fastjson.serializer.AtomicCodec",
188:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
189:       "com.alibaba.fastjson.asm.Type",
190:       "com.alibaba.fastjson.serializer.FieldSerializer",
191:       "com.alibaba.fastjson.serializer.FloatCodec",
192:       "com.alibaba.fastjson.parser.JSONReaderScanner",
193:       "com.alibaba.fastjson.serializer.ValueFilter",
194:       "com.alibaba.fastjson.JSONPathException",
195:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
196:       "com.alibaba.fastjson.serializer.Labels",
197:       "com.alibaba.fastjson.serializer.CollectionCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
199:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
200:       "com.alibaba.fastjson.serializer.CharArrayCodec",
201:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
202:       "com.alibaba.fastjson.asm.MethodVisitor",
203:       "com.alibaba.fastjson.annotation.JSONCreator",
204:       "com.alibaba.fastjson.asm.MethodCollector",
205:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
206:       "com.alibaba.fastjson.annotation.JSONType",
207:       "com.alibaba.fastjson.serializer.LabelFilter",
208:       "com.alibaba.fastjson.util.UTF8Decoder",
209:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
210:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
211:       "com.alibaba.fastjson.serializer.DoubleSerializer",
212:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
213:       "com.alibaba.fastjson.serializer.BooleanCodec",
214:       "com.alibaba.fastjson.parser.ParserConfig",
215:       "com.alibaba.fastjson.parser.ParseContext",
216:       "com.alibaba.fastjson.parser.Feature",
217:       "com.alibaba.fastjson.serializer.PropertyPreFilter"
218:     );
219:   } 
220: 
221:   private static void resetClasses() {
222:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DefaultJSONParser_237_tmp__ESTest_scaffolding.class.getClassLoader()); 
223: 
224:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
225:       "com.alibaba.fastjson.parser.DefaultJSONParser",
226:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
227:       "com.alibaba.fastjson.util.IOUtils$1",
228:       "com.alibaba.fastjson.util.IOUtils",
229:       "com.alibaba.fastjson.util.IdentityHashMap",
230:       "com.alibaba.fastjson.util.ASMUtils",
231:       "com.alibaba.fastjson.parser.SymbolTable",
232:       "com.alibaba.fastjson.parser.Feature",
233:       "com.alibaba.fastjson.serializer.SerializerFeature",
234:       "com.alibaba.fastjson.JSON",
235:       "com.alibaba.fastjson.util.TypeUtils",
236:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
237:       "com.alibaba.fastjson.util.ASMClassLoader$1",
238:       "com.alibaba.fastjson.util.ASMClassLoader",
239:       "com.alibaba.fastjson.serializer.MiscCodec",
240:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
241:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
242:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
243:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
244:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
245:       "com.alibaba.fastjson.serializer.DateCodec",
246:       "com.alibaba.fastjson.serializer.CalendarCodec",
247:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
248:       "com.alibaba.fastjson.serializer.CollectionCodec",
249:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
250:       "com.alibaba.fastjson.serializer.StringCodec",
251:       "com.alibaba.fastjson.serializer.CharacterCodec",
252:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
253:       "com.alibaba.fastjson.serializer.IntegerCodec",
254:       "com.alibaba.fastjson.serializer.LongCodec",
255:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
256:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
257:       "com.alibaba.fastjson.serializer.FloatCodec",
258:       "com.alibaba.fastjson.serializer.BooleanCodec",
259:       "com.alibaba.fastjson.serializer.CharArrayCodec",
260:       "com.alibaba.fastjson.serializer.ReferenceCodec",
261:       "com.alibaba.fastjson.serializer.AtomicCodec",
262:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
263:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
264:       "com.alibaba.fastjson.parser.ParserConfig",
265:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
266:       "com.alibaba.fastjson.serializer.DoubleSerializer",
267:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
268:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
269:       "com.alibaba.fastjson.serializer.AppendableSerializer",
270:       "com.alibaba.fastjson.serializer.ToStringSerializer",
271:       "com.alibaba.fastjson.serializer.SerializeConfig",
272:       "com.alibaba.fastjson.JSONPath",
273:       "com.alibaba.fastjson.parser.JSONLexerBase",
274:       "com.alibaba.fastjson.parser.JSONReaderScanner",
275:       "com.alibaba.fastjson.JSONException",
276:       "com.alibaba.fastjson.parser.JSONToken",
277:       "com.alibaba.fastjson.parser.JSONScanner",
278:       "com.alibaba.fastjson.util.ServiceLoader",
279:       "com.alibaba.fastjson.util.JavaBeanInfo",
280:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
281:       "com.alibaba.fastjson.util.FieldInfo",
282:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
283:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
284:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
285:       "com.alibaba.fastjson.parser.ParseContext",
286:       "com.alibaba.fastjson.asm.ClassReader",
287:       "com.alibaba.fastjson.asm.TypeCollector$1",
288:       "com.alibaba.fastjson.asm.TypeCollector",
289:       "com.alibaba.fastjson.asm.Type",
290:       "com.alibaba.fastjson.asm.MethodCollector",
291:       "com.alibaba.fastjson.JSONObject",
292:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
293:       "com.alibaba.fastjson.JSONArray",
294:       "com.alibaba.fastjson.asm.ClassWriter",
295:       "com.alibaba.fastjson.asm.ByteVector",
296:       "com.alibaba.fastjson.asm.Item",
297:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
298:       "com.alibaba.fastjson.asm.FieldWriter",
299:       "com.alibaba.fastjson.asm.MethodWriter",
300:       "com.alibaba.fastjson.asm.Label",
301:       "com.alibaba.fastjson.serializer.SerializeWriter",
302:       "com.alibaba.fastjson.serializer.SerializeFilterable",
303:       "com.alibaba.fastjson.serializer.JSONSerializer",
304:       "com.alibaba.fastjson.serializer.MapSerializer",
305:       "com.alibaba.fastjson.serializer.SerialContext",
306:       "com.alibaba.fastjson.serializer.ListSerializer",
307:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
308:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
309:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
315:       "com.alibaba.fastjson.serializer.AwtCodec",
316:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
317:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
318:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.serializer.ArraySerializer",
321:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
322:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
323:       "com.alibaba.fastjson.PropertyNamingStrategy"
324:     );
325:   }
326: }

[MASTER] 18:39:32.312 [logback-2] ERROR JUnitAnalyzer - java.lang.IndexOutOfBoundsException: Index: 1, Size: 1
java.lang.IndexOutOfBoundsException: Index: 1, Size: 1
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[na:1.8.0_161]
	at java.util.ArrayList.get(ArrayList.java:433) ~[na:1.8.0_161]
	at org.evosuite.utils.ListenableList.get(ListenableList.java:175) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.testcase.DefaultTestCase.hasReferences(DefaultTestCase.java:856) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.testcase.TestCodeVisitor.visitMethodStatement(TestCodeVisitor.java:1413) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.testcase.TestVisitor.visitStatement(TestVisitor.java:147) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.testcase.TestCodeVisitor.visitStatement(TestCodeVisitor.java:1858) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.testcase.DefaultTestCase.accept(DefaultTestCase.java:114) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.junit.writer.TestSuiteWriter.getImports(TestSuiteWriter.java:417) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.junit.writer.TestSuiteWriter.getHeader(TestSuiteWriter.java:536) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.junit.writer.TestSuiteWriter.getUnitTestsAllInSameFile(TestSuiteWriter.java:330) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.junit.writer.TestSuiteWriter.writeTestSuite(TestSuiteWriter.java:246) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.junit.JUnitAnalyzer.compileTests(JUnitAnalyzer.java:355) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.junit.JUnitAnalyzer.handleTestsThatAreUnstable(JUnitAnalyzer.java:154) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.compileAndCheckTests(TestSuiteGenerator.java:622) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:559) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:255) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:155) [evosuite.jar:1.0.7-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
[MASTER] 18:39:32.656 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/parser/DefaultJSONParser.getDateFormat()Ljava/text/DateFormat; @63: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[4]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @63
    flags: { }
    locals: { 'com/alibaba/fastjson/parser/DefaultJSONParser', 'java/util/Locale', 'java/lang/String' }
    stack: { 'com/alibaba/fastjson/parser/DefaultJSONParser', uninitialized 57, uninitialized 57, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 3fb8 0044 2ab4 004c b800 5212 53b6
    0x0000010: 0057 b800 3fc7 004c b800 3fb8 0044 2abb
    0x0000020: 0059 592a b400 462a b400 5bb9 0061 0100
    0x0000030: b800 6799 0012 4c4d 58bb 0069 592c 2cb7
    0x0000040: 006d a700 06b7 006e b500 4cb8 003f b800
    0x0000050: 442a b400 4c2a b400 5bb9 0072 0100 b600
    0x0000060: 78b8 003f b800 442a b400 4cb0          
  Stackmap Table:
    full_frame(@69,{Object[#2]},{Object[#2],Uninitialized[#31],Uninitialized[#31],Object[#122],Object[#124]})
    full_frame(@72,{Object[#2]},{Object[#2],Object[#89]})
    same_frame(@97)

[MASTER] 18:39:32.656 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("(IyqN*!.=M,uti|1ZqI");
ImageCapabilities imageCapabilities1 = new ImageCapabilities(true);
defaultJSONParser1.parse((Object) imageCapabilities1);

[MASTER] 18:39:32.656 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:33.005 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:33.006 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONScanner jSONScanner1 = new JSONScanner("[{},[],null,true,[]]", (-2050));
ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
ParserConfig parserConfig1 = new ParserConfig(classLoader1);
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(classLoader1, jSONScanner1, parserConfig1);
Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
defaultJSONParser1.parseArray(class1);

[MASTER] 18:39:33.006 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:33.023 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_241_1590165573006/com/alibaba/fastjson/parser/DefaultJSONParser_241_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_241_1590165573006/com/alibaba/fastjson/parser/DefaultJSONParser_241_tmp__ESTest_scaffolding.java]]
[MASTER] 18:39:33.023 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:33.023 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:33.024 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  cannot find symbol
   symbol:   variable parserConfig1
   location:  class com.alibaba.fastjson.parser.DefaultJSONParser_241_tmp__ESTest: 24
[MASTER] 18:39:33.025 [logback-1] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 18:39:33.025 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_241_1590165573006/com/alibaba/fastjson/parser/DefaultJSONParser_241_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 16:39:33 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson.parser;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.alibaba.fastjson.parser.DefaultJSONParser;
12: import com.alibaba.fastjson.parser.ParserConfig;
13: import java.awt.ImageCapabilities;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
19: public class DefaultJSONParser_241_tmp__ESTest extends DefaultJSONParser_241_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       ParserConfig.getGlobalInstance();
24:       DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(", pos ", parserConfig1);
25:       ImageCapabilities imageCapabilities1 = new ImageCapabilities(false);
26:       // Undeclared exception!
27:       try { 
28:         defaultJSONParser1.parse((Object) imageCapabilities1);
29:         fail("Expecting exception: RuntimeException");
30:       
31:       } catch(RuntimeException e) {
32:          //
33:          // syntax error, pos 1, line 1, column 2, pos 
34:          //
35:          verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
36:       }
37:   }
38: }
RegularFileObject[/tmp/EvoSuite_241_1590165573006/com/alibaba/fastjson/parser/DefaultJSONParser_241_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 16:39:33 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson.parser;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class DefaultJSONParser_241_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.parser.DefaultJSONParser"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultJSONParser_241_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.serializer.AwtCodec",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
90:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
91:       "com.alibaba.fastjson.serializer.JSONSerializable",
92:       "com.alibaba.fastjson.serializer.SerializeWriter",
93:       "com.alibaba.fastjson.serializer.ReferenceCodec",
94:       "com.alibaba.fastjson.JSONException",
95:       "com.alibaba.fastjson.asm.TypeCollector$1",
96:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
97:       "com.alibaba.fastjson.serializer.ToStringSerializer",
98:       "com.alibaba.fastjson.serializer.SerialContext",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.serializer.ObjectSerializer",
103:       "com.alibaba.fastjson.serializer.MapSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
106:       "com.alibaba.fastjson.serializer.DateCodec",
107:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
114:       "com.alibaba.fastjson.util.FieldInfo",
115:       "com.alibaba.fastjson.serializer.PropertyFilter",
116:       "com.alibaba.fastjson.annotation.JSONField",
117:       "com.alibaba.fastjson.parser.SymbolTable",
118:       "com.alibaba.fastjson.serializer.NameFilter",
119:       "com.alibaba.fastjson.serializer.ListSerializer",
120:       "com.alibaba.fastjson.JSONArray",
121:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
122:       "com.alibaba.fastjson.JSONAware",
123:       "com.alibaba.fastjson.serializer.LongCodec",
124:       "com.alibaba.fastjson.util.ASMClassLoader",
125:       "com.alibaba.fastjson.PropertyNamingStrategy",
126:       "com.alibaba.fastjson.parser.JSONToken",
127:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
128:       "com.alibaba.fastjson.serializer.AppendableSerializer",
129:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
130:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
131:       "com.alibaba.fastjson.serializer.ContextValueFilter",
132:       "com.alibaba.fastjson.util.ServiceLoader",
133:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
134:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
135:       "com.alibaba.fastjson.parser.DefaultJSONParser",
136:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
137:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
138:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
139:       "com.alibaba.fastjson.serializer.BeanContext",
140:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
141:       "com.alibaba.fastjson.util.IdentityHashMap",
142:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
143:       "com.alibaba.fastjson.JSON",
144:       "com.alibaba.fastjson.serializer.StringCodec",
145:       "com.alibaba.fastjson.serializer.SerializeFilterable",
146:       "com.alibaba.fastjson.JSONWriter",
147:       "com.alibaba.fastjson.asm.Opcodes",
148:       "com.alibaba.fastjson.JSONReader",
149:       "com.alibaba.fastjson.JSONStreamAware",
150:       "com.alibaba.fastjson.asm.MethodWriter",
151:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
152:       "com.alibaba.fastjson.serializer.SerializerFeature",
153:       "com.alibaba.fastjson.TypeReference$1",
154:       "com.alibaba.fastjson.serializer.CalendarCodec",
155:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
156:       "com.alibaba.fastjson.util.IOUtils",
157:       "com.alibaba.fastjson.util.TypeUtils",
158:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
159:       "com.alibaba.fastjson.asm.ClassReader",
160:       "com.alibaba.fastjson.spi.Module",
161:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
162:       "com.alibaba.fastjson.serializer.MiscCodec",
163:       "com.alibaba.fastjson.util.IOUtils$1",
164:       "com.alibaba.fastjson.serializer.IntegerCodec",
165:       "com.alibaba.fastjson.serializer.SerializeFilter",
166:       "com.alibaba.fastjson.JSONPObject",
167:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
168:       "com.alibaba.fastjson.serializer.BeforeFilter",
169:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
170:       "com.alibaba.fastjson.serializer.ArraySerializer",
171:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
172:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
173:       "com.alibaba.fastjson.JSONObject",
174:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
175:       "com.alibaba.fastjson.serializer.CharacterCodec",
176:       "com.alibaba.fastjson.asm.TypeCollector",
177:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
178:       "com.alibaba.fastjson.asm.ByteVector",
179:       "com.alibaba.fastjson.parser.JSONLexer",
180:       "com.alibaba.fastjson.util.ASMClassLoader$1",
181:       "com.alibaba.fastjson.asm.Label",
182:       "com.alibaba.fastjson.asm.FieldWriter",
183:       "com.alibaba.fastjson.serializer.JSONSerializer",
184:       "com.alibaba.fastjson.util.JavaBeanInfo",
185:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
186:       "com.alibaba.fastjson.serializer.SerializeConfig",
187:       "com.alibaba.fastjson.serializer.AtomicCodec",
188:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
189:       "com.alibaba.fastjson.asm.Type",
190:       "com.alibaba.fastjson.serializer.FieldSerializer",
191:       "com.alibaba.fastjson.serializer.FloatCodec",
192:       "com.alibaba.fastjson.parser.JSONReaderScanner",
193:       "com.alibaba.fastjson.serializer.ValueFilter",
194:       "com.alibaba.fastjson.JSONPathException",
195:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
196:       "com.alibaba.fastjson.serializer.Labels",
197:       "com.alibaba.fastjson.serializer.CollectionCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
199:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
200:       "com.alibaba.fastjson.serializer.CharArrayCodec",
201:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
202:       "com.alibaba.fastjson.asm.MethodVisitor",
203:       "com.alibaba.fastjson.annotation.JSONCreator",
204:       "com.alibaba.fastjson.asm.MethodCollector",
205:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
206:       "com.alibaba.fastjson.annotation.JSONType",
207:       "com.alibaba.fastjson.serializer.LabelFilter",
208:       "com.alibaba.fastjson.util.UTF8Decoder",
209:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
210:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
211:       "com.alibaba.fastjson.serializer.DoubleSerializer",
212:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
213:       "com.alibaba.fastjson.serializer.BooleanCodec",
214:       "com.alibaba.fastjson.parser.ParserConfig",
215:       "com.alibaba.fastjson.parser.ParseContext",
216:       "com.alibaba.fastjson.parser.Feature",
217:       "com.alibaba.fastjson.serializer.PropertyPreFilter"
218:     );
219:   } 
220: 
221:   private static void resetClasses() {
222:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DefaultJSONParser_241_tmp__ESTest_scaffolding.class.getClassLoader()); 
223: 
224:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
225:       "com.alibaba.fastjson.parser.DefaultJSONParser",
226:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
227:       "com.alibaba.fastjson.util.IOUtils$1",
228:       "com.alibaba.fastjson.util.IOUtils",
229:       "com.alibaba.fastjson.util.IdentityHashMap",
230:       "com.alibaba.fastjson.util.ASMUtils",
231:       "com.alibaba.fastjson.parser.SymbolTable",
232:       "com.alibaba.fastjson.parser.Feature",
233:       "com.alibaba.fastjson.serializer.SerializerFeature",
234:       "com.alibaba.fastjson.JSON",
235:       "com.alibaba.fastjson.util.TypeUtils",
236:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
237:       "com.alibaba.fastjson.util.ASMClassLoader$1",
238:       "com.alibaba.fastjson.util.ASMClassLoader",
239:       "com.alibaba.fastjson.serializer.MiscCodec",
240:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
241:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
242:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
243:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
244:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
245:       "com.alibaba.fastjson.serializer.DateCodec",
246:       "com.alibaba.fastjson.serializer.CalendarCodec",
247:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
248:       "com.alibaba.fastjson.serializer.CollectionCodec",
249:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
250:       "com.alibaba.fastjson.serializer.StringCodec",
251:       "com.alibaba.fastjson.serializer.CharacterCodec",
252:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
253:       "com.alibaba.fastjson.serializer.IntegerCodec",
254:       "com.alibaba.fastjson.serializer.LongCodec",
255:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
256:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
257:       "com.alibaba.fastjson.serializer.FloatCodec",
258:       "com.alibaba.fastjson.serializer.BooleanCodec",
259:       "com.alibaba.fastjson.serializer.CharArrayCodec",
260:       "com.alibaba.fastjson.serializer.ReferenceCodec",
261:       "com.alibaba.fastjson.serializer.AtomicCodec",
262:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
263:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
264:       "com.alibaba.fastjson.parser.ParserConfig",
265:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
266:       "com.alibaba.fastjson.serializer.DoubleSerializer",
267:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
268:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
269:       "com.alibaba.fastjson.serializer.AppendableSerializer",
270:       "com.alibaba.fastjson.serializer.ToStringSerializer",
271:       "com.alibaba.fastjson.serializer.SerializeConfig",
272:       "com.alibaba.fastjson.JSONPath",
273:       "com.alibaba.fastjson.parser.JSONLexerBase",
274:       "com.alibaba.fastjson.parser.JSONReaderScanner",
275:       "com.alibaba.fastjson.JSONException",
276:       "com.alibaba.fastjson.parser.JSONToken",
277:       "com.alibaba.fastjson.parser.JSONScanner",
278:       "com.alibaba.fastjson.util.ServiceLoader",
279:       "com.alibaba.fastjson.util.JavaBeanInfo",
280:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
281:       "com.alibaba.fastjson.util.FieldInfo",
282:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
283:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
284:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
285:       "com.alibaba.fastjson.parser.ParseContext",
286:       "com.alibaba.fastjson.asm.ClassReader",
287:       "com.alibaba.fastjson.asm.TypeCollector$1",
288:       "com.alibaba.fastjson.asm.TypeCollector",
289:       "com.alibaba.fastjson.asm.Type",
290:       "com.alibaba.fastjson.asm.MethodCollector",
291:       "com.alibaba.fastjson.JSONObject",
292:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
293:       "com.alibaba.fastjson.JSONArray",
294:       "com.alibaba.fastjson.asm.ClassWriter",
295:       "com.alibaba.fastjson.asm.ByteVector",
296:       "com.alibaba.fastjson.asm.Item",
297:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
298:       "com.alibaba.fastjson.asm.FieldWriter",
299:       "com.alibaba.fastjson.asm.MethodWriter",
300:       "com.alibaba.fastjson.asm.Label",
301:       "com.alibaba.fastjson.serializer.SerializeWriter",
302:       "com.alibaba.fastjson.serializer.SerializeFilterable",
303:       "com.alibaba.fastjson.serializer.JSONSerializer",
304:       "com.alibaba.fastjson.serializer.MapSerializer",
305:       "com.alibaba.fastjson.serializer.SerialContext",
306:       "com.alibaba.fastjson.serializer.ListSerializer",
307:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
308:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
309:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
315:       "com.alibaba.fastjson.serializer.AwtCodec",
316:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
317:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
318:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.serializer.ArraySerializer",
321:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
322:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
323:       "com.alibaba.fastjson.PropertyNamingStrategy"
324:     );
325:   }
326: }

[MASTER] 18:39:33.360 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:33.361 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Dimension dimension1 = new Dimension();
JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("{\"\":16,\"{\"create asm serializer error, verson 1.2.68, class \":\"a string\",\"com.alibaba.fastjson.serializer.ArraySerializer\":{},\"expect ':' at \":true,\"..\":true,\", pos \":false,\"\":false}\":{},\"$\":{},\"xx\":false}");
ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(dimension1, jSONReaderScanner1, parserConfig1);
DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(dimension1, jSONReaderScanner1, parserConfig1);
defaultJSONParser2.parse((Object) parserConfig1);
defaultJSONParser1.parse();

[MASTER] 18:39:33.361 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:33.767 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/parser/DefaultJSONParser.getDateFormat()Ljava/text/DateFormat; @63: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[4]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @63
    flags: { }
    locals: { 'com/alibaba/fastjson/parser/DefaultJSONParser', 'java/util/Locale', 'java/lang/String' }
    stack: { 'com/alibaba/fastjson/parser/DefaultJSONParser', uninitialized 57, uninitialized 57, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 3fb8 0044 2ab4 004c b800 5212 53b6
    0x0000010: 0057 b800 3fc7 004c b800 3fb8 0044 2abb
    0x0000020: 0059 592a b400 462a b400 5bb9 0061 0100
    0x0000030: b800 6799 0012 4c4d 58bb 0069 592c 2cb7
    0x0000040: 006d a700 06b7 006e b500 4cb8 003f b800
    0x0000050: 442a b400 4c2a b400 5bb9 0072 0100 b600
    0x0000060: 78b8 003f b800 442a b400 4cb0          
  Stackmap Table:
    full_frame(@69,{Object[#2]},{Object[#2],Uninitialized[#31],Uninitialized[#31],Object[#122],Object[#124]})
    full_frame(@72,{Object[#2]},{Object[#2],Object[#89]})
    same_frame(@97)

[MASTER] 18:39:33.767 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("T|i{YVj?+");
HttpCookie httpCookie1 = new HttpCookie("fastjson.parser.deny", "{\"create asm serializer error, verson 1.2.68, class \":\"a string\",\"com.alibaba.fastjson.serializer.ArraySerializer\":[null],\"expect ':' at \":true,\"..\":-99,\", pos \":false,\"\":\"a string\"}");
defaultJSONParser1.parse((Object) httpCookie1);

[MASTER] 18:39:33.767 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:34.185 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:34.185 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Dimension dimension1 = new Dimension();
JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("[{}]");
ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(dimension1, jSONReaderScanner1, parserConfig1);
ImageCapabilities imageCapabilities1 = new ImageCapabilities(false);
defaultJSONParser1.parse((PropertyProcessable) null, (Object) imageCapabilities1);
defaultJSONParser1.parse();

[MASTER] 18:39:34.185 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:34.525 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:34.526 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.global;
JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(";cXwZBk#}RZ");
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(parserConfig1, jSONReaderScanner1, parserConfig1);
defaultJSONParser1.parseKey();

[MASTER] 18:39:34.526 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:34.927 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:34.928 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Dimension dimension1 = new Dimension();
JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("$.reate asm serializer error, verson 1.2.68, class ");
ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(dimension1, jSONReaderScanner1, parserConfig1);
DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(dimension1, jSONReaderScanner1, parserConfig1);
defaultJSONParser1.parse((Object) parserConfig1);

[MASTER] 18:39:34.928 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:35.307 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:35.307 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Dimension dimension1 = new Dimension();
JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("$.reate asm serializer error, verson 1.2.68, class ");
ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(dimension1, jSONReaderScanner1, parserConfig1);
jSONReaderScanner1.token = 0;
defaultJSONParser1.parse((Object) parserConfig1);

[MASTER] 18:39:35.307 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:35.652 [logback-2] ERROR JUnitAnalyzer - Issue in scaffolding of the test suite: 
Mockito cannot mock this class: interface com.alibaba.fastjson.parser.deserializer.PropertyProcessable.

Mockito can only mock non-private & non-final classes.
If you're not sure why you're getting this error, please report to the mailing list.


Java               : 1.8
JVM vendor name    : Oracle Corporation
JVM vendor version : 25.161-b14
JVM name           : OpenJDK 64-Bit Server VM
JVM version        : 1.8.0_161-b14
JVM info           : mixed mode
OS name            : Linux
OS version         : 3.10.0-693.17.1.el7.x86_64


Underlying exception : java.lang.IllegalArgumentException: None of [public static boolean org.evosuite.shaded.org.mockito.internal.creation.bytebuddy.MockMethodInterceptor$ForEquals.doIdentityEquals(java.lang.Object,java.lang.Object)] allows for delegation from public boolean java.lang.Object.equals(java.lang.Object)
Stack trace:
com.alibaba.fastjson.parser.DefaultJSONParser_248_tmp__ESTest_scaffolding.initMocksToAvoidTimeoutsInTheTests(DefaultJSONParser_248_tmp__ESTest_scaffolding.java:223)
com.alibaba.fastjson.parser.DefaultJSONParser_248_tmp__ESTest_scaffolding.initEvoSuiteFramework(DefaultJSONParser_248_tmp__ESTest_scaffolding.java:42)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
org.junit.runners.ParentRunner.run(ParentRunner.java:363)
org.junit.runners.Suite.runChild(Suite.java:128)
org.junit.runners.Suite.runChild(Suite.java:27)
org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
org.junit.runners.ParentRunner.run(ParentRunner.java:363)
org.junit.runner.JUnitCore.run(JUnitCore.java:137)
org.junit.runner.JUnitCore.run(JUnitCore.java:115)
org.junit.runner.JUnitCore.run(JUnitCore.java:105)
org.junit.runner.JUnitCore.run(JUnitCore.java:94)
org.evosuite.junit.JUnitAnalyzer.runJUnitOnCurrentProcess(JUnitAnalyzer.java:306)
org.evosuite.junit.JUnitAnalyzer.runTests(JUnitAnalyzer.java:276)
org.evosuite.junit.JUnitAnalyzer.handleTestsThatAreUnstable(JUnitAnalyzer.java:178)
org.evosuite.TestSuiteGenerator.compileAndCheckTests(TestSuiteGenerator.java:622)
org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:559)
org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:255)
org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:155)
java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:39:35.670 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_249_1590165575653/com/alibaba/fastjson/parser/DefaultJSONParser_249_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_249_1590165575653/com/alibaba/fastjson/parser/DefaultJSONParser_249_tmp__ESTest_scaffolding.java]]
[MASTER] 18:39:35.670 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:35.670 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:35.670 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  cannot find symbol
   symbol:   variable parserConfig1
   location:  class com.alibaba.fastjson.parser.DefaultJSONParser_249_tmp__ESTest: 22
[MASTER] 18:39:35.671 [logback-1] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 18:39:35.671 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_249_1590165575653/com/alibaba/fastjson/parser/DefaultJSONParser_249_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 16:39:35 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson.parser;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.alibaba.fastjson.parser.DefaultJSONParser;
11: import com.alibaba.fastjson.parser.ParserConfig;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
17: public class DefaultJSONParser_249_tmp__ESTest extends DefaultJSONParser_249_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       ParserConfig.getGlobalInstance();
22:       DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("", parserConfig1, 93);
23:       defaultJSONParser1.parseKey();
24:       assertEquals(0, defaultJSONParser1.resolveStatus);
25:   }
26: }
RegularFileObject[/tmp/EvoSuite_249_1590165575653/com/alibaba/fastjson/parser/DefaultJSONParser_249_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 16:39:35 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson.parser;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class DefaultJSONParser_249_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.parser.DefaultJSONParser"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultJSONParser_249_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.serializer.AwtCodec",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
90:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
91:       "com.alibaba.fastjson.serializer.JSONSerializable",
92:       "com.alibaba.fastjson.serializer.SerializeWriter",
93:       "com.alibaba.fastjson.serializer.ReferenceCodec",
94:       "com.alibaba.fastjson.JSONException",
95:       "com.alibaba.fastjson.asm.TypeCollector$1",
96:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
97:       "com.alibaba.fastjson.serializer.ToStringSerializer",
98:       "com.alibaba.fastjson.serializer.SerialContext",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.serializer.ObjectSerializer",
103:       "com.alibaba.fastjson.serializer.MapSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
106:       "com.alibaba.fastjson.serializer.DateCodec",
107:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
114:       "com.alibaba.fastjson.util.FieldInfo",
115:       "com.alibaba.fastjson.serializer.PropertyFilter",
116:       "com.alibaba.fastjson.annotation.JSONField",
117:       "com.alibaba.fastjson.parser.SymbolTable",
118:       "com.alibaba.fastjson.serializer.NameFilter",
119:       "com.alibaba.fastjson.serializer.ListSerializer",
120:       "com.alibaba.fastjson.JSONArray",
121:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
122:       "com.alibaba.fastjson.JSONAware",
123:       "com.alibaba.fastjson.serializer.LongCodec",
124:       "com.alibaba.fastjson.util.ASMClassLoader",
125:       "com.alibaba.fastjson.PropertyNamingStrategy",
126:       "com.alibaba.fastjson.parser.JSONToken",
127:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
128:       "com.alibaba.fastjson.serializer.AppendableSerializer",
129:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
130:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
131:       "com.alibaba.fastjson.serializer.ContextValueFilter",
132:       "com.alibaba.fastjson.util.ServiceLoader",
133:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
134:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
135:       "com.alibaba.fastjson.parser.DefaultJSONParser",
136:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
137:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
138:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
139:       "com.alibaba.fastjson.serializer.BeanContext",
140:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
141:       "com.alibaba.fastjson.util.IdentityHashMap",
142:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
143:       "com.alibaba.fastjson.JSON",
144:       "com.alibaba.fastjson.serializer.StringCodec",
145:       "com.alibaba.fastjson.serializer.SerializeFilterable",
146:       "com.alibaba.fastjson.JSONWriter",
147:       "com.alibaba.fastjson.asm.Opcodes",
148:       "com.alibaba.fastjson.JSONReader",
149:       "com.alibaba.fastjson.JSONStreamAware",
150:       "com.alibaba.fastjson.asm.MethodWriter",
151:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
152:       "com.alibaba.fastjson.serializer.SerializerFeature",
153:       "com.alibaba.fastjson.TypeReference$1",
154:       "com.alibaba.fastjson.serializer.CalendarCodec",
155:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
156:       "com.alibaba.fastjson.util.IOUtils",
157:       "com.alibaba.fastjson.util.TypeUtils",
158:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
159:       "com.alibaba.fastjson.asm.ClassReader",
160:       "com.alibaba.fastjson.spi.Module",
161:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
162:       "com.alibaba.fastjson.serializer.MiscCodec",
163:       "com.alibaba.fastjson.util.IOUtils$1",
164:       "com.alibaba.fastjson.serializer.IntegerCodec",
165:       "com.alibaba.fastjson.serializer.SerializeFilter",
166:       "com.alibaba.fastjson.JSONPObject",
167:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
168:       "com.alibaba.fastjson.serializer.BeforeFilter",
169:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
170:       "com.alibaba.fastjson.serializer.ArraySerializer",
171:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
172:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
173:       "com.alibaba.fastjson.JSONObject",
174:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
175:       "com.alibaba.fastjson.serializer.CharacterCodec",
176:       "com.alibaba.fastjson.asm.TypeCollector",
177:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
178:       "com.alibaba.fastjson.asm.ByteVector",
179:       "com.alibaba.fastjson.parser.JSONLexer",
180:       "com.alibaba.fastjson.util.ASMClassLoader$1",
181:       "com.alibaba.fastjson.asm.Label",
182:       "com.alibaba.fastjson.asm.FieldWriter",
183:       "com.alibaba.fastjson.serializer.JSONSerializer",
184:       "com.alibaba.fastjson.util.JavaBeanInfo",
185:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
186:       "com.alibaba.fastjson.serializer.SerializeConfig",
187:       "com.alibaba.fastjson.serializer.AtomicCodec",
188:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
189:       "com.alibaba.fastjson.asm.Type",
190:       "com.alibaba.fastjson.serializer.FieldSerializer",
191:       "com.alibaba.fastjson.serializer.FloatCodec",
192:       "com.alibaba.fastjson.parser.JSONReaderScanner",
193:       "com.alibaba.fastjson.serializer.ValueFilter",
194:       "com.alibaba.fastjson.JSONPathException",
195:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
196:       "com.alibaba.fastjson.serializer.Labels",
197:       "com.alibaba.fastjson.serializer.CollectionCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
199:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
200:       "com.alibaba.fastjson.serializer.CharArrayCodec",
201:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
202:       "com.alibaba.fastjson.asm.MethodVisitor",
203:       "com.alibaba.fastjson.annotation.JSONCreator",
204:       "com.alibaba.fastjson.asm.MethodCollector",
205:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
206:       "com.alibaba.fastjson.annotation.JSONType",
207:       "com.alibaba.fastjson.serializer.LabelFilter",
208:       "com.alibaba.fastjson.util.UTF8Decoder",
209:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
210:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
211:       "com.alibaba.fastjson.serializer.DoubleSerializer",
212:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
213:       "com.alibaba.fastjson.serializer.BooleanCodec",
214:       "com.alibaba.fastjson.parser.ParserConfig",
215:       "com.alibaba.fastjson.parser.ParseContext",
216:       "com.alibaba.fastjson.parser.Feature",
217:       "com.alibaba.fastjson.serializer.PropertyPreFilter"
218:     );
219:   } 
220: 
221:   private static void resetClasses() {
222:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DefaultJSONParser_249_tmp__ESTest_scaffolding.class.getClassLoader()); 
223: 
224:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
225:       "com.alibaba.fastjson.parser.DefaultJSONParser",
226:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
227:       "com.alibaba.fastjson.util.IOUtils$1",
228:       "com.alibaba.fastjson.util.IOUtils",
229:       "com.alibaba.fastjson.util.IdentityHashMap",
230:       "com.alibaba.fastjson.util.ASMUtils",
231:       "com.alibaba.fastjson.parser.SymbolTable",
232:       "com.alibaba.fastjson.parser.Feature",
233:       "com.alibaba.fastjson.serializer.SerializerFeature",
234:       "com.alibaba.fastjson.JSON",
235:       "com.alibaba.fastjson.util.TypeUtils",
236:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
237:       "com.alibaba.fastjson.util.ASMClassLoader$1",
238:       "com.alibaba.fastjson.util.ASMClassLoader",
239:       "com.alibaba.fastjson.serializer.MiscCodec",
240:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
241:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
242:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
243:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
244:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
245:       "com.alibaba.fastjson.serializer.DateCodec",
246:       "com.alibaba.fastjson.serializer.CalendarCodec",
247:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
248:       "com.alibaba.fastjson.serializer.CollectionCodec",
249:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
250:       "com.alibaba.fastjson.serializer.StringCodec",
251:       "com.alibaba.fastjson.serializer.CharacterCodec",
252:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
253:       "com.alibaba.fastjson.serializer.IntegerCodec",
254:       "com.alibaba.fastjson.serializer.LongCodec",
255:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
256:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
257:       "com.alibaba.fastjson.serializer.FloatCodec",
258:       "com.alibaba.fastjson.serializer.BooleanCodec",
259:       "com.alibaba.fastjson.serializer.CharArrayCodec",
260:       "com.alibaba.fastjson.serializer.ReferenceCodec",
261:       "com.alibaba.fastjson.serializer.AtomicCodec",
262:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
263:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
264:       "com.alibaba.fastjson.parser.ParserConfig",
265:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
266:       "com.alibaba.fastjson.serializer.DoubleSerializer",
267:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
268:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
269:       "com.alibaba.fastjson.serializer.AppendableSerializer",
270:       "com.alibaba.fastjson.serializer.ToStringSerializer",
271:       "com.alibaba.fastjson.serializer.SerializeConfig",
272:       "com.alibaba.fastjson.JSONPath",
273:       "com.alibaba.fastjson.parser.JSONLexerBase",
274:       "com.alibaba.fastjson.parser.JSONReaderScanner",
275:       "com.alibaba.fastjson.JSONException",
276:       "com.alibaba.fastjson.parser.JSONToken",
277:       "com.alibaba.fastjson.parser.JSONScanner",
278:       "com.alibaba.fastjson.util.ServiceLoader",
279:       "com.alibaba.fastjson.util.JavaBeanInfo",
280:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
281:       "com.alibaba.fastjson.util.FieldInfo",
282:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
283:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
284:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
285:       "com.alibaba.fastjson.parser.ParseContext",
286:       "com.alibaba.fastjson.asm.ClassReader",
287:       "com.alibaba.fastjson.asm.TypeCollector$1",
288:       "com.alibaba.fastjson.asm.TypeCollector",
289:       "com.alibaba.fastjson.asm.Type",
290:       "com.alibaba.fastjson.asm.MethodCollector",
291:       "com.alibaba.fastjson.JSONObject",
292:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
293:       "com.alibaba.fastjson.JSONArray",
294:       "com.alibaba.fastjson.asm.ClassWriter",
295:       "com.alibaba.fastjson.asm.ByteVector",
296:       "com.alibaba.fastjson.asm.Item",
297:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
298:       "com.alibaba.fastjson.asm.FieldWriter",
299:       "com.alibaba.fastjson.asm.MethodWriter",
300:       "com.alibaba.fastjson.asm.Label",
301:       "com.alibaba.fastjson.serializer.SerializeWriter",
302:       "com.alibaba.fastjson.serializer.SerializeFilterable",
303:       "com.alibaba.fastjson.serializer.JSONSerializer",
304:       "com.alibaba.fastjson.serializer.MapSerializer",
305:       "com.alibaba.fastjson.serializer.SerialContext",
306:       "com.alibaba.fastjson.serializer.ListSerializer",
307:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
308:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
309:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
315:       "com.alibaba.fastjson.serializer.AwtCodec",
316:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
317:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
318:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.serializer.ArraySerializer",
321:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
322:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
323:       "com.alibaba.fastjson.PropertyNamingStrategy"
324:     );
325:   }
326: }

[MASTER] 18:39:35.980 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/parser/DefaultJSONParser.getDateFormat()Ljava/text/DateFormat; @63: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[4]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @63
    flags: { }
    locals: { 'com/alibaba/fastjson/parser/DefaultJSONParser', 'java/util/Locale', 'java/lang/String' }
    stack: { 'com/alibaba/fastjson/parser/DefaultJSONParser', uninitialized 57, uninitialized 57, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 3fb8 0044 2ab4 004c b800 5212 53b6
    0x0000010: 0057 b800 3fc7 004c b800 3fb8 0044 2abb
    0x0000020: 0059 592a b400 462a b400 5bb9 0061 0100
    0x0000030: b800 6799 0012 4c4d 58bb 0069 592c 2cb7
    0x0000040: 006d a700 06b7 006e b500 4cb8 003f b800
    0x0000050: 442a b400 4c2a b400 5bb9 0072 0100 b600
    0x0000060: 78b8 003f b800 442a b400 4cb0          
  Stackmap Table:
    full_frame(@69,{Object[#2]},{Object[#2],Uninitialized[#31],Uninitialized[#31],Object[#122],Object[#124]})
    full_frame(@72,{Object[#2]},{Object[#2],Object[#89]})
    same_frame(@97)

[MASTER] 18:39:35.980 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("dtIU,jTX-rWlS5e");
defaultJSONParser1.accept(15);

[MASTER] 18:39:35.980 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:35.996 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_251_1590165575980/com/alibaba/fastjson/parser/DefaultJSONParser_251_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_251_1590165575980/com/alibaba/fastjson/parser/DefaultJSONParser_251_tmp__ESTest_scaffolding.java]]
[MASTER] 18:39:35.996 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:35.996 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:35.996 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  cannot find symbol
   symbol:   variable classLoader1
   location:  class com.alibaba.fastjson.parser.DefaultJSONParser_251_tmp__ESTest: 23
[MASTER] 18:39:35.996 [logback-1] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 18:39:35.996 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_251_1590165575980/com/alibaba/fastjson/parser/DefaultJSONParser_251_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 16:39:35 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson.parser;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.alibaba.fastjson.parser.DefaultJSONParser;
11: import com.alibaba.fastjson.parser.ParserConfig;
12: import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
18: public class DefaultJSONParser_251_tmp__ESTest extends DefaultJSONParser_251_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       ClassLoader.getSystemClassLoader();
23:       ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
24:       ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory1);
25:       DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("&[2'x", parserConfig1);
26:       defaultJSONParser1.accept(1);
27:       assertEquals(0, defaultJSONParser1.resolveStatus);
28:   }
29: }
RegularFileObject[/tmp/EvoSuite_251_1590165575980/com/alibaba/fastjson/parser/DefaultJSONParser_251_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 16:39:35 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson.parser;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class DefaultJSONParser_251_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.parser.DefaultJSONParser"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultJSONParser_251_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.serializer.AwtCodec",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
90:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
91:       "com.alibaba.fastjson.serializer.JSONSerializable",
92:       "com.alibaba.fastjson.serializer.SerializeWriter",
93:       "com.alibaba.fastjson.serializer.ReferenceCodec",
94:       "com.alibaba.fastjson.JSONException",
95:       "com.alibaba.fastjson.asm.TypeCollector$1",
96:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
97:       "com.alibaba.fastjson.serializer.ToStringSerializer",
98:       "com.alibaba.fastjson.serializer.SerialContext",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.serializer.ObjectSerializer",
103:       "com.alibaba.fastjson.serializer.MapSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
106:       "com.alibaba.fastjson.serializer.DateCodec",
107:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
114:       "com.alibaba.fastjson.util.FieldInfo",
115:       "com.alibaba.fastjson.serializer.PropertyFilter",
116:       "com.alibaba.fastjson.annotation.JSONField",
117:       "com.alibaba.fastjson.parser.SymbolTable",
118:       "com.alibaba.fastjson.serializer.NameFilter",
119:       "com.alibaba.fastjson.serializer.ListSerializer",
120:       "com.alibaba.fastjson.JSONArray",
121:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
122:       "com.alibaba.fastjson.JSONAware",
123:       "com.alibaba.fastjson.serializer.LongCodec",
124:       "com.alibaba.fastjson.util.ASMClassLoader",
125:       "com.alibaba.fastjson.PropertyNamingStrategy",
126:       "com.alibaba.fastjson.parser.JSONToken",
127:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
128:       "com.alibaba.fastjson.serializer.AppendableSerializer",
129:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
130:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
131:       "com.alibaba.fastjson.serializer.ContextValueFilter",
132:       "com.alibaba.fastjson.util.ServiceLoader",
133:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
134:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
135:       "com.alibaba.fastjson.parser.DefaultJSONParser",
136:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
137:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
138:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
139:       "com.alibaba.fastjson.serializer.BeanContext",
140:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
141:       "com.alibaba.fastjson.util.IdentityHashMap",
142:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
143:       "com.alibaba.fastjson.JSON",
144:       "com.alibaba.fastjson.serializer.StringCodec",
145:       "com.alibaba.fastjson.serializer.SerializeFilterable",
146:       "com.alibaba.fastjson.JSONWriter",
147:       "com.alibaba.fastjson.asm.Opcodes",
148:       "com.alibaba.fastjson.JSONReader",
149:       "com.alibaba.fastjson.JSONStreamAware",
150:       "com.alibaba.fastjson.asm.MethodWriter",
151:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
152:       "com.alibaba.fastjson.serializer.SerializerFeature",
153:       "com.alibaba.fastjson.TypeReference$1",
154:       "com.alibaba.fastjson.serializer.CalendarCodec",
155:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
156:       "com.alibaba.fastjson.util.IOUtils",
157:       "com.alibaba.fastjson.util.TypeUtils",
158:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
159:       "com.alibaba.fastjson.asm.ClassReader",
160:       "com.alibaba.fastjson.spi.Module",
161:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
162:       "com.alibaba.fastjson.serializer.MiscCodec",
163:       "com.alibaba.fastjson.util.IOUtils$1",
164:       "com.alibaba.fastjson.serializer.IntegerCodec",
165:       "com.alibaba.fastjson.serializer.SerializeFilter",
166:       "com.alibaba.fastjson.JSONPObject",
167:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
168:       "com.alibaba.fastjson.serializer.BeforeFilter",
169:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
170:       "com.alibaba.fastjson.serializer.ArraySerializer",
171:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
172:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
173:       "com.alibaba.fastjson.JSONObject",
174:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
175:       "com.alibaba.fastjson.serializer.CharacterCodec",
176:       "com.alibaba.fastjson.asm.TypeCollector",
177:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
178:       "com.alibaba.fastjson.asm.ByteVector",
179:       "com.alibaba.fastjson.parser.JSONLexer",
180:       "com.alibaba.fastjson.util.ASMClassLoader$1",
181:       "com.alibaba.fastjson.asm.Label",
182:       "com.alibaba.fastjson.asm.FieldWriter",
183:       "com.alibaba.fastjson.serializer.JSONSerializer",
184:       "com.alibaba.fastjson.util.JavaBeanInfo",
185:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
186:       "com.alibaba.fastjson.serializer.SerializeConfig",
187:       "com.alibaba.fastjson.serializer.AtomicCodec",
188:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
189:       "com.alibaba.fastjson.asm.Type",
190:       "com.alibaba.fastjson.serializer.FieldSerializer",
191:       "com.alibaba.fastjson.serializer.FloatCodec",
192:       "com.alibaba.fastjson.parser.JSONReaderScanner",
193:       "com.alibaba.fastjson.serializer.ValueFilter",
194:       "com.alibaba.fastjson.JSONPathException",
195:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
196:       "com.alibaba.fastjson.serializer.Labels",
197:       "com.alibaba.fastjson.serializer.CollectionCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
199:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
200:       "com.alibaba.fastjson.serializer.CharArrayCodec",
201:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
202:       "com.alibaba.fastjson.asm.MethodVisitor",
203:       "com.alibaba.fastjson.annotation.JSONCreator",
204:       "com.alibaba.fastjson.asm.MethodCollector",
205:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
206:       "com.alibaba.fastjson.annotation.JSONType",
207:       "com.alibaba.fastjson.serializer.LabelFilter",
208:       "com.alibaba.fastjson.util.UTF8Decoder",
209:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
210:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
211:       "com.alibaba.fastjson.serializer.DoubleSerializer",
212:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
213:       "com.alibaba.fastjson.serializer.BooleanCodec",
214:       "com.alibaba.fastjson.parser.ParserConfig",
215:       "com.alibaba.fastjson.parser.ParseContext",
216:       "com.alibaba.fastjson.parser.Feature",
217:       "com.alibaba.fastjson.serializer.PropertyPreFilter"
218:     );
219:   } 
220: 
221:   private static void resetClasses() {
222:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DefaultJSONParser_251_tmp__ESTest_scaffolding.class.getClassLoader()); 
223: 
224:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
225:       "com.alibaba.fastjson.parser.DefaultJSONParser",
226:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
227:       "com.alibaba.fastjson.util.IOUtils$1",
228:       "com.alibaba.fastjson.util.IOUtils",
229:       "com.alibaba.fastjson.util.IdentityHashMap",
230:       "com.alibaba.fastjson.util.ASMUtils",
231:       "com.alibaba.fastjson.parser.SymbolTable",
232:       "com.alibaba.fastjson.parser.Feature",
233:       "com.alibaba.fastjson.serializer.SerializerFeature",
234:       "com.alibaba.fastjson.JSON",
235:       "com.alibaba.fastjson.util.TypeUtils",
236:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
237:       "com.alibaba.fastjson.util.ASMClassLoader$1",
238:       "com.alibaba.fastjson.util.ASMClassLoader",
239:       "com.alibaba.fastjson.serializer.MiscCodec",
240:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
241:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
242:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
243:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
244:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
245:       "com.alibaba.fastjson.serializer.DateCodec",
246:       "com.alibaba.fastjson.serializer.CalendarCodec",
247:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
248:       "com.alibaba.fastjson.serializer.CollectionCodec",
249:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
250:       "com.alibaba.fastjson.serializer.StringCodec",
251:       "com.alibaba.fastjson.serializer.CharacterCodec",
252:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
253:       "com.alibaba.fastjson.serializer.IntegerCodec",
254:       "com.alibaba.fastjson.serializer.LongCodec",
255:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
256:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
257:       "com.alibaba.fastjson.serializer.FloatCodec",
258:       "com.alibaba.fastjson.serializer.BooleanCodec",
259:       "com.alibaba.fastjson.serializer.CharArrayCodec",
260:       "com.alibaba.fastjson.serializer.ReferenceCodec",
261:       "com.alibaba.fastjson.serializer.AtomicCodec",
262:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
263:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
264:       "com.alibaba.fastjson.parser.ParserConfig",
265:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
266:       "com.alibaba.fastjson.serializer.DoubleSerializer",
267:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
268:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
269:       "com.alibaba.fastjson.serializer.AppendableSerializer",
270:       "com.alibaba.fastjson.serializer.ToStringSerializer",
271:       "com.alibaba.fastjson.serializer.SerializeConfig",
272:       "com.alibaba.fastjson.JSONPath",
273:       "com.alibaba.fastjson.parser.JSONLexerBase",
274:       "com.alibaba.fastjson.parser.JSONReaderScanner",
275:       "com.alibaba.fastjson.JSONException",
276:       "com.alibaba.fastjson.parser.JSONToken",
277:       "com.alibaba.fastjson.parser.JSONScanner",
278:       "com.alibaba.fastjson.util.ServiceLoader",
279:       "com.alibaba.fastjson.util.JavaBeanInfo",
280:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
281:       "com.alibaba.fastjson.util.FieldInfo",
282:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
283:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
284:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
285:       "com.alibaba.fastjson.parser.ParseContext",
286:       "com.alibaba.fastjson.asm.ClassReader",
287:       "com.alibaba.fastjson.asm.TypeCollector$1",
288:       "com.alibaba.fastjson.asm.TypeCollector",
289:       "com.alibaba.fastjson.asm.Type",
290:       "com.alibaba.fastjson.asm.MethodCollector",
291:       "com.alibaba.fastjson.JSONObject",
292:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
293:       "com.alibaba.fastjson.JSONArray",
294:       "com.alibaba.fastjson.asm.ClassWriter",
295:       "com.alibaba.fastjson.asm.ByteVector",
296:       "com.alibaba.fastjson.asm.Item",
297:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
298:       "com.alibaba.fastjson.asm.FieldWriter",
299:       "com.alibaba.fastjson.asm.MethodWriter",
300:       "com.alibaba.fastjson.asm.Label",
301:       "com.alibaba.fastjson.serializer.SerializeWriter",
302:       "com.alibaba.fastjson.serializer.SerializeFilterable",
303:       "com.alibaba.fastjson.serializer.JSONSerializer",
304:       "com.alibaba.fastjson.serializer.MapSerializer",
305:       "com.alibaba.fastjson.serializer.SerialContext",
306:       "com.alibaba.fastjson.serializer.ListSerializer",
307:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
308:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
309:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
315:       "com.alibaba.fastjson.serializer.AwtCodec",
316:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
317:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
318:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.serializer.ArraySerializer",
321:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
322:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
323:       "com.alibaba.fastjson.PropertyNamingStrategy"
324:     );
325:   }
326: }

[MASTER] 18:39:36.013 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_252_1590165575997/com/alibaba/fastjson/parser/DefaultJSONParser_252_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_252_1590165575997/com/alibaba/fastjson/parser/DefaultJSONParser_252_tmp__ESTest_scaffolding.java]]
[MASTER] 18:39:36.013 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:36.013 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:36.013 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  cannot find symbol
   symbol:   variable parserConfig1
   location:  class com.alibaba.fastjson.parser.DefaultJSONParser_252_tmp__ESTest: 23
[MASTER] 18:39:36.013 [logback-1] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 18:39:36.013 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_252_1590165575997/com/alibaba/fastjson/parser/DefaultJSONParser_252_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 16:39:35 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson.parser;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.alibaba.fastjson.parser.DefaultJSONParser;
12: import com.alibaba.fastjson.parser.ParserConfig;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
18: public class DefaultJSONParser_252_tmp__ESTest extends DefaultJSONParser_252_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       ParserConfig.getGlobalInstance();
23:       DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("false", parserConfig1);
24:       // Undeclared exception!
25:       try { 
26:         defaultJSONParser1.accept(34, 0);
27:         fail("Expecting exception: RuntimeException");
28:       
29:       } catch(RuntimeException e) {
30:          //
31:          // syntax error, expect Unknown, actual false
32:          //
33:          verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
34:       }
35:   }
36: }
RegularFileObject[/tmp/EvoSuite_252_1590165575997/com/alibaba/fastjson/parser/DefaultJSONParser_252_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 16:39:35 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson.parser;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class DefaultJSONParser_252_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.parser.DefaultJSONParser"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultJSONParser_252_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.serializer.AwtCodec",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
90:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
91:       "com.alibaba.fastjson.serializer.JSONSerializable",
92:       "com.alibaba.fastjson.serializer.SerializeWriter",
93:       "com.alibaba.fastjson.serializer.ReferenceCodec",
94:       "com.alibaba.fastjson.JSONException",
95:       "com.alibaba.fastjson.asm.TypeCollector$1",
96:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
97:       "com.alibaba.fastjson.serializer.ToStringSerializer",
98:       "com.alibaba.fastjson.serializer.SerialContext",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.serializer.ObjectSerializer",
103:       "com.alibaba.fastjson.serializer.MapSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
106:       "com.alibaba.fastjson.serializer.DateCodec",
107:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
114:       "com.alibaba.fastjson.util.FieldInfo",
115:       "com.alibaba.fastjson.serializer.PropertyFilter",
116:       "com.alibaba.fastjson.annotation.JSONField",
117:       "com.alibaba.fastjson.parser.SymbolTable",
118:       "com.alibaba.fastjson.serializer.NameFilter",
119:       "com.alibaba.fastjson.serializer.ListSerializer",
120:       "com.alibaba.fastjson.JSONArray",
121:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
122:       "com.alibaba.fastjson.JSONAware",
123:       "com.alibaba.fastjson.serializer.LongCodec",
124:       "com.alibaba.fastjson.util.ASMClassLoader",
125:       "com.alibaba.fastjson.PropertyNamingStrategy",
126:       "com.alibaba.fastjson.parser.JSONToken",
127:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
128:       "com.alibaba.fastjson.serializer.AppendableSerializer",
129:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
130:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
131:       "com.alibaba.fastjson.serializer.ContextValueFilter",
132:       "com.alibaba.fastjson.util.ServiceLoader",
133:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
134:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
135:       "com.alibaba.fastjson.parser.DefaultJSONParser",
136:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
137:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
138:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
139:       "com.alibaba.fastjson.serializer.BeanContext",
140:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
141:       "com.alibaba.fastjson.util.IdentityHashMap",
142:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
143:       "com.alibaba.fastjson.JSON",
144:       "com.alibaba.fastjson.serializer.StringCodec",
145:       "com.alibaba.fastjson.serializer.SerializeFilterable",
146:       "com.alibaba.fastjson.JSONWriter",
147:       "com.alibaba.fastjson.asm.Opcodes",
148:       "com.alibaba.fastjson.JSONReader",
149:       "com.alibaba.fastjson.JSONStreamAware",
150:       "com.alibaba.fastjson.asm.MethodWriter",
151:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
152:       "com.alibaba.fastjson.serializer.SerializerFeature",
153:       "com.alibaba.fastjson.TypeReference$1",
154:       "com.alibaba.fastjson.serializer.CalendarCodec",
155:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
156:       "com.alibaba.fastjson.util.IOUtils",
157:       "com.alibaba.fastjson.util.TypeUtils",
158:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
159:       "com.alibaba.fastjson.asm.ClassReader",
160:       "com.alibaba.fastjson.spi.Module",
161:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
162:       "com.alibaba.fastjson.serializer.MiscCodec",
163:       "com.alibaba.fastjson.util.IOUtils$1",
164:       "com.alibaba.fastjson.serializer.IntegerCodec",
165:       "com.alibaba.fastjson.serializer.SerializeFilter",
166:       "com.alibaba.fastjson.JSONPObject",
167:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
168:       "com.alibaba.fastjson.serializer.BeforeFilter",
169:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
170:       "com.alibaba.fastjson.serializer.ArraySerializer",
171:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
172:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
173:       "com.alibaba.fastjson.JSONObject",
174:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
175:       "com.alibaba.fastjson.serializer.CharacterCodec",
176:       "com.alibaba.fastjson.asm.TypeCollector",
177:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
178:       "com.alibaba.fastjson.asm.ByteVector",
179:       "com.alibaba.fastjson.parser.JSONLexer",
180:       "com.alibaba.fastjson.util.ASMClassLoader$1",
181:       "com.alibaba.fastjson.asm.Label",
182:       "com.alibaba.fastjson.asm.FieldWriter",
183:       "com.alibaba.fastjson.serializer.JSONSerializer",
184:       "com.alibaba.fastjson.util.JavaBeanInfo",
185:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
186:       "com.alibaba.fastjson.serializer.SerializeConfig",
187:       "com.alibaba.fastjson.serializer.AtomicCodec",
188:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
189:       "com.alibaba.fastjson.asm.Type",
190:       "com.alibaba.fastjson.serializer.FieldSerializer",
191:       "com.alibaba.fastjson.serializer.FloatCodec",
192:       "com.alibaba.fastjson.parser.JSONReaderScanner",
193:       "com.alibaba.fastjson.serializer.ValueFilter",
194:       "com.alibaba.fastjson.JSONPathException",
195:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
196:       "com.alibaba.fastjson.serializer.Labels",
197:       "com.alibaba.fastjson.serializer.CollectionCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
199:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
200:       "com.alibaba.fastjson.serializer.CharArrayCodec",
201:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
202:       "com.alibaba.fastjson.asm.MethodVisitor",
203:       "com.alibaba.fastjson.annotation.JSONCreator",
204:       "com.alibaba.fastjson.asm.MethodCollector",
205:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
206:       "com.alibaba.fastjson.annotation.JSONType",
207:       "com.alibaba.fastjson.serializer.LabelFilter",
208:       "com.alibaba.fastjson.util.UTF8Decoder",
209:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
210:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
211:       "com.alibaba.fastjson.serializer.DoubleSerializer",
212:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
213:       "com.alibaba.fastjson.serializer.BooleanCodec",
214:       "com.alibaba.fastjson.parser.ParserConfig",
215:       "com.alibaba.fastjson.parser.ParseContext",
216:       "com.alibaba.fastjson.parser.Feature",
217:       "com.alibaba.fastjson.serializer.PropertyPreFilter"
218:     );
219:   } 
220: 
221:   private static void resetClasses() {
222:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DefaultJSONParser_252_tmp__ESTest_scaffolding.class.getClassLoader()); 
223: 
224:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
225:       "com.alibaba.fastjson.parser.DefaultJSONParser",
226:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
227:       "com.alibaba.fastjson.util.IOUtils$1",
228:       "com.alibaba.fastjson.util.IOUtils",
229:       "com.alibaba.fastjson.util.IdentityHashMap",
230:       "com.alibaba.fastjson.util.ASMUtils",
231:       "com.alibaba.fastjson.parser.SymbolTable",
232:       "com.alibaba.fastjson.parser.Feature",
233:       "com.alibaba.fastjson.serializer.SerializerFeature",
234:       "com.alibaba.fastjson.JSON",
235:       "com.alibaba.fastjson.util.TypeUtils",
236:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
237:       "com.alibaba.fastjson.util.ASMClassLoader$1",
238:       "com.alibaba.fastjson.util.ASMClassLoader",
239:       "com.alibaba.fastjson.serializer.MiscCodec",
240:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
241:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
242:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
243:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
244:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
245:       "com.alibaba.fastjson.serializer.DateCodec",
246:       "com.alibaba.fastjson.serializer.CalendarCodec",
247:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
248:       "com.alibaba.fastjson.serializer.CollectionCodec",
249:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
250:       "com.alibaba.fastjson.serializer.StringCodec",
251:       "com.alibaba.fastjson.serializer.CharacterCodec",
252:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
253:       "com.alibaba.fastjson.serializer.IntegerCodec",
254:       "com.alibaba.fastjson.serializer.LongCodec",
255:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
256:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
257:       "com.alibaba.fastjson.serializer.FloatCodec",
258:       "com.alibaba.fastjson.serializer.BooleanCodec",
259:       "com.alibaba.fastjson.serializer.CharArrayCodec",
260:       "com.alibaba.fastjson.serializer.ReferenceCodec",
261:       "com.alibaba.fastjson.serializer.AtomicCodec",
262:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
263:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
264:       "com.alibaba.fastjson.parser.ParserConfig",
265:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
266:       "com.alibaba.fastjson.serializer.DoubleSerializer",
267:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
268:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
269:       "com.alibaba.fastjson.serializer.AppendableSerializer",
270:       "com.alibaba.fastjson.serializer.ToStringSerializer",
271:       "com.alibaba.fastjson.serializer.SerializeConfig",
272:       "com.alibaba.fastjson.JSONPath",
273:       "com.alibaba.fastjson.parser.JSONLexerBase",
274:       "com.alibaba.fastjson.parser.JSONReaderScanner",
275:       "com.alibaba.fastjson.JSONException",
276:       "com.alibaba.fastjson.parser.JSONToken",
277:       "com.alibaba.fastjson.parser.JSONScanner",
278:       "com.alibaba.fastjson.util.ServiceLoader",
279:       "com.alibaba.fastjson.util.JavaBeanInfo",
280:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
281:       "com.alibaba.fastjson.util.FieldInfo",
282:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
283:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
284:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
285:       "com.alibaba.fastjson.parser.ParseContext",
286:       "com.alibaba.fastjson.asm.ClassReader",
287:       "com.alibaba.fastjson.asm.TypeCollector$1",
288:       "com.alibaba.fastjson.asm.TypeCollector",
289:       "com.alibaba.fastjson.asm.Type",
290:       "com.alibaba.fastjson.asm.MethodCollector",
291:       "com.alibaba.fastjson.JSONObject",
292:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
293:       "com.alibaba.fastjson.JSONArray",
294:       "com.alibaba.fastjson.asm.ClassWriter",
295:       "com.alibaba.fastjson.asm.ByteVector",
296:       "com.alibaba.fastjson.asm.Item",
297:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
298:       "com.alibaba.fastjson.asm.FieldWriter",
299:       "com.alibaba.fastjson.asm.MethodWriter",
300:       "com.alibaba.fastjson.asm.Label",
301:       "com.alibaba.fastjson.serializer.SerializeWriter",
302:       "com.alibaba.fastjson.serializer.SerializeFilterable",
303:       "com.alibaba.fastjson.serializer.JSONSerializer",
304:       "com.alibaba.fastjson.serializer.MapSerializer",
305:       "com.alibaba.fastjson.serializer.SerialContext",
306:       "com.alibaba.fastjson.serializer.ListSerializer",
307:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
308:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
309:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
315:       "com.alibaba.fastjson.serializer.AwtCodec",
316:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
317:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
318:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.serializer.ArraySerializer",
321:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
322:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
323:       "com.alibaba.fastjson.PropertyNamingStrategy"
324:     );
325:   }
326: }

[MASTER] 18:39:36.324 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/parser/DefaultJSONParser.getDateFormat()Ljava/text/DateFormat; @63: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[4]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @63
    flags: { }
    locals: { 'com/alibaba/fastjson/parser/DefaultJSONParser', 'java/util/Locale', 'java/lang/String' }
    stack: { 'com/alibaba/fastjson/parser/DefaultJSONParser', uninitialized 57, uninitialized 57, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 3fb8 0044 2ab4 004c b800 5212 53b6
    0x0000010: 0057 b800 3fc7 004c b800 3fb8 0044 2abb
    0x0000020: 0059 592a b400 462a b400 5bb9 0061 0100
    0x0000030: b800 6799 0012 4c4d 58bb 0069 592c 2cb7
    0x0000040: 006d a700 06b7 006e b500 4cb8 003f b800
    0x0000050: 442a b400 4c2a b400 5bb9 0072 0100 b600
    0x0000060: 78b8 003f b800 442a b400 4cb0          
  Stackmap Table:
    full_frame(@69,{Object[#2]},{Object[#2],Uninitialized[#31],Uninitialized[#31],Object[#122],Object[#124]})
    full_frame(@72,{Object[#2]},{Object[#2],Object[#89]})
    same_frame(@97)

[MASTER] 18:39:36.325 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("com.alibaba.fastjson.serializer.CalendarCodec");
defaultJSONParser1.accept(1, 1);
assertEquals(0, defaultJSONParser1.resolveStatus);


[MASTER] 18:39:36.325 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:36.650 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:36.650 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSON.DEFAULT_PARSER_FEATURE = 2;
JSON.parseObject("1.2.68");

[MASTER] 18:39:36.650 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:36.668 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_255_1590165576650/com/alibaba/fastjson/parser/DefaultJSONParser_255_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_255_1590165576650/com/alibaba/fastjson/parser/DefaultJSONParser_255_tmp__ESTest_scaffolding.java]]
[MASTER] 18:39:36.668 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:36.668 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:36.668 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  cannot find symbol
   symbol:   variable parserConfig1
   location:  class com.alibaba.fastjson.parser.DefaultJSONParser_255_tmp__ESTest: 23
[MASTER] 18:39:36.668 [logback-1] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 18:39:36.668 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_255_1590165576650/com/alibaba/fastjson/parser/DefaultJSONParser_255_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 16:39:36 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson.parser;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.alibaba.fastjson.parser.DefaultJSONParser;
11: import com.alibaba.fastjson.parser.ParseContext;
12: import com.alibaba.fastjson.parser.ParserConfig;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
18: public class DefaultJSONParser_255_tmp__ESTest extends DefaultJSONParser_255_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       ParserConfig.getGlobalInstance();
23:       DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("[]", parserConfig1, 1855);
24:       ParseContext parseContext1 = defaultJSONParser1.setContext((Object) null, (Object) null);
25:       assertNotNull(parseContext1);
26:       
27:       defaultJSONParser1.resolveReference("style");
28:       assertEquals(0, defaultJSONParser1.resolveStatus);
29:   }
30: }
RegularFileObject[/tmp/EvoSuite_255_1590165576650/com/alibaba/fastjson/parser/DefaultJSONParser_255_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 16:39:36 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson.parser;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class DefaultJSONParser_255_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.parser.DefaultJSONParser"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultJSONParser_255_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.serializer.AwtCodec",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
90:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
91:       "com.alibaba.fastjson.serializer.JSONSerializable",
92:       "com.alibaba.fastjson.serializer.SerializeWriter",
93:       "com.alibaba.fastjson.serializer.ReferenceCodec",
94:       "com.alibaba.fastjson.JSONException",
95:       "com.alibaba.fastjson.asm.TypeCollector$1",
96:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
97:       "com.alibaba.fastjson.serializer.ToStringSerializer",
98:       "com.alibaba.fastjson.serializer.SerialContext",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.serializer.ObjectSerializer",
103:       "com.alibaba.fastjson.serializer.MapSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
106:       "com.alibaba.fastjson.serializer.DateCodec",
107:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
114:       "com.alibaba.fastjson.util.FieldInfo",
115:       "com.alibaba.fastjson.serializer.PropertyFilter",
116:       "com.alibaba.fastjson.annotation.JSONField",
117:       "com.alibaba.fastjson.parser.SymbolTable",
118:       "com.alibaba.fastjson.serializer.NameFilter",
119:       "com.alibaba.fastjson.serializer.ListSerializer",
120:       "com.alibaba.fastjson.JSONArray",
121:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
122:       "com.alibaba.fastjson.JSONAware",
123:       "com.alibaba.fastjson.serializer.LongCodec",
124:       "com.alibaba.fastjson.util.ASMClassLoader",
125:       "com.alibaba.fastjson.PropertyNamingStrategy",
126:       "com.alibaba.fastjson.parser.JSONToken",
127:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
128:       "com.alibaba.fastjson.serializer.AppendableSerializer",
129:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
130:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
131:       "com.alibaba.fastjson.serializer.ContextValueFilter",
132:       "com.alibaba.fastjson.util.ServiceLoader",
133:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
134:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
135:       "com.alibaba.fastjson.parser.DefaultJSONParser",
136:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
137:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
138:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
139:       "com.alibaba.fastjson.serializer.BeanContext",
140:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
141:       "com.alibaba.fastjson.util.IdentityHashMap",
142:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
143:       "com.alibaba.fastjson.JSON",
144:       "com.alibaba.fastjson.serializer.StringCodec",
145:       "com.alibaba.fastjson.serializer.SerializeFilterable",
146:       "com.alibaba.fastjson.JSONWriter",
147:       "com.alibaba.fastjson.asm.Opcodes",
148:       "com.alibaba.fastjson.JSONReader",
149:       "com.alibaba.fastjson.JSONStreamAware",
150:       "com.alibaba.fastjson.asm.MethodWriter",
151:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
152:       "com.alibaba.fastjson.serializer.SerializerFeature",
153:       "com.alibaba.fastjson.TypeReference$1",
154:       "com.alibaba.fastjson.serializer.CalendarCodec",
155:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
156:       "com.alibaba.fastjson.util.IOUtils",
157:       "com.alibaba.fastjson.util.TypeUtils",
158:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
159:       "com.alibaba.fastjson.asm.ClassReader",
160:       "com.alibaba.fastjson.spi.Module",
161:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
162:       "com.alibaba.fastjson.serializer.MiscCodec",
163:       "com.alibaba.fastjson.util.IOUtils$1",
164:       "com.alibaba.fastjson.serializer.IntegerCodec",
165:       "com.alibaba.fastjson.serializer.SerializeFilter",
166:       "com.alibaba.fastjson.JSONPObject",
167:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
168:       "com.alibaba.fastjson.serializer.BeforeFilter",
169:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
170:       "com.alibaba.fastjson.serializer.ArraySerializer",
171:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
172:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
173:       "com.alibaba.fastjson.JSONObject",
174:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
175:       "com.alibaba.fastjson.serializer.CharacterCodec",
176:       "com.alibaba.fastjson.asm.TypeCollector",
177:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
178:       "com.alibaba.fastjson.asm.ByteVector",
179:       "com.alibaba.fastjson.parser.JSONLexer",
180:       "com.alibaba.fastjson.util.ASMClassLoader$1",
181:       "com.alibaba.fastjson.asm.Label",
182:       "com.alibaba.fastjson.asm.FieldWriter",
183:       "com.alibaba.fastjson.serializer.JSONSerializer",
184:       "com.alibaba.fastjson.util.JavaBeanInfo",
185:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
186:       "com.alibaba.fastjson.serializer.SerializeConfig",
187:       "com.alibaba.fastjson.serializer.AtomicCodec",
188:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
189:       "com.alibaba.fastjson.asm.Type",
190:       "com.alibaba.fastjson.serializer.FieldSerializer",
191:       "com.alibaba.fastjson.serializer.FloatCodec",
192:       "com.alibaba.fastjson.parser.JSONReaderScanner",
193:       "com.alibaba.fastjson.serializer.ValueFilter",
194:       "com.alibaba.fastjson.JSONPathException",
195:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
196:       "com.alibaba.fastjson.serializer.Labels",
197:       "com.alibaba.fastjson.serializer.CollectionCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
199:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
200:       "com.alibaba.fastjson.serializer.CharArrayCodec",
201:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
202:       "com.alibaba.fastjson.asm.MethodVisitor",
203:       "com.alibaba.fastjson.annotation.JSONCreator",
204:       "com.alibaba.fastjson.asm.MethodCollector",
205:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
206:       "com.alibaba.fastjson.annotation.JSONType",
207:       "com.alibaba.fastjson.serializer.LabelFilter",
208:       "com.alibaba.fastjson.util.UTF8Decoder",
209:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
210:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
211:       "com.alibaba.fastjson.serializer.DoubleSerializer",
212:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
213:       "com.alibaba.fastjson.serializer.BooleanCodec",
214:       "com.alibaba.fastjson.parser.ParserConfig",
215:       "com.alibaba.fastjson.parser.ParseContext",
216:       "com.alibaba.fastjson.parser.Feature",
217:       "com.alibaba.fastjson.serializer.PropertyPreFilter"
218:     );
219:   } 
220: 
221:   private static void resetClasses() {
222:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DefaultJSONParser_255_tmp__ESTest_scaffolding.class.getClassLoader()); 
223: 
224:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
225:       "com.alibaba.fastjson.parser.DefaultJSONParser",
226:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
227:       "com.alibaba.fastjson.util.IOUtils$1",
228:       "com.alibaba.fastjson.util.IOUtils",
229:       "com.alibaba.fastjson.util.IdentityHashMap",
230:       "com.alibaba.fastjson.util.ASMUtils",
231:       "com.alibaba.fastjson.parser.SymbolTable",
232:       "com.alibaba.fastjson.parser.Feature",
233:       "com.alibaba.fastjson.serializer.SerializerFeature",
234:       "com.alibaba.fastjson.JSON",
235:       "com.alibaba.fastjson.util.TypeUtils",
236:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
237:       "com.alibaba.fastjson.util.ASMClassLoader$1",
238:       "com.alibaba.fastjson.util.ASMClassLoader",
239:       "com.alibaba.fastjson.serializer.MiscCodec",
240:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
241:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
242:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
243:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
244:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
245:       "com.alibaba.fastjson.serializer.DateCodec",
246:       "com.alibaba.fastjson.serializer.CalendarCodec",
247:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
248:       "com.alibaba.fastjson.serializer.CollectionCodec",
249:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
250:       "com.alibaba.fastjson.serializer.StringCodec",
251:       "com.alibaba.fastjson.serializer.CharacterCodec",
252:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
253:       "com.alibaba.fastjson.serializer.IntegerCodec",
254:       "com.alibaba.fastjson.serializer.LongCodec",
255:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
256:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
257:       "com.alibaba.fastjson.serializer.FloatCodec",
258:       "com.alibaba.fastjson.serializer.BooleanCodec",
259:       "com.alibaba.fastjson.serializer.CharArrayCodec",
260:       "com.alibaba.fastjson.serializer.ReferenceCodec",
261:       "com.alibaba.fastjson.serializer.AtomicCodec",
262:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
263:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
264:       "com.alibaba.fastjson.parser.ParserConfig",
265:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
266:       "com.alibaba.fastjson.serializer.DoubleSerializer",
267:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
268:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
269:       "com.alibaba.fastjson.serializer.AppendableSerializer",
270:       "com.alibaba.fastjson.serializer.ToStringSerializer",
271:       "com.alibaba.fastjson.serializer.SerializeConfig",
272:       "com.alibaba.fastjson.JSONPath",
273:       "com.alibaba.fastjson.parser.JSONLexerBase",
274:       "com.alibaba.fastjson.parser.JSONReaderScanner",
275:       "com.alibaba.fastjson.JSONException",
276:       "com.alibaba.fastjson.parser.JSONToken",
277:       "com.alibaba.fastjson.parser.JSONScanner",
278:       "com.alibaba.fastjson.util.ServiceLoader",
279:       "com.alibaba.fastjson.util.JavaBeanInfo",
280:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
281:       "com.alibaba.fastjson.util.FieldInfo",
282:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
283:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
284:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
285:       "com.alibaba.fastjson.parser.ParseContext",
286:       "com.alibaba.fastjson.asm.ClassReader",
287:       "com.alibaba.fastjson.asm.TypeCollector$1",
288:       "com.alibaba.fastjson.asm.TypeCollector",
289:       "com.alibaba.fastjson.asm.Type",
290:       "com.alibaba.fastjson.asm.MethodCollector",
291:       "com.alibaba.fastjson.JSONObject",
292:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
293:       "com.alibaba.fastjson.JSONArray",
294:       "com.alibaba.fastjson.asm.ClassWriter",
295:       "com.alibaba.fastjson.asm.ByteVector",
296:       "com.alibaba.fastjson.asm.Item",
297:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
298:       "com.alibaba.fastjson.asm.FieldWriter",
299:       "com.alibaba.fastjson.asm.MethodWriter",
300:       "com.alibaba.fastjson.asm.Label",
301:       "com.alibaba.fastjson.serializer.SerializeWriter",
302:       "com.alibaba.fastjson.serializer.SerializeFilterable",
303:       "com.alibaba.fastjson.serializer.JSONSerializer",
304:       "com.alibaba.fastjson.serializer.MapSerializer",
305:       "com.alibaba.fastjson.serializer.SerialContext",
306:       "com.alibaba.fastjson.serializer.ListSerializer",
307:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
308:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
309:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
315:       "com.alibaba.fastjson.serializer.AwtCodec",
316:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
317:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
318:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.serializer.ArraySerializer",
321:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
322:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
323:       "com.alibaba.fastjson.PropertyNamingStrategy"
324:     );
325:   }
326: }

* Writing tests to file
* Writing JUnit test case 'JSONReaderScanner_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s11/fastjson/evosuite-tests
[MASTER] 18:39:37.077 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/parser/DefaultJSONParser.getDateFormat()Ljava/text/DateFormat; @63: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[4]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @63
    flags: { }
    locals: { 'com/alibaba/fastjson/parser/DefaultJSONParser', 'java/util/Locale', 'java/lang/String' }
    stack: { 'com/alibaba/fastjson/parser/DefaultJSONParser', uninitialized 57, uninitialized 57, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 3fb8 0044 2ab4 004c b800 5212 53b6
    0x0000010: 0057 b800 3fc7 004c b800 3fb8 0044 2abb
    0x0000020: 0059 592a b400 462a b400 5bb9 0061 0100
    0x0000030: b800 6799 0012 4c4d 58bb 0069 592c 2cb7
    0x0000040: 006d a700 06b7 006e b500 4cb8 003f b800
    0x0000050: 442a b400 4c2a b400 5bb9 0072 0100 b600
    0x0000060: 78b8 003f b800 442a b400 4cb0          
  Stackmap Table:
    full_frame(@69,{Object[#2]},{Object[#2],Uninitialized[#31],Uninitialized[#31],Object[#122],Object[#124]})
    full_frame(@72,{Object[#2]},{Object[#2],Object[#89]})
    same_frame(@97)

[MASTER] 18:39:37.077 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("Ac6]H?-\"n9h$:kqt");
defaultJSONParser1.resolveReference("Ac6]H?-\"n9h$:kqt");
assertEquals(0, defaultJSONParser1.resolveStatus);


[MASTER] 18:39:37.077 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
* Done!

* Computation finished
[MASTER] 18:39:37.455 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:37.455 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("{\"\":16,\"{\"creae asm serialize error, verson 1.2.68, class \":\"a stYing\",\"com.alibaba.fastjson.serializer.ArraySerializer\":{},\"expect ':' at \":true,\"..\":true,\", pos \":false,\"\":false}\":{},\"$\":{},\"xx\":false}");
ParserConfig parserConfig1 = new ParserConfig();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONReaderScanner1, parserConfig1);
defaultJSONParser1.getExtraTypeProviders();
Class<DefaultJSONParser.ResolveTask> class1 = DefaultJSONParser.ResolveTask.class;
defaultJSONParser1.parseObject(class1);

[MASTER] 18:39:37.455 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:37.782 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:37.782 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Dimension dimension1 = new Dimension();
JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("[-99]");
ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(dimension1, jSONReaderScanner1, parserConfig1);
ImageCapabilities imageCapabilities1 = new ImageCapabilities(false);
defaultJSONParser1.parse((PropertyProcessable) null, (Object) imageCapabilities1);

[MASTER] 18:39:37.782 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:38.141 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:38.141 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.global;
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"{\"create asm serializer error, verson 1.2.68, class \":\"a string\",\"com.alibaba.fastjson.serializer.ArraySerializer\":{},\"expect ':' at \":true,\"..\":true,\", pos \":false,\"\":false,\"isWriteClassName\":-99}\":[]}", parserConfig1, 1);
defaultJSONParser1.parse((PropertyProcessable) null, (Object) "{\"{\"create asm serializer error, verson 1.2.68, class \":\"a string\",\"com.alibaba.fastjson.serializer.ArraySerializer\":{},\"expect ':' at \":true,\"..\":true,\", pos \":false,\"\":false,\"isWriteClassName\":-99}\":[]}");

[MASTER] 18:39:38.141 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:38.445 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:38.445 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.global;
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{}", parserConfig1, 1);
defaultJSONParser1.parse((PropertyProcessable) null, (Object) "{}");
assertEquals(0, defaultJSONParser1.resolveStatus);


[MASTER] 18:39:38.445 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:38.786 [logback-2] ERROR JUnitAnalyzer - Issue in scaffolding of the test suite: 
Mockito cannot mock this class: interface com.alibaba.fastjson.parser.deserializer.PropertyProcessable.

Mockito can only mock non-private & non-final classes.
If you're not sure why you're getting this error, please report to the mailing list.


Java               : 1.8
JVM vendor name    : Oracle Corporation
JVM vendor version : 25.161-b14
JVM name           : OpenJDK 64-Bit Server VM
JVM version        : 1.8.0_161-b14
JVM info           : mixed mode
OS name            : Linux
OS version         : 3.10.0-693.17.1.el7.x86_64


Underlying exception : java.lang.IllegalArgumentException: None of [public static boolean org.evosuite.shaded.org.mockito.internal.creation.bytebuddy.MockMethodInterceptor$ForEquals.doIdentityEquals(java.lang.Object,java.lang.Object)] allows for delegation from public boolean java.lang.Object.equals(java.lang.Object)
Stack trace:
com.alibaba.fastjson.parser.DefaultJSONParser_261_tmp__ESTest_scaffolding.initMocksToAvoidTimeoutsInTheTests(DefaultJSONParser_261_tmp__ESTest_scaffolding.java:223)
com.alibaba.fastjson.parser.DefaultJSONParser_261_tmp__ESTest_scaffolding.initEvoSuiteFramework(DefaultJSONParser_261_tmp__ESTest_scaffolding.java:42)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
org.junit.runners.ParentRunner.run(ParentRunner.java:363)
org.junit.runners.Suite.runChild(Suite.java:128)
org.junit.runners.Suite.runChild(Suite.java:27)
org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
org.junit.runners.ParentRunner.run(ParentRunner.java:363)
org.junit.runner.JUnitCore.run(JUnitCore.java:137)
org.junit.runner.JUnitCore.run(JUnitCore.java:115)
org.junit.runner.JUnitCore.run(JUnitCore.java:105)
org.junit.runner.JUnitCore.run(JUnitCore.java:94)
org.evosuite.junit.JUnitAnalyzer.runJUnitOnCurrentProcess(JUnitAnalyzer.java:306)
org.evosuite.junit.JUnitAnalyzer.runTests(JUnitAnalyzer.java:276)
org.evosuite.junit.JUnitAnalyzer.handleTestsThatAreUnstable(JUnitAnalyzer.java:178)
org.evosuite.TestSuiteGenerator.compileAndCheckTests(TestSuiteGenerator.java:622)
org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:559)
org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:255)
org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:155)
java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:39:39.109 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:39.109 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.global;
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"syntax error\":true,\"object key level > 512\":true}", parserConfig1, 1);
Hashtable<Float, Insets> hashtable1 = new Hashtable<Float, Insets>();
Set<Float> set1 = hashtable1.keySet();
Class<Short> class1 = Short.TYPE;
GenericArrayTypeImpl genericArrayTypeImpl1 = new GenericArrayTypeImpl(class1);
defaultJSONParser1.parseArray((Type) genericArrayTypeImpl1, (Collection) set1);

[MASTER] 18:39:39.109 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:39.542 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/parser/DefaultJSONParser.getDateFormat()Ljava/text/DateFormat; @63: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[4]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @63
    flags: { }
    locals: { 'com/alibaba/fastjson/parser/DefaultJSONParser', 'java/util/Locale', 'java/lang/String' }
    stack: { 'com/alibaba/fastjson/parser/DefaultJSONParser', uninitialized 57, uninitialized 57, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 3fb8 0044 2ab4 004c b800 5212 53b6
    0x0000010: 0057 b800 3fc7 004c b800 3fb8 0044 2abb
    0x0000020: 0059 592a b400 462a b400 5bb9 0061 0100
    0x0000030: b800 6799 0012 4c4d 58bb 0069 592c 2cb7
    0x0000040: 006d a700 06b7 006e b500 4cb8 003f b800
    0x0000050: 442a b400 4c2a b400 5bb9 0072 0100 b600
    0x0000060: 78b8 003f b800 442a b400 4cb0          
  Stackmap Table:
    full_frame(@69,{Object[#2]},{Object[#2],Uninitialized[#31],Uninitialized[#31],Object[#122],Object[#124]})
    full_frame(@72,{Object[#2]},{Object[#2],Object[#89]})
    same_frame(@97)

[MASTER] 18:39:39.543 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/reflect/Type;");
List<DefaultJSONParser.ResolveTask> list1 = defaultJSONParser1.getResolveTaskList();
Class<StringCharacterIterator> class1 = StringCharacterIterator.class;
defaultJSONParser1.parseArray((Class<?>) class1, (Collection) list1);

[MASTER] 18:39:39.543 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:39.924 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:39.924 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.global;
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"\":null,\"syntax error\":\"a string\",\"object key level > 512\":[],\";Ljava/lang/String;Ljava/lang/Object;)V\":-99,\"syntax error,except start with { or [,but actually start with \":null,\"$ref\":99}", parserConfig1, 1);
DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(defaultJSONParser1, defaultJSONParser1.lexer, parserConfig1);
DefaultJSONParser defaultJSONParser3 = new DefaultJSONParser(defaultJSONParser1.lexer);
MockDate mockDate1 = new MockDate(1, 0, 109, 9, 765, 1233);
DefaultJSONParser defaultJSONParser4 = new DefaultJSONParser(mockDate1, defaultJSONParser1.lexer, parserConfig1);
Hashtable<ParameterizedTypeImpl, Rectangle> hashtable1 = new Hashtable<ParameterizedTypeImpl, Rectangle>();
MockDateFormat mockDateFormat1 = new MockDateFormat();
defaultJSONParser3.parseObject((Map) hashtable1, (Object) mockDateFormat1);
assertEquals(0, defaultJSONParser3.resolveStatus);


[MASTER] 18:39:39.924 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:40.327 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:40.327 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Dimension dimension1 = new Dimension();
JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("{}", 0);
ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(dimension1, jSONReaderScanner1, parserConfig1);
DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser((Object) null, defaultJSONParser1.lexer, parserConfig1);
assertEquals(1, jSONReaderScanner1.pos());

LinkedHashMap<MockDate, Short> linkedHashMap1 = new LinkedHashMap<MockDate, Short>();
defaultJSONParser2.parseObject((Map) linkedHashMap1, (Object) linkedHashMap1);
assertEquals(0, defaultJSONParser1.getResolveStatus());


[MASTER] 18:39:40.327 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:40.649 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:40.650 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Dimension dimension1 = new Dimension();
JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("{\"\":99}", 0);
ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(dimension1, jSONReaderScanner1, parserConfig1);
DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser((Object) null, defaultJSONParser1.lexer, parserConfig1);
LinkedHashMap<MockDate, Short> linkedHashMap1 = new LinkedHashMap<MockDate, Short>();
Object object1 = defaultJSONParser2.parseObject((Map) linkedHashMap1, (Object) linkedHashMap1);
assertNotNull(object1);
assertEquals(0, defaultJSONParser2.resolveStatus);


[MASTER] 18:39:40.650 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:40.951 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:40.952 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("{\"fruit\":[false],\"size\":true,\"expect ':' at \":\"syntax error,except start with { or [,but actually start with \",\"(Ljava/util/Collection;C)V\":true,\"value2\":false,\"\":true,\"x\":null}");
ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONReaderScanner1);
SimpleTimeZone simpleTimeZone1 = new SimpleTimeZone(0, "(Ljava/util/List;)V");
DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(jSONReaderScanner1, defaultJSONParser1.lexer, parserConfig1);
LinkedHashMap<MockDate, Short> linkedHashMap1 = new LinkedHashMap<MockDate, Short>();
defaultJSONParser1.parseObject((Map) linkedHashMap1, (Object) simpleTimeZone1);

[MASTER] 18:39:40.952 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:41.262 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:41.262 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.global;
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"\":true,\"syntax error\":\"a string\",\"object key level > 512\":-99,\";Ljava/lang/String;Ljava/lang/Object;)V\":\"a string\",\"{\"create asm serializer error, verson 1.2.68, class \":-99,\"com.alibaba.fastjson.serializer.ArraySerializer\":{},\"expect ':' at \":true,\"..\":true,\", pos \":false,\"\":false}\":\"a string\"}", parserConfig1, 1);
DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(defaultJSONParser1, defaultJSONParser1.lexer, parserConfig1);
Class<Byte> class1 = Byte.TYPE;
DefaultJSONParser defaultJSONParser3 = new DefaultJSONParser(defaultJSONParser1.lexer);
DefaultJSONParser defaultJSONParser4 = new DefaultJSONParser(defaultJSONParser3.lexer);
TreeMap<Timestamp, BigInteger> treeMap1 = new TreeMap<Timestamp, BigInteger>();
DefaultJSONParser defaultJSONParser5 = new DefaultJSONParser(defaultJSONParser3, defaultJSONParser4.lexer, parserConfig1);
Class<MockGregorianCalendar> class2 = MockGregorianCalendar.class;
JavaBeanDeserializer javaBeanDeserializer1 = new JavaBeanDeserializer(parserConfig1, class2, class1);
defaultJSONParser5.parseObject((Map) treeMap1, (Object) javaBeanDeserializer1);

[MASTER] 18:39:41.262 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:41.279 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_269_1590165581263/com/alibaba/fastjson/parser/DefaultJSONParser_269_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_269_1590165581263/com/alibaba/fastjson/parser/DefaultJSONParser_269_tmp__ESTest_scaffolding.java]]
[MASTER] 18:39:41.279 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:41.279 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:41.280 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  cannot find symbol
   symbol:   variable parserConfig1
   location:  class com.alibaba.fastjson.parser.DefaultJSONParser_269_tmp__ESTest: 27
[MASTER] 18:39:41.280 [logback-1] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 18:39:41.280 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_269_1590165581263/com/alibaba/fastjson/parser/DefaultJSONParser_269_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 16:39:41 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson.parser;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.alibaba.fastjson.parser.DefaultJSONParser;
11: import com.alibaba.fastjson.parser.ParserConfig;
12: import java.net.HttpCookie;
13: import java.text.ChoiceFormat;
14: import java.text.Collator;
15: import java.util.Map;
16: import java.util.TreeMap;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
22: public class DefaultJSONParser_269_tmp__ESTest extends DefaultJSONParser_269_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       ParserConfig.getGlobalInstance();
27:       DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{}", parserConfig1, 1865);
28:       defaultJSONParser1.setContext((Object) null, (Object) null);
29:       TreeMap<HttpCookie, ChoiceFormat> treeMap1 = new TreeMap<HttpCookie, ChoiceFormat>();
30:       Collator collator1 = Collator.getInstance();
31:       TreeMap treeMap2 = (TreeMap)defaultJSONParser1.parseObject((Map) treeMap1, (Object) collator1);
32:       assertEquals(0, treeMap2.size());
33:   }
34: }
RegularFileObject[/tmp/EvoSuite_269_1590165581263/com/alibaba/fastjson/parser/DefaultJSONParser_269_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 16:39:41 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson.parser;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class DefaultJSONParser_269_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.parser.DefaultJSONParser"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultJSONParser_269_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.serializer.AwtCodec",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
90:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
91:       "com.alibaba.fastjson.serializer.JSONSerializable",
92:       "com.alibaba.fastjson.serializer.SerializeWriter",
93:       "com.alibaba.fastjson.serializer.ReferenceCodec",
94:       "com.alibaba.fastjson.JSONException",
95:       "com.alibaba.fastjson.asm.TypeCollector$1",
96:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
97:       "com.alibaba.fastjson.serializer.ToStringSerializer",
98:       "com.alibaba.fastjson.serializer.SerialContext",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.serializer.ObjectSerializer",
103:       "com.alibaba.fastjson.serializer.MapSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
106:       "com.alibaba.fastjson.serializer.DateCodec",
107:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
114:       "com.alibaba.fastjson.util.FieldInfo",
115:       "com.alibaba.fastjson.serializer.PropertyFilter",
116:       "com.alibaba.fastjson.annotation.JSONField",
117:       "com.alibaba.fastjson.parser.SymbolTable",
118:       "com.alibaba.fastjson.serializer.NameFilter",
119:       "com.alibaba.fastjson.serializer.ListSerializer",
120:       "com.alibaba.fastjson.JSONArray",
121:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
122:       "com.alibaba.fastjson.JSONAware",
123:       "com.alibaba.fastjson.serializer.LongCodec",
124:       "com.alibaba.fastjson.util.ASMClassLoader",
125:       "com.alibaba.fastjson.PropertyNamingStrategy",
126:       "com.alibaba.fastjson.parser.JSONToken",
127:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
128:       "com.alibaba.fastjson.serializer.AppendableSerializer",
129:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
130:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
131:       "com.alibaba.fastjson.serializer.ContextValueFilter",
132:       "com.alibaba.fastjson.util.ServiceLoader",
133:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
134:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
135:       "com.alibaba.fastjson.parser.DefaultJSONParser",
136:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
137:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
138:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
139:       "com.alibaba.fastjson.serializer.BeanContext",
140:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
141:       "com.alibaba.fastjson.util.IdentityHashMap",
142:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
143:       "com.alibaba.fastjson.JSON",
144:       "com.alibaba.fastjson.serializer.StringCodec",
145:       "com.alibaba.fastjson.serializer.SerializeFilterable",
146:       "com.alibaba.fastjson.JSONWriter",
147:       "com.alibaba.fastjson.asm.Opcodes",
148:       "com.alibaba.fastjson.JSONReader",
149:       "com.alibaba.fastjson.JSONStreamAware",
150:       "com.alibaba.fastjson.asm.MethodWriter",
151:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
152:       "com.alibaba.fastjson.serializer.SerializerFeature",
153:       "com.alibaba.fastjson.TypeReference$1",
154:       "com.alibaba.fastjson.serializer.CalendarCodec",
155:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
156:       "com.alibaba.fastjson.util.IOUtils",
157:       "com.alibaba.fastjson.util.TypeUtils",
158:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
159:       "com.alibaba.fastjson.asm.ClassReader",
160:       "com.alibaba.fastjson.spi.Module",
161:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
162:       "com.alibaba.fastjson.serializer.MiscCodec",
163:       "com.alibaba.fastjson.util.IOUtils$1",
164:       "com.alibaba.fastjson.serializer.IntegerCodec",
165:       "com.alibaba.fastjson.serializer.SerializeFilter",
166:       "com.alibaba.fastjson.JSONPObject",
167:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
168:       "com.alibaba.fastjson.serializer.BeforeFilter",
169:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
170:       "com.alibaba.fastjson.serializer.ArraySerializer",
171:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
172:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
173:       "com.alibaba.fastjson.JSONObject",
174:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
175:       "com.alibaba.fastjson.serializer.CharacterCodec",
176:       "com.alibaba.fastjson.asm.TypeCollector",
177:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
178:       "com.alibaba.fastjson.asm.ByteVector",
179:       "com.alibaba.fastjson.parser.JSONLexer",
180:       "com.alibaba.fastjson.util.ASMClassLoader$1",
181:       "com.alibaba.fastjson.asm.Label",
182:       "com.alibaba.fastjson.asm.FieldWriter",
183:       "com.alibaba.fastjson.serializer.JSONSerializer",
184:       "com.alibaba.fastjson.util.JavaBeanInfo",
185:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
186:       "com.alibaba.fastjson.serializer.SerializeConfig",
187:       "com.alibaba.fastjson.serializer.AtomicCodec",
188:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
189:       "com.alibaba.fastjson.asm.Type",
190:       "com.alibaba.fastjson.serializer.FieldSerializer",
191:       "com.alibaba.fastjson.serializer.FloatCodec",
192:       "com.alibaba.fastjson.parser.JSONReaderScanner",
193:       "com.alibaba.fastjson.serializer.ValueFilter",
194:       "com.alibaba.fastjson.JSONPathException",
195:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
196:       "com.alibaba.fastjson.serializer.Labels",
197:       "com.alibaba.fastjson.serializer.CollectionCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
199:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
200:       "com.alibaba.fastjson.serializer.CharArrayCodec",
201:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
202:       "com.alibaba.fastjson.asm.MethodVisitor",
203:       "com.alibaba.fastjson.annotation.JSONCreator",
204:       "com.alibaba.fastjson.asm.MethodCollector",
205:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
206:       "com.alibaba.fastjson.annotation.JSONType",
207:       "com.alibaba.fastjson.serializer.LabelFilter",
208:       "com.alibaba.fastjson.util.UTF8Decoder",
209:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
210:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
211:       "com.alibaba.fastjson.serializer.DoubleSerializer",
212:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
213:       "com.alibaba.fastjson.serializer.BooleanCodec",
214:       "com.alibaba.fastjson.parser.ParserConfig",
215:       "com.alibaba.fastjson.parser.ParseContext",
216:       "com.alibaba.fastjson.parser.Feature",
217:       "com.alibaba.fastjson.serializer.PropertyPreFilter"
218:     );
219:   } 
220: 
221:   private static void resetClasses() {
222:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DefaultJSONParser_269_tmp__ESTest_scaffolding.class.getClassLoader()); 
223: 
224:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
225:       "com.alibaba.fastjson.parser.DefaultJSONParser",
226:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
227:       "com.alibaba.fastjson.util.IOUtils$1",
228:       "com.alibaba.fastjson.util.IOUtils",
229:       "com.alibaba.fastjson.util.IdentityHashMap",
230:       "com.alibaba.fastjson.util.ASMUtils",
231:       "com.alibaba.fastjson.parser.SymbolTable",
232:       "com.alibaba.fastjson.parser.Feature",
233:       "com.alibaba.fastjson.serializer.SerializerFeature",
234:       "com.alibaba.fastjson.JSON",
235:       "com.alibaba.fastjson.util.TypeUtils",
236:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
237:       "com.alibaba.fastjson.util.ASMClassLoader$1",
238:       "com.alibaba.fastjson.util.ASMClassLoader",
239:       "com.alibaba.fastjson.serializer.MiscCodec",
240:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
241:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
242:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
243:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
244:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
245:       "com.alibaba.fastjson.serializer.DateCodec",
246:       "com.alibaba.fastjson.serializer.CalendarCodec",
247:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
248:       "com.alibaba.fastjson.serializer.CollectionCodec",
249:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
250:       "com.alibaba.fastjson.serializer.StringCodec",
251:       "com.alibaba.fastjson.serializer.CharacterCodec",
252:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
253:       "com.alibaba.fastjson.serializer.IntegerCodec",
254:       "com.alibaba.fastjson.serializer.LongCodec",
255:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
256:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
257:       "com.alibaba.fastjson.serializer.FloatCodec",
258:       "com.alibaba.fastjson.serializer.BooleanCodec",
259:       "com.alibaba.fastjson.serializer.CharArrayCodec",
260:       "com.alibaba.fastjson.serializer.ReferenceCodec",
261:       "com.alibaba.fastjson.serializer.AtomicCodec",
262:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
263:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
264:       "com.alibaba.fastjson.parser.ParserConfig",
265:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
266:       "com.alibaba.fastjson.serializer.DoubleSerializer",
267:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
268:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
269:       "com.alibaba.fastjson.serializer.AppendableSerializer",
270:       "com.alibaba.fastjson.serializer.ToStringSerializer",
271:       "com.alibaba.fastjson.serializer.SerializeConfig",
272:       "com.alibaba.fastjson.JSONPath",
273:       "com.alibaba.fastjson.parser.JSONLexerBase",
274:       "com.alibaba.fastjson.parser.JSONReaderScanner",
275:       "com.alibaba.fastjson.JSONException",
276:       "com.alibaba.fastjson.parser.JSONToken",
277:       "com.alibaba.fastjson.parser.JSONScanner",
278:       "com.alibaba.fastjson.util.ServiceLoader",
279:       "com.alibaba.fastjson.util.JavaBeanInfo",
280:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
281:       "com.alibaba.fastjson.util.FieldInfo",
282:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
283:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
284:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
285:       "com.alibaba.fastjson.parser.ParseContext",
286:       "com.alibaba.fastjson.asm.ClassReader",
287:       "com.alibaba.fastjson.asm.TypeCollector$1",
288:       "com.alibaba.fastjson.asm.TypeCollector",
289:       "com.alibaba.fastjson.asm.Type",
290:       "com.alibaba.fastjson.asm.MethodCollector",
291:       "com.alibaba.fastjson.JSONObject",
292:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
293:       "com.alibaba.fastjson.JSONArray",
294:       "com.alibaba.fastjson.asm.ClassWriter",
295:       "com.alibaba.fastjson.asm.ByteVector",
296:       "com.alibaba.fastjson.asm.Item",
297:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
298:       "com.alibaba.fastjson.asm.FieldWriter",
299:       "com.alibaba.fastjson.asm.MethodWriter",
300:       "com.alibaba.fastjson.asm.Label",
301:       "com.alibaba.fastjson.serializer.SerializeWriter",
302:       "com.alibaba.fastjson.serializer.SerializeFilterable",
303:       "com.alibaba.fastjson.serializer.JSONSerializer",
304:       "com.alibaba.fastjson.serializer.MapSerializer",
305:       "com.alibaba.fastjson.serializer.SerialContext",
306:       "com.alibaba.fastjson.serializer.ListSerializer",
307:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
308:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
309:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
315:       "com.alibaba.fastjson.serializer.AwtCodec",
316:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
317:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
318:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.serializer.ArraySerializer",
321:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
322:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
323:       "com.alibaba.fastjson.PropertyNamingStrategy"
324:     );
325:   }
326: }

[MASTER] 18:39:41.641 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/parser/DefaultJSONParser.getDateFormat()Ljava/text/DateFormat; @63: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[4]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @63
    flags: { }
    locals: { 'com/alibaba/fastjson/parser/DefaultJSONParser', 'java/util/Locale', 'java/lang/String' }
    stack: { 'com/alibaba/fastjson/parser/DefaultJSONParser', uninitialized 57, uninitialized 57, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 3fb8 0044 2ab4 004c b800 5212 53b6
    0x0000010: 0057 b800 3fc7 004c b800 3fb8 0044 2abb
    0x0000020: 0059 592a b400 462a b400 5bb9 0061 0100
    0x0000030: b800 6799 0012 4c4d 58bb 0069 592c 2cb7
    0x0000040: 006d a700 06b7 006e b500 4cb8 003f b800
    0x0000050: 442a b400 4c2a b400 5bb9 0072 0100 b600
    0x0000060: 78b8 003f b800 442a b400 4cb0          
  Stackmap Table:
    full_frame(@69,{Object[#2]},{Object[#2],Uninitialized[#31],Uninitialized[#31],Object[#122],Object[#124]})
    full_frame(@72,{Object[#2]},{Object[#2],Object[#89]})
    same_frame(@97)

[MASTER] 18:39:41.642 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
JSONScanner jSONScanner1 = new JSONScanner("{Yv0w[}/+f(}K#LX&");
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONScanner1);
TreeMap<Timestamp, BigInteger> treeMap1 = new TreeMap<Timestamp, BigInteger>();
defaultJSONParser1.parseObject((Map) treeMap1, (Object) classLoader1);

[MASTER] 18:39:41.642 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:41.965 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:41.965 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("{\"\":16,\"{\"creae asm serialize error, verson 1.2.68, class \":\"a stYing\",\"com.alibaba.fastjson.serializer.ArraySerializer\":{},\"expect ':' at \":true,\"..\":true,\", pos \":false,\"\":false}\":{},\"$\":{},\"xx\":false}");
ParserConfig parserConfig1 = new ParserConfig();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONReaderScanner1, parserConfig1);
DateFormat dateFormat1 = MockDateFormat.getDateInstance();
SimpleTimeZone simpleTimeZone1 = new SimpleTimeZone(1844, ")|");
defaultJSONParser1.setContext((Object) dateFormat1, (Object) simpleTimeZone1);
TreeMap<HttpCookie, ChoiceFormat> treeMap1 = new TreeMap<HttpCookie, ChoiceFormat>();
defaultJSONParser1.parseObject((Map) treeMap1, (Object) simpleTimeZone1);

[MASTER] 18:39:41.965 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:42.285 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:42.285 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("{\"\":16,\"{\"creae asm serialize error, verson 1.2.68, class \":\"a stYing\",\"com.alibaba.fastjson.serializer.ArraySerializer\":{},\"expect ':' at \":true,\"..\":true,\", pos \":false,\"\":false}\":{},\"$\":{},\"xx\":false}");
ParserConfig parserConfig1 = new ParserConfig();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONReaderScanner1, parserConfig1);
DateFormat dateFormat1 = MockDateFormat.getDateInstance();
SimpleTimeZone simpleTimeZone1 = new SimpleTimeZone(1844, "fastjson.parser.deny.internal", 0, 0, 1, 0, 0, 0, 1844, 1);
defaultJSONParser1.setContext((Object) dateFormat1, (Object) simpleTimeZone1);
BigInteger bigInteger1 = BigInteger.ZERO;
defaultJSONParser1.parseObject((Map) null, (Object) bigInteger1);

[MASTER] 18:39:42.285 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:42.593 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:42.593 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.global;
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"\":\"{\"create asm serializer error, verson 1.2.68, class \":\"a string\",\"com.alibaba.fastjson.serializer.ArraySerializer\":{},\"expect ':' at \":true,\"..\":true,\", pos \":false,\"\":false,\"isWriteClassName\":-99}\",\"size\":[],\"mark_context\":{},\"java.util.OptionalInt\":[],\"value2\":null,\"x\":null}", parserConfig1, 101);
TreeMap<HttpCookie, ChoiceFormat> treeMap1 = new TreeMap<HttpCookie, ChoiceFormat>();
BigInteger bigInteger1 = BigInteger.ZERO;
defaultJSONParser1.parseObject((Map) treeMap1, (Object) bigInteger1);

[MASTER] 18:39:42.593 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:42.610 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_274_1590165582593/com/alibaba/fastjson/parser/DefaultJSONParser_274_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_274_1590165582593/com/alibaba/fastjson/parser/DefaultJSONParser_274_tmp__ESTest_scaffolding.java]]
[MASTER] 18:39:42.610 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:42.610 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:42.610 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  cannot find symbol
   symbol:   variable parserConfig1
   location:  class com.alibaba.fastjson.parser.DefaultJSONParser_274_tmp__ESTest: 27
[MASTER] 18:39:42.611 [logback-1] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 18:39:42.611 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_274_1590165582593/com/alibaba/fastjson/parser/DefaultJSONParser_274_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 16:39:42 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson.parser;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.alibaba.fastjson.parser.DefaultJSONParser;
11: import com.alibaba.fastjson.parser.ParserConfig;
12: import java.net.HttpCookie;
13: import java.text.ChoiceFormat;
14: import java.text.Collator;
15: import java.util.Map;
16: import java.util.TreeMap;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
22: public class DefaultJSONParser_274_tmp__ESTest extends DefaultJSONParser_274_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       ParserConfig.getGlobalInstance();
27:       DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\", name \":0.0}", parserConfig1, 1865);
28:       TreeMap<HttpCookie, ChoiceFormat> treeMap1 = new TreeMap<HttpCookie, ChoiceFormat>();
29:       Collator collator1 = Collator.getInstance();
30:       defaultJSONParser1.parseObject((Map) treeMap1, (Object) collator1);
31:       assertEquals(1, treeMap1.size());
32:   }
33: }
RegularFileObject[/tmp/EvoSuite_274_1590165582593/com/alibaba/fastjson/parser/DefaultJSONParser_274_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 16:39:42 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson.parser;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class DefaultJSONParser_274_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.parser.DefaultJSONParser"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultJSONParser_274_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.serializer.AwtCodec",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
90:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
91:       "com.alibaba.fastjson.serializer.JSONSerializable",
92:       "com.alibaba.fastjson.serializer.SerializeWriter",
93:       "com.alibaba.fastjson.serializer.ReferenceCodec",
94:       "com.alibaba.fastjson.JSONException",
95:       "com.alibaba.fastjson.asm.TypeCollector$1",
96:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
97:       "com.alibaba.fastjson.serializer.ToStringSerializer",
98:       "com.alibaba.fastjson.serializer.SerialContext",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.serializer.ObjectSerializer",
103:       "com.alibaba.fastjson.serializer.MapSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
106:       "com.alibaba.fastjson.serializer.DateCodec",
107:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
114:       "com.alibaba.fastjson.util.FieldInfo",
115:       "com.alibaba.fastjson.serializer.PropertyFilter",
116:       "com.alibaba.fastjson.annotation.JSONField",
117:       "com.alibaba.fastjson.parser.SymbolTable",
118:       "com.alibaba.fastjson.serializer.NameFilter",
119:       "com.alibaba.fastjson.serializer.ListSerializer",
120:       "com.alibaba.fastjson.JSONArray",
121:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
122:       "com.alibaba.fastjson.JSONAware",
123:       "com.alibaba.fastjson.serializer.LongCodec",
124:       "com.alibaba.fastjson.util.ASMClassLoader",
125:       "com.alibaba.fastjson.PropertyNamingStrategy",
126:       "com.alibaba.fastjson.parser.JSONToken",
127:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
128:       "com.alibaba.fastjson.serializer.AppendableSerializer",
129:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
130:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
131:       "com.alibaba.fastjson.serializer.ContextValueFilter",
132:       "com.alibaba.fastjson.util.ServiceLoader",
133:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
134:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
135:       "com.alibaba.fastjson.parser.DefaultJSONParser",
136:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
137:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
138:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
139:       "com.alibaba.fastjson.serializer.BeanContext",
140:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
141:       "com.alibaba.fastjson.util.IdentityHashMap",
142:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
143:       "com.alibaba.fastjson.JSON",
144:       "com.alibaba.fastjson.serializer.StringCodec",
145:       "com.alibaba.fastjson.serializer.SerializeFilterable",
146:       "com.alibaba.fastjson.JSONWriter",
147:       "com.alibaba.fastjson.asm.Opcodes",
148:       "com.alibaba.fastjson.JSONReader",
149:       "com.alibaba.fastjson.JSONStreamAware",
150:       "com.alibaba.fastjson.asm.MethodWriter",
151:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
152:       "com.alibaba.fastjson.serializer.SerializerFeature",
153:       "com.alibaba.fastjson.TypeReference$1",
154:       "com.alibaba.fastjson.serializer.CalendarCodec",
155:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
156:       "com.alibaba.fastjson.util.IOUtils",
157:       "com.alibaba.fastjson.util.TypeUtils",
158:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
159:       "com.alibaba.fastjson.asm.ClassReader",
160:       "com.alibaba.fastjson.spi.Module",
161:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
162:       "com.alibaba.fastjson.serializer.MiscCodec",
163:       "com.alibaba.fastjson.util.IOUtils$1",
164:       "com.alibaba.fastjson.serializer.IntegerCodec",
165:       "com.alibaba.fastjson.serializer.SerializeFilter",
166:       "com.alibaba.fastjson.JSONPObject",
167:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
168:       "com.alibaba.fastjson.serializer.BeforeFilter",
169:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
170:       "com.alibaba.fastjson.serializer.ArraySerializer",
171:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
172:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
173:       "com.alibaba.fastjson.JSONObject",
174:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
175:       "com.alibaba.fastjson.serializer.CharacterCodec",
176:       "com.alibaba.fastjson.asm.TypeCollector",
177:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
178:       "com.alibaba.fastjson.asm.ByteVector",
179:       "com.alibaba.fastjson.parser.JSONLexer",
180:       "com.alibaba.fastjson.util.ASMClassLoader$1",
181:       "com.alibaba.fastjson.asm.Label",
182:       "com.alibaba.fastjson.asm.FieldWriter",
183:       "com.alibaba.fastjson.serializer.JSONSerializer",
184:       "com.alibaba.fastjson.util.JavaBeanInfo",
185:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
186:       "com.alibaba.fastjson.serializer.SerializeConfig",
187:       "com.alibaba.fastjson.serializer.AtomicCodec",
188:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
189:       "com.alibaba.fastjson.asm.Type",
190:       "com.alibaba.fastjson.serializer.FieldSerializer",
191:       "com.alibaba.fastjson.serializer.FloatCodec",
192:       "com.alibaba.fastjson.parser.JSONReaderScanner",
193:       "com.alibaba.fastjson.serializer.ValueFilter",
194:       "com.alibaba.fastjson.JSONPathException",
195:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
196:       "com.alibaba.fastjson.serializer.Labels",
197:       "com.alibaba.fastjson.serializer.CollectionCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
199:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
200:       "com.alibaba.fastjson.serializer.CharArrayCodec",
201:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
202:       "com.alibaba.fastjson.asm.MethodVisitor",
203:       "com.alibaba.fastjson.annotation.JSONCreator",
204:       "com.alibaba.fastjson.asm.MethodCollector",
205:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
206:       "com.alibaba.fastjson.annotation.JSONType",
207:       "com.alibaba.fastjson.serializer.LabelFilter",
208:       "com.alibaba.fastjson.util.UTF8Decoder",
209:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
210:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
211:       "com.alibaba.fastjson.serializer.DoubleSerializer",
212:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
213:       "com.alibaba.fastjson.serializer.BooleanCodec",
214:       "com.alibaba.fastjson.parser.ParserConfig",
215:       "com.alibaba.fastjson.parser.ParseContext",
216:       "com.alibaba.fastjson.parser.Feature",
217:       "com.alibaba.fastjson.serializer.PropertyPreFilter"
218:     );
219:   } 
220: 
221:   private static void resetClasses() {
222:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DefaultJSONParser_274_tmp__ESTest_scaffolding.class.getClassLoader()); 
223: 
224:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
225:       "com.alibaba.fastjson.parser.DefaultJSONParser",
226:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
227:       "com.alibaba.fastjson.util.IOUtils$1",
228:       "com.alibaba.fastjson.util.IOUtils",
229:       "com.alibaba.fastjson.util.IdentityHashMap",
230:       "com.alibaba.fastjson.util.ASMUtils",
231:       "com.alibaba.fastjson.parser.SymbolTable",
232:       "com.alibaba.fastjson.parser.Feature",
233:       "com.alibaba.fastjson.serializer.SerializerFeature",
234:       "com.alibaba.fastjson.JSON",
235:       "com.alibaba.fastjson.util.TypeUtils",
236:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
237:       "com.alibaba.fastjson.util.ASMClassLoader$1",
238:       "com.alibaba.fastjson.util.ASMClassLoader",
239:       "com.alibaba.fastjson.serializer.MiscCodec",
240:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
241:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
242:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
243:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
244:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
245:       "com.alibaba.fastjson.serializer.DateCodec",
246:       "com.alibaba.fastjson.serializer.CalendarCodec",
247:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
248:       "com.alibaba.fastjson.serializer.CollectionCodec",
249:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
250:       "com.alibaba.fastjson.serializer.StringCodec",
251:       "com.alibaba.fastjson.serializer.CharacterCodec",
252:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
253:       "com.alibaba.fastjson.serializer.IntegerCodec",
254:       "com.alibaba.fastjson.serializer.LongCodec",
255:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
256:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
257:       "com.alibaba.fastjson.serializer.FloatCodec",
258:       "com.alibaba.fastjson.serializer.BooleanCodec",
259:       "com.alibaba.fastjson.serializer.CharArrayCodec",
260:       "com.alibaba.fastjson.serializer.ReferenceCodec",
261:       "com.alibaba.fastjson.serializer.AtomicCodec",
262:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
263:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
264:       "com.alibaba.fastjson.parser.ParserConfig",
265:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
266:       "com.alibaba.fastjson.serializer.DoubleSerializer",
267:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
268:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
269:       "com.alibaba.fastjson.serializer.AppendableSerializer",
270:       "com.alibaba.fastjson.serializer.ToStringSerializer",
271:       "com.alibaba.fastjson.serializer.SerializeConfig",
272:       "com.alibaba.fastjson.JSONPath",
273:       "com.alibaba.fastjson.parser.JSONLexerBase",
274:       "com.alibaba.fastjson.parser.JSONReaderScanner",
275:       "com.alibaba.fastjson.JSONException",
276:       "com.alibaba.fastjson.parser.JSONToken",
277:       "com.alibaba.fastjson.parser.JSONScanner",
278:       "com.alibaba.fastjson.util.ServiceLoader",
279:       "com.alibaba.fastjson.util.JavaBeanInfo",
280:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
281:       "com.alibaba.fastjson.util.FieldInfo",
282:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
283:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
284:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
285:       "com.alibaba.fastjson.parser.ParseContext",
286:       "com.alibaba.fastjson.asm.ClassReader",
287:       "com.alibaba.fastjson.asm.TypeCollector$1",
288:       "com.alibaba.fastjson.asm.TypeCollector",
289:       "com.alibaba.fastjson.asm.Type",
290:       "com.alibaba.fastjson.asm.MethodCollector",
291:       "com.alibaba.fastjson.JSONObject",
292:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
293:       "com.alibaba.fastjson.JSONArray",
294:       "com.alibaba.fastjson.asm.ClassWriter",
295:       "com.alibaba.fastjson.asm.ByteVector",
296:       "com.alibaba.fastjson.asm.Item",
297:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
298:       "com.alibaba.fastjson.asm.FieldWriter",
299:       "com.alibaba.fastjson.asm.MethodWriter",
300:       "com.alibaba.fastjson.asm.Label",
301:       "com.alibaba.fastjson.serializer.SerializeWriter",
302:       "com.alibaba.fastjson.serializer.SerializeFilterable",
303:       "com.alibaba.fastjson.serializer.JSONSerializer",
304:       "com.alibaba.fastjson.serializer.MapSerializer",
305:       "com.alibaba.fastjson.serializer.SerialContext",
306:       "com.alibaba.fastjson.serializer.ListSerializer",
307:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
308:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
309:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
315:       "com.alibaba.fastjson.serializer.AwtCodec",
316:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
317:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
318:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.serializer.ArraySerializer",
321:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
322:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
323:       "com.alibaba.fastjson.PropertyNamingStrategy"
324:     );
325:   }
326: }

[MASTER] 18:39:42.631 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_275_1590165582611/com/alibaba/fastjson/parser/DefaultJSONParser_275_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_275_1590165582611/com/alibaba/fastjson/parser/DefaultJSONParser_275_tmp__ESTest_scaffolding.java]]
[MASTER] 18:39:42.631 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:42.631 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:42.632 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  cannot find symbol
   symbol:   variable classLoader1
   location:  class com.alibaba.fastjson.parser.DefaultJSONParser_275_tmp__ESTest: 25
[MASTER] 18:39:42.632 [logback-1] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 18:39:42.632 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_275_1590165582611/com/alibaba/fastjson/parser/DefaultJSONParser_275_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 16:39:42 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson.parser;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.alibaba.fastjson.parser.DefaultJSONParser;
11: import com.alibaba.fastjson.parser.ParserConfig;
12: import java.awt.Insets;
13: import java.util.Hashtable;
14: import java.util.Map;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
20: public class DefaultJSONParser_275_tmp__ESTest extends DefaultJSONParser_275_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       ClassLoader.getSystemClassLoader();
25:       ParserConfig parserConfig1 = new ParserConfig(classLoader1);
26:       DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"create asm serializer error, verson 1.2.68, class \":\"a string\",\"com.alibaba.fastjson.serializer.ArraySerializer\":{},\"expect ':' at \":[],\"..\":[],\", pos \":false,\"\":false,\"syntax error\":-99,\"TODO : \":\"a string\"}", parserConfig1, (-1316));
27:       Hashtable<Float, Insets> hashtable1 = new Hashtable<Float, Insets>();
28:       Object object1 = new Object();
29:       defaultJSONParser1.parseObject((Map) hashtable1, object1);
30:       assertFalse(hashtable1.isEmpty());
31:       assertEquals(8, hashtable1.size());
32:   }
33: }
RegularFileObject[/tmp/EvoSuite_275_1590165582611/com/alibaba/fastjson/parser/DefaultJSONParser_275_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 16:39:42 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson.parser;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class DefaultJSONParser_275_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.parser.DefaultJSONParser"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultJSONParser_275_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.serializer.AwtCodec",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
90:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
91:       "com.alibaba.fastjson.serializer.JSONSerializable",
92:       "com.alibaba.fastjson.serializer.SerializeWriter",
93:       "com.alibaba.fastjson.serializer.ReferenceCodec",
94:       "com.alibaba.fastjson.JSONException",
95:       "com.alibaba.fastjson.asm.TypeCollector$1",
96:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
97:       "com.alibaba.fastjson.serializer.ToStringSerializer",
98:       "com.alibaba.fastjson.serializer.SerialContext",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.serializer.ObjectSerializer",
103:       "com.alibaba.fastjson.serializer.MapSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
106:       "com.alibaba.fastjson.serializer.DateCodec",
107:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
114:       "com.alibaba.fastjson.util.FieldInfo",
115:       "com.alibaba.fastjson.serializer.PropertyFilter",
116:       "com.alibaba.fastjson.annotation.JSONField",
117:       "com.alibaba.fastjson.parser.SymbolTable",
118:       "com.alibaba.fastjson.serializer.NameFilter",
119:       "com.alibaba.fastjson.serializer.ListSerializer",
120:       "com.alibaba.fastjson.JSONArray",
121:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
122:       "com.alibaba.fastjson.JSONAware",
123:       "com.alibaba.fastjson.serializer.LongCodec",
124:       "com.alibaba.fastjson.util.ASMClassLoader",
125:       "com.alibaba.fastjson.PropertyNamingStrategy",
126:       "com.alibaba.fastjson.parser.JSONToken",
127:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
128:       "com.alibaba.fastjson.serializer.AppendableSerializer",
129:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
130:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
131:       "com.alibaba.fastjson.serializer.ContextValueFilter",
132:       "com.alibaba.fastjson.util.ServiceLoader",
133:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
134:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
135:       "com.alibaba.fastjson.parser.DefaultJSONParser",
136:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
137:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
138:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
139:       "com.alibaba.fastjson.serializer.BeanContext",
140:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
141:       "com.alibaba.fastjson.util.IdentityHashMap",
142:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
143:       "com.alibaba.fastjson.JSON",
144:       "com.alibaba.fastjson.serializer.StringCodec",
145:       "com.alibaba.fastjson.serializer.SerializeFilterable",
146:       "com.alibaba.fastjson.JSONWriter",
147:       "com.alibaba.fastjson.asm.Opcodes",
148:       "com.alibaba.fastjson.JSONReader",
149:       "com.alibaba.fastjson.JSONStreamAware",
150:       "com.alibaba.fastjson.asm.MethodWriter",
151:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
152:       "com.alibaba.fastjson.serializer.SerializerFeature",
153:       "com.alibaba.fastjson.TypeReference$1",
154:       "com.alibaba.fastjson.serializer.CalendarCodec",
155:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
156:       "com.alibaba.fastjson.util.IOUtils",
157:       "com.alibaba.fastjson.util.TypeUtils",
158:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
159:       "com.alibaba.fastjson.asm.ClassReader",
160:       "com.alibaba.fastjson.spi.Module",
161:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
162:       "com.alibaba.fastjson.serializer.MiscCodec",
163:       "com.alibaba.fastjson.util.IOUtils$1",
164:       "com.alibaba.fastjson.serializer.IntegerCodec",
165:       "com.alibaba.fastjson.serializer.SerializeFilter",
166:       "com.alibaba.fastjson.JSONPObject",
167:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
168:       "com.alibaba.fastjson.serializer.BeforeFilter",
169:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
170:       "com.alibaba.fastjson.serializer.ArraySerializer",
171:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
172:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
173:       "com.alibaba.fastjson.JSONObject",
174:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
175:       "com.alibaba.fastjson.serializer.CharacterCodec",
176:       "com.alibaba.fastjson.asm.TypeCollector",
177:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
178:       "com.alibaba.fastjson.asm.ByteVector",
179:       "com.alibaba.fastjson.parser.JSONLexer",
180:       "com.alibaba.fastjson.util.ASMClassLoader$1",
181:       "com.alibaba.fastjson.asm.Label",
182:       "com.alibaba.fastjson.asm.FieldWriter",
183:       "com.alibaba.fastjson.serializer.JSONSerializer",
184:       "com.alibaba.fastjson.util.JavaBeanInfo",
185:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
186:       "com.alibaba.fastjson.serializer.SerializeConfig",
187:       "com.alibaba.fastjson.serializer.AtomicCodec",
188:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
189:       "com.alibaba.fastjson.asm.Type",
190:       "com.alibaba.fastjson.serializer.FieldSerializer",
191:       "com.alibaba.fastjson.serializer.FloatCodec",
192:       "com.alibaba.fastjson.parser.JSONReaderScanner",
193:       "com.alibaba.fastjson.serializer.ValueFilter",
194:       "com.alibaba.fastjson.JSONPathException",
195:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
196:       "com.alibaba.fastjson.serializer.Labels",
197:       "com.alibaba.fastjson.serializer.CollectionCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
199:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
200:       "com.alibaba.fastjson.serializer.CharArrayCodec",
201:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
202:       "com.alibaba.fastjson.asm.MethodVisitor",
203:       "com.alibaba.fastjson.annotation.JSONCreator",
204:       "com.alibaba.fastjson.asm.MethodCollector",
205:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
206:       "com.alibaba.fastjson.annotation.JSONType",
207:       "com.alibaba.fastjson.serializer.LabelFilter",
208:       "com.alibaba.fastjson.util.UTF8Decoder",
209:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
210:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
211:       "com.alibaba.fastjson.serializer.DoubleSerializer",
212:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
213:       "com.alibaba.fastjson.serializer.BooleanCodec",
214:       "com.alibaba.fastjson.parser.ParserConfig",
215:       "com.alibaba.fastjson.parser.ParseContext",
216:       "com.alibaba.fastjson.parser.Feature",
217:       "com.alibaba.fastjson.serializer.PropertyPreFilter"
218:     );
219:   } 
220: 
221:   private static void resetClasses() {
222:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DefaultJSONParser_275_tmp__ESTest_scaffolding.class.getClassLoader()); 
223: 
224:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
225:       "com.alibaba.fastjson.parser.DefaultJSONParser",
226:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
227:       "com.alibaba.fastjson.util.IOUtils$1",
228:       "com.alibaba.fastjson.util.IOUtils",
229:       "com.alibaba.fastjson.util.IdentityHashMap",
230:       "com.alibaba.fastjson.util.ASMUtils",
231:       "com.alibaba.fastjson.parser.SymbolTable",
232:       "com.alibaba.fastjson.parser.Feature",
233:       "com.alibaba.fastjson.serializer.SerializerFeature",
234:       "com.alibaba.fastjson.JSON",
235:       "com.alibaba.fastjson.util.TypeUtils",
236:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
237:       "com.alibaba.fastjson.util.ASMClassLoader$1",
238:       "com.alibaba.fastjson.util.ASMClassLoader",
239:       "com.alibaba.fastjson.serializer.MiscCodec",
240:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
241:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
242:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
243:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
244:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
245:       "com.alibaba.fastjson.serializer.DateCodec",
246:       "com.alibaba.fastjson.serializer.CalendarCodec",
247:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
248:       "com.alibaba.fastjson.serializer.CollectionCodec",
249:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
250:       "com.alibaba.fastjson.serializer.StringCodec",
251:       "com.alibaba.fastjson.serializer.CharacterCodec",
252:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
253:       "com.alibaba.fastjson.serializer.IntegerCodec",
254:       "com.alibaba.fastjson.serializer.LongCodec",
255:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
256:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
257:       "com.alibaba.fastjson.serializer.FloatCodec",
258:       "com.alibaba.fastjson.serializer.BooleanCodec",
259:       "com.alibaba.fastjson.serializer.CharArrayCodec",
260:       "com.alibaba.fastjson.serializer.ReferenceCodec",
261:       "com.alibaba.fastjson.serializer.AtomicCodec",
262:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
263:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
264:       "com.alibaba.fastjson.parser.ParserConfig",
265:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
266:       "com.alibaba.fastjson.serializer.DoubleSerializer",
267:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
268:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
269:       "com.alibaba.fastjson.serializer.AppendableSerializer",
270:       "com.alibaba.fastjson.serializer.ToStringSerializer",
271:       "com.alibaba.fastjson.serializer.SerializeConfig",
272:       "com.alibaba.fastjson.JSONPath",
273:       "com.alibaba.fastjson.parser.JSONLexerBase",
274:       "com.alibaba.fastjson.parser.JSONReaderScanner",
275:       "com.alibaba.fastjson.JSONException",
276:       "com.alibaba.fastjson.parser.JSONToken",
277:       "com.alibaba.fastjson.parser.JSONScanner",
278:       "com.alibaba.fastjson.util.ServiceLoader",
279:       "com.alibaba.fastjson.util.JavaBeanInfo",
280:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
281:       "com.alibaba.fastjson.util.FieldInfo",
282:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
283:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
284:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
285:       "com.alibaba.fastjson.parser.ParseContext",
286:       "com.alibaba.fastjson.asm.ClassReader",
287:       "com.alibaba.fastjson.asm.TypeCollector$1",
288:       "com.alibaba.fastjson.asm.TypeCollector",
289:       "com.alibaba.fastjson.asm.Type",
290:       "com.alibaba.fastjson.asm.MethodCollector",
291:       "com.alibaba.fastjson.JSONObject",
292:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
293:       "com.alibaba.fastjson.JSONArray",
294:       "com.alibaba.fastjson.asm.ClassWriter",
295:       "com.alibaba.fastjson.asm.ByteVector",
296:       "com.alibaba.fastjson.asm.Item",
297:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
298:       "com.alibaba.fastjson.asm.FieldWriter",
299:       "com.alibaba.fastjson.asm.MethodWriter",
300:       "com.alibaba.fastjson.asm.Label",
301:       "com.alibaba.fastjson.serializer.SerializeWriter",
302:       "com.alibaba.fastjson.serializer.SerializeFilterable",
303:       "com.alibaba.fastjson.serializer.JSONSerializer",
304:       "com.alibaba.fastjson.serializer.MapSerializer",
305:       "com.alibaba.fastjson.serializer.SerialContext",
306:       "com.alibaba.fastjson.serializer.ListSerializer",
307:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
308:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
309:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
315:       "com.alibaba.fastjson.serializer.AwtCodec",
316:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
317:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
318:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.serializer.ArraySerializer",
321:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
322:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
323:       "com.alibaba.fastjson.PropertyNamingStrategy"
324:     );
325:   }
326: }

[MASTER] 18:39:42.978 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:42.979 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("{\"\":{},\"syntax error\":\"a string\",\"object key level > 512\":-99,\";Ljava/lang/String;Ljava/lang/Object;)V\":\"a string\",\"syntax error,except start with { or [,but actually start with \":null,\"$ref\":99,\"syntax error, position at \":[]}");
ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONReaderScanner1, jSONReaderScanner1, parserConfig1);
TreeMap<Point, Float> treeMap1 = new TreeMap<Point, Float>();
Collator collator1 = Collator.getInstance();
defaultJSONParser1.parseObject((Map) treeMap1, (Object) collator1);
assertEquals(7, treeMap1.size());
assertTrue(jSONReaderScanner1.isEOF());


[MASTER] 18:39:42.979 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:42.997 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_277_1590165582979/com/alibaba/fastjson/parser/DefaultJSONParser_277_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_277_1590165582979/com/alibaba/fastjson/parser/DefaultJSONParser_277_tmp__ESTest_scaffolding.java]]
[MASTER] 18:39:42.997 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:42.997 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:42.997 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  cannot find symbol
   symbol:   variable parserConfig1
   location:  class com.alibaba.fastjson.parser.DefaultJSONParser_277_tmp__ESTest: 27
[MASTER] 18:39:42.997 [logback-1] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 18:39:42.997 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_277_1590165582979/com/alibaba/fastjson/parser/DefaultJSONParser_277_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 16:39:42 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson.parser;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.alibaba.fastjson.parser.DefaultJSONParser;
11: import com.alibaba.fastjson.parser.ParserConfig;
12: import java.net.HttpCookie;
13: import java.text.ChoiceFormat;
14: import java.text.Collator;
15: import java.util.Map;
16: import java.util.TreeMap;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
22: public class DefaultJSONParser_277_tmp__ESTest extends DefaultJSONParser_277_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       ParserConfig.getGlobalInstance();
27:       DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"month\":false,\"\":{}}", parserConfig1, 1865);
28:       TreeMap<HttpCookie, ChoiceFormat> treeMap1 = new TreeMap<HttpCookie, ChoiceFormat>();
29:       Collator collator1 = Collator.getInstance();
30:       TreeMap treeMap2 = (TreeMap)defaultJSONParser1.parseObject((Map) treeMap1, (Object) collator1);
31:       assertEquals(2, treeMap2.size());
32:   }
33: }
RegularFileObject[/tmp/EvoSuite_277_1590165582979/com/alibaba/fastjson/parser/DefaultJSONParser_277_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 16:39:42 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson.parser;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class DefaultJSONParser_277_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.parser.DefaultJSONParser"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultJSONParser_277_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.serializer.AwtCodec",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
90:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
91:       "com.alibaba.fastjson.serializer.JSONSerializable",
92:       "com.alibaba.fastjson.serializer.SerializeWriter",
93:       "com.alibaba.fastjson.serializer.ReferenceCodec",
94:       "com.alibaba.fastjson.JSONException",
95:       "com.alibaba.fastjson.asm.TypeCollector$1",
96:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
97:       "com.alibaba.fastjson.serializer.ToStringSerializer",
98:       "com.alibaba.fastjson.serializer.SerialContext",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.serializer.ObjectSerializer",
103:       "com.alibaba.fastjson.serializer.MapSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
106:       "com.alibaba.fastjson.serializer.DateCodec",
107:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
114:       "com.alibaba.fastjson.util.FieldInfo",
115:       "com.alibaba.fastjson.serializer.PropertyFilter",
116:       "com.alibaba.fastjson.annotation.JSONField",
117:       "com.alibaba.fastjson.parser.SymbolTable",
118:       "com.alibaba.fastjson.serializer.NameFilter",
119:       "com.alibaba.fastjson.serializer.ListSerializer",
120:       "com.alibaba.fastjson.JSONArray",
121:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
122:       "com.alibaba.fastjson.JSONAware",
123:       "com.alibaba.fastjson.serializer.LongCodec",
124:       "com.alibaba.fastjson.util.ASMClassLoader",
125:       "com.alibaba.fastjson.PropertyNamingStrategy",
126:       "com.alibaba.fastjson.parser.JSONToken",
127:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
128:       "com.alibaba.fastjson.serializer.AppendableSerializer",
129:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
130:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
131:       "com.alibaba.fastjson.serializer.ContextValueFilter",
132:       "com.alibaba.fastjson.util.ServiceLoader",
133:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
134:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
135:       "com.alibaba.fastjson.parser.DefaultJSONParser",
136:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
137:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
138:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
139:       "com.alibaba.fastjson.serializer.BeanContext",
140:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
141:       "com.alibaba.fastjson.util.IdentityHashMap",
142:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
143:       "com.alibaba.fastjson.JSON",
144:       "com.alibaba.fastjson.serializer.StringCodec",
145:       "com.alibaba.fastjson.serializer.SerializeFilterable",
146:       "com.alibaba.fastjson.JSONWriter",
147:       "com.alibaba.fastjson.asm.Opcodes",
148:       "com.alibaba.fastjson.JSONReader",
149:       "com.alibaba.fastjson.JSONStreamAware",
150:       "com.alibaba.fastjson.asm.MethodWriter",
151:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
152:       "com.alibaba.fastjson.serializer.SerializerFeature",
153:       "com.alibaba.fastjson.TypeReference$1",
154:       "com.alibaba.fastjson.serializer.CalendarCodec",
155:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
156:       "com.alibaba.fastjson.util.IOUtils",
157:       "com.alibaba.fastjson.util.TypeUtils",
158:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
159:       "com.alibaba.fastjson.asm.ClassReader",
160:       "com.alibaba.fastjson.spi.Module",
161:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
162:       "com.alibaba.fastjson.serializer.MiscCodec",
163:       "com.alibaba.fastjson.util.IOUtils$1",
164:       "com.alibaba.fastjson.serializer.IntegerCodec",
165:       "com.alibaba.fastjson.serializer.SerializeFilter",
166:       "com.alibaba.fastjson.JSONPObject",
167:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
168:       "com.alibaba.fastjson.serializer.BeforeFilter",
169:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
170:       "com.alibaba.fastjson.serializer.ArraySerializer",
171:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
172:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
173:       "com.alibaba.fastjson.JSONObject",
174:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
175:       "com.alibaba.fastjson.serializer.CharacterCodec",
176:       "com.alibaba.fastjson.asm.TypeCollector",
177:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
178:       "com.alibaba.fastjson.asm.ByteVector",
179:       "com.alibaba.fastjson.parser.JSONLexer",
180:       "com.alibaba.fastjson.util.ASMClassLoader$1",
181:       "com.alibaba.fastjson.asm.Label",
182:       "com.alibaba.fastjson.asm.FieldWriter",
183:       "com.alibaba.fastjson.serializer.JSONSerializer",
184:       "com.alibaba.fastjson.util.JavaBeanInfo",
185:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
186:       "com.alibaba.fastjson.serializer.SerializeConfig",
187:       "com.alibaba.fastjson.serializer.AtomicCodec",
188:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
189:       "com.alibaba.fastjson.asm.Type",
190:       "com.alibaba.fastjson.serializer.FieldSerializer",
191:       "com.alibaba.fastjson.serializer.FloatCodec",
192:       "com.alibaba.fastjson.parser.JSONReaderScanner",
193:       "com.alibaba.fastjson.serializer.ValueFilter",
194:       "com.alibaba.fastjson.JSONPathException",
195:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
196:       "com.alibaba.fastjson.serializer.Labels",
197:       "com.alibaba.fastjson.serializer.CollectionCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
199:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
200:       "com.alibaba.fastjson.serializer.CharArrayCodec",
201:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
202:       "com.alibaba.fastjson.asm.MethodVisitor",
203:       "com.alibaba.fastjson.annotation.JSONCreator",
204:       "com.alibaba.fastjson.asm.MethodCollector",
205:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
206:       "com.alibaba.fastjson.annotation.JSONType",
207:       "com.alibaba.fastjson.serializer.LabelFilter",
208:       "com.alibaba.fastjson.util.UTF8Decoder",
209:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
210:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
211:       "com.alibaba.fastjson.serializer.DoubleSerializer",
212:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
213:       "com.alibaba.fastjson.serializer.BooleanCodec",
214:       "com.alibaba.fastjson.parser.ParserConfig",
215:       "com.alibaba.fastjson.parser.ParseContext",
216:       "com.alibaba.fastjson.parser.Feature",
217:       "com.alibaba.fastjson.serializer.PropertyPreFilter"
218:     );
219:   } 
220: 
221:   private static void resetClasses() {
222:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DefaultJSONParser_277_tmp__ESTest_scaffolding.class.getClassLoader()); 
223: 
224:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
225:       "com.alibaba.fastjson.parser.DefaultJSONParser",
226:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
227:       "com.alibaba.fastjson.util.IOUtils$1",
228:       "com.alibaba.fastjson.util.IOUtils",
229:       "com.alibaba.fastjson.util.IdentityHashMap",
230:       "com.alibaba.fastjson.util.ASMUtils",
231:       "com.alibaba.fastjson.parser.SymbolTable",
232:       "com.alibaba.fastjson.parser.Feature",
233:       "com.alibaba.fastjson.serializer.SerializerFeature",
234:       "com.alibaba.fastjson.JSON",
235:       "com.alibaba.fastjson.util.TypeUtils",
236:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
237:       "com.alibaba.fastjson.util.ASMClassLoader$1",
238:       "com.alibaba.fastjson.util.ASMClassLoader",
239:       "com.alibaba.fastjson.serializer.MiscCodec",
240:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
241:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
242:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
243:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
244:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
245:       "com.alibaba.fastjson.serializer.DateCodec",
246:       "com.alibaba.fastjson.serializer.CalendarCodec",
247:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
248:       "com.alibaba.fastjson.serializer.CollectionCodec",
249:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
250:       "com.alibaba.fastjson.serializer.StringCodec",
251:       "com.alibaba.fastjson.serializer.CharacterCodec",
252:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
253:       "com.alibaba.fastjson.serializer.IntegerCodec",
254:       "com.alibaba.fastjson.serializer.LongCodec",
255:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
256:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
257:       "com.alibaba.fastjson.serializer.FloatCodec",
258:       "com.alibaba.fastjson.serializer.BooleanCodec",
259:       "com.alibaba.fastjson.serializer.CharArrayCodec",
260:       "com.alibaba.fastjson.serializer.ReferenceCodec",
261:       "com.alibaba.fastjson.serializer.AtomicCodec",
262:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
263:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
264:       "com.alibaba.fastjson.parser.ParserConfig",
265:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
266:       "com.alibaba.fastjson.serializer.DoubleSerializer",
267:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
268:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
269:       "com.alibaba.fastjson.serializer.AppendableSerializer",
270:       "com.alibaba.fastjson.serializer.ToStringSerializer",
271:       "com.alibaba.fastjson.serializer.SerializeConfig",
272:       "com.alibaba.fastjson.JSONPath",
273:       "com.alibaba.fastjson.parser.JSONLexerBase",
274:       "com.alibaba.fastjson.parser.JSONReaderScanner",
275:       "com.alibaba.fastjson.JSONException",
276:       "com.alibaba.fastjson.parser.JSONToken",
277:       "com.alibaba.fastjson.parser.JSONScanner",
278:       "com.alibaba.fastjson.util.ServiceLoader",
279:       "com.alibaba.fastjson.util.JavaBeanInfo",
280:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
281:       "com.alibaba.fastjson.util.FieldInfo",
282:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
283:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
284:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
285:       "com.alibaba.fastjson.parser.ParseContext",
286:       "com.alibaba.fastjson.asm.ClassReader",
287:       "com.alibaba.fastjson.asm.TypeCollector$1",
288:       "com.alibaba.fastjson.asm.TypeCollector",
289:       "com.alibaba.fastjson.asm.Type",
290:       "com.alibaba.fastjson.asm.MethodCollector",
291:       "com.alibaba.fastjson.JSONObject",
292:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
293:       "com.alibaba.fastjson.JSONArray",
294:       "com.alibaba.fastjson.asm.ClassWriter",
295:       "com.alibaba.fastjson.asm.ByteVector",
296:       "com.alibaba.fastjson.asm.Item",
297:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
298:       "com.alibaba.fastjson.asm.FieldWriter",
299:       "com.alibaba.fastjson.asm.MethodWriter",
300:       "com.alibaba.fastjson.asm.Label",
301:       "com.alibaba.fastjson.serializer.SerializeWriter",
302:       "com.alibaba.fastjson.serializer.SerializeFilterable",
303:       "com.alibaba.fastjson.serializer.JSONSerializer",
304:       "com.alibaba.fastjson.serializer.MapSerializer",
305:       "com.alibaba.fastjson.serializer.SerialContext",
306:       "com.alibaba.fastjson.serializer.ListSerializer",
307:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
308:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
309:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
315:       "com.alibaba.fastjson.serializer.AwtCodec",
316:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
317:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
318:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.serializer.ArraySerializer",
321:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
322:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
323:       "com.alibaba.fastjson.PropertyNamingStrategy"
324:     );
325:   }
326: }

[MASTER] 18:39:43.345 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/parser/DefaultJSONParser.getDateFormat()Ljava/text/DateFormat; @63: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[4]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @63
    flags: { }
    locals: { 'com/alibaba/fastjson/parser/DefaultJSONParser', 'java/util/Locale', 'java/lang/String' }
    stack: { 'com/alibaba/fastjson/parser/DefaultJSONParser', uninitialized 57, uninitialized 57, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 3fb8 0044 2ab4 004c b800 5212 53b6
    0x0000010: 0057 b800 3fc7 004c b800 3fb8 0044 2abb
    0x0000020: 0059 592a b400 462a b400 5bb9 0061 0100
    0x0000030: b800 6799 0012 4c4d 58bb 0069 592c 2cb7
    0x0000040: 006d a700 06b7 006e b500 4cb8 003f b800
    0x0000050: 442a b400 4c2a b400 5bb9 0072 0100 b600
    0x0000060: 78b8 003f b800 442a b400 4cb0          
  Stackmap Table:
    full_frame(@69,{Object[#2]},{Object[#2],Uninitialized[#31],Uninitialized[#31],Object[#122],Object[#124]})
    full_frame(@72,{Object[#2]},{Object[#2],Object[#89]})
    same_frame(@97)

[MASTER] 18:39:43.345 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"\":[],\"syntax error\":-99,\";Ljava/lang/Object;C)C\":[[]],\"$.create asm serializer error, verson 1.2.68, class \":99,\"java.util.Collections$EmptyMap\":null}");
TreeMap<Point, Float> treeMap1 = new TreeMap<Point, Float>();
TreeMap treeMap2 = (TreeMap)defaultJSONParser1.parseObject((Map) treeMap1, (Object) treeMap1);
assertEquals(5, treeMap2.size());


[MASTER] 18:39:43.345 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:43.658 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:43.658 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
Class<RuleBasedCollator> class1 = RuleBasedCollator.class;
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("$", parserConfig1);
defaultJSONParser1.parseObject((Type) class1, (Object) class1);

[MASTER] 18:39:43.658 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:43.977 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:43.977 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Dimension dimension1 = new Dimension();
JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("[{}]");
ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(dimension1, jSONReaderScanner1, parserConfig1);
Class<Byte> class1 = Byte.TYPE;
defaultJSONParser1.parseObject((Type) class1, (Object) jSONReaderScanner1);

[MASTER] 18:39:43.978 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:44.288 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/parser/DefaultJSONParser.getDateFormat()Ljava/text/DateFormat; @63: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[4]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @63
    flags: { }
    locals: { 'com/alibaba/fastjson/parser/DefaultJSONParser', 'java/util/Locale', 'java/lang/String' }
    stack: { 'com/alibaba/fastjson/parser/DefaultJSONParser', uninitialized 57, uninitialized 57, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 3fb8 0044 2ab4 004c b800 5212 53b6
    0x0000010: 0057 b800 3fc7 004c b800 3fb8 0044 2abb
    0x0000020: 0059 592a b400 462a b400 5bb9 0061 0100
    0x0000030: b800 6799 0012 4c4d 58bb 0069 592c 2cb7
    0x0000040: 006d a700 06b7 006e b500 4cb8 003f b800
    0x0000050: 442a b400 4c2a b400 5bb9 0072 0100 b600
    0x0000060: 78b8 003f b800 442a b400 4cb0          
  Stackmap Table:
    full_frame(@69,{Object[#2]},{Object[#2],Uninitialized[#31],Uninitialized[#31],Object[#122],Object[#124]})
    full_frame(@72,{Object[#2]},{Object[#2],Object[#89]})
    same_frame(@97)

[MASTER] 18:39:44.289 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("{}");
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONReaderScanner1);
Class<Short> class1 = Short.TYPE;
defaultJSONParser1.parseObject((Type) class1, (Object) jSONReaderScanner1);
assertEquals(20, jSONReaderScanner1.token());


[MASTER] 18:39:44.289 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:44.622 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:44.623 [logback-1] WARN  JUnitAnalyzer - Failing test:
 char[] charArray1 = new char[1];
ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(charArray1, 1, parserConfig1, 1);
LinkedList<Collator> linkedList1 = new LinkedList<Collator>();
defaultJSONParser1.parseArray((Type) null, (Collection) linkedList1, (Object) linkedList1);

[MASTER] 18:39:44.623 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:45.047 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:45.047 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BigInteger bigInteger1 = BigInteger.TEN;
JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("{\"fruit\":\"Apple\",\"size\":true,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", 4);
ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
ParserConfig parserConfig1 = new ParserConfig(classLoader1);
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(bigInteger1, jSONReaderScanner1, parserConfig1);
HashMap<Float, Long> hashMap1 = new HashMap<Float, Long>();
defaultJSONParser1.checkMapResolve(hashMap1, bigInteger1);
assertEquals((short)10, bigInteger1.shortValue());


[MASTER] 18:39:45.047 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:45.067 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_284_1590165585048/com/alibaba/fastjson/parser/DefaultJSONParser_284_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_284_1590165585048/com/alibaba/fastjson/parser/DefaultJSONParser_284_tmp__ESTest_scaffolding.java]]
[MASTER] 18:39:45.067 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:45.067 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:45.068 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  cannot find symbol
   symbol:   variable parserConfig1
   location:  class com.alibaba.fastjson.parser.DefaultJSONParser_284_tmp__ESTest: 26
[MASTER] 18:39:45.068 [logback-1] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 18:39:45.068 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_284_1590165585048/com/alibaba/fastjson/parser/DefaultJSONParser_284_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 16:39:45 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson.parser;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.alibaba.fastjson.parser.DefaultJSONParser;
12: import com.alibaba.fastjson.parser.ParserConfig;
13: import java.text.Collator;
14: import java.util.Collection;
15: import java.util.TreeSet;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
21: public class DefaultJSONParser_284_tmp__ESTest extends DefaultJSONParser_284_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       ParserConfig.getGlobalInstance();
26:       DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("false", parserConfig1);
27:       Collator collator1 = Collator.getInstance();
28:       TreeSet<Object> treeSet1 = new TreeSet<Object>();
29:       // Undeclared exception!
30:       try { 
31:         defaultJSONParser1.parseArray((Collection) treeSet1, (Object) collator1);
32:         fail("Expecting exception: RuntimeException");
33:       
34:       } catch(RuntimeException e) {
35:          //
36:          // syntax error, expect [, actual false, pos 0, fieldName java.text.RuleBasedCollator@289747d6
37:          //
38:          verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
39:       }
40:   }
41: }
RegularFileObject[/tmp/EvoSuite_284_1590165585048/com/alibaba/fastjson/parser/DefaultJSONParser_284_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 16:39:45 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson.parser;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class DefaultJSONParser_284_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.parser.DefaultJSONParser"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultJSONParser_284_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.serializer.AwtCodec",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
90:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
91:       "com.alibaba.fastjson.serializer.JSONSerializable",
92:       "com.alibaba.fastjson.serializer.SerializeWriter",
93:       "com.alibaba.fastjson.serializer.ReferenceCodec",
94:       "com.alibaba.fastjson.JSONException",
95:       "com.alibaba.fastjson.asm.TypeCollector$1",
96:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
97:       "com.alibaba.fastjson.serializer.ToStringSerializer",
98:       "com.alibaba.fastjson.serializer.SerialContext",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.serializer.ObjectSerializer",
103:       "com.alibaba.fastjson.serializer.MapSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
106:       "com.alibaba.fastjson.serializer.DateCodec",
107:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
114:       "com.alibaba.fastjson.util.FieldInfo",
115:       "com.alibaba.fastjson.serializer.PropertyFilter",
116:       "com.alibaba.fastjson.annotation.JSONField",
117:       "com.alibaba.fastjson.parser.SymbolTable",
118:       "com.alibaba.fastjson.serializer.NameFilter",
119:       "com.alibaba.fastjson.serializer.ListSerializer",
120:       "com.alibaba.fastjson.JSONArray",
121:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
122:       "com.alibaba.fastjson.JSONAware",
123:       "com.alibaba.fastjson.serializer.LongCodec",
124:       "com.alibaba.fastjson.util.ASMClassLoader",
125:       "com.alibaba.fastjson.PropertyNamingStrategy",
126:       "com.alibaba.fastjson.parser.JSONToken",
127:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
128:       "com.alibaba.fastjson.serializer.AppendableSerializer",
129:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
130:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
131:       "com.alibaba.fastjson.serializer.ContextValueFilter",
132:       "com.alibaba.fastjson.util.ServiceLoader",
133:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
134:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
135:       "com.alibaba.fastjson.parser.DefaultJSONParser",
136:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
137:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
138:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
139:       "com.alibaba.fastjson.serializer.BeanContext",
140:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
141:       "com.alibaba.fastjson.util.IdentityHashMap",
142:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
143:       "com.alibaba.fastjson.JSON",
144:       "com.alibaba.fastjson.serializer.StringCodec",
145:       "com.alibaba.fastjson.serializer.SerializeFilterable",
146:       "com.alibaba.fastjson.JSONWriter",
147:       "com.alibaba.fastjson.asm.Opcodes",
148:       "com.alibaba.fastjson.JSONReader",
149:       "com.alibaba.fastjson.JSONStreamAware",
150:       "com.alibaba.fastjson.asm.MethodWriter",
151:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
152:       "com.alibaba.fastjson.serializer.SerializerFeature",
153:       "com.alibaba.fastjson.TypeReference$1",
154:       "com.alibaba.fastjson.serializer.CalendarCodec",
155:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
156:       "com.alibaba.fastjson.util.IOUtils",
157:       "com.alibaba.fastjson.util.TypeUtils",
158:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
159:       "com.alibaba.fastjson.asm.ClassReader",
160:       "com.alibaba.fastjson.spi.Module",
161:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
162:       "com.alibaba.fastjson.serializer.MiscCodec",
163:       "com.alibaba.fastjson.util.IOUtils$1",
164:       "com.alibaba.fastjson.serializer.IntegerCodec",
165:       "com.alibaba.fastjson.serializer.SerializeFilter",
166:       "com.alibaba.fastjson.JSONPObject",
167:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
168:       "com.alibaba.fastjson.serializer.BeforeFilter",
169:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
170:       "com.alibaba.fastjson.serializer.ArraySerializer",
171:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
172:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
173:       "com.alibaba.fastjson.JSONObject",
174:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
175:       "com.alibaba.fastjson.serializer.CharacterCodec",
176:       "com.alibaba.fastjson.asm.TypeCollector",
177:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
178:       "com.alibaba.fastjson.asm.ByteVector",
179:       "com.alibaba.fastjson.parser.JSONLexer",
180:       "com.alibaba.fastjson.util.ASMClassLoader$1",
181:       "com.alibaba.fastjson.asm.Label",
182:       "com.alibaba.fastjson.asm.FieldWriter",
183:       "com.alibaba.fastjson.serializer.JSONSerializer",
184:       "com.alibaba.fastjson.util.JavaBeanInfo",
185:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
186:       "com.alibaba.fastjson.serializer.SerializeConfig",
187:       "com.alibaba.fastjson.serializer.AtomicCodec",
188:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
189:       "com.alibaba.fastjson.asm.Type",
190:       "com.alibaba.fastjson.serializer.FieldSerializer",
191:       "com.alibaba.fastjson.serializer.FloatCodec",
192:       "com.alibaba.fastjson.parser.JSONReaderScanner",
193:       "com.alibaba.fastjson.serializer.ValueFilter",
194:       "com.alibaba.fastjson.JSONPathException",
195:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
196:       "com.alibaba.fastjson.serializer.Labels",
197:       "com.alibaba.fastjson.serializer.CollectionCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
199:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
200:       "com.alibaba.fastjson.serializer.CharArrayCodec",
201:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
202:       "com.alibaba.fastjson.asm.MethodVisitor",
203:       "com.alibaba.fastjson.annotation.JSONCreator",
204:       "com.alibaba.fastjson.asm.MethodCollector",
205:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
206:       "com.alibaba.fastjson.annotation.JSONType",
207:       "com.alibaba.fastjson.serializer.LabelFilter",
208:       "com.alibaba.fastjson.util.UTF8Decoder",
209:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
210:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
211:       "com.alibaba.fastjson.serializer.DoubleSerializer",
212:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
213:       "com.alibaba.fastjson.serializer.BooleanCodec",
214:       "com.alibaba.fastjson.parser.ParserConfig",
215:       "com.alibaba.fastjson.parser.ParseContext",
216:       "com.alibaba.fastjson.parser.Feature",
217:       "com.alibaba.fastjson.serializer.PropertyPreFilter"
218:     );
219:   } 
220: 
221:   private static void resetClasses() {
222:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DefaultJSONParser_284_tmp__ESTest_scaffolding.class.getClassLoader()); 
223: 
224:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
225:       "com.alibaba.fastjson.parser.DefaultJSONParser",
226:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
227:       "com.alibaba.fastjson.util.IOUtils$1",
228:       "com.alibaba.fastjson.util.IOUtils",
229:       "com.alibaba.fastjson.util.IdentityHashMap",
230:       "com.alibaba.fastjson.util.ASMUtils",
231:       "com.alibaba.fastjson.parser.SymbolTable",
232:       "com.alibaba.fastjson.parser.Feature",
233:       "com.alibaba.fastjson.serializer.SerializerFeature",
234:       "com.alibaba.fastjson.JSON",
235:       "com.alibaba.fastjson.util.TypeUtils",
236:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
237:       "com.alibaba.fastjson.util.ASMClassLoader$1",
238:       "com.alibaba.fastjson.util.ASMClassLoader",
239:       "com.alibaba.fastjson.serializer.MiscCodec",
240:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
241:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
242:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
243:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
244:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
245:       "com.alibaba.fastjson.serializer.DateCodec",
246:       "com.alibaba.fastjson.serializer.CalendarCodec",
247:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
248:       "com.alibaba.fastjson.serializer.CollectionCodec",
249:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
250:       "com.alibaba.fastjson.serializer.StringCodec",
251:       "com.alibaba.fastjson.serializer.CharacterCodec",
252:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
253:       "com.alibaba.fastjson.serializer.IntegerCodec",
254:       "com.alibaba.fastjson.serializer.LongCodec",
255:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
256:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
257:       "com.alibaba.fastjson.serializer.FloatCodec",
258:       "com.alibaba.fastjson.serializer.BooleanCodec",
259:       "com.alibaba.fastjson.serializer.CharArrayCodec",
260:       "com.alibaba.fastjson.serializer.ReferenceCodec",
261:       "com.alibaba.fastjson.serializer.AtomicCodec",
262:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
263:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
264:       "com.alibaba.fastjson.parser.ParserConfig",
265:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
266:       "com.alibaba.fastjson.serializer.DoubleSerializer",
267:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
268:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
269:       "com.alibaba.fastjson.serializer.AppendableSerializer",
270:       "com.alibaba.fastjson.serializer.ToStringSerializer",
271:       "com.alibaba.fastjson.serializer.SerializeConfig",
272:       "com.alibaba.fastjson.JSONPath",
273:       "com.alibaba.fastjson.parser.JSONLexerBase",
274:       "com.alibaba.fastjson.parser.JSONReaderScanner",
275:       "com.alibaba.fastjson.JSONException",
276:       "com.alibaba.fastjson.parser.JSONToken",
277:       "com.alibaba.fastjson.parser.JSONScanner",
278:       "com.alibaba.fastjson.util.ServiceLoader",
279:       "com.alibaba.fastjson.util.JavaBeanInfo",
280:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
281:       "com.alibaba.fastjson.util.FieldInfo",
282:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
283:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
284:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
285:       "com.alibaba.fastjson.parser.ParseContext",
286:       "com.alibaba.fastjson.asm.ClassReader",
287:       "com.alibaba.fastjson.asm.TypeCollector$1",
288:       "com.alibaba.fastjson.asm.TypeCollector",
289:       "com.alibaba.fastjson.asm.Type",
290:       "com.alibaba.fastjson.asm.MethodCollector",
291:       "com.alibaba.fastjson.JSONObject",
292:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
293:       "com.alibaba.fastjson.JSONArray",
294:       "com.alibaba.fastjson.asm.ClassWriter",
295:       "com.alibaba.fastjson.asm.ByteVector",
296:       "com.alibaba.fastjson.asm.Item",
297:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
298:       "com.alibaba.fastjson.asm.FieldWriter",
299:       "com.alibaba.fastjson.asm.MethodWriter",
300:       "com.alibaba.fastjson.asm.Label",
301:       "com.alibaba.fastjson.serializer.SerializeWriter",
302:       "com.alibaba.fastjson.serializer.SerializeFilterable",
303:       "com.alibaba.fastjson.serializer.JSONSerializer",
304:       "com.alibaba.fastjson.serializer.MapSerializer",
305:       "com.alibaba.fastjson.serializer.SerialContext",
306:       "com.alibaba.fastjson.serializer.ListSerializer",
307:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
308:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
309:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
315:       "com.alibaba.fastjson.serializer.AwtCodec",
316:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
317:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
318:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.serializer.ArraySerializer",
321:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
322:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
323:       "com.alibaba.fastjson.PropertyNamingStrategy"
324:     );
325:   }
326: }

[MASTER] 18:39:45.491 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:45.491 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("[G&VFhQRI", parserConfig1, 0);
JSONArray jSONArray1 = new JSONArray();
Class<Byte> class1 = Byte.class;
List<Byte> list1 = jSONArray1.toJavaList(class1);
defaultJSONParser1.parseArray((Collection) list1, (Object) parserConfig1);

[MASTER] 18:39:45.491 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:45.837 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/parser/DefaultJSONParser.getDateFormat()Ljava/text/DateFormat; @63: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[4]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @63
    flags: { }
    locals: { 'com/alibaba/fastjson/parser/DefaultJSONParser', 'java/util/Locale', 'java/lang/String' }
    stack: { 'com/alibaba/fastjson/parser/DefaultJSONParser', uninitialized 57, uninitialized 57, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 3fb8 0044 2ab4 004c b800 5212 53b6
    0x0000010: 0057 b800 3fc7 004c b800 3fb8 0044 2abb
    0x0000020: 0059 592a b400 462a b400 5bb9 0061 0100
    0x0000030: b800 6799 0012 4c4d 58bb 0069 592c 2cb7
    0x0000040: 006d a700 06b7 006e b500 4cb8 003f b800
    0x0000050: 442a b400 4c2a b400 5bb9 0072 0100 b600
    0x0000060: 78b8 003f b800 442a b400 4cb0          
  Stackmap Table:
    full_frame(@69,{Object[#2]},{Object[#2],Uninitialized[#31],Uninitialized[#31],Object[#122],Object[#124]})
    full_frame(@72,{Object[#2]},{Object[#2],Object[#89]})
    same_frame(@97)

[MASTER] 18:39:45.837 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask");
defaultJSONParser1.setContext((ParseContext) null);
assertEquals(1, DefaultJSONParser.NeedToResolve);


[MASTER] 18:39:45.837 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:46.143 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:46.143 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("\"a string\"", parserConfig1, (-409));
ParseContext parseContext1 = defaultJSONParser1.setContext((Object) parserConfig1, (Object) parserConfig1);
defaultJSONParser1.setContext(parseContext1);
assertEquals(0, defaultJSONParser1.resolveStatus);


[MASTER] 18:39:46.143 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:46.453 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:46.453 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.global;
ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("3+.6j:M+_S5%", parserConfig1, (-4));
ParseContext parseContext1 = defaultJSONParser1.setContext((ParseContext) null, (Object) null, (Object) classLoader1);
assertNull(parseContext1);


[MASTER] 18:39:46.453 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:46.749 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:46.750 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(" ~!`d", parserConfig1);
ParseContext parseContext1 = defaultJSONParser1.setContext((Object) parserConfig1, (Object) null);
assertNotNull(parseContext1);

ParseContext parseContext2 = defaultJSONParser1.setContext(parseContext1, (Object) null, (Object) parseContext1);
assertEquals(1, parseContext2.level);


[MASTER] 18:39:46.750 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:47.053 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:47.053 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Dimension dimension1 = new Dimension();
JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("{\"com.alibaba.fastjson.parser.DefaultJSONParser\":\"a string\"}");
ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(dimension1, jSONReaderScanner1, parserConfig1);
Hashtable<Float, Insets> hashtable1 = new Hashtable<Float, Insets>();
defaultJSONParser1.parseObject((Map) hashtable1);
defaultJSONParser1.parse((Object) dimension1);

[MASTER] 18:39:47.053 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:47.752 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:47.752 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Dimension dimension1 = new Dimension();
JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("{\"\":16,\"{\"create asm serializer error, verson 1.2.68, class \":\"a string\",\"com.alibaba.fastjson.serializer.ArraySerializer\":[null],\"expect ':' at \":true,\"..\":true,\", pos \":false,\"\":false}\":{\"{\"create asm serializer error, verson 1.2.68, class \":\"a string\",\"com.alibaba.fastjson.serializer.ArraySerializer\":[null],\"expect ':' at \":true,\"..\":true,\", pos \":false,\"\":false}\":\"a string\"},\"$\":{}}");
ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(dimension1, jSONReaderScanner1, parserConfig1);
DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(jSONReaderScanner1, defaultJSONParser1.lexer, parserConfig1);
Hashtable<Float, Insets> hashtable1 = new Hashtable<Float, Insets>();
defaultJSONParser1.parseObject((Map) hashtable1);
defaultJSONParser1.parse((Object) null);

[MASTER] 18:39:47.752 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:48.061 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:48.061 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Dimension dimension1 = new Dimension();
JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("99");
ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(dimension1, jSONReaderScanner1, parserConfig1);
Object object1 = defaultJSONParser1.parse((Object) dimension1);
assertEquals(99, object1);


[MASTER] 18:39:48.061 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:48.080 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_293_1590165588062/com/alibaba/fastjson/parser/DefaultJSONParser_293_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_293_1590165588062/com/alibaba/fastjson/parser/DefaultJSONParser_293_tmp__ESTest_scaffolding.java]]
[MASTER] 18:39:48.080 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:48.080 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:48.080 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  cannot find symbol
   symbol:   variable parserConfig1
   location:  class com.alibaba.fastjson.parser.DefaultJSONParser_293_tmp__ESTest: 25
[MASTER] 18:39:48.080 [logback-1] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 18:39:48.080 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_293_1590165588062/com/alibaba/fastjson/parser/DefaultJSONParser_293_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 16:39:48 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson.parser;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.alibaba.fastjson.parser.DefaultJSONParser;
12: import com.alibaba.fastjson.parser.ParserConfig;
13: import java.awt.Rectangle;
14: import java.awt.geom.Line2D;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
20: public class DefaultJSONParser_293_tmp__ESTest extends DefaultJSONParser_293_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       ParserConfig.getGlobalInstance();
25:       DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("[G&VFhQRI", parserConfig1, 12);
26:       Line2D.Double line2D_Double1 = new Line2D.Double();
27:       Rectangle rectangle1 = line2D_Double1.getBounds();
28:       // Undeclared exception!
29:       try { 
30:         defaultJSONParser1.parse((Object) rectangle1);
31:         fail("Expecting exception: RuntimeException");
32:       
33:       } catch(RuntimeException e) {
34:          //
35:          // syntax error, pos 2, line 1, column 3[G&VFhQRI
36:          //
37:          verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
38:       }
39:   }
40: }
RegularFileObject[/tmp/EvoSuite_293_1590165588062/com/alibaba/fastjson/parser/DefaultJSONParser_293_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 16:39:48 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson.parser;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class DefaultJSONParser_293_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.parser.DefaultJSONParser"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultJSONParser_293_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.serializer.AwtCodec",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
90:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
91:       "com.alibaba.fastjson.serializer.JSONSerializable",
92:       "com.alibaba.fastjson.serializer.SerializeWriter",
93:       "com.alibaba.fastjson.serializer.ReferenceCodec",
94:       "com.alibaba.fastjson.JSONException",
95:       "com.alibaba.fastjson.asm.TypeCollector$1",
96:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
97:       "com.alibaba.fastjson.serializer.ToStringSerializer",
98:       "com.alibaba.fastjson.serializer.SerialContext",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.serializer.ObjectSerializer",
103:       "com.alibaba.fastjson.serializer.MapSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
106:       "com.alibaba.fastjson.serializer.DateCodec",
107:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
114:       "com.alibaba.fastjson.util.FieldInfo",
115:       "com.alibaba.fastjson.serializer.PropertyFilter",
116:       "com.alibaba.fastjson.annotation.JSONField",
117:       "com.alibaba.fastjson.parser.SymbolTable",
118:       "com.alibaba.fastjson.serializer.NameFilter",
119:       "com.alibaba.fastjson.serializer.ListSerializer",
120:       "com.alibaba.fastjson.JSONArray",
121:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
122:       "com.alibaba.fastjson.JSONAware",
123:       "com.alibaba.fastjson.serializer.LongCodec",
124:       "com.alibaba.fastjson.util.ASMClassLoader",
125:       "com.alibaba.fastjson.PropertyNamingStrategy",
126:       "com.alibaba.fastjson.parser.JSONToken",
127:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
128:       "com.alibaba.fastjson.serializer.AppendableSerializer",
129:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
130:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
131:       "com.alibaba.fastjson.serializer.ContextValueFilter",
132:       "com.alibaba.fastjson.util.ServiceLoader",
133:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
134:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
135:       "com.alibaba.fastjson.parser.DefaultJSONParser",
136:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
137:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
138:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
139:       "com.alibaba.fastjson.serializer.BeanContext",
140:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
141:       "com.alibaba.fastjson.util.IdentityHashMap",
142:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
143:       "com.alibaba.fastjson.JSON",
144:       "com.alibaba.fastjson.serializer.StringCodec",
145:       "com.alibaba.fastjson.serializer.SerializeFilterable",
146:       "com.alibaba.fastjson.JSONWriter",
147:       "com.alibaba.fastjson.asm.Opcodes",
148:       "com.alibaba.fastjson.JSONReader",
149:       "com.alibaba.fastjson.JSONStreamAware",
150:       "com.alibaba.fastjson.asm.MethodWriter",
151:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
152:       "com.alibaba.fastjson.serializer.SerializerFeature",
153:       "com.alibaba.fastjson.TypeReference$1",
154:       "com.alibaba.fastjson.serializer.CalendarCodec",
155:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
156:       "com.alibaba.fastjson.util.IOUtils",
157:       "com.alibaba.fastjson.util.TypeUtils",
158:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
159:       "com.alibaba.fastjson.asm.ClassReader",
160:       "com.alibaba.fastjson.spi.Module",
161:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
162:       "com.alibaba.fastjson.serializer.MiscCodec",
163:       "com.alibaba.fastjson.util.IOUtils$1",
164:       "com.alibaba.fastjson.serializer.IntegerCodec",
165:       "com.alibaba.fastjson.serializer.SerializeFilter",
166:       "com.alibaba.fastjson.JSONPObject",
167:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
168:       "com.alibaba.fastjson.serializer.BeforeFilter",
169:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
170:       "com.alibaba.fastjson.serializer.ArraySerializer",
171:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
172:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
173:       "com.alibaba.fastjson.JSONObject",
174:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
175:       "com.alibaba.fastjson.serializer.CharacterCodec",
176:       "com.alibaba.fastjson.asm.TypeCollector",
177:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
178:       "com.alibaba.fastjson.asm.ByteVector",
179:       "com.alibaba.fastjson.parser.JSONLexer",
180:       "com.alibaba.fastjson.util.ASMClassLoader$1",
181:       "com.alibaba.fastjson.asm.Label",
182:       "com.alibaba.fastjson.asm.FieldWriter",
183:       "com.alibaba.fastjson.serializer.JSONSerializer",
184:       "com.alibaba.fastjson.util.JavaBeanInfo",
185:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
186:       "com.alibaba.fastjson.serializer.SerializeConfig",
187:       "com.alibaba.fastjson.serializer.AtomicCodec",
188:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
189:       "com.alibaba.fastjson.asm.Type",
190:       "com.alibaba.fastjson.serializer.FieldSerializer",
191:       "com.alibaba.fastjson.serializer.FloatCodec",
192:       "com.alibaba.fastjson.parser.JSONReaderScanner",
193:       "com.alibaba.fastjson.serializer.ValueFilter",
194:       "com.alibaba.fastjson.JSONPathException",
195:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
196:       "com.alibaba.fastjson.serializer.Labels",
197:       "com.alibaba.fastjson.serializer.CollectionCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
199:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
200:       "com.alibaba.fastjson.serializer.CharArrayCodec",
201:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
202:       "com.alibaba.fastjson.asm.MethodVisitor",
203:       "com.alibaba.fastjson.annotation.JSONCreator",
204:       "com.alibaba.fastjson.asm.MethodCollector",
205:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
206:       "com.alibaba.fastjson.annotation.JSONType",
207:       "com.alibaba.fastjson.serializer.LabelFilter",
208:       "com.alibaba.fastjson.util.UTF8Decoder",
209:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
210:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
211:       "com.alibaba.fastjson.serializer.DoubleSerializer",
212:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
213:       "com.alibaba.fastjson.serializer.BooleanCodec",
214:       "com.alibaba.fastjson.parser.ParserConfig",
215:       "com.alibaba.fastjson.parser.ParseContext",
216:       "com.alibaba.fastjson.parser.Feature",
217:       "com.alibaba.fastjson.serializer.PropertyPreFilter"
218:     );
219:   } 
220: 
221:   private static void resetClasses() {
222:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DefaultJSONParser_293_tmp__ESTest_scaffolding.class.getClassLoader()); 
223: 
224:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
225:       "com.alibaba.fastjson.parser.DefaultJSONParser",
226:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
227:       "com.alibaba.fastjson.util.IOUtils$1",
228:       "com.alibaba.fastjson.util.IOUtils",
229:       "com.alibaba.fastjson.util.IdentityHashMap",
230:       "com.alibaba.fastjson.util.ASMUtils",
231:       "com.alibaba.fastjson.parser.SymbolTable",
232:       "com.alibaba.fastjson.parser.Feature",
233:       "com.alibaba.fastjson.serializer.SerializerFeature",
234:       "com.alibaba.fastjson.JSON",
235:       "com.alibaba.fastjson.util.TypeUtils",
236:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
237:       "com.alibaba.fastjson.util.ASMClassLoader$1",
238:       "com.alibaba.fastjson.util.ASMClassLoader",
239:       "com.alibaba.fastjson.serializer.MiscCodec",
240:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
241:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
242:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
243:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
244:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
245:       "com.alibaba.fastjson.serializer.DateCodec",
246:       "com.alibaba.fastjson.serializer.CalendarCodec",
247:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
248:       "com.alibaba.fastjson.serializer.CollectionCodec",
249:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
250:       "com.alibaba.fastjson.serializer.StringCodec",
251:       "com.alibaba.fastjson.serializer.CharacterCodec",
252:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
253:       "com.alibaba.fastjson.serializer.IntegerCodec",
254:       "com.alibaba.fastjson.serializer.LongCodec",
255:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
256:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
257:       "com.alibaba.fastjson.serializer.FloatCodec",
258:       "com.alibaba.fastjson.serializer.BooleanCodec",
259:       "com.alibaba.fastjson.serializer.CharArrayCodec",
260:       "com.alibaba.fastjson.serializer.ReferenceCodec",
261:       "com.alibaba.fastjson.serializer.AtomicCodec",
262:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
263:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
264:       "com.alibaba.fastjson.parser.ParserConfig",
265:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
266:       "com.alibaba.fastjson.serializer.DoubleSerializer",
267:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
268:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
269:       "com.alibaba.fastjson.serializer.AppendableSerializer",
270:       "com.alibaba.fastjson.serializer.ToStringSerializer",
271:       "com.alibaba.fastjson.serializer.SerializeConfig",
272:       "com.alibaba.fastjson.JSONPath",
273:       "com.alibaba.fastjson.parser.JSONLexerBase",
274:       "com.alibaba.fastjson.parser.JSONReaderScanner",
275:       "com.alibaba.fastjson.JSONException",
276:       "com.alibaba.fastjson.parser.JSONToken",
277:       "com.alibaba.fastjson.parser.JSONScanner",
278:       "com.alibaba.fastjson.util.ServiceLoader",
279:       "com.alibaba.fastjson.util.JavaBeanInfo",
280:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
281:       "com.alibaba.fastjson.util.FieldInfo",
282:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
283:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
284:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
285:       "com.alibaba.fastjson.parser.ParseContext",
286:       "com.alibaba.fastjson.asm.ClassReader",
287:       "com.alibaba.fastjson.asm.TypeCollector$1",
288:       "com.alibaba.fastjson.asm.TypeCollector",
289:       "com.alibaba.fastjson.asm.Type",
290:       "com.alibaba.fastjson.asm.MethodCollector",
291:       "com.alibaba.fastjson.JSONObject",
292:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
293:       "com.alibaba.fastjson.JSONArray",
294:       "com.alibaba.fastjson.asm.ClassWriter",
295:       "com.alibaba.fastjson.asm.ByteVector",
296:       "com.alibaba.fastjson.asm.Item",
297:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
298:       "com.alibaba.fastjson.asm.FieldWriter",
299:       "com.alibaba.fastjson.asm.MethodWriter",
300:       "com.alibaba.fastjson.asm.Label",
301:       "com.alibaba.fastjson.serializer.SerializeWriter",
302:       "com.alibaba.fastjson.serializer.SerializeFilterable",
303:       "com.alibaba.fastjson.serializer.JSONSerializer",
304:       "com.alibaba.fastjson.serializer.MapSerializer",
305:       "com.alibaba.fastjson.serializer.SerialContext",
306:       "com.alibaba.fastjson.serializer.ListSerializer",
307:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
308:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
309:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
315:       "com.alibaba.fastjson.serializer.AwtCodec",
316:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
317:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
318:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.serializer.ArraySerializer",
321:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
322:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
323:       "com.alibaba.fastjson.PropertyNamingStrategy"
324:     );
325:   }
326: }

[MASTER] 18:39:48.392 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:48.392 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.global;
JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(";cXwZBk#}RZ");
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(parserConfig1, jSONReaderScanner1, parserConfig1);
defaultJSONParser1.parse((Object) parserConfig1);

[MASTER] 18:39:48.392 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:48.409 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_295_1590165588393/com/alibaba/fastjson/parser/DefaultJSONParser_295_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_295_1590165588393/com/alibaba/fastjson/parser/DefaultJSONParser_295_tmp__ESTest_scaffolding.java]]
[MASTER] 18:39:48.409 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:48.409 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:48.410 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  cannot find symbol
   symbol:   variable parserConfig1
   location:  class com.alibaba.fastjson.parser.DefaultJSONParser_295_tmp__ESTest: 22
[MASTER] 18:39:48.410 [logback-1] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 18:39:48.427 [logback-1] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 18:39:48.410 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_295_1590165588393/com/alibaba/fastjson/parser/DefaultJSONParser_295_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 16:39:48 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson.parser;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.alibaba.fastjson.parser.DefaultJSONParser;
11: import com.alibaba.fastjson.parser.ParserConfig;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
17: public class DefaultJSONParser_295_tmp__ESTest extends DefaultJSONParser_295_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       ParserConfig.getGlobalInstance();
22:       DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("false", parserConfig1);
23:       Object object1 = defaultJSONParser1.parse((Object) null);
24:       assertEquals(false, object1);
25:   }
26: }
RegularFileObject[/tmp/EvoSuite_295_1590165588393/com/alibaba/fastjson/parser/DefaultJSONParser_295_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 16:39:48 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson.parser;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class DefaultJSONParser_295_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.parser.DefaultJSONParser"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultJSONParser_295_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.serializer.AwtCodec",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
90:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
91:       "com.alibaba.fastjson.serializer.JSONSerializable",
92:       "com.alibaba.fastjson.serializer.SerializeWriter",
93:       "com.alibaba.fastjson.serializer.ReferenceCodec",
94:       "com.alibaba.fastjson.JSONException",
95:       "com.alibaba.fastjson.asm.TypeCollector$1",
96:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
97:       "com.alibaba.fastjson.serializer.ToStringSerializer",
98:       "com.alibaba.fastjson.serializer.SerialContext",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.serializer.ObjectSerializer",
103:       "com.alibaba.fastjson.serializer.MapSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
106:       "com.alibaba.fastjson.serializer.DateCodec",
107:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
114:       "com.alibaba.fastjson.util.FieldInfo",
115:       "com.alibaba.fastjson.serializer.PropertyFilter",
116:       "com.alibaba.fastjson.annotation.JSONField",
117:       "com.alibaba.fastjson.parser.SymbolTable",
118:       "com.alibaba.fastjson.serializer.NameFilter",
119:       "com.alibaba.fastjson.serializer.ListSerializer",
120:       "com.alibaba.fastjson.JSONArray",
121:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
122:       "com.alibaba.fastjson.JSONAware",
123:       "com.alibaba.fastjson.serializer.LongCodec",
124:       "com.alibaba.fastjson.util.ASMClassLoader",
125:       "com.alibaba.fastjson.PropertyNamingStrategy",
126:       "com.alibaba.fastjson.parser.JSONToken",
127:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
128:       "com.alibaba.fastjson.serializer.AppendableSerializer",
129:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
130:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
131:       "com.alibaba.fastjson.serializer.ContextValueFilter",
132:       "com.alibaba.fastjson.util.ServiceLoader",
133:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
134:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
135:       "com.alibaba.fastjson.parser.DefaultJSONParser",
136:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
137:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
138:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
139:       "com.alibaba.fastjson.serializer.BeanContext",
140:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
141:       "com.alibaba.fastjson.util.IdentityHashMap",
142:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
143:       "com.alibaba.fastjson.JSON",
144:       "com.alibaba.fastjson.serializer.StringCodec",
145:       "com.alibaba.fastjson.serializer.SerializeFilterable",
146:       "com.alibaba.fastjson.JSONWriter",
147:       "com.alibaba.fastjson.asm.Opcodes",
148:       "com.alibaba.fastjson.JSONReader",
149:       "com.alibaba.fastjson.JSONStreamAware",
150:       "com.alibaba.fastjson.asm.MethodWriter",
151:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
152:       "com.alibaba.fastjson.serializer.SerializerFeature",
153:       "com.alibaba.fastjson.TypeReference$1",
154:       "com.alibaba.fastjson.serializer.CalendarCodec",
155:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
156:       "com.alibaba.fastjson.util.IOUtils",
157:       "com.alibaba.fastjson.util.TypeUtils",
158:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
159:       "com.alibaba.fastjson.asm.ClassReader",
160:       "com.alibaba.fastjson.spi.Module",
161:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
162:       "com.alibaba.fastjson.serializer.MiscCodec",
163:       "com.alibaba.fastjson.util.IOUtils$1",
164:       "com.alibaba.fastjson.serializer.IntegerCodec",
165:       "com.alibaba.fastjson.serializer.SerializeFilter",
166:       "com.alibaba.fastjson.JSONPObject",
167:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
168:       "com.alibaba.fastjson.serializer.BeforeFilter",
169:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
170:       "com.alibaba.fastjson.serializer.ArraySerializer",
171:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
172:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
173:       "com.alibaba.fastjson.JSONObject",
174:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
175:       "com.alibaba.fastjson.serializer.CharacterCodec",
176:       "com.alibaba.fastjson.asm.TypeCollector",
177:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
178:       "com.alibaba.fastjson.asm.ByteVector",
179:       "com.alibaba.fastjson.parser.JSONLexer",
180:       "com.alibaba.fastjson.util.ASMClassLoader$1",
181:       "com.alibaba.fastjson.asm.Label",
182:       "com.alibaba.fastjson.asm.FieldWriter",
183:       "com.alibaba.fastjson.serializer.JSONSerializer",
184:       "com.alibaba.fastjson.util.JavaBeanInfo",
185:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
186:       "com.alibaba.fastjson.serializer.SerializeConfig",
187:       "com.alibaba.fastjson.serializer.AtomicCodec",
188:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
189:       "com.alibaba.fastjson.asm.Type",
190:       "com.alibaba.fastjson.serializer.FieldSerializer",
191:       "com.alibaba.fastjson.serializer.FloatCodec",
192:       "com.alibaba.fastjson.parser.JSONReaderScanner",
193:       "com.alibaba.fastjson.serializer.ValueFilter",
194:       "com.alibaba.fastjson.JSONPathException",
195:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
196:       "com.alibaba.fastjson.serializer.Labels",
197:       "com.alibaba.fastjson.serializer.CollectionCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
199:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
200:       "com.alibaba.fastjson.serializer.CharArrayCodec",
201:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
202:       "com.alibaba.fastjson.asm.MethodVisitor",
203:       "com.alibaba.fastjson.annotation.JSONCreator",
204:       "com.alibaba.fastjson.asm.MethodCollector",
205:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
206:       "com.alibaba.fastjson.annotation.JSONType",
207:       "com.alibaba.fastjson.serializer.LabelFilter",
208:       "com.alibaba.fastjson.util.UTF8Decoder",
209:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
210:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
211:       "com.alibaba.fastjson.serializer.DoubleSerializer",
212:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
213:       "com.alibaba.fastjson.serializer.BooleanCodec",
214:       "com.alibaba.fastjson.parser.ParserConfig",
215:       "com.alibaba.fastjson.parser.ParseContext",
216:       "com.alibaba.fastjson.parser.Feature",
217:       "com.alibaba.fastjson.serializer.PropertyPreFilter"
218:     );
219:   } 
220: 
221:   private static void resetClasses() {
222:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DefaultJSONParser_295_tmp__ESTest_scaffolding.class.getClassLoader()); 
223: 
224:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
225:       "com.alibaba.fastjson.parser.DefaultJSONParser",
226:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
227:       "com.alibaba.fastjson.util.IOUtils$1",
228:       "com.alibaba.fastjson.util.IOUtils",
229:       "com.alibaba.fastjson.util.IdentityHashMap",
230:       "com.alibaba.fastjson.util.ASMUtils",
231:       "com.alibaba.fastjson.parser.SymbolTable",
232:       "com.alibaba.fastjson.parser.Feature",
233:       "com.alibaba.fastjson.serializer.SerializerFeature",
234:       "com.alibaba.fastjson.JSON",
235:       "com.alibaba.fastjson.util.TypeUtils",
236:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
237:       "com.alibaba.fastjson.util.ASMClassLoader$1",
238:       "com.alibaba.fastjson.util.ASMClassLoader",
239:       "com.alibaba.fastjson.serializer.MiscCodec",
240:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
241:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
242:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
243:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
244:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
245:       "com.alibaba.fastjson.serializer.DateCodec",
246:       "com.alibaba.fastjson.serializer.CalendarCodec",
247:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
248:       "com.alibaba.fastjson.serializer.CollectionCodec",
249:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
250:       "com.alibaba.fastjson.serializer.StringCodec",
251:       "com.alibaba.fastjson.serializer.CharacterCodec",
252:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
253:       "com.alibaba.fastjson.serializer.IntegerCodec",
254:       "com.alibaba.fastjson.serializer.LongCodec",
255:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
256:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
257:       "com.alibaba.fastjson.serializer.FloatCodec",
258:       "com.alibaba.fastjson.serializer.BooleanCodec",
259:       "com.alibaba.fastjson.serializer.CharArrayCodec",
260:       "com.alibaba.fastjson.serializer.ReferenceCodec",
261:       "com.alibaba.fastjson.serializer.AtomicCodec",
262:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
263:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
264:       "com.alibaba.fastjson.parser.ParserConfig",
265:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
266:       "com.alibaba.fastjson.serializer.DoubleSerializer",
267:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
268:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
269:       "com.alibaba.fastjson.serializer.AppendableSerializer",
270:       "com.alibaba.fastjson.serializer.ToStringSerializer",
271:       "com.alibaba.fastjson.serializer.SerializeConfig",
272:       "com.alibaba.fastjson.JSONPath",
273:       "com.alibaba.fastjson.parser.JSONLexerBase",
274:       "com.alibaba.fastjson.parser.JSONReaderScanner",
275:       "com.alibaba.fastjson.JSONException",
276:       "com.alibaba.fastjson.parser.JSONToken",
277:       "com.alibaba.fastjson.parser.JSONScanner",
278:       "com.alibaba.fastjson.util.ServiceLoader",
279:       "com.alibaba.fastjson.util.JavaBeanInfo",
280:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
281:       "com.alibaba.fastjson.util.FieldInfo",
282:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
283:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
284:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
285:       "com.alibaba.fastjson.parser.ParseContext",
286:       "com.alibaba.fastjson.asm.ClassReader",
287:       "com.alibaba.fastjson.asm.TypeCollector$1",
288:       "com.alibaba.fastjson.asm.TypeCollector",
289:       "com.alibaba.fastjson.asm.Type",
290:       "com.alibaba.fastjson.asm.MethodCollector",
291:       "com.alibaba.fastjson.JSONObject",
292:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
293:       "com.alibaba.fastjson.JSONArray",
294:       "com.alibaba.fastjson.asm.ClassWriter",
295:       "com.alibaba.fastjson.asm.ByteVector",
296:       "com.alibaba.fastjson.asm.Item",
297:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
298:       "com.alibaba.fastjson.asm.FieldWriter",
299:       "com.alibaba.fastjson.asm.MethodWriter",
300:       "com.alibaba.fastjson.asm.Label",
301:       "com.alibaba.fastjson.serializer.SerializeWriter",
302:       "com.alibaba.fastjson.serializer.SerializeFilterable",
303:       "com.alibaba.fastjson.serializer.JSONSerializer",
304:       "com.alibaba.fastjson.serializer.MapSerializer",
305:       "com.alibaba.fastjson.serializer.SerialContext",
306:       "com.alibaba.fastjson.serializer.ListSerializer",
307:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
308:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
309:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
315:       "com.alibaba.fastjson.serializer.AwtCodec",
316:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
317:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
318:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.serializer.ArraySerializer",
321:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
322:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
323:       "com.alibaba.fastjson.PropertyNamingStrategy"
324:     );
325:   }
326: }

[MASTER] 18:39:48.426 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_296_1590165588410/com/alibaba/fastjson/parser/DefaultJSONParser_296_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_296_1590165588410/com/alibaba/fastjson/parser/DefaultJSONParser_296_tmp__ESTest_scaffolding.java]]
[MASTER] 18:39:48.426 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:48.426 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:48.426 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  cannot find symbol
   symbol:   variable parserConfig1
   location:  class com.alibaba.fastjson.parser.DefaultJSONParser_296_tmp__ESTest: 22
[MASTER] 18:39:48.427 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_296_1590165588410/com/alibaba/fastjson/parser/DefaultJSONParser_296_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 16:39:48 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson.parser;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.alibaba.fastjson.parser.DefaultJSONParser;
11: import com.alibaba.fastjson.parser.ParserConfig;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
17: public class DefaultJSONParser_296_tmp__ESTest extends DefaultJSONParser_296_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       ParserConfig.getGlobalInstance();
22:       DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("true", parserConfig1, (-409));
23:       Class<Byte> class1 = Byte.TYPE;
24:       Object object1 = defaultJSONParser1.parse((Object) class1);
25:       assertEquals(true, object1);
26:   }
27: }
RegularFileObject[/tmp/EvoSuite_296_1590165588410/com/alibaba/fastjson/parser/DefaultJSONParser_296_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 16:39:48 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson.parser;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class DefaultJSONParser_296_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.parser.DefaultJSONParser"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultJSONParser_296_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.serializer.AwtCodec",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
90:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
91:       "com.alibaba.fastjson.serializer.JSONSerializable",
92:       "com.alibaba.fastjson.serializer.SerializeWriter",
93:       "com.alibaba.fastjson.serializer.ReferenceCodec",
94:       "com.alibaba.fastjson.JSONException",
95:       "com.alibaba.fastjson.asm.TypeCollector$1",
96:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
97:       "com.alibaba.fastjson.serializer.ToStringSerializer",
98:       "com.alibaba.fastjson.serializer.SerialContext",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.serializer.ObjectSerializer",
103:       "com.alibaba.fastjson.serializer.MapSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
106:       "com.alibaba.fastjson.serializer.DateCodec",
107:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
114:       "com.alibaba.fastjson.util.FieldInfo",
115:       "com.alibaba.fastjson.serializer.PropertyFilter",
116:       "com.alibaba.fastjson.annotation.JSONField",
117:       "com.alibaba.fastjson.parser.SymbolTable",
118:       "com.alibaba.fastjson.serializer.NameFilter",
119:       "com.alibaba.fastjson.serializer.ListSerializer",
120:       "com.alibaba.fastjson.JSONArray",
121:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
122:       "com.alibaba.fastjson.JSONAware",
123:       "com.alibaba.fastjson.serializer.LongCodec",
124:       "com.alibaba.fastjson.util.ASMClassLoader",
125:       "com.alibaba.fastjson.PropertyNamingStrategy",
126:       "com.alibaba.fastjson.parser.JSONToken",
127:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
128:       "com.alibaba.fastjson.serializer.AppendableSerializer",
129:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
130:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
131:       "com.alibaba.fastjson.serializer.ContextValueFilter",
132:       "com.alibaba.fastjson.util.ServiceLoader",
133:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
134:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
135:       "com.alibaba.fastjson.parser.DefaultJSONParser",
136:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
137:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
138:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
139:       "com.alibaba.fastjson.serializer.BeanContext",
140:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
141:       "com.alibaba.fastjson.util.IdentityHashMap",
142:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
143:       "com.alibaba.fastjson.JSON",
144:       "com.alibaba.fastjson.serializer.StringCodec",
145:       "com.alibaba.fastjson.serializer.SerializeFilterable",
146:       "com.alibaba.fastjson.JSONWriter",
147:       "com.alibaba.fastjson.asm.Opcodes",
148:       "com.alibaba.fastjson.JSONReader",
149:       "com.alibaba.fastjson.JSONStreamAware",
150:       "com.alibaba.fastjson.asm.MethodWriter",
151:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
152:       "com.alibaba.fastjson.serializer.SerializerFeature",
153:       "com.alibaba.fastjson.TypeReference$1",
154:       "com.alibaba.fastjson.serializer.CalendarCodec",
155:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
156:       "com.alibaba.fastjson.util.IOUtils",
157:       "com.alibaba.fastjson.util.TypeUtils",
158:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
159:       "com.alibaba.fastjson.asm.ClassReader",
160:       "com.alibaba.fastjson.spi.Module",
161:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
162:       "com.alibaba.fastjson.serializer.MiscCodec",
163:       "com.alibaba.fastjson.util.IOUtils$1",
164:       "com.alibaba.fastjson.serializer.IntegerCodec",
165:       "com.alibaba.fastjson.serializer.SerializeFilter",
166:       "com.alibaba.fastjson.JSONPObject",
167:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
168:       "com.alibaba.fastjson.serializer.BeforeFilter",
169:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
170:       "com.alibaba.fastjson.serializer.ArraySerializer",
171:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
172:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
173:       "com.alibaba.fastjson.JSONObject",
174:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
175:       "com.alibaba.fastjson.serializer.CharacterCodec",
176:       "com.alibaba.fastjson.asm.TypeCollector",
177:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
178:       "com.alibaba.fastjson.asm.ByteVector",
179:       "com.alibaba.fastjson.parser.JSONLexer",
180:       "com.alibaba.fastjson.util.ASMClassLoader$1",
181:       "com.alibaba.fastjson.asm.Label",
182:       "com.alibaba.fastjson.asm.FieldWriter",
183:       "com.alibaba.fastjson.serializer.JSONSerializer",
184:       "com.alibaba.fastjson.util.JavaBeanInfo",
185:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
186:       "com.alibaba.fastjson.serializer.SerializeConfig",
187:       "com.alibaba.fastjson.serializer.AtomicCodec",
188:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
189:       "com.alibaba.fastjson.asm.Type",
190:       "com.alibaba.fastjson.serializer.FieldSerializer",
191:       "com.alibaba.fastjson.serializer.FloatCodec",
192:       "com.alibaba.fastjson.parser.JSONReaderScanner",
193:       "com.alibaba.fastjson.serializer.ValueFilter",
194:       "com.alibaba.fastjson.JSONPathException",
195:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
196:       "com.alibaba.fastjson.serializer.Labels",
197:       "com.alibaba.fastjson.serializer.CollectionCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
199:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
200:       "com.alibaba.fastjson.serializer.CharArrayCodec",
201:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
202:       "com.alibaba.fastjson.asm.MethodVisitor",
203:       "com.alibaba.fastjson.annotation.JSONCreator",
204:       "com.alibaba.fastjson.asm.MethodCollector",
205:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
206:       "com.alibaba.fastjson.annotation.JSONType",
207:       "com.alibaba.fastjson.serializer.LabelFilter",
208:       "com.alibaba.fastjson.util.UTF8Decoder",
209:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
210:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
211:       "com.alibaba.fastjson.serializer.DoubleSerializer",
212:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
213:       "com.alibaba.fastjson.serializer.BooleanCodec",
214:       "com.alibaba.fastjson.parser.ParserConfig",
215:       "com.alibaba.fastjson.parser.ParseContext",
216:       "com.alibaba.fastjson.parser.Feature",
217:       "com.alibaba.fastjson.serializer.PropertyPreFilter"
218:     );
219:   } 
220: 
221:   private static void resetClasses() {
222:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DefaultJSONParser_296_tmp__ESTest_scaffolding.class.getClassLoader()); 
223: 
224:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
225:       "com.alibaba.fastjson.parser.DefaultJSONParser",
226:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
227:       "com.alibaba.fastjson.util.IOUtils$1",
228:       "com.alibaba.fastjson.util.IOUtils",
229:       "com.alibaba.fastjson.util.IdentityHashMap",
230:       "com.alibaba.fastjson.util.ASMUtils",
231:       "com.alibaba.fastjson.parser.SymbolTable",
232:       "com.alibaba.fastjson.parser.Feature",
233:       "com.alibaba.fastjson.serializer.SerializerFeature",
234:       "com.alibaba.fastjson.JSON",
235:       "com.alibaba.fastjson.util.TypeUtils",
236:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
237:       "com.alibaba.fastjson.util.ASMClassLoader$1",
238:       "com.alibaba.fastjson.util.ASMClassLoader",
239:       "com.alibaba.fastjson.serializer.MiscCodec",
240:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
241:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
242:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
243:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
244:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
245:       "com.alibaba.fastjson.serializer.DateCodec",
246:       "com.alibaba.fastjson.serializer.CalendarCodec",
247:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
248:       "com.alibaba.fastjson.serializer.CollectionCodec",
249:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
250:       "com.alibaba.fastjson.serializer.StringCodec",
251:       "com.alibaba.fastjson.serializer.CharacterCodec",
252:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
253:       "com.alibaba.fastjson.serializer.IntegerCodec",
254:       "com.alibaba.fastjson.serializer.LongCodec",
255:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
256:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
257:       "com.alibaba.fastjson.serializer.FloatCodec",
258:       "com.alibaba.fastjson.serializer.BooleanCodec",
259:       "com.alibaba.fastjson.serializer.CharArrayCodec",
260:       "com.alibaba.fastjson.serializer.ReferenceCodec",
261:       "com.alibaba.fastjson.serializer.AtomicCodec",
262:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
263:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
264:       "com.alibaba.fastjson.parser.ParserConfig",
265:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
266:       "com.alibaba.fastjson.serializer.DoubleSerializer",
267:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
268:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
269:       "com.alibaba.fastjson.serializer.AppendableSerializer",
270:       "com.alibaba.fastjson.serializer.ToStringSerializer",
271:       "com.alibaba.fastjson.serializer.SerializeConfig",
272:       "com.alibaba.fastjson.JSONPath",
273:       "com.alibaba.fastjson.parser.JSONLexerBase",
274:       "com.alibaba.fastjson.parser.JSONReaderScanner",
275:       "com.alibaba.fastjson.JSONException",
276:       "com.alibaba.fastjson.parser.JSONToken",
277:       "com.alibaba.fastjson.parser.JSONScanner",
278:       "com.alibaba.fastjson.util.ServiceLoader",
279:       "com.alibaba.fastjson.util.JavaBeanInfo",
280:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
281:       "com.alibaba.fastjson.util.FieldInfo",
282:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
283:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
284:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
285:       "com.alibaba.fastjson.parser.ParseContext",
286:       "com.alibaba.fastjson.asm.ClassReader",
287:       "com.alibaba.fastjson.asm.TypeCollector$1",
288:       "com.alibaba.fastjson.asm.TypeCollector",
289:       "com.alibaba.fastjson.asm.Type",
290:       "com.alibaba.fastjson.asm.MethodCollector",
291:       "com.alibaba.fastjson.JSONObject",
292:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
293:       "com.alibaba.fastjson.JSONArray",
294:       "com.alibaba.fastjson.asm.ClassWriter",
295:       "com.alibaba.fastjson.asm.ByteVector",
296:       "com.alibaba.fastjson.asm.Item",
297:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
298:       "com.alibaba.fastjson.asm.FieldWriter",
299:       "com.alibaba.fastjson.asm.MethodWriter",
300:       "com.alibaba.fastjson.asm.Label",
301:       "com.alibaba.fastjson.serializer.SerializeWriter",
302:       "com.alibaba.fastjson.serializer.SerializeFilterable",
303:       "com.alibaba.fastjson.serializer.JSONSerializer",
304:       "com.alibaba.fastjson.serializer.MapSerializer",
305:       "com.alibaba.fastjson.serializer.SerialContext",
306:       "com.alibaba.fastjson.serializer.ListSerializer",
307:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
308:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
309:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
315:       "com.alibaba.fastjson.serializer.AwtCodec",
316:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
317:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
318:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.serializer.ArraySerializer",
321:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
322:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
323:       "com.alibaba.fastjson.PropertyNamingStrategy"
324:     );
325:   }
326: }

[MASTER] 18:39:48.732 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/parser/DefaultJSONParser.getDateFormat()Ljava/text/DateFormat; @63: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[4]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @63
    flags: { }
    locals: { 'com/alibaba/fastjson/parser/DefaultJSONParser', 'java/util/Locale', 'java/lang/String' }
    stack: { 'com/alibaba/fastjson/parser/DefaultJSONParser', uninitialized 57, uninitialized 57, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 3fb8 0044 2ab4 004c b800 5212 53b6
    0x0000010: 0057 b800 3fc7 004c b800 3fb8 0044 2abb
    0x0000020: 0059 592a b400 462a b400 5bb9 0061 0100
    0x0000030: b800 6799 0012 4c4d 58bb 0069 592c 2cb7
    0x0000040: 006d a700 06b7 006e b500 4cb8 003f b800
    0x0000050: 442a b400 4c2a b400 5bb9 0072 0100 b600
    0x0000060: 78b8 003f b800 442a b400 4cb0          
  Stackmap Table:
    full_frame(@69,{Object[#2]},{Object[#2],Uninitialized[#31],Uninitialized[#31],Object[#122],Object[#124]})
    full_frame(@72,{Object[#2]},{Object[#2],Object[#89]})
    same_frame(@97)

[MASTER] 18:39:48.732 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("_aV");
Long long1 = new Long(776L);
defaultJSONParser1.parse((Object) long1);

[MASTER] 18:39:48.732 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:48.750 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_298_1590165588733/com/alibaba/fastjson/parser/DefaultJSONParser_298_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_298_1590165588733/com/alibaba/fastjson/parser/DefaultJSONParser_298_tmp__ESTest_scaffolding.java]]
[MASTER] 18:39:48.750 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:48.750 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:48.750 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  cannot find symbol
   symbol:   variable classLoader1
   location:  class com.alibaba.fastjson.parser.DefaultJSONParser_298_tmp__ESTest: 25
[MASTER] 18:39:48.751 [logback-1] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 18:39:48.751 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_298_1590165588733/com/alibaba/fastjson/parser/DefaultJSONParser_298_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 16:39:48 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson.parser;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.alibaba.fastjson.parser.DefaultJSONParser;
12: import com.alibaba.fastjson.parser.JSONReaderScanner;
13: import com.alibaba.fastjson.parser.ParserConfig;
14: import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
20: public class DefaultJSONParser_298_tmp__ESTest extends DefaultJSONParser_298_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       ClassLoader.getSystemClassLoader();
25:       ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
26:       ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory1);
27:       DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{}", parserConfig1, 101);
28:       DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(defaultJSONParser1.lexer);
29:       JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("{\"create asm serializer error, verson 1.2.68, class \":\"a string\",\"com.alibaba.fastjson.serializer.ArraySerializer\":{},\"expect ':' at \":true,\"..\":false,\"\":false}");
30:       // Undeclared exception!
31:       try { 
32:         defaultJSONParser1.parse((Object) jSONReaderScanner1);
33:         fail("Expecting exception: RuntimeException");
34:       
35:       } catch(RuntimeException e) {
36:          //
37:          // syntax error, pos 2, line 1, column 3{}
38:          //
39:          verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
40:       }
41:   }
42: }
RegularFileObject[/tmp/EvoSuite_298_1590165588733/com/alibaba/fastjson/parser/DefaultJSONParser_298_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 16:39:48 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson.parser;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class DefaultJSONParser_298_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.parser.DefaultJSONParser"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultJSONParser_298_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.serializer.AwtCodec",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
90:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
91:       "com.alibaba.fastjson.serializer.JSONSerializable",
92:       "com.alibaba.fastjson.serializer.SerializeWriter",
93:       "com.alibaba.fastjson.serializer.ReferenceCodec",
94:       "com.alibaba.fastjson.JSONException",
95:       "com.alibaba.fastjson.asm.TypeCollector$1",
96:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
97:       "com.alibaba.fastjson.serializer.ToStringSerializer",
98:       "com.alibaba.fastjson.serializer.SerialContext",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.serializer.ObjectSerializer",
103:       "com.alibaba.fastjson.serializer.MapSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
106:       "com.alibaba.fastjson.serializer.DateCodec",
107:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
114:       "com.alibaba.fastjson.util.FieldInfo",
115:       "com.alibaba.fastjson.serializer.PropertyFilter",
116:       "com.alibaba.fastjson.annotation.JSONField",
117:       "com.alibaba.fastjson.parser.SymbolTable",
118:       "com.alibaba.fastjson.serializer.NameFilter",
119:       "com.alibaba.fastjson.serializer.ListSerializer",
120:       "com.alibaba.fastjson.JSONArray",
121:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
122:       "com.alibaba.fastjson.JSONAware",
123:       "com.alibaba.fastjson.serializer.LongCodec",
124:       "com.alibaba.fastjson.util.ASMClassLoader",
125:       "com.alibaba.fastjson.PropertyNamingStrategy",
126:       "com.alibaba.fastjson.parser.JSONToken",
127:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
128:       "com.alibaba.fastjson.serializer.AppendableSerializer",
129:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
130:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
131:       "com.alibaba.fastjson.serializer.ContextValueFilter",
132:       "com.alibaba.fastjson.util.ServiceLoader",
133:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
134:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
135:       "com.alibaba.fastjson.parser.DefaultJSONParser",
136:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
137:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
138:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
139:       "com.alibaba.fastjson.serializer.BeanContext",
140:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
141:       "com.alibaba.fastjson.util.IdentityHashMap",
142:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
143:       "com.alibaba.fastjson.JSON",
144:       "com.alibaba.fastjson.serializer.StringCodec",
145:       "com.alibaba.fastjson.serializer.SerializeFilterable",
146:       "com.alibaba.fastjson.JSONWriter",
147:       "com.alibaba.fastjson.asm.Opcodes",
148:       "com.alibaba.fastjson.JSONReader",
149:       "com.alibaba.fastjson.JSONStreamAware",
150:       "com.alibaba.fastjson.asm.MethodWriter",
151:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
152:       "com.alibaba.fastjson.serializer.SerializerFeature",
153:       "com.alibaba.fastjson.TypeReference$1",
154:       "com.alibaba.fastjson.serializer.CalendarCodec",
155:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
156:       "com.alibaba.fastjson.util.IOUtils",
157:       "com.alibaba.fastjson.util.TypeUtils",
158:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
159:       "com.alibaba.fastjson.asm.ClassReader",
160:       "com.alibaba.fastjson.spi.Module",
161:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
162:       "com.alibaba.fastjson.serializer.MiscCodec",
163:       "com.alibaba.fastjson.util.IOUtils$1",
164:       "com.alibaba.fastjson.serializer.IntegerCodec",
165:       "com.alibaba.fastjson.serializer.SerializeFilter",
166:       "com.alibaba.fastjson.JSONPObject",
167:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
168:       "com.alibaba.fastjson.serializer.BeforeFilter",
169:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
170:       "com.alibaba.fastjson.serializer.ArraySerializer",
171:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
172:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
173:       "com.alibaba.fastjson.JSONObject",
174:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
175:       "com.alibaba.fastjson.serializer.CharacterCodec",
176:       "com.alibaba.fastjson.asm.TypeCollector",
177:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
178:       "com.alibaba.fastjson.asm.ByteVector",
179:       "com.alibaba.fastjson.parser.JSONLexer",
180:       "com.alibaba.fastjson.util.ASMClassLoader$1",
181:       "com.alibaba.fastjson.asm.Label",
182:       "com.alibaba.fastjson.asm.FieldWriter",
183:       "com.alibaba.fastjson.serializer.JSONSerializer",
184:       "com.alibaba.fastjson.util.JavaBeanInfo",
185:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
186:       "com.alibaba.fastjson.serializer.SerializeConfig",
187:       "com.alibaba.fastjson.serializer.AtomicCodec",
188:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
189:       "com.alibaba.fastjson.asm.Type",
190:       "com.alibaba.fastjson.serializer.FieldSerializer",
191:       "com.alibaba.fastjson.serializer.FloatCodec",
192:       "com.alibaba.fastjson.parser.JSONReaderScanner",
193:       "com.alibaba.fastjson.serializer.ValueFilter",
194:       "com.alibaba.fastjson.JSONPathException",
195:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
196:       "com.alibaba.fastjson.serializer.Labels",
197:       "com.alibaba.fastjson.serializer.CollectionCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
199:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
200:       "com.alibaba.fastjson.serializer.CharArrayCodec",
201:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
202:       "com.alibaba.fastjson.asm.MethodVisitor",
203:       "com.alibaba.fastjson.annotation.JSONCreator",
204:       "com.alibaba.fastjson.asm.MethodCollector",
205:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
206:       "com.alibaba.fastjson.annotation.JSONType",
207:       "com.alibaba.fastjson.serializer.LabelFilter",
208:       "com.alibaba.fastjson.util.UTF8Decoder",
209:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
210:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
211:       "com.alibaba.fastjson.serializer.DoubleSerializer",
212:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
213:       "com.alibaba.fastjson.serializer.BooleanCodec",
214:       "com.alibaba.fastjson.parser.ParserConfig",
215:       "com.alibaba.fastjson.parser.ParseContext",
216:       "com.alibaba.fastjson.parser.Feature",
217:       "com.alibaba.fastjson.serializer.PropertyPreFilter"
218:     );
219:   } 
220: 
221:   private static void resetClasses() {
222:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DefaultJSONParser_298_tmp__ESTest_scaffolding.class.getClassLoader()); 
223: 
224:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
225:       "com.alibaba.fastjson.parser.DefaultJSONParser",
226:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
227:       "com.alibaba.fastjson.util.IOUtils$1",
228:       "com.alibaba.fastjson.util.IOUtils",
229:       "com.alibaba.fastjson.util.IdentityHashMap",
230:       "com.alibaba.fastjson.util.ASMUtils",
231:       "com.alibaba.fastjson.parser.SymbolTable",
232:       "com.alibaba.fastjson.parser.Feature",
233:       "com.alibaba.fastjson.serializer.SerializerFeature",
234:       "com.alibaba.fastjson.JSON",
235:       "com.alibaba.fastjson.util.TypeUtils",
236:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
237:       "com.alibaba.fastjson.util.ASMClassLoader$1",
238:       "com.alibaba.fastjson.util.ASMClassLoader",
239:       "com.alibaba.fastjson.serializer.MiscCodec",
240:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
241:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
242:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
243:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
244:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
245:       "com.alibaba.fastjson.serializer.DateCodec",
246:       "com.alibaba.fastjson.serializer.CalendarCodec",
247:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
248:       "com.alibaba.fastjson.serializer.CollectionCodec",
249:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
250:       "com.alibaba.fastjson.serializer.StringCodec",
251:       "com.alibaba.fastjson.serializer.CharacterCodec",
252:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
253:       "com.alibaba.fastjson.serializer.IntegerCodec",
254:       "com.alibaba.fastjson.serializer.LongCodec",
255:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
256:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
257:       "com.alibaba.fastjson.serializer.FloatCodec",
258:       "com.alibaba.fastjson.serializer.BooleanCodec",
259:       "com.alibaba.fastjson.serializer.CharArrayCodec",
260:       "com.alibaba.fastjson.serializer.ReferenceCodec",
261:       "com.alibaba.fastjson.serializer.AtomicCodec",
262:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
263:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
264:       "com.alibaba.fastjson.parser.ParserConfig",
265:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
266:       "com.alibaba.fastjson.serializer.DoubleSerializer",
267:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
268:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
269:       "com.alibaba.fastjson.serializer.AppendableSerializer",
270:       "com.alibaba.fastjson.serializer.ToStringSerializer",
271:       "com.alibaba.fastjson.serializer.SerializeConfig",
272:       "com.alibaba.fastjson.JSONPath",
273:       "com.alibaba.fastjson.parser.JSONLexerBase",
274:       "com.alibaba.fastjson.parser.JSONReaderScanner",
275:       "com.alibaba.fastjson.JSONException",
276:       "com.alibaba.fastjson.parser.JSONToken",
277:       "com.alibaba.fastjson.parser.JSONScanner",
278:       "com.alibaba.fastjson.util.ServiceLoader",
279:       "com.alibaba.fastjson.util.JavaBeanInfo",
280:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
281:       "com.alibaba.fastjson.util.FieldInfo",
282:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
283:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
284:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
285:       "com.alibaba.fastjson.parser.ParseContext",
286:       "com.alibaba.fastjson.asm.ClassReader",
287:       "com.alibaba.fastjson.asm.TypeCollector$1",
288:       "com.alibaba.fastjson.asm.TypeCollector",
289:       "com.alibaba.fastjson.asm.Type",
290:       "com.alibaba.fastjson.asm.MethodCollector",
291:       "com.alibaba.fastjson.JSONObject",
292:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
293:       "com.alibaba.fastjson.JSONArray",
294:       "com.alibaba.fastjson.asm.ClassWriter",
295:       "com.alibaba.fastjson.asm.ByteVector",
296:       "com.alibaba.fastjson.asm.Item",
297:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
298:       "com.alibaba.fastjson.asm.FieldWriter",
299:       "com.alibaba.fastjson.asm.MethodWriter",
300:       "com.alibaba.fastjson.asm.Label",
301:       "com.alibaba.fastjson.serializer.SerializeWriter",
302:       "com.alibaba.fastjson.serializer.SerializeFilterable",
303:       "com.alibaba.fastjson.serializer.JSONSerializer",
304:       "com.alibaba.fastjson.serializer.MapSerializer",
305:       "com.alibaba.fastjson.serializer.SerialContext",
306:       "com.alibaba.fastjson.serializer.ListSerializer",
307:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
308:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
309:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
315:       "com.alibaba.fastjson.serializer.AwtCodec",
316:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
317:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
318:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.serializer.ArraySerializer",
321:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
322:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
323:       "com.alibaba.fastjson.PropertyNamingStrategy"
324:     );
325:   }
326: }

[MASTER] 18:39:48.768 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_299_1590165588751/com/alibaba/fastjson/parser/DefaultJSONParser_299_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_299_1590165588751/com/alibaba/fastjson/parser/DefaultJSONParser_299_tmp__ESTest_scaffolding.java]]
[MASTER] 18:39:48.768 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:48.768 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:48.769 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  cannot find symbol
   symbol:   variable parserConfig1
   location:  class com.alibaba.fastjson.parser.DefaultJSONParser_299_tmp__ESTest: 23
[MASTER] 18:39:48.769 [logback-1] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 18:39:48.769 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_299_1590165588751/com/alibaba/fastjson/parser/DefaultJSONParser_299_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 16:39:48 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson.parser;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.alibaba.fastjson.JSONArray;
11: import com.alibaba.fastjson.parser.DefaultJSONParser;
12: import com.alibaba.fastjson.parser.ParserConfig;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
18: public class DefaultJSONParser_299_tmp__ESTest extends DefaultJSONParser_299_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       ParserConfig.getGlobalInstance();
23:       DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("[null]", parserConfig1, 1865);
24:       JSONArray jSONArray1 = (JSONArray)defaultJSONParser1.parse((Object) "[null]");
25:       assertFalse(jSONArray1.isEmpty());
26:   }
27: }
RegularFileObject[/tmp/EvoSuite_299_1590165588751/com/alibaba/fastjson/parser/DefaultJSONParser_299_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 16:39:48 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson.parser;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class DefaultJSONParser_299_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.parser.DefaultJSONParser"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultJSONParser_299_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.serializer.AwtCodec",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
90:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
91:       "com.alibaba.fastjson.serializer.JSONSerializable",
92:       "com.alibaba.fastjson.serializer.SerializeWriter",
93:       "com.alibaba.fastjson.serializer.ReferenceCodec",
94:       "com.alibaba.fastjson.JSONException",
95:       "com.alibaba.fastjson.asm.TypeCollector$1",
96:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
97:       "com.alibaba.fastjson.serializer.ToStringSerializer",
98:       "com.alibaba.fastjson.serializer.SerialContext",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.serializer.ObjectSerializer",
103:       "com.alibaba.fastjson.serializer.MapSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
106:       "com.alibaba.fastjson.serializer.DateCodec",
107:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
114:       "com.alibaba.fastjson.util.FieldInfo",
115:       "com.alibaba.fastjson.serializer.PropertyFilter",
116:       "com.alibaba.fastjson.annotation.JSONField",
117:       "com.alibaba.fastjson.parser.SymbolTable",
118:       "com.alibaba.fastjson.serializer.NameFilter",
119:       "com.alibaba.fastjson.serializer.ListSerializer",
120:       "com.alibaba.fastjson.JSONArray",
121:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
122:       "com.alibaba.fastjson.JSONAware",
123:       "com.alibaba.fastjson.serializer.LongCodec",
124:       "com.alibaba.fastjson.util.ASMClassLoader",
125:       "com.alibaba.fastjson.PropertyNamingStrategy",
126:       "com.alibaba.fastjson.parser.JSONToken",
127:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
128:       "com.alibaba.fastjson.serializer.AppendableSerializer",
129:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
130:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
131:       "com.alibaba.fastjson.serializer.ContextValueFilter",
132:       "com.alibaba.fastjson.util.ServiceLoader",
133:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
134:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
135:       "com.alibaba.fastjson.parser.DefaultJSONParser",
136:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
137:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
138:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
139:       "com.alibaba.fastjson.serializer.BeanContext",
140:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
141:       "com.alibaba.fastjson.util.IdentityHashMap",
142:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
143:       "com.alibaba.fastjson.JSON",
144:       "com.alibaba.fastjson.serializer.StringCodec",
145:       "com.alibaba.fastjson.serializer.SerializeFilterable",
146:       "com.alibaba.fastjson.JSONWriter",
147:       "com.alibaba.fastjson.asm.Opcodes",
148:       "com.alibaba.fastjson.JSONReader",
149:       "com.alibaba.fastjson.JSONStreamAware",
150:       "com.alibaba.fastjson.asm.MethodWriter",
151:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
152:       "com.alibaba.fastjson.serializer.SerializerFeature",
153:       "com.alibaba.fastjson.TypeReference$1",
154:       "com.alibaba.fastjson.serializer.CalendarCodec",
155:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
156:       "com.alibaba.fastjson.util.IOUtils",
157:       "com.alibaba.fastjson.util.TypeUtils",
158:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
159:       "com.alibaba.fastjson.asm.ClassReader",
160:       "com.alibaba.fastjson.spi.Module",
161:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
162:       "com.alibaba.fastjson.serializer.MiscCodec",
163:       "com.alibaba.fastjson.util.IOUtils$1",
164:       "com.alibaba.fastjson.serializer.IntegerCodec",
165:       "com.alibaba.fastjson.serializer.SerializeFilter",
166:       "com.alibaba.fastjson.JSONPObject",
167:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
168:       "com.alibaba.fastjson.serializer.BeforeFilter",
169:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
170:       "com.alibaba.fastjson.serializer.ArraySerializer",
171:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
172:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
173:       "com.alibaba.fastjson.JSONObject",
174:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
175:       "com.alibaba.fastjson.serializer.CharacterCodec",
176:       "com.alibaba.fastjson.asm.TypeCollector",
177:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
178:       "com.alibaba.fastjson.asm.ByteVector",
179:       "com.alibaba.fastjson.parser.JSONLexer",
180:       "com.alibaba.fastjson.util.ASMClassLoader$1",
181:       "com.alibaba.fastjson.asm.Label",
182:       "com.alibaba.fastjson.asm.FieldWriter",
183:       "com.alibaba.fastjson.serializer.JSONSerializer",
184:       "com.alibaba.fastjson.util.JavaBeanInfo",
185:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
186:       "com.alibaba.fastjson.serializer.SerializeConfig",
187:       "com.alibaba.fastjson.serializer.AtomicCodec",
188:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
189:       "com.alibaba.fastjson.asm.Type",
190:       "com.alibaba.fastjson.serializer.FieldSerializer",
191:       "com.alibaba.fastjson.serializer.FloatCodec",
192:       "com.alibaba.fastjson.parser.JSONReaderScanner",
193:       "com.alibaba.fastjson.serializer.ValueFilter",
194:       "com.alibaba.fastjson.JSONPathException",
195:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
196:       "com.alibaba.fastjson.serializer.Labels",
197:       "com.alibaba.fastjson.serializer.CollectionCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
199:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
200:       "com.alibaba.fastjson.serializer.CharArrayCodec",
201:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
202:       "com.alibaba.fastjson.asm.MethodVisitor",
203:       "com.alibaba.fastjson.annotation.JSONCreator",
204:       "com.alibaba.fastjson.asm.MethodCollector",
205:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
206:       "com.alibaba.fastjson.annotation.JSONType",
207:       "com.alibaba.fastjson.serializer.LabelFilter",
208:       "com.alibaba.fastjson.util.UTF8Decoder",
209:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
210:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
211:       "com.alibaba.fastjson.serializer.DoubleSerializer",
212:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
213:       "com.alibaba.fastjson.serializer.BooleanCodec",
214:       "com.alibaba.fastjson.parser.ParserConfig",
215:       "com.alibaba.fastjson.parser.ParseContext",
216:       "com.alibaba.fastjson.parser.Feature",
217:       "com.alibaba.fastjson.serializer.PropertyPreFilter"
218:     );
219:   } 
220: 
221:   private static void resetClasses() {
222:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DefaultJSONParser_299_tmp__ESTest_scaffolding.class.getClassLoader()); 
223: 
224:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
225:       "com.alibaba.fastjson.parser.DefaultJSONParser",
226:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
227:       "com.alibaba.fastjson.util.IOUtils$1",
228:       "com.alibaba.fastjson.util.IOUtils",
229:       "com.alibaba.fastjson.util.IdentityHashMap",
230:       "com.alibaba.fastjson.util.ASMUtils",
231:       "com.alibaba.fastjson.parser.SymbolTable",
232:       "com.alibaba.fastjson.parser.Feature",
233:       "com.alibaba.fastjson.serializer.SerializerFeature",
234:       "com.alibaba.fastjson.JSON",
235:       "com.alibaba.fastjson.util.TypeUtils",
236:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
237:       "com.alibaba.fastjson.util.ASMClassLoader$1",
238:       "com.alibaba.fastjson.util.ASMClassLoader",
239:       "com.alibaba.fastjson.serializer.MiscCodec",
240:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
241:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
242:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
243:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
244:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
245:       "com.alibaba.fastjson.serializer.DateCodec",
246:       "com.alibaba.fastjson.serializer.CalendarCodec",
247:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
248:       "com.alibaba.fastjson.serializer.CollectionCodec",
249:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
250:       "com.alibaba.fastjson.serializer.StringCodec",
251:       "com.alibaba.fastjson.serializer.CharacterCodec",
252:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
253:       "com.alibaba.fastjson.serializer.IntegerCodec",
254:       "com.alibaba.fastjson.serializer.LongCodec",
255:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
256:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
257:       "com.alibaba.fastjson.serializer.FloatCodec",
258:       "com.alibaba.fastjson.serializer.BooleanCodec",
259:       "com.alibaba.fastjson.serializer.CharArrayCodec",
260:       "com.alibaba.fastjson.serializer.ReferenceCodec",
261:       "com.alibaba.fastjson.serializer.AtomicCodec",
262:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
263:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
264:       "com.alibaba.fastjson.parser.ParserConfig",
265:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
266:       "com.alibaba.fastjson.serializer.DoubleSerializer",
267:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
268:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
269:       "com.alibaba.fastjson.serializer.AppendableSerializer",
270:       "com.alibaba.fastjson.serializer.ToStringSerializer",
271:       "com.alibaba.fastjson.serializer.SerializeConfig",
272:       "com.alibaba.fastjson.JSONPath",
273:       "com.alibaba.fastjson.parser.JSONLexerBase",
274:       "com.alibaba.fastjson.parser.JSONReaderScanner",
275:       "com.alibaba.fastjson.JSONException",
276:       "com.alibaba.fastjson.parser.JSONToken",
277:       "com.alibaba.fastjson.parser.JSONScanner",
278:       "com.alibaba.fastjson.util.ServiceLoader",
279:       "com.alibaba.fastjson.util.JavaBeanInfo",
280:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
281:       "com.alibaba.fastjson.util.FieldInfo",
282:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
283:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
284:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
285:       "com.alibaba.fastjson.parser.ParseContext",
286:       "com.alibaba.fastjson.asm.ClassReader",
287:       "com.alibaba.fastjson.asm.TypeCollector$1",
288:       "com.alibaba.fastjson.asm.TypeCollector",
289:       "com.alibaba.fastjson.asm.Type",
290:       "com.alibaba.fastjson.asm.MethodCollector",
291:       "com.alibaba.fastjson.JSONObject",
292:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
293:       "com.alibaba.fastjson.JSONArray",
294:       "com.alibaba.fastjson.asm.ClassWriter",
295:       "com.alibaba.fastjson.asm.ByteVector",
296:       "com.alibaba.fastjson.asm.Item",
297:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
298:       "com.alibaba.fastjson.asm.FieldWriter",
299:       "com.alibaba.fastjson.asm.MethodWriter",
300:       "com.alibaba.fastjson.asm.Label",
301:       "com.alibaba.fastjson.serializer.SerializeWriter",
302:       "com.alibaba.fastjson.serializer.SerializeFilterable",
303:       "com.alibaba.fastjson.serializer.JSONSerializer",
304:       "com.alibaba.fastjson.serializer.MapSerializer",
305:       "com.alibaba.fastjson.serializer.SerialContext",
306:       "com.alibaba.fastjson.serializer.ListSerializer",
307:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
308:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
309:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
315:       "com.alibaba.fastjson.serializer.AwtCodec",
316:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
317:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
318:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.serializer.ArraySerializer",
321:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
322:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
323:       "com.alibaba.fastjson.PropertyNamingStrategy"
324:     );
325:   }
326: }

[MASTER] 18:39:49.081 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:49.081 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = new ParserConfig();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"\":\"{\"create asm serializer error, verson 1.2.68, class \":\"a string\",\"com.alibaba.fastjson.serializer.ArraySerializer\":{},\"expect ':' at \":true,\"..\":true,\", pos \":false,\"\":false,\"isWriteClassName\":-99}\",\"size\":[],\"mark_context\":{},\"java.util.OptionalInt\":[],\"value2\":null,\"x\":null}", parserConfig1, 101);
DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(parserConfig1, defaultJSONParser1.lexer, parserConfig1);
Object object1 = defaultJSONParser1.parse((Object) "$.reate asm serializer error, verson 1.2.68, class ");
assertEquals("", object1);


[MASTER] 18:39:49.081 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:49.385 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/parser/DefaultJSONParser.getDateFormat()Ljava/text/DateFormat; @63: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[4]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @63
    flags: { }
    locals: { 'com/alibaba/fastjson/parser/DefaultJSONParser', 'java/util/Locale', 'java/lang/String' }
    stack: { 'com/alibaba/fastjson/parser/DefaultJSONParser', uninitialized 57, uninitialized 57, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 3fb8 0044 2ab4 004c b800 5212 53b6
    0x0000010: 0057 b800 3fc7 004c b800 3fb8 0044 2abb
    0x0000020: 0059 592a b400 462a b400 5bb9 0061 0100
    0x0000030: b800 6799 0012 4c4d 58bb 0069 592c 2cb7
    0x0000040: 006d a700 06b7 006e b500 4cb8 003f b800
    0x0000050: 442a b400 4c2a b400 5bb9 0072 0100 b600
    0x0000060: 78b8 003f b800 442a b400 4cb0          
  Stackmap Table:
    full_frame(@69,{Object[#2]},{Object[#2],Uninitialized[#31],Uninitialized[#31],Object[#122],Object[#124]})
    full_frame(@72,{Object[#2]},{Object[#2],Object[#89]})
    same_frame(@97)

[MASTER] 18:39:49.386 [logback-1] WARN  JUnitAnalyzer - Failing test:
 char[] charArray1 = new char[6];
JSONScanner jSONScanner1 = new JSONScanner(charArray1, 1, 51068);
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONScanner1);
Object object1 = new Object();
defaultJSONParser1.parse(object1);

[MASTER] 18:39:49.386 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:49.686 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/parser/DefaultJSONParser.getDateFormat()Ljava/text/DateFormat; @63: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[4]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @63
    flags: { }
    locals: { 'com/alibaba/fastjson/parser/DefaultJSONParser', 'java/util/Locale', 'java/lang/String' }
    stack: { 'com/alibaba/fastjson/parser/DefaultJSONParser', uninitialized 57, uninitialized 57, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 3fb8 0044 2ab4 004c b800 5212 53b6
    0x0000010: 0057 b800 3fc7 004c b800 3fb8 0044 2abb
    0x0000020: 0059 592a b400 462a b400 5bb9 0061 0100
    0x0000030: b800 6799 0012 4c4d 58bb 0069 592c 2cb7
    0x0000040: 006d a700 06b7 006e b500 4cb8 003f b800
    0x0000050: 442a b400 4c2a b400 5bb9 0072 0100 b600
    0x0000060: 78b8 003f b800 442a b400 4cb0          
  Stackmap Table:
    full_frame(@69,{Object[#2]},{Object[#2],Uninitialized[#31],Uninitialized[#31],Object[#122],Object[#124]})
    full_frame(@72,{Object[#2]},{Object[#2],Object[#89]})
    same_frame(@97)

[MASTER] 18:39:49.686 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("{\"create asm serializer error, verson 1.2.68, class \":\"a string\",\"com.alibaba.fastjson.serializer.ArraySerializer\":[null],\"expect ':' at \":null,\"..\":true,\", pos \":false,\"\":false,\"$\":true}");
jSONReaderScanner1.bp = (-1724052386);
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONReaderScanner1);

[MASTER] 18:39:49.686 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:49.996 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:49.996 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.global;
char[] charArray1 = new char[7];
charArray1[5] = '4';
charArray1[6] = '/';
JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray1, 48);
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONReaderScanner1, parserConfig1);
jSONReaderScanner1.charAt(48);
DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(jSONReaderScanner1);

[MASTER] 18:39:49.996 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:50.296 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: RuntimeException
[MASTER] 18:39:50.296 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONScanner jSONScanner1 = new JSONScanner("fastjson.parser.safeMode", 1);
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONScanner1);

[MASTER] 18:39:50.297 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:50.297 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONScanner jSONScanner1 = new JSONScanner("fastjson.parser.safeMode", 1);
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONScanner1);

[MASTER] 18:39:50.313 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_305_1590165590297/com/alibaba/fastjson/parser/DefaultJSONParser_305_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_305_1590165590297/com/alibaba/fastjson/parser/DefaultJSONParser_305_tmp__ESTest_scaffolding.java]]
[MASTER] 18:39:50.313 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:50.313 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:50.313 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  cannot find symbol
   symbol:   variable parserConfig1
   location:  class com.alibaba.fastjson.parser.DefaultJSONParser_305_tmp__ESTest: 36
[MASTER] 18:39:50.314 [logback-1] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 18:39:50.314 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_305_1590165590297/com/alibaba/fastjson/parser/DefaultJSONParser_305_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 16:39:50 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson.parser;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.alibaba.fastjson.parser.DefaultJSONParser;
12: import com.alibaba.fastjson.parser.JSONLexer;
13: import com.alibaba.fastjson.parser.ParserConfig;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
19: public class DefaultJSONParser_305_tmp__ESTest extends DefaultJSONParser_305_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       // Undeclared exception!
24:       try { 
25:         ParserConfig.getGlobalInstance();
26:         fail("Expecting exception: NullPointerException");
27:       
28:       } catch(NullPointerException e) {
29:          //
30:          // no message in exception (getMessage() returned null)
31:          //
32:       }
33:       
34:       DefaultJSONParser defaultJSONParser1 = null;
35:       try {
36:         defaultJSONParser1 = new DefaultJSONParser((JSONLexer) null, parserConfig1);
37:         fail("Expecting exception: NullPointerException");
38:       
39:       } catch(NullPointerException e) {
40:          //
41:          // no message in exception (getMessage() returned null)
42:          //
43:       }
44:   }
45: }
RegularFileObject[/tmp/EvoSuite_305_1590165590297/com/alibaba/fastjson/parser/DefaultJSONParser_305_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 16:39:50 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson.parser;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class DefaultJSONParser_305_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.parser.DefaultJSONParser"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultJSONParser_305_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.serializer.AwtCodec",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
90:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
91:       "com.alibaba.fastjson.serializer.JSONSerializable",
92:       "com.alibaba.fastjson.serializer.SerializeWriter",
93:       "com.alibaba.fastjson.serializer.ReferenceCodec",
94:       "com.alibaba.fastjson.JSONException",
95:       "com.alibaba.fastjson.asm.TypeCollector$1",
96:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
97:       "com.alibaba.fastjson.serializer.ToStringSerializer",
98:       "com.alibaba.fastjson.serializer.SerialContext",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.serializer.ObjectSerializer",
103:       "com.alibaba.fastjson.serializer.MapSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
106:       "com.alibaba.fastjson.serializer.DateCodec",
107:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
114:       "com.alibaba.fastjson.util.FieldInfo",
115:       "com.alibaba.fastjson.serializer.PropertyFilter",
116:       "com.alibaba.fastjson.annotation.JSONField",
117:       "com.alibaba.fastjson.parser.SymbolTable",
118:       "com.alibaba.fastjson.serializer.NameFilter",
119:       "com.alibaba.fastjson.serializer.ListSerializer",
120:       "com.alibaba.fastjson.JSONArray",
121:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
122:       "com.alibaba.fastjson.JSONAware",
123:       "com.alibaba.fastjson.serializer.LongCodec",
124:       "com.alibaba.fastjson.util.ASMClassLoader",
125:       "com.alibaba.fastjson.PropertyNamingStrategy",
126:       "com.alibaba.fastjson.parser.JSONToken",
127:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
128:       "com.alibaba.fastjson.serializer.AppendableSerializer",
129:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
130:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
131:       "com.alibaba.fastjson.serializer.ContextValueFilter",
132:       "com.alibaba.fastjson.util.ServiceLoader",
133:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
134:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
135:       "com.alibaba.fastjson.parser.DefaultJSONParser",
136:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
137:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
138:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
139:       "com.alibaba.fastjson.serializer.BeanContext",
140:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
141:       "com.alibaba.fastjson.util.IdentityHashMap",
142:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
143:       "com.alibaba.fastjson.JSON",
144:       "com.alibaba.fastjson.serializer.StringCodec",
145:       "com.alibaba.fastjson.serializer.SerializeFilterable",
146:       "com.alibaba.fastjson.JSONWriter",
147:       "com.alibaba.fastjson.asm.Opcodes",
148:       "com.alibaba.fastjson.JSONReader",
149:       "com.alibaba.fastjson.JSONStreamAware",
150:       "com.alibaba.fastjson.asm.MethodWriter",
151:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
152:       "com.alibaba.fastjson.serializer.SerializerFeature",
153:       "com.alibaba.fastjson.TypeReference$1",
154:       "com.alibaba.fastjson.serializer.CalendarCodec",
155:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
156:       "com.alibaba.fastjson.util.IOUtils",
157:       "com.alibaba.fastjson.util.TypeUtils",
158:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
159:       "com.alibaba.fastjson.asm.ClassReader",
160:       "com.alibaba.fastjson.spi.Module",
161:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
162:       "com.alibaba.fastjson.serializer.MiscCodec",
163:       "com.alibaba.fastjson.util.IOUtils$1",
164:       "com.alibaba.fastjson.serializer.IntegerCodec",
165:       "com.alibaba.fastjson.serializer.SerializeFilter",
166:       "com.alibaba.fastjson.JSONPObject",
167:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
168:       "com.alibaba.fastjson.serializer.BeforeFilter",
169:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
170:       "com.alibaba.fastjson.serializer.ArraySerializer",
171:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
172:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
173:       "com.alibaba.fastjson.JSONObject",
174:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
175:       "com.alibaba.fastjson.serializer.CharacterCodec",
176:       "com.alibaba.fastjson.asm.TypeCollector",
177:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
178:       "com.alibaba.fastjson.asm.ByteVector",
179:       "com.alibaba.fastjson.parser.JSONLexer",
180:       "com.alibaba.fastjson.util.ASMClassLoader$1",
181:       "com.alibaba.fastjson.asm.Label",
182:       "com.alibaba.fastjson.asm.FieldWriter",
183:       "com.alibaba.fastjson.serializer.JSONSerializer",
184:       "com.alibaba.fastjson.util.JavaBeanInfo",
185:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
186:       "com.alibaba.fastjson.serializer.SerializeConfig",
187:       "com.alibaba.fastjson.serializer.AtomicCodec",
188:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
189:       "com.alibaba.fastjson.asm.Type",
190:       "com.alibaba.fastjson.serializer.FieldSerializer",
191:       "com.alibaba.fastjson.serializer.FloatCodec",
192:       "com.alibaba.fastjson.parser.JSONReaderScanner",
193:       "com.alibaba.fastjson.serializer.ValueFilter",
194:       "com.alibaba.fastjson.JSONPathException",
195:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
196:       "com.alibaba.fastjson.serializer.Labels",
197:       "com.alibaba.fastjson.serializer.CollectionCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
199:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
200:       "com.alibaba.fastjson.serializer.CharArrayCodec",
201:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
202:       "com.alibaba.fastjson.asm.MethodVisitor",
203:       "com.alibaba.fastjson.annotation.JSONCreator",
204:       "com.alibaba.fastjson.asm.MethodCollector",
205:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
206:       "com.alibaba.fastjson.annotation.JSONType",
207:       "com.alibaba.fastjson.serializer.LabelFilter",
208:       "com.alibaba.fastjson.util.UTF8Decoder",
209:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
210:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
211:       "com.alibaba.fastjson.serializer.DoubleSerializer",
212:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
213:       "com.alibaba.fastjson.serializer.BooleanCodec",
214:       "com.alibaba.fastjson.parser.ParserConfig",
215:       "com.alibaba.fastjson.parser.ParseContext",
216:       "com.alibaba.fastjson.parser.Feature",
217:       "com.alibaba.fastjson.serializer.PropertyPreFilter"
218:     );
219:   } 
220: 
221:   private static void resetClasses() {
222:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DefaultJSONParser_305_tmp__ESTest_scaffolding.class.getClassLoader()); 
223: 
224:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
225:       "com.alibaba.fastjson.parser.DefaultJSONParser",
226:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
227:       "com.alibaba.fastjson.util.IOUtils$1",
228:       "com.alibaba.fastjson.util.IOUtils",
229:       "com.alibaba.fastjson.util.IdentityHashMap",
230:       "com.alibaba.fastjson.util.ASMUtils",
231:       "com.alibaba.fastjson.parser.SymbolTable",
232:       "com.alibaba.fastjson.parser.Feature",
233:       "com.alibaba.fastjson.serializer.SerializerFeature",
234:       "com.alibaba.fastjson.JSON",
235:       "com.alibaba.fastjson.util.TypeUtils",
236:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
237:       "com.alibaba.fastjson.util.ASMClassLoader$1",
238:       "com.alibaba.fastjson.util.ASMClassLoader",
239:       "com.alibaba.fastjson.serializer.MiscCodec",
240:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
241:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
242:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
243:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
244:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
245:       "com.alibaba.fastjson.serializer.DateCodec",
246:       "com.alibaba.fastjson.serializer.CalendarCodec",
247:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
248:       "com.alibaba.fastjson.serializer.CollectionCodec",
249:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
250:       "com.alibaba.fastjson.serializer.StringCodec",
251:       "com.alibaba.fastjson.serializer.CharacterCodec",
252:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
253:       "com.alibaba.fastjson.serializer.IntegerCodec",
254:       "com.alibaba.fastjson.serializer.LongCodec",
255:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
256:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
257:       "com.alibaba.fastjson.serializer.FloatCodec",
258:       "com.alibaba.fastjson.serializer.BooleanCodec",
259:       "com.alibaba.fastjson.serializer.CharArrayCodec",
260:       "com.alibaba.fastjson.serializer.ReferenceCodec",
261:       "com.alibaba.fastjson.serializer.AtomicCodec",
262:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
263:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
264:       "com.alibaba.fastjson.parser.ParserConfig",
265:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
266:       "com.alibaba.fastjson.serializer.DoubleSerializer",
267:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
268:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
269:       "com.alibaba.fastjson.serializer.AppendableSerializer",
270:       "com.alibaba.fastjson.serializer.ToStringSerializer",
271:       "com.alibaba.fastjson.serializer.SerializeConfig",
272:       "com.alibaba.fastjson.JSONPath",
273:       "com.alibaba.fastjson.parser.JSONLexerBase",
274:       "com.alibaba.fastjson.parser.JSONReaderScanner",
275:       "com.alibaba.fastjson.JSONException",
276:       "com.alibaba.fastjson.parser.JSONToken",
277:       "com.alibaba.fastjson.parser.JSONScanner",
278:       "com.alibaba.fastjson.util.ServiceLoader",
279:       "com.alibaba.fastjson.util.JavaBeanInfo",
280:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
281:       "com.alibaba.fastjson.util.FieldInfo",
282:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
283:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
284:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
285:       "com.alibaba.fastjson.parser.ParseContext",
286:       "com.alibaba.fastjson.asm.ClassReader",
287:       "com.alibaba.fastjson.asm.TypeCollector$1",
288:       "com.alibaba.fastjson.asm.TypeCollector",
289:       "com.alibaba.fastjson.asm.Type",
290:       "com.alibaba.fastjson.asm.MethodCollector",
291:       "com.alibaba.fastjson.JSONObject",
292:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
293:       "com.alibaba.fastjson.JSONArray",
294:       "com.alibaba.fastjson.asm.ClassWriter",
295:       "com.alibaba.fastjson.asm.ByteVector",
296:       "com.alibaba.fastjson.asm.Item",
297:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
298:       "com.alibaba.fastjson.asm.FieldWriter",
299:       "com.alibaba.fastjson.asm.MethodWriter",
300:       "com.alibaba.fastjson.asm.Label",
301:       "com.alibaba.fastjson.serializer.SerializeWriter",
302:       "com.alibaba.fastjson.serializer.SerializeFilterable",
303:       "com.alibaba.fastjson.serializer.JSONSerializer",
304:       "com.alibaba.fastjson.serializer.MapSerializer",
305:       "com.alibaba.fastjson.serializer.SerialContext",
306:       "com.alibaba.fastjson.serializer.ListSerializer",
307:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
308:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
309:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
315:       "com.alibaba.fastjson.serializer.AwtCodec",
316:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
317:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
318:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.serializer.ArraySerializer",
321:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
322:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
323:       "com.alibaba.fastjson.PropertyNamingStrategy"
324:     );
325:   }
326: }

[MASTER] 18:39:50.605 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:50.605 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("not close json text, token : ");
ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONReaderScanner1, parserConfig1);

[MASTER] 18:39:50.605 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:50.921 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/parser/DefaultJSONParser.getDateFormat()Ljava/text/DateFormat; @63: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[4]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @63
    flags: { }
    locals: { 'com/alibaba/fastjson/parser/DefaultJSONParser', 'java/util/Locale', 'java/lang/String' }
    stack: { 'com/alibaba/fastjson/parser/DefaultJSONParser', uninitialized 57, uninitialized 57, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 3fb8 0044 2ab4 004c b800 5212 53b6
    0x0000010: 0057 b800 3fc7 004c b800 3fb8 0044 2abb
    0x0000020: 0059 592a b400 462a b400 5bb9 0061 0100
    0x0000030: b800 6799 0012 4c4d 58bb 0069 592c 2cb7
    0x0000040: 006d a700 06b7 006e b500 4cb8 003f b800
    0x0000050: 442a b400 4c2a b400 5bb9 0072 0100 b600
    0x0000060: 78b8 003f b800 442a b400 4cb0          
  Stackmap Table:
    full_frame(@69,{Object[#2]},{Object[#2],Uninitialized[#31],Uninitialized[#31],Object[#122],Object[#124]})
    full_frame(@72,{Object[#2]},{Object[#2],Object[#89]})
    same_frame(@97)

[MASTER] 18:39:50.921 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Feature feature1 = Feature.AutoCloseSource;
JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("not support type ", 1);
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(feature1, jSONReaderScanner1, (ParserConfig) null);

[MASTER] 18:39:50.921 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:51.232 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:51.232 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.global;
JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("fastjson.parser.autoTypeSupport");
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(";cXwZBk#}RZ", jSONReaderScanner1, parserConfig1);

[MASTER] 18:39:51.232 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:51.532 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/parser/DefaultJSONParser.getDateFormat()Ljava/text/DateFormat; @63: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[4]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @63
    flags: { }
    locals: { 'com/alibaba/fastjson/parser/DefaultJSONParser', 'java/util/Locale', 'java/lang/String' }
    stack: { 'com/alibaba/fastjson/parser/DefaultJSONParser', uninitialized 57, uninitialized 57, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 3fb8 0044 2ab4 004c b800 5212 53b6
    0x0000010: 0057 b800 3fc7 004c b800 3fb8 0044 2abb
    0x0000020: 0059 592a b400 462a b400 5bb9 0061 0100
    0x0000030: b800 6799 0012 4c4d 58bb 0069 592c 2cb7
    0x0000040: 006d a700 06b7 006e b500 4cb8 003f b800
    0x0000050: 442a b400 4c2a b400 5bb9 0072 0100 b600
    0x0000060: 78b8 003f b800 442a b400 4cb0          
  Stackmap Table:
    full_frame(@69,{Object[#2]},{Object[#2],Uninitialized[#31],Uninitialized[#31],Object[#122],Object[#124]})
    full_frame(@72,{Object[#2]},{Object[#2],Object[#89]})
    same_frame(@97)

[MASTER] 18:39:51.533 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser((String) null);

[MASTER] 18:39:51.533 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:51.832 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/parser/DefaultJSONParser.getDateFormat()Ljava/text/DateFormat; @63: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[4]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @63
    flags: { }
    locals: { 'com/alibaba/fastjson/parser/DefaultJSONParser', 'java/util/Locale', 'java/lang/String' }
    stack: { 'com/alibaba/fastjson/parser/DefaultJSONParser', uninitialized 57, uninitialized 57, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 3fb8 0044 2ab4 004c b800 5212 53b6
    0x0000010: 0057 b800 3fc7 004c b800 3fb8 0044 2abb
    0x0000020: 0059 592a b400 462a b400 5bb9 0061 0100
    0x0000030: b800 6799 0012 4c4d 58bb 0069 592c 2cb7
    0x0000040: 006d a700 06b7 006e b500 4cb8 003f b800
    0x0000050: 442a b400 4c2a b400 5bb9 0072 0100 b600
    0x0000060: 78b8 003f b800 442a b400 4cb0          
  Stackmap Table:
    full_frame(@69,{Object[#2]},{Object[#2],Uninitialized[#31],Uninitialized[#31],Object[#122],Object[#124]})
    full_frame(@72,{Object[#2]},{Object[#2],Object[#89]})
    same_frame(@97)

[MASTER] 18:39:51.832 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("t");

[MASTER] 18:39:51.832 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:52.148 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/parser/DefaultJSONParser.getDateFormat()Ljava/text/DateFormat; @63: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[4]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @63
    flags: { }
    locals: { 'com/alibaba/fastjson/parser/DefaultJSONParser', 'java/util/Locale', 'java/lang/String' }
    stack: { 'com/alibaba/fastjson/parser/DefaultJSONParser', uninitialized 57, uninitialized 57, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 3fb8 0044 2ab4 004c b800 5212 53b6
    0x0000010: 0057 b800 3fc7 004c b800 3fb8 0044 2abb
    0x0000020: 0059 592a b400 462a b400 5bb9 0061 0100
    0x0000030: b800 6799 0012 4c4d 58bb 0069 592c 2cb7
    0x0000040: 006d a700 06b7 006e b500 4cb8 003f b800
    0x0000050: 442a b400 4c2a b400 5bb9 0072 0100 b600
    0x0000060: 78b8 003f b800 442a b400 4cb0          
  Stackmap Table:
    full_frame(@69,{Object[#2]},{Object[#2],Uninitialized[#31],Uninitialized[#31],Object[#122],Object[#124]})
    full_frame(@72,{Object[#2]},{Object[#2],Object[#89]})
    same_frame(@97)

[MASTER] 18:39:52.148 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("fastjson.parser.deny.internal", (ParserConfig) null);

[MASTER] 18:39:52.148 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:52.164 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_312_1590165592149/com/alibaba/fastjson/parser/DefaultJSONParser_312_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_312_1590165592149/com/alibaba/fastjson/parser/DefaultJSONParser_312_tmp__ESTest_scaffolding.java]]
[MASTER] 18:39:52.164 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:52.164 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:52.164 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  cannot find symbol
   symbol:   variable parserConfig1
   location:  class com.alibaba.fastjson.parser.DefaultJSONParser_312_tmp__ESTest: 36
[MASTER] 18:39:52.164 [logback-1] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 18:39:52.164 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_312_1590165592149/com/alibaba/fastjson/parser/DefaultJSONParser_312_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 16:39:52 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson.parser;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.alibaba.fastjson.parser.DefaultJSONParser;
12: import com.alibaba.fastjson.parser.ParserConfig;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
18: public class DefaultJSONParser_312_tmp__ESTest extends DefaultJSONParser_312_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       // Undeclared exception!
23:       try { 
24:         ParserConfig.getGlobalInstance();
25:         fail("Expecting exception: RuntimeException");
26:       
27:       } catch(RuntimeException e) {
28:          //
29:          // error parse false
30:          //
31:          verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
32:       }
33:       
34:       DefaultJSONParser defaultJSONParser1 = null;
35:       try {
36:         defaultJSONParser1 = new DefaultJSONParser("fastjson.parser.autoTypeSupport", parserConfig1);
37:         fail("Expecting exception: RuntimeException");
38:       
39:       } catch(RuntimeException e) {
40:          //
41:          // error parse false
42:          //
43:          verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
44:       }
45:   }
46: }
RegularFileObject[/tmp/EvoSuite_312_1590165592149/com/alibaba/fastjson/parser/DefaultJSONParser_312_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 16:39:52 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson.parser;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class DefaultJSONParser_312_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.parser.DefaultJSONParser"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultJSONParser_312_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.serializer.AwtCodec",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
90:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
91:       "com.alibaba.fastjson.serializer.JSONSerializable",
92:       "com.alibaba.fastjson.serializer.SerializeWriter",
93:       "com.alibaba.fastjson.serializer.ReferenceCodec",
94:       "com.alibaba.fastjson.JSONException",
95:       "com.alibaba.fastjson.asm.TypeCollector$1",
96:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
97:       "com.alibaba.fastjson.serializer.ToStringSerializer",
98:       "com.alibaba.fastjson.serializer.SerialContext",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.serializer.ObjectSerializer",
103:       "com.alibaba.fastjson.serializer.MapSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
106:       "com.alibaba.fastjson.serializer.DateCodec",
107:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
114:       "com.alibaba.fastjson.util.FieldInfo",
115:       "com.alibaba.fastjson.serializer.PropertyFilter",
116:       "com.alibaba.fastjson.annotation.JSONField",
117:       "com.alibaba.fastjson.parser.SymbolTable",
118:       "com.alibaba.fastjson.serializer.NameFilter",
119:       "com.alibaba.fastjson.serializer.ListSerializer",
120:       "com.alibaba.fastjson.JSONArray",
121:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
122:       "com.alibaba.fastjson.JSONAware",
123:       "com.alibaba.fastjson.serializer.LongCodec",
124:       "com.alibaba.fastjson.util.ASMClassLoader",
125:       "com.alibaba.fastjson.PropertyNamingStrategy",
126:       "com.alibaba.fastjson.parser.JSONToken",
127:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
128:       "com.alibaba.fastjson.serializer.AppendableSerializer",
129:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
130:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
131:       "com.alibaba.fastjson.serializer.ContextValueFilter",
132:       "com.alibaba.fastjson.util.ServiceLoader",
133:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
134:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
135:       "com.alibaba.fastjson.parser.DefaultJSONParser",
136:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
137:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
138:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
139:       "com.alibaba.fastjson.serializer.BeanContext",
140:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
141:       "com.alibaba.fastjson.util.IdentityHashMap",
142:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
143:       "com.alibaba.fastjson.JSON",
144:       "com.alibaba.fastjson.serializer.StringCodec",
145:       "com.alibaba.fastjson.serializer.SerializeFilterable",
146:       "com.alibaba.fastjson.JSONWriter",
147:       "com.alibaba.fastjson.asm.Opcodes",
148:       "com.alibaba.fastjson.JSONReader",
149:       "com.alibaba.fastjson.JSONStreamAware",
150:       "com.alibaba.fastjson.asm.MethodWriter",
151:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
152:       "com.alibaba.fastjson.serializer.SerializerFeature",
153:       "com.alibaba.fastjson.TypeReference$1",
154:       "com.alibaba.fastjson.serializer.CalendarCodec",
155:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
156:       "com.alibaba.fastjson.util.IOUtils",
157:       "com.alibaba.fastjson.util.TypeUtils",
158:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
159:       "com.alibaba.fastjson.asm.ClassReader",
160:       "com.alibaba.fastjson.spi.Module",
161:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
162:       "com.alibaba.fastjson.serializer.MiscCodec",
163:       "com.alibaba.fastjson.util.IOUtils$1",
164:       "com.alibaba.fastjson.serializer.IntegerCodec",
165:       "com.alibaba.fastjson.serializer.SerializeFilter",
166:       "com.alibaba.fastjson.JSONPObject",
167:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
168:       "com.alibaba.fastjson.serializer.BeforeFilter",
169:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
170:       "com.alibaba.fastjson.serializer.ArraySerializer",
171:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
172:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
173:       "com.alibaba.fastjson.JSONObject",
174:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
175:       "com.alibaba.fastjson.serializer.CharacterCodec",
176:       "com.alibaba.fastjson.asm.TypeCollector",
177:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
178:       "com.alibaba.fastjson.asm.ByteVector",
179:       "com.alibaba.fastjson.parser.JSONLexer",
180:       "com.alibaba.fastjson.util.ASMClassLoader$1",
181:       "com.alibaba.fastjson.asm.Label",
182:       "com.alibaba.fastjson.asm.FieldWriter",
183:       "com.alibaba.fastjson.serializer.JSONSerializer",
184:       "com.alibaba.fastjson.util.JavaBeanInfo",
185:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
186:       "com.alibaba.fastjson.serializer.SerializeConfig",
187:       "com.alibaba.fastjson.serializer.AtomicCodec",
188:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
189:       "com.alibaba.fastjson.asm.Type",
190:       "com.alibaba.fastjson.serializer.FieldSerializer",
191:       "com.alibaba.fastjson.serializer.FloatCodec",
192:       "com.alibaba.fastjson.parser.JSONReaderScanner",
193:       "com.alibaba.fastjson.serializer.ValueFilter",
194:       "com.alibaba.fastjson.JSONPathException",
195:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
196:       "com.alibaba.fastjson.serializer.Labels",
197:       "com.alibaba.fastjson.serializer.CollectionCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
199:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
200:       "com.alibaba.fastjson.serializer.CharArrayCodec",
201:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
202:       "com.alibaba.fastjson.asm.MethodVisitor",
203:       "com.alibaba.fastjson.annotation.JSONCreator",
204:       "com.alibaba.fastjson.asm.MethodCollector",
205:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
206:       "com.alibaba.fastjson.annotation.JSONType",
207:       "com.alibaba.fastjson.serializer.LabelFilter",
208:       "com.alibaba.fastjson.util.UTF8Decoder",
209:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
210:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
211:       "com.alibaba.fastjson.serializer.DoubleSerializer",
212:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
213:       "com.alibaba.fastjson.serializer.BooleanCodec",
214:       "com.alibaba.fastjson.parser.ParserConfig",
215:       "com.alibaba.fastjson.parser.ParseContext",
216:       "com.alibaba.fastjson.parser.Feature",
217:       "com.alibaba.fastjson.serializer.PropertyPreFilter"
218:     );
219:   } 
220: 
221:   private static void resetClasses() {
222:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DefaultJSONParser_312_tmp__ESTest_scaffolding.class.getClassLoader()); 
223: 
224:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
225:       "com.alibaba.fastjson.parser.DefaultJSONParser",
226:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
227:       "com.alibaba.fastjson.util.IOUtils$1",
228:       "com.alibaba.fastjson.util.IOUtils",
229:       "com.alibaba.fastjson.util.IdentityHashMap",
230:       "com.alibaba.fastjson.util.ASMUtils",
231:       "com.alibaba.fastjson.parser.SymbolTable",
232:       "com.alibaba.fastjson.parser.Feature",
233:       "com.alibaba.fastjson.serializer.SerializerFeature",
234:       "com.alibaba.fastjson.JSON",
235:       "com.alibaba.fastjson.util.TypeUtils",
236:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
237:       "com.alibaba.fastjson.util.ASMClassLoader$1",
238:       "com.alibaba.fastjson.util.ASMClassLoader",
239:       "com.alibaba.fastjson.serializer.MiscCodec",
240:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
241:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
242:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
243:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
244:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
245:       "com.alibaba.fastjson.serializer.DateCodec",
246:       "com.alibaba.fastjson.serializer.CalendarCodec",
247:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
248:       "com.alibaba.fastjson.serializer.CollectionCodec",
249:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
250:       "com.alibaba.fastjson.serializer.StringCodec",
251:       "com.alibaba.fastjson.serializer.CharacterCodec",
252:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
253:       "com.alibaba.fastjson.serializer.IntegerCodec",
254:       "com.alibaba.fastjson.serializer.LongCodec",
255:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
256:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
257:       "com.alibaba.fastjson.serializer.FloatCodec",
258:       "com.alibaba.fastjson.serializer.BooleanCodec",
259:       "com.alibaba.fastjson.serializer.CharArrayCodec",
260:       "com.alibaba.fastjson.serializer.ReferenceCodec",
261:       "com.alibaba.fastjson.serializer.AtomicCodec",
262:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
263:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
264:       "com.alibaba.fastjson.parser.ParserConfig",
265:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
266:       "com.alibaba.fastjson.serializer.DoubleSerializer",
267:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
268:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
269:       "com.alibaba.fastjson.serializer.AppendableSerializer",
270:       "com.alibaba.fastjson.serializer.ToStringSerializer",
271:       "com.alibaba.fastjson.serializer.SerializeConfig",
272:       "com.alibaba.fastjson.JSONPath",
273:       "com.alibaba.fastjson.parser.JSONLexerBase",
274:       "com.alibaba.fastjson.parser.JSONReaderScanner",
275:       "com.alibaba.fastjson.JSONException",
276:       "com.alibaba.fastjson.parser.JSONToken",
277:       "com.alibaba.fastjson.parser.JSONScanner",
278:       "com.alibaba.fastjson.util.ServiceLoader",
279:       "com.alibaba.fastjson.util.JavaBeanInfo",
280:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
281:       "com.alibaba.fastjson.util.FieldInfo",
282:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
283:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
284:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
285:       "com.alibaba.fastjson.parser.ParseContext",
286:       "com.alibaba.fastjson.asm.ClassReader",
287:       "com.alibaba.fastjson.asm.TypeCollector$1",
288:       "com.alibaba.fastjson.asm.TypeCollector",
289:       "com.alibaba.fastjson.asm.Type",
290:       "com.alibaba.fastjson.asm.MethodCollector",
291:       "com.alibaba.fastjson.JSONObject",
292:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
293:       "com.alibaba.fastjson.JSONArray",
294:       "com.alibaba.fastjson.asm.ClassWriter",
295:       "com.alibaba.fastjson.asm.ByteVector",
296:       "com.alibaba.fastjson.asm.Item",
297:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
298:       "com.alibaba.fastjson.asm.FieldWriter",
299:       "com.alibaba.fastjson.asm.MethodWriter",
300:       "com.alibaba.fastjson.asm.Label",
301:       "com.alibaba.fastjson.serializer.SerializeWriter",
302:       "com.alibaba.fastjson.serializer.SerializeFilterable",
303:       "com.alibaba.fastjson.serializer.JSONSerializer",
304:       "com.alibaba.fastjson.serializer.MapSerializer",
305:       "com.alibaba.fastjson.serializer.SerialContext",
306:       "com.alibaba.fastjson.serializer.ListSerializer",
307:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
308:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
309:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
315:       "com.alibaba.fastjson.serializer.AwtCodec",
316:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
317:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
318:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.serializer.ArraySerializer",
321:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
322:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
323:       "com.alibaba.fastjson.PropertyNamingStrategy"
324:     );
325:   }
326: }

[MASTER] 18:39:52.471 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/parser/DefaultJSONParser.getDateFormat()Ljava/text/DateFormat; @63: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[4]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @63
    flags: { }
    locals: { 'com/alibaba/fastjson/parser/DefaultJSONParser', 'java/util/Locale', 'java/lang/String' }
    stack: { 'com/alibaba/fastjson/parser/DefaultJSONParser', uninitialized 57, uninitialized 57, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 3fb8 0044 2ab4 004c b800 5212 53b6
    0x0000010: 0057 b800 3fc7 004c b800 3fb8 0044 2abb
    0x0000020: 0059 592a b400 462a b400 5bb9 0061 0100
    0x0000030: b800 6799 0012 4c4d 58bb 0069 592c 2cb7
    0x0000040: 006d a700 06b7 006e b500 4cb8 003f b800
    0x0000050: 442a b400 4c2a b400 5bb9 0072 0100 b600
    0x0000060: 78b8 003f b800 442a b400 4cb0          
  Stackmap Table:
    full_frame(@69,{Object[#2]},{Object[#2],Uninitialized[#31],Uninitialized[#31],Object[#122],Object[#124]})
    full_frame(@72,{Object[#2]},{Object[#2],Object[#89]})
    same_frame(@97)

[MASTER] 18:39:52.471 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("H+#umU{PN%=jK^]SZ", (ParserConfig) null, 12);

[MASTER] 18:39:52.471 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:52.768 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:52.768 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = new ParserConfig();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("fastjson.parser.autoTypeAccept", parserConfig1, 0);

[MASTER] 18:39:52.768 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:52.784 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_315_1590165592769/com/alibaba/fastjson/parser/DefaultJSONParser_315_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_315_1590165592769/com/alibaba/fastjson/parser/DefaultJSONParser_315_tmp__ESTest_scaffolding.java]]
[MASTER] 18:39:52.784 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:52.784 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:52.784 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  cannot find symbol
   symbol:   variable parserConfig1
   location:  class com.alibaba.fastjson.parser.DefaultJSONParser_315_tmp__ESTest: 35
[MASTER] 18:39:52.784 [logback-1] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 18:39:52.784 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_315_1590165592769/com/alibaba/fastjson/parser/DefaultJSONParser_315_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 16:39:52 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson.parser;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.alibaba.fastjson.parser.DefaultJSONParser;
12: import com.alibaba.fastjson.parser.ParserConfig;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
18: public class DefaultJSONParser_315_tmp__ESTest extends DefaultJSONParser_315_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       // Undeclared exception!
23:       try { 
24:         ParserConfig.getGlobalInstance();
25:         fail("Expecting exception: NullPointerException");
26:       
27:       } catch(NullPointerException e) {
28:          //
29:          // no message in exception (getMessage() returned null)
30:          //
31:       }
32:       
33:       DefaultJSONParser defaultJSONParser1 = null;
34:       try {
35:         defaultJSONParser1 = new DefaultJSONParser((char[]) null, 0, parserConfig1, 57);
36:         fail("Expecting exception: NullPointerException");
37:       
38:       } catch(NullPointerException e) {
39:          //
40:          // no message in exception (getMessage() returned null)
41:          //
42:       }
43:   }
44: }
RegularFileObject[/tmp/EvoSuite_315_1590165592769/com/alibaba/fastjson/parser/DefaultJSONParser_315_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 16:39:52 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson.parser;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class DefaultJSONParser_315_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.parser.DefaultJSONParser"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultJSONParser_315_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.serializer.AwtCodec",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
90:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
91:       "com.alibaba.fastjson.serializer.JSONSerializable",
92:       "com.alibaba.fastjson.serializer.SerializeWriter",
93:       "com.alibaba.fastjson.serializer.ReferenceCodec",
94:       "com.alibaba.fastjson.JSONException",
95:       "com.alibaba.fastjson.asm.TypeCollector$1",
96:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
97:       "com.alibaba.fastjson.serializer.ToStringSerializer",
98:       "com.alibaba.fastjson.serializer.SerialContext",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.serializer.ObjectSerializer",
103:       "com.alibaba.fastjson.serializer.MapSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
106:       "com.alibaba.fastjson.serializer.DateCodec",
107:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
114:       "com.alibaba.fastjson.util.FieldInfo",
115:       "com.alibaba.fastjson.serializer.PropertyFilter",
116:       "com.alibaba.fastjson.annotation.JSONField",
117:       "com.alibaba.fastjson.parser.SymbolTable",
118:       "com.alibaba.fastjson.serializer.NameFilter",
119:       "com.alibaba.fastjson.serializer.ListSerializer",
120:       "com.alibaba.fastjson.JSONArray",
121:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
122:       "com.alibaba.fastjson.JSONAware",
123:       "com.alibaba.fastjson.serializer.LongCodec",
124:       "com.alibaba.fastjson.util.ASMClassLoader",
125:       "com.alibaba.fastjson.PropertyNamingStrategy",
126:       "com.alibaba.fastjson.parser.JSONToken",
127:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
128:       "com.alibaba.fastjson.serializer.AppendableSerializer",
129:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
130:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
131:       "com.alibaba.fastjson.serializer.ContextValueFilter",
132:       "com.alibaba.fastjson.util.ServiceLoader",
133:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
134:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
135:       "com.alibaba.fastjson.parser.DefaultJSONParser",
136:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
137:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
138:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
139:       "com.alibaba.fastjson.serializer.BeanContext",
140:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
141:       "com.alibaba.fastjson.util.IdentityHashMap",
142:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
143:       "com.alibaba.fastjson.JSON",
144:       "com.alibaba.fastjson.serializer.StringCodec",
145:       "com.alibaba.fastjson.serializer.SerializeFilterable",
146:       "com.alibaba.fastjson.JSONWriter",
147:       "com.alibaba.fastjson.asm.Opcodes",
148:       "com.alibaba.fastjson.JSONReader",
149:       "com.alibaba.fastjson.JSONStreamAware",
150:       "com.alibaba.fastjson.asm.MethodWriter",
151:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
152:       "com.alibaba.fastjson.serializer.SerializerFeature",
153:       "com.alibaba.fastjson.TypeReference$1",
154:       "com.alibaba.fastjson.serializer.CalendarCodec",
155:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
156:       "com.alibaba.fastjson.util.IOUtils",
157:       "com.alibaba.fastjson.util.TypeUtils",
158:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
159:       "com.alibaba.fastjson.asm.ClassReader",
160:       "com.alibaba.fastjson.spi.Module",
161:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
162:       "com.alibaba.fastjson.serializer.MiscCodec",
163:       "com.alibaba.fastjson.util.IOUtils$1",
164:       "com.alibaba.fastjson.serializer.IntegerCodec",
165:       "com.alibaba.fastjson.serializer.SerializeFilter",
166:       "com.alibaba.fastjson.JSONPObject",
167:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
168:       "com.alibaba.fastjson.serializer.BeforeFilter",
169:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
170:       "com.alibaba.fastjson.serializer.ArraySerializer",
171:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
172:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
173:       "com.alibaba.fastjson.JSONObject",
174:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
175:       "com.alibaba.fastjson.serializer.CharacterCodec",
176:       "com.alibaba.fastjson.asm.TypeCollector",
177:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
178:       "com.alibaba.fastjson.asm.ByteVector",
179:       "com.alibaba.fastjson.parser.JSONLexer",
180:       "com.alibaba.fastjson.util.ASMClassLoader$1",
181:       "com.alibaba.fastjson.asm.Label",
182:       "com.alibaba.fastjson.asm.FieldWriter",
183:       "com.alibaba.fastjson.serializer.JSONSerializer",
184:       "com.alibaba.fastjson.util.JavaBeanInfo",
185:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
186:       "com.alibaba.fastjson.serializer.SerializeConfig",
187:       "com.alibaba.fastjson.serializer.AtomicCodec",
188:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
189:       "com.alibaba.fastjson.asm.Type",
190:       "com.alibaba.fastjson.serializer.FieldSerializer",
191:       "com.alibaba.fastjson.serializer.FloatCodec",
192:       "com.alibaba.fastjson.parser.JSONReaderScanner",
193:       "com.alibaba.fastjson.serializer.ValueFilter",
194:       "com.alibaba.fastjson.JSONPathException",
195:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
196:       "com.alibaba.fastjson.serializer.Labels",
197:       "com.alibaba.fastjson.serializer.CollectionCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
199:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
200:       "com.alibaba.fastjson.serializer.CharArrayCodec",
201:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
202:       "com.alibaba.fastjson.asm.MethodVisitor",
203:       "com.alibaba.fastjson.annotation.JSONCreator",
204:       "com.alibaba.fastjson.asm.MethodCollector",
205:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
206:       "com.alibaba.fastjson.annotation.JSONType",
207:       "com.alibaba.fastjson.serializer.LabelFilter",
208:       "com.alibaba.fastjson.util.UTF8Decoder",
209:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
210:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
211:       "com.alibaba.fastjson.serializer.DoubleSerializer",
212:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
213:       "com.alibaba.fastjson.serializer.BooleanCodec",
214:       "com.alibaba.fastjson.parser.ParserConfig",
215:       "com.alibaba.fastjson.parser.ParseContext",
216:       "com.alibaba.fastjson.parser.Feature",
217:       "com.alibaba.fastjson.serializer.PropertyPreFilter"
218:     );
219:   } 
220: 
221:   private static void resetClasses() {
222:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DefaultJSONParser_315_tmp__ESTest_scaffolding.class.getClassLoader()); 
223: 
224:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
225:       "com.alibaba.fastjson.parser.DefaultJSONParser",
226:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
227:       "com.alibaba.fastjson.util.IOUtils$1",
228:       "com.alibaba.fastjson.util.IOUtils",
229:       "com.alibaba.fastjson.util.IdentityHashMap",
230:       "com.alibaba.fastjson.util.ASMUtils",
231:       "com.alibaba.fastjson.parser.SymbolTable",
232:       "com.alibaba.fastjson.parser.Feature",
233:       "com.alibaba.fastjson.serializer.SerializerFeature",
234:       "com.alibaba.fastjson.JSON",
235:       "com.alibaba.fastjson.util.TypeUtils",
236:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
237:       "com.alibaba.fastjson.util.ASMClassLoader$1",
238:       "com.alibaba.fastjson.util.ASMClassLoader",
239:       "com.alibaba.fastjson.serializer.MiscCodec",
240:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
241:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
242:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
243:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
244:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
245:       "com.alibaba.fastjson.serializer.DateCodec",
246:       "com.alibaba.fastjson.serializer.CalendarCodec",
247:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
248:       "com.alibaba.fastjson.serializer.CollectionCodec",
249:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
250:       "com.alibaba.fastjson.serializer.StringCodec",
251:       "com.alibaba.fastjson.serializer.CharacterCodec",
252:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
253:       "com.alibaba.fastjson.serializer.IntegerCodec",
254:       "com.alibaba.fastjson.serializer.LongCodec",
255:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
256:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
257:       "com.alibaba.fastjson.serializer.FloatCodec",
258:       "com.alibaba.fastjson.serializer.BooleanCodec",
259:       "com.alibaba.fastjson.serializer.CharArrayCodec",
260:       "com.alibaba.fastjson.serializer.ReferenceCodec",
261:       "com.alibaba.fastjson.serializer.AtomicCodec",
262:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
263:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
264:       "com.alibaba.fastjson.parser.ParserConfig",
265:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
266:       "com.alibaba.fastjson.serializer.DoubleSerializer",
267:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
268:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
269:       "com.alibaba.fastjson.serializer.AppendableSerializer",
270:       "com.alibaba.fastjson.serializer.ToStringSerializer",
271:       "com.alibaba.fastjson.serializer.SerializeConfig",
272:       "com.alibaba.fastjson.JSONPath",
273:       "com.alibaba.fastjson.parser.JSONLexerBase",
274:       "com.alibaba.fastjson.parser.JSONReaderScanner",
275:       "com.alibaba.fastjson.JSONException",
276:       "com.alibaba.fastjson.parser.JSONToken",
277:       "com.alibaba.fastjson.parser.JSONScanner",
278:       "com.alibaba.fastjson.util.ServiceLoader",
279:       "com.alibaba.fastjson.util.JavaBeanInfo",
280:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
281:       "com.alibaba.fastjson.util.FieldInfo",
282:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
283:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
284:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
285:       "com.alibaba.fastjson.parser.ParseContext",
286:       "com.alibaba.fastjson.asm.ClassReader",
287:       "com.alibaba.fastjson.asm.TypeCollector$1",
288:       "com.alibaba.fastjson.asm.TypeCollector",
289:       "com.alibaba.fastjson.asm.Type",
290:       "com.alibaba.fastjson.asm.MethodCollector",
291:       "com.alibaba.fastjson.JSONObject",
292:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
293:       "com.alibaba.fastjson.JSONArray",
294:       "com.alibaba.fastjson.asm.ClassWriter",
295:       "com.alibaba.fastjson.asm.ByteVector",
296:       "com.alibaba.fastjson.asm.Item",
297:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
298:       "com.alibaba.fastjson.asm.FieldWriter",
299:       "com.alibaba.fastjson.asm.MethodWriter",
300:       "com.alibaba.fastjson.asm.Label",
301:       "com.alibaba.fastjson.serializer.SerializeWriter",
302:       "com.alibaba.fastjson.serializer.SerializeFilterable",
303:       "com.alibaba.fastjson.serializer.JSONSerializer",
304:       "com.alibaba.fastjson.serializer.MapSerializer",
305:       "com.alibaba.fastjson.serializer.SerialContext",
306:       "com.alibaba.fastjson.serializer.ListSerializer",
307:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
308:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
309:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
315:       "com.alibaba.fastjson.serializer.AwtCodec",
316:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
317:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
318:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.serializer.ArraySerializer",
321:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
322:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
323:       "com.alibaba.fastjson.PropertyNamingStrategy"
324:     );
325:   }
326: }

[MASTER] 18:39:53.096 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:53.097 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
char[] charArray1 = new char[1];
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(charArray1, 24, parserConfig1, 2);

[MASTER] 18:39:53.097 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:53.404 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:53.405 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
char[] charArray1 = new char[9];
charArray1[1] = '\"';
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(charArray1, 1, parserConfig1, 2);

[MASTER] 18:39:53.405 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:53.425 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_318_1590165593405/com/alibaba/fastjson/parser/DefaultJSONParser_318_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_318_1590165593405/com/alibaba/fastjson/parser/DefaultJSONParser_318_tmp__ESTest_scaffolding.java]]
[MASTER] 18:39:53.425 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:53.425 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:53.425 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  cannot find symbol
   symbol:   variable classLoader1
   location:  class com.alibaba.fastjson.parser.DefaultJSONParser_318_tmp__ESTest: 23
[MASTER] 18:39:53.426 [logback-1] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 18:39:53.455 [logback-1] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 18:39:53.426 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_318_1590165593405/com/alibaba/fastjson/parser/DefaultJSONParser_318_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 16:39:53 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson.parser;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.alibaba.fastjson.parser.DefaultJSONParser;
12: import com.alibaba.fastjson.parser.ParserConfig;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
18: public class DefaultJSONParser_318_tmp__ESTest extends DefaultJSONParser_318_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       ClassLoader.getSystemClassLoader();
23:       ParserConfig parserConfig1 = new ParserConfig(classLoader1);
24:       DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("false", parserConfig1);
25:       // Undeclared exception!
26:       try { 
27:         defaultJSONParser1.close();
28:         fail("Expecting exception: RuntimeException");
29:       
30:       } catch(RuntimeException e) {
31:          //
32:          // not close json text, token : false
33:          //
34:          verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
35:       }
36:   }
37: }
RegularFileObject[/tmp/EvoSuite_318_1590165593405/com/alibaba/fastjson/parser/DefaultJSONParser_318_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 16:39:53 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson.parser;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class DefaultJSONParser_318_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.parser.DefaultJSONParser"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultJSONParser_318_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.serializer.AwtCodec",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
90:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
91:       "com.alibaba.fastjson.serializer.JSONSerializable",
92:       "com.alibaba.fastjson.serializer.SerializeWriter",
93:       "com.alibaba.fastjson.serializer.ReferenceCodec",
94:       "com.alibaba.fastjson.JSONException",
95:       "com.alibaba.fastjson.asm.TypeCollector$1",
96:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
97:       "com.alibaba.fastjson.serializer.ToStringSerializer",
98:       "com.alibaba.fastjson.serializer.SerialContext",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.serializer.ObjectSerializer",
103:       "com.alibaba.fastjson.serializer.MapSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
106:       "com.alibaba.fastjson.serializer.DateCodec",
107:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
114:       "com.alibaba.fastjson.util.FieldInfo",
115:       "com.alibaba.fastjson.serializer.PropertyFilter",
116:       "com.alibaba.fastjson.annotation.JSONField",
117:       "com.alibaba.fastjson.parser.SymbolTable",
118:       "com.alibaba.fastjson.serializer.NameFilter",
119:       "com.alibaba.fastjson.serializer.ListSerializer",
120:       "com.alibaba.fastjson.JSONArray",
121:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
122:       "com.alibaba.fastjson.JSONAware",
123:       "com.alibaba.fastjson.serializer.LongCodec",
124:       "com.alibaba.fastjson.util.ASMClassLoader",
125:       "com.alibaba.fastjson.PropertyNamingStrategy",
126:       "com.alibaba.fastjson.parser.JSONToken",
127:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
128:       "com.alibaba.fastjson.serializer.AppendableSerializer",
129:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
130:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
131:       "com.alibaba.fastjson.serializer.ContextValueFilter",
132:       "com.alibaba.fastjson.util.ServiceLoader",
133:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
134:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
135:       "com.alibaba.fastjson.parser.DefaultJSONParser",
136:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
137:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
138:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
139:       "com.alibaba.fastjson.serializer.BeanContext",
140:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
141:       "com.alibaba.fastjson.util.IdentityHashMap",
142:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
143:       "com.alibaba.fastjson.JSON",
144:       "com.alibaba.fastjson.serializer.StringCodec",
145:       "com.alibaba.fastjson.serializer.SerializeFilterable",
146:       "com.alibaba.fastjson.JSONWriter",
147:       "com.alibaba.fastjson.asm.Opcodes",
148:       "com.alibaba.fastjson.JSONReader",
149:       "com.alibaba.fastjson.JSONStreamAware",
150:       "com.alibaba.fastjson.asm.MethodWriter",
151:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
152:       "com.alibaba.fastjson.serializer.SerializerFeature",
153:       "com.alibaba.fastjson.TypeReference$1",
154:       "com.alibaba.fastjson.serializer.CalendarCodec",
155:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
156:       "com.alibaba.fastjson.util.IOUtils",
157:       "com.alibaba.fastjson.util.TypeUtils",
158:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
159:       "com.alibaba.fastjson.asm.ClassReader",
160:       "com.alibaba.fastjson.spi.Module",
161:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
162:       "com.alibaba.fastjson.serializer.MiscCodec",
163:       "com.alibaba.fastjson.util.IOUtils$1",
164:       "com.alibaba.fastjson.serializer.IntegerCodec",
165:       "com.alibaba.fastjson.serializer.SerializeFilter",
166:       "com.alibaba.fastjson.JSONPObject",
167:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
168:       "com.alibaba.fastjson.serializer.BeforeFilter",
169:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
170:       "com.alibaba.fastjson.serializer.ArraySerializer",
171:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
172:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
173:       "com.alibaba.fastjson.JSONObject",
174:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
175:       "com.alibaba.fastjson.serializer.CharacterCodec",
176:       "com.alibaba.fastjson.asm.TypeCollector",
177:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
178:       "com.alibaba.fastjson.asm.ByteVector",
179:       "com.alibaba.fastjson.parser.JSONLexer",
180:       "com.alibaba.fastjson.util.ASMClassLoader$1",
181:       "com.alibaba.fastjson.asm.Label",
182:       "com.alibaba.fastjson.asm.FieldWriter",
183:       "com.alibaba.fastjson.serializer.JSONSerializer",
184:       "com.alibaba.fastjson.util.JavaBeanInfo",
185:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
186:       "com.alibaba.fastjson.serializer.SerializeConfig",
187:       "com.alibaba.fastjson.serializer.AtomicCodec",
188:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
189:       "com.alibaba.fastjson.asm.Type",
190:       "com.alibaba.fastjson.serializer.FieldSerializer",
191:       "com.alibaba.fastjson.serializer.FloatCodec",
192:       "com.alibaba.fastjson.parser.JSONReaderScanner",
193:       "com.alibaba.fastjson.serializer.ValueFilter",
194:       "com.alibaba.fastjson.JSONPathException",
195:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
196:       "com.alibaba.fastjson.serializer.Labels",
197:       "com.alibaba.fastjson.serializer.CollectionCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
199:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
200:       "com.alibaba.fastjson.serializer.CharArrayCodec",
201:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
202:       "com.alibaba.fastjson.asm.MethodVisitor",
203:       "com.alibaba.fastjson.annotation.JSONCreator",
204:       "com.alibaba.fastjson.asm.MethodCollector",
205:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
206:       "com.alibaba.fastjson.annotation.JSONType",
207:       "com.alibaba.fastjson.serializer.LabelFilter",
208:       "com.alibaba.fastjson.util.UTF8Decoder",
209:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
210:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
211:       "com.alibaba.fastjson.serializer.DoubleSerializer",
212:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
213:       "com.alibaba.fastjson.serializer.BooleanCodec",
214:       "com.alibaba.fastjson.parser.ParserConfig",
215:       "com.alibaba.fastjson.parser.ParseContext",
216:       "com.alibaba.fastjson.parser.Feature",
217:       "com.alibaba.fastjson.serializer.PropertyPreFilter"
218:     );
219:   } 
220: 
221:   private static void resetClasses() {
222:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DefaultJSONParser_318_tmp__ESTest_scaffolding.class.getClassLoader()); 
223: 
224:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
225:       "com.alibaba.fastjson.parser.DefaultJSONParser",
226:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
227:       "com.alibaba.fastjson.util.IOUtils$1",
228:       "com.alibaba.fastjson.util.IOUtils",
229:       "com.alibaba.fastjson.util.IdentityHashMap",
230:       "com.alibaba.fastjson.util.ASMUtils",
231:       "com.alibaba.fastjson.parser.SymbolTable",
232:       "com.alibaba.fastjson.parser.Feature",
233:       "com.alibaba.fastjson.serializer.SerializerFeature",
234:       "com.alibaba.fastjson.JSON",
235:       "com.alibaba.fastjson.util.TypeUtils",
236:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
237:       "com.alibaba.fastjson.util.ASMClassLoader$1",
238:       "com.alibaba.fastjson.util.ASMClassLoader",
239:       "com.alibaba.fastjson.serializer.MiscCodec",
240:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
241:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
242:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
243:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
244:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
245:       "com.alibaba.fastjson.serializer.DateCodec",
246:       "com.alibaba.fastjson.serializer.CalendarCodec",
247:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
248:       "com.alibaba.fastjson.serializer.CollectionCodec",
249:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
250:       "com.alibaba.fastjson.serializer.StringCodec",
251:       "com.alibaba.fastjson.serializer.CharacterCodec",
252:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
253:       "com.alibaba.fastjson.serializer.IntegerCodec",
254:       "com.alibaba.fastjson.serializer.LongCodec",
255:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
256:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
257:       "com.alibaba.fastjson.serializer.FloatCodec",
258:       "com.alibaba.fastjson.serializer.BooleanCodec",
259:       "com.alibaba.fastjson.serializer.CharArrayCodec",
260:       "com.alibaba.fastjson.serializer.ReferenceCodec",
261:       "com.alibaba.fastjson.serializer.AtomicCodec",
262:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
263:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
264:       "com.alibaba.fastjson.parser.ParserConfig",
265:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
266:       "com.alibaba.fastjson.serializer.DoubleSerializer",
267:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
268:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
269:       "com.alibaba.fastjson.serializer.AppendableSerializer",
270:       "com.alibaba.fastjson.serializer.ToStringSerializer",
271:       "com.alibaba.fastjson.serializer.SerializeConfig",
272:       "com.alibaba.fastjson.JSONPath",
273:       "com.alibaba.fastjson.parser.JSONLexerBase",
274:       "com.alibaba.fastjson.parser.JSONReaderScanner",
275:       "com.alibaba.fastjson.JSONException",
276:       "com.alibaba.fastjson.parser.JSONToken",
277:       "com.alibaba.fastjson.parser.JSONScanner",
278:       "com.alibaba.fastjson.util.ServiceLoader",
279:       "com.alibaba.fastjson.util.JavaBeanInfo",
280:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
281:       "com.alibaba.fastjson.util.FieldInfo",
282:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
283:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
284:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
285:       "com.alibaba.fastjson.parser.ParseContext",
286:       "com.alibaba.fastjson.asm.ClassReader",
287:       "com.alibaba.fastjson.asm.TypeCollector$1",
288:       "com.alibaba.fastjson.asm.TypeCollector",
289:       "com.alibaba.fastjson.asm.Type",
290:       "com.alibaba.fastjson.asm.MethodCollector",
291:       "com.alibaba.fastjson.JSONObject",
292:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
293:       "com.alibaba.fastjson.JSONArray",
294:       "com.alibaba.fastjson.asm.ClassWriter",
295:       "com.alibaba.fastjson.asm.ByteVector",
296:       "com.alibaba.fastjson.asm.Item",
297:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
298:       "com.alibaba.fastjson.asm.FieldWriter",
299:       "com.alibaba.fastjson.asm.MethodWriter",
300:       "com.alibaba.fastjson.asm.Label",
301:       "com.alibaba.fastjson.serializer.SerializeWriter",
302:       "com.alibaba.fastjson.serializer.SerializeFilterable",
303:       "com.alibaba.fastjson.serializer.JSONSerializer",
304:       "com.alibaba.fastjson.serializer.MapSerializer",
305:       "com.alibaba.fastjson.serializer.SerialContext",
306:       "com.alibaba.fastjson.serializer.ListSerializer",
307:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
308:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
309:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
315:       "com.alibaba.fastjson.serializer.AwtCodec",
316:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
317:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
318:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.serializer.ArraySerializer",
321:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
322:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
323:       "com.alibaba.fastjson.PropertyNamingStrategy"
324:     );
325:   }
326: }

[MASTER] 18:39:53.454 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_319_1590165593426/com/alibaba/fastjson/parser/DefaultJSONParser_319_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_319_1590165593426/com/alibaba/fastjson/parser/DefaultJSONParser_319_tmp__ESTest_scaffolding.java]]
[MASTER] 18:39:53.454 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:53.454 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:53.455 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  cannot find symbol
   symbol:   variable classLoader1
   location:  class com.alibaba.fastjson.parser.DefaultJSONParser_319_tmp__ESTest: 25
[MASTER] 18:39:53.455 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_319_1590165593426/com/alibaba/fastjson/parser/DefaultJSONParser_319_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 16:39:53 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson.parser;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.alibaba.fastjson.parser.DefaultJSONParser;
12: import com.alibaba.fastjson.parser.JSONScanner;
13: import com.alibaba.fastjson.parser.ParserConfig;
14: import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
20: public class DefaultJSONParser_319_tmp__ESTest extends DefaultJSONParser_319_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       ClassLoader.getSystemClassLoader();
25:       ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
26:       ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory1);
27:       JSONScanner jSONScanner1 = new JSONScanner("{\"create asm serializer error, verson 1.2.68, class \":-99,\"com.alibaba.fastjson.serializer.ArraySerializer\":{},\"expect ':' at \":true,\"..\":true,\", pos \":false,\"\":false}", 115);
28:       DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONScanner1, parserConfig1);
29:       // Undeclared exception!
30:       try { 
31:         defaultJSONParser1.getInput();
32:         fail("Expecting exception: NullPointerException");
33:       
34:       } catch(NullPointerException e) {
35:          //
36:          // no message in exception (getMessage() returned null)
37:          //
38:          verifyException("org.evosuite.runtime.System", e);
39:       }
40:   }
41: }
RegularFileObject[/tmp/EvoSuite_319_1590165593426/com/alibaba/fastjson/parser/DefaultJSONParser_319_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 16:39:53 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson.parser;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class DefaultJSONParser_319_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.parser.DefaultJSONParser"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultJSONParser_319_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.serializer.AwtCodec",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
90:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
91:       "com.alibaba.fastjson.serializer.JSONSerializable",
92:       "com.alibaba.fastjson.serializer.SerializeWriter",
93:       "com.alibaba.fastjson.serializer.ReferenceCodec",
94:       "com.alibaba.fastjson.JSONException",
95:       "com.alibaba.fastjson.asm.TypeCollector$1",
96:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
97:       "com.alibaba.fastjson.serializer.ToStringSerializer",
98:       "com.alibaba.fastjson.serializer.SerialContext",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.serializer.ObjectSerializer",
103:       "com.alibaba.fastjson.serializer.MapSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
106:       "com.alibaba.fastjson.serializer.DateCodec",
107:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
114:       "com.alibaba.fastjson.util.FieldInfo",
115:       "com.alibaba.fastjson.serializer.PropertyFilter",
116:       "com.alibaba.fastjson.annotation.JSONField",
117:       "com.alibaba.fastjson.parser.SymbolTable",
118:       "com.alibaba.fastjson.serializer.NameFilter",
119:       "com.alibaba.fastjson.serializer.ListSerializer",
120:       "com.alibaba.fastjson.JSONArray",
121:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
122:       "com.alibaba.fastjson.JSONAware",
123:       "com.alibaba.fastjson.serializer.LongCodec",
124:       "com.alibaba.fastjson.util.ASMClassLoader",
125:       "com.alibaba.fastjson.PropertyNamingStrategy",
126:       "com.alibaba.fastjson.parser.JSONToken",
127:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
128:       "com.alibaba.fastjson.serializer.AppendableSerializer",
129:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
130:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
131:       "com.alibaba.fastjson.serializer.ContextValueFilter",
132:       "com.alibaba.fastjson.util.ServiceLoader",
133:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
134:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
135:       "com.alibaba.fastjson.parser.DefaultJSONParser",
136:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
137:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
138:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
139:       "com.alibaba.fastjson.serializer.BeanContext",
140:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
141:       "com.alibaba.fastjson.util.IdentityHashMap",
142:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
143:       "com.alibaba.fastjson.JSON",
144:       "com.alibaba.fastjson.serializer.StringCodec",
145:       "com.alibaba.fastjson.serializer.SerializeFilterable",
146:       "com.alibaba.fastjson.JSONWriter",
147:       "com.alibaba.fastjson.asm.Opcodes",
148:       "com.alibaba.fastjson.JSONReader",
149:       "com.alibaba.fastjson.JSONStreamAware",
150:       "com.alibaba.fastjson.asm.MethodWriter",
151:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
152:       "com.alibaba.fastjson.serializer.SerializerFeature",
153:       "com.alibaba.fastjson.TypeReference$1",
154:       "com.alibaba.fastjson.serializer.CalendarCodec",
155:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
156:       "com.alibaba.fastjson.util.IOUtils",
157:       "com.alibaba.fastjson.util.TypeUtils",
158:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
159:       "com.alibaba.fastjson.asm.ClassReader",
160:       "com.alibaba.fastjson.spi.Module",
161:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
162:       "com.alibaba.fastjson.serializer.MiscCodec",
163:       "com.alibaba.fastjson.util.IOUtils$1",
164:       "com.alibaba.fastjson.serializer.IntegerCodec",
165:       "com.alibaba.fastjson.serializer.SerializeFilter",
166:       "com.alibaba.fastjson.JSONPObject",
167:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
168:       "com.alibaba.fastjson.serializer.BeforeFilter",
169:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
170:       "com.alibaba.fastjson.serializer.ArraySerializer",
171:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
172:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
173:       "com.alibaba.fastjson.JSONObject",
174:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
175:       "com.alibaba.fastjson.serializer.CharacterCodec",
176:       "com.alibaba.fastjson.asm.TypeCollector",
177:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
178:       "com.alibaba.fastjson.asm.ByteVector",
179:       "com.alibaba.fastjson.parser.JSONLexer",
180:       "com.alibaba.fastjson.util.ASMClassLoader$1",
181:       "com.alibaba.fastjson.asm.Label",
182:       "com.alibaba.fastjson.asm.FieldWriter",
183:       "com.alibaba.fastjson.serializer.JSONSerializer",
184:       "com.alibaba.fastjson.util.JavaBeanInfo",
185:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
186:       "com.alibaba.fastjson.serializer.SerializeConfig",
187:       "com.alibaba.fastjson.serializer.AtomicCodec",
188:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
189:       "com.alibaba.fastjson.asm.Type",
190:       "com.alibaba.fastjson.serializer.FieldSerializer",
191:       "com.alibaba.fastjson.serializer.FloatCodec",
192:       "com.alibaba.fastjson.parser.JSONReaderScanner",
193:       "com.alibaba.fastjson.serializer.ValueFilter",
194:       "com.alibaba.fastjson.JSONPathException",
195:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
196:       "com.alibaba.fastjson.serializer.Labels",
197:       "com.alibaba.fastjson.serializer.CollectionCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
199:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
200:       "com.alibaba.fastjson.serializer.CharArrayCodec",
201:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
202:       "com.alibaba.fastjson.asm.MethodVisitor",
203:       "com.alibaba.fastjson.annotation.JSONCreator",
204:       "com.alibaba.fastjson.asm.MethodCollector",
205:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
206:       "com.alibaba.fastjson.annotation.JSONType",
207:       "com.alibaba.fastjson.serializer.LabelFilter",
208:       "com.alibaba.fastjson.util.UTF8Decoder",
209:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
210:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
211:       "com.alibaba.fastjson.serializer.DoubleSerializer",
212:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
213:       "com.alibaba.fastjson.serializer.BooleanCodec",
214:       "com.alibaba.fastjson.parser.ParserConfig",
215:       "com.alibaba.fastjson.parser.ParseContext",
216:       "com.alibaba.fastjson.parser.Feature",
217:       "com.alibaba.fastjson.serializer.PropertyPreFilter"
218:     );
219:   } 
220: 
221:   private static void resetClasses() {
222:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DefaultJSONParser_319_tmp__ESTest_scaffolding.class.getClassLoader()); 
223: 
224:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
225:       "com.alibaba.fastjson.parser.DefaultJSONParser",
226:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
227:       "com.alibaba.fastjson.util.IOUtils$1",
228:       "com.alibaba.fastjson.util.IOUtils",
229:       "com.alibaba.fastjson.util.IdentityHashMap",
230:       "com.alibaba.fastjson.util.ASMUtils",
231:       "com.alibaba.fastjson.parser.SymbolTable",
232:       "com.alibaba.fastjson.parser.Feature",
233:       "com.alibaba.fastjson.serializer.SerializerFeature",
234:       "com.alibaba.fastjson.JSON",
235:       "com.alibaba.fastjson.util.TypeUtils",
236:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
237:       "com.alibaba.fastjson.util.ASMClassLoader$1",
238:       "com.alibaba.fastjson.util.ASMClassLoader",
239:       "com.alibaba.fastjson.serializer.MiscCodec",
240:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
241:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
242:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
243:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
244:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
245:       "com.alibaba.fastjson.serializer.DateCodec",
246:       "com.alibaba.fastjson.serializer.CalendarCodec",
247:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
248:       "com.alibaba.fastjson.serializer.CollectionCodec",
249:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
250:       "com.alibaba.fastjson.serializer.StringCodec",
251:       "com.alibaba.fastjson.serializer.CharacterCodec",
252:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
253:       "com.alibaba.fastjson.serializer.IntegerCodec",
254:       "com.alibaba.fastjson.serializer.LongCodec",
255:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
256:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
257:       "com.alibaba.fastjson.serializer.FloatCodec",
258:       "com.alibaba.fastjson.serializer.BooleanCodec",
259:       "com.alibaba.fastjson.serializer.CharArrayCodec",
260:       "com.alibaba.fastjson.serializer.ReferenceCodec",
261:       "com.alibaba.fastjson.serializer.AtomicCodec",
262:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
263:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
264:       "com.alibaba.fastjson.parser.ParserConfig",
265:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
266:       "com.alibaba.fastjson.serializer.DoubleSerializer",
267:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
268:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
269:       "com.alibaba.fastjson.serializer.AppendableSerializer",
270:       "com.alibaba.fastjson.serializer.ToStringSerializer",
271:       "com.alibaba.fastjson.serializer.SerializeConfig",
272:       "com.alibaba.fastjson.JSONPath",
273:       "com.alibaba.fastjson.parser.JSONLexerBase",
274:       "com.alibaba.fastjson.parser.JSONReaderScanner",
275:       "com.alibaba.fastjson.JSONException",
276:       "com.alibaba.fastjson.parser.JSONToken",
277:       "com.alibaba.fastjson.parser.JSONScanner",
278:       "com.alibaba.fastjson.util.ServiceLoader",
279:       "com.alibaba.fastjson.util.JavaBeanInfo",
280:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
281:       "com.alibaba.fastjson.util.FieldInfo",
282:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
283:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
284:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
285:       "com.alibaba.fastjson.parser.ParseContext",
286:       "com.alibaba.fastjson.asm.ClassReader",
287:       "com.alibaba.fastjson.asm.TypeCollector$1",
288:       "com.alibaba.fastjson.asm.TypeCollector",
289:       "com.alibaba.fastjson.asm.Type",
290:       "com.alibaba.fastjson.asm.MethodCollector",
291:       "com.alibaba.fastjson.JSONObject",
292:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
293:       "com.alibaba.fastjson.JSONArray",
294:       "com.alibaba.fastjson.asm.ClassWriter",
295:       "com.alibaba.fastjson.asm.ByteVector",
296:       "com.alibaba.fastjson.asm.Item",
297:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
298:       "com.alibaba.fastjson.asm.FieldWriter",
299:       "com.alibaba.fastjson.asm.MethodWriter",
300:       "com.alibaba.fastjson.asm.Label",
301:       "com.alibaba.fastjson.serializer.SerializeWriter",
302:       "com.alibaba.fastjson.serializer.SerializeFilterable",
303:       "com.alibaba.fastjson.serializer.JSONSerializer",
304:       "com.alibaba.fastjson.serializer.MapSerializer",
305:       "com.alibaba.fastjson.serializer.SerialContext",
306:       "com.alibaba.fastjson.serializer.ListSerializer",
307:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
308:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
309:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
315:       "com.alibaba.fastjson.serializer.AwtCodec",
316:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
317:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
318:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.serializer.ArraySerializer",
321:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
322:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
323:       "com.alibaba.fastjson.PropertyNamingStrategy"
324:     );
325:   }
326: }

[MASTER] 18:39:53.827 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:53.827 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.global;
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("com.alibaba.fastjson.JSONPath$RegMatchSegement", parserConfig1, 1);
defaultJSONParser1.isEnabled((Feature) null);

[MASTER] 18:39:53.827 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:54.196 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:54.196 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Dimension dimension1 = new Dimension();
JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("{}");
ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(dimension1, jSONReaderScanner1, parserConfig1);
Hashtable<Float, Insets> hashtable1 = new Hashtable<Float, Insets>();
defaultJSONParser1.parseObject((Map) hashtable1);
defaultJSONParser1.close();
defaultJSONParser1.parse();

[MASTER] 18:39:54.196 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:54.536 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:54.536 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.global;
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"$.com.alibaba.fastjson.serializer.ArraySerializer\":{}}", parserConfig1, 1);
defaultJSONParser1.parse((PropertyProcessable) null, (Object) "{\"$.com.alibaba.fastjson.serializer.ArraySerializer\":{}}");

[MASTER] 18:39:54.536 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:54.839 [logback-2] ERROR JUnitAnalyzer - Issue in scaffolding of the test suite: 
Mockito cannot mock this class: interface com.alibaba.fastjson.annotation.JSONType.

Mockito can only mock non-private & non-final classes.
If you're not sure why you're getting this error, please report to the mailing list.


Java               : 1.8
JVM vendor name    : Oracle Corporation
JVM vendor version : 25.161-b14
JVM name           : OpenJDK 64-Bit Server VM
JVM version        : 1.8.0_161-b14
JVM info           : mixed mode
OS name            : Linux
OS version         : 3.10.0-693.17.1.el7.x86_64


Underlying exception : java.lang.IllegalArgumentException: None of [public static boolean org.evosuite.shaded.org.mockito.internal.creation.bytebuddy.MockMethodInterceptor$ForEquals.doIdentityEquals(java.lang.Object,java.lang.Object)] allows for delegation from public boolean java.lang.Object.equals(java.lang.Object)
Stack trace:
com.alibaba.fastjson.parser.DefaultJSONParser_323_tmp__ESTest_scaffolding.initMocksToAvoidTimeoutsInTheTests(DefaultJSONParser_323_tmp__ESTest_scaffolding.java:223)
com.alibaba.fastjson.parser.DefaultJSONParser_323_tmp__ESTest_scaffolding.initEvoSuiteFramework(DefaultJSONParser_323_tmp__ESTest_scaffolding.java:42)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
org.junit.runners.ParentRunner.run(ParentRunner.java:363)
org.junit.runners.Suite.runChild(Suite.java:128)
org.junit.runners.Suite.runChild(Suite.java:27)
org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
org.junit.runners.ParentRunner.run(ParentRunner.java:363)
org.junit.runner.JUnitCore.run(JUnitCore.java:137)
org.junit.runner.JUnitCore.run(JUnitCore.java:115)
org.junit.runner.JUnitCore.run(JUnitCore.java:105)
org.junit.runner.JUnitCore.run(JUnitCore.java:94)
org.evosuite.junit.JUnitAnalyzer.runJUnitOnCurrentProcess(JUnitAnalyzer.java:306)
org.evosuite.junit.JUnitAnalyzer.runTests(JUnitAnalyzer.java:276)
org.evosuite.junit.JUnitAnalyzer.handleTestsThatAreUnstable(JUnitAnalyzer.java:178)
org.evosuite.TestSuiteGenerator.compileAndCheckTests(TestSuiteGenerator.java:622)
org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:559)
org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:255)
org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:155)
java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:39:55.128 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:55.128 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Dimension dimension1 = new Dimension();
JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("[99]");
ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(dimension1, jSONReaderScanner1, parserConfig1);
defaultJSONParser1.parseArray((Collection) null);

[MASTER] 18:39:55.128 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:55.550 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:55.550 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.global;
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"\":false,\"syntax error\":[],\"object key level > 512\":true}", parserConfig1, 1);
Class<BreakIterator> class1 = BreakIterator.class;
defaultJSONParser1.parseArrayWithType(class1);

[MASTER] 18:39:55.550 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:55.928 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:55.928 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = new ParserConfig();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("?Ri=w%0!i6'0", parserConfig1);
defaultJSONParser1.parseArrayWithType((Type) null);

[MASTER] 18:39:55.928 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:55.951 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_327_1590165595929/com/alibaba/fastjson/parser/DefaultJSONParser_327_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_327_1590165595929/com/alibaba/fastjson/parser/DefaultJSONParser_327_tmp__ESTest_scaffolding.java]]
[MASTER] 18:39:55.951 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:55.951 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:55.951 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl is internal proprietary API and may be removed in a future release: 17
[MASTER] 18:39:55.951 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  cannot find symbol
   symbol:   variable parserConfig1
   location:  class com.alibaba.fastjson.parser.DefaultJSONParser_327_tmp__ESTest: 25
[MASTER] 18:39:55.951 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl is internal proprietary API and may be removed in a future release: 26
[MASTER] 18:39:55.951 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl is internal proprietary API and may be removed in a future release: 26
[MASTER] 18:39:55.952 [logback-1] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 18:39:55.952 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_327_1590165595929/com/alibaba/fastjson/parser/DefaultJSONParser_327_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 16:39:55 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson.parser;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.alibaba.fastjson.TypeReference;
12: import com.alibaba.fastjson.parser.DefaultJSONParser;
13: import com.alibaba.fastjson.parser.ParserConfig;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
20: public class DefaultJSONParser_327_tmp__ESTest extends DefaultJSONParser_327_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       ParserConfig.getGlobalInstance();
25:       DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("false", parserConfig1);
26:       ParameterizedTypeImpl parameterizedTypeImpl1 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
27:       // Undeclared exception!
28:       try { 
29:         defaultJSONParser1.parseArrayWithType(parameterizedTypeImpl1);
30:         fail("Expecting exception: RuntimeException");
31:       
32:       } catch(RuntimeException e) {
33:          //
34:          // expect '[', but false, pos 5, line 1, column 6false
35:          //
36:          verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
37:       }
38:   }
39: }
RegularFileObject[/tmp/EvoSuite_327_1590165595929/com/alibaba/fastjson/parser/DefaultJSONParser_327_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 16:39:55 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson.parser;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class DefaultJSONParser_327_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.parser.DefaultJSONParser"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultJSONParser_327_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.serializer.AwtCodec",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
90:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
91:       "com.alibaba.fastjson.serializer.JSONSerializable",
92:       "com.alibaba.fastjson.serializer.SerializeWriter",
93:       "com.alibaba.fastjson.serializer.ReferenceCodec",
94:       "com.alibaba.fastjson.JSONException",
95:       "com.alibaba.fastjson.asm.TypeCollector$1",
96:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
97:       "com.alibaba.fastjson.serializer.ToStringSerializer",
98:       "com.alibaba.fastjson.serializer.SerialContext",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.serializer.ObjectSerializer",
103:       "com.alibaba.fastjson.serializer.MapSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
106:       "com.alibaba.fastjson.serializer.DateCodec",
107:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
114:       "com.alibaba.fastjson.util.FieldInfo",
115:       "com.alibaba.fastjson.serializer.PropertyFilter",
116:       "com.alibaba.fastjson.annotation.JSONField",
117:       "com.alibaba.fastjson.parser.SymbolTable",
118:       "com.alibaba.fastjson.serializer.NameFilter",
119:       "com.alibaba.fastjson.serializer.ListSerializer",
120:       "com.alibaba.fastjson.JSONArray",
121:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
122:       "com.alibaba.fastjson.JSONAware",
123:       "com.alibaba.fastjson.serializer.LongCodec",
124:       "com.alibaba.fastjson.util.ASMClassLoader",
125:       "com.alibaba.fastjson.PropertyNamingStrategy",
126:       "com.alibaba.fastjson.parser.JSONToken",
127:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
128:       "com.alibaba.fastjson.serializer.AppendableSerializer",
129:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
130:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
131:       "com.alibaba.fastjson.serializer.ContextValueFilter",
132:       "com.alibaba.fastjson.util.ServiceLoader",
133:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
134:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
135:       "com.alibaba.fastjson.parser.DefaultJSONParser",
136:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
137:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
138:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
139:       "com.alibaba.fastjson.serializer.BeanContext",
140:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
141:       "com.alibaba.fastjson.util.IdentityHashMap",
142:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
143:       "com.alibaba.fastjson.JSON",
144:       "com.alibaba.fastjson.serializer.StringCodec",
145:       "com.alibaba.fastjson.serializer.SerializeFilterable",
146:       "com.alibaba.fastjson.JSONWriter",
147:       "com.alibaba.fastjson.asm.Opcodes",
148:       "com.alibaba.fastjson.JSONReader",
149:       "com.alibaba.fastjson.JSONStreamAware",
150:       "com.alibaba.fastjson.asm.MethodWriter",
151:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
152:       "com.alibaba.fastjson.serializer.SerializerFeature",
153:       "com.alibaba.fastjson.TypeReference$1",
154:       "com.alibaba.fastjson.serializer.CalendarCodec",
155:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
156:       "com.alibaba.fastjson.util.IOUtils",
157:       "com.alibaba.fastjson.util.TypeUtils",
158:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
159:       "com.alibaba.fastjson.asm.ClassReader",
160:       "com.alibaba.fastjson.spi.Module",
161:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
162:       "com.alibaba.fastjson.serializer.MiscCodec",
163:       "com.alibaba.fastjson.util.IOUtils$1",
164:       "com.alibaba.fastjson.serializer.IntegerCodec",
165:       "com.alibaba.fastjson.serializer.SerializeFilter",
166:       "com.alibaba.fastjson.JSONPObject",
167:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
168:       "com.alibaba.fastjson.serializer.BeforeFilter",
169:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
170:       "com.alibaba.fastjson.serializer.ArraySerializer",
171:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
172:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
173:       "com.alibaba.fastjson.JSONObject",
174:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
175:       "com.alibaba.fastjson.serializer.CharacterCodec",
176:       "com.alibaba.fastjson.asm.TypeCollector",
177:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
178:       "com.alibaba.fastjson.asm.ByteVector",
179:       "com.alibaba.fastjson.parser.JSONLexer",
180:       "com.alibaba.fastjson.util.ASMClassLoader$1",
181:       "com.alibaba.fastjson.asm.Label",
182:       "com.alibaba.fastjson.asm.FieldWriter",
183:       "com.alibaba.fastjson.serializer.JSONSerializer",
184:       "com.alibaba.fastjson.util.JavaBeanInfo",
185:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
186:       "com.alibaba.fastjson.serializer.SerializeConfig",
187:       "com.alibaba.fastjson.serializer.AtomicCodec",
188:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
189:       "com.alibaba.fastjson.asm.Type",
190:       "com.alibaba.fastjson.serializer.FieldSerializer",
191:       "com.alibaba.fastjson.serializer.FloatCodec",
192:       "com.alibaba.fastjson.parser.JSONReaderScanner",
193:       "com.alibaba.fastjson.serializer.ValueFilter",
194:       "com.alibaba.fastjson.JSONPathException",
195:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
196:       "com.alibaba.fastjson.serializer.Labels",
197:       "com.alibaba.fastjson.serializer.CollectionCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
199:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
200:       "com.alibaba.fastjson.serializer.CharArrayCodec",
201:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
202:       "com.alibaba.fastjson.asm.MethodVisitor",
203:       "com.alibaba.fastjson.annotation.JSONCreator",
204:       "com.alibaba.fastjson.asm.MethodCollector",
205:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
206:       "com.alibaba.fastjson.annotation.JSONType",
207:       "com.alibaba.fastjson.serializer.LabelFilter",
208:       "com.alibaba.fastjson.util.UTF8Decoder",
209:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
210:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
211:       "com.alibaba.fastjson.serializer.DoubleSerializer",
212:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
213:       "com.alibaba.fastjson.serializer.BooleanCodec",
214:       "com.alibaba.fastjson.parser.ParserConfig",
215:       "com.alibaba.fastjson.parser.ParseContext",
216:       "com.alibaba.fastjson.parser.Feature",
217:       "com.alibaba.fastjson.serializer.PropertyPreFilter"
218:     );
219:   } 
220: 
221:   private static void resetClasses() {
222:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DefaultJSONParser_327_tmp__ESTest_scaffolding.class.getClassLoader()); 
223: 
224:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
225:       "com.alibaba.fastjson.parser.DefaultJSONParser",
226:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
227:       "com.alibaba.fastjson.util.IOUtils$1",
228:       "com.alibaba.fastjson.util.IOUtils",
229:       "com.alibaba.fastjson.util.IdentityHashMap",
230:       "com.alibaba.fastjson.util.ASMUtils",
231:       "com.alibaba.fastjson.parser.SymbolTable",
232:       "com.alibaba.fastjson.parser.Feature",
233:       "com.alibaba.fastjson.serializer.SerializerFeature",
234:       "com.alibaba.fastjson.JSON",
235:       "com.alibaba.fastjson.util.TypeUtils",
236:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
237:       "com.alibaba.fastjson.util.ASMClassLoader$1",
238:       "com.alibaba.fastjson.util.ASMClassLoader",
239:       "com.alibaba.fastjson.serializer.MiscCodec",
240:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
241:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
242:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
243:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
244:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
245:       "com.alibaba.fastjson.serializer.DateCodec",
246:       "com.alibaba.fastjson.serializer.CalendarCodec",
247:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
248:       "com.alibaba.fastjson.serializer.CollectionCodec",
249:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
250:       "com.alibaba.fastjson.serializer.StringCodec",
251:       "com.alibaba.fastjson.serializer.CharacterCodec",
252:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
253:       "com.alibaba.fastjson.serializer.IntegerCodec",
254:       "com.alibaba.fastjson.serializer.LongCodec",
255:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
256:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
257:       "com.alibaba.fastjson.serializer.FloatCodec",
258:       "com.alibaba.fastjson.serializer.BooleanCodec",
259:       "com.alibaba.fastjson.serializer.CharArrayCodec",
260:       "com.alibaba.fastjson.serializer.ReferenceCodec",
261:       "com.alibaba.fastjson.serializer.AtomicCodec",
262:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
263:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
264:       "com.alibaba.fastjson.parser.ParserConfig",
265:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
266:       "com.alibaba.fastjson.serializer.DoubleSerializer",
267:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
268:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
269:       "com.alibaba.fastjson.serializer.AppendableSerializer",
270:       "com.alibaba.fastjson.serializer.ToStringSerializer",
271:       "com.alibaba.fastjson.serializer.SerializeConfig",
272:       "com.alibaba.fastjson.JSONPath",
273:       "com.alibaba.fastjson.parser.JSONLexerBase",
274:       "com.alibaba.fastjson.parser.JSONReaderScanner",
275:       "com.alibaba.fastjson.JSONException",
276:       "com.alibaba.fastjson.parser.JSONToken",
277:       "com.alibaba.fastjson.parser.JSONScanner",
278:       "com.alibaba.fastjson.util.ServiceLoader",
279:       "com.alibaba.fastjson.util.JavaBeanInfo",
280:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
281:       "com.alibaba.fastjson.util.FieldInfo",
282:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
283:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
284:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
285:       "com.alibaba.fastjson.parser.ParseContext",
286:       "com.alibaba.fastjson.asm.ClassReader",
287:       "com.alibaba.fastjson.asm.TypeCollector$1",
288:       "com.alibaba.fastjson.asm.TypeCollector",
289:       "com.alibaba.fastjson.asm.Type",
290:       "com.alibaba.fastjson.asm.MethodCollector",
291:       "com.alibaba.fastjson.JSONObject",
292:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
293:       "com.alibaba.fastjson.JSONArray",
294:       "com.alibaba.fastjson.asm.ClassWriter",
295:       "com.alibaba.fastjson.asm.ByteVector",
296:       "com.alibaba.fastjson.asm.Item",
297:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
298:       "com.alibaba.fastjson.asm.FieldWriter",
299:       "com.alibaba.fastjson.asm.MethodWriter",
300:       "com.alibaba.fastjson.asm.Label",
301:       "com.alibaba.fastjson.serializer.SerializeWriter",
302:       "com.alibaba.fastjson.serializer.SerializeFilterable",
303:       "com.alibaba.fastjson.serializer.JSONSerializer",
304:       "com.alibaba.fastjson.serializer.MapSerializer",
305:       "com.alibaba.fastjson.serializer.SerialContext",
306:       "com.alibaba.fastjson.serializer.ListSerializer",
307:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
308:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
309:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
315:       "com.alibaba.fastjson.serializer.AwtCodec",
316:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
317:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
318:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.serializer.ArraySerializer",
321:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
322:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
323:       "com.alibaba.fastjson.PropertyNamingStrategy"
324:     );
325:   }
326: }

[MASTER] 18:39:56.253 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    com/alibaba/fastjson/parser/DefaultJSONParser.getDateFormat()Ljava/text/DateFormat; @63: invokespecial
  Reason:
    Type 'java/lang/String' (current frame, stack[4]) is not assignable to 'java/util/Locale'
  Current Frame:
    bci: @63
    flags: { }
    locals: { 'com/alibaba/fastjson/parser/DefaultJSONParser', 'java/util/Locale', 'java/lang/String' }
    stack: { 'com/alibaba/fastjson/parser/DefaultJSONParser', uninitialized 57, uninitialized 57, 'java/lang/String', 'java/lang/String' }
  Bytecode:
    0x0000000: b800 3fb8 0044 2ab4 004c b800 5212 53b6
    0x0000010: 0057 b800 3fc7 004c b800 3fb8 0044 2abb
    0x0000020: 0059 592a b400 462a b400 5bb9 0061 0100
    0x0000030: b800 6799 0012 4c4d 58bb 0069 592c 2cb7
    0x0000040: 006d a700 06b7 006e b500 4cb8 003f b800
    0x0000050: 442a b400 4c2a b400 5bb9 0072 0100 b600
    0x0000060: 78b8 003f b800 442a b400 4cb0          
  Stackmap Table:
    full_frame(@69,{Object[#2]},{Object[#2],Uninitialized[#31],Uninitialized[#31],Object[#122],Object[#124]})
    full_frame(@72,{Object[#2]},{Object[#2],Object[#89]})
    same_frame(@97)

[MASTER] 18:39:56.253 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("$.equals");
defaultJSONParser1.parseExtra(classLoader1, "ST?T{ix\"_ *%/7Ow6S");

[MASTER] 18:39:56.253 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:56.562 [logback-2] ERROR JUnitAnalyzer - Issue in scaffolding of the test suite: 
Mockito cannot mock this class: interface com.alibaba.fastjson.parser.deserializer.PropertyProcessable.

Mockito can only mock non-private & non-final classes.
If you're not sure why you're getting this error, please report to the mailing list.


Java               : 1.8
JVM vendor name    : Oracle Corporation
JVM vendor version : 25.161-b14
JVM name           : OpenJDK 64-Bit Server VM
JVM version        : 1.8.0_161-b14
JVM info           : mixed mode
OS name            : Linux
OS version         : 3.10.0-693.17.1.el7.x86_64


Underlying exception : java.lang.IllegalArgumentException: None of [public static boolean org.evosuite.shaded.org.mockito.internal.creation.bytebuddy.MockMethodInterceptor$ForEquals.doIdentityEquals(java.lang.Object,java.lang.Object)] allows for delegation from public boolean java.lang.Object.equals(java.lang.Object)
Stack trace:
com.alibaba.fastjson.parser.DefaultJSONParser_329_tmp__ESTest_scaffolding.initMocksToAvoidTimeoutsInTheTests(DefaultJSONParser_329_tmp__ESTest_scaffolding.java:223)
com.alibaba.fastjson.parser.DefaultJSONParser_329_tmp__ESTest_scaffolding.initEvoSuiteFramework(DefaultJSONParser_329_tmp__ESTest_scaffolding.java:42)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
org.junit.runners.ParentRunner.run(ParentRunner.java:363)
org.junit.runners.Suite.runChild(Suite.java:128)
org.junit.runners.Suite.runChild(Suite.java:27)
org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
org.junit.runners.ParentRunner.run(ParentRunner.java:363)
org.junit.runner.JUnitCore.run(JUnitCore.java:137)
org.junit.runner.JUnitCore.run(JUnitCore.java:115)
org.junit.runner.JUnitCore.run(JUnitCore.java:105)
org.junit.runner.JUnitCore.run(JUnitCore.java:94)
org.evosuite.junit.JUnitAnalyzer.runJUnitOnCurrentProcess(JUnitAnalyzer.java:306)
org.evosuite.junit.JUnitAnalyzer.runTests(JUnitAnalyzer.java:276)
org.evosuite.junit.JUnitAnalyzer.handleTestsThatAreUnstable(JUnitAnalyzer.java:178)
org.evosuite.TestSuiteGenerator.compileAndCheckTests(TestSuiteGenerator.java:622)
org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:559)
org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:255)
org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:155)
java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:39:56.887 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:56.887 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONScanner jSONScanner1 = new JSONScanner("false", (-2044));
ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
ParserConfig parserConfig1 = new ParserConfig(classLoader1);
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser((Object) null, jSONScanner1, parserConfig1);
defaultJSONParser1.parseObject((Object) null);

[MASTER] 18:39:56.887 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:57.200 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:57.200 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.global;
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"objecttkey level > 512\":{},\"\":99,\"syntax error\":false,\";Ljava/lang/Object;C)C\":[\"a string\"]}", parserConfig1, 1);
defaultJSONParser1.parseObject((Object) defaultJSONParser1);

[MASTER] 18:39:57.200 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:57.483 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:57.483 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Dimension dimension1 = new Dimension();
JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("{\"fruit\":null,\"size\":\"Large\",\"color\":[],\"value\":\"a string\",\"\":false,\"number\":\"1\"}");
ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(dimension1, jSONReaderScanner1, parserConfig1);
Hashtable<Float, Insets> hashtable1 = new Hashtable<Float, Insets>();
defaultJSONParser1.parseObject((Map) hashtable1);

[MASTER] 18:39:57.483 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:57.800 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:57.800 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("{\"\":{},\"syntax error\":false,\"object key level > 512\":-99,\";Ljava/lang/String;Ljava/lang/Object;)V\":\"a string\",\"syntax error,except start with { or [,but actually start with \":null,\"$ref\":99}");
ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONReaderScanner1, jSONReaderScanner1, parserConfig1);
TreeMap<Boolean, Properties> treeMap1 = new TreeMap<Boolean, Properties>();
Properties properties1 = new Properties();
treeMap1.put((Boolean) false, properties1);
defaultJSONParser1.parseObject((Map) treeMap1, (Object) parserConfig1);

[MASTER] 18:39:57.800 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:58.091 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:58.092 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.global;
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"\":[],\"syntax error\":-99,\";Ljava/lang/Object;C)C\":[[]],\"$.create asm serializer error, verson 1.2.68, class \":99,\"java.util.Collections$EmptyMap\":-99}");
parserConfig1.setAsmEnable(false);
ParserConfig parserConfig2 = defaultJSONParser1.getConfig();
assertFalse(parserConfig2.isJacksonCompatible());


[MASTER] 18:39:58.092 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:58.378 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:58.378 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.global;
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"\":false,\"syntax error\":-99,\"object key level > 512\":null}", parserConfig1, 1);
TreeMap<Timestamp, BigInteger> treeMap1 = new TreeMap<Timestamp, BigInteger>();
MockDate mockDate1 = new MockDate(2, 1, 1, (-4678), 0, 35);
defaultJSONParser1.parseObject((Map) treeMap1, (Object) mockDate1);
ParseContext parseContext1 = defaultJSONParser1.getContext();
assertEquals(0, parseContext1.level);


[MASTER] 18:39:58.378 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:58.664 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:58.664 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = new ParserConfig();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("\\8LqB", parserConfig1, (-1640));
JSONLexer jSONLexer1 = defaultJSONParser1.getLexer();
assertEquals(1, jSONLexer1.token());


[MASTER] 18:39:58.664 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:58.986 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:58.987 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.global;
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"$.$\":99,\"equals\":{\"x\":99}}", parserConfig1, 1);
JSONLexer jSONLexer1 = defaultJSONParser1.getLexer();
assertEquals('\"', jSONLexer1.getCurrent());


[MASTER] 18:39:58.987 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:59.009 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_338_1590165598987/com/alibaba/fastjson/parser/DefaultJSONParser_338_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_338_1590165598987/com/alibaba/fastjson/parser/DefaultJSONParser_338_tmp__ESTest_scaffolding.java]]
[MASTER] 18:39:59.009 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:59.009 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:59.009 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  cannot find symbol
   symbol:   variable parserConfig1
   location:  class com.alibaba.fastjson.parser.DefaultJSONParser_338_tmp__ESTest: 28
[MASTER] 18:39:59.010 [logback-1] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 18:39:59.025 [logback-1] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 18:39:59.010 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_338_1590165598987/com/alibaba/fastjson/parser/DefaultJSONParser_338_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 16:39:58 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson.parser;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import com.alibaba.fastjson.parser.DefaultJSONParser;
12: import com.alibaba.fastjson.parser.JSONLexer;
13: import com.alibaba.fastjson.parser.ParserConfig;
14: import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
15: import java.lang.reflect.Type;
16: import java.util.Properties;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
23: public class DefaultJSONParser_338_tmp__ESTest extends DefaultJSONParser_338_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       ParserConfig.getGlobalInstance();
28:       DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"create asm serializer error, verson 1.2.68, class \":\"a string\",\"com.alibaba.fastjson.serializer.ArraySerializer\":{},\"expect ':' at \":true,\"..\":true,\", pos \":false,\"\":false}", parserConfig1, 200);
29:       PropertyProcessable propertyProcessable1 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
30:       doReturn((Type) null, (Type) null, (Type) null, (Type) null, (Type) null).when(propertyProcessable1).getType(anyString());
31:       doReturn((String) null).when(propertyProcessable1).toString();
32:       Properties properties1 = new Properties();
33:       defaultJSONParser1.parse(propertyProcessable1, (Object) properties1);
34:       JSONLexer jSONLexer1 = defaultJSONParser1.getLexer();
35:       assertEquals(20, jSONLexer1.token());
36:   }
37: }
RegularFileObject[/tmp/EvoSuite_338_1590165598987/com/alibaba/fastjson/parser/DefaultJSONParser_338_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 16:39:58 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson.parser;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class DefaultJSONParser_338_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.parser.DefaultJSONParser"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultJSONParser_338_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "com.alibaba.fastjson.asm.ClassWriter",
84:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
85:       "com.alibaba.fastjson.serializer.AwtCodec",
86:       "com.alibaba.fastjson.util.ASMUtils",
87:       "com.alibaba.fastjson.JSONPath",
88:       "com.alibaba.fastjson.parser.JSONScanner",
89:       "com.alibaba.fastjson.parser.JSONLexerBase",
90:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
91:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
92:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
93:       "com.alibaba.fastjson.serializer.JSONSerializable",
94:       "com.alibaba.fastjson.serializer.SerializeWriter",
95:       "com.alibaba.fastjson.serializer.ReferenceCodec",
96:       "com.alibaba.fastjson.JSONException",
97:       "com.alibaba.fastjson.asm.TypeCollector$1",
98:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
99:       "com.alibaba.fastjson.serializer.ToStringSerializer",
100:       "com.alibaba.fastjson.serializer.SerialContext",
101:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
102:       "com.alibaba.fastjson.serializer.AfterFilter",
103:       "com.alibaba.fastjson.TypeReference",
104:       "com.alibaba.fastjson.serializer.ObjectSerializer",
105:       "com.alibaba.fastjson.serializer.MapSerializer",
106:       "com.alibaba.fastjson.asm.Item",
107:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
108:       "com.alibaba.fastjson.serializer.DateCodec",
109:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
110:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
111:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
112:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
113:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
114:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
115:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
116:       "com.alibaba.fastjson.util.FieldInfo",
117:       "com.alibaba.fastjson.serializer.PropertyFilter",
118:       "com.alibaba.fastjson.annotation.JSONField",
119:       "com.alibaba.fastjson.parser.SymbolTable",
120:       "com.alibaba.fastjson.serializer.NameFilter",
121:       "com.alibaba.fastjson.serializer.ListSerializer",
122:       "com.alibaba.fastjson.JSONArray",
123:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
124:       "com.alibaba.fastjson.JSONAware",
125:       "com.alibaba.fastjson.serializer.LongCodec",
126:       "com.alibaba.fastjson.util.ASMClassLoader",
127:       "com.alibaba.fastjson.PropertyNamingStrategy",
128:       "com.alibaba.fastjson.parser.JSONToken",
129:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
130:       "com.alibaba.fastjson.serializer.AppendableSerializer",
131:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
132:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
133:       "com.alibaba.fastjson.serializer.ContextValueFilter",
134:       "com.alibaba.fastjson.util.ServiceLoader",
135:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
136:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
137:       "com.alibaba.fastjson.parser.DefaultJSONParser",
138:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
139:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
140:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
141:       "com.alibaba.fastjson.serializer.BeanContext",
142:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
143:       "com.alibaba.fastjson.util.IdentityHashMap",
144:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
145:       "com.alibaba.fastjson.JSON",
146:       "com.alibaba.fastjson.serializer.StringCodec",
147:       "com.alibaba.fastjson.serializer.SerializeFilterable",
148:       "com.alibaba.fastjson.JSONWriter",
149:       "com.alibaba.fastjson.asm.Opcodes",
150:       "com.alibaba.fastjson.JSONReader",
151:       "com.alibaba.fastjson.JSONStreamAware",
152:       "com.alibaba.fastjson.asm.MethodWriter",
153:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
154:       "com.alibaba.fastjson.serializer.SerializerFeature",
155:       "com.alibaba.fastjson.TypeReference$1",
156:       "com.alibaba.fastjson.serializer.CalendarCodec",
157:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
158:       "com.alibaba.fastjson.util.IOUtils",
159:       "com.alibaba.fastjson.util.TypeUtils",
160:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
161:       "com.alibaba.fastjson.asm.ClassReader",
162:       "com.alibaba.fastjson.spi.Module",
163:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
164:       "com.alibaba.fastjson.serializer.MiscCodec",
165:       "com.alibaba.fastjson.util.IOUtils$1",
166:       "com.alibaba.fastjson.serializer.IntegerCodec",
167:       "com.alibaba.fastjson.serializer.SerializeFilter",
168:       "com.alibaba.fastjson.JSONPObject",
169:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
170:       "com.alibaba.fastjson.serializer.BeforeFilter",
171:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
172:       "com.alibaba.fastjson.serializer.ArraySerializer",
173:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
174:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
175:       "com.alibaba.fastjson.JSONObject",
176:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
177:       "com.alibaba.fastjson.serializer.CharacterCodec",
178:       "com.alibaba.fastjson.asm.TypeCollector",
179:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
180:       "com.alibaba.fastjson.asm.ByteVector",
181:       "com.alibaba.fastjson.parser.JSONLexer",
182:       "com.alibaba.fastjson.util.ASMClassLoader$1",
183:       "com.alibaba.fastjson.asm.Label",
184:       "com.alibaba.fastjson.asm.FieldWriter",
185:       "com.alibaba.fastjson.serializer.JSONSerializer",
186:       "com.alibaba.fastjson.util.JavaBeanInfo",
187:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
188:       "com.alibaba.fastjson.serializer.SerializeConfig",
189:       "com.alibaba.fastjson.serializer.AtomicCodec",
190:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
191:       "com.alibaba.fastjson.asm.Type",
192:       "com.alibaba.fastjson.serializer.FieldSerializer",
193:       "com.alibaba.fastjson.serializer.FloatCodec",
194:       "com.alibaba.fastjson.parser.JSONReaderScanner",
195:       "com.alibaba.fastjson.serializer.ValueFilter",
196:       "com.alibaba.fastjson.JSONPathException",
197:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
198:       "com.alibaba.fastjson.serializer.Labels",
199:       "com.alibaba.fastjson.serializer.CollectionCodec",
200:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
201:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
202:       "com.alibaba.fastjson.serializer.CharArrayCodec",
203:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
204:       "com.alibaba.fastjson.asm.MethodVisitor",
205:       "com.alibaba.fastjson.annotation.JSONCreator",
206:       "com.alibaba.fastjson.asm.MethodCollector",
207:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
208:       "com.alibaba.fastjson.annotation.JSONType",
209:       "com.alibaba.fastjson.serializer.LabelFilter",
210:       "com.alibaba.fastjson.util.UTF8Decoder",
211:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
212:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
213:       "com.alibaba.fastjson.serializer.DoubleSerializer",
214:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
215:       "com.alibaba.fastjson.serializer.BooleanCodec",
216:       "com.alibaba.fastjson.parser.ParserConfig",
217:       "com.alibaba.fastjson.parser.ParseContext",
218:       "com.alibaba.fastjson.parser.Feature",
219:       "com.alibaba.fastjson.serializer.PropertyPreFilter"
220:     );
221:   } 
222:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
223:     mock(Class.forName("com.alibaba.fastjson.parser.deserializer.PropertyProcessable", false, DefaultJSONParser_338_tmp__ESTest_scaffolding.class.getClassLoader()));
224:   }
225: 
226:   private static void resetClasses() {
227:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DefaultJSONParser_338_tmp__ESTest_scaffolding.class.getClassLoader()); 
228: 
229:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
230:       "com.alibaba.fastjson.parser.DefaultJSONParser",
231:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
232:       "com.alibaba.fastjson.util.IOUtils$1",
233:       "com.alibaba.fastjson.util.IOUtils",
234:       "com.alibaba.fastjson.util.IdentityHashMap",
235:       "com.alibaba.fastjson.util.ASMUtils",
236:       "com.alibaba.fastjson.parser.SymbolTable",
237:       "com.alibaba.fastjson.parser.Feature",
238:       "com.alibaba.fastjson.serializer.SerializerFeature",
239:       "com.alibaba.fastjson.JSON",
240:       "com.alibaba.fastjson.util.TypeUtils",
241:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
242:       "com.alibaba.fastjson.util.ASMClassLoader$1",
243:       "com.alibaba.fastjson.util.ASMClassLoader",
244:       "com.alibaba.fastjson.serializer.MiscCodec",
245:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
246:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
247:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
248:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
249:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
250:       "com.alibaba.fastjson.serializer.DateCodec",
251:       "com.alibaba.fastjson.serializer.CalendarCodec",
252:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
253:       "com.alibaba.fastjson.serializer.CollectionCodec",
254:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
255:       "com.alibaba.fastjson.serializer.StringCodec",
256:       "com.alibaba.fastjson.serializer.CharacterCodec",
257:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
258:       "com.alibaba.fastjson.serializer.IntegerCodec",
259:       "com.alibaba.fastjson.serializer.LongCodec",
260:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
261:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
262:       "com.alibaba.fastjson.serializer.FloatCodec",
263:       "com.alibaba.fastjson.serializer.BooleanCodec",
264:       "com.alibaba.fastjson.serializer.CharArrayCodec",
265:       "com.alibaba.fastjson.serializer.ReferenceCodec",
266:       "com.alibaba.fastjson.serializer.AtomicCodec",
267:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
268:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
269:       "com.alibaba.fastjson.parser.ParserConfig",
270:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
271:       "com.alibaba.fastjson.serializer.DoubleSerializer",
272:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
273:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
274:       "com.alibaba.fastjson.serializer.AppendableSerializer",
275:       "com.alibaba.fastjson.serializer.ToStringSerializer",
276:       "com.alibaba.fastjson.serializer.SerializeConfig",
277:       "com.alibaba.fastjson.JSONPath",
278:       "com.alibaba.fastjson.parser.JSONLexerBase",
279:       "com.alibaba.fastjson.parser.JSONReaderScanner",
280:       "com.alibaba.fastjson.JSONException",
281:       "com.alibaba.fastjson.parser.JSONToken",
282:       "com.alibaba.fastjson.parser.JSONScanner",
283:       "com.alibaba.fastjson.util.ServiceLoader",
284:       "com.alibaba.fastjson.util.JavaBeanInfo",
285:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
286:       "com.alibaba.fastjson.util.FieldInfo",
287:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
288:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
289:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
290:       "com.alibaba.fastjson.parser.ParseContext",
291:       "com.alibaba.fastjson.asm.ClassReader",
292:       "com.alibaba.fastjson.asm.TypeCollector$1",
293:       "com.alibaba.fastjson.asm.TypeCollector",
294:       "com.alibaba.fastjson.asm.Type",
295:       "com.alibaba.fastjson.asm.MethodCollector",
296:       "com.alibaba.fastjson.JSONObject",
297:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
298:       "com.alibaba.fastjson.JSONArray",
299:       "com.alibaba.fastjson.asm.ClassWriter",
300:       "com.alibaba.fastjson.asm.ByteVector",
301:       "com.alibaba.fastjson.asm.Item",
302:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
303:       "com.alibaba.fastjson.asm.FieldWriter",
304:       "com.alibaba.fastjson.asm.MethodWriter",
305:       "com.alibaba.fastjson.asm.Label",
306:       "com.alibaba.fastjson.serializer.SerializeWriter",
307:       "com.alibaba.fastjson.serializer.SerializeFilterable",
308:       "com.alibaba.fastjson.serializer.JSONSerializer",
309:       "com.alibaba.fastjson.serializer.MapSerializer",
310:       "com.alibaba.fastjson.serializer.SerialContext",
311:       "com.alibaba.fastjson.serializer.ListSerializer",
312:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
313:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
314:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
315:       "com.alibaba.fastjson.serializer.FieldSerializer",
316:       "com.alibaba.fastjson.serializer.BeanContext",
317:       "com.alibaba.fastjson.TypeReference$1",
318:       "com.alibaba.fastjson.TypeReference",
319:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
320:       "com.alibaba.fastjson.serializer.AwtCodec",
321:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
322:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
323:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
324:       "com.alibaba.fastjson.util.UTF8Decoder",
325:       "com.alibaba.fastjson.serializer.ArraySerializer",
326:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
327:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
328:       "com.alibaba.fastjson.PropertyNamingStrategy"
329:     );
330:   }
331: }

[MASTER] 18:39:59.025 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_339_1590165599010/com/alibaba/fastjson/parser/DefaultJSONParser_339_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_339_1590165599010/com/alibaba/fastjson/parser/DefaultJSONParser_339_tmp__ESTest_scaffolding.java]]
[MASTER] 18:39:59.025 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:59.025 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:39:59.025 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  cannot find symbol
   symbol:   variable parserConfig1
   location:  class com.alibaba.fastjson.parser.DefaultJSONParser_339_tmp__ESTest: 22
[MASTER] 18:39:59.025 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_339_1590165599010/com/alibaba/fastjson/parser/DefaultJSONParser_339_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 16:39:59 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson.parser;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.alibaba.fastjson.parser.DefaultJSONParser;
11: import com.alibaba.fastjson.parser.ParserConfig;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
17: public class DefaultJSONParser_339_tmp__ESTest extends DefaultJSONParser_339_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       ParserConfig.getGlobalInstance();
22:       DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("|=j*FyrXoDgg)XfH ", parserConfig1, 2871);
23:       defaultJSONParser1.setResolveStatus(2104);
24:       int int1 = defaultJSONParser1.getResolveStatus();
25:       assertEquals(2104, defaultJSONParser1.resolveStatus);
26:       assertEquals(2104, int1);
27:   }
28: }
RegularFileObject[/tmp/EvoSuite_339_1590165599010/com/alibaba/fastjson/parser/DefaultJSONParser_339_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 16:39:59 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson.parser;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class DefaultJSONParser_339_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.parser.DefaultJSONParser"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultJSONParser_339_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.serializer.AwtCodec",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
90:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
91:       "com.alibaba.fastjson.serializer.JSONSerializable",
92:       "com.alibaba.fastjson.serializer.SerializeWriter",
93:       "com.alibaba.fastjson.serializer.ReferenceCodec",
94:       "com.alibaba.fastjson.JSONException",
95:       "com.alibaba.fastjson.asm.TypeCollector$1",
96:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
97:       "com.alibaba.fastjson.serializer.ToStringSerializer",
98:       "com.alibaba.fastjson.serializer.SerialContext",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.serializer.ObjectSerializer",
103:       "com.alibaba.fastjson.serializer.MapSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
106:       "com.alibaba.fastjson.serializer.DateCodec",
107:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
114:       "com.alibaba.fastjson.util.FieldInfo",
115:       "com.alibaba.fastjson.serializer.PropertyFilter",
116:       "com.alibaba.fastjson.annotation.JSONField",
117:       "com.alibaba.fastjson.parser.SymbolTable",
118:       "com.alibaba.fastjson.serializer.NameFilter",
119:       "com.alibaba.fastjson.serializer.ListSerializer",
120:       "com.alibaba.fastjson.JSONArray",
121:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
122:       "com.alibaba.fastjson.JSONAware",
123:       "com.alibaba.fastjson.serializer.LongCodec",
124:       "com.alibaba.fastjson.util.ASMClassLoader",
125:       "com.alibaba.fastjson.PropertyNamingStrategy",
126:       "com.alibaba.fastjson.parser.JSONToken",
127:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
128:       "com.alibaba.fastjson.serializer.AppendableSerializer",
129:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
130:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
131:       "com.alibaba.fastjson.serializer.ContextValueFilter",
132:       "com.alibaba.fastjson.util.ServiceLoader",
133:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
134:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
135:       "com.alibaba.fastjson.parser.DefaultJSONParser",
136:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
137:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
138:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
139:       "com.alibaba.fastjson.serializer.BeanContext",
140:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
141:       "com.alibaba.fastjson.util.IdentityHashMap",
142:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
143:       "com.alibaba.fastjson.JSON",
144:       "com.alibaba.fastjson.serializer.StringCodec",
145:       "com.alibaba.fastjson.serializer.SerializeFilterable",
146:       "com.alibaba.fastjson.JSONWriter",
147:       "com.alibaba.fastjson.asm.Opcodes",
148:       "com.alibaba.fastjson.JSONReader",
149:       "com.alibaba.fastjson.JSONStreamAware",
150:       "com.alibaba.fastjson.asm.MethodWriter",
151:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
152:       "com.alibaba.fastjson.serializer.SerializerFeature",
153:       "com.alibaba.fastjson.TypeReference$1",
154:       "com.alibaba.fastjson.serializer.CalendarCodec",
155:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
156:       "com.alibaba.fastjson.util.IOUtils",
157:       "com.alibaba.fastjson.util.TypeUtils",
158:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
159:       "com.alibaba.fastjson.asm.ClassReader",
160:       "com.alibaba.fastjson.spi.Module",
161:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
162:       "com.alibaba.fastjson.serializer.MiscCodec",
163:       "com.alibaba.fastjson.util.IOUtils$1",
164:       "com.alibaba.fastjson.serializer.IntegerCodec",
165:       "com.alibaba.fastjson.serializer.SerializeFilter",
166:       "com.alibaba.fastjson.JSONPObject",
167:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
168:       "com.alibaba.fastjson.serializer.BeforeFilter",
169:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
170:       "com.alibaba.fastjson.serializer.ArraySerializer",
171:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
172:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
173:       "com.alibaba.fastjson.JSONObject",
174:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
175:       "com.alibaba.fastjson.serializer.CharacterCodec",
176:       "com.alibaba.fastjson.asm.TypeCollector",
177:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
178:       "com.alibaba.fastjson.asm.ByteVector",
179:       "com.alibaba.fastjson.parser.JSONLexer",
180:       "com.alibaba.fastjson.util.ASMClassLoader$1",
181:       "com.alibaba.fastjson.asm.Label",
182:       "com.alibaba.fastjson.asm.FieldWriter",
183:       "com.alibaba.fastjson.serializer.JSONSerializer",
184:       "com.alibaba.fastjson.util.JavaBeanInfo",
185:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
186:       "com.alibaba.fastjson.serializer.SerializeConfig",
187:       "com.alibaba.fastjson.serializer.AtomicCodec",
188:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
189:       "com.alibaba.fastjson.asm.Type",
190:       "com.alibaba.fastjson.serializer.FieldSerializer",
191:       "com.alibaba.fastjson.serializer.FloatCodec",
192:       "com.alibaba.fastjson.parser.JSONReaderScanner",
193:       "com.alibaba.fastjson.serializer.ValueFilter",
194:       "com.alibaba.fastjson.JSONPathException",
195:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
196:       "com.alibaba.fastjson.serializer.Labels",
197:       "com.alibaba.fastjson.serializer.CollectionCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
199:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
200:       "com.alibaba.fastjson.serializer.CharArrayCodec",
201:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
202:       "com.alibaba.fastjson.asm.MethodVisitor",
203:       "com.alibaba.fastjson.annotation.JSONCreator",
204:       "com.alibaba.fastjson.asm.MethodCollector",
205:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
206:       "com.alibaba.fastjson.annotation.JSONType",
207:       "com.alibaba.fastjson.serializer.LabelFilter",
208:       "com.alibaba.fastjson.util.UTF8Decoder",
209:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
210:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
211:       "com.alibaba.fastjson.serializer.DoubleSerializer",
212:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
213:       "com.alibaba.fastjson.serializer.BooleanCodec",
214:       "com.alibaba.fastjson.parser.ParserConfig",
215:       "com.alibaba.fastjson.parser.ParseContext",
216:       "com.alibaba.fastjson.parser.Feature",
217:       "com.alibaba.fastjson.serializer.PropertyPreFilter"
218:     );
219:   } 
220: 
221:   private static void resetClasses() {
222:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DefaultJSONParser_339_tmp__ESTest_scaffolding.class.getClassLoader()); 
223: 
224:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
225:       "com.alibaba.fastjson.parser.DefaultJSONParser",
226:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
227:       "com.alibaba.fastjson.util.IOUtils$1",
228:       "com.alibaba.fastjson.util.IOUtils",
229:       "com.alibaba.fastjson.util.IdentityHashMap",
230:       "com.alibaba.fastjson.util.ASMUtils",
231:       "com.alibaba.fastjson.parser.SymbolTable",
232:       "com.alibaba.fastjson.parser.Feature",
233:       "com.alibaba.fastjson.serializer.SerializerFeature",
234:       "com.alibaba.fastjson.JSON",
235:       "com.alibaba.fastjson.util.TypeUtils",
236:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
237:       "com.alibaba.fastjson.util.ASMClassLoader$1",
238:       "com.alibaba.fastjson.util.ASMClassLoader",
239:       "com.alibaba.fastjson.serializer.MiscCodec",
240:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
241:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
242:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
243:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
244:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
245:       "com.alibaba.fastjson.serializer.DateCodec",
246:       "com.alibaba.fastjson.serializer.CalendarCodec",
247:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
248:       "com.alibaba.fastjson.serializer.CollectionCodec",
249:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
250:       "com.alibaba.fastjson.serializer.StringCodec",
251:       "com.alibaba.fastjson.serializer.CharacterCodec",
252:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
253:       "com.alibaba.fastjson.serializer.IntegerCodec",
254:       "com.alibaba.fastjson.serializer.LongCodec",
255:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
256:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
257:       "com.alibaba.fastjson.serializer.FloatCodec",
258:       "com.alibaba.fastjson.serializer.BooleanCodec",
259:       "com.alibaba.fastjson.serializer.CharArrayCodec",
260:       "com.alibaba.fastjson.serializer.ReferenceCodec",
261:       "com.alibaba.fastjson.serializer.AtomicCodec",
262:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
263:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
264:       "com.alibaba.fastjson.parser.ParserConfig",
265:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
266:       "com.alibaba.fastjson.serializer.DoubleSerializer",
267:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
268:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
269:       "com.alibaba.fastjson.serializer.AppendableSerializer",
270:       "com.alibaba.fastjson.serializer.ToStringSerializer",
271:       "com.alibaba.fastjson.serializer.SerializeConfig",
272:       "com.alibaba.fastjson.JSONPath",
273:       "com.alibaba.fastjson.parser.JSONLexerBase",
274:       "com.alibaba.fastjson.parser.JSONReaderScanner",
275:       "com.alibaba.fastjson.JSONException",
276:       "com.alibaba.fastjson.parser.JSONToken",
277:       "com.alibaba.fastjson.parser.JSONScanner",
278:       "com.alibaba.fastjson.util.ServiceLoader",
279:       "com.alibaba.fastjson.util.JavaBeanInfo",
280:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
281:       "com.alibaba.fastjson.util.FieldInfo",
282:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
283:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
284:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
285:       "com.alibaba.fastjson.parser.ParseContext",
286:       "com.alibaba.fastjson.asm.ClassReader",
287:       "com.alibaba.fastjson.asm.TypeCollector$1",
288:       "com.alibaba.fastjson.asm.TypeCollector",
289:       "com.alibaba.fastjson.asm.Type",
290:       "com.alibaba.fastjson.asm.MethodCollector",
291:       "com.alibaba.fastjson.JSONObject",
292:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
293:       "com.alibaba.fastjson.JSONArray",
294:       "com.alibaba.fastjson.asm.ClassWriter",
295:       "com.alibaba.fastjson.asm.ByteVector",
296:       "com.alibaba.fastjson.asm.Item",
297:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
298:       "com.alibaba.fastjson.asm.FieldWriter",
299:       "com.alibaba.fastjson.asm.MethodWriter",
300:       "com.alibaba.fastjson.asm.Label",
301:       "com.alibaba.fastjson.serializer.SerializeWriter",
302:       "com.alibaba.fastjson.serializer.SerializeFilterable",
303:       "com.alibaba.fastjson.serializer.JSONSerializer",
304:       "com.alibaba.fastjson.serializer.MapSerializer",
305:       "com.alibaba.fastjson.serializer.SerialContext",
306:       "com.alibaba.fastjson.serializer.ListSerializer",
307:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
308:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
309:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
315:       "com.alibaba.fastjson.serializer.AwtCodec",
316:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
317:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
318:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.serializer.ArraySerializer",
321:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
322:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
323:       "com.alibaba.fastjson.PropertyNamingStrategy"
324:     );
325:   }
326: }

[MASTER] 18:39:59.323 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:59.323 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.global;
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"x\":\"hello\",\"y\":[],\"z\":true,\"a\":[],\"b\":{}}", parserConfig1, (-3957));
Feature feature1 = Feature.SupportArrayToBean;
boolean boolean1 = defaultJSONParser1.isEnabled(feature1);
assertTrue(boolean1);


[MASTER] 18:39:59.323 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:39:59.611 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:39:59.611 [logback-1] WARN  JUnitAnalyzer - Failing test:
 char[] charArray1 = new char[1];
ParserConfig parserConfig1 = new ParserConfig(false);
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(charArray1, 1, parserConfig1, 1);
defaultJSONParser1.parse();

[MASTER] 18:39:59.611 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:40:00.041 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:40:00.042 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BigInteger bigInteger1 = BigInteger.TEN;
JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("{\"\":true}", 4);
ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
ParserConfig parserConfig1 = new ParserConfig(classLoader1);
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(bigInteger1, jSONReaderScanner1, parserConfig1);
StringCharacterIterator stringCharacterIterator1 = new StringCharacterIterator("");
DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(stringCharacterIterator1, defaultJSONParser1.lexer, parserConfig1);
JSONObject jSONObject1 = defaultJSONParser1.parseObject();
assertEquals(0, jSONObject1.size());


[MASTER] 18:40:00.042 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:40:00.372 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:40:00.372 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Dimension dimension1 = new Dimension();
JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("{\"\":16,\"{\"create asm serializer error, verson 1.2.68, class \":\"a string\",\"com.alibaba.fastjson.serializer.ArraySerializer\":{},\"expect ':' at \":true,\"..\":true,\", pos \":false,\"\":false}\":{},\"$\":{},\"xx\":false}");
ParserConfig parserConfig1 = new ParserConfig();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(dimension1, jSONReaderScanner1, parserConfig1);
DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(parserConfig1, defaultJSONParser1.lexer, parserConfig1);
Class<Long> class1 = Long.class;
Long long1 = defaultJSONParser1.parseObject(class1);
assertNull(long1);


[MASTER] 18:40:00.372 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:40:00.389 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_344_1590165600373/com/alibaba/fastjson/parser/DefaultJSONParser_344_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_344_1590165600373/com/alibaba/fastjson/parser/DefaultJSONParser_344_tmp__ESTest_scaffolding.java]]
[MASTER] 18:40:00.389 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:40:00.389 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:40:00.389 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  cannot find symbol
   symbol:   variable parserConfig1
   location:  class com.alibaba.fastjson.parser.DefaultJSONParser_344_tmp__ESTest: 24
[MASTER] 18:40:00.390 [logback-1] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 18:40:00.390 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_344_1590165600373/com/alibaba/fastjson/parser/DefaultJSONParser_344_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 16:40:00 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson.parser;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.alibaba.fastjson.parser.DefaultJSONParser;
11: import com.alibaba.fastjson.parser.ParserConfig;
12: import java.awt.Rectangle;
13: import java.lang.reflect.Type;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
19: public class DefaultJSONParser_344_tmp__ESTest extends DefaultJSONParser_344_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       ParserConfig.getGlobalInstance();
24:       DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"x\":false,\"..\":false}", parserConfig1, 1865);
25:       Class<Rectangle> class1 = defaultJSONParser1.parseObject((Type) null);
26:       assertNotNull(class1);
27:   }
28: }
RegularFileObject[/tmp/EvoSuite_344_1590165600373/com/alibaba/fastjson/parser/DefaultJSONParser_344_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 16:40:00 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson.parser;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class DefaultJSONParser_344_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.parser.DefaultJSONParser"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultJSONParser_344_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.serializer.AwtCodec",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
90:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
91:       "com.alibaba.fastjson.serializer.JSONSerializable",
92:       "com.alibaba.fastjson.serializer.SerializeWriter",
93:       "com.alibaba.fastjson.serializer.ReferenceCodec",
94:       "com.alibaba.fastjson.JSONException",
95:       "com.alibaba.fastjson.asm.TypeCollector$1",
96:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
97:       "com.alibaba.fastjson.serializer.ToStringSerializer",
98:       "com.alibaba.fastjson.serializer.SerialContext",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.serializer.ObjectSerializer",
103:       "com.alibaba.fastjson.serializer.MapSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
106:       "com.alibaba.fastjson.serializer.DateCodec",
107:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
114:       "com.alibaba.fastjson.util.FieldInfo",
115:       "com.alibaba.fastjson.serializer.PropertyFilter",
116:       "com.alibaba.fastjson.annotation.JSONField",
117:       "com.alibaba.fastjson.parser.SymbolTable",
118:       "com.alibaba.fastjson.serializer.NameFilter",
119:       "com.alibaba.fastjson.serializer.ListSerializer",
120:       "com.alibaba.fastjson.JSONArray",
121:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
122:       "com.alibaba.fastjson.JSONAware",
123:       "com.alibaba.fastjson.serializer.LongCodec",
124:       "com.alibaba.fastjson.util.ASMClassLoader",
125:       "com.alibaba.fastjson.PropertyNamingStrategy",
126:       "com.alibaba.fastjson.parser.JSONToken",
127:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
128:       "com.alibaba.fastjson.serializer.AppendableSerializer",
129:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
130:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
131:       "com.alibaba.fastjson.serializer.ContextValueFilter",
132:       "com.alibaba.fastjson.util.ServiceLoader",
133:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
134:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
135:       "com.alibaba.fastjson.parser.DefaultJSONParser",
136:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
137:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
138:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
139:       "com.alibaba.fastjson.serializer.BeanContext",
140:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
141:       "com.alibaba.fastjson.util.IdentityHashMap",
142:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
143:       "com.alibaba.fastjson.JSON",
144:       "com.alibaba.fastjson.serializer.StringCodec",
145:       "com.alibaba.fastjson.serializer.SerializeFilterable",
146:       "com.alibaba.fastjson.JSONWriter",
147:       "com.alibaba.fastjson.asm.Opcodes",
148:       "com.alibaba.fastjson.JSONReader",
149:       "com.alibaba.fastjson.JSONStreamAware",
150:       "com.alibaba.fastjson.asm.MethodWriter",
151:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
152:       "com.alibaba.fastjson.serializer.SerializerFeature",
153:       "com.alibaba.fastjson.TypeReference$1",
154:       "com.alibaba.fastjson.serializer.CalendarCodec",
155:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
156:       "com.alibaba.fastjson.util.IOUtils",
157:       "com.alibaba.fastjson.util.TypeUtils",
158:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
159:       "com.alibaba.fastjson.asm.ClassReader",
160:       "com.alibaba.fastjson.spi.Module",
161:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
162:       "com.alibaba.fastjson.serializer.MiscCodec",
163:       "com.alibaba.fastjson.util.IOUtils$1",
164:       "com.alibaba.fastjson.serializer.IntegerCodec",
165:       "com.alibaba.fastjson.serializer.SerializeFilter",
166:       "com.alibaba.fastjson.JSONPObject",
167:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
168:       "com.alibaba.fastjson.serializer.BeforeFilter",
169:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
170:       "com.alibaba.fastjson.serializer.ArraySerializer",
171:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
172:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
173:       "com.alibaba.fastjson.JSONObject",
174:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
175:       "com.alibaba.fastjson.serializer.CharacterCodec",
176:       "com.alibaba.fastjson.asm.TypeCollector",
177:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
178:       "com.alibaba.fastjson.asm.ByteVector",
179:       "com.alibaba.fastjson.parser.JSONLexer",
180:       "com.alibaba.fastjson.util.ASMClassLoader$1",
181:       "com.alibaba.fastjson.asm.Label",
182:       "com.alibaba.fastjson.asm.FieldWriter",
183:       "com.alibaba.fastjson.serializer.JSONSerializer",
184:       "com.alibaba.fastjson.util.JavaBeanInfo",
185:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
186:       "com.alibaba.fastjson.serializer.SerializeConfig",
187:       "com.alibaba.fastjson.serializer.AtomicCodec",
188:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
189:       "com.alibaba.fastjson.asm.Type",
190:       "com.alibaba.fastjson.serializer.FieldSerializer",
191:       "com.alibaba.fastjson.serializer.FloatCodec",
192:       "com.alibaba.fastjson.parser.JSONReaderScanner",
193:       "com.alibaba.fastjson.serializer.ValueFilter",
194:       "com.alibaba.fastjson.JSONPathException",
195:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
196:       "com.alibaba.fastjson.serializer.Labels",
197:       "com.alibaba.fastjson.serializer.CollectionCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
199:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
200:       "com.alibaba.fastjson.serializer.CharArrayCodec",
201:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
202:       "com.alibaba.fastjson.asm.MethodVisitor",
203:       "com.alibaba.fastjson.annotation.JSONCreator",
204:       "com.alibaba.fastjson.asm.MethodCollector",
205:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
206:       "com.alibaba.fastjson.annotation.JSONType",
207:       "com.alibaba.fastjson.serializer.LabelFilter",
208:       "com.alibaba.fastjson.util.UTF8Decoder",
209:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
210:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
211:       "com.alibaba.fastjson.serializer.DoubleSerializer",
212:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
213:       "com.alibaba.fastjson.serializer.BooleanCodec",
214:       "com.alibaba.fastjson.parser.ParserConfig",
215:       "com.alibaba.fastjson.parser.ParseContext",
216:       "com.alibaba.fastjson.parser.Feature",
217:       "com.alibaba.fastjson.serializer.PropertyPreFilter"
218:     );
219:   } 
220: 
221:   private static void resetClasses() {
222:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DefaultJSONParser_344_tmp__ESTest_scaffolding.class.getClassLoader()); 
223: 
224:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
225:       "com.alibaba.fastjson.parser.DefaultJSONParser",
226:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
227:       "com.alibaba.fastjson.util.IOUtils$1",
228:       "com.alibaba.fastjson.util.IOUtils",
229:       "com.alibaba.fastjson.util.IdentityHashMap",
230:       "com.alibaba.fastjson.util.ASMUtils",
231:       "com.alibaba.fastjson.parser.SymbolTable",
232:       "com.alibaba.fastjson.parser.Feature",
233:       "com.alibaba.fastjson.serializer.SerializerFeature",
234:       "com.alibaba.fastjson.JSON",
235:       "com.alibaba.fastjson.util.TypeUtils",
236:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
237:       "com.alibaba.fastjson.util.ASMClassLoader$1",
238:       "com.alibaba.fastjson.util.ASMClassLoader",
239:       "com.alibaba.fastjson.serializer.MiscCodec",
240:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
241:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
242:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
243:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
244:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
245:       "com.alibaba.fastjson.serializer.DateCodec",
246:       "com.alibaba.fastjson.serializer.CalendarCodec",
247:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
248:       "com.alibaba.fastjson.serializer.CollectionCodec",
249:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
250:       "com.alibaba.fastjson.serializer.StringCodec",
251:       "com.alibaba.fastjson.serializer.CharacterCodec",
252:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
253:       "com.alibaba.fastjson.serializer.IntegerCodec",
254:       "com.alibaba.fastjson.serializer.LongCodec",
255:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
256:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
257:       "com.alibaba.fastjson.serializer.FloatCodec",
258:       "com.alibaba.fastjson.serializer.BooleanCodec",
259:       "com.alibaba.fastjson.serializer.CharArrayCodec",
260:       "com.alibaba.fastjson.serializer.ReferenceCodec",
261:       "com.alibaba.fastjson.serializer.AtomicCodec",
262:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
263:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
264:       "com.alibaba.fastjson.parser.ParserConfig",
265:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
266:       "com.alibaba.fastjson.serializer.DoubleSerializer",
267:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
268:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
269:       "com.alibaba.fastjson.serializer.AppendableSerializer",
270:       "com.alibaba.fastjson.serializer.ToStringSerializer",
271:       "com.alibaba.fastjson.serializer.SerializeConfig",
272:       "com.alibaba.fastjson.JSONPath",
273:       "com.alibaba.fastjson.parser.JSONLexerBase",
274:       "com.alibaba.fastjson.parser.JSONReaderScanner",
275:       "com.alibaba.fastjson.JSONException",
276:       "com.alibaba.fastjson.parser.JSONToken",
277:       "com.alibaba.fastjson.parser.JSONScanner",
278:       "com.alibaba.fastjson.util.ServiceLoader",
279:       "com.alibaba.fastjson.util.JavaBeanInfo",
280:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
281:       "com.alibaba.fastjson.util.FieldInfo",
282:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
283:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
284:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
285:       "com.alibaba.fastjson.parser.ParseContext",
286:       "com.alibaba.fastjson.asm.ClassReader",
287:       "com.alibaba.fastjson.asm.TypeCollector$1",
288:       "com.alibaba.fastjson.asm.TypeCollector",
289:       "com.alibaba.fastjson.asm.Type",
290:       "com.alibaba.fastjson.asm.MethodCollector",
291:       "com.alibaba.fastjson.JSONObject",
292:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
293:       "com.alibaba.fastjson.JSONArray",
294:       "com.alibaba.fastjson.asm.ClassWriter",
295:       "com.alibaba.fastjson.asm.ByteVector",
296:       "com.alibaba.fastjson.asm.Item",
297:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
298:       "com.alibaba.fastjson.asm.FieldWriter",
299:       "com.alibaba.fastjson.asm.MethodWriter",
300:       "com.alibaba.fastjson.asm.Label",
301:       "com.alibaba.fastjson.serializer.SerializeWriter",
302:       "com.alibaba.fastjson.serializer.SerializeFilterable",
303:       "com.alibaba.fastjson.serializer.JSONSerializer",
304:       "com.alibaba.fastjson.serializer.MapSerializer",
305:       "com.alibaba.fastjson.serializer.SerialContext",
306:       "com.alibaba.fastjson.serializer.ListSerializer",
307:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
308:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
309:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
315:       "com.alibaba.fastjson.serializer.AwtCodec",
316:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
317:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
318:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.serializer.ArraySerializer",
321:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
322:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
323:       "com.alibaba.fastjson.PropertyNamingStrategy"
324:     );
325:   }
326: }

[MASTER] 18:40:00.675 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:40:00.675 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("{\"\":16,\"{\"create asm s$rializer error, veron 1q2.68, class \":\"a string\",\"com.alibaba.fast son.serializer.ArraySerializerK:{},\"expect ':' at \":true,\"..\":true,\", pos \":false,\"\":false}\":{},\"$\":{},\"xx\":false}");
ParserConfig parserConfig1 = new ParserConfig();
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONReaderScanner1, parserConfig1);
DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(defaultJSONParser1.lexer);
Point point1 = new Point(1, 0);
EnumSet<ThaiBuddhistEra> enumSet1 = defaultJSONParser1.parseObject((Type) null, (Object) point1);
assertEquals("", enumSet1);


[MASTER] 18:40:00.675 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
[MASTER] 18:40:00.692 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_346_1590165600676/com/alibaba/fastjson/parser/DefaultJSONParser_346_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_346_1590165600676/com/alibaba/fastjson/parser/DefaultJSONParser_346_tmp__ESTest_scaffolding.java]]
[MASTER] 18:40:00.692 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:40:00.692 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:40:00.692 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  cannot find symbol
   symbol:   variable classLoader1
   location:  class com.alibaba.fastjson.parser.DefaultJSONParser_346_tmp__ESTest: 24
[MASTER] 18:40:00.693 [logback-1] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 18:40:00.693 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_346_1590165600676/com/alibaba/fastjson/parser/DefaultJSONParser_346_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 16:40:00 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson.parser;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.alibaba.fastjson.parser.DefaultJSONParser;
11: import com.alibaba.fastjson.parser.ParserConfig;
12: import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
13: import java.util.Collection;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
19: public class DefaultJSONParser_346_tmp__ESTest extends DefaultJSONParser_346_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       ClassLoader.getSystemClassLoader();
24:       ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
25:       ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory1);
26:       DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("[]", parserConfig1);
27:       defaultJSONParser1.parseArray((Collection) null);
28:       assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser1.getDateFomartPattern());
29:   }
30: }
RegularFileObject[/tmp/EvoSuite_346_1590165600676/com/alibaba/fastjson/parser/DefaultJSONParser_346_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 16:40:00 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson.parser;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class DefaultJSONParser_346_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.parser.DefaultJSONParser"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultJSONParser_346_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.serializer.AwtCodec",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
90:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
91:       "com.alibaba.fastjson.serializer.JSONSerializable",
92:       "com.alibaba.fastjson.serializer.SerializeWriter",
93:       "com.alibaba.fastjson.serializer.ReferenceCodec",
94:       "com.alibaba.fastjson.JSONException",
95:       "com.alibaba.fastjson.asm.TypeCollector$1",
96:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
97:       "com.alibaba.fastjson.serializer.ToStringSerializer",
98:       "com.alibaba.fastjson.serializer.SerialContext",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.serializer.ObjectSerializer",
103:       "com.alibaba.fastjson.serializer.MapSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
106:       "com.alibaba.fastjson.serializer.DateCodec",
107:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
114:       "com.alibaba.fastjson.util.FieldInfo",
115:       "com.alibaba.fastjson.serializer.PropertyFilter",
116:       "com.alibaba.fastjson.annotation.JSONField",
117:       "com.alibaba.fastjson.parser.SymbolTable",
118:       "com.alibaba.fastjson.serializer.NameFilter",
119:       "com.alibaba.fastjson.serializer.ListSerializer",
120:       "com.alibaba.fastjson.JSONArray",
121:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
122:       "com.alibaba.fastjson.JSONAware",
123:       "com.alibaba.fastjson.serializer.LongCodec",
124:       "com.alibaba.fastjson.util.ASMClassLoader",
125:       "com.alibaba.fastjson.PropertyNamingStrategy",
126:       "com.alibaba.fastjson.parser.JSONToken",
127:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
128:       "com.alibaba.fastjson.serializer.AppendableSerializer",
129:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
130:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
131:       "com.alibaba.fastjson.serializer.ContextValueFilter",
132:       "com.alibaba.fastjson.util.ServiceLoader",
133:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
134:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
135:       "com.alibaba.fastjson.parser.DefaultJSONParser",
136:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
137:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
138:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
139:       "com.alibaba.fastjson.serializer.BeanContext",
140:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
141:       "com.alibaba.fastjson.util.IdentityHashMap",
142:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
143:       "com.alibaba.fastjson.JSON",
144:       "com.alibaba.fastjson.serializer.StringCodec",
145:       "com.alibaba.fastjson.serializer.SerializeFilterable",
146:       "com.alibaba.fastjson.JSONWriter",
147:       "com.alibaba.fastjson.asm.Opcodes",
148:       "com.alibaba.fastjson.JSONReader",
149:       "com.alibaba.fastjson.JSONStreamAware",
150:       "com.alibaba.fastjson.asm.MethodWriter",
151:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
152:       "com.alibaba.fastjson.serializer.SerializerFeature",
153:       "com.alibaba.fastjson.TypeReference$1",
154:       "com.alibaba.fastjson.serializer.CalendarCodec",
155:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
156:       "com.alibaba.fastjson.util.IOUtils",
157:       "com.alibaba.fastjson.util.TypeUtils",
158:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
159:       "com.alibaba.fastjson.asm.ClassReader",
160:       "com.alibaba.fastjson.spi.Module",
161:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
162:       "com.alibaba.fastjson.serializer.MiscCodec",
163:       "com.alibaba.fastjson.util.IOUtils$1",
164:       "com.alibaba.fastjson.serializer.IntegerCodec",
165:       "com.alibaba.fastjson.serializer.SerializeFilter",
166:       "com.alibaba.fastjson.JSONPObject",
167:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
168:       "com.alibaba.fastjson.serializer.BeforeFilter",
169:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
170:       "com.alibaba.fastjson.serializer.ArraySerializer",
171:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
172:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
173:       "com.alibaba.fastjson.JSONObject",
174:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
175:       "com.alibaba.fastjson.serializer.CharacterCodec",
176:       "com.alibaba.fastjson.asm.TypeCollector",
177:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
178:       "com.alibaba.fastjson.asm.ByteVector",
179:       "com.alibaba.fastjson.parser.JSONLexer",
180:       "com.alibaba.fastjson.util.ASMClassLoader$1",
181:       "com.alibaba.fastjson.asm.Label",
182:       "com.alibaba.fastjson.asm.FieldWriter",
183:       "com.alibaba.fastjson.serializer.JSONSerializer",
184:       "com.alibaba.fastjson.util.JavaBeanInfo",
185:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
186:       "com.alibaba.fastjson.serializer.SerializeConfig",
187:       "com.alibaba.fastjson.serializer.AtomicCodec",
188:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
189:       "com.alibaba.fastjson.asm.Type",
190:       "com.alibaba.fastjson.serializer.FieldSerializer",
191:       "com.alibaba.fastjson.serializer.FloatCodec",
192:       "com.alibaba.fastjson.parser.JSONReaderScanner",
193:       "com.alibaba.fastjson.serializer.ValueFilter",
194:       "com.alibaba.fastjson.JSONPathException",
195:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
196:       "com.alibaba.fastjson.serializer.Labels",
197:       "com.alibaba.fastjson.serializer.CollectionCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
199:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
200:       "com.alibaba.fastjson.serializer.CharArrayCodec",
201:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
202:       "com.alibaba.fastjson.asm.MethodVisitor",
203:       "com.alibaba.fastjson.annotation.JSONCreator",
204:       "com.alibaba.fastjson.asm.MethodCollector",
205:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
206:       "com.alibaba.fastjson.annotation.JSONType",
207:       "com.alibaba.fastjson.serializer.LabelFilter",
208:       "com.alibaba.fastjson.util.UTF8Decoder",
209:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
210:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
211:       "com.alibaba.fastjson.serializer.DoubleSerializer",
212:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
213:       "com.alibaba.fastjson.serializer.BooleanCodec",
214:       "com.alibaba.fastjson.parser.ParserConfig",
215:       "com.alibaba.fastjson.parser.ParseContext",
216:       "com.alibaba.fastjson.parser.Feature",
217:       "com.alibaba.fastjson.serializer.PropertyPreFilter"
218:     );
219:   } 
220: 
221:   private static void resetClasses() {
222:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DefaultJSONParser_346_tmp__ESTest_scaffolding.class.getClassLoader()); 
223: 
224:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
225:       "com.alibaba.fastjson.parser.DefaultJSONParser",
226:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
227:       "com.alibaba.fastjson.util.IOUtils$1",
228:       "com.alibaba.fastjson.util.IOUtils",
229:       "com.alibaba.fastjson.util.IdentityHashMap",
230:       "com.alibaba.fastjson.util.ASMUtils",
231:       "com.alibaba.fastjson.parser.SymbolTable",
232:       "com.alibaba.fastjson.parser.Feature",
233:       "com.alibaba.fastjson.serializer.SerializerFeature",
234:       "com.alibaba.fastjson.JSON",
235:       "com.alibaba.fastjson.util.TypeUtils",
236:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
237:       "com.alibaba.fastjson.util.ASMClassLoader$1",
238:       "com.alibaba.fastjson.util.ASMClassLoader",
239:       "com.alibaba.fastjson.serializer.MiscCodec",
240:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
241:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
242:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
243:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
244:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
245:       "com.alibaba.fastjson.serializer.DateCodec",
246:       "com.alibaba.fastjson.serializer.CalendarCodec",
247:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
248:       "com.alibaba.fastjson.serializer.CollectionCodec",
249:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
250:       "com.alibaba.fastjson.serializer.StringCodec",
251:       "com.alibaba.fastjson.serializer.CharacterCodec",
252:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
253:       "com.alibaba.fastjson.serializer.IntegerCodec",
254:       "com.alibaba.fastjson.serializer.LongCodec",
255:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
256:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
257:       "com.alibaba.fastjson.serializer.FloatCodec",
258:       "com.alibaba.fastjson.serializer.BooleanCodec",
259:       "com.alibaba.fastjson.serializer.CharArrayCodec",
260:       "com.alibaba.fastjson.serializer.ReferenceCodec",
261:       "com.alibaba.fastjson.serializer.AtomicCodec",
262:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
263:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
264:       "com.alibaba.fastjson.parser.ParserConfig",
265:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
266:       "com.alibaba.fastjson.serializer.DoubleSerializer",
267:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
268:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
269:       "com.alibaba.fastjson.serializer.AppendableSerializer",
270:       "com.alibaba.fastjson.serializer.ToStringSerializer",
271:       "com.alibaba.fastjson.serializer.SerializeConfig",
272:       "com.alibaba.fastjson.JSONPath",
273:       "com.alibaba.fastjson.parser.JSONLexerBase",
274:       "com.alibaba.fastjson.parser.JSONReaderScanner",
275:       "com.alibaba.fastjson.JSONException",
276:       "com.alibaba.fastjson.parser.JSONToken",
277:       "com.alibaba.fastjson.parser.JSONScanner",
278:       "com.alibaba.fastjson.util.ServiceLoader",
279:       "com.alibaba.fastjson.util.JavaBeanInfo",
280:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
281:       "com.alibaba.fastjson.util.FieldInfo",
282:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
283:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
284:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
285:       "com.alibaba.fastjson.parser.ParseContext",
286:       "com.alibaba.fastjson.asm.ClassReader",
287:       "com.alibaba.fastjson.asm.TypeCollector$1",
288:       "com.alibaba.fastjson.asm.TypeCollector",
289:       "com.alibaba.fastjson.asm.Type",
290:       "com.alibaba.fastjson.asm.MethodCollector",
291:       "com.alibaba.fastjson.JSONObject",
292:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
293:       "com.alibaba.fastjson.JSONArray",
294:       "com.alibaba.fastjson.asm.ClassWriter",
295:       "com.alibaba.fastjson.asm.ByteVector",
296:       "com.alibaba.fastjson.asm.Item",
297:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
298:       "com.alibaba.fastjson.asm.FieldWriter",
299:       "com.alibaba.fastjson.asm.MethodWriter",
300:       "com.alibaba.fastjson.asm.Label",
301:       "com.alibaba.fastjson.serializer.SerializeWriter",
302:       "com.alibaba.fastjson.serializer.SerializeFilterable",
303:       "com.alibaba.fastjson.serializer.JSONSerializer",
304:       "com.alibaba.fastjson.serializer.MapSerializer",
305:       "com.alibaba.fastjson.serializer.SerialContext",
306:       "com.alibaba.fastjson.serializer.ListSerializer",
307:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
308:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
309:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
315:       "com.alibaba.fastjson.serializer.AwtCodec",
316:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
317:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
318:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.serializer.ArraySerializer",
321:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
322:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
323:       "com.alibaba.fastjson.PropertyNamingStrategy"
324:     );
325:   }
326: }

[MASTER] 18:40:00.708 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_347_1590165600693/com/alibaba/fastjson/parser/DefaultJSONParser_347_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_347_1590165600693/com/alibaba/fastjson/parser/DefaultJSONParser_347_tmp__ESTest_scaffolding.java]]
[MASTER] 18:40:00.708 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:40:00.708 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 18:40:00.708 [logback-2] ERROR JUnitAnalyzer - Diagnostic:  cannot find symbol
   symbol:   variable parserConfig1
   location:  class com.alibaba.fastjson.parser.DefaultJSONParser_347_tmp__ESTest: 23
[MASTER] 18:40:00.708 [logback-1] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 18:40:00.708 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_347_1590165600693/com/alibaba/fastjson/parser/DefaultJSONParser_347_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 16:40:00 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson.parser;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.alibaba.fastjson.parser.DefaultJSONParser;
11: import com.alibaba.fastjson.parser.ParserConfig;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
18: public class DefaultJSONParser_347_tmp__ESTest extends DefaultJSONParser_347_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       ParserConfig.getGlobalInstance();
23:       DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("false", parserConfig1);
24:       MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
25:       defaultJSONParser1.handleResovleTask(mockGregorianCalendar1);
26:       assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser1.getDateFomartPattern());
27:   }
28: }
RegularFileObject[/tmp/EvoSuite_347_1590165600693/com/alibaba/fastjson/parser/DefaultJSONParser_347_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 16:40:00 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson.parser;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class DefaultJSONParser_347_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.parser.DefaultJSONParser"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultJSONParser_347_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.serializer.AwtCodec",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
90:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
91:       "com.alibaba.fastjson.serializer.JSONSerializable",
92:       "com.alibaba.fastjson.serializer.SerializeWriter",
93:       "com.alibaba.fastjson.serializer.ReferenceCodec",
94:       "com.alibaba.fastjson.JSONException",
95:       "com.alibaba.fastjson.asm.TypeCollector$1",
96:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
97:       "com.alibaba.fastjson.serializer.ToStringSerializer",
98:       "com.alibaba.fastjson.serializer.SerialContext",
99:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.serializer.ObjectSerializer",
103:       "com.alibaba.fastjson.serializer.MapSerializer",
104:       "com.alibaba.fastjson.asm.Item",
105:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
106:       "com.alibaba.fastjson.serializer.DateCodec",
107:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
114:       "com.alibaba.fastjson.util.FieldInfo",
115:       "com.alibaba.fastjson.serializer.PropertyFilter",
116:       "com.alibaba.fastjson.annotation.JSONField",
117:       "com.alibaba.fastjson.parser.SymbolTable",
118:       "com.alibaba.fastjson.serializer.NameFilter",
119:       "com.alibaba.fastjson.serializer.ListSerializer",
120:       "com.alibaba.fastjson.JSONArray",
121:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
122:       "com.alibaba.fastjson.JSONAware",
123:       "com.alibaba.fastjson.serializer.LongCodec",
124:       "com.alibaba.fastjson.util.ASMClassLoader",
125:       "com.alibaba.fastjson.PropertyNamingStrategy",
126:       "com.alibaba.fastjson.parser.JSONToken",
127:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
128:       "com.alibaba.fastjson.serializer.AppendableSerializer",
129:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
130:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
131:       "com.alibaba.fastjson.serializer.ContextValueFilter",
132:       "com.alibaba.fastjson.util.ServiceLoader",
133:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
134:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
135:       "com.alibaba.fastjson.parser.DefaultJSONParser",
136:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
137:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
138:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
139:       "com.alibaba.fastjson.serializer.BeanContext",
140:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
141:       "com.alibaba.fastjson.util.IdentityHashMap",
142:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
143:       "com.alibaba.fastjson.JSON",
144:       "com.alibaba.fastjson.serializer.StringCodec",
145:       "com.alibaba.fastjson.serializer.SerializeFilterable",
146:       "com.alibaba.fastjson.JSONWriter",
147:       "com.alibaba.fastjson.asm.Opcodes",
148:       "com.alibaba.fastjson.JSONReader",
149:       "com.alibaba.fastjson.JSONStreamAware",
150:       "com.alibaba.fastjson.asm.MethodWriter",
151:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
152:       "com.alibaba.fastjson.serializer.SerializerFeature",
153:       "com.alibaba.fastjson.TypeReference$1",
154:       "com.alibaba.fastjson.serializer.CalendarCodec",
155:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
156:       "com.alibaba.fastjson.util.IOUtils",
157:       "com.alibaba.fastjson.util.TypeUtils",
158:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
159:       "com.alibaba.fastjson.asm.ClassReader",
160:       "com.alibaba.fastjson.spi.Module",
161:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
162:       "com.alibaba.fastjson.serializer.MiscCodec",
163:       "com.alibaba.fastjson.util.IOUtils$1",
164:       "com.alibaba.fastjson.serializer.IntegerCodec",
165:       "com.alibaba.fastjson.serializer.SerializeFilter",
166:       "com.alibaba.fastjson.JSONPObject",
167:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
168:       "com.alibaba.fastjson.serializer.BeforeFilter",
169:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
170:       "com.alibaba.fastjson.serializer.ArraySerializer",
171:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
172:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
173:       "com.alibaba.fastjson.JSONObject",
174:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
175:       "com.alibaba.fastjson.serializer.CharacterCodec",
176:       "com.alibaba.fastjson.asm.TypeCollector",
177:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
178:       "com.alibaba.fastjson.asm.ByteVector",
179:       "com.alibaba.fastjson.parser.JSONLexer",
180:       "com.alibaba.fastjson.util.ASMClassLoader$1",
181:       "com.alibaba.fastjson.asm.Label",
182:       "com.alibaba.fastjson.asm.FieldWriter",
183:       "com.alibaba.fastjson.serializer.JSONSerializer",
184:       "com.alibaba.fastjson.util.JavaBeanInfo",
185:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
186:       "com.alibaba.fastjson.serializer.SerializeConfig",
187:       "com.alibaba.fastjson.serializer.AtomicCodec",
188:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
189:       "com.alibaba.fastjson.asm.Type",
190:       "com.alibaba.fastjson.serializer.FieldSerializer",
191:       "com.alibaba.fastjson.serializer.FloatCodec",
192:       "com.alibaba.fastjson.parser.JSONReaderScanner",
193:       "com.alibaba.fastjson.serializer.ValueFilter",
194:       "com.alibaba.fastjson.JSONPathException",
195:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
196:       "com.alibaba.fastjson.serializer.Labels",
197:       "com.alibaba.fastjson.serializer.CollectionCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
199:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
200:       "com.alibaba.fastjson.serializer.CharArrayCodec",
201:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
202:       "com.alibaba.fastjson.asm.MethodVisitor",
203:       "com.alibaba.fastjson.annotation.JSONCreator",
204:       "com.alibaba.fastjson.asm.MethodCollector",
205:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
206:       "com.alibaba.fastjson.annotation.JSONType",
207:       "com.alibaba.fastjson.serializer.LabelFilter",
208:       "com.alibaba.fastjson.util.UTF8Decoder",
209:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
210:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
211:       "com.alibaba.fastjson.serializer.DoubleSerializer",
212:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
213:       "com.alibaba.fastjson.serializer.BooleanCodec",
214:       "com.alibaba.fastjson.parser.ParserConfig",
215:       "com.alibaba.fastjson.parser.ParseContext",
216:       "com.alibaba.fastjson.parser.Feature",
217:       "com.alibaba.fastjson.serializer.PropertyPreFilter"
218:     );
219:   } 
220: 
221:   private static void resetClasses() {
222:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DefaultJSONParser_347_tmp__ESTest_scaffolding.class.getClassLoader()); 
223: 
224:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
225:       "com.alibaba.fastjson.parser.DefaultJSONParser",
226:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
227:       "com.alibaba.fastjson.util.IOUtils$1",
228:       "com.alibaba.fastjson.util.IOUtils",
229:       "com.alibaba.fastjson.util.IdentityHashMap",
230:       "com.alibaba.fastjson.util.ASMUtils",
231:       "com.alibaba.fastjson.parser.SymbolTable",
232:       "com.alibaba.fastjson.parser.Feature",
233:       "com.alibaba.fastjson.serializer.SerializerFeature",
234:       "com.alibaba.fastjson.JSON",
235:       "com.alibaba.fastjson.util.TypeUtils",
236:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
237:       "com.alibaba.fastjson.util.ASMClassLoader$1",
238:       "com.alibaba.fastjson.util.ASMClassLoader",
239:       "com.alibaba.fastjson.serializer.MiscCodec",
240:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
241:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
242:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
243:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
244:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
245:       "com.alibaba.fastjson.serializer.DateCodec",
246:       "com.alibaba.fastjson.serializer.CalendarCodec",
247:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
248:       "com.alibaba.fastjson.serializer.CollectionCodec",
249:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
250:       "com.alibaba.fastjson.serializer.StringCodec",
251:       "com.alibaba.fastjson.serializer.CharacterCodec",
252:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
253:       "com.alibaba.fastjson.serializer.IntegerCodec",
254:       "com.alibaba.fastjson.serializer.LongCodec",
255:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
256:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
257:       "com.alibaba.fastjson.serializer.FloatCodec",
258:       "com.alibaba.fastjson.serializer.BooleanCodec",
259:       "com.alibaba.fastjson.serializer.CharArrayCodec",
260:       "com.alibaba.fastjson.serializer.ReferenceCodec",
261:       "com.alibaba.fastjson.serializer.AtomicCodec",
262:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
263:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
264:       "com.alibaba.fastjson.parser.ParserConfig",
265:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
266:       "com.alibaba.fastjson.serializer.DoubleSerializer",
267:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
268:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
269:       "com.alibaba.fastjson.serializer.AppendableSerializer",
270:       "com.alibaba.fastjson.serializer.ToStringSerializer",
271:       "com.alibaba.fastjson.serializer.SerializeConfig",
272:       "com.alibaba.fastjson.JSONPath",
273:       "com.alibaba.fastjson.parser.JSONLexerBase",
274:       "com.alibaba.fastjson.parser.JSONReaderScanner",
275:       "com.alibaba.fastjson.JSONException",
276:       "com.alibaba.fastjson.parser.JSONToken",
277:       "com.alibaba.fastjson.parser.JSONScanner",
278:       "com.alibaba.fastjson.util.ServiceLoader",
279:       "com.alibaba.fastjson.util.JavaBeanInfo",
280:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
281:       "com.alibaba.fastjson.util.FieldInfo",
282:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
283:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
284:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
285:       "com.alibaba.fastjson.parser.ParseContext",
286:       "com.alibaba.fastjson.asm.ClassReader",
287:       "com.alibaba.fastjson.asm.TypeCollector$1",
288:       "com.alibaba.fastjson.asm.TypeCollector",
289:       "com.alibaba.fastjson.asm.Type",
290:       "com.alibaba.fastjson.asm.MethodCollector",
291:       "com.alibaba.fastjson.JSONObject",
292:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
293:       "com.alibaba.fastjson.JSONArray",
294:       "com.alibaba.fastjson.asm.ClassWriter",
295:       "com.alibaba.fastjson.asm.ByteVector",
296:       "com.alibaba.fastjson.asm.Item",
297:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
298:       "com.alibaba.fastjson.asm.FieldWriter",
299:       "com.alibaba.fastjson.asm.MethodWriter",
300:       "com.alibaba.fastjson.asm.Label",
301:       "com.alibaba.fastjson.serializer.SerializeWriter",
302:       "com.alibaba.fastjson.serializer.SerializeFilterable",
303:       "com.alibaba.fastjson.serializer.JSONSerializer",
304:       "com.alibaba.fastjson.serializer.MapSerializer",
305:       "com.alibaba.fastjson.serializer.SerialContext",
306:       "com.alibaba.fastjson.serializer.ListSerializer",
307:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
308:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
309:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
310:       "com.alibaba.fastjson.serializer.FieldSerializer",
311:       "com.alibaba.fastjson.serializer.BeanContext",
312:       "com.alibaba.fastjson.TypeReference$1",
313:       "com.alibaba.fastjson.TypeReference",
314:       "com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer",
315:       "com.alibaba.fastjson.serializer.AwtCodec",
316:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
317:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
318:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
319:       "com.alibaba.fastjson.util.UTF8Decoder",
320:       "com.alibaba.fastjson.serializer.ArraySerializer",
321:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
322:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
323:       "com.alibaba.fastjson.PropertyNamingStrategy"
324:     );
325:   }
326: }

[MASTER] 18:40:01.000 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:40:01.001 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Double double1 = new Double(0.0);
char[] charArray1 = new char[7];
charArray1[1] = 'X';
JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray1, 2053);
ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory1);
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(double1, jSONReaderScanner1, parserConfig1);
defaultJSONParser1.parseObject();

[MASTER] 18:40:01.001 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 5
* Writing tests to file
* Writing JUnit test case 'JSON_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s11/fastjson/evosuite-tests
[MASTER] 18:40:01.472 [logback-2] ERROR JUnitAnalyzer - Issue in scaffolding of the test suite: 
Mockito cannot mock this class: interface com.alibaba.fastjson.parser.deserializer.PropertyProcessable.

Mockito can only mock non-private & non-final classes.
If you're not sure why you're getting this error, please report to the mailing list.


Java               : 1.8
JVM vendor name    : Oracle Corporation
JVM vendor version : 25.161-b14
JVM name           : OpenJDK 64-Bit Server VM
JVM version        : 1.8.0_161-b14
JVM info           : mixed mode
OS name            : Linux
OS version         : 3.10.0-693.17.1.el7.x86_64


Underlying exception : java.lang.IllegalArgumentException: None of [public static boolean org.evosuite.shaded.org.mockito.internal.creation.bytebuddy.MockMethodInterceptor$ForEquals.doIdentityEquals(java.lang.Object,java.lang.Object)] allows for delegation from public boolean java.lang.Object.equals(java.lang.Object)
Stack trace:
com.alibaba.fastjson.parser.DefaultJSONParser_349_tmp__ESTest_scaffolding.initMocksToAvoidTimeoutsInTheTests(DefaultJSONParser_349_tmp__ESTest_scaffolding.java:223)
com.alibaba.fastjson.parser.DefaultJSONParser_349_tmp__ESTest_scaffolding.initEvoSuiteFramework(DefaultJSONParser_349_tmp__ESTest_scaffolding.java:42)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
org.junit.runners.ParentRunner.run(ParentRunner.java:363)
org.junit.runners.Suite.runChild(Suite.java:128)
org.junit.runners.Suite.runChild(Suite.java:27)
org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
org.junit.runners.ParentRunner.run(ParentRunner.java:363)
org.junit.runner.JUnitCore.run(JUnitCore.java:137)
org.junit.runner.JUnitCore.run(JUnitCore.java:115)
org.junit.runner.JUnitCore.run(JUnitCore.java:105)
org.junit.runner.JUnitCore.run(JUnitCore.java:94)
org.evosuite.junit.JUnitAnalyzer.runJUnitOnCurrentProcess(JUnitAnalyzer.java:306)
org.evosuite.junit.JUnitAnalyzer.runTests(JUnitAnalyzer.java:276)
org.evosuite.junit.JUnitAnalyzer.handleTestsThatAreUnstable(JUnitAnalyzer.java:178)
org.evosuite.TestSuiteGenerator.compileAndCheckTests(TestSuiteGenerator.java:622)
org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:559)
org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:255)
org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:155)
java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:40:01.862 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:40:01.862 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.global;
JSONScanner jSONScanner1 = new JSONScanner("scanEnum", 1);
ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
ParserConfig parserConfig2 = new ParserConfig(aSMDeserializerFactory1);
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"object key level > 512\":{},\"\":99,\"syntax error\":false,\";Ljava/lang/Object;C)C\":[\"a string\"]}", jSONScanner1, parserConfig2);
defaultJSONParser1.setConfig(parserConfig1);
assertEquals(0, defaultJSONParser1.getResolveStatus());


[MASTER] 18:40:01.862 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
* Done!

* Computation finished
[MASTER] 18:40:02.265 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NoClassDefFoundError: Could not initialize class com.alibaba.fastjson.parser.ParserConfig
[MASTER] 18:40:02.265 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("$.com.alibaba.fastjson.serializer.ArraySerializer");
DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser((Object) null, jSONReaderScanner1, parserConfig1);
DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(defaultJSONParser1.lexer);
ParameterizedTypeImpl parameterizedTypeImpl1 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
Object object1 = new Object();
defaultJSONParser2.parseObject((Type) parameterizedTypeImpl1, object1);

[MASTER] 18:40:02.265 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IllegalArgumentException: Empty class name in input
* Writing tests to file
* Writing JUnit test case 'DefaultJSONParser_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s11/fastjson/evosuite-tests
[MASTER] 18:40:02.400 [logback-2] ERROR ClientNodeImpl - Error when generating tests for: com.alibaba.fastjson.parser.DefaultJSONParser with seed 11. Configuration id : EvoSuite_fuzzer
java.lang.IndexOutOfBoundsException: Index: 1, Size: 1
	at java.util.ArrayList.rangeCheck(ArrayList.java:657) ~[na:1.8.0_161]
	at java.util.ArrayList.get(ArrayList.java:433) ~[na:1.8.0_161]
	at org.evosuite.utils.ListenableList.get(ListenableList.java:175) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.testcase.DefaultTestCase.hasReferences(DefaultTestCase.java:856) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.testcase.TestCodeVisitor.visitMethodStatement(TestCodeVisitor.java:1413) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.testcase.TestVisitor.visitStatement(TestVisitor.java:147) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.testcase.TestCodeVisitor.visitStatement(TestCodeVisitor.java:1858) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.testcase.DefaultTestCase.accept(DefaultTestCase.java:114) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.junit.writer.TestSuiteWriter.getImports(TestSuiteWriter.java:417) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.junit.writer.TestSuiteWriter.getHeader(TestSuiteWriter.java:536) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.junit.writer.TestSuiteWriter.getUnitTestsAllInSameFile(TestSuiteWriter.java:330) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.junit.writer.TestSuiteWriter.writeTestSuite(TestSuiteWriter.java:246) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.writeJUnitTestsAndCreateResult(TestSuiteGenerator.java:728) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.writeJUnitTestsAndCreateResult(TestSuiteGenerator.java:739) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:261) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:155) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
* Computation finished
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.JSONArray
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.JSONValidator
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.JSONWriter
* Starting Client-0
* Connecting to master process on port 8220
* Starting Client-0
* Connecting to master process on port 8224
* Starting Client-0
* Connecting to master process on port 8226
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONWriter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 429
* Using seed 11
* Starting evolution
* Initial Number of Goals in DynaMOSA = 130 / 429
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONValidator
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1127
* Using seed 11
* Starting evolution
* Initial Number of Goals in DynaMOSA = 268 / 1127
[MASTER] 18:41:18.561 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 18:41:18.565 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONArray
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1055
* Using seed 11
* Starting evolution
* Initial Number of Goals in DynaMOSA = 674 / 1055
[MASTER] 18:41:19.690 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 18:41:19.690 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 18:41:22.573 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 18:41:26.873 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.reflect.Constructor<T> : Type points to itself
[MASTER] 18:41:51.266 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
* Search finished after 181s and 2314 generations, 881912 statements, best individual has fitness: 30.0
* Minimizing test suite
* Search finished after 182s and 82 generations, 31914 statements, best individual has fitness: 144.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 97
* Number of covered goals: 97
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 93%
* Total number of goals: 76
* Number of covered goals: 71
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 20
* Number of covered goals: 20
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 99%
* Total number of goals: 148
* Number of covered goals: 146
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 100% (no goals)
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 16
* Number of covered goals: 16
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 16
* Number of covered goals: 16
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 93%
* Total number of goals: 76
* Number of covered goals: 71
* Generated 31 tests with total length 137
* Resulting test suite's coverage: 92% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 21%
* Compiling and checking tests
* Minimizing test suite
* Search finished after 182s and 109 generations, 36597 statements, best individual has fitness: 252.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 86%
* Total number of goals: 266
* Number of covered goals: 228
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 86%
* Total number of goals: 212
* Number of covered goals: 182
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 14
* Number of covered goals: 14
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 95%
* Total number of goals: 375
* Number of covered goals: 358
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 57%
* Total number of goals: 14
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 24
* Number of covered goals: 24
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 88%
* Total number of goals: 24
* Number of covered goals: 21
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 86%
* Total number of goals: 212
* Number of covered goals: 182
* Generated 68 tests with total length 188
* Resulting test suite's coverage: 70% (average coverage for all fitness functions)
* Generating assertions
* Writing tests to file
* Writing JUnit test case 'JSONWriter_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s11/fastjson/evosuite-tests
* Done!

* Computation finished
[MASTER] 18:44:35.954 [main] ERROR RuntimeVariable - Obtained invalid goal count: covered 437 out of 429
[MASTER] 18:44:35.956 [main] ERROR SearchStatistics - Not going to write down statistics data, as some data is invalid
[MASTER] 18:44:36.057 [main] ERROR TestGeneration - failed to write statistics data
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 88%
* Total number of goals: 173
* Number of covered goals: 153
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 84%
* Total number of goals: 101
* Number of covered goals: 85
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 95%
* Total number of goals: 111
* Number of covered goals: 105
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 92%
* Total number of goals: 325
* Number of covered goals: 300
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 42%
* Total number of goals: 219
* Number of covered goals: 93
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 68
* Number of covered goals: 68
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 96%
* Total number of goals: 68
* Number of covered goals: 65
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 83%
* Total number of goals: 101
* Number of covered goals: 84
* Generated 182 tests with total length 496
* Resulting test suite's coverage: 83% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 44%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'JSONValidator_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s11/fastjson/evosuite-tests
* Resulting test suite's mutation score: 51%
* Compiling and checking tests
* Done!

* Computation finished
[MASTER] 18:45:49.854 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Requested array size exceeds VM limit
[MASTER] 18:45:49.854 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONArray jSONArray0 = new JSONArray(Integer.MAX_VALUE);

[MASTER] 18:45:57.003 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class com.alibaba.fastjson.JSONException: create asm serializer error, verson 1.2.68, class byte
[MASTER] 18:45:57.003 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONArray jSONArray0 = new JSONArray();
JSONArray jSONArray1 = jSONArray0.fluentSet(3089, "@type");
jSONArray1.fluentAdd(989, (Object) jSONArray0);
jSONArray1.getByteValue(989);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing tests to file
* Writing JUnit test case 'JSONArray_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s11/fastjson/evosuite-tests
* Done!

* Computation finished
