* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.google.gson.JsonPrimitive
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.google.gson.JsonObject
* Starting Client-0
* Starting Client-0
* Connecting to master process on port 9925
* Connecting to master process on port 9926
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
* Finished analyzing classpath
* Generating tests for class com.google.gson.JsonPrimitive
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 433
* Using seed 1
* Starting evolution
* Initial Number of Goals in DynaMOSA = 165 / 433
* Finished analyzing classpath
* Generating tests for class com.google.gson.JsonObject
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 221
* Using seed 1
* Starting evolution
* Initial Number of Goals in DynaMOSA = 142 / 221
[MASTER] 17:28:34.244 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 17:28:34.248 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
* Search finished after 121s and 873 generations, 137958 statements, best individual has fitness: 42.0
* Minimizing test suite
* Search finished after 124s and 195 generations, 69089 statements, best individual has fitness: 59.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 29
* Number of covered goals: 29
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 29
* Number of covered goals: 29
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 100%
* Total number of goals: 16
* Number of covered goals: 16
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 59%
* Total number of goals: 82
* Number of covered goals: 48
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 18
* Number of covered goals: 18
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 18
* Number of covered goals: 18
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 29
* Number of covered goals: 29
* Generated 36 tests with total length 101
* Resulting test suite's coverage: 89% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 88%
* Compiling and checking tests
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 97%
* Total number of goals: 62
* Number of covered goals: 60
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 91%
* Total number of goals: 77
* Number of covered goals: 70
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 14
* Number of covered goals: 14
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 87%
* Total number of goals: 91
* Number of covered goals: 79
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 79%
* Total number of goals: 82
* Number of covered goals: 65
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 91%
* Total number of goals: 77
* Number of covered goals: 70
* Generated 78 tests with total length 240
* Resulting test suite's coverage: 87% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 49%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'JsonObject_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s1/gson/evosuite-tests
* Done!

* Computation finished
* Writing tests to file
* Writing JUnit test case 'JsonPrimitive_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s1/gson/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.google.gson.JsonArray
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.google.gson.internal.LinkedHashTreeMap
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.google.gson.internal.bind.JsonTreeWriter
* Starting Client-0
* Starting Client-0
* Connecting to master process on port 9922
* Connecting to master process on port 9923
* Starting Client-0
* Connecting to master process on port 9926
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
* Finished analyzing classpath
* Generating tests for class com.google.gson.JsonArray
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
* Total number of test goals for DYNAMOSA: 427
* Using seed 1
* Starting evolution
* Finished analyzing classpath
* Generating tests for class com.google.gson.internal.bind.JsonTreeWriter
* Initial Number of Goals in DynaMOSA = 249 / 427
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 443
* Using seed 1
* Starting evolution
* Initial Number of Goals in DynaMOSA = 202 / 443
* Finished analyzing classpath
* Generating tests for class com.google.gson.internal.LinkedHashTreeMap
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1627
* Using seed 1
* Starting evolution
* Initial Number of Goals in DynaMOSA = 578 / 1627
[MASTER] 17:34:19.503 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 17:34:19.504 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 17:34:29.032 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 17:36:06.980 [logback-2] ERROR AbstractStatement - Error assigning value of type LinkedHashTreeMap.Node[] defined at statement LinkedHashTreeMap.Node<String, String>[] linkedHashTreeMap_NodeArray0 = linkedHashTreeMap0.table, assignment statement: linkedHashTreeMap_NodeArray0[0] = (LinkedHashTreeMap.Node<String, String>) linkedHashTreeMap_NodeArray1; SUT=com.google.gson.internal.LinkedHashTreeMap
* Search finished after 121s and 1758 generations, 335764 statements, best individual has fitness: 54.0
* Minimizing test suite
* Search finished after 121s and 19 generations, 18224 statements, best individual has fitness: 657.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 83
* Number of covered goals: 79
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 91%
* Total number of goals: 74
* Number of covered goals: 67
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 14
* Number of covered goals: 14
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 87
* Number of covered goals: 78
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 86%
* Total number of goals: 93
* Number of covered goals: 80
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 16
* Number of covered goals: 16
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 16
* Number of covered goals: 16
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 91%
* Total number of goals: 74
* Number of covered goals: 67
* Generated 58 tests with total length 201
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
* Minimizing test suite
* Search finished after 124s and 216 generations, 40181 statements, best individual has fitness: 96.0
* Resulting test suite's mutation score: 51%
* Compiling and checking tests
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 72
* Number of covered goals: 72
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 58
* Number of covered goals: 58
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 43
* Number of covered goals: 43
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 97%
* Total number of goals: 70
* Number of covered goals: 68
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 54%
* Total number of goals: 109
* Number of covered goals: 59
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 30
* Number of covered goals: 30
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 93%
* Total number of goals: 30
* Number of covered goals: 28
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 58
* Number of covered goals: 58
* Generated 85 tests with total length 272
* Resulting test suite's coverage: 87% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 82%
* Compiling and checking tests
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 65%
* Total number of goals: 387
* Number of covered goals: 251
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 55%
* Total number of goals: 262
* Number of covered goals: 145
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 10
* Number of covered goals: 10
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 66%
* Total number of goals: 588
* Number of covered goals: 391
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 41%
* Total number of goals: 34
* Number of covered goals: 14
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 94%
* Total number of goals: 47
* Number of covered goals: 44
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 47
* Number of covered goals: 43
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 55%
* Total number of goals: 262
* Number of covered goals: 145
* Generated 57 tests with total length 250
* Resulting test suite's coverage: 52% (average coverage for all fitness functions)
* Generating assertions
* Writing tests to file
* Writing JUnit test case 'JsonTreeWriter_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s1/gson/evosuite-tests
* Done!

* Computation finished
[MASTER] 17:36:44.194 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 17:36:44.195 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JsonArray jsonArray0 = new JsonArray(2147483645);

* Resulting test suite's mutation score: 17%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'JsonArray_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s1/gson/evosuite-tests
* Done!

* Computation finished
* Writing tests to file
* Writing JUnit test case 'LinkedHashTreeMap_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s1/gson/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.google.gson.JsonElement
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.google.gson.Gson
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.google.gson.stream.JsonWriter
* Starting Client-0
* Starting Client-0
* Connecting to master process on port 9922
* Connecting to master process on port 9924
* Starting Client-0
* Connecting to master process on port 9926
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
* Finished analyzing classpath
* Generating tests for class com.google.gson.stream.JsonWriter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Finished analyzing classpath
* Generating tests for class com.google.gson.JsonElement
* Test criteria:
* Total number of test goals for DYNAMOSA: 1024
* Using seed 1
* Starting evolution
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
* Initial Number of Goals in DynaMOSA = 410 / 1024
* Total number of test goals for DYNAMOSA: 265
* Using seed 1
* Starting evolution
* Initial Number of Goals in DynaMOSA = 183 / 265
* Finished analyzing classpath
* Generating tests for class com.google.gson.Gson
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 991
* Using seed 1
* Starting evolution
* Initial Number of Goals in DynaMOSA = 599 / 991
[MASTER] 17:43:03.500 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 17:43:03.504 [logback-2] ERROR TestCluster - Failed to check cache for com.google.gson.Gson.FutureTypeAdapter<T> : Type points to itself
* Search finished after 122s and 1049 generations, 354917 statements, best individual has fitness: 123.0
* Search finished after 121s and 810 generations, 96450 statements, best individual has fitness: 106.0
* Minimizing test suite
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 36
* Number of covered goals: 34
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 26
* Number of covered goals: 26
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 39
* Number of covered goals: 39
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 100%
* Total number of goals: 9
* Number of covered goals: 9
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 49%
* Total number of goals: 124
* Number of covered goals: 61
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 22
* Number of covered goals: 20
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 26
* Number of covered goals: 26
* Generated 79 tests with total length 190
* Resulting test suite's coverage: 85% (average coverage for all fitness functions)
* Generating assertions
* Search finished after 121s and 44 generations, 13557 statements, best individual has fitness: 235.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 96%
* Total number of goals: 179
* Number of covered goals: 172
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 90%
* Total number of goals: 117
* Number of covered goals: 105
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 18
* Number of covered goals: 18
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 88%
* Total number of goals: 468
* Number of covered goals: 413
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 87%
* Total number of goals: 97
* Number of covered goals: 84
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 23
* Number of covered goals: 23
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 23
* Number of covered goals: 23
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 83%
* Total number of goals: 117
* Number of covered goals: 97
* Generated 77 tests with total length 355
* Resulting test suite's coverage: 87% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 62%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'JsonWriter_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s1/gson/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 44%
* Compiling and checking tests
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 86%
* Total number of goals: 333
* Number of covered goals: 285
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 82%
* Total number of goals: 113
* Number of covered goals: 93
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 39
* Number of covered goals: 39
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 75%
* Total number of goals: 292
* Number of covered goals: 219
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 59%
* Total number of goals: 70
* Number of covered goals: 41
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 94%
* Total number of goals: 35
* Number of covered goals: 33
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 89%
* Total number of goals: 35
* Number of covered goals: 31
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 79%
* Total number of goals: 113
* Number of covered goals: 89
* Generated 76 tests with total length 280
* Resulting test suite's coverage: 76% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 17:45:29.182 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 17:45:29.183 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JsonArray jsonArray0 = new JsonArray();
JsonArray jsonArray1 = jsonArray0.getAsJsonArray();
jsonArray1.add((JsonElement) jsonArray0);
jsonArray1.getAsString();

* Resulting test suite's mutation score: 25%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'JsonElement_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s1/gson/evosuite-tests
* Done!

* Computation finished
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'Gson_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s1/gson/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.google.gson.internal.bind.JsonTreeReader
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.google.gson.stream.JsonReader
* Starting Client-0
* Connecting to master process on port 9924
* Starting Client-0
* Connecting to master process on port 9923
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
* Finished analyzing classpath
* Generating tests for class com.google.gson.internal.bind.JsonTreeReader
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 830
* Using seed 1
* Starting evolution
* Initial Number of Goals in DynaMOSA = 253 / 830
* Finished analyzing classpath
* Generating tests for class com.google.gson.stream.JsonReader
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
[MASTER] 17:48:34.797 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 17:48:34.799 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
* Total number of test goals for DYNAMOSA: 2813
* Using seed 1
* Starting evolution
* Initial Number of Goals in DynaMOSA = 438 / 2813
* Search finished after 121s and 1335 generations, 295953 statements, best individual has fitness: 169.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 162
* Number of covered goals: 150
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 103
* Number of covered goals: 92
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 39
* Number of covered goals: 39
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 76%
* Total number of goals: 397
* Number of covered goals: 303
* Coverage analysis for criterion OUTPUT
* Search finished after 123s and 430 generations, 122583 statements, best individual has fitness: 985.0
* Coverage of criterion OUTPUT: 74%
* Total number of goals: 27
* Number of covered goals: 20
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 19
* Number of covered goals: 19
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 19
* Number of covered goals: 19
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 103
* Number of covered goals: 92
* Generated 81 tests with total length 303
* Resulting test suite's coverage: 84% (average coverage for all fitness functions)
* Generating assertions
* Minimizing test suite
* Resulting test suite's mutation score: 40%
* Compiling and checking tests
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 72%
* Total number of goals: 671
* Number of covered goals: 484
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 70%
* Total number of goals: 677
* Number of covered goals: 477
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 78
* Number of covered goals: 78
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 61%
* Total number of goals: 709
* Number of covered goals: 433
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 51%
* Total number of goals: 35
* Number of covered goals: 18
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 86%
* Total number of goals: 22
* Number of covered goals: 19
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 69%
* Total number of goals: 677
* Number of covered goals: 469
* Generated 163 tests with total length 620
* Resulting test suite's coverage: 70% (average coverage for all fitness functions)
* Generating assertions
* Writing tests to file
* Writing JUnit test case 'JsonTreeReader_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s1/gson/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 16%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'JsonReader_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s1/gson/evosuite-tests
* Done!

* Computation finished
