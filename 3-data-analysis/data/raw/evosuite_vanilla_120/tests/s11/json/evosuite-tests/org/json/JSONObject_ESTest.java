/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 19:35:17 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Desktop;
import java.awt.Dialog;
import java.awt.GraphicsDevice;
import java.awt.MultipleGradientPaint;
import java.awt.TrayIcon;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterInputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.net.Proxy;
import java.net.StandardProtocolFamily;
import java.net.URI;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.security.KeyRep;
import java.sql.ClientInfoStatus;
import java.sql.PseudoColumnUsage;
import java.text.Normalizer;
import java.util.Collection;
import java.util.Enumeration;
import java.util.Formatter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.annotation.Resource;
import javax.jws.WebParam;
import javax.smartcardio.CardTerminals;
import javax.swing.DropMode;
import javax.swing.GroupLayout;
import javax.swing.SortOrder;
import javax.tools.StandardLocation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.isDecimalNotation("0");
      jSONObject1.optBoolean("0", false);
      JSONObject jSONObject2 = new JSONObject(2151);
      jSONObject2.increment("0");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2151);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      jSONObject2.write((Writer) outputStreamWriter0, (-1434), (-1485));
      jSONObject2.optFloat("^&ojY\"&N <9gto&bH[");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      HashMap<BufferedWriter, BigInteger> hashMap0 = new HashMap<BufferedWriter, BigInteger>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Unterminated string", 32.285362F);
      JSONObject jSONObject2 = jSONObject0.increment("Unterminated string");
      jSONObject1.putOpt("Unterminated string", "Unterminated string");
      Class<Authenticator.RequestorType> class0 = Authenticator.RequestorType.class;
      jSONObject2.optEnum(class0, "utf-8");
      Locale locale0 = Locale.KOREAN;
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject("~7`9-wd`rHc", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name ~7`9-wd`rHc, locale ko
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      HashMap<BufferedWriter, BigInteger> hashMap0 = new HashMap<BufferedWriter, BigInteger>();
      File file0 = MockFile.createTempFile("O&ft", "O&ft");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      Long long0 = new Long((-1747L));
      JSONObject.wrap(long0);
      JSONObject jSONObject0 = new JSONObject();
      Class<Authenticator.RequestorType> class0 = Authenticator.RequestorType.class;
      jSONObject0.optEnum(class0, "getgetISO3Language");
      Boolean boolean0 = new Boolean(true);
      JSONObject.getNames((Object) boolean0);
      try { 
        jSONObject0.getBoolean("O&ft");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject.quote((String) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "].";
      stringArray0[2] = "\b";
      stringArray0[3] = "java.io.StringWriter@0000000002";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optFloat("KJC,5e|~s0k", (-0.56400454F));
      JSONObject jSONObject2 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      HashMap<BufferedWriter, BigInteger> hashMap0 = new HashMap<BufferedWriter, BigInteger>();
      BigInteger bigInteger0 = BigInteger.TEN;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "] is not a Boolean.";
      stringArray0[1] = "ejMAwtZ9l";
      JSONObject jSONObject0 = new JSONObject(bigInteger0, stringArray0);
      BigDecimal bigDecimal0 = new BigDecimal((-3200L));
      JSONObject jSONObject1 = jSONObject0.putOnce("Value out of sequence.", bigDecimal0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream0, 1712);
      jSONObject1.toString();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.signum();
      bigInteger1.floatValue();
      jSONObject0.accumulate("JSON does not allow non-finite numbers.", "Value out of sequence.");
      jSONObject0.getDouble("Value out of sequence.");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("JSON does not allow non-finite numbers.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Missing value";
      jSONObject0.put("Missing value", 1);
      short short0 = (short) (-1);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      JSONObject.quote("Missing value");
      Locale.Category.values();
      Byte byte0 = new Byte((byte)23);
      JSONObject.wrap(byte0);
      // Undeclared exception!
      try { 
        Locale.Category.valueOf("m$&xcaF7LNq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.Locale.Category.m$&xcaF7LNq
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharBuffer.allocate(116);
      JSONObject jSONObject0 = new JSONObject(116);
      Class<Authenticator.RequestorType> class0 = Authenticator.RequestorType.class;
      jSONObject0.optEnum(class0, "~Et[.|9");
      LinkedList<Dialog.ModalExclusionType> linkedList0 = new LinkedList<Dialog.ModalExclusionType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject.getNames((Object) jSONArray0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, 1712);
      jSONObject1.toString();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.signum();
      bigInteger0.floatValue();
      JSONObject jSONObject2 = jSONObject1.accumulate("A JSONObject text must begin with '{'", jSONObject0);
      try { 
        jSONObject2.getDouble("A JSONObject text must begin with '{'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000001815] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      String string0 = "A JSONObject text must begin with '{'";
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      jSONObject0.optLong("A JSONObject text must begin with '{'");
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject.doubleToString((-0.9441860774283195));
      HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.increment("Null pointer");
      jSONObject0.putOpt("-0.9441860774283195", "-0.9441860774283195");
      jSONObject1.toString();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-76);
      byteArray0[7] = (byte)57;
      byteArray0[8] = (byte) (-89);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.floatValue();
      jSONObject0.optBigInteger("java.io.StringWriter@0000000016", bigInteger0);
      jSONObject1.keySet();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<DropMode, MultipleGradientPaint.CycleMethod> hashMap0 = new HashMap<DropMode, MultipleGradientPaint.CycleMethod>();
      DropMode dropMode0 = DropMode.USE_SELECTION;
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REFLECT;
      hashMap0.put(dropMode0, multipleGradientPaint_CycleMethod0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertFalse(jSONObject0.isEmpty());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod1 = MultipleGradientPaint.CycleMethod.NO_CYCLE;
      hashMap0.put(dropMode0, multipleGradientPaint_CycleMethod1);
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      jSONObject0.optQuery(jSONPointer0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Boolean, StandardLocation> hashMap0 = new HashMap<Boolean, StandardLocation>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject0.isEmpty());
      
      jSONObject0.put("~1", (-1.0F));
      JSONObject jSONObject1 = new JSONObject();
      String string0 = "longValueExact";
      try { 
        jSONObject0.getBigInteger("~1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("\"", true);
      mockFileWriter0.flush();
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(2836.8809F);
      JSONObject jSONObject1 = jSONObject0.putOnce("\"", float0);
      JSONObject.testValidity(float0);
      BigDecimal bigDecimal0 = new BigDecimal(612);
      jSONObject1.optBigDecimal("m*[<O;Gd", bigDecimal0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(612);
      jSONObject1.optInt("~Gr2T");
      JSONObject.stringToValue("null");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Long, DataInputStream> hashMap0 = new HashMap<Long, DataInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Class<Thread.State> class0 = Thread.State.class;
      jSONObject0.put("5GYL", (-1744));
      Thread.State thread_State0 = Thread.State.RUNNABLE;
      jSONObject0.optEnum(class0, "\f", thread_State0);
      jSONObject0.optLong("5GYL", 0L);
      jSONObject0.optJSONArray("trim");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(116);
      charArrayWriter0.append((CharSequence) charBuffer0);
      JSONObject jSONObject0 = new JSONObject(charBuffer0);
      JSONObject jSONObject1 = new JSONObject();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, 1712);
      jSONObject1.toString();
      JSONObject jSONObject2 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject1.write((Writer) pipedWriter0, 123, 3350);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject.stringToValue(" gN1R|*<zAO\"'");
      JSONObject jSONObject0 = new JSONObject((Object) " gN1R|*<zAO\"'");
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Object) " gN1R|*<zAO\"'");
      try { 
        jSONObject1.getInt("org.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000033] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "null";
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "null");
      JSONObject jSONObject0 = new JSONObject(charArrayWriter1);
      try { 
        jSONObject0.getInt("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "\"";
      boolean boolean0 = true;
      MockFileWriter mockFileWriter0 = new MockFileWriter("\"", true);
      mockFileWriter0.flush();
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(2836.8809F);
      JSONObject jSONObject1 = jSONObject0.putOnce("\"", float0);
      JSONObject.testValidity(float0);
      jSONObject1.getNumber("\"");
      jSONObject1.increment("612.00");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      jSONObject1.optBigDecimal("\"", bigDecimal0);
      int int0 = 0;
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-1934759703));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1934759703
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 48;
      Integer integer0 = new Integer(48);
      JSONObject.wrap(integer0);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject(48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[48] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("0", 0.0F);
      JSONObject.isDecimalNotation("TBr},wz.}+b*");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale locale1 = new Locale("TBr},wz.}+b*");
      jSONObject0.optFloat("0", 0.0F);
      jSONObject1.put("ct1Htd@9", 1L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)61;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject0.optBigInteger("ct1Htd@9", bigInteger0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      try { 
        jSONObject0.put("Ib#~>", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Boolean, StandardLocation> hashMap0 = new HashMap<Boolean, StandardLocation>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "i\"=im";
      jSONObject0.put("i\"=im", (Object) "i\"=im");
      float float0 = 0.0F;
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONArray jSONArray1 = jSONObject0.names();
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      JSONObject.isDecimalNotation("toL");
      jSONObject0.optBoolean("M=sU{;d)r,tK4Gd", false);
      String string0 = "Bad value from toJSONString: ";
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject1.putOpt("] is not a valid number.", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("0", 0.0F);
      JSONObject.isDecimalNotation("TBr},wz.}+b*");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale locale1 = new Locale("TBr},wz.}+b*");
      JSONObject.quote("TBr},wz.}+b*");
      jSONObject0.optFloat("0", 0.0F);
      JSONObject.stringToValue("TBr},wz.}+b*");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Boolean, StandardLocation> hashMap0 = new HashMap<Boolean, StandardLocation>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray((JSONArray) null);
      int int0 = 612;
      jSONObject0.optDouble("E'tKtY+9(S,kW/");
      try { 
        jSONObject0.getNumber("7t4l}X}^AV;/!&/nl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Boolean, StandardLocation> hashMap0 = new HashMap<Boolean, StandardLocation>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "i\"Iim";
      jSONObject0.toJSONArray((JSONArray) null);
      JSONObject jSONObject1 = jSONObject0.put("i\"Iim", (Object) "i\"Iim");
      try { 
        jSONObject1.getJSONObject("i\"Iim");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Boolean, StandardLocation> hashMap0 = new HashMap<Boolean, StandardLocation>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "i\"=im";
      String string1 = null;
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) "i\"=im");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("i\"=im", (Object) null);
      JSONObject jSONObject2 = new JSONObject();
      Class<Authenticator.RequestorType> class0 = Authenticator.RequestorType.class;
      jSONObject2.optEnum(class0, ">c]+ ;wa;.");
      JSONObject.getNames((Object) null);
      try { 
        jSONObject1.getBoolean(">c]+ ;wa;.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      JSONObject.stringToNumber("612.00");
      JSONObject.isDecimalNotation("] not a string.");
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject.stringToValue("Fc39kMgpj");
      JSONObject.doubleToString(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      Class<Authenticator.RequestorType> class0 = Authenticator.RequestorType.class;
      jSONObject1.optEnum(class0, (String) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      JSONObject.getNames((Object) dataOutputStream0);
      try { 
        jSONObject1.getBoolean("M=sU{;d)r,tK4Gd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000016] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      HashMap<BufferedWriter, BigInteger> hashMap0 = new HashMap<BufferedWriter, BigInteger>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Unterminated string", (-1.0F));
      jSONObject0.increment("Unterminated string");
      jSONObject1.putOpt("Null pointer", "Unterminated string");
      JSONTokener jSONTokener0 = new JSONTokener(bufferedInputStream0);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      HashMap<BufferedWriter, BigInteger> hashMap0 = new HashMap<BufferedWriter, BigInteger>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Unterminated string", (-1.0F));
      jSONObject0.increment("Unterminated string");
      JSONObject jSONObject2 = jSONObject1.putOpt("Unterminated string", "Unterminated string");
      jSONObject2.optFloat("null", (-1.0F));
      JSONObject jSONObject3 = new JSONObject(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Boolean, StandardLocation> hashMap0 = new HashMap<Boolean, StandardLocation>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("i\"=im", (Object) "i\"=im");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm>();
      JSONObject.stringToNumber("0");
      StringReader stringReader0 = new StringReader("\t");
      JSONObject.isDecimalNotation("lrz}[7QA:P");
      JSONObject.stringToValue("99w }h");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("7L)DLc]D@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm>();
      JSONObject.stringToNumber("0");
      Boolean boolean0 = new Boolean("\t");
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<GraphicsDevice.WindowTranslucency, StringWriter> hashMap0 = new HashMap<GraphicsDevice.WindowTranslucency, StringWriter>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("a JSON pointer should start with '/' or '#/'", (Object) "i\"Iim");
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      Boolean boolean0 = Boolean.FALSE;
      jSONObject1.optLong("M=sU{;d)r,tK4Gd", 0L);
      jSONObject1.similar(jSONObject0);
      jSONObject0.toMap();
      Byte byte0 = new Byte((byte)125);
      jSONObject2.optNumber("getlongValue", (Number) byte0);
      try { 
        jSONObject1.getString("M=sU{;d)r,tK4Gd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000016] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.isDecimalNotation("^1&+");
      jSONObject0.optBoolean("^1&+", false);
      jSONObject0.putOpt("^1&+", (Object) null);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 111, (-1382));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, 1712);
      jSONObject1.toString();
      JSONObject jSONObject2 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      jSONObject1.write((Writer) pipedWriter0, 123, 3350);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      bufferedInputStream0.markSupported();
      jSONObject0.toString();
      pipedInputStream0.skip(0L);
      JSONObject jSONObject1 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      pipedWriter0.append('A');
      jSONObject0.write((Writer) pipedWriter0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0L);
      try { 
        jSONObject1.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      Class<Normalizer.Form> class0 = Normalizer.Form.class;
      Normalizer.Form normalizer_Form0 = Normalizer.Form.NFKD;
      jSONObject0.optEnum(class0, "] is not a JSONObject.", normalizer_Form0);
      JSONObject.testValidity(normalizer_Form0);
      Locale locale0 = Locale.FRANCE;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      LinkedList<WebParam.Mode> linkedList0 = new LinkedList<WebParam.Mode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(2818L);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 12);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      bufferedInputStream1.markSupported();
      jSONObject0.toString();
      JSONObject jSONObject1 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader();
      PipedReader pipedReader1 = new PipedReader(111);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader1);
      pipedWriter0.append('A');
      jSONObject0.write((Writer) pipedWriter0);
      jSONObject1.optDouble("java.io.StringWriter@0000000002", (-1505.7));
      try { 
        jSONObject0.getString("getintValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Normalizer.Form normalizer_Form0 = Normalizer.Form.NFKD;
      BigDecimal bigDecimal0 = new BigDecimal((-1134L));
      jSONObject0.optNumber((String) null, (Number) bigDecimal0);
      Class<Normalizer.Form> class0 = Normalizer.Form.class;
      Normalizer.Form normalizer_Form1 = Normalizer.Form.NFC;
      jSONObject0.optEnum(class0, "^1&+", normalizer_Form1);
      JSONObject.testValidity(class0);
      Locale locale0 = Locale.FRANCE;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append((CharSequence) "^1&+");
      JSONObject jSONObject1 = new JSONObject(normalizer_Form0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "^1&+";
      stringArray0[1] = "^1&+";
      stringArray0[2] = "^1&+";
      stringArray0[3] = "^1&+";
      stringArray0[4] = "^1&+";
      stringArray0[6] = "^1&+";
      JSONObject jSONObject2 = new JSONObject(locale0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      char[] charArray0 = new char[5];
      charArray0[0] = '5';
      charArray0[1] = '1';
      charArray0[2] = 'p';
      charArray0[3] = 'O';
      charArray0[4] = 'u';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONObject jSONObject0 = new JSONObject(charArrayReader0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce("-", bufferedInputStream0);
      bufferedInputStream0.markSupported();
      jSONObject0.toString();
      JSONObject jSONObject2 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      pipedWriter0.append('p');
      jSONObject2.write((Writer) pipedWriter0);
      jSONObject2.optDouble("java.lang.Float@000000001.", 0.0);
      try { 
        jSONObject1.getString("G',sp(t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("0", 0.0F);
      JSONObject jSONObject2 = jSONObject1.increment("Null pointer");
      jSONObject0.putOpt("0", "0");
      jSONObject1.toString();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.negate();
      bigInteger0.floatValue();
      Byte byte0 = new Byte((byte)57);
      jSONObject0.optDouble("0");
      jSONObject2.optFloat("java.io.StringWriter@0000000026");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Float float0 = new Float((-3136.54));
      Double double0 = new Double(Double.NaN);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1075);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('u');
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, charArrayWriter1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)124;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 125);
      jSONObject0.toString();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.floatValue();
      jSONObject0.accumulate("java.io.StringWriter@0000000003", (Object) null);
      jSONObject0.optNumber("java.io.StringWriter@0000000003", (Number) (byte) (-67));
      HashMap<PipedInputStream, CardTerminals.State> hashMap0 = new HashMap<PipedInputStream, CardTerminals.State>();
      try { 
        jSONObject1.getNumber("] could not be converted to BigInteger.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000006] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Map<StandardProtocolFamily, ProcessBuilder.Redirect.Type> map0 = null;
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.names();
      String string0 = "M=sU{;d)r,tK4Gd";
      jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      Object object0 = new Object();
      try { 
        jSONObject0.putOnce("M=sU{;d)r,tK4Gd", object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"M=sU{;d)r,tK4Gd\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "+fJ}}uC v]g|Z");
      String[] stringArray0 = new String[9];
      stringArray0[1] = "6R'd]Ea7";
      stringArray0[3] = "getshortValueExact";
      stringArray0[4] = "6R'd]Ea7";
      stringArray0[5] = "getshortValueExact";
      stringArray0[6] = "7L)DLc]D@5";
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      JSONObject jSONObject0 = new JSONObject(pipedInputStream0);
      String string0 = null;
      HashMap<Normalizer.Form, Locale.Category> hashMap0 = new HashMap<Normalizer.Form, Locale.Category>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      JSONObject jSONObject0 = new JSONObject(roundingMode0);
      JSONObject jSONObject1 = jSONObject0.append(")`s6*", (Object) null);
      Character character0 = new Character('m');
      JSONObject.wrap(character0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "2qw=8p)<Nj#%#G$M";
      stringArray0[1] = "~f5CM)Vv";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject2.entrySet();
      try { 
        jSONObject1.getJSONObject("2qw=8p)<Nj#%#G$M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      Object object0 = JSONObject.stringToValue("0");
      assertEquals(0, object0);
      assertNotNull(object0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.put("0", (-1.0));
      JSONObject.doubleToString((-1.0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "`\"f3X4GwFR<,Vs";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce("`\"f3X4GwFR<,Vs", "`\"f3X4GwFR<,Vs");
      JSONObject jSONObject2 = jSONObject0.put("`\"f3X4GwFR<,Vs", 1.0);
      jSONObject1.toString();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.floatValue();
      jSONObject1.accumulate("`\"f3X4GwFR<,Vs", jSONObject0);
      jSONObject0.optNumber("?", (Number) bigInteger0);
      jSONObject0.optInt("h4,2*`,");
      try { 
        jSONObject2.getLong("istoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000001398] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(10);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONObject0.opt("\t");
      Object object0 = new Object();
      jSONObject0.optDouble("Misplaced array.");
      jSONObject0.optFloat("Misplaced array.");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      JSONObject jSONObject0 = new JSONObject(roundingMode0);
      JSONObject.quote("2qw=8p)<Nj#%#G$M");
      Locale locale0 = Locale.ROOT;
      JSONObject jSONObject1 = new JSONObject((Object) "2qw=8p)<Nj#%#G$M");
      Object object0 = new Object();
      jSONObject0.optDouble("Misplaced array.");
      jSONObject1.optFloat("java.io.StringWriter@0000000002");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.toJSONArray(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      Boolean boolean0 = Boolean.FALSE;
      jSONObject1.optLong("M=sU{;d)r,tK4Gd", 0L);
      jSONObject1.similar(jSONObject0);
      jSONObject0.toMap();
      try { 
        jSONObject1.getString("M=sU{;d)r,tK4Gd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000016] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      Boolean boolean0 = Boolean.FALSE;
      jSONObject1.optLong("M=sU{;d)r,tK4Gd", 0L);
      jSONObject1.similar(jSONObject0);
      jSONObject2.keySet();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Float float0 = new Float((-3136.54));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject.wrap(float0);
      BigDecimal bigDecimal0 = new BigDecimal((-1325));
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("QZ.S?x", bigDecimal0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(46);
      JSONObject.indent(charArrayWriter0, 3);
      jSONObject0.optString("QZ.S?x");
      JSONObject jSONObject1 = jSONObject0.accumulate("*G:r1WnnuSYZvf", bigDecimal1);
      jSONObject0.optLong("trim", (long) 0);
      jSONObject1.keys();
      jSONObject0.optInt("*G:r1WnnuSYZvf", (-1325));
      MockFile mockFile0 = new MockFile("QZ.S?x");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList1);
      JSONPointer jSONPointer1 = new JSONPointer(linkedList1);
      jSONObject0.optQuery(jSONPointer1);
      jSONObject1.getLong("*G:r1WnnuSYZvf");
      jSONObject1.increment("N<3/}]Qn>]I:DXRE8P");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = "Null key.";
      Class<Normalizer.Form> class0 = Normalizer.Form.class;
      Normalizer.Form normalizer_Form0 = Normalizer.Form.NFKD;
      jSONObject0.optEnum(class0, "] is not a JSONObject.", normalizer_Form0);
      jSONObject0.put("Null key.", (-1448.8851F));
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        jSONObject0.getBigDecimal("Null key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Boolean, StandardLocation> hashMap0 = new HashMap<Boolean, StandardLocation>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "i\"=im";
      JSONObject jSONObject1 = jSONObject0.put("i\"=im", (Object) "i\"=im");
      try { 
        jSONObject1.getBigDecimal("i\"=im");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Integer integer0 = new Integer(12);
      JSONObject jSONObject0 = new JSONObject(integer0);
      MockFile mockFile0 = new MockFile("[", "k?-stA<%2mr\"9UK/o");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      JSONObject.wrap(mockFileWriter0);
      Boolean boolean0 = Boolean.FALSE;
      String string0 = "[N:GzCC=QS[e-D$c";
      long long0 = (-1775L);
      jSONObject0.optLong("*n/l*DHA", (-1775L));
      PipedInputStream pipedInputStream0 = new PipedInputStream(12);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockFile mockFile0 = new MockFile("k?-stA<%2mr\"9UK/o");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockFileWriter0);
      JSONObject jSONObject1 = new JSONObject();
      Class<Authenticator.RequestorType> class0 = Authenticator.RequestorType.class;
      jSONObject1.optEnum(class0, "JbFY)v");
      JSONObject.getNames((Object) "k?-stA<%2mr\"9UK/o");
      try { 
        jSONObject0.getBoolean("k?-stA<%2mr\"9UK/o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000006] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("0", 0.0F);
      jSONObject1.put("0", 0.0F);
      jSONObject1.increment("Null pointer");
      Locale locale0 = Locale.FRANCE;
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("Null pointer", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name Null pointer, locale fr_FR
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject.isDecimalNotation("%'");
      HashMap<Float, SortOrder> hashMap0 = new HashMap<Float, SortOrder>();
      HashMap<DropMode, MultipleGradientPaint.CycleMethod> hashMap1 = new HashMap<DropMode, MultipleGradientPaint.CycleMethod>();
      JSONObject jSONObject0 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0, 3350, 3350);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<Boolean, StandardLocation> hashMap0 = new HashMap<Boolean, StandardLocation>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("i\"Iim", (Object) "i\"Iim");
      try { 
        jSONObject0.increment("i\"Iim");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000005].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Boolean, StandardLocation> hashMap0 = new HashMap<Boolean, StandardLocation>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("i\"=im", (Object) "i\"=im");
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.doubleToString(0.5789281291023823);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "i\"=im";
      stringArray0[1] = "i\"=im";
      stringArray0[2] = "i\"=im";
      stringArray0[3] = "y=.nZ}=v[jr`C";
      stringArray0[4] = "0.5789281291023823";
      stringArray0[5] = "0.5789281291023823";
      stringArray0[6] = "0.5789281291023823";
      stringArray0[7] = "i\"=im";
      stringArray0[8] = "i\"=im";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject0.optLong("i\"=im");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<Boolean, StandardLocation> hashMap0 = new HashMap<Boolean, StandardLocation>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.isDecimalNotation("in");
      JSONObject jSONObject1 = jSONObject0.putOnce("in", "in");
      JSONObject.testValidity(jSONObject0);
      Boolean boolean0 = Boolean.FALSE;
      jSONObject0.optLong("in", 0L);
      jSONObject1.similar(hashMap0);
      String string0 = null;
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.names();
      String string0 = "M=sU{;d)r,tK4Gd";
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject.indent(charArrayWriter0, 0);
      jSONObject2.optString("M=sU{;d)r,tK4Gd");
      JSONObject jSONObject3 = jSONObject0.accumulate("org.json.JSONObject@0000000002", jSONObject1);
      jSONObject3.optLong("M=sU{;d)r,tK4Gd", (long) 0);
      jSONObject0.keys();
      jSONObject0.optInt("org.json.JSONObject@0000000002", 0);
      MockFile mockFile0 = new MockFile("\f");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      jSONObject3.optQuery(jSONPointer0);
      try { 
        jSONObject1.getLong("org.json.JSONObject@0000000002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000003873] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject.stringToValue("M=sU{;d)r,tK4Gd");
      jSONObject1.optInt("M=sU{;d)r,tK4Gd");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ")*lDZh";
      JSONTokener jSONTokener0 = new JSONTokener(")*lDZh");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<Boolean, StandardLocation> hashMap0 = new HashMap<Boolean, StandardLocation>();
      JSONObject.stringToValue("-0");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      bufferedInputStream0.markSupported();
      jSONObject0.toString();
      JSONObject jSONObject2 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      pipedWriter0.append('A');
      jSONObject0.write((Writer) pipedWriter0);
      jSONObject2.write((Writer) pipedWriter0, (-38), 39);
      jSONObject1.optDouble("A JSONObject text must begin with '{'", 0.0);
      try { 
        jSONObject0.getString("^f4/72+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("0", 0.0F);
      JSONObject.isDecimalNotation("EXz");
      jSONObject0.optBoolean("EXz", true);
      JSONObject jSONObject2 = jSONObject1.putOpt((String) null, "0");
      jSONObject2.optJSONArray((String) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      bufferedInputStream0.markSupported();
      jSONObject1.toString();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.floatValue();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)56;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1176878878), (byte) (-121));
      jSONObject1.accumulate("A JSONObject text must begin with '{'", byteArrayInputStream0);
      jSONObject1.optNumber("A JSONObject text must begin with '{'", (Number) (byte)112);
      HashMap<PipedInputStream, CardTerminals.State> hashMap0 = new HashMap<PipedInputStream, CardTerminals.State>();
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getNumber("~0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000017] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("z'v:W:UKtco@e", (Map<?, ?>) null);
      JSONObject.isDecimalNotation("z'v:W:UKtco@e");
      JSONObject jSONObject2 = jSONObject1.putOnce("z'v:W:UKtco@e", (Object) null);
      JSONObject.testValidity("z'v:W:UKtco@e");
      Boolean boolean0 = Boolean.FALSE;
      jSONObject1.optLong("z'v:W:UKtco@e", 0L);
      jSONObject1.similar(jSONObject0);
      jSONObject0.toMap();
      jSONObject0.optNumber("z'v:W:UKtco@e", (Number) null);
      jSONObject2.optNumber("z'v:W:UKtco@e", (Number) null);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optString("] is not an int.", "] is not an int.");
      JSONObject.testValidity("] is not an int.");
      JSONObject.isDecimalNotation("d}1G;u4_GkErbv&HiN");
      jSONObject1.optBoolean("] is not an int.", false);
      jSONObject1.putOpt("] is not an int.", "] is not an int.");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A JSONArray text must start with '['";
      stringArray0[1] = "6R'd]Ea7";
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      JSONObject.stringToValue("isintern");
      BigInteger bigInteger2 = BigInteger.ZERO;
      JSONObject.stringToValue("qd7");
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.writeValue(pipedWriter0, "6R'd]Ea7", (-2070872260), 17);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<Boolean, StandardLocation> hashMap0 = new HashMap<Boolean, StandardLocation>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("trim", (Object) "trim");
      jSONObject0.putOpt("] not found.", jSONObject1);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("5{@Y\"Psr~}bd 7F}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.optInt("getunscaledValue", 1133);
      JSONObject jSONObject1 = jSONObject0.put("getunscaledValue", (-1L));
      String string0 = "st";
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject1.optBigDecimal("(X", bigDecimal0);
      jSONObject1.optNumber("st", (Number) bigDecimal0);
      jSONObject0.get("getunscaledValue");
      String string1 = "\"";
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "+fJ}}uC v]g|Z");
      String[] stringArray0 = new String[9];
      stringArray0[1] = "6R'd]Ea7";
      stringArray0[3] = "getshortValueExact";
      stringArray0[4] = "6R'd]Ea7";
      stringArray0[5] = "getshortValueExact";
      stringArray0[6] = "7L)DLc]D@5";
      stringArray0[7] = "] is not an enum of type ";
      stringArray0[8] = "OIdZ;$'i[9&7^";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      HashMap<ClientInfoStatus, Authenticator.RequestorType> hashMap0 = new HashMap<ClientInfoStatus, Authenticator.RequestorType>();
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject2.length();
      jSONObject0.opt((String) null);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<DropMode, MultipleGradientPaint.CycleMethod> hashMap0 = new HashMap<DropMode, MultipleGradientPaint.CycleMethod>();
      DropMode dropMode0 = DropMode.USE_SELECTION;
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.NO_CYCLE;
      hashMap0.put(dropMode0, multipleGradientPaint_CycleMethod0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject.getNames(jSONObject0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1054);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JSONObject.valueToString(mockFileReader0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "java.io.StringWriter@0000000003");
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, charArrayWriter1, 47, (-1186));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      bufferedInputStream0.markSupported();
      jSONObject0.toString();
      JSONObject jSONObject2 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      pipedWriter0.append('A');
      jSONObject0.write((Writer) pipedWriter0);
      jSONObject2.write((Writer) pipedWriter0, 1, 39);
      jSONObject1.optDouble("A JSONObject text must begin with '{'", 2128.422248202174);
      try { 
        jSONObject0.getString("^f4/72+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject.indent(charArrayWriter0, 0);
      String string0 = jSONObject2.optString("M=sU{;d)r,tK4Gd");
      assertNotNull(string0);
      
      JSONObject jSONObject3 = jSONObject0.accumulate("org.json.JSONObject@0000000002", jSONObject1);
      jSONObject3.optLong("M=sU{;d)r,tK4Gd", (long) 0);
      jSONObject0.keys();
      jSONObject0.optInt("%", 0);
      MockFile mockFile0 = new MockFile("\f");
      Class<Authenticator.RequestorType> class0 = Authenticator.RequestorType.class;
      jSONObject3.optEnum(class0, "org.json.JSONObject@0000000002");
      try { 
        jSONObject1.getFloat("M=sU{;d)r,tK4Gd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000001942] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, 1712);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optLong("A JSONObject text must begin with '{'");
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0);
      JSONObject jSONObject2 = jSONObject1.putOpt("0", lineNumberReader0);
      JSONObject jSONObject3 = new JSONObject();
      try { 
        jSONObject2.getFloat("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000014] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm>();
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.floatValue();
      JSONObject.stringToValue("0");
      BigInteger bigInteger1 = BigInteger.ZERO;
      JSONObject.stringToValue("0000");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      Writer writer0 = jSONObject1.write((Writer) pipedWriter0);
      jSONObject0.write(writer0, 1, 123);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Float float0 = new Float((-4496.1378));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "9il'W;";
      stringArray0[1] = "e-7K-o!DLKCFyTt^|";
      stringArray0[2] = "9<j";
      stringArray0[3] = "] is not a long.";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short) (-1253));
      linkedList0.offer(short0);
      jSONObject0.put("9il'W;", (Collection<?>) linkedList0);
      jSONObject0.optString("k]^<xYq");
      try { 
        jSONObject0.getBigInteger("] is not a long.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Boolean, StandardLocation> hashMap0 = new HashMap<Boolean, StandardLocation>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("trim", (Object) "trim");
      JSONObject jSONObject2 = jSONObject0.putOpt("] not found.", jSONObject1);
      JSONObject.getNames(jSONObject0);
      Object object0 = new Object();
      jSONObject1.optDouble("] not found.");
      jSONObject2.remove("trim");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.names();
      jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "M=sU{;d)r,tK4Gd";
      stringArray0[1] = "M=sU{;d)r,tK4Gd";
      stringArray0[2] = "-";
      stringArray0[3] = "M=sU{;d)r,tK4Gd";
      stringArray0[4] = "M=sU{;d)r,tK4Gd";
      stringArray0[5] = "M=sU{;d)r,tK4Gd";
      stringArray0[6] = "M=sU{;d)r,tK4Gd";
      stringArray0[7] = "M=sU{;d)r,tK4Gd";
      stringArray0[8] = "M=sU{;d)r,tK4Gd";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optString("M=sU{;d)r,tK4Gd", "JSONObject[");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('z');
      stringWriter1.append((CharSequence) "] is not an int.", 6, 6);
      JSONObject.doubleToString(6);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "M=sU{;d)r,tK4Gd", 6, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optString("] is not an int.", "] is not an int.");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('z');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "] is not an int.", 0, 6);
      JSONObject.doubleToString((-3548.729168));
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "-3548.729168");
      JSONObject.getNames((Object) stringWriter3);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      Class<Normalizer.Form> class0 = Normalizer.Form.class;
      Normalizer.Form normalizer_Form0 = Normalizer.Form.NFKD;
      jSONObject0.optEnum(class0, "] is not a JSONObject.", normalizer_Form0);
      JSONObject.testValidity(normalizer_Form0);
      Locale locale0 = Locale.FRANCE;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.stringToValue("sJxPOGS&maZP:U!*N");
      jSONObject0.isNull("] could not be converted to BigDecimal.");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gettoCharArray");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("j:v38BAGu$hf", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockFileOutputStream0.flush();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      JSONObject.testValidity(filterOutputStream0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Class<Thread.State> class0 = Thread.State.class;
      Thread.State thread_State0 = Thread.State.RUNNABLE;
      jSONObject1.optEnum(class0, "get", thread_State0);
      jSONObject1.optFloat((String) null, (-1343.8306F));
      jSONObject1.isNull("!S");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject.doubleToString((-2056.0552));
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject.testValidity("-2056.0552");
      Locale locale0 = Locale.FRANCE;
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("index %d is out of bounds - the array has %d elements", "-2056.0552");
      File file0 = MockFile.createTempFile("gettoString", "tri", (File) mockFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      Writer writer0 = jSONObject0.write((Writer) outputStreamWriter0, (-432), (-432));
      Writer writer1 = JSONObject.quote("", writer0);
      JSONObject.indent(writer1, 116);
      jSONObject0.optString("gettoString");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("gettoString");
      JSONObject jSONObject1 = jSONObject0.accumulate("index %d is out of bounds - the array has %d elements", (Object) null);
      jSONObject0.keys();
      Locale locale1 = new Locale("-2056.0552");
      BigInteger bigInteger1 = BigInteger.ZERO;
      JSONObject.numberToString(bigInteger0);
      Class<Resource.AuthenticationType> class0 = Resource.AuthenticationType.class;
      try { 
        jSONObject1.getEnum(class0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] is not an enum of type java.io.StringWriter@0000000016.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HashMap<StandardLocation, MockFileReader> hashMap0 = new HashMap<StandardLocation, MockFileReader>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("trim", (Object) pipedInputStream0);
      JSONObject jSONObject1 = jSONObject0.putOpt("\"", "trim");
      JSONObject.doubleToString(0.0);
      jSONObject1.optDouble("\"");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce(stringArray0[0], stringArray0[0]);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, 1712);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.floatValue();
      // Undeclared exception!
      try { 
        jSONObject1.accumulate(stringArray0[0], jSONObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Proxy.Type, ClientInfoStatus> hashMap0 = new HashMap<Proxy.Type, ClientInfoStatus>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.json.JSONPointer$Builder");
      JSONObject jSONObject0 = new JSONObject(77);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3124);
      charArrayWriter0.write(3124);
      JSONObject.quote("Lx7;*z/>", (Writer) charArrayWriter0);
      jSONObject0.has("");
      JSONObject.testValidity("Lx7;*z/>");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.names();
      Class<StandardProtocolFamily> class0 = StandardProtocolFamily.class;
      jSONObject0.optEnum(class0, "SS!s?V}A5YtwicAd#}u");
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject.indent(charArrayWriter0, 0);
      jSONObject2.optString("M=sU{;d)r,tK4Gd");
      JSONObject jSONObject3 = jSONObject0.accumulate("org.json.JSONObject@0000000002", jSONObject1);
      jSONObject3.optLong("M=sU{;d)r,tK4Gd", (long) 0);
      jSONObject0.keys();
      jSONObject0.optInt("%", 0);
      MockFile mockFile0 = new MockFile("index %d is out of bounds - the array has %d elements");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      jSONObject3.optQuery(jSONPointer0);
      JSONObject jSONObject4 = jSONObject0.accumulate("getgetScript", jSONObject2);
      jSONObject4.optFloat("ax|^5=ic^[3:;X", (-823.68F));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>(111, 1.0F);
      JSONObject.testValidity("6R'd]Ea7");
      Locale locale0 = Locale.FRANCE;
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      Object object0 = new Object();
      jSONObject0.optDouble("6R'd]Ea7");
      jSONObject0.optBoolean("6R'd]Ea7", true);
      jSONObject0.optFloat("true");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject.doubleToString((-2056.0552));
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject.testValidity("-2056.0552");
      Locale locale0 = Locale.FRANCE;
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("index %d is out of bounds - the array has %d elements", "-2056.0552");
      File file0 = MockFile.createTempFile("gettoString", "tri", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      Writer writer0 = jSONObject0.write((Writer) outputStreamWriter0, (-432), (-432));
      JSONObject.quote("", writer0);
      jSONObject0.optDouble("7K'TxL)iD(");
      MockFileWriter mockFileWriter0 = new MockFileWriter("8-<P}kg<!02gV", true);
      JSONObject.quote("-2056.0552", (Writer) mockFileWriter0);
      File file1 = MockFile.createTempFile(" at ", "7K'TxL)iD(", (File) null);
      MockFileWriter mockFileWriter1 = new MockFileWriter(file1);
      jSONObject0.putOnce("length", mockFileWriter1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      bufferedInputStream0.markSupported();
      jSONObject0.toString();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.floatValue();
      jSONObject0.optInt("A JSONObject text must begin with '{'", 102);
      MockFile mockFile0 = new MockFile("%");
      try { 
        jSONObject1.getLong("e^KT\\");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Boolean, StandardLocation> hashMap0 = new HashMap<Boolean, StandardLocation>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("trim", (Object) "trim");
      JSONObject jSONObject2 = jSONObject0.putOpt("] not found.", jSONObject1);
      JSONObject.doubleToString(0.0);
      jSONObject2.optDouble("] not found.");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Boolean, StandardLocation> hashMap0 = new HashMap<Boolean, StandardLocation>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("trim", (Object) "trim");
      jSONObject0.putOpt("] not found.", jSONObject1);
      Object object0 = new Object();
      jSONObject1.optDouble("] not found.");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(98);
      String string0 = " [character ";
      StringReader stringReader0 = new StringReader(" [character ");
      jSONObject0.similar(stringReader0);
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      Double double0 = new Double(1.0);
      Boolean boolean0 = Boolean.valueOf(false);
      hashMap0.put(double0, boolean0);
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      Locale locale0 = Locale.UK;
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(" [character ", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name  [character , locale en_GB
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Boolean, StandardLocation> hashMap0 = new HashMap<Boolean, StandardLocation>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("trim", (Object) "trim");
      Object object0 = new Object();
      jSONObject1.optInt("trim");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      bufferedInputStream0.markSupported();
      int int0 = new Integer(12);
      jSONObject0.toString();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      JSONObject.stringToValue("A JSONObject text must begin with '{'");
      jSONObject0.opt("A JSONObject text must begin with '{'");
      jSONObject0.isEmpty();
      jSONObject0.optInt("A JSONObject text must begin with '{'");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      String string0 = "A JSONObject text must begin with '{'";
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      bufferedInputStream0.markSupported();
      jSONObject0.toString();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.floatValue();
      JSONObject jSONObject2 = jSONObject0.accumulate("e^KT\\", "A JSONObject text must begin with '{'");
      jSONObject1.put("A JSONObject text must begin with '{'", true);
      try { 
        jSONObject2.getJSONObject("A JSONObject text must begin with '{'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000023] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("0", 0.0F);
      JSONObject.isDecimalNotation("TBr},wz.}+b*");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale locale1 = new Locale("TBr},wz.}+b*");
      jSONObject0.optString("\"");
      jSONObject0.optFloat("0", 0.0F);
      jSONObject1.put("ct1Htd@9", 1L);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "KlKA^]t_97u";
      stringArray0[1] = "k80dbo3x[H4 ..-+X";
      stringArray0[2] = "2-R-5ARwJTQBVr*I6H";
      String string0 = ";d?#r!I6Q";
      stringArray0[3] = ";d?#r!I6Q";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string1 = "val [";
      jSONObject1.optFloat("val [", 70.303F);
      String string2 = "qqy&!Z9}";
      HashMap<Desktop.Action, Float> hashMap0 = new HashMap<Desktop.Action, Float>();
      jSONObject0.put("qqy&!Z9}", (Map<?, ?>) hashMap0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("org.json.JSONWriter", "qqy&!Z9}");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // qqy&!Z9}
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>(111, 1.0F);
      JSONObject.testValidity("6R'd]Ea7");
      Locale locale0 = Locale.ROOT;
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      Object object0 = new Object();
      jSONObject0.optDouble("6R'd]Ea7");
      jSONObject0.optFloat("6R'd]Ea7");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject.doubleToString(Double.NaN);
      HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimal0.intValueExact();
      bigDecimal0.stripTrailingZeros();
      BigDecimal bigDecimal1 = new BigDecimal(0.0);
      bigDecimal1.negate();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0, charsetDecoder0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Fqata|-15Hu");
      JSONPointer.builder();
      BigInteger bigInteger0 = BigInteger.TEN;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "H6]rNf%0?=8";
      stringArray0[1] = "H6]rNf%0?=8";
      stringArray0[2] = "Misplaced endArray.";
      stringArray0[3] = "Fqata|-15Hu";
      JSONObject jSONObject0 = new JSONObject(inputStreamReader0, stringArray0);
      jSONObject0.optJSONArray("\"");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.putOpt("lM", "lM");
      jSONObject0.optJSONArray("lM");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = new JSONObject();
      Class<Authenticator.RequestorType> class0 = Authenticator.RequestorType.class;
      jSONObject0.optEnum(class0, "] is not a JSONObject.");
      JSONObject.getNames((Object) null);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "] could not convert to BigDecimal.";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "] could not convert to BigDecimal.");
      Double double0 = new Double((-1982.287947850965));
      JSONObject.testValidity(double0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-795));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -795
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Boolean boolean0 = new Boolean("] could not convert to BigDecimal.");
      Double double0 = new Double((-1982.287947850965));
      JSONObject.testValidity(double0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      String string0 = "A JSONObject text must begin with '{'";
      stringArray0[0] = "A JSONObject text must begin with '{'";
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      Boolean boolean0 = Boolean.valueOf(false);
      hashMap0.put((Double) null, boolean0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockFile mockFile0 = new MockFile("k?-stA<%2mr\"9UK/o");
      JSONObject.doubleToString(1946.9);
      HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm>();
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm0 = Formatter.BigDecimalLayoutForm.DECIMAL_FLOAT;
      hashMap0.put((CharArrayWriter) null, formatter_BigDecimalLayoutForm0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      bufferedInputStream0.markSupported();
      jSONObject0.toString();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.floatValue();
      JSONObject jSONObject1 = jSONObject0.accumulate("e^KT\\", "A JSONObject text must begin with '{'");
      jSONObject0.optNumber("e^KT\\", (Number) bigInteger0);
      HashMap<PipedInputStream, CardTerminals.State> hashMap0 = new HashMap<PipedInputStream, CardTerminals.State>();
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject1.getNumber("e^KT\\");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000017] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      HashMap<MockFileReader, ObjectInputStream> hashMap0 = new HashMap<MockFileReader, ObjectInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optLong("RuZNm", 0L);
      jSONObject0.keys();
      jSONObject0.optInt("%", 428);
      MockFile mockFile0 = new MockFile("%");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONPointer jSONPointer1 = new JSONPointer(linkedList0);
      jSONObject0.optQuery(jSONPointer1);
      try { 
        jSONObject0.getLong("+fJ}}uC v]g|Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(98);
      StringReader stringReader0 = new StringReader(" [character ");
      jSONObject0.similar(stringReader0);
      jSONObject0.keySet();
      stringReader0.mark(98);
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject1 = new JSONObject((Object) "0");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.put("istrim", (Object) stringWriter0);
      try { 
        jSONObject0.getFloat("c\"93a0I^A(BnZv&B|U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000012] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(98);
      StringReader stringReader0 = new StringReader(" [character ");
      jSONObject0.similar(stringReader0);
      jSONObject0.keySet();
      Class<Normalizer.Form> class0 = Normalizer.Form.class;
      Normalizer.Form normalizer_Form0 = Normalizer.Form.NFD;
      jSONObject0.optEnum(class0, " [character ", normalizer_Form0);
      JSONObject jSONObject1 = jSONObject0.put("]", 0.0F);
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject.numberToString(bigInteger0);
      jSONObject0.put("8SmPe,$.#5^4MEUQi", true);
      jSONObject1.getFloat("]");
      jSONObject0.optBigDecimal("]", (BigDecimal) null);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "isintern";
      JSONObject jSONObject0 = new JSONObject((Object) "isintern");
      JSONObject.quote("isintern");
      JSONObject jSONObject1 = jSONObject0.append("~f5CM)Vv", "java.io.StringWriter@0000000012");
      JSONObject.wrap(jSONObject1);
      jSONObject1.entrySet();
      try { 
        jSONObject1.getJSONObject("isintern");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000030] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Boolean, StandardLocation> hashMap0 = new HashMap<Boolean, StandardLocation>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("i\"=im", (Object) "i\"=im");
      JSONObject jSONObject2 = new JSONObject();
      Class<Authenticator.RequestorType> class0 = Authenticator.RequestorType.class;
      jSONObject0.optEnum(class0, "i\"=im");
      assertEquals(1, jSONObject0.length());
      
      JSONObject.getNames((Object) jSONObject1);
      try { 
        jSONObject1.getBoolean("i\"=im");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000006] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Boolean, StandardLocation> hashMap0 = new HashMap<Boolean, StandardLocation>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("\"= im", (Object) "\"= im");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject0.getBoolean("\"= im");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000006] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("0", 0.0F);
      JSONObject.isDecimalNotation("0");
      jSONObject1.optBoolean("0", false);
      jSONObject0.putOpt("Bad value from toJSONString: ", "Bad value from toJSONString: ");
      jSONObject0.optJSONArray("Bad value from toJSONString: ");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.names();
      String string0 = "M=sU{;d)r,tK4Gd";
      jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      Float float0 = new Float((-1168.8F));
      JSONObject.wrap(jSONArray0);
      JSONObject.isDecimalNotation("get");
      Class<Desktop.Action> class0 = Desktop.Action.class;
      jSONArray0.optEnum(class0, 115);
      JSONObject jSONObject1 = jSONObject0.increment("toUpperCase");
      JSONObject jSONObject2 = jSONObject1.accumulate("get", "toUpperCase");
      jSONObject2.optBoolean("M=sU{;d)r,tK4Gd");
      jSONObject0.optNumber("JT,#3YI)Ue^Cn<", (Number) float0);
      HashMap<Locale.FilteringMode, RoundingMode> hashMap0 = new HashMap<Locale.FilteringMode, RoundingMode>();
      JSONObject jSONObject3 = new JSONObject((Map<?, ?>) hashMap0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      jSONObject3.optEnum(class1, "<rHQd.\"Y");
      try { 
        jSONObject3.getLong("toUpperCase");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000045] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<Boolean, StandardLocation> hashMap0 = new HashMap<Boolean, StandardLocation>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("null", (Object) "null");
      JSONObject jSONObject1 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader();
      PipedReader pipedReader1 = new PipedReader(23);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader1);
      JSONObject.getNames(jSONObject1);
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, jSONObject1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, 1712);
      JSONObject jSONObject2 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      JSONObject.getNames(jSONObject1);
      try { 
        jSONObject0.append("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[A JSONObject text must begin with '{'] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "+fJ}}uC v]g|Z");
      String string0 = "OIdZ;$'i[9&7^";
      String[] stringArray0 = new String[9];
      stringArray0[1] = "6R'd]Ea7";
      stringArray0[2] = "+fJ}}uC v]g|Z";
      stringArray0[3] = "getshortValueExact";
      stringArray0[4] = "6R'd]Ea7";
      stringArray0[5] = "getshortValueExact";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      stringArray0[6] = "7L)DLc]D@5";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)3, (byte)3);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-4177984));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("fN@/rnEuS", "fN@/rnEuS");
      jSONObject0.keySet();
      jSONObject1.optJSONObject("fN@/rnEuS");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      Boolean boolean0 = Boolean.FALSE;
      jSONObject1.optLong("M=sU{;d)r,tK4Gd", 0L);
      jSONObject1.similar(jSONObject0);
      jSONObject0.toMap();
      Byte byte0 = new Byte((byte)125);
      jSONObject2.optNumber("getlongValue", (Number) byte0);
      JSONObject.doubleToString(612);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject.stringToValue("java.");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.wrap("java.");
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("java.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.putOpt("lM", bigInteger0);
      jSONObject0.optJSONArray((String) null);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      jSONObject0.similar(locale_Category0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = 98;
      JSONObject jSONObject0 = new JSONObject(98);
      StringReader stringReader0 = new StringReader(" [character ");
      jSONObject0.similar(stringReader0);
      jSONObject0.keySet();
      stringReader0.mark(98);
      String string0 = "0";
      JSONObject.getNames((Object) stringReader0);
      jSONObject0.putOnce("0", "0");
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("0", 0.0F);
      JSONObject jSONObject2 = jSONObject1.increment("Null pointer");
      jSONObject0.putOpt("0", "0");
      jSONObject1.toString();
      jSONObject2.optLong("java.io.StringWriter@0000000026", (-1652L));
      jSONObject1.similar(jSONObject2);
      jSONObject1.toMap();
      BigInteger bigInteger0 = BigInteger.ONE;
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      String string0 = null;
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "+fJ}}uC v]g|Z");
      String[] stringArray0 = new String[9];
      stringArray0[1] = "6R'd]Ea7";
      stringArray0[2] = "+fJ}}uC v]g|Z";
      stringArray0[3] = "getshortValueExact";
      stringArray0[4] = "6R'd]Ea7";
      stringArray0[5] = "getshortValueExact";
      stringArray0[6] = "7L)DLc]D@5";
      stringArray0[7] = "] is not an enum of type ";
      stringArray0[8] = "OIdZ;$'i[9&7^";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.stringToValue("7L)DLc]D@5");
      try { 
        jSONObject1.getJSONArray("P;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000027] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.names();
      String string0 = "M=sU{;d)r,tK4Gd";
      jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      Float float0 = new Float((-1168.8F));
      JSONObject.wrap(jSONArray0);
      JSONObject.isDecimalNotation("get");
      Class<Desktop.Action> class0 = Desktop.Action.class;
      jSONArray0.optEnum(class0, 115);
      JSONObject jSONObject1 = jSONObject0.increment("toUpperCase");
      jSONObject1.accumulate("get", "toUpperCase");
      jSONObject0.optNumber("JT,#3YI)Ue^Cn<", (Number) float0);
      HashMap<Locale.FilteringMode, RoundingMode> hashMap0 = new HashMap<Locale.FilteringMode, RoundingMode>();
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      jSONObject2.optEnum(class1, "<rHQd.\"Y");
      try { 
        jSONObject2.getLong("toUpperCase");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000040] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.wrap(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      String[] stringArray0 = new String[14];
      String string0 = "Q~";
      stringArray0[0] = "Q~";
      stringArray0[1] = "r6N_\"";
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0, stringArray0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.putOnce(stringArray0[3], "Q~");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      JSONObject.quote("r6N_\"", (Writer) mockPrintWriter0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tri");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q~");
      try { 
        jSONObject0.getJSONArray("r6N_\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      jSONObject0.opt("");
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject1.toString((-2306));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject.indent(charArrayWriter0, 0);
      jSONObject2.optString("M=sU{;d)r,tK4Gd");
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.floatValue();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "M=sU{;d)r,tK4Gd";
      stringArray0[1] = "org.json.JSONObject@0000000002";
      stringArray0[2] = "M=sU{;d)r,tK4Gd";
      stringArray0[3] = "M=sU{;d)r,tK4Gd";
      stringArray0[4] = "M=sU{;d)r,tK4Gd";
      stringArray0[5] = "M=sU{;d)r,tK4Gd";
      stringArray0[6] = "M=sU{;d)r,tK4Gd";
      stringArray0[7] = "M=sU{;d)r,tK4Gd";
      stringArray0[8] = "org.json.JSONObject@0000000002";
      JSONObject jSONObject3 = new JSONObject(bigInteger0, stringArray0);
      jSONObject0.optBigInteger("M=sU{;d)r,tK4Gd", bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONObject.stringToValue("~1");
      jSONObject1.opt("m9:sj#j/3KtY1");
      jSONObject3.isEmpty();
      jSONObject3.toString();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "h#i\\w/";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "h#iw/");
      HashMap<PipedWriter, Short> hashMap0 = new HashMap<PipedWriter, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getNumber("h#iw/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("0", 0.0F);
      jSONObject1.increment("Null pointer");
      JSONObject jSONObject2 = jSONObject0.putOpt("0", "0");
      Class<Normalizer.Form> class0 = Normalizer.Form.class;
      Normalizer.Form normalizer_Form0 = Normalizer.Form.NFKC;
      jSONObject2.optEnum(class0, "8SmPe,$.#5^4MEUQi", normalizer_Form0);
      jSONObject2.put("l:Gz-gbQBE=_uk,C", 0.0F);
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject.numberToString(bigInteger0);
      jSONObject0.put("java.math.BigInteger@0000000033", true);
      try { 
        jSONObject1.getFloat("D1uE|iv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000045] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(3509L);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      bigDecimal0.stripTrailingZeros();
      BigDecimal bigDecimal2 = new BigDecimal((double) 3509L);
      bigDecimal0.negate();
      JSONObject jSONObject0 = new JSONObject(bigDecimal0);
      jSONObject0.toMap();
      JSONObject.getNames(jSONObject0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4{[Ho6?q@+rp}[k");
      JSONPointer.builder();
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.entrySet();
      try { 
        jSONObject0.getJSONObject("_}=o[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = "+fJ}}uC v]g|Z";
      JSONObject jSONObject0 = new JSONObject((Object) "+fJ}}uC v]g|Z");
      String string1 = "6R'd]Ea7";
      try { 
        JSONObject.stringToNumber("7L)DLc]D@5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"L)DLc]D@5\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotNull(jSONObject2);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      assertNotNull(bigDecimal0);
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((short)612, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal1.byteValue());
      assertEquals((short)612, bigDecimal1.shortValue());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      JSONObject.indent(charArrayWriter0, 0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      String string0 = jSONObject2.optString("M=sU{;d)r,tK4Gd");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotNull(string0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      
      JSONObject jSONObject3 = jSONObject0.accumulate("org.json.JSONObject@0000000002", jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject1);
      assertNotNull(jSONObject3);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      
      long long0 = jSONObject3.optLong("M=sU{;d)r,tK4Gd", (long) 0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject1);
      assertEquals(0L, long0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      
      Iterator<String> iterator0 = jSONObject0.keys();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertNotNull(iterator0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      int int0 = jSONObject0.optInt("%", 0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertEquals(0, int0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      MockFile mockFile0 = new MockFile("\f");
      assertNotNull(mockFile0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("org.json.JSONObject@0000000002"));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      assertFalse(linkedList0.contains("org.json.JSONObject@0000000002"));
      assertNotNull(jSONPointer0);
      assertEquals(0, linkedList0.size());
      
      JSONObject jSONObject4 = (JSONObject)jSONObject3.optQuery(jSONPointer0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject4);
      assertSame(jSONObject4, jSONObject1);
      assertSame(jSONObject4, jSONObject0);
      assertSame(jSONObject4, jSONObject3);
      assertSame(jSONObject4, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject4);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject4);
      assertFalse(linkedList0.contains("org.json.JSONObject@0000000002"));
      assertNotNull(jSONObject4);
      assertEquals(0, linkedList0.size());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject4.length());
      assertFalse(jSONObject4.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      
      try { 
        jSONObject1.getLong("org.json.JSONObject@0000000002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000003229] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotNull(jSONObject1);
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      
      String[] stringArray1 = new String[9];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "A JSONObject text must begin with '{'";
      stringArray1[1] = "M`T'^&l'j-g(7";
      stringArray1[2] = "A JSONObject text must begin with '{'";
      stringArray1[3] = "A JSONObject text must begin with '{'";
      stringArray1[4] = "A JSONObject text must begin with '{'";
      stringArray1[5] = "A JSONObject text must begin with '{'";
      stringArray1[6] = "A JSONObject text must begin with '{'";
      stringArray1[7] = "A JSONObject text must begin with '{'";
      stringArray1[8] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray1);
      assertEquals(9, stringArray1.length);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(jSONObject2);
      assertEquals(0, jSONObject2.length());
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      
      Object object0 = JSONObject.wrap("A JSONObject text must begin with '{'");
      assertEquals("A JSONObject text must begin with '{'", object0);
      assertNotNull(object0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "A JSONObject text must begin with '{'");
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertNotNull(charArrayWriter1);
      assertEquals(37, charArrayWriter0.size());
      assertEquals("A JSONObject text must begin with '{'", charArrayWriter0.toString());
      assertEquals("A JSONObject text must begin with '{'", charArrayWriter1.toString());
      assertEquals(37, charArrayWriter1.size());
      
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('.');
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(charArrayWriter2, charArrayWriter1);
      assertSame(charArrayWriter2, charArrayWriter0);
      assertNotNull(charArrayWriter2);
      assertEquals(38, charArrayWriter0.size());
      assertEquals("A JSONObject text must begin with '{'.", charArrayWriter0.toString());
      assertEquals(38, charArrayWriter1.size());
      assertEquals("A JSONObject text must begin with '{'.", charArrayWriter1.toString());
      assertEquals("A JSONObject text must begin with '{'.", charArrayWriter2.toString());
      assertEquals(38, charArrayWriter2.size());
      
      CharArrayWriter charArrayWriter3 = (CharArrayWriter)JSONObject.quote("nH23^4AzizRhq", (Writer) charArrayWriter2);
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter3);
      assertSame(charArrayWriter1, charArrayWriter3);
      assertSame(charArrayWriter1, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(charArrayWriter2, charArrayWriter1);
      assertSame(charArrayWriter2, charArrayWriter3);
      assertSame(charArrayWriter2, charArrayWriter0);
      assertSame(charArrayWriter3, charArrayWriter1);
      assertSame(charArrayWriter3, charArrayWriter0);
      assertSame(charArrayWriter3, charArrayWriter2);
      assertNotNull(charArrayWriter3);
      assertEquals(53, charArrayWriter0.size());
      assertEquals("A JSONObject text must begin with '{'.\"nH23^4AzizRhq\"", charArrayWriter0.toString());
      assertEquals(53, charArrayWriter1.size());
      assertEquals("A JSONObject text must begin with '{'.\"nH23^4AzizRhq\"", charArrayWriter1.toString());
      assertEquals(53, charArrayWriter2.size());
      assertEquals("A JSONObject text must begin with '{'.\"nH23^4AzizRhq\"", charArrayWriter2.toString());
      assertEquals(53, charArrayWriter3.size());
      assertEquals("A JSONObject text must begin with '{'.\"nH23^4AzizRhq\"", charArrayWriter3.toString());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      String[] stringArray0 = new String[6];
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.SERVER;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      hashMap0.put(authenticator_RequestorType0, locale_Category0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotNull(jSONObject1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      
      Boolean boolean0 = new Boolean("|y~kqLitsma=PW");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Object object0 = JSONObject.wrap(boolean0);
      assertEquals(false, object0);
      assertNotNull(object0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "|y~kqLitsma=PW");
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertNotNull(charArrayWriter1);
      assertEquals("|y~kqLitsma=PW", charArrayWriter0.toString());
      assertEquals(15, charArrayWriter0.size());
      assertEquals("|y~kqLitsma=PW", charArrayWriter1.toString());
      assertEquals(15, charArrayWriter1.size());
      
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('S');
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(charArrayWriter1, charArrayWriter2);
      assertSame(charArrayWriter2, charArrayWriter0);
      assertSame(charArrayWriter2, charArrayWriter1);
      assertNotNull(charArrayWriter2);
      assertEquals("|y~kqLitsma=PWS", charArrayWriter0.toString());
      assertEquals(16, charArrayWriter0.size());
      assertEquals("|y~kqLitsma=PWS", charArrayWriter1.toString());
      assertEquals(16, charArrayWriter1.size());
      assertEquals(16, charArrayWriter2.size());
      assertEquals("|y~kqLitsma=PWS", charArrayWriter2.toString());
      
      // Undeclared exception!
      try { 
        JSONObject.quote((String) null, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      assertNotNull(jSONObject0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      BigInteger bigInteger1 = BigInteger.ONE;
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = JSONObject.valueToString("+fJ}}uC v]g|Z");
      assertNotNull(string0);
      
      JSONTokener jSONTokener0 = new JSONTokener("java.io.StringWriter@0000000002");
      assertNotNull(jSONTokener0);
      assertFalse(jSONTokener0.end());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "+fJ}}uC v]g|Z";
      objectArray0[1] = (Object) "RuZNm";
      PrintWriter printWriter0 = mockPrintWriter0.printf("~1", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(2, objectArray0.length);
      assertNotNull(printWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotNull(mockPrintWriter1);
      
      String[] stringArray0 = JSONObject.getNames((Object) "~1");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      Short short0 = new Short((short) (-1596));
      assertEquals((short) (-1596), (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = JSONObject.isDecimalNotation("^1&+");
      assertFalse(boolean0);
      
      boolean boolean1 = jSONObject0.optBoolean("\b", false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.putOpt("\b", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("toString", (-1.0F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      JSONObject jSONObject2 = jSONObject0.increment("] is not a JSONObject.");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotNull(jSONObject2);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      
      JSONObject jSONObject3 = jSONObject2.putOpt("in", "in");
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject3);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertNotNull(jSONObject3);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(3, jSONObject0.length());
      assertEquals(3, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(3, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      assertNotNull(bufferedInputStream0);
      
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, 407);
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertNotNull(bufferedInputStream1);
      
      bufferedInputStream1.close();
      assertNotSame(bufferedInputStream0, bufferedInputStream1);
      assertNotSame(bufferedInputStream1, bufferedInputStream0);
      assertFalse(bufferedInputStream0.equals((Object)bufferedInputStream1));
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      
      JSONTokener jSONTokener0 = new JSONTokener(bufferedInputStream1);
      assertFalse(bufferedInputStream0.equals((Object)bufferedInputStream1));
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertNotNull(jSONTokener0);
      assertFalse(jSONTokener0.end());
      
      HashMap<BufferedWriter, BigInteger> hashMap0 = new HashMap<BufferedWriter, BigInteger>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap hashMap1 = (HashMap)hashMap0.clone();
      assertNotNull(hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      String string0 = jSONObject3.toString();
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject3);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertNotNull(string0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(3, jSONObject0.length());
      assertEquals(3, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(3, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      
      long long0 = jSONObject1.optLong("toString", 1125L);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertEquals((-1L), long0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(3, jSONObject1.length());
      
      String string1 = jSONObject1.toString();
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(3, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      
      JSONArray jSONArray1 = jSONObject0.names();
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertNotNull(jSONArray1);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      
      String string0 = "M=sU{;d)r,tK4Gd";
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertNotNull(jSONObject1);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      
      String string1 = "] is not a boolean.";
      boolean boolean0 = JSONObject.isDecimalNotation("] is not a boolean.");
      assertTrue(boolean0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      int int0 = (-203);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (-203));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      boolean boolean0 = bufferedInputStream0.markSupported();
      assertTrue(boolean0);
      assertEquals(0, pipedInputStream0.available());
      
      String string0 = jSONObject0.toString();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      JSONObject jSONObject2 = jSONObject0.accumulate("e^KT\\", "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject2);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      
      Number number0 = jSONObject0.optNumber("e^KT\\", (Number) bigInteger0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigInteger0, number0);
      assertSame(number0, bigInteger0);
      assertEquals(1, stringArray0.length);
      assertNotNull(number0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, number0.byteValue());
      assertEquals((short)0, number0.shortValue());
      
      String string1 = "-0";
      JSONObject jSONObject3 = new JSONObject(1427);
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertNotNull(jSONObject3);
      assertEquals(0, jSONObject3.length());
      assertTrue(jSONObject3.isEmpty());
      
      try { 
        jSONObject3.getLong("java.io.StringWriter@0000000008");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000017] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("?|%AMK_u<|q]<e3?W4");
      assertTrue(boolean0);
      
      try { 
        JSONObject.stringToNumber(".");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [.] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HashMap<Character, StringWriter> hashMap0 = new HashMap<Character, StringWriter>(102);
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap1 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      hashMap1.put(authenticator_RequestorType0, locale_Category0);
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      
      Short short0 = new Short((short) (-1301));
      assertEquals((short) (-1301), (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = JSONObject.isDecimalNotation("get");
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("3!3kCC2H;Vb3`^&&[");
      assertNotNull(stringReader0);
      
      Object object0 = JSONObject.wrap(locale_Category0);
      assertSame(locale_Category0, object0);
      assertSame(object0, locale_Category0);
      assertEquals(Locale.Category.FORMAT, object0);
      
      Byte byte0 = new Byte((byte)65);
      assertEquals((byte)65, (byte)byte0);
      assertNotNull(byte0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("tRE/L", short0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      hashMap0.put(authenticator_RequestorType0, locale_Category0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "].";
      Short short0 = new Short((short)15);
      assertEquals((short)15, (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = JSONObject.isDecimalNotation("UUs^");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("[");
      assertNotNull(stringReader0);
      
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(hashMap0);
      assertNotNull(jSONObject0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("kDaV?z45z:A");
      assertNotNull(jSONTokener0);
      assertFalse(jSONTokener0.end());
      
      Object object0 = JSONObject.stringToValue("Nesting error.");
      assertEquals("Nesting error.", object0);
      assertNotNull(object0);
      
      String string0 = JSONObject.valueToString("Nesting error.");
      assertFalse(string0.equals((Object)object0));
      assertNotNull(string0);
      
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Boolean boolean0 = hashMap0.put(double0, (Boolean) null);
      assertNull(boolean0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      try { 
        jSONObject0.getBigDecimal("kDaV?z45z:A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      assertNotNull(jSONObject0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      double double0 = jSONObject0.optDouble("m:[", (-1.0));
      assertEquals((-1.0), double0, 0.01);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      String string0 = JSONObject.doubleToString((-1.0));
      assertEquals("-1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = JSONObject.valueToString("+fJ}}uC v]g|Z");
      assertNotNull(string0);
      
      JSONObject.testValidity("java.io.StringWriter@0000000002");
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      JSONObject jSONObject0 = new JSONObject(locale0);
      assertNotNull(jSONObject0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(14, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      double double0 = jSONObject0.optDouble("j$");
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(14, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      String[] stringArray0 = new String[6];
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.SERVER;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      hashMap0.put(authenticator_RequestorType0, locale_Category0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotNull(jSONObject1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      
      Short short0 = new Short((short)15);
      assertEquals((short)15, (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = JSONObject.isDecimalNotation("[");
      assertFalse(boolean0);
      
      String string0 = "tnRE/L";
      try { 
        jSONObject1.get("tnRE/L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      assertNotNull(jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("0", bigInteger0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      
      Object object0 = JSONObject.stringToValue("0");
      assertEquals(0, object0);
      assertNotNull(object0);
      
      BigInteger bigInteger2 = BigInteger.ZERO;
      assertSame(bigInteger2, bigInteger1);
      assertSame(bigInteger2, bigInteger0);
      assertNotNull(bigInteger2);
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      
      Object object1 = JSONObject.stringToValue("0000");
      assertFalse(object1.equals((Object)string0));
      assertEquals("0000", object1);
      assertNotNull(object1);
      
      try { 
        jSONObject0.getJSONArray(">rbms<+09F?k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HashMap<Boolean, StandardLocation> hashMap0 = new HashMap<Boolean, StandardLocation>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("i\"Iim", (Object) "i\"Iim");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      String string0 = JSONObject.doubleToString(0.5789281291023823);
      assertEquals("0.5789281291023823", string0);
      assertNotNull(string0);
      
      try { 
        jSONObject0.increment("i\"Iim");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000005].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(10);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = JSONObject.wrap(float0);
      assertEquals(0.0F, object0);
      assertNotNull(object0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      Object object1 = JSONObject.stringToValue(".0000");
      assertEquals(".0000", object1);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HashMap<Boolean, StandardLocation> hashMap0 = new HashMap<Boolean, StandardLocation>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("i\"Iim", (Object) "i\"Iim");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      Byte byte0 = new Byte((byte)58);
      assertEquals((byte)58, (byte)byte0);
      assertNotNull(byte0);
      
      Number number0 = jSONObject0.optNumber("i\"Iim", (Number) byte0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals((byte)58, number0);
      assertNotNull(number0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString((byte)58);
      assertEquals("58", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(10);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Object object0 = jSONObject0.opt("\t");
      assertNull(object0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object1 = JSONObject.wrap(float0);
      assertEquals(0.0F, object1);
      assertNotNull(object1);
      
      boolean boolean0 = JSONObject.isDecimalNotation("\t");
      assertFalse(boolean0);
      
      JSONObject jSONObject1 = jSONObject0.increment("tri");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      JSONObject jSONObject2 = jSONObject0.accumulate("\t", "\t");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotNull(jSONObject2);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      
      Number number0 = jSONObject0.optNumber("tri", (Number) float0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, number0);
      assertNotNull(number0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      
      try { 
        jSONObject1.getLong("-0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000016] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "+fJ}}uC v]g|Z");
      assertNotNull(jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>(111, 1.0F);
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(sequenceInputStream0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotNull(jSONObject1);
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      
      JSONObject jSONObject2 = jSONObject0.putOnce("6R'd]Ea7", hashMap0);
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertNotNull(jSONObject2);
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(3, jSONObject2.length());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 111);
      assertNotNull(bufferedInputStream0);
      
      boolean boolean0 = bufferedInputStream0.markSupported();
      assertTrue(boolean0);
      
      String string0 = jSONObject2.toString();
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertNotNull(string0);
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(3, jSONObject2.length());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = bigInteger0.negate();
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      
      float float0 = bigInteger1.floatValue();
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      
      JSONObject jSONObject3 = new JSONObject("6R'd]Ea7", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertNotNull(jSONObject3);
      assertEquals(0, jSONObject3.length());
      assertTrue(jSONObject3.isEmpty());
      
      BigInteger bigInteger2 = jSONObject3.optBigInteger("java.io.StringWriter@0000000034", bigInteger0);
      assertNotSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger2);
      assertNotSame(jSONObject3, jSONObject1);
      assertNotSame(jSONObject3, jSONObject2);
      assertNotSame(jSONObject3, jSONObject0);
      assertNotSame(bigInteger2, bigInteger1);
      assertSame(bigInteger2, bigInteger0);
      assertEquals(0, stringArray0.length);
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertTrue(bigInteger2.equals((Object)bigInteger1));
      assertNotNull(bigInteger2);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(0, jSONObject3.length());
      assertTrue(jSONObject3.isEmpty());
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      
      BigInteger bigInteger3 = BigInteger.ZERO;
      assertSame(bigInteger3, bigInteger0);
      assertSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger1);
      assertTrue(bigInteger3.equals((Object)bigInteger1));
      assertNotNull(bigInteger3);
      assertEquals((byte)0, bigInteger3.byteValue());
      assertEquals((short)0, bigInteger3.shortValue());
      
      Object object0 = JSONObject.stringToValue("m9:sj#j/3KtY1");
      assertFalse(object0.equals((Object)string0));
      assertEquals("m9:sj#j/3KtY1", object0);
      assertNotNull(object0);
      
      Object object1 = jSONObject0.opt("cYxxL0");
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject3);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertNull(object1);
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      boolean boolean1 = jSONObject2.isEmpty();
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject3);
      assertNotSame(jSONObject2, jSONObject3);
      assertSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertFalse(boolean1 == boolean0);
      assertFalse(jSONObject2.equals((Object)jSONObject3));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(boolean1);
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(3, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      Class<StandardProtocolFamily> class0 = StandardProtocolFamily.class;
      jSONObject0.optEnum(class0, "SS!s?V}A5YtwicAd#}u");
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotNull(jSONObject2);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      assertNotNull(bigDecimal0);
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((short)612, bigDecimal1.shortValue());
      assertEquals((byte)100, bigDecimal1.byteValue());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      JSONObject.indent(charArrayWriter0, 0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      String string0 = jSONObject2.optString("M=sU{;d)r,tK4Gd");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotNull(string0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      
      JSONObject jSONObject3 = jSONObject0.accumulate("org.json.JSONObject@0000000002", jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject1);
      assertNotNull(jSONObject3);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      
      long long0 = jSONObject3.optLong("M=sU{;d)r,tK4Gd", (long) 0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject1);
      assertEquals(0L, long0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      
      Iterator<String> iterator0 = jSONObject0.keys();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertNotNull(iterator0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      int int0 = jSONObject0.optInt("%", 0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertEquals(0, int0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      MockFile mockFile0 = new MockFile("index %d is out of bounds - the array has %d elements");
      assertNotNull(mockFile0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("M=sU{;d)r,tK4Gd"));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      assertFalse(linkedList0.contains("M=sU{;d)r,tK4Gd"));
      assertNotNull(jSONPointer0);
      assertEquals(0, linkedList0.size());
      
      JSONObject jSONObject4 = (JSONObject)jSONObject3.optQuery(jSONPointer0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject4, jSONObject1);
      assertSame(jSONObject4, jSONObject2);
      assertSame(jSONObject4, jSONObject0);
      assertSame(jSONObject4, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject4);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject4);
      assertSame(jSONObject3, jSONObject1);
      assertFalse(linkedList0.contains("M=sU{;d)r,tK4Gd"));
      assertNotNull(jSONObject4);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(jSONObject4.isEmpty());
      assertEquals(2, jSONObject4.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      
      JSONObject jSONObject5 = jSONObject0.accumulate("getgetScript", jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject5);
      assertSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject5);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject4);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject5, jSONObject4);
      assertSame(jSONObject5, jSONObject2);
      assertSame(jSONObject5, jSONObject0);
      assertSame(jSONObject5, jSONObject1);
      assertSame(jSONObject5, jSONObject3);
      assertSame(jSONObject2, jSONObject3);
      assertSame(jSONObject2, jSONObject5);
      assertSame(jSONObject2, jSONObject4);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotNull(jSONObject5);
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(3, jSONObject1.length());
      assertFalse(jSONObject5.isEmpty());
      assertEquals(3, jSONObject5.length());
      assertEquals(3, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      String[] stringArray0 = new String[16];
      stringArray0[0] = ">>iTD<s[[R)G";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(16, stringArray0.length);
      assertNotNull(jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.putOnce(">>iTD<s[[R)G", ">>iTD<s[[R)G");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(16, stringArray0.length);
      assertNotNull(jSONObject1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      String string0 = jSONObject0.toString();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(16, stringArray0.length);
      assertNotNull(string0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      JSONObject jSONObject2 = new JSONObject((Object) "isintern");
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertNotNull(jSONObject2);
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      
      try { 
        jSONObject0.getJSONArray(">>iTD<s[[R)G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000020] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      boolean boolean0 = bufferedInputStream0.markSupported();
      assertTrue(boolean0);
      assertEquals(0, pipedInputStream0.available());
      
      String string0 = jSONObject0.toString();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("isintern", bigInteger0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(1, stringArray0.length);
      assertNotNull(bigInteger1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      
      Object object0 = JSONObject.stringToValue("istoLowerCase");
      assertFalse(object0.equals((Object)string0));
      assertEquals("istoLowerCase", object0);
      assertNotNull(object0);
      
      BigInteger bigInteger2 = BigInteger.ZERO;
      assertSame(bigInteger2, bigInteger0);
      assertSame(bigInteger2, bigInteger1);
      assertNotNull(bigInteger2);
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      
      Object object1 = JSONObject.stringToValue("isintern");
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)string0));
      assertEquals("isintern", object1);
      assertNotNull(object1);
      
      try { 
        jSONObject1.getJSONArray("A JSONObject text must begin with '{'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      assertEquals(RoundingMode.UP, roundingMode0);
      
      JSONObject jSONObject0 = new JSONObject(roundingMode0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains(string0));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      String string1 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1314);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, byteArrayOutputStream0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 1314);
      assertNotNull(bufferedInputStream0);
      
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertNotNull(bufferedInputStream1);
      
      boolean boolean0 = bufferedInputStream1.markSupported();
      assertNotSame(bufferedInputStream0, bufferedInputStream1);
      assertNotSame(bufferedInputStream1, bufferedInputStream0);
      assertFalse(bufferedInputStream0.equals((Object)bufferedInputStream1));
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertTrue(boolean0);
      
      String string2 = jSONObject0.toString();
      assertSame(jSONObject0, jSONObject1);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      String string3 = jSONObject1.toString(159);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      Writer writer0 = JSONObject.quote("", (Writer) mockPrintWriter0);
      assertSame(writer0, mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
      assertNotNull(writer0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.json.JSONObject@0000000001");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JSONObject[");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(writer0);
      assertFalse(mockPrintWriter1.equals((Object)writer0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotNull(mockPrintWriter1);
      
      URI uRI0 = MockURI.aFTPURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("", uRI0.getRawPath());
      assertEquals("ftp://foo.bar", uRI0.toString());
      assertEquals("ftp", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      String[] stringArray0 = new String[2];
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.SERVER;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      hashMap0.put(authenticator_RequestorType0, locale_Category0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotNull(jSONObject1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      
      Short short0 = new Short((short)15);
      assertEquals((short)15, (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = JSONObject.isDecimalNotation("[");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("tRE/L");
      assertNotNull(stringReader0);
      
      Object object0 = JSONObject.wrap(stringReader0);
      assertNotNull(object0);
      
      boolean boolean1 = jSONObject1.optBoolean("getintValue", false);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      assertEquals(2, stringArray0.length);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      
      Byte byte0 = new Byte((byte)65);
      assertEquals((byte)65, (byte)byte0);
      assertNotNull(byte0);
      
      JSONObject jSONObject2 = jSONObject1.putOpt("java.io.StringReader@0000000005", byte0);
      assertNotSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertEquals(2, stringArray0.length);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertNotNull(jSONObject2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      boolean boolean0 = bufferedInputStream0.markSupported();
      assertTrue(boolean0);
      assertEquals(0, pipedInputStream0.available());
      
      String string0 = jSONObject0.toString();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      int int0 = (-1693);
      BigDecimal bigDecimal0 = new BigDecimal((-1693));
      assertNotNull(bigDecimal0);
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1693), bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(1, stringArray0.length);
      assertNotNull(bigDecimal1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1693), bigDecimal0.shortValue());
      assertEquals((short) (-1693), bigDecimal1.shortValue());
      assertEquals((byte)99, bigDecimal1.byteValue());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      JSONObject.indent(charArrayWriter0, 287);
      assertEquals("                                                                                                                                                                                                                                                                                               ", charArrayWriter0.toString());
      assertEquals(287, charArrayWriter0.size());
      
      String string1 = jSONObject1.optString("");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      String string2 = "k$cUCK0Q7kAu<e_3Z'U";
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(bufferedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      assertEquals(RoundingMode.UP, roundingMode0);
      
      JSONObject jSONObject0 = new JSONObject(roundingMode0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      HashMap<CardTerminals.State, GroupLayout.Alignment> hashMap0 = new HashMap<CardTerminals.State, GroupLayout.Alignment>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject1 = jSONObject0.put("2qw=8p)<Nj#%#G$M", (Map<?, ?>) hashMap0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      boolean boolean0 = JSONObject.isDecimalNotation("toL");
      assertFalse(boolean0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.json.JSONObject@0000000001");
      assertNotNull(mockPrintStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      assertNotNull(dataOutputStream0);
      
      JSONObject.testValidity(jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      
      BigDecimal bigDecimal0 = new BigDecimal(612);
      assertNotNull(bigDecimal0);
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("2qw=8p)<Nj#%#G$M", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((short)612, bigDecimal1.shortValue());
      assertEquals((byte)100, bigDecimal1.byteValue());
      
      int int0 = 0;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      JSONObject.indent(charArrayWriter0, 34);
      assertEquals("                                  ", charArrayWriter0.toString());
      assertEquals(34, charArrayWriter0.size());
      
      String string1 = jSONObject0.optString("toL");
      assertSame(jSONObject0, jSONObject1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("has");
      assertNotNull(mockPrintWriter0);
      
      JSONObject jSONObject2 = jSONObject1.accumulate("2qw=8p)<Nj#%#G$M", mockPrintWriter0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertNotNull(jSONObject2);
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      long long0 = jSONObject1.optLong("toL", (long) 34);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertEquals(34L, long0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      Iterator<String> iterator0 = jSONObject1.keys();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertNotNull(iterator0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      Locale locale0 = new Locale("w");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("w", locale0.toString());
      assertEquals("w", locale0.getLanguage());
      
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject("ha", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name ha, locale w
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, 1712);
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertNotNull(bufferedInputStream1);
      assertEquals(0, pipedInputStream0.available());
      
      String string0 = jSONObject1.toString();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(string0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      int int0 = bigInteger0.signum();
      assertEquals(1, int0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      float float0 = bigInteger0.floatValue();
      assertEquals(1.0F, float0, 0.01F);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      JSONObject jSONObject2 = jSONObject1.accumulate("A JSONObject text must begin with '{'", jSONObject0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotNull(jSONObject2);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      assertNotNull(pipedInputStream1);
      assertEquals(0, pipedInputStream1.available());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1314);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      Integer integer0 = new Integer(128);
      assertEquals(128, (int)integer0);
      assertNotNull(integer0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("\n", integer0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 56);
      assertNotNull(bufferedInputStream0);
      
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertNotNull(bufferedInputStream1);
      
      boolean boolean0 = bufferedInputStream0.markSupported();
      assertNotSame(bufferedInputStream0, bufferedInputStream1);
      assertFalse(bufferedInputStream0.equals((Object)bufferedInputStream1));
      assertTrue(boolean0);
      
      String string0 = jSONObject1.toString();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(string0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 0 line 2]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-715.716861));
      assertEquals("-715.716861", string0);
      assertNotNull(string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "-715.716861");
      assertNotNull(jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      try { 
        jSONObject0.getFloat("-715.716861");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      assertNotNull(jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      try { 
        jSONObject0.getFloat("H_8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertNotNull(jSONObject2);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      assertNotNull(bigDecimal0);
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((short)612, bigDecimal1.shortValue());
      assertEquals((byte)100, bigDecimal1.byteValue());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      JSONObject.indent(charArrayWriter0, 0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "M=sU{;d)r,tK4Gd";
      stringArray0[1] = "M=sU{;d)r,tK4Gd";
      JSONObject jSONObject3 = jSONObject0.put("\n", true);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertNotNull(jSONObject3);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      
      stringArray0[2] = "M=sU{;d)r,tK4Gd";
      stringArray0[3] = "M=sU{;d)r,tK4Gd";
      stringArray0[4] = "M=sU{;d)r,tK4Gd";
      stringArray0[5] = "M=sU{;d)r,tK4Gd";
      stringArray0[6] = "M=sU{;d)r,tK4Gd";
      stringArray0[7] = "M=sU{;d)r,tK4Gd";
      stringArray0[8] = "M=sU{;d)r,tK4Gd";
      JSONObject jSONObject4 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(9, stringArray0.length);
      assertFalse(jSONObject4.equals((Object)jSONObject2));
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertFalse(jSONObject4.equals((Object)jSONObject3));
      assertNotNull(jSONObject4);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject4.isEmpty());
      assertEquals(1, jSONObject4.length());
      
      boolean boolean1 = jSONObject4.has("M=sU{;d)r,tK4Gd");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertNotSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject4, jSONObject2);
      assertNotSame(jSONObject4, jSONObject0);
      assertNotSame(jSONObject4, jSONObject1);
      assertNotSame(jSONObject4, jSONObject3);
      assertEquals(9, stringArray0.length);
      assertFalse(jSONObject0.equals((Object)jSONObject4));
      assertFalse(jSONObject4.equals((Object)jSONObject2));
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertFalse(jSONObject4.equals((Object)jSONObject3));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject4.isEmpty());
      assertEquals(1, jSONObject4.length());
      
      Number number0 = jSONObject0.optNumber("len", (Number) bigDecimal1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertNotSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject3);
      assertNotSame(jSONObject1, jSONObject4);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject3);
      assertNotSame(jSONObject2, jSONObject4);
      assertSame(bigDecimal0, number0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(number0, bigDecimal1);
      assertSame(number0, bigDecimal0);
      assertSame(bigDecimal1, number0);
      assertSame(bigDecimal1, bigDecimal0);
      assertFalse(jSONObject0.equals((Object)jSONObject4));
      assertFalse(jSONObject1.equals((Object)jSONObject4));
      assertFalse(jSONObject2.equals((Object)jSONObject4));
      assertNotNull(number0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((byte)100, number0.byteValue());
      assertEquals((short)612, number0.shortValue());
      assertEquals((short)612, bigDecimal1.shortValue());
      assertEquals((byte)100, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A JSONArray text must start with '['";
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.SERVER;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      hashMap0.put(authenticator_RequestorType0, locale_Category0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotNull(jSONObject1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      
      Object object0 = JSONObject.stringToValue("get");
      assertEquals("get", object0);
      assertNotNull(object0);
      
      Short short0 = new Short((short)15);
      assertEquals((short)15, (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = JSONObject.isDecimalNotation("");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("tRE/L");
      assertNotNull(stringReader0);
      
      Object object1 = JSONObject.wrap(stringReader0);
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.append("^1&+", "fN@/rnEuS");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      Set<String> set0 = jSONObject0.keySet();
      assertSame(jSONObject0, jSONObject1);
      assertTrue(set0.contains("^1&+"));
      assertFalse(set0.contains("fN@/rnEuS"));
      assertNotNull(set0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("Unable to preserve stream position", bigInteger0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Random.setNextRandom(2193);
      Float float0 = new Float((float) 2193);
      assertEquals(2193.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      JSONObject jSONObject0 = new JSONObject(float0);
      assertNotNull(jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.append("getUnicodeLocaleKeys", "getUnicodeLocaleKeys");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(3, jSONObject1.length());
      
      File file0 = MockFile.createTempFile("getUnicodeLocaleKeys", "H}bG~O");
      assertNotNull(file0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/getUnicodeLocaleKeys0H}bG~O", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("getUnicodeLocaleKeys0H}bG~O", file0.getName());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      assertNotNull(mockFileWriter0);
      
      Writer writer0 = JSONObject.writeValue(mockFileWriter0, jSONObject0, (-2385), 2193);
      assertSame(jSONObject0, jSONObject1);
      assertSame(mockFileWriter0, writer0);
      assertSame(writer0, mockFileWriter0);
      assertNotNull(writer0);
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/getUnicodeLocaleKeys0H}bG~O", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("getUnicodeLocaleKeys0H}bG~O", file0.getName());
      
      float float1 = jSONObject0.optFloat("ZXP?oL:t':T");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(Float.NaN, float1, 0.01F);
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      Number number0 = jSONObject0.optNumber("ZXP?oL:t':T", (Number) float0);
      assertSame(jSONObject0, jSONObject1);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertFalse(number0.equals((Object)float1));
      assertEquals(2193.0F, number0);
      assertNotNull(number0);
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      String string0 = "JSONArray[";
      try { 
        jSONObject1.get("] not a string.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000018] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HashMap<Boolean, StandardLocation> hashMap0 = new HashMap<Boolean, StandardLocation>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("i\"=im", (Object) "i\"=im");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      JSONObject jSONObject2 = new JSONObject();
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertNotNull(jSONObject2);
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, jSONObject2.length());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      Writer writer0 = jSONObject1.write((Writer) pipedWriter0, 3350, 3350);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject1, jSONObject2);
      assertSame(pipedWriter0, writer0);
      assertSame(writer0, pipedWriter0);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertNotNull(writer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      boolean boolean0 = bufferedInputStream0.markSupported();
      assertTrue(boolean0);
      assertEquals(0, pipedInputStream0.available());
      
      String string0 = jSONObject0.toString();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = bigInteger0.negate();
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      
      float float0 = bigInteger0.floatValue();
      assertNotSame(bigInteger0, bigInteger1);
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger2 = jSONObject0.optBigInteger("A JSONObject text must begin with '{'", bigInteger0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertEquals(1, stringArray0.length);
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertTrue(bigInteger2.equals((Object)bigInteger1));
      assertNotNull(bigInteger2);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      
      BigInteger bigInteger3 = BigInteger.ZERO;
      assertSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      assertSame(bigInteger3, bigInteger2);
      assertTrue(bigInteger3.equals((Object)bigInteger1));
      assertNotNull(bigInteger3);
      assertEquals((short)0, bigInteger3.shortValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      
      Object object0 = JSONObject.stringToValue("A JSONObject text must begin with '{'");
      assertFalse(object0.equals((Object)string0));
      assertEquals("A JSONObject text must begin with '{'", object0);
      assertNotNull(object0);
      
      Object object1 = jSONObject0.opt("A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, stringArray0.length);
      assertTrue(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)string0));
      assertEquals("A JSONObject text must begin with '{'", object1);
      assertNotNull(object1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      boolean boolean1 = jSONObject0.isEmpty();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      String[] stringArray0 = new String[2];
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.SERVER;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      hashMap0.put(authenticator_RequestorType0, locale_Category0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotNull(jSONObject1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      
      Object object0 = JSONObject.stringToValue("get");
      assertEquals("get", object0);
      assertNotNull(object0);
      
      Short short0 = new Short((short)15);
      assertEquals((short)15, (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = JSONObject.isDecimalNotation("");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("tRE/L");
      assertNotNull(stringReader0);
      
      Object object1 = JSONObject.wrap(stringReader0);
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean1 = JSONObject.isDecimalNotation("tRE/L");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = "Q~";
      String string1 = "cm]:S!+tx@c:P(";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "r6N_";
      JSONObject jSONObject0 = new JSONObject("r6N_", stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNull(stringArray1);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.putOnce("K[xma:y,&u3;Af", "K[xma:y,&u3;Af");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Hg 5w3s]Bi|\"5?(u\"");
      assertNotNull(jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      
      try { 
        jSONObject0.getBigInteger((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject.testValidity((Object) null);
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      JSONObject jSONObject0 = new JSONObject(locale0);
      assertNotNull(jSONObject0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(14, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.increment("+fJ}}uC v]g|Z");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(15, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(15, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      Class<Normalizer.Form> class0 = Normalizer.Form.class;
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotNull(jSONObject1);
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      
      JSONObject jSONObject2 = new JSONObject(class0);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertNotNull(jSONObject2);
      assertFalse(jSONObject2.isEmpty());
      assertEquals(35, jSONObject2.length());
      
      JSONObject jSONObject3 = jSONObject0.put("] is not a JSONObject.", (Object) null);
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject3, jSONObject1);
      assertNotSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject0);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertNotNull(jSONObject3);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONObject3.length());
      assertTrue(jSONObject3.isEmpty());
      
      try { 
        jSONObject2.getJSONObject("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000103] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      boolean boolean0 = new Boolean("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      assertNotNull(bigDecimal0);
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((byte)100, bigDecimal1.byteValue());
      assertEquals((short)612, bigDecimal1.shortValue());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(612);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      JSONObject.indent(charArrayWriter0, 612);
      assertEqualscharArrayWriter0.toString());
      assertEquals(612, charArrayWriter0.size());
      
      String string0 = jSONObject1.optString("M=sU{;d)r,tK4Gd");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      
      JSONObject jSONObject2 = jSONObject0.accumulate("", jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotNull(jSONObject2);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      
      Object object0 = jSONObject2.remove("trim");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNull(object0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      
      Iterator<String> iterator0 = jSONObject0.keys();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotNull(iterator0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      JSONObject jSONObject3 = (JSONObject)jSONObject1.opt("");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject1);
      assertNotNull(jSONObject3);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(1, jSONObject3.length());
      
      JSONObject jSONObject4 = jSONObject0.put("", 44);
      assertSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject4, jSONObject0);
      assertSame(jSONObject4, jSONObject3);
      assertSame(jSONObject4, jSONObject2);
      assertSame(jSONObject4, jSONObject1);
      assertNotNull(jSONObject4);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject4.isEmpty());
      assertEquals(1, jSONObject4.length());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("M=sn{;d)S,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      long long0 = jSONObject1.optLong("M=sn{;d)S,tK4Gd");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0L, long0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sn{;d)S,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sn{;d)S,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotNull(jSONObject2);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      
      JSONObject.testValidity("M=sn{;d)S,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      assertNotNull(bigDecimal0);
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = jSONObject2.optBigDecimal("M=sn{;d)S,tK4Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((byte)100, bigDecimal1.byteValue());
      assertEquals((short)612, bigDecimal1.shortValue());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      JSONObject.indent(charArrayWriter0, 0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      BigDecimal bigDecimal2 = (BigDecimal)JSONObject.wrap(bigDecimal1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal1, bigDecimal2);
      assertSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal0);
      assertNotNull(bigDecimal2);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((byte)100, bigDecimal1.byteValue());
      assertEquals((short)612, bigDecimal1.shortValue());
      assertEquals((byte)100, bigDecimal2.byteValue());
      assertEquals((short)612, bigDecimal2.shortValue());
      
      boolean boolean1 = JSONObject.isDecimalNotation("M=sn{;d)S,tK4Gd");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      HashMap<Boolean, StandardLocation> hashMap0 = new HashMap<Boolean, StandardLocation>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("i\"Iim", (Object) "i\"Iim");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      try { 
        jSONObject1.getJSONObject("i\"Iim");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "+fJ}}uC v]g|Z");
      assertNotNull(jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>(111, 1.0F);
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      hashMap0.remove((Object) "6R'd]Ea7");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "+fJ}}uC v]g|Z";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotNull(jSONObject1);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      
      String string0 = jSONObject1.toString(1216);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      assertEquals(1, stringArray0.length);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotNull(string0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      Writer writer0 = JSONObject.quote("+fJ}}uC v]g|Z", (Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
      assertSame(writer0, mockPrintWriter0);
      assertNotNull(writer0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.io.StringWriter@0000000019");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Nd$H4oj!*K");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(writer0);
      assertFalse(mockPrintWriter1.equals((Object)writer0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotNull(mockPrintWriter1);
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter1);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(writer0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)writer0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotNull(bufferedWriter0);
      
      JSONObject.indent(bufferedWriter0, 35);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter0, writer0);
      assertNotSame(writer0, mockPrintWriter1);
      assertSame(writer0, mockPrintWriter0);
      assertNotSame(mockPrintWriter1, writer0);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(writer0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)writer0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      try { 
        jSONObject1.getJSONObject("Nd$H4oj!*K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000020] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A JSONArray text must start with '['";
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.SERVER;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      hashMap0.put(authenticator_RequestorType0, locale_Category0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotNull(jSONObject1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      
      Object object0 = JSONObject.stringToValue("get");
      assertEquals("get", object0);
      assertNotNull(object0);
      
      Short short0 = new Short((short)15);
      assertEquals((short)15, (short)short0);
      assertNotNull(short0);
      
      Number number0 = jSONObject1.optNumber("Misplaced key.", (Number) short0);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      assertEquals(2, stringArray0.length);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals((short)15, number0);
      assertNotNull(number0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      String[] stringArray0 = new String[1];
      String string0 = "Value out of sequence.";
      stringArray0[0] = "Value out of sequence.";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      JSONObject jSONObject0 = new JSONObject(float0);
      assertNotNull(jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "OIdZ;$'i[9&7^";
      stringArray0[1] = "getshortValueExact";
      stringArray0[2] = "true";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      
      JSONObject jSONObject2 = jSONObject1.put("keys", 1486.72F);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertEquals(3, stringArray0.length);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertNotNull(jSONObject2);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
      
      Class<Resource.AuthenticationType> class0 = Resource.AuthenticationType.class;
      try { 
        jSONObject2.getEnum(class0, "getshortValueExact");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000012] is not an enum of type java.io.StringWriter@0000000013.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      Object object0 = JSONObject.stringToValue("q'^5OyMjj");
      assertEquals("q'^5OyMjj", object0);
      assertNotNull(object0);
      
      BigInteger bigInteger1 = BigInteger.ONE;
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      
      Object object1 = JSONObject.stringToValue("0000");
      assertFalse(object1.equals((Object)object0));
      assertEquals("0000", object1);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      //  // Unstable assertion: assertNotNull(pipedInputStream0);
      //  // Unstable assertion: assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      //  // Unstable assertion: assertNotNull(bufferedInputStream0);
      //  // Unstable assertion: assertEquals(0, pipedInputStream0.available());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      //  // Unstable assertion: assertEquals(1, stringArray0.length);
      //  // Unstable assertion: assertNotNull(jSONObject0);
      //  // Unstable assertion: assertEquals(0, pipedInputStream0.available());
      //  // Unstable assertion: assertTrue(jSONObject0.isEmpty());
      //  // Unstable assertion: assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      //  // Unstable assertion: assertSame(jSONObject0, jSONObject1);
      //  // Unstable assertion: assertSame(jSONObject1, jSONObject0);
      //  // Unstable assertion: assertEquals(1, stringArray0.length);
      //  // Unstable assertion: assertNotNull(jSONObject1);
      //  // Unstable assertion: assertEquals(0, pipedInputStream0.available());
      //  // Unstable assertion: assertFalse(jSONObject0.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONObject0.length());
      //  // Unstable assertion: assertFalse(jSONObject1.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONObject1.length());
      
      boolean boolean0 = bufferedInputStream0.markSupported();
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertEquals(0, pipedInputStream0.available());
      
      String string0 = jSONObject0.toString();
      //  // Unstable assertion: assertSame(jSONObject0, jSONObject1);
      //  // Unstable assertion: assertEquals(1, stringArray0.length);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(0, pipedInputStream0.available());
      //  // Unstable assertion: assertFalse(jSONObject0.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONObject0.length());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      
      float float0 = bigInteger0.floatValue();
      //  // Unstable assertion: assertEquals(0.0F, float0, 0.01F);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("A JSONObject text must begin with '{'", bigInteger0);
      //  // Unstable assertion: assertSame(jSONObject0, jSONObject1);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertEquals(1, stringArray0.length);
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertEquals(0, pipedInputStream0.available());
      //  // Unstable assertion: assertFalse(jSONObject0.isEmpty());
      //  // Unstable assertion: assertEquals(1, jSONObject0.length());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger1.byteValue());
      
      Object object0 = JSONObject.stringToValue("java.io.StringWriter@0000000008");
      //  // Unstable assertion: assertTrue(object0.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(object0);
      
      BigInteger bigInteger2 = BigInteger.ZERO;
      //  // Unstable assertion: assertSame(bigInteger2, bigInteger1);
      //  // Unstable assertion: assertSame(bigInteger2, bigInteger0);
      //  // Unstable assertion: assertNotNull(bigInteger2);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger2.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger2.shortValue());
      
      Object object1 = JSONObject.stringToValue("0000");
      //  // Unstable assertion: assertFalse(object1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(object1.equals((Object)object0));
      //  // Unstable assertion: assertEquals("0000", object1);
      //  // Unstable assertion: assertNotNull(object1);
      
      try { 
        jSONObject0.getJSONArray("tIB'%n# ;");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertNotNull(jSONObject2);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      assertNotNull(bigDecimal0);
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      
      JSONObject jSONObject3 = new JSONObject(jSONObject2);
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertNotNull(jSONObject3);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(1, jSONObject3.length());
      
      JSONObject jSONObject4 = new JSONObject((Map<?, ?>) null);
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertFalse(jSONObject4.equals((Object)jSONObject2));
      assertFalse(jSONObject4.equals((Object)jSONObject3));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertNotNull(jSONObject4);
      assertEquals(0, jSONObject4.length());
      assertTrue(jSONObject4.isEmpty());
      
      try { 
        jSONObject4.getJSONArray("istoList");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotNull(jSONObject2);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      assertNotNull(bigDecimal0);
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((short)612, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((short)612, bigDecimal1.shortValue());
      assertEquals((byte)100, bigDecimal1.byteValue());
      
      JSONObject jSONObject3 = new JSONObject((Map<?, ?>) null);
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertNotNull(jSONObject3);
      assertEquals(0, jSONObject3.length());
      assertTrue(jSONObject3.isEmpty());
      
      JSONObject jSONObject4 = jSONObject3.putOnce("]A", jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject3);
      assertNotSame(jSONObject0, jSONObject4);
      assertNotSame(jSONObject1, jSONObject4);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject2, jSONObject3);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject4);
      assertNotSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject4);
      assertNotSame(jSONObject3, jSONObject1);
      assertNotSame(jSONObject3, jSONObject0);
      assertNotSame(jSONObject4, jSONObject0);
      assertSame(jSONObject4, jSONObject3);
      assertNotSame(jSONObject4, jSONObject2);
      assertNotSame(jSONObject4, jSONObject1);
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertFalse(jSONObject1.equals((Object)jSONObject3));
      assertFalse(jSONObject2.equals((Object)jSONObject3));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertFalse(jSONObject4.equals((Object)jSONObject2));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertNotNull(jSONObject4);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(1, jSONObject4.length());
      assertFalse(jSONObject4.isEmpty());
      
      Byte byte0 = new Byte((byte) (-45));
      assertEquals((byte) (-45), (byte)byte0);
      assertNotNull(byte0);
      
      JSONObject.testValidity(byte0);
      BigDecimal bigDecimal2 = new BigDecimal(8);
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertNotNull(bigDecimal2);
      assertEquals((byte)8, bigDecimal2.byteValue());
      assertEquals((short)8, bigDecimal2.shortValue());
      
      BigDecimal bigDecimal3 = jSONObject0.optBigDecimal("]A", bigDecimal1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject3);
      assertNotSame(jSONObject0, jSONObject4);
      assertNotSame(jSONObject1, jSONObject4);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject2, jSONObject3);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject4);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertSame(bigDecimal1, bigDecimal3);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertSame(bigDecimal3, bigDecimal1);
      assertSame(bigDecimal3, bigDecimal0);
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertFalse(jSONObject0.equals((Object)jSONObject4));
      assertFalse(jSONObject1.equals((Object)jSONObject4));
      assertFalse(jSONObject1.equals((Object)jSONObject3));
      assertFalse(jSONObject2.equals((Object)jSONObject3));
      assertFalse(jSONObject2.equals((Object)jSONObject4));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertNotNull(bigDecimal3);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((short)612, bigDecimal1.shortValue());
      assertEquals((byte)100, bigDecimal1.byteValue());
      assertEquals((byte)100, bigDecimal3.byteValue());
      assertEquals((short)612, bigDecimal3.shortValue());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2939);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("]A", false);
      assertNotNull(mockFileWriter0);
      
      // Undeclared exception!
      JSONObject.indent(mockFileWriter0, 2147483645);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      HashMap<Boolean, StandardLocation> hashMap0 = new HashMap<Boolean, StandardLocation>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertNotNull(jSONObject2);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      assertNotNull(bigDecimal0);
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((short)612, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal1.byteValue());
      assertEquals((short)612, bigDecimal1.shortValue());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      JSONObject.indent(charArrayWriter0, 0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      String string0 = jSONObject2.optString("M=sU{;d)r,tK4Gd");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertNotNull(string0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      
      JSONObject jSONObject3 = jSONObject0.accumulate("org.json.JSONObject@0000000002", jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertNotNull(jSONObject3);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(2, jSONObject3.length());
      
      long long0 = jSONObject3.optLong("M=sU{;d)r,tK4Gd", (long) 0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertEquals(0L, long0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(2, jSONObject3.length());
      
      Iterator<String> iterator0 = jSONObject0.keys();
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(iterator0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      
      int int0 = jSONObject0.optInt("%", 0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, int0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      
      MockFile mockFile0 = new MockFile("index %d is out of bounds - the array has %d elements");
      assertNotNull(mockFile0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains(string0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      assertFalse(linkedList0.contains(string0));
      assertNotNull(jSONPointer0);
      assertEquals(0, linkedList0.size());
      
      JSONObject jSONObject4 = (JSONObject)jSONObject3.optQuery(jSONPointer0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject4, jSONObject3);
      assertSame(jSONObject4, jSONObject2);
      assertSame(jSONObject4, jSONObject0);
      assertSame(jSONObject4, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject4);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject4);
      assertFalse(linkedList0.contains(string0));
      assertNotNull(jSONObject4);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject4.isEmpty());
      assertEquals(2, jSONObject4.length());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(2, jSONObject3.length());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertNotNull(jSONObject2);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      assertNotNull(bigDecimal0);
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((byte)100, bigDecimal1.byteValue());
      assertEquals((short)612, bigDecimal1.shortValue());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      JSONObject.indent(charArrayWriter0, 0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "M=sU{;d)r,tK4Gd";
      stringArray0[1] = "M=sU{;d)r,tK4Gd";
      JSONObject jSONObject3 = jSONObject0.put("\n", true);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertNotNull(jSONObject3);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      
      stringArray0[2] = "M=sU{;d)r,tK4Gd";
      stringArray0[3] = "M=sU{;d)r,tK4Gd";
      stringArray0[4] = "M=sU{;d)r,tK4Gd";
      stringArray0[5] = "M=sU{;d)r,tK4Gd";
      stringArray0[6] = "M=sU{;d)r,tK4Gd";
      stringArray0[7] = "M=sU{;d)r,tK4Gd";
      stringArray0[8] = "M=sU{;d)r,tK4Gd";
      JSONObject jSONObject4 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(9, stringArray0.length);
      assertFalse(jSONObject4.equals((Object)jSONObject3));
      assertFalse(jSONObject4.equals((Object)jSONObject2));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertNotNull(jSONObject4);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(1, jSONObject4.length());
      assertFalse(jSONObject4.isEmpty());
      
      boolean boolean1 = jSONObject4.has("M=sU{;d)r,tK4Gd");
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertNotSame(jSONObject4, jSONObject3);
      assertNotSame(jSONObject4, jSONObject2);
      assertNotSame(jSONObject4, jSONObject1);
      assertNotSame(jSONObject4, jSONObject0);
      assertEquals(9, stringArray0.length);
      assertFalse(jSONObject0.equals((Object)jSONObject4));
      assertFalse(jSONObject4.equals((Object)jSONObject3));
      assertFalse(jSONObject4.equals((Object)jSONObject2));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(1, jSONObject4.length());
      assertFalse(jSONObject4.isEmpty());
      
      boolean boolean2 = JSONObject.isDecimalNotation("6uy");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      assertNotNull(jSONObject0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("] is not a boolean.", true);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      
      BigInteger bigInteger1 = BigInteger.ONE;
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A JSONArray text must start with '['";
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.SERVER;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      hashMap0.put(authenticator_RequestorType0, locale_Category0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      stringArray0[1] = "6R'd]Ea7";
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3658);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      JSONObject.indent(charArrayWriter0, (-4613));
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotNull(jSONObject1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      
      JSONObject jSONObject2 = new JSONObject();
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertNotNull(jSONObject2);
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, jSONObject2.length());
      
      boolean boolean0 = jSONObject2.has("A JSONArray text must start with '['");
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(boolean0);
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, jSONObject2.length());
      
      String string0 = JSONObject.quote("6R'd]Ea7");
      assertNotNull(string0);
      
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("java.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      HashMap<Boolean, StandardLocation> hashMap0 = new HashMap<Boolean, StandardLocation>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      String string0 = "M=sU{;d)r,tK4Gd";
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) hashMap0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      try { 
        jSONObject1.putOnce("M=sU{;d)r,tK4Gd", "M=sU{;d)r,tK4Gd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"M=sU{;d)r,tK4Gd\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      String string0 = "krM&Z,PG3";
      try { 
        jSONObject0.get("krM&Z,PG3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      String string0 = "%'";
      boolean boolean0 = JSONObject.isDecimalNotation("%'");
      assertFalse(boolean0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        JSONObject.indent(pipedWriter0, 787);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(612);
      JSONObject.indent(charArrayWriter0, 612);
      jSONObject2.optString("M=sU{;d)r,tK4Gd");
      jSONObject0.accumulate("org.json.JSONObject@0000000002", jSONObject1);
      jSONObject0.keys();
      jSONObject2.opt("org.json.JSONObject@0000000002");
      assertEquals(2, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      try { 
        jSONObject0.getLong("isavailable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      String string0 = "A JSONObject text must begin with '{'";
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      bufferedInputStream0.markSupported();
      jSONObject0.toString();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.floatValue();
      jSONObject0.optBigInteger("A JSONObject text must begin with '{'", bigInteger0);
      jSONObject0.opt("");
      try { 
        jSONObject0.getLong("@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "\"";
      MockFileWriter mockFileWriter0 = new MockFileWriter("\"", true);
      mockFileWriter0.flush();
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(2836.8809F);
      JSONObject jSONObject1 = jSONObject0.putOnce("\"", float0);
      BigDecimal bigDecimal0 = new BigDecimal(612);
      jSONObject1.optBigDecimal("\"", bigDecimal0);
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-1934759703));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1934759703
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      boolean boolean0 = true;
      MockFileWriter mockFileWriter0 = new MockFileWriter("\"", true);
      mockFileWriter0.flush();
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(2836.8809F);
      JSONObject jSONObject1 = jSONObject0.putOnce("\"", float0);
      JSONObject.testValidity(float0);
      BigDecimal bigDecimal0 = new BigDecimal(612);
      jSONObject1.optBigDecimal("\"", bigDecimal0);
      int int0 = 0;
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-1934759703));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1934759703
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      JSONObject jSONObject0 = new JSONObject(77);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(77);
      JSONObject.quote((String) null, (Writer) charArrayWriter0);
      assertEquals("\"\"", charArrayWriter0.toString());
      
      boolean boolean0 = jSONObject0.has("cm]:S!+tx@c:P(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      HashMap<GraphicsDevice.WindowTranslucency, Thread.State> hashMap0 = new HashMap<GraphicsDevice.WindowTranslucency, Thread.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("2qw=8p)<Nj#%#G$M", (Object) hashMap0);
      Object object0 = new Object();
      int int0 = jSONObject1.optInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      JSONObject.isDecimalNotation("LUVAznmN~`|bd5");
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject.testValidity((Object) null);
      Locale locale0 = Locale.FRANCE;
      JSONObject jSONObject0 = new JSONObject(locale0);
      try { 
        jSONObject0.getJSONArray("+fJ}}uC v]g|Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      JSONObject jSONObject0 = new JSONObject(locale0);
      jSONObject0.optJSONObject("tr");
      assertEquals(14, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONObject.testValidity((Object) null);
      Locale locale0 = Locale.FRANCE;
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      try { 
        jSONObject0.get("tnRE/L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject.getNames((Object) pipedWriter0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("4iwwax");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("~1", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      HashMap<Boolean, StandardLocation> hashMap0 = new HashMap<Boolean, StandardLocation>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("i\"=im", (Object) "i\"=im");
      JSONObject jSONObject2 = new JSONObject();
      JSONObject.getNames((Object) jSONObject1);
      boolean boolean0 = new Boolean("i\"=im");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = JSONObject.wrap((Object) null);
      String string0 = "RuZNm";
      JSONTokener jSONTokener0 = new JSONTokener("RuZNm");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "RuZNm";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "I49f5";
      objectArray0[3] = (Object) "RuZNm";
      objectArray0[4] = (Object) "RuZNm";
      objectArray0[5] = (Object) "RuZNm";
      objectArray0[6] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("I49f5", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      JSONObject.getNames((Object) mockPrintWriter1);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject.wrap((Object) null);
      String string0 = "RuZNm";
      JSONTokener jSONTokener0 = new JSONTokener("RuZNm");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
      
      JSONTokener jSONTokener0 = new JSONTokener("RuZNm");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      JSONObject.stringToValue("getClass");
      BigInteger bigInteger0 = BigInteger.ZERO;
      Object object1 = JSONObject.stringToValue("org.json.JSONTokener");
      assertEquals("org.json.JSONTokener", object1);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONObject.valueToString("+fJ}}uC v]g|Z");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(7);
      JSONObject.quote("+fJ}}uC v]g|Z", (Writer) charArrayWriter0);
      StringReader stringReader0 = new StringReader("j/MoDdd1ElV3");
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject.wrap(bigInteger0);
      Random.setNextRandom(7);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("kDa%?jz45z:A");
      String string0 = null;
      JSONObject.stringToValue("Nesting error.");
      JSONObject.valueToString("Nesting error.");
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getBigDecimal("kDa%?jz45z:A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(10);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONObject0.opt("\t");
      Float float0 = new Float(0.0F);
      JSONObject.wrap(float0);
      JSONObject.isDecimalNotation("\t");
      JSONObject jSONObject1 = jSONObject0.increment("tri");
      String string0 = "isintern";
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject0.optBigInteger("isintern", bigInteger0);
      JSONObject.stringToValue("");
      BigInteger bigInteger1 = BigInteger.ZERO;
      JSONObject.stringToValue("OefabDEPcj^");
      try { 
        jSONObject1.getJSONArray("tri");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONObject.doubleToString((-470.13570921673073));
      BigDecimal bigDecimal0 = new BigDecimal(3509L);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      bigDecimal0.stripTrailingZeros();
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      bigDecimal1.subtract(bigDecimal0);
      bigDecimal0.negate();
      MathContext mathContext0 = new MathContext(46, roundingMode0);
      mathContext0.toString();
      bigDecimal0.add(bigDecimal1, mathContext0);
      JSONObject jSONObject0 = new JSONObject(bigDecimal0);
      jSONObject0.toMap();
      JSONObject.getNames(jSONObject0);
      jSONObject0.optString("-470.13570921673073");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4{[Ho6?q@+rp}[k");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "precision=46 roundingMode=HALF_DOWN");
      jSONObject0.write((Writer) printWriter0);
      BigDecimal bigDecimal2 = new BigDecimal(110);
      jSONObject0.optBigDecimal("", bigDecimal1);
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-1994900624));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1994900624
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = "\"";
      String string1 = "isE";
      try { 
        JSONObject.stringToNumber("isE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [isE] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object object0 = JSONObject.stringToValue("\"");
      assertEquals("\"", object0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("trim");
      assertEquals("trim", object0);
      
      JSONObject jSONObject0 = new JSONObject(55);
      jSONObject0.isEmpty();
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("trim", (-3476L));
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A JSONArray text must start with '['";
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.SERVER;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      hashMap0.put(authenticator_RequestorType0, locale_Category0);
      stringArray0[1] = "6R'd]Ea7";
      hashMap0.remove((Object) "A JSONArray text must start with '['");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.toString(1216);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Writer writer0 = JSONObject.quote("isspliterator", (Writer) mockPrintWriter0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "le");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(writer0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter1);
      JSONObject.indent(writer0, (-2778));
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("a~e;");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "a~e;";
      stringArray0[1] = "a~e;";
      stringArray0[2] = "a~e;";
      JSONObject jSONObject0 = new JSONObject(mockFileWriter0, stringArray0);
      long long0 = jSONObject0.optLong("shortValueExact");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("M=sn{;d)S,tK4Gd", (Map<?, ?>) null);
      jSONObject1.optLong("M=sn{;d)S,tK4Gd");
      jSONObject1.toString();
      JSONObject.isDecimalNotation("M=sn{;d)S,tK4Gd");
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sn{;d)S,tK4Gd", (Object) null);
      JSONObject.testValidity("M=sn{;d)S,tK4Gd");
      JSONObject.isDecimalNotation("M=sn{;d)S,tK4Gd");
      try { 
        jSONObject2.getString("java.io.StringWriter@0000000010");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      jSONObject1.optLong("M=sU{;d)r,tK4Gd");
      JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject.indent(charArrayWriter0, 0);
      String string0 = jSONObject2.optString("M=sU{;d)r,tK4Gd");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      HashMap<Boolean, StandardLocation> hashMap0 = new HashMap<Boolean, StandardLocation>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("z~");
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal("nex", (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.optNumber("P");
      jSONObject0.put("@$9|sVRn%%]", 4282L);
      jSONObject0.length();
      Object object0 = jSONObject0.opt("Illegal escape.");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)119);
      Number number0 = jSONObject0.optNumber("lo", (Number) short0);
      assertEquals((short)119, number0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = "Nesting error.";
      JSONObject jSONObject0 = new JSONObject(128);
      Locale locale0 = Locale.CANADA;
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.names();
      jSONObject0.keys();
      try { 
        jSONObject0.getJSONObject("Ks]oRVwJ]8sfj@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000006] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has("?|%AMK_u<|q]<e3?W4");
      Set<String> set0 = jSONObject0.keySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("?|%AMK_u<|q]<e3?W4", "?|%AMK_u<|q]<e3?W4");
      LinkedList<BufferedReader> linkedList0 = new LinkedList<BufferedReader>();
      jSONObject1.put("lon", (Collection<?>) linkedList0);
      jSONObject0.has("?|%AMK_u<|q]<e3?W4");
      JSONObject.testValidity("?|%AMK_u<|q]<e3?W4");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject.indent(charArrayWriter0, 0);
      jSONObject2.optString("M=sU{;d)r,tK4Gd");
      jSONObject0.accumulate("org.json.JSONObject@0000000002", jSONObject1);
      jSONObject0.keys();
      jSONObject0.optInt("%", 0);
      JSONObject jSONObject3 = jSONObject2.put("org.json.JSONObject@0000000002", false);
      assertSame(jSONObject0, jSONObject3);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONObject jSONObject0 = null;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ha";
      JSONObject jSONObject1 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject1.toMap();
      // Undeclared exception!
      try { 
        jSONObject1.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      String string0 = "612.00";
      JSONObject.stringToNumber("612.00");
      String string1 = "] not a string.";
      StringReader stringReader0 = new StringReader("] not a string.");
      JSONObject.isDecimalNotation("612.00");
      bufferedInputStream0.markSupported();
      JSONObject.stringToValue("612.00");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("] not a string.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("Expected a ',' or '}'");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [Expected a ',' or '}'] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = "\"";
      try { 
        JSONObject.stringToNumber("\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [\"] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("w?oPzG.?Nn5A=d");
      try { 
        JSONObject.stringToNumber("%Nna?ywDfZmN;");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [%Nna?ywDfZmN;] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "getshortValueExact";
      jSONObject0.toString();
      JSONObject jSONObject1 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      Writer writer0 = jSONObject1.write((Writer) pipedWriter0, (-530), (-530));
      assertSame(pipedWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject.isDecimalNotation("^1&+");
      JSONObject jSONObject1 = jSONObject0.putOpt("^1&+", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      JSONObject jSONObject0 = new JSONObject(locale0);
      jSONObject0.optJSONObject("le");
      HashMap<KeyRep.Type, Object> hashMap0 = new HashMap<KeyRep.Type, Object>();
      jSONObject0.put("le", (Map<?, ?>) hashMap0);
      assertEquals(15, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale locale1 = Locale.CANADA;
      jSONObject1.optString("M=sU{;d)r,tK4Gd");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("2qw=8p)<Nj#%#G$M");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2qw=8p)<\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      try { 
        jSONObject0.getBigDecimal("Y)Ym#a2$Yse");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = ">>iTD<s[[R)G";
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject((Object) "isintern");
      // Undeclared exception!
      try { 
        jSONObject0.query(">>iTD<s[[R)G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = "+fJ}}uC v]g|Z";
      JSONObject jSONObject0 = new JSONObject((Object) "+fJ}}uC v]g|Z");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      // Undeclared exception!
      try { 
        jSONObject1.query("+fJ}}uC v]g|Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject.testValidity((Object) null);
      Locale locale0 = Locale.FRANCE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      Object object0 = new Object();
      double double0 = jSONObject0.optDouble("7K'TxL)iD(");
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "isintern");
      JSONObject jSONObject0 = new JSONObject((Object) "isintern");
      JSONObject.quote("islength");
      JSONObject jSONObject1 = jSONObject0.append("~f5CM)Vv", "java.io.StringWriter@0000000012");
      JSONObject.wrap(jSONObject1);
      jSONObject1.entrySet();
      String string0 = "k.?\\Yo{pM";
      try { 
        jSONObject1.getJSONObject("islength");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000030] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      Class<Normalizer.Form> class0 = Normalizer.Form.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Normalizer.Form normalizer_Form0 = Normalizer.Form.NFKD;
      jSONObject0.optEnum(class0, "] is not a JSONObject.", normalizer_Form0);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject(class0);
      Class<Authenticator.RequestorType> class1 = Authenticator.RequestorType.class;
      jSONObject2.optEnum(class1, "] is not a JSONObject.");
      MockFileWriter mockFileWriter0 = new MockFileWriter("ishashCode");
      JSONObject.getNames((Object) mockFileWriter0);
      try { 
        jSONObject0.getBoolean("ishashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000102] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      Class<Resource.AuthenticationType> class0 = Resource.AuthenticationType.class;
      String string0 = "0";
      Resource.AuthenticationType resource_AuthenticationType0 = Resource.AuthenticationType.CONTAINER;
      Class<StandardProtocolFamily> class1 = StandardProtocolFamily.class;
      jSONArray0.optLong(2220, 7L);
      try { 
        jSONArray0.getInt(2220);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2220] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = "!VrAr";
      JSONObject.quote("!VrAr");
      int int0 = (-739);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-739));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -739
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("w^Y0%oW;9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "r6N_\"";
      stringArray0[2] = "BQLT2m/Zb\"#eZ";
      String string0 = "cm]:S!+tx@c:P(";
      stringArray0[3] = "cm]:S!+tx@c:P(";
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0, stringArray0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.putOnce("cm]:S!+tx@c:P(", "");
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has("?|%AMK_u<|q]<e3?W4");
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject.quote("q'^5OyMjj");
      BigInteger bigInteger1 = BigInteger.ONE;
      Object object0 = JSONObject.stringToValue("00`0");
      assertEquals("00`0", object0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      JSONObject jSONObject0 = new JSONObject(roundingMode0);
      try { 
        jSONObject0.getString("2qw=8p)<Nj#%#G$M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(123);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "Null pointer";
      jSONObject0.remove("Null pointer");
      double double0 = new Integer(123);
      jSONObject0.putOpt((String) null, (Object) null);
      jSONObject0.put(";BrwfQ{yN", (long) 123);
      jSONObject0.toString(4072);
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange(".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=.
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("\"", true);
      String[] stringArray0 = new String[2];
      mockFileWriter0.flush();
      stringArray0[0] = "\"";
      stringArray0[1] = "\"";
      JSONObject jSONObject0 = new JSONObject(mockFileWriter0, stringArray0);
      String string0 = "\\u";
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      int int0 = 0;
      RoundingMode.valueOf(0);
      jSONObject0.putOpt(string0, roundingMode0);
      jSONObject0.optString("\"");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("\"", "\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.isDecimalNotation("^1&+");
      boolean boolean0 = new Boolean(false);
      jSONObject0.putOpt("^1&+", "^1&+");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      bufferedInputStream0.markSupported();
      jSONObject0.toString();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.floatValue();
      jSONObject0.optBigInteger("A JSONObject text must begin with '{'", bigInteger0);
      jSONObject0.opt("");
      RoundingMode.valueOf(3);
      jSONObject1.putOpt("", (Object) null);
      jSONObject0.optString("\"");
      MockFile mockFile0 = new MockFile("*`xX!<y~b3d!Gl");
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBigInteger("krM&Z,PG3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("true", bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "+fJ}}uC v]g|Z");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Object object0 = JSONObject.stringToValue("+fJ}}uC v]g|Z");
      assertEquals("+fJ}}uC v]g|Z", object0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      JSONObject.testValidity((Object) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A JSONArray text must start with '['";
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.SERVER;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      hashMap0.put(authenticator_RequestorType0, locale_Category0);
      stringArray0[1] = "6R'd]Ea7";
      hashMap0.remove((Object) "A JSONArray text must start with '['");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.toString(1216);
      Class<RoundingMode> class0 = RoundingMode.class;
      try { 
        jSONObject1.getEnum(class0, "6R'd]Ea7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000006] is not an enum of type java.io.StringWriter@0000000007.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONObject.doubleToString((-715.1484694441916));
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      HashMap<FilterInputStream, Locale.Category> hashMap0 = new HashMap<FilterInputStream, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("A JSONObject text must begin with '{'", (-1995.3F));
      JSONObject jSONObject1 = jSONObject0.increment("Unterminated string");
      File file0 = MockFile.createTempFile("s;lV3)E", "s;lV3)E");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 122);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(dataOutputStream0);
      jSONObject0.putOpt("Unterminated string", bufferedOutputStream1);
      float float0 = jSONObject1.optFloat("s;lV3)E", (-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject2 = new JSONObject(mockFileInputStream0);
      assertEquals(2, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(116);
      charArrayWriter0.append((CharSequence) charBuffer0);
      JSONObject jSONObject0 = new JSONObject(charBuffer0);
      try { 
        jSONObject0.getInt("rMC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("r6N_\"", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)62;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)63, 79);
      JSONObject.testValidity(byteArrayInputStream0);
      mockFileWriter0.close();
      JSONObject jSONObject0 = new JSONObject(mockFileWriter0);
      try { 
        jSONObject0.getJSONArray("r6N_\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("WGU ],L}Aty19@X", 0.0F);
      JSONObject jSONObject2 = jSONObject0.increment("intern");
      JSONObject jSONObject3 = jSONObject2.putOpt("WGU ],L}Aty19@X", jSONArray0);
      jSONObject0.toString();
      jSONObject1.optLong("!/}_[>DcH,v@PqH$p", 0L);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      jSONObject0.similar(dataInputStream0);
      jSONObject3.toMap();
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('z');
      StringWriter stringWriter1 = stringWriter0.append('z');
      String string0 = JSONObject.doubleToString((-2078442957));
      assertEquals("-2.078442957E9", string0);
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "-2.078442957E9");
      String[] stringArray0 = JSONObject.getNames((Object) stringWriter2);
      assertNull(stringArray0);
      
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      String string0 = jSONObject0.optString("@$9|sVRn%%]");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      JSONObject.doubleToString(Double.NaN);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Locale locale0 = Locale.FRANCE;
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("].");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("trim");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "trim");
      Writer writer0 = jSONObject0.write((Writer) printWriter0);
      JSONObject.quote("trim", writer0);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.has("trim");
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      try { 
        jSONObject1.getEnum(class0, "trim");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] is not an enum of type java.io.StringWriter@0000000004.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(56);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONObject.doubleToString((-470.13570921673073));
      BigDecimal bigDecimal0 = new BigDecimal(3509L);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      int int0 = 46;
      bigDecimal0.stripTrailingZeros();
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      bigDecimal1.setScale(46);
      bigDecimal1.subtract(bigDecimal0);
      bigDecimal0.negate();
      MathContext mathContext0 = new MathContext(46, roundingMode0);
      mathContext0.toString();
      bigDecimal0.add(bigDecimal1, mathContext0);
      JSONObject jSONObject0 = new JSONObject(bigDecimal0);
      jSONObject0.toMap();
      JSONObject.getNames(jSONObject0);
      jSONObject0.optString("-470.13570921673073");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4{[Ho6?q@+rp}[k");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "precision=46 roundingMode=HALF_DOWN");
      jSONObject0.write((Writer) printWriter0);
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("-470.13570921673073");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      HashMap<Boolean, StandardLocation> hashMap0 = new HashMap<Boolean, StandardLocation>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject();
      Class<Authenticator.RequestorType> class0 = Authenticator.RequestorType.class;
      jSONObject0.optEnum(class0, "i\"=im");
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1082);
      jSONObject0.put("", (float) 1082);
      Class<PseudoColumnUsage> class0 = PseudoColumnUsage.class;
      try { 
        jSONObject0.getEnum(class0, ":<>dxV?o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an enum of type java.io.StringWriter@0000000008.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = "-6W|aFF>|";
      JSONTokener jSONTokener0 = new JSONTokener("-6W|aFF>|");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject.valueToString(float0);
      JSONObject.testValidity("java.io.StringWriter@0000000002");
      Locale locale0 = Locale.FRANCE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("java.io.StringWriter@0000000002", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name java.io.StringWriter@0000000002, locale fr_FR
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = "\"";
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("\"", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name \", locale zh_TW
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = "0000";
      Locale locale0 = Locale.ENGLISH;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("0000", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name 0000, locale en
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONObject.stringToValue("o");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.compareTo(bigInteger0);
      int int0 = (-3596);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        mockRandom0.longs((long) (-3596), 4244L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      HashMap<TrayIcon.MessageType, SortOrder> hashMap0 = new HashMap<TrayIcon.MessageType, SortOrder>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.NONE;
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      hashMap0.put(trayIcon_MessageType0, sortOrder0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write((Writer) stringWriter0, (-308), (-308));
      JSONObject jSONObject1 = jSONObject0.put("] could not convert to BigInteger.", (double) (-308));
      jSONObject0.entrySet();
      stringWriter0.append((CharSequence) "] could not convert to BigInteger.");
      JSONObject.writeValue(writer0, hashMap0, 0, 735);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      try { 
        jSONObject1.getEnum(class0, "&Ops{po^RG5nuo_Dx-G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not an enum of type java.io.StringWriter@0000000011.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("fN@/rnEuS", "fN@/rnEuS");
      jSONObject0.keySet();
      JSONObject.doubleToString(3313.427215272);
      jSONObject1.toString();
      try { 
        jSONObject0.getLong("v6]|Fv`Y5/H*uxL>bE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>(1973, 1973);
      PipedReader pipedReader0 = new PipedReader(141);
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0);
      hashMap0.remove((Object) lineNumberReader0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "M=sU{;d)r,tK4Gd";
      stringArray0[1] = "M=sU{;d)r,tK4Gd";
      stringArray0[2] = "M=sU{;d)r,tK4Gd";
      stringArray0[3] = "M=sU{;d)r,tK4Gd";
      stringArray0[4] = "M=sU{;d)r,tK4Gd";
      stringArray0[5] = "M=sU{;d)r,tK4Gd";
      stringArray0[6] = "M=sU{;d)r,tK4Gd";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      int int0 = 720;
      jSONObject1.toString(720);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Writer writer0 = JSONObject.quote("M=sU{;d)r,tK4Gd", (Writer) mockPrintWriter0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "M=sU{;d)r,tK4Gd");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "M=sU{;d)r,tK4Gd");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(writer0);
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONObject.valueToString("+fJ}}uC v]g|Z");
      JSONObject.testValidity((Object) null);
      Locale locale0 = Locale.FRANCE;
      JSONObject jSONObject0 = new JSONObject(locale0);
      try { 
        jSONObject0.getJSONArray("/7ue\"L`oX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.names();
      jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      Class<SortOrder> class0 = SortOrder.class;
      try { 
        jSONObject1.getEnum(class0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] is not an enum of type java.io.StringWriter@0000000009.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = "";
      JSONObject.getNames((Object) "");
      JSONObject.stringToValue("-0");
      JSONObject.valueToString("");
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getBigDecimal("JSONObject[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "r6N_\"";
      String string0 = "cm]:S!+tx@c:P(";
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0, stringArray0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.putOnce(stringArray0[3], "");
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<CharArrayWriter, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("0", 0.0F);
      JSONObject jSONObject2 = jSONObject1.increment("Null pointer");
      JSONObject jSONObject3 = jSONObject0.putOpt("0", "0");
      jSONObject1.toString();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.negate();
      bigInteger0.floatValue();
      Byte byte0 = new Byte((byte)57);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "0";
      JSONObject jSONObject4 = new JSONObject(byte0, stringArray0);
      assertTrue(jSONObject4.isEmpty());
      
      jSONObject3.optBigInteger("Null pointer", bigInteger1);
      BigInteger bigInteger2 = BigInteger.ZERO;
      JSONObject.stringToValue("R2]c+`IM`");
      jSONObject3.opt("cYxxL0");
      boolean boolean0 = jSONObject2.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Normalizer.Form> class0 = Normalizer.Form.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        jSONObject0.getEnum(class0, "Null key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      jSONObject0.toString();
      Byte byte0 = new Byte((byte)100);
      JSONObject jSONObject1 = new JSONObject(byte0);
      jSONObject0.optJSONObject("java.io.StringWriter@0000000004");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject.valueToString(float0);
      JSONObject.testValidity("java.io.StringWriter@0000000002");
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      jSONObject0.putOnce(stringArray0[0], stringArray0[0]);
      try { 
        JSONObject.stringToNumber(".");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [.] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject.indent(charArrayWriter0, 0);
      assertEquals("", charArrayWriter0.toString());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "M=sU{;d)r,tK4Gd";
      stringArray0[1] = "M=sU{;d)r,tK4Gd";
      stringArray0[2] = "M=sU{;d)r,tK4Gd";
      stringArray0[3] = "M=sU{;d)r,tK4Gd";
      stringArray0[4] = "M=sU{;d)r,tK4Gd";
      stringArray0[5] = "M=sU{;d)r,tK4Gd";
      stringArray0[6] = "M=sU{;d)r,tK4Gd";
      stringArray0[7] = "M=sU{;d)r,tK4Gd";
      stringArray0[8] = "M=sU{;d)r,tK4Gd";
      JSONObject jSONObject3 = new JSONObject(jSONObject0, stringArray0);
      boolean boolean1 = jSONObject3.has("M=sU{;d)r,tK4Gd");
      assertFalse(boolean1 == boolean0);
      
      String string0 = JSONObject.doubleToString(612);
      assertEquals("612", string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONObject.stringToValue("java.");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject.isDecimalNotation("java.");
      jSONObject0.putOpt("bQm44unGumE", "java.");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      HashMap<SortOrder, BufferedInputStream> hashMap0 = new HashMap<SortOrder, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.length();
      int int0 = jSONObject0.optInt("0");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("org.json.JSONObject$Null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-1531));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1531
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.putOpt("@$9|sVRn%%]", "@$9|sVRn%%]");
      double double0 = jSONObject1.optDouble("krM&Z,PG3");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertFalse(jSONObject0.isEmpty());
      
      Object object0 = JSONObject.stringToValue("A JSONObject text must begin with '{'");
      assertEquals("A JSONObject text must begin with '{'", object0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      JSONObject.doubleToString((-715.716861));
      JSONObject jSONObject0 = new JSONObject((Object) "-715.716861");
      jSONObject0.put("-715.716861", 654.1087F);
      float float0 = jSONObject0.getFloat("-715.716861");
      assertEquals(3, jSONObject0.length());
      assertEquals(654.1087F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      HashMap<Boolean, StandardLocation> hashMap0 = new HashMap<Boolean, StandardLocation>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("i\"Iim", (Object) "i\"Iim");
      try { 
        jSONObject1.getNumber("i\"Iim");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      String string0 = JSONObject.quote("tim");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      HashMap<Boolean, StandardLocation> hashMap0 = new HashMap<Boolean, StandardLocation>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("i\"=im", (Object) "i\"=im");
      JSONObject jSONObject2 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.floatValue();
      jSONObject1.optBigInteger("i\"=im", bigInteger0);
      jSONObject0.keySet();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.names();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "M=sU{;d)r,tK4Gd";
      JSONObject jSONObject1 = new JSONObject(objectOutputStream0, stringArray0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, dataInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      JSONObject jSONObject2 = jSONObject0.putOnce("A JSONObject text must begin with '{'", bufferedInputStream0);
      bufferedInputStream0.markSupported();
      jSONObject1.toString();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.floatValue();
      jSONObject2.optBigInteger("#6)H8y~a;7", bigInteger0);
      JSONObject.stringToValue("\"\"");
      JSONObject.stringToValue("] is not a JSONArray.");
      JSONObject jSONObject3 = new JSONObject(jSONObject1, stringArray0);
      try { 
        jSONObject3.getJSONArray("*}IZ1FY6T`6V@SfS>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.names();
      Boolean boolean0 = Boolean.FALSE;
      Map<String, Object> map0 = jSONObject0.toMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      bufferedInputStream0.markSupported();
      jSONObject0.toString();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.floatValue();
      BigInteger bigInteger1 = jSONObject0.optBigInteger("A JSONObject text must begin with '{'", bigInteger0);
      jSONObject0.opt("");
      bigInteger0.xor(bigInteger1);
      jSONObject0.put("", 0.0F);
      JSONObject.numberToString(bigInteger0);
      Class<Resource.AuthenticationType> class0 = Resource.AuthenticationType.class;
      try { 
        jSONObject0.getEnum(class0, "A JSONObject text must begin with '{'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000017] is not an enum of type java.io.StringWriter@0000000018.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = "";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Object object0 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "] could not convert to BigDecimal.");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }
}
