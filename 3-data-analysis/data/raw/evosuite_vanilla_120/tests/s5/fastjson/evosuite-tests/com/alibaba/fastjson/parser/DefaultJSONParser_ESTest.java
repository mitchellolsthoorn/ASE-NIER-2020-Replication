/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 17:02:05 GMT 2020
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.StringCharacterIterator;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.TreeMap;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("@");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) defaultJSONParser0, (Object) defaultJSONParser0);
      defaultJSONParser0.setContext(parseContext0, (Object) parseContext0, (Object) parseContext0);
      Object object0 = defaultJSONParser0.resolveReference("not support class : ");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".");
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("java/lang/Float");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(16, 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect ,, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(1511);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{-$s<h@>AfFZ41sC_");
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      ParserConfig parserConfig0 = defaultJSONParser0.getConfig();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) list0, (Object) parserConfig0);
      MockDate mockDate0 = new MockDate();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "fastjson.parser.deny.internal");
      ParseContext parseContext1 = defaultJSONParser0.setContext((Object) mockDate0, (Object) defaultJSONParser_ResolveTask0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      ParseContext parseContext2 = defaultJSONParser0.setContext(parseContext1, (Object) null, (Object) imageCapabilities0);
      assertNotSame(parseContext0, parseContext2);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[16];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("array level > 512");
      Object object0 = new Object();
      ParseContext parseContext0 = defaultJSONParser1.setContext(object0, (Object) defaultJSONParser0);
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      ParseContext parseContext1 = defaultJSONParser0.setContext(parseContext0, (Object) bigDecimal0, (Object) parseContext0);
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(1, parseContext1.level);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(x133LHt3'^9xo](L{");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "(x133LHt3'^9xo](L{", (Object) "(x133LHt3'^9xo](L{");
      defaultJSONParser0.setContext(parseContext0, (Object) parseContext0, (Object) parseContext0);
      defaultJSONParser0.popContext();
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";y>[v<yF^.u;s'");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) ";y>[v<yF^.u;s'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ;, pos 0, fieldName ;y>[v<yF^.u;s'
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("^[C1auzA~5p;,R$");
      defaultJSONParser0.resolveStatus = 11;
      HashMap<Byte, Insets> hashMap0 = new HashMap<Byte, Insets>();
      defaultJSONParser0.checkMapResolve(hashMap0, hashMap0);
      assertEquals(11, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\"=z\"& Xye", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "NaN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("object key level > 512");
      Type[] typeArray0 = new Type[1];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("O,EO,%c5z4jEJY b", (-809));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      HashMap<JobAttributes, GridBagConstraints> hashMap0 = new HashMap<JobAttributes, GridBagConstraints>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("4TB+Fc*");
      Object object0 = defaultJSONParser0.parseObject((Type) null, (Object) null);
      assertEquals(4, object0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Float> class0 = Float.class;
      JSONScanner jSONScanner0 = new JSONScanner("", 72);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      MessageFormat messageFormat0 = defaultJSONParser0.parseObject((Type) class0, (Object) "");
      assertNull(messageFormat0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("NaN");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      MockCalendar mockCalendar0 = defaultJSONParser0.parseObject((Type) null);
      assertNull(mockCalendar0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.resolveReference("fastjson.parser.autoTypeAccept");
      Feature feature0 = Feature.UseObjectArray;
      defaultJSONParser0.config(feature0, false);
      defaultJSONParser0.setResolveStatus(1114111);
      TreeMap<Integer, MockGregorianCalendar> treeMap0 = new TreeMap<Integer, MockGregorianCalendar>();
      treeMap0.replace((Integer) 1, (MockGregorianCalendar) null, (MockGregorianCalendar) null);
      TreeMap<Integer, MockGregorianCalendar> treeMap1 = new TreeMap<Integer, MockGregorianCalendar>();
      treeMap0.putAll(treeMap1);
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.parseKey();
      defaultJSONParser0.getObject("%KYj");
      Class<String> class0 = String.class;
      defaultJSONParser0.parseObject(class0);
      assertEquals(1114111, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("'#'b");
      Object object0 = defaultJSONParser0.parse();
      assertEquals("#", object0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("E?S3M}B.[", parserConfig0);
      Feature feature0 = Feature.IgnoreNotMatch;
      boolean boolean0 = defaultJSONParser0.isEnabled(feature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{-$<h@>AfFZ41sC_");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      JSONScanner jSONScanner0 = (JSONScanner)defaultJSONParser0.getLexer();
      assertEquals(0, jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[8];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 6, parserConfig0, 123);
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) roundingMode0, (Object) ".");
      ParseContext parseContext1 = defaultJSONParser0.getContext();
      assertSame(parseContext1, parseContext0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{-$s<h@>AfFZ41sC_");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("H", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra("H", "fastjson.parser.deny");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 1, line 1, column 2H
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(x133LHt3'^9xo](^L{");
      Class<Short> class0 = Short.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(x133LHt3'^9xo](L{");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2(x133LHt3'^9xo](L{
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("object key level > 512", parserConfig0);
      defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("^[C1auzA~5p;,R$");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      // Undeclared exception!
      try { 
        defaultJSONParser1.getInput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("4\u001D$");
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("4\u001D$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001D, info : pos 1, line 1, column 24\u001D$
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{-$s<h@>AfFZ41sC_");
      ParserConfig parserConfig0 = defaultJSONParser0.getConfig();
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser(charArray0, 1, parserConfig0, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Feature.AllowSingleQuotes is false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((char[]) null, 1, parserConfig0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.safeMode", parserConfig0, 72);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("(x133LHt3'^9xo](^L{", (ParserConfig) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.deny.internal", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((String) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("t{-<h@>AfFZ41sC_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.autoTypeAccept");
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("54>;E", jSONScanner0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Point point0 = new Point(454, 454);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(point0, (JSONLexer) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((JSONLexer) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONScanner jSONScanner0 = new JSONScanner("NaN");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      Object object0 = defaultJSONParser0.parse((Object) parserConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}dP-+v");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "&XO=oBGDD!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("de6Z$i'$xVmJ", parserConfig0, 6);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2de6Z$i'$xVmJ
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\"=z\"& Xye", parserConfig0);
      Object object0 = defaultJSONParser0.parse((Object) parserConfig0);
      assertEquals("=z", object0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{-$<h@>AfFZ41sC_");
      Object object0 = defaultJSONParser0.resolveReference("fastjson.parser.safeMode");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse number key errorpos 2, line 1, column 3{-$<h@>AfFZ41sC_
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("^[C1auzA~5p;,R$");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      IdentityHashMap<MockDate, JavaBeanDeserializer> identityHashMap0 = new IdentityHashMap<MockDate, JavaBeanDeserializer>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, line 1, column 4^[C1auzA~5p;,R$
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{-$<h@>AfFZ41sC_");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "{-$<h@>AfFZ41sC_");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("parseLong error, field : ", 0);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.setContext((ParseContext) null);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("([C)[[F", parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      Class<Rectangle> class0 = Rectangle.class;
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseArray((Collection) null, (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, line 1, column 4([C)[[F
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]=s]^44p+)Hy");
      Vector<MockCalendar> vector0 = new Vector<MockCalendar>(0, 0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) vector0, (Object) "]=s]^44p+)Hy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ], pos 0, fieldName ]=s]^44p+)Hy
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("([C)[[F", parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      HashSet<Double> hashSet0 = new HashSet<Double>();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints(0, (-984), 1, 1, 0, 0, (-755), (-755), (Insets) null, 1378, 1);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseArray((Type) null, (Collection) hashSet0, (Object) gridBagConstraints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, line 1, column 4([C)[[F
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";Ljava/lang/ref'e.t/Type;Ljava/lang/Object;I)Ljava/lang/Object;");
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) parameterizedTypeImpl0, (Collection) list0, (Object) ";Ljava/lang/ref'e.t/Type;Ljava/lang/Object;I)Ljava/lang/Object;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but ;, pos 1, line 1, column 2;Ljava/lang/ref'e.t/Type;Ljava/lang/Object;I)Ljava/lang/Object;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{-$<h@>AfFZ41sC_");
      Class<Float> class0 = Float.class;
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0, (Object) properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : -pos 1, line 1, column 2{-$<h@>AfFZ41sC_
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Dimension dimension0 = new Dimension(482, 44);
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\"=z\"& Xye", parserConfig0);
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0, (Object) dimension0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseLong error, field : java.awt.Dimension[width=482,height=44]
         //
         verifyException("com.alibaba.fastjson.serializer.FloatCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".");
      Class<Boolean> class0 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0, (Object) ".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{-$<h@>AfFZ41sC_");
      IdentityHashMap<com.alibaba.fastjson.util.ParameterizedTypeImpl, ChoiceFormat> identityHashMap0 = new IdentityHashMap<com.alibaba.fastjson.util.ParameterizedTypeImpl, ChoiceFormat>();
      StringReader stringReader0 = new StringReader("java.util.Collections$EmptyMap");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0, (Object) jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse number key errorpos 2, line 1, column 3{-$<h@>AfFZ41sC_
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{!$<h@>AfXZZsC!");
      HashMap<StringCharacterIterator, PageAttributes> hashMap0 = new HashMap<StringCharacterIterator, PageAttributes>();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("{!$<h@>AfXZZsC!", decimalFormatSymbols0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashMap0, (Object) decimalFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : !pos 1, line 1, column 2{!$<h@>AfXZZsC!
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",");
      IdentityHashMap<com.alibaba.fastjson.util.ParameterizedTypeImpl, ChoiceFormat> identityHashMap0 = new IdentityHashMap<com.alibaba.fastjson.util.ParameterizedTypeImpl, ChoiceFormat>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0, (Object) identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\"=z\"& Xye", parserConfig0);
      Insets insets0 = new Insets(1248, 1248, 1248, 1588);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) null, (Object) insets0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string, pos 4, line 1, column 5\"=z\"& Xye
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      IdentityHashMap<Timestamp, String> identityHashMap0 = new IdentityHashMap<Timestamp, String>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0, (Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, line 1, column 1
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unclosed str");
      Class<Time> class0 = Time.class;
      HashSet<Long> hashSet0 = new HashSet<Long>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) hashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but ident, pos 8, line 1, column 9unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("`");
      Class<Float> class0 = Float.TYPE;
      ArrayList<BreakIterator> arrayList0 = new ArrayList<BreakIterator>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but error, pos 1, line 1, column 2`
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{c75.]lfhhj:)SJ*", parserConfig0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("^[C1auzA~5p;,R$");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(x133LHt3'^9xo](^L{");
      defaultJSONParser0.handleResovleTask("(x133LHt3'^9xo](^L{");
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("@");
      defaultJSONParser0.setContext((Object) defaultJSONParser0, (Object) defaultJSONParser0);
      Object object0 = defaultJSONParser0.resolveReference("not support class : ");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.close();
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("l_zFkG");
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("^[C1auzA~5p;,R$", parserConfig0, 0);
      defaultJSONParser0.close();
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.serializer.SimplePropertyPreFilter");
      defaultJSONParser0.accept(1, 0);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("@");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("@");
      defaultJSONParser0.accept(1);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("^[C1auzA~5p;,R$");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unclosed str");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "unclosed str");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 8, line 1, column 9unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) ".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2.
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";Ljava/lang/ref'e.t/Type;Ljava/lang/Object;I)Ljava/lang/Object;");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) ";Ljava/lang/ref'e.t/Type;Ljava/lang/Object;I)Ljava/lang/Object;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2;Ljava/lang/ref'e.t/Type;Ljava/lang/Object;I)Ljava/lang/Object;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Object object0 = defaultJSONParser0.parse((Object) "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("i_:/F~Hpqp$", 116);
      ParserConfig parserConfig0 = ParserConfig.global;
      jSONScanner0.scanSymbolUnQuoted(parserConfig0.symbolTable);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, line 1, column 4i_:/F~Hpqp$
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",fieldName ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) ",fieldName ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2,fieldName 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]=s]^44p+)Hy");
      BreakIterator breakIterator0 = BreakIterator.getCharacterInstance();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) breakIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2]=s]^44p+)Hy
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(x133LHt3'^9xo](L{");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "(x133LHt3'^9xo](L{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2(x133LHt3'^9xo](L{
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\"=z\"& Xye");
      Object object0 = defaultJSONParser0.parseKey();
      assertEquals("=z", object0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("7Fi", parserConfig0, 34);
      Object object0 = defaultJSONParser0.parse((Object) "@");
      assertEquals(7.0F, object0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("-");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unclosed str");
      Object object0 = defaultJSONParser0.parseKey();
      assertEquals("unclosed", object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(x133LHt3'^9xo](L{");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "(x133LHt3'^9xo](L{", (Object) "(x133LHt3'^9xo](L{");
      defaultJSONParser0.setContext(parseContext0, (Object) parseContext0, (Object) parseContext0);
      Object object0 = defaultJSONParser0.getObject("{C2PZhG]1y|");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("S9", parserConfig0, (-1269));
      Dimension dimension0 = new Dimension();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) dimension0, (Object) classLoader0);
      assertNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(x133LHt3'^9xo](L{");
      defaultJSONParser0.setContext((Object) "(x133LHt3'^9xo](L{", (Object) "(x133LHt3'^9xo](L{");
      defaultJSONParser0.popContext();
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5LoK! ~u3'(V#%N", (-1058));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.popContext();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("^[C1auzA~5p;,R$");
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      LinkedHashMap<RoundingMode, MockGregorianCalendar> linkedHashMap0 = new LinkedHashMap<RoundingMode, MockGregorianCalendar>();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("syntax error :", (-1938));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(linkedHashMap0, jSONReaderScanner0, parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.getContext();
      defaultJSONParser0.setContext(parseContext0);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";Ljava/lang/ref'ect/Type;Ljava/lang/Object;I)Ljava/lang/Object;");
      defaultJSONParser0.getExtraTypeProviders();
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, (String) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.JSONPath", parserConfig0);
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("^[C1auzA~5p;,R$");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, line 1, column 4^[C1auzA~5p;,R$
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("F`?uwW6Tmhco<");
      LinkedList<Collator> linkedList0 = new LinkedList<Collator>();
      defaultJSONParser0.checkListResolve(linkedList0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".");
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but ., pos 1, line 1, column 2.
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("F`?u~W6Tmhco<");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",", 182);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // setter not found, class com.alibaba.fastjson.parser.JSONReaderScanner, property null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",", (-3174));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{-$<h@>AfFZ41sC_");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "{-$<h@>AfFZ41sC_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : -pos 1, line 1, column 2{-$<h@>AfFZ41sC_
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) ".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".", parserConfig0, 39);
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("([C)[[F", parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      Class<Collator> class0 = Collator.class;
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 2, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("([C)[[F", parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual [, pos 0, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\"=z\"& Xye");
      Class<Short> class0 = Short.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with string
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{!$<h@>AfXZZsC!", parserConfig0, 40);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",fieldName ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[0];
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 1);
      defaultJSONParser0.getInput();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";Ljava/lang/ref'e.t/Type;Ljava/lang/Object;I)Ljava/lang/Object;");
      defaultJSONParser0.getInput();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("*KtU");
      defaultJSONParser0.getDateFormat();
      DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNotNull(dateFormat0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      defaultJSONParser0.parse();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("*-2-/n>8}y+");
      DateFormat dateFormat0 = DateFormat.getDateInstance(2);
      defaultJSONParser0.setDateFomrat(dateFormat0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5>;E");
      defaultJSONParser0.getSymbolTable();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((char[]) null, (-1526), parserConfig0, 2493);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".");
      Class<Boolean> class0 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Feature feature0 = Feature.NonStringKeyAsString;
      defaultJSONParser0.isEnabled(feature0);
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TB");
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("@");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse((Object) defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 1, line 1, column 2@
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("F`?uwW6Tmhco<");
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".");
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException(13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect }, actual .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("yyyy-MM-dd HH:mm:ss.SSS");
      defaultJSONParser0.getFieldTypeResolver();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual int, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("^[C1auzA~5p;,R$");
      ParserConfig parserConfig0 = new ParserConfig();
      defaultJSONParser0.setConfig(parserConfig0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("A");
      defaultJSONParser0.getDateFomartPattern();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$");
      JSONLexer jSONLexer0 = defaultJSONParser0.getLexer();
      assertEquals(1, jSONLexer0.token());
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNotNull(jSONLexer0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("uFn$yGtI");
      defaultJSONParser0.setDateFormat("uFn$yGtI");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((JSONLexer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
