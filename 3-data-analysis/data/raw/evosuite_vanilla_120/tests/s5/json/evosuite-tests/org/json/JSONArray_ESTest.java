/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 17:02:28 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.MultipleGradientPaint;
import java.awt.TrayIcon;
import java.io.ByteArrayInputStream;
import java.io.PipedOutputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.net.Proxy;
import java.sql.JDBCType;
import java.text.Normalizer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import javax.smartcardio.CardTerminals;
import javax.swing.GroupLayout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.remove(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U");
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(44, (Collection<?>) null);
      try { 
        jSONArray1.getBigInteger(44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[44] could not convert to BigInteger.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Map<?, ?>) null);
      try { 
        jSONArray0.getBigDecimal(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] could not convert to BigDecimal.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(6105, (Collection<?>) null);
      String string0 = jSONArray0.toString();
      //  // Unstable assertion: assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONArray0.query(jSONPointer0);
      assertSame(object0, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.optString((-3593), (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      String string0 = jSONArray0.optString(123, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerLast("E");
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONArray0.optQuery(jSONPointer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONPointer jSONPointer0 = new JSONPointer("");
      JSONArray jSONArray1 = (JSONArray)jSONArray0.optQuery(jSONPointer0);
      assertEquals(0, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.optQuery("#/");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Number number0 = jSONArray0.optNumber(44, (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal(1703);
      Number number0 = jSONArray0.optNumber(55, (Number) bigDecimal0);
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedList<CardTerminals.State> linkedList0 = new LinkedList<CardTerminals.State>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      long long0 = jSONArray0.optLong(0, (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      long long0 = jSONArray0.optLong(1683, (-629L));
      assertEquals((-629L), long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      float float0 = jSONArray0.optFloat(2803, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = jSONArray0.optDouble(0, (double) 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = jSONArray0.optDouble((-2128), (-1676.264551632776));
      assertEquals((-1676.264551632776), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(3390, (float) 3390);
      double double0 = jSONArray0.optDouble(3390);
      assertEquals(3390.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.optBoolean((-2345), true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-127);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONArray0.optBigInteger(98, bigInteger0);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-113);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONArray0.optBigInteger(93, bigInteger0);
      assertEquals((short)143, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = jSONArray0.optBigDecimal(0, (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal((-721.492558297));
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(762, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(10, bigDecimal0);
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal(1942);
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal((-28), bigDecimal0);
      assertEquals((short)1942, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Map<?, ?>) null);
      int int0 = jSONArray0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      JSONArray jSONArray1 = jSONArray0.put(0, (Collection<?>) linkedList0);
      boolean boolean0 = jSONArray1.isNull(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(3688, (float) 3688);
      Object object0 = jSONArray0.get(1);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null, 166, 166);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedList<Normalizer.Form> linkedList0 = new LinkedList<Normalizer.Form>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(1, 5);
      jSONArray1.put((Object) jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      try { 
        jSONArray0.write((Writer) mockPrintWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONArray value at index: 2
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1503, (Collection<?>) null);
      // Undeclared exception!
      jSONArray0.toString(1503);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(6105, (Collection<?>) null);
      // Undeclared exception!
      jSONArray0.toList();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query("F$]_V@V=x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-628), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-628] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      try { 
        jSONArray0.put((-15), (Collection<?>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-15] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      // Undeclared exception!
      jSONArray0.put(1000000, (Collection<?>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-883), (-883));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-883] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      jSONArray0.put(1000000, 3710.3F);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      jSONArray0.put(1000000, (double) 1000000);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put(Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put(Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery("?_h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-568), (byte)20);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(319, (float) 319);
      boolean boolean0 = jSONArray0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      jSONArray0.put(44, (Collection<?>) null);
      jSONArray0.write((Writer) stringWriter0, (-4638), 44);
      assertEquals("[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[]                                            ]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      jSONArray0.write((Writer) mockPrintWriter0, (-4638), (-4638));
      assertEquals("[]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(8);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Writer writer0 = jSONArray1.write((Writer) mockPrintWriter0, 8, 3688);
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<Object> list0 = jSONArray0.toList();
      JSONArray jSONArray1 = jSONArray0.put(0, (Object) list0);
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(32, (Collection<?>) null);
      Long long0 = Long.valueOf(187L);
      JSONArray jSONArray1 = jSONArray0.put(10, (Object) long0);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        jSONArray0.put((-1588), (Object) bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1588] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      jSONArray0.put(10, (Object) roundingMode0);
      String string0 = jSONArray0.optString(10, "\r");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      String string0 = jSONArray0.optString(91, "T\"N>?d");
      assertEquals("T\"N>?d", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal((-7916L));
      Number number0 = jSONArray0.optNumber(1481, (Number) bigDecimal0);
      assertEquals((short) (-7916), number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      JSONArray jSONArray1 = jSONArray0.put(10, (Object) roundingMode0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Number number0 = jSONArray1.optNumber(10, (Number) bigDecimal0);
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      long long0 = jSONArray0.optLong(9, (long) 9);
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JDBCType> class0 = JDBCType.class;
      JDBCType jDBCType0 = JDBCType.TIME;
      JDBCType jDBCType1 = jSONArray0.optEnum(class0, 2629, jDBCType0);
      assertEquals(JDBCType.TIME, jDBCType1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (float) 0);
      Class<JDBCType> class0 = JDBCType.class;
      JDBCType jDBCType0 = JDBCType.BOOLEAN;
      JDBCType jDBCType1 = jSONArray1.optEnum(class0, 0, jDBCType0);
      assertEquals(JDBCType.BOOLEAN, jDBCType1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONObject, JDBCType> hashMap0 = new HashMap<JSONObject, JDBCType>();
      jSONArray0.put(2123, (Map<?, ?>) hashMap0);
      int int0 = jSONArray0.optInt(2123, 2123);
      assertEquals(2124, jSONArray0.length());
      assertEquals(2123, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.optInt(1, (-967));
      assertEquals((-967), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      float float0 = jSONArray0.optFloat((-598), (float) (-598));
      assertEquals((-598.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1, (long) 1);
      double double0 = jSONArray0.optDouble(1, (double) 1);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(3688, (float) 3688);
      Object object0 = jSONArray0.opt(1084);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.opt(2803);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.opt((-175));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0, (float) 0);
      try { 
        jSONArray0.getString(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(41, 0.0);
      try { 
        jSONArray0.getBoolean(41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[41] is not a boolean.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.get((-223));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-223] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.NO_CYCLE;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      int int0 = jSONArray0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.optBoolean(0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.toString(1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Thread.State> class0 = Thread.State.class;
      jSONArray0.optEnum(class0, (-397));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<GroupLayout.Alignment, Authenticator.RequestorType> hashMap0 = new HashMap<GroupLayout.Alignment, Authenticator.RequestorType>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      List<Object> list0 = jSONArray0.toList();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put(2356, (Collection<?>) null);
      jSONArray0.toList();
      // Undeclared exception!
      jSONArray1.join("<n9t{#r5l0!1z");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Collection<?>) null);
      List<Object> list0 = jSONArray0.toList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      jSONArray0.put(44, (Collection<?>) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      jSONArray0.write((Writer) mockPrintWriter0, 10, (-4638));
      assertEquals("[\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\n[]\n]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      jSONArray0.put(44, (Collection<?>) null);
      // Undeclared exception!
      jSONArray0.write((Writer) stringWriter0, 913, (-676));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<Object> list0 = jSONArray0.toList();
      JSONArray jSONArray1 = jSONArray0.put(7, (Object) list0);
      String string0 = jSONArray1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<Object> list0 = jSONArray0.toList();
      jSONArray0.put(19, (Object) list0);
      JSONArray jSONArray1 = new JSONArray();
      assertTrue(jSONArray1.isEmpty());
      
      jSONArray1.toJSONObject(jSONArray0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      assertNull(jSONObject0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.toJSONObject((JSONArray) null);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<Object> list0 = jSONArray0.toList();
      JSONArray jSONArray1 = jSONArray0.put(10, (Object) list0);
      boolean boolean0 = jSONArray0.similar(jSONArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<Object> list0 = jSONArray0.toList();
      JSONArray jSONArray1 = jSONArray0.put(10, (Object) list0);
      JSONArray jSONArray2 = new JSONArray((Collection<?>) list0);
      boolean boolean0 = jSONArray2.similar(jSONArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = new Long(3098L);
      boolean boolean0 = jSONArray0.similar(long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<ProcessBuilder.Redirect.Type, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, ProcessBuilder.Redirect.Type>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      jSONArray0.remove(0);
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.remove(3700);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.remove((-775));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(6, true);
      assertEquals(7, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(6, false);
      assertEquals(7, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(true);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(false);
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<Object> list0 = jSONArray0.toList();
      JSONArray jSONArray1 = jSONArray0.put(0, (Collection<?>) list0);
      String string0 = jSONArray1.optString(0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(3390, (float) 3390);
      Number number0 = jSONArray0.optNumber(3390);
      assertEquals(3390.0F, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(10, (Object) stringWriter0);
      Number number0 = jSONArray1.optNumber(10);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = Long.valueOf(187L);
      JSONArray jSONArray1 = jSONArray0.put(10, (Object) long0);
      long long1 = jSONArray1.optLong(10, (long) 32);
      assertEquals(187L, long1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<Object> list0 = jSONArray0.toList();
      JSONArray jSONArray1 = jSONArray0.put(1, (Collection<?>) list0);
      long long0 = jSONArray1.optLong(1, (long) 1);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.optJSONObject(6074);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<Object> list0 = jSONArray0.toList();
      JSONArray jSONArray1 = jSONArray0.put(1, (Collection<?>) list0);
      JSONArray jSONArray2 = jSONArray1.optJSONArray(1);
      assertTrue(jSONArray2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.optJSONArray(1);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(10, (Object) stringWriter0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = jSONArray1.optBigDecimal(10, bigDecimal0);
      assertEquals((byte)10, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2151, 3710.3F);
      BigInteger bigInteger0 = jSONArray1.optBigInteger(2151, (BigInteger) null);
      assertNotNull(bigInteger0);
      assertEquals((short)3710, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      jSONArray0.put(0, (double) 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONArray0.optBigInteger(0, bigInteger0);
      assertEquals((short)0, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<Object> list0 = jSONArray0.toList();
      jSONArray0.put(1, (Collection<?>) list0);
      BigInteger bigInteger0 = jSONArray0.optBigInteger(1, (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<Object> list0 = jSONArray0.toList();
      jSONArray0.put(1, (Collection<?>) list0);
      Class<Proxy.Type> class0 = Proxy.Type.class;
      try { 
        jSONArray0.getEnum(class0, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] is not an enum of type java.io.StringWriter@0000000007.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2123, 3710.3F);
      int int0 = jSONArray0.optInt(2123, 2123);
      assertEquals(3710, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1503, (Collection<?>) null);
      int int0 = jSONArray0.optInt(1503);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(114, (double) 114);
      float float0 = jSONArray0.optFloat(114, 844.7246F);
      assertEquals(114.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(6105, (Collection<?>) null);
      float float0 = jSONArray1.optFloat(6105, (float) 6105);
      assertEquals(6105.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(10, (Object) " [character ");
      double double0 = jSONArray0.optDouble(10, (double) 10);
      assertEquals(10.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      JSONArray jSONArray1 = jSONArray0.put(10, (Object) roundingMode0);
      double double0 = jSONArray1.optDouble(10, (double) 10);
      assertEquals(10.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      jSONArray0.put(0, (double) 0);
      double double0 = jSONArray0.optDouble(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.join("](uT1N){\"");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<Object> list0 = jSONArray0.toList();
      JSONArray jSONArray1 = jSONArray0.put((Collection<?>) list0);
      try { 
        jSONArray1.toJSONObject(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(8);
      long long0 = jSONArray1.getLong(0);
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(44, (Collection<?>) null);
      try { 
        jSONArray0.getLong(44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[44] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      jSONArray0.put(13, (Collection<?>) linkedList0);
      try { 
        jSONArray0.getJSONObject(13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[13] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<Object> list0 = jSONArray0.toList();
      jSONArray0.put(1, (Collection<?>) list0);
      JSONArray jSONArray1 = jSONArray0.getJSONArray(1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<Object> list0 = jSONArray0.toList();
      jSONArray0.put(10, (Object) list0);
      try { 
        jSONArray0.getJSONArray(10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[10] is not a JSONArray.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1503, (Collection<?>) null);
      try { 
        jSONArray1.getInt(1503);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1503] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0, (double) 0);
      assertEquals(1, jSONArray0.length());
      
      Number number0 = jSONArray0.getNumber(0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<Object> list0 = jSONArray0.toList();
      JSONArray jSONArray1 = jSONArray0.put(1, (Collection<?>) list0);
      try { 
        jSONArray1.getNumber(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(8, 2851.737F);
      assertEquals(9, jSONArray0.length());
      
      float float0 = jSONArray1.getFloat(8);
      assertEquals(2851.737F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(3390, (float) 3390);
      try { 
        jSONArray1.getFloat(318);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[318] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(10, (long) 10);
      assertEquals(11, jSONArray0.length());
      
      double double0 = jSONArray1.getDouble(10);
      assertEquals(10.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1, (Collection<?>) null);
      try { 
        jSONArray0.getDouble(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1722, (double) 1722);
      boolean boolean0 = jSONArray1.optBoolean(1722);
      assertEquals(1723, jSONArray0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "true");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedList<Normalizer.Form> linkedList0 = new LinkedList<Normalizer.Form>();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("[aGq6Qe/");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 8 [character 9 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      long long0 = jSONArray0.optLong(4326);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0.0F);
      List<Object> list0 = jSONArray0.toList();
      assertTrue(list0.contains(0.0F));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = (JSONArray)jSONArray0.optQuery("");
      assertEquals(0, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-13), (Map<?, ?>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-13] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isNull(1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(" [character ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 12 [character 13 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(8);
      int int0 = jSONArray0.getInt(0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-2893), 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2893] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      float float0 = jSONArray0.optFloat(1);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((-609.1));
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.query("");
      assertSame(object0, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2338, (Collection<?>) null);
      jSONArray1.join((String) null);
      assertEquals(2339, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-35), (double) (-35));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-35] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LinkedList<Normalizer.Form> linkedList0 = new LinkedList<Normalizer.Form>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(0L);
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-2470), 886.48F);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2470] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      jSONArray0.write((Writer) mockPrintWriter0);
      assertEquals("[]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.optString(3315);
      assertEquals("", string0);
  }
}
