/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 18:40:14 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Dialog;
import java.awt.GraphicsDevice;
import java.awt.MultipleGradientPaint;
import java.awt.TrayIcon;
import java.awt.Window;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.net.Proxy;
import java.net.StandardProtocolFamily;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.security.KeyRep;
import java.sql.JDBCType;
import java.time.DayOfWeek;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.annotation.Resource;
import javax.smartcardio.CardTerminals;
import javax.swing.GroupLayout;
import javax.swing.JTable;
import javax.tools.DocumentationTool;
import javax.tools.JavaFileObject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "v*/%2=_>fp=YrFU`JAi");
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('r');
      JSONObject.quote("v*/%2=_>fp=YrFU`JAi", (Writer) charArrayWriter2);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      GroupLayout.Alignment groupLayout_Alignment0 = GroupLayout.Alignment.BASELINE;
      linkedList0.addLast(groupLayout_Alignment0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      String string0 = "\\\\";
      BigDecimal bigDecimal0 = new BigDecimal(185.0);
      jSONObject1.optBigDecimal("\\", bigDecimal0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.doubleToString((byte)0);
      Integer integer0 = new Integer((byte)0);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.append("0", charArrayWriter0);
      jSONObject0.optFloat("0", 2630.619F);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = "l@r;U9/&";
      LinkedList<SequenceInputStream> linkedList0 = new LinkedList<SequenceInputStream>();
      JSONObject jSONObject1 = jSONObject0.put("l@r;U9/&", (Collection<?>) linkedList0);
      jSONObject0.remove("l@r;U9/&");
      jSONObject1.optBoolean("ishashCode");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONObject0.optNumber("l@r;U9/&", (Number) null);
      jSONObject0.optBoolean("org.json.JSONPointer$Builder", true);
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("l@r;U9/&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.stringToValue("false");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertTrue(jSONObject0.isEmpty());
      
      jSONObject0.increment("{F0VJ+c80V$?E#.d{/");
      LinkedList<InputStreamReader> linkedList0 = new LinkedList<InputStreamReader>();
      jSONObject0.put("{F0VJ+c80V$?E#.d{/", (Collection<?>) linkedList0);
      jSONObject0.getJSONArray("{F0VJ+c80V$?E#.d{/");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("{F0VJ+c80V$?E#.d{/");
      JSONObject.quote("{F0VJ+c80V$?E#.d{/");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONObject0.optNumber("{F0VJ+c80V$?E#.d{/", (Number) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      BigDecimal bigDecimal0 = new BigDecimal(24);
      jSONObject1.similar(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      JSONObject jSONObject1 = new JSONObject(linkedList0);
      jSONObject1.optBoolean("LBE|FD}:8/8j\"'");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONObject0.optNumber("LBE|FD}:8/8j\"'", (Number) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      jSONObject0.similar(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      JSONObject jSONObject1 = new JSONObject(linkedList0);
      jSONObject1.optBoolean("LBE|FD}:8/8j\"'");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONObject0.optNumber("LBE|FD}:8/8j\"'", (Number) null);
      jSONObject0.similar(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Float, DocumentationTool.Location> hashMap0 = new HashMap<Float, DocumentationTool.Location>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote("true", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      JSONObject jSONObject1 = jSONObject0.put("LBE|FD}:8/8j\"'", (Collection<?>) linkedList0);
      jSONObject1.optBoolean("LBE|FD}:8/8j\"'");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONObject0.optNumber("LBE|FD}:8/8j\"'", (Number) null);
      jSONObject0.optBoolean("LBE|FD}:8/8j\"'", false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "LBE|FD}:8/8j\"'";
      stringArray0[1] = "LBE|FD}:8/8j\"'";
      stringArray0[2] = "LBE|FD}:8/8j\"'";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      JSONObject jSONObject3 = new JSONObject(mockPrintStream0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject.doubleToString((byte)14);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "14");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      JSONObject jSONObject0 = new JSONObject(charBuffer0);
      JSONObject.stringToValue("14");
      Character character0 = new Character('r');
      JSONObject.wrap(character0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = "l@r;U9/&";
      JSONObject jSONObject1 = jSONObject0.increment("l@r;U9/&");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte) (-55);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject1.optBigInteger("\r", bigInteger0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("l@r;U9/&", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "*]nFO?6)P4+x=,";
      stringArray0[1] = "a'Gh 9<4D";
      stringArray0[2] = "cOs@|";
      stringArray0[3] = "getnames";
      stringArray0[4] = "~x(,t7>$";
      stringArray0[5] = "1CcfwWo9Iq,suP\"X";
      stringArray0[6] = ".";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("~x(,t7>$", (Collection<?>) linkedList0);
      JSONObject.doubleToString(0.0);
      jSONObject1.length();
      jSONObject1.optLong((String) null, 1699L);
      MockFileWriter mockFileWriter0 = new MockFileWriter("ppg(qs");
      jSONObject2.write((Writer) mockFileWriter0);
      jSONObject1.write((Writer) mockFileWriter0, (-3178), 8);
      JSONObject jSONObject3 = new JSONObject();
      jSONObject3.isEmpty();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = "odap";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0, (-1901), (-2503));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("{F0VJ+c80V$?E#.d{/");
      LinkedList<InputStreamReader> linkedList0 = new LinkedList<InputStreamReader>();
      jSONObject1.getLong("{F0VJ+c80V$?E#.d{/");
      jSONObject0.put("{F0VJ+c80V$?E#.d{/", (Collection<?>) linkedList0);
      jSONObject1.optBigInteger("{F0VJ+c80V$?E#.d{/", (BigInteger) null);
      String string0 = "";
      try { 
        Integer.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.append("0@Q$*7'a,SzM(SB", "0@Q$*7'a,SzM(SB");
      assertFalse(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("do", 69);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "do");
      jSONObject1.optDouble("do");
      jSONObject1.getLong("do");
      JSONTokener jSONTokener0 = null;
      try {
        jSONTokener0 = new JSONTokener((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.valueToString(charArrayWriter0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      HashMap<KeyRep.Type, JSONObject> hashMap0 = new HashMap<KeyRep.Type, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optLong("gettoString", 0L);
      jSONObject0.put("~0", 0.0F);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      jSONObject0.toJSONArray(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject1.putOpt("getpoll", jSONObject0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<GraphicsDevice.WindowTranslucency> class0 = GraphicsDevice.WindowTranslucency.class;
      String string0 = "ziH=wxb' !'at";
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Float.NaN);
      try { 
        jSONObject0.putOnce("ziH=wxb' !'at", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONPointer jSONPointer0 = new JSONPointer("");
      jSONObject0.optJSONArray("J@");
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONObject.doubleToString(0.0);
      jSONObject0.length();
      MockFileWriter mockFileWriter0 = new MockFileWriter("{q*][-'V#l8qs'");
      Writer writer0 = jSONObject0.write((Writer) mockFileWriter0);
      jSONObject0.write(writer0, 46, 200);
      jSONObject0.optJSONArray("0");
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "5<#{xPgs\"E)R 8KuN`";
      jSONObject0.putOnce("5<#{xPgs\"E)R 8KuN`", (Object) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONTokener jSONTokener0 = new JSONTokener("5<#{xPgs\"E)R 8KuN`");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("l@r;U9/&");
      jSONObject1.optLong("D[,$5W6^bXMMS9T");
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      JSONObject jSONObject3 = new JSONObject(1412);
      StringReader stringReader0 = new StringReader("true");
      StringReader stringReader1 = new StringReader("true");
      // Undeclared exception!
      try { 
        jSONObject3.put((String) null, (Object) stringReader1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      short short0 = (short)45;
      Short short1 = new Short((short)45);
      JSONObject jSONObject0 = new JSONObject(short1);
      jSONObject0.length();
      MockFileWriter mockFileWriter0 = new MockFileWriter("{");
      mockFileWriter0.close();
      try { 
        jSONObject0.write((Writer) mockFileWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stream closed
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      JSONObject jSONObject1 = jSONObject0.put("LBE|FD}:8/8j\"'", (Collection<?>) linkedList0);
      JSONObject jSONObject2 = jSONObject1.append("LBE|FD}:8/8j\"'", hashMap0);
      JSONObject.stringToValue("@$)k9T(%}70Mw8$C/y");
      JSONObject jSONObject3 = jSONObject1.put("\f", 1402.010284777142);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)16;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LBE|FD}:8/8j\"'");
      byteArray0[2] = (byte)123;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      jSONObject3.put("LBE|FD}:8/8j\"'", (Object) byteArrayInputStream0);
      jSONObject1.optString("\f");
      jSONObject1.toMap();
      jSONObject2.put("LBE|FD}:8/8j\"'", (Object) null);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("{F0VJ+c80V$?E#.d{/");
      LinkedList<InputStreamReader> linkedList0 = new LinkedList<InputStreamReader>();
      jSONObject0.put("{F0VJ+c80V$?E#.d{/", (Collection<?>) linkedList0);
      jSONObject1.optBigInteger("{F0VJ+c80V$?E#.d{/", (BigInteger) null);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HashMap<DataInputStream, Short> hashMap0 = new HashMap<DataInputStream, Short>();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Short short0 = new Short((short)3542);
      hashMap0.put(dataInputStream0, short0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.has("istoString");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.optBigInteger("{O~[Vw-{'U:", (BigInteger) null);
      JSONObject.stringToValue("");
      MockFile mockFile0 = new MockFile("");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "].", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%yj#");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = "Duplicate key \"";
      JSONObject jSONObject1 = jSONObject0.put("Duplicate key \"", (Map<?, ?>) null);
      try { 
        jSONObject1.getInt("Duplicate key \"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = "l@r;U9/&";
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<Object, FilterOutputStream> hashMap0 = new HashMap<Object, FilterOutputStream>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\"";
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("s8.R}B8BU&jfx56S", (Collection<?>) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "s8.R}B8BU&jfx56S";
      stringArray0[1] = "s8.R}B8BU&jfx56S";
      stringArray0[2] = "s8.R}B8BU&jfx56S";
      stringArray0[3] = "s8.R}B8BU&jfx56S";
      stringArray0[4] = "s8.R}B8BU&jfx56S";
      stringArray0[5] = "s8.R}B8BU&jfx56S";
      stringArray0[6] = "s8.R}B8BU&jfx56S";
      stringArray0[7] = "s8.R}B8BU&jfx56S";
      stringArray0[8] = "s8.R}B8BU&jfx56S";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      Class<Authenticator.RequestorType> class0 = Authenticator.RequestorType.class;
      jSONObject2.optEnum(class0, "s8.R}B8BU&jfx56S");
      try { 
        jSONObject1.getFloat("s8.R}B8BU&jfx56S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000040] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("l<WYd3 c4BKI*", "l<WYd3 c4BKI*");
      try { 
        jSONObject1.getFloat("l<WYd3 c4BKI*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("l@r;U9/&");
      jSONObject1.optLong("<a~<Y2:boQ@");
      jSONObject1.optLong("<a~<Y2:boQ@", 0L);
      // Undeclared exception!
      try { 
        JSONObject.quote("] is not a JSONObject.", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject.testValidity(double0);
      JSONObject jSONObject0 = new JSONObject(double0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Integer integer0 = new Integer(111);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject.doubleToString(2583.4);
      jSONObject1.length();
      jSONObject1.optLong("2583.4", (long) 111);
      MockFileWriter mockFileWriter0 = new MockFileWriter("2583.4");
      Writer writer0 = jSONObject1.write((Writer) mockFileWriter0);
      jSONObject0.write(writer0, 123, 675);
      jSONObject1.optJSONArray("2583.4");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject.doubleToString(5617.41);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("5/ I");
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONObject1.optBigDecimal("5/ I", bigDecimal0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONObject0.write((Writer) outputStreamWriter0, 90, 90);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.doubleToString((byte)0);
      CharBuffer.wrap((CharSequence) "0");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Short short0 = new Short((byte)63);
      JSONObject.numberToString(short0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject();
      Short short1 = new Short((byte)0);
      jSONObject0.accumulate("#/", (Object) null);
      try { 
        jSONObject0.getInt("Misplaced object.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = "{F0VJ+c80V$?E#.d{/";
      JSONObject jSONObject1 = jSONObject0.increment("{F0VJ+c80V$?E#.d{/");
      LinkedList<InputStreamReader> linkedList0 = new LinkedList<InputStreamReader>();
      jSONObject1.put("{F0VJ+c80V$?E#.d{/", (Object) null);
      jSONObject0.put("{F0VJ+c80V$?E#.d{/", (Collection<?>) linkedList0);
      BigInteger bigInteger0 = null;
      jSONObject1.optBigInteger("{F0VJ+c80V$?E#.d{/", (BigInteger) null);
      try { 
        Integer.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.doubleToString((byte)0);
      CharBuffer.wrap((CharSequence) "0");
      HashMap<Resource.AuthenticationType, JTable.PrintMode> hashMap0 = new HashMap<Resource.AuthenticationType, JTable.PrintMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("0", (Map<?, ?>) null);
      jSONObject0.optInt("N9I9QhjCcY(", (int) (byte)0);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject0.optDouble("JSONObject[", (double) (byte)0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject.quote("dou");
      JSONObject jSONObject0 = new JSONObject(1163);
      JSONObject jSONObject1 = jSONObject0.put("dou", (long) 1163);
      JSONObject jSONObject2 = jSONObject1.putOnce("java.io.StringWriter@0000000001", "dou");
      try { 
        jSONObject2.getDouble("java.io.StringWriter@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.doubleToString((byte)0);
      Integer integer0 = new Integer((byte)0);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.append("0", charArrayWriter0);
      jSONObject0.optJSONObject("0");
      jSONObject1.optLong("0", (long) (byte)0);
      try { 
        jSONObject1.getDouble("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000012] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("{F0VJ+c80V$?E#.d{/");
      jSONObject1.remove("isintValue");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      StringWriter stringWriter0 = new StringWriter();
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charset0);
      JSONObject.quote("CJ3", (Writer) outputStreamWriter0);
      JSONObject.quote("", (Writer) outputStreamWriter0);
      jSONObject1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("{F0VJ+c80V$?E#.d{/");
      jSONObject1.has("{F0VJ+c80V$?E#.d{/");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<DataInputStream, Short> hashMap0 = new HashMap<DataInputStream, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, jSONObject0.length());
      
      jSONObject0.has("istoString");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.doubleToString((byte)0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "0");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Integer integer0 = new Integer((byte)63);
      JSONObject jSONObject0 = new JSONObject(charBuffer0);
      JSONObject.doubleToString((byte)0);
      jSONObject0.length();
      jSONObject0.optLong((String) null, (long) 0);
      charBuffer0.flip();
      jSONObject0.write((Writer) charArrayWriter0, 1132, 1420);
      jSONObject0.has("0");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3076);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3065);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=<xJy2<}t;<nl}'";
      HashMap<Double, BufferedReader> hashMap0 = new HashMap<Double, BufferedReader>();
      JSONObject jSONObject1 = jSONObject0.put("=<xJy2<}t;<nl}'", (Map<?, ?>) hashMap0);
      stringArray0[3] = "=<xJy2<}t;<nl}'";
      jSONObject1.optString("=<xJy2<}t;<nl}'", "Nesting too dep.");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("l@r;U9/&");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "l@r;U9/&";
      stringArray0[1] = "l@r;U9/&";
      stringArray0[2] = "l@r;U9/&";
      stringArray0[3] = "l@r;U9/&";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.optDouble("l@r;U9/&");
      MockFileWriter mockFileWriter0 = new MockFileWriter("l@r;U9/&");
      jSONObject1.write((Writer) mockFileWriter0, 722, 1132);
      jSONObject2.optNumber("l@r;U9/&");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.increment("l@r;U9/&");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "l@r;U9/&";
      stringArray0[1] = "l@r;U9/&";
      stringArray0[2] = "l@r;U9/&";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.optDouble("l@r;U9/&");
      int int0 = 1132;
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter(stringArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = "{F0VJ+c80V$?E#.d{/";
      jSONObject0.increment("{F0VJ+c80V$?E#.d{/");
      try { 
        jSONObject0.append("{F0VJ+c80V$?E#.d{/", "{F0VJ+c80V$?E#.d{/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[{F0VJ+c80V$?E#.d{/] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("\f");
      jSONObject1.optLong("\f", 0L);
      try { 
        jSONObject0.append("\f", "\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\f] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/mitchell/generation-scripts/projects/json");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String string0 = "{F0VJ+c80V$?E#.d{/";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{F0VJ+c80V$?E#.d{/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 14 [character 15 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{F0VJ+c80V$?E#.d{/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 14 [character 15 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Short.valueOf((short)275);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "#A*(rLCa";
      try { 
        JSONObject.stringToNumber("#A*(rLCa");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [#A*(rLCa] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[5];
      String string0 = "NEsy{8VUV{kOt:&8";
      stringArray0[4] = "NEsy{8VUV{kOt:&8";
      HashMap<Double, BufferedReader> hashMap0 = new HashMap<Double, BufferedReader>();
      JSONObject jSONObject1 = jSONObject0.put("NEsy{8VUV{kOt:&8", (Map<?, ?>) hashMap0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[3] = stringArray0[0];
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.optDouble("NEsy{8VUV{kOt:&8");
      // Undeclared exception!
      try { 
        jSONObject1.put((String) null, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Short.valueOf((short)277);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("7q]", true);
      jSONObject0.optFloat("7q]", 0.0F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("getClass");
      JSONObject.stringToValue("JSONArray initial value should be a string or collection or array.");
      JSONObject jSONObject1 = new JSONObject((Object) "JSONArray initial value should be a string or collection or array.");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONObject jSONObject2 = new JSONObject(byteArrayInputStream0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      jSONObject2.put("$2vAo#tau)ZH?)", (Object) "getClass");
      jSONObject1.optDouble("yb}", (double) (byte)87);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.put("Duplicate key \"", (Map<?, ?>) null);
      jSONObject0.optInt("Duplicate key \"", (-1911534925));
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject0.optDouble("Duplicate key \"", (double) (-1911534925));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[5];
      stringArray0[4] = "NEsy{8VUV{kOt:&8";
      HashMap<Double, BufferedReader> hashMap0 = new HashMap<Double, BufferedReader>();
      JSONObject jSONObject1 = jSONObject0.put("NEsy{8VUV{kOt:&8", (Map<?, ?>) hashMap0);
      jSONObject1.toString((-464));
      stringArray0[3] = stringArray0[0];
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.optDouble("NEsy{8VUV{kOt:&8");
      try { 
        jSONObject2.getLong("NEsy{8VUV{kOt:&8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000023] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3076);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "NbEsy{8VUV{kOt:&8";
      HashMap<Double, BufferedReader> hashMap0 = new HashMap<Double, BufferedReader>();
      JSONObject jSONObject1 = jSONObject0.put("NbEsy{8VUV{kOt:&8", (Map<?, ?>) hashMap0);
      jSONObject1.optLong("Misplaced key.", (-1L));
      stringArray0[3] = "NbEsy{8VUV{kOt:&8";
      stringArray0[4] = "ishashCode";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.optDouble("NbEsy{8VUV{kOt:&8");
      MockFileWriter mockFileWriter0 = new MockFileWriter("names");
      jSONObject0.write((Writer) mockFileWriter0, 1132, 1420);
      jSONObject1.optNumber("NbEsy{8VUV{kOt:&8");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.doubleToString((byte)0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "0");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Integer integer0 = new Integer((byte)63);
      JSONObject jSONObject0 = new JSONObject(charBuffer0);
      jSONObject0.putOnce("0", mockPrintStream0);
      JSONObject.doubleToString((byte)0);
      jSONObject0.length();
      jSONObject0.optLong((String) null, (long) 1);
      try { 
        jSONObject0.getLong("org.json.JSONObject$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.append("0@Q$*7'a,SzM(SB", "0@Q$*7'a,SzM(SB");
      JSONObject jSONObject1 = jSONObject0.put("do", 69);
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      PipedReader pipedReader0 = new PipedReader();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject.stringToValue("0@Q$*7'a,SzM(SB");
      jSONObject1.optInt("toMap", 2177);
      BigInteger bigInteger0 = BigInteger.ONE;
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.doubleToString((byte)9);
      CharBuffer.wrap((CharSequence) "9");
      PipedReader pipedReader0 = new PipedReader();
      JSONObject.stringToValue("9");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Short.valueOf((short)277);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.isDecimalNotation("7q]");
      String[] stringArray0 = new String[3];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject((Object) "7q]");
      try { 
        jSONObject2.getBoolean(stringArray0[1]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        JSONObject.stringToNumber("7qA");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7qA\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      Character character0 = new Character('n');
      JSONObject.wrap(character0);
      try { 
        JSONObject.stringToNumber("/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [/] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Object, FilterOutputStream> hashMap0 = new HashMap<Object, FilterOutputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.writeValue(stringWriter0, hashMap0, 2835, 2835);
      StringReader stringReader0 = new StringReader("Expected a ':' after a key");
      JSONObject.valueToString("<a~<Y2:boQ@");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = "do";
      JSONObject jSONObject1 = jSONObject0.append("do", "do");
      int int0 = 69;
      JSONObject jSONObject2 = jSONObject0.put("do", 69);
      jSONObject2.accumulate("do", jSONObject1);
      try { 
        jSONObject0.getBigDecimal(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000003754] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      JSONObject jSONObject1 = jSONObject0.put("LBE|FD}:8/8j\"'", (Collection<?>) linkedList0);
      jSONObject1.optBoolean("LBE|FD}:8/8j\"'");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(55);
      JSONObject.wrap(byteArrayOutputStream0);
      jSONObject0.put("LBE|FD}:8/8j\"'", 55);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 55);
      JSONObject.wrap(pushbackInputStream0);
      jSONObject0.entrySet();
      jSONObject1.optLong("LBE|FD}:8/8j\"'", 497L);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.doubleToString((byte)0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "0");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Integer integer0 = new Integer((byte)63);
      JSONObject jSONObject0 = new JSONObject(charBuffer0);
      JSONObject.doubleToString((byte)0);
      jSONObject0.length();
      jSONObject0.optLong((String) null, (long) 0);
      jSONObject0.write((Writer) charArrayWriter0, 1132, 1420);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("{F0VJ+c80V$?E#.d{/");
      Integer integer0 = (Integer)jSONObject1.remove("{F0VJ+c80V$?E#.d{/");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      StringWriter stringWriter0 = new StringWriter();
      Short short0 = new Short((short) (-108));
      JSONObject.numberToString(integer0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      JSONObject jSONObject2 = jSONObject1.accumulate("java.lang.Integer@0000000003", locale_Category0);
      jSONObject0.toString((int) (short) (-108));
      jSONObject2.put("K65$$BD+]", (long) (short) (-108));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("{F0VJ+c80V$?E#.d{/");
      jSONObject1.optBigInteger("{F0VJ+c80V$?E#.d{/", (BigInteger) null);
      try { 
        Integer.decode("{F0VJ+c80V$?E#.d{/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{F0VJ+c80V$?E#.d{/\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3076);
      JSONObject.testValidity(jSONObject0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.optLong("Nul pointer");
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.optLong("7?)>>fWa2", (long) 3076);
      jSONObject0.append("\"\"", "Nul pointer");
      JSONObject jSONObject3 = new JSONObject(jSONObject0);
      JSONObject.stringToValue("\"\"");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Proxy.Type, ByteArrayInputStream> hashMap0 = new HashMap<Proxy.Type, ByteArrayInputStream>();
      jSONObject0.put("org.json.JSONException", (Map<?, ?>) hashMap0);
      jSONObject0.optInt("org.json.JSONException", 108);
      BigInteger bigInteger0 = BigInteger.ONE;
      Long long0 = new Long((-1700));
      JSONObject.testValidity(long0);
      jSONObject0.optNumber("org.json.JSONException", (Number) long0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      JSONObject jSONObject1 = jSONObject0.put("LBE|FD}:8/8j\"'", (Collection<?>) linkedList0);
      jSONObject1.optBoolean("LBE|FD}:8/8j\"'");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONObject0.optNumber("LBE|FD}:8/8j\"'", (Number) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(55);
      JSONObject.wrap(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)93;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 93, 60);
      jSONObject0.append("LBE|FD}:8/8j\"'", byteArrayInputStream0);
      JSONObject jSONObject2 = new JSONObject(linkedList0);
      try { 
        jSONObject2.getBoolean("getreadBoolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000021] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.doubleToString((byte)0);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      JSONObject.stringToValue("0");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.doubleToString((byte)0);
      CharBuffer.wrap((CharSequence) "0");
      PipedReader pipedReader0 = new PipedReader();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject.stringToValue("0");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = "0@Q$*7'a,Sz\\M(SB";
      JSONObject jSONObject1 = jSONObject0.append("0@Q$*7'a,SzM(SB", "0@Q$*7'a,SzM(SB");
      int int0 = 69;
      JSONObject jSONObject2 = jSONObject0.put("do", 69);
      jSONObject2.accumulate("0@Q$*7'a,SzM(SB", jSONObject1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "do");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "do");
      try { 
        jSONObject0.getBigDecimal("0@Q$*7'a,SzM(SB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000001998] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.append("0@Q$*7'a,SzM(SB", "0@Q$*7'a,SzM(SB");
      Short short0 = new Short((short)114);
      JSONObject.numberToString(short0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Boolean boolean0 = Boolean.FALSE;
      jSONObject1.accumulate("0@Q$*7'a,SzM(SB", jSONObject0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      JSONObject jSONObject1 = jSONObject0.put("LBE|FD}:8/8j\"'", (Collection<?>) linkedList0);
      jSONObject1.optBoolean("LBE|FD}:8/8j\"'");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(55);
      JSONObject.wrap(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)93;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 93, 60);
      jSONObject0.append("LBE|FD}:8/8j\"'", byteArrayInputStream0);
      JSONObject jSONObject2 = new JSONObject(linkedList0);
      String string0 = "+Z";
      boolean boolean0 = new Boolean("java.io.ByteArrayOutputStream@0000000012");
      try { 
        jSONObject1.getBoolean("java.io.ByteArrayOutputStream@0000000012");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000020] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("{F0VJ+c80V$?E#.d{/");
      jSONObject1.optBigInteger("{F0VJ+c80V$?E#.d{/", (BigInteger) null);
      jSONObject1.remove("{F0VJ+c80V$?E#.d{/");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      int int0 = 1260;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      int int1 = (-831);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "{F0VJ+c80V$?E#.d{/", (-831), 869);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-56);
      byteArray0[7] = (byte)8;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONObject0.optBigInteger("isnegate", bigInteger0);
      BigInteger bigInteger2 = jSONArray0.optBigInteger((-48641862), bigInteger1);
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger2);
      // Undeclared exception!
      try { 
        bigDecimal0.divide(bigDecimal1, (int) (byte)8, (-1911534937));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("{F0VJ+c80V$?E#.d{/");
      jSONObject1.optBigDecimal("{F0VJ+c80V$?E#.d{/", (BigDecimal) null);
      Object object0 = JSONObject.NULL;
      jSONObject0.optNumber("{F0VJ+c80V$?E#.d{/");
      try { 
        jSONObject0.getJSONArray("0}hs(_Ie*L>_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("l@r;U9/&");
      Object object0 = JSONObject.NULL;
      jSONObject0.optNumber("l@r;U9/&");
      try { 
        jSONObject1.getJSONArray("l@r;U9/&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = "0@Q$*7'a,Sz\\M(SB";
      JSONObject jSONObject1 = jSONObject0.append("0@Q$*7'a,SzM(SB", "0@Q$*7'a,SzM(SB");
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject1.optNumber("JSONArray[", (Number) bigInteger0);
      jSONObject0.put("do", 69);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "do");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "do");
      try { 
        jSONObject0.getBigDecimal("0@Q$*7'a,SzM(SB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000017] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.optBoolean("~1");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "l@r;U9/&";
      stringArray0[1] = "l@r;U9/&";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.increment("js,v:Ug{b*");
      jSONObject2.putOnce("", (Object) null);
      jSONObject0.optLong("a'25?_U2");
      JSONObject.stringToValue("l@r;U9/&");
      jSONObject1.put("ZI(BL%$L2Kwt", 0.0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("l@r;U9/&");
      Object object0 = JSONObject.NULL;
      jSONObject0.optNumber("] could not convert to BigInteger.");
      try { 
        jSONObject1.getJSONArray("l@r;U9/&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONObject0.optBigDecimal(")0QeVq~->", bigDecimal0);
      JSONObject jSONObject1 = jSONObject0.increment("l@r;U9/&");
      JSONObject.wrap((Object) null);
      jSONObject1.getInt("l@r;U9/&");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.spliterator();
      JSONObject.stringToValue("2583.4.");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "Illegal escape.";
      JSONObject.isDecimalNotation("Illegal escape.");
      int int0 = (-1568);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-1568));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1568
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.optBoolean("3sc:Z4y+");
      JSONObject jSONObject1 = jSONObject0.increment("dou");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(151);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "dou");
      jSONObject1.write((Writer) printWriter0);
      jSONObject1.optLong("org.json.JSONObject$Null");
      JSONObject.stringToValue("org.json.JSONObject$Null");
      jSONObject1.put("dou", (-3821.480124890345));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      Short short0 = new Short((short)443);
      jSONObject0.putOnce("yNvP", short0);
      JSONObject jSONObject1 = jSONObject0.increment("{F0VJ+c80V$?E#.d{/");
      Integer integer0 = (Integer)jSONObject1.remove("{F0VJ+c80V$?E#.d{/");
      JSONObject jSONObject2 = jSONObject1.put("{F0VJ+c80V$?E#.d{/", true);
      jSONObject2.toString((-5183));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      StringWriter stringWriter0 = new StringWriter();
      Short short1 = new Short((short) (-108));
      JSONObject.numberToString(integer0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      jSONObject1.accumulate("java.lang.Integer@0000000009", locale_Category0);
      JSONObject.stringToValue("Expected a ',' or ']'");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[5];
      stringArray0[4] = "NEsy{8VUV{kOt:&8";
      HashMap<Double, BufferedReader> hashMap0 = new HashMap<Double, BufferedReader>();
      jSONObject0.put("NEsy{8VUV{kOt:&8", (Map<?, ?>) hashMap0);
      stringArray0[3] = stringArray0[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optDouble("NEsy{8VUV{kOt:&8");
      try { 
        jSONObject1.getLong("NEsy{8VUV{kOt:&8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000020] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = "0@Q$*7'a,Sz\\M(SB";
      jSONObject0.append("0@Q$*7'a,SzM(SB", "0@Q$*7'a,SzM(SB");
      JSONObject jSONObject1 = jSONObject0.put("do", 69);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "do");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject1.write((Writer) charArrayWriter0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "do");
      try { 
        jSONObject1.getLong("0@Q$*7'a,SzM(SB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000020] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Map<Short, Byte> map0 = null;
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.increment("l@r;U9/&");
      String string0 = "] could not convert to BigInteger.";
      Class<DayOfWeek> class0 = DayOfWeek.class;
      DayOfWeek dayOfWeek0 = DayOfWeek.MONDAY;
      jSONObject0.optEnum(class0, "l@r;U9/&", dayOfWeek0);
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("{F0VJ+c80V$?E#.d{/");
      jSONObject1.remove("{F0VJ+c80V$?E#.d{/");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      StringWriter stringWriter0 = new StringWriter();
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charset0);
      JSONObject.quote("org.json.JSONObject$Null", (Writer) stringWriter0);
      JSONObject.quote("'", (Writer) stringWriter0);
      jSONObject0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Component.BaselineResizeBehavior, MockPrintStream> hashMap0 = new HashMap<Component.BaselineResizeBehavior, MockPrintStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.increment("6,8:<zSl_9^(>)l.G4");
      jSONObject1.optLong("6,8:<zSl_9^(>)l.G4");
      jSONObject1.optLong("", 1L);
      jSONObject0.append("] is not a JSONObject.", hashMap0);
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000018] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Short short0 = Short.valueOf((short)277);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-128);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(short0);
      PipedReader pipedReader0 = new PipedReader();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject.stringToValue("0000");
      jSONObject0.put("0000", (-1.0));
      jSONObject0.optString("0000");
      jSONObject0.toMap();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "org.json.JSONException";
      JSONObject.getNames((Object) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("l@r;U9/&");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject.quote("l@r;U9/&", (Writer) mockPrintWriter0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 1786);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONObject jSONObject0 = new JSONObject(3);
      jSONObject0.toString((-3396));
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      File file0 = MockFile.createTempFile("`}Q <8`=_132Fgh!j", "asR");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      JSONObject.indent(mockFileWriter0, 3);
      BigDecimal.valueOf(0L, 125);
      jSONObject0.optBigDecimal("asR", bigDecimal0);
      JSONObject.quote("java.io.StringWriter@0000000002");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("$9s0>_(M!@\"mV?", true);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject.writeValue(mockFileWriter0, jSONArray0, 358, (-6));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      String string0 = JSONObject.numberToString(bigDecimal0);
      assertNotNull(string0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = 16;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2375, 16);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      JSONObject jSONObject0 = new JSONObject(charArrayWriter0);
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.markSupported();
      JSONObject jSONObject1 = jSONObject0.append("java.math.BigDecimal@0000000001", pipedReader0);
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        jSONObject1.getBoolean("java.math.BigDecimal@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("{F0VJ+c80V$?E#.d{/");
      jSONObject1.remove("{F0VJ+c80V$?E#.d{/");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream("{F0VJ+c80V$?E#.d{/");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte) (-102);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-1.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONObject.numberToString(bigDecimal0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(charArrayWriter0);
      PipedReader pipedReader0 = new PipedReader();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      charArrayWriter0.append((CharSequence) "java.math.BigDecimal@0000000001");
      JSONObject.stringToValue("0000");
      JSONObject jSONObject1 = jSONObject0.put("java.math.BigDecimal@0000000001", 1402.010284777142);
      jSONObject1.optString("Y =");
      jSONObject0.toMap();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      jSONObject1.query(jSONPointer0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("l@r;U9/&");
      jSONObject1.optLong("<a~<Y2:boQ@");
      jSONObject1.optLong("<a~<Y2:boQ@", 0L);
      Byte byte0 = new Byte((byte) (-102));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "<a~<Y2:boQ@";
      stringArray0[2] = "] is not a JSONObject.";
      stringArray0[3] = "] is not a JSONObject.";
      stringArray0[4] = "l@r;U9/&";
      stringArray0[5] = "] is not a JSONObject.";
      stringArray0[6] = "bPc&.d5y ";
      stringArray0[7] = "] is not a JSONObject.";
      stringArray0[8] = "] is not a JSONObject.";
      JSONObject jSONObject2 = new JSONObject(byte0, stringArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject2.optBigInteger("toU", bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject.doubleToString((byte)14);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "14");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      JSONObject jSONObject0 = new JSONObject(charBuffer0);
      jSONObject0.increment("14");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      JSONObject jSONObject1 = jSONObject0.put("LBE|FD}:8/8j\"'", (Collection<?>) linkedList0);
      jSONObject1.append("LBE|FD}:8/8j\"'", hashMap0);
      JSONObject jSONObject2 = jSONObject0.increment("wPmGBP]S2f.l<X+Y");
      try { 
        jSONObject2.getBigInteger("LBE|FD}:8/8j\"'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000031] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Short.valueOf((short)277);
      JSONObject jSONObject0 = new JSONObject();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("a JSON pointer should start with '/' or '#/'", false);
      Float float0 = new Float((float) (short)277);
      JSONObject jSONObject1 = new JSONObject(float0);
      HashMap<DayOfWeek, Locale.FilteringMode> hashMap0 = new HashMap<DayOfWeek, Locale.FilteringMode>();
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject3 = jSONObject2.put("a JSON pointer should start with '/' or '#/'", true);
      jSONObject3.optBoolean("a JSON pointer should start with '/' or '#/'");
      JSONObject.wrap("available");
      PipedInputStream pipedInputStream0 = new PipedInputStream(39);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("{F0VJ+c80V$?E#.d{/");
      jSONObject1.remove("{F0VJ+c80V$?E#.d{/");
      MockPrintStream mockPrintStream0 = new MockPrintStream("{F0VJ+c80V$?E#.d{/");
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charset0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("{F0VJ+c80V$?E#.d{/");
      jSONObject0.keySet();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Integer integer0 = new Integer(3276);
      JSONObject jSONObject0 = new JSONObject(integer0);
      Class<Authenticator.RequestorType> class0 = Authenticator.RequestorType.class;
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      jSONObject0.optEnum(class0, "D=Gr!?:(M27L9M$L<~", authenticator_RequestorType0);
      jSONObject0.keys();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      try { 
        JSONObject.stringToNumber("18qkFc?hT&R.u");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3076);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      JSONObject jSONObject1 = new JSONObject(bigInteger0);
      JSONObject jSONObject2 = jSONObject1.increment("]");
      jSONObject0.remove("!nM&irS");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charset0);
      JSONObject.quote("'", (Writer) outputStreamWriter0);
      JSONObject.quote("]", (Writer) outputStreamWriter0);
      jSONObject2.isEmpty();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONObject.numberToString(bigDecimal0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(charArrayWriter0);
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.markSupported();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject.stringToValue("0000");
      JSONObject jSONObject1 = jSONObject0.put("java.math.BigDecimal@0000000001", 1402.010284777142);
      jSONObject1.optString("Y =");
      jSONObject0.toMap();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<DataInputStream, Short> hashMap0 = new HashMap<DataInputStream, Short>();
      String string0 = "5/ I";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("5/ I");
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONObject.numberToString(bigDecimal0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2382, 16);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(charArrayWriter0);
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.markSupported();
      JSONObject jSONObject1 = jSONObject0.append("java.math.BigDecimal@0000000001", pipedReader0);
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONObject jSONObject2 = jSONObject0.put("java.math.BigDecimal@0000000001", 2735.0F);
      JSONObject.getNames(jSONObject2);
      Class<Component.BaselineResizeBehavior> class0 = Component.BaselineResizeBehavior.class;
      jSONObject0.optEnum(class0, "java.math.BigDecimal@0000000001");
      Class<TrayIcon.MessageType> class1 = TrayIcon.MessageType.class;
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.ERROR;
      jSONObject1.optEnum(class1, "b=!M'l5ev<sMR8&!HE*", trayIcon_MessageType0);
      try { 
        jSONObject0.getString("java.math.BigDecimal@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000014] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.doubleToString((byte)0);
      CharBuffer.wrap((CharSequence) "0");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Integer integer0 = new Integer((byte)63);
      JSONObject jSONObject0 = new JSONObject(integer0);
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      JSONObject jSONObject1 = jSONObject0.append("0", charArrayWriter0);
      jSONObject0.optJSONObject("0");
      jSONObject1.optLong("0", (long) (byte)63);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("{F0VJ+c80V$?E#.d{/");
      jSONObject1.remove("{F0VJ+c80V$?E#.d{/");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.increment("{F0VJ+c80V$?E#.d{/");
      jSONObject0.toMap();
      JSONObject.stringToValue("{F0VJ+c80V$?E#.d{/");
      jSONObject1.put("{F0VJ+c80V$?E#.d{/", (double) (short) (-108));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Object, FilterOutputStream> hashMap0 = new HashMap<Object, FilterOutputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "doubleValue";
      jSONObject0.append("doubleValue", hashMap0);
      try { 
        jSONObject0.increment("doubleValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000011].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Short.valueOf((short)277);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("7q]", true);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "7q]";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject1, stringArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject3 = jSONObject2.accumulate("|Be^p3%d'BEFIGB_", bigInteger0);
      jSONObject3.optFloat("~0", (-2398.0F));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)63;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.doubleToString((byte)0);
      CharBuffer.wrap((CharSequence) "0");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      JSONObject.quote("Q+#", (Writer) mockPrintWriter0);
      HashMap<JDBCType, StandardProtocolFamily> hashMap0 = new HashMap<JDBCType, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optString("0", "Q+#");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("{F0VJ+c80V$?E#.d{/");
      jSONObject1.optBigDecimal("{F0VJ+c80V$?E#.d{/", (BigDecimal) null);
      double double0 = 0.0;
      Float float0 = new Float(0.0);
      JSONObject jSONObject2 = new JSONObject();
      try { 
        jSONObject1.getBoolean("==vUQiOQK`rBe/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("{F0VJ+c80V$?E#.d{/");
      LinkedList<InputStreamReader> linkedList0 = new LinkedList<InputStreamReader>();
      jSONObject0.put("{F0VJ+c80V$?E#.d{/", (Collection<?>) linkedList0);
      jSONObject1.optBigInteger("{F0VJ+c80V$?E#.d{/", (BigInteger) null);
      try { 
        Integer.decode("{F0VJ+c80V$?E#.d{/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{F0VJ+c80V$?E#.d{/\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("{F0VJ+c80V$?E#.d{/");
      jSONObject1.optBigInteger("", (BigInteger) null);
      Integer integer0 = (Integer)jSONObject1.remove("{F0VJ+c80V$?E#.d{/");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)64;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Short short0 = new Short((short) (-108));
      JSONObject.numberToString(integer0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      jSONObject1.accumulate("java.lang.Integer@0000000003", locale_Category0);
      jSONObject0.get("java.lang.Integer@0000000003");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.optBigInteger("{O~[Vw-{'U:", (BigInteger) null);
      JSONObject.stringToValue(".");
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("x+k2N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3076);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "to");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "NbEsy{8VUV{kOt:&8";
      HashMap<Double, BufferedReader> hashMap0 = new HashMap<Double, BufferedReader>();
      jSONObject0.put("NbEsy{8VUV{kOt:&8", (Map<?, ?>) hashMap0);
      stringArray0[3] = "ishashCode";
      stringArray0[4] = "Null key.";
      Short short0 = new Short((short) (-395));
      JSONObject.numberToString(short0);
      jSONObject0.opt((String) null);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      String string0 = null;
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      JSONObject jSONObject1 = jSONObject0.put("LBE|FD}:8/8j\"'", (Collection<?>) linkedList0);
      jSONObject1.optBoolean("LBE|FD}:8/8j\"'");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(55);
      JSONObject.wrap(byteArrayOutputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      JSONObject.wrap(pushbackInputStream0);
      jSONObject0.entrySet();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<Object, FilterOutputStream> hashMap0 = new HashMap<Object, FilterOutputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject.doubleToString((-3548.3484684906));
      CharBuffer.wrap((CharSequence) "X");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charset0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, false);
      String string0 = "toString";
      JSONObject.quote("toString", (Writer) mockPrintWriter0);
      try { 
        jSONObject0.getDouble("' and instead saw ''");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3076);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "NbEsy{8VUV{kOt:&8";
      HashMap<Double, BufferedReader> hashMap0 = new HashMap<Double, BufferedReader>();
      JSONObject jSONObject1 = jSONObject0.put("NbEsy{8VUV{kOt:&8", (Map<?, ?>) hashMap0);
      jSONObject1.optInt((String) null, 3076);
      stringArray0[3] = "ishashCode";
      stringArray0[4] = "Null key.";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.optDouble("NbEsy{8VUV{kOt:&8");
      jSONObject0.optInt("Null key.");
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)123;
      HashMap<Resource.AuthenticationType, BigInteger> hashMap0 = new HashMap<Resource.AuthenticationType, BigInteger>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.remove("(v.<");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      StringWriter stringWriter0 = new StringWriter();
      Short short0 = new Short((byte)0);
      JSONObject.numberToString(short0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      JSONObject jSONObject1 = jSONObject0.put("LBE|FD}:8/8j\"'", (Collection<?>) linkedList0);
      jSONObject1.append("LBE|FD}:8/8j\"'", hashMap0);
      String string0 = "wPmGBP]S2f.l<X+Y";
      JSONObject jSONObject2 = jSONObject0.increment("wPmGBP]S2f.l<X+Y");
      try { 
        jSONObject2.getBigInteger("LBE|FD}:8/8j\"'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000031] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = 3076;
      JSONObject jSONObject0 = new JSONObject(3076);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "NbEsy{8VUV{kOt:&8";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      MockFile mockFile0 = new MockFile("NbEsy{8VUV{kOt:&8");
      MockFile mockFile1 = new MockFile(mockFile0, "NbEsy{8VUV{kOt:&8");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      PrintWriter printWriter0 = mockPrintWriter0.format("NbEsy{8VUV{kOt:&8", (Object[]) stringArray0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(printWriter0, 1594);
      Writer writer0 = JSONObject.quote("NbEsy{8VUV{kOt:&8", (Writer) bufferedWriter0);
      jSONObject0.toMap();
      String string0 = "u9#(s";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Rud#}%HG+TvX!%Q");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NbEsy{8VUV{kOt:&8");
      Object object0 = new Object();
      JSONObject.testValidity(object0);
      jSONObject0.putOpt("Null key.", writer0);
      try { 
        jSONObject0.getFloat(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)73;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "B{O@'&l-)";
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject.indent((Writer) null, (-1503));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<DataInputStream, Short> hashMap0 = new HashMap<DataInputStream, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Double double0 = (Double)JSONObject.stringToValue("-0");
      JSONObject.numberToString(double0);
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      JSONObject.wrap(roundingMode0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = "{F0VJ+c80V$?E#.d{/";
      JSONObject jSONObject1 = jSONObject0.increment("{F0VJ+c80V$?E#.d{/");
      BigDecimal bigDecimal0 = null;
      jSONObject1.optBigDecimal("{F0VJ+c80V$?E#.d{/", (BigDecimal) null);
      Float float0 = new Float(0.0);
      String string1 = "\"sMI0y}TxWP^";
      jSONObject0.putOnce("\"sMI0y}TxWP^", jSONObject1);
      try { 
        jSONObject1.getBoolean("ishashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000003063] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("{F0VJ+c80V$?E#.d{/");
      jSONObject1.optBigDecimal("{F0VJ+c80V$?E#.d{/", (BigDecimal) null);
      Object object0 = JSONObject.NULL;
      String string0 = "0}hs(_I\\e*L>_";
      try { 
        jSONObject0.getJSONArray("0}hs(_Ie*L>_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.put("Duplicate key \"", (Map<?, ?>) null);
      jSONObject0.optInt("Duplicate key \"", (-1911534925));
      BigInteger bigInteger0 = BigInteger.ONE;
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.optInt("8QA%^feio8[OQmY");
      JSONObject jSONObject1 = new JSONObject();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Double double0 = new Double((-1638.427));
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JSONObject.testValidity(sequenceInputStream0);
      JSONObject jSONObject0 = new JSONObject(sequenceInputStream0);
      jSONObject0.put("{5I1", false);
      jSONObject0.names();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.doubleToString((byte)0);
      CharBuffer.wrap((CharSequence) "0");
      Integer integer0 = new Integer((byte)0);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.append("0", charArrayWriter0);
      String string0 = ",r.O_@VC=";
      try { 
        jSONObject1.getBoolean("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      JSONObject jSONObject1 = jSONObject0.put("LBE|FD}:8/8j\"'", (Collection<?>) linkedList0);
      jSONObject1.optBoolean("LBE|FD}:8/8j\"'");
      CharBuffer.wrap((CharSequence) "LBE|FD}:8/8j\"'");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      JSONObject.stringToValue("L7S>Y");
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      JSONObject jSONObject1 = jSONObject0.put("LBE|FD}:8/8j\"'", (Collection<?>) linkedList0);
      jSONObject1.optBoolean("LBE|FD}:8/8j\"'");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(55);
      JSONObject.wrap(byteArrayOutputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      JSONObject.wrap(pushbackInputStream0);
      try { 
        jSONObject0.getInt("getbyteValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000014] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONObject.numberToString(bigDecimal0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2382, 16);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      JSONObject jSONObject0 = new JSONObject(charArrayWriter0);
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.markSupported();
      jSONObject0.append("java.math.BigDecimal@0000000001", pipedReader0);
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONObject jSONObject1 = jSONObject0.put("java.math.BigDecimal@0000000001", 2735.0F);
      JSONObject.getNames(jSONObject1);
      Class<Component.BaselineResizeBehavior> class0 = Component.BaselineResizeBehavior.class;
      jSONObject0.optEnum(class0, "java.math.BigDecimal@0000000001");
      try { 
        jSONObject0.getString("java.math.BigDecimal@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000014] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      JSONObject jSONObject1 = jSONObject0.put("LBE|FD}:8/8j\"'", (Collection<?>) linkedList0);
      jSONObject0.names();
      try { 
        jSONObject1.getString("LBE|FD}:8/8j\"'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000012] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "V";
      JSONObject jSONObject1 = jSONObject0.put("V", 0.0);
      int int0 = (-1469);
      jSONObject1.toString((-1469));
      String string1 = "{:";
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = "{F0VJ+c80V$?E#.d{/";
      JSONObject jSONObject1 = jSONObject0.increment("{F0VJ+c80V$?E#.d{/");
      BigDecimal bigDecimal0 = null;
      jSONObject1.optBigDecimal("{F0VJ+c80V$?E#.d{/", (BigDecimal) null);
      Float float0 = new Float(0.0);
      jSONObject1.toString(4);
      jSONObject1.putOnce("issize", float0);
      String string1 = "\"sMI0y}TxWP^";
      jSONObject0.putOnce("\"sMI0y}TxWP^", jSONObject1);
      try { 
        jSONObject1.getBoolean("ishashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000003038] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("V", 0.0);
      jSONObject1.toString((-1444));
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = "p^kK";
      JSONObject.stringToValue("p^kK");
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject jSONObject1 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject1.optQuery("p^kK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      short short0 = (short)486;
      Short short1 = new Short((short)486);
      String[] stringArray0 = new String[9];
      stringArray0[8] = "CGTAtG]8&`}U}0Rsa)";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("CGTAtG]8&`}U}0Rsa)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONObject("VUJpF?ICoob.@{");
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-52);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1333), 2382);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      dataInputStream0.mark(13);
      JSONObject jSONObject0 = new JSONObject(dataInputStream0);
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      JSONObject jSONObject1 = jSONObject0.append("0000", roundingMode0);
      jSONObject1.optJSONObject("0000");
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HashMap<Object, FilterOutputStream> hashMap0 = new HashMap<Object, FilterOutputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "X";
      stringArray0[1] = "X";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charset0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, false);
      JSONObject.quote(">O", (Writer) outputStreamWriter0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = charset0.aliases();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      jSONObject0.optQuery(jSONPointer0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONPointer jSONPointer0 = new JSONPointer("");
      jSONObject0.optQuery(jSONPointer0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Float float0 = new Float(1.0);
      JSONObject.stringToValue("<a~<Y2:boQ@");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optFloat("<a~<Y2:boQ@");
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[9];
      stringArray0[8] = "CGTAtG]8&`}U}0Rsa)";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      PipedReader pipedReader0 = new PipedReader(57);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      pipedWriter0.write("JSON does not allow non-finite numbers.");
      jSONObject2.write((Writer) pipedWriter0);
      jSONObject1.optString("");
      jSONObject0.length();
      jSONObject0.optFloat("tP|-");
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedWriter pipedWriter0 = new PipedWriter();
      jSONObject0.similar(pipedWriter0);
      JSONObject.wrap(pipedWriter0);
      jSONObject0.putOnce("true", "true");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject.testValidity(double0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.similar(double0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONObject0.toString();
      jSONObject0.optLong("");
      jSONObject0.optDouble("}k/1kI*<h$");
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3076);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "NbEsy{8VUV{kOt:&8";
      HashMap<Double, BufferedReader> hashMap0 = new HashMap<Double, BufferedReader>();
      JSONObject jSONObject1 = jSONObject0.put("NbEsy{8VUV{kOt:&8", (Map<?, ?>) hashMap0);
      stringArray0[3] = "ishashCode";
      stringArray0[4] = "Null key.";
      jSONObject1.optLong("ishashCode", 2865L);
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject3 = jSONObject1.increment("Null key.");
      jSONObject3.opt("javax.org.evosuite.shaded.org.mockito.codegen");
      jSONObject1.optBoolean("ishashCode");
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      JSONObject jSONObject1 = jSONObject0.put("LBE|FD}:8/8j\"'", (Collection<?>) linkedList0);
      jSONObject1.append("LBE|FD}:8/8j\"'", hashMap0);
      JSONObject.stringToValue("@$)k9T(%}70Mw8$C/y");
      jSONObject1.put("\f", 1402.010284777142);
      jSONObject1.optString("\f");
      jSONObject1.toMap();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3076);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "NbEsy{8VUV{kOt:&8";
      stringArray0[1] = "v-`$7E/TPfvQ|7RO";
      stringArray0[2] = "Y =";
      JSONObject jSONObject1 = jSONObject0.increment("O?9r(`!Nkq");
      jSONObject1.toMap();
      JSONObject.stringToValue("NbEsy{8VUV{kOt:&8");
      jSONObject1.put("Y =", (double) 3076);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[5];
      stringArray0[4] = "NEsy{8VUV{kOt:&8";
      HashMap<Double, BufferedReader> hashMap0 = new HashMap<Double, BufferedReader>();
      jSONObject0.put("NEsy{8VUV{kOt:&8", (Map<?, ?>) hashMap0);
      stringArray0[3] = stringArray0[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("O>pw2k");
      jSONObject1.write((Writer) mockFileWriter0);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = "do";
      jSONObject0.append("0@Q$*7'a,SzMSB", "0@Q$*7'a,SzMSB");
      jSONObject0.put("do", 78);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "do");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "do");
      try { 
        jSONObject0.getBigDecimal("0@Q$*7'a,SzMSB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000017] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = "do";
      String string1 = "0@Q$*7'a,Sz\\M(SB";
      jSONObject0.append("0@Q$*7'a,SzM(SB", "0@Q$*7'a,SzM(SB");
      int int0 = 69;
      jSONObject0.put("do", 69);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "do");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "do");
      try { 
        jSONObject0.getBigDecimal("0@Q$*7'a,SzM(SB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000017] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Short.valueOf((short)277);
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = new Boolean(true);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "7q]";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("{gQBTfst", (float) (short)277);
      jSONObject2.getNumber("{gQBTfst");
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject.testValidity(double0);
      Double double1 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double1);
      jSONObject0.optLong("1");
      jSONObject0.optLong("1", (-3019L));
      JSONObject jSONObject1 = new JSONObject();
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      jSONObject0.put("1", (Collection<?>) linkedList0);
      JSONObject jSONObject2 = jSONObject0.put("1", 0.0F);
      jSONObject2.getNumber("1");
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0);
      JSONObject jSONObject1 = new JSONObject(lineNumberReader0);
      JSONObject jSONObject2 = jSONObject1.putOpt("doubleValue", pipedReader0);
      try { 
        jSONObject2.putOnce("doubleValue", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"doubleValue\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Double double0 = new Double((-1638.427));
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JSONObject.testValidity(sequenceInputStream0);
      JSONObject jSONObject0 = new JSONObject(sequenceInputStream0);
      JSONObject jSONObject1 = jSONObject0.put("{5I1", false);
      jSONObject1.optBoolean("Expected '");
      JSONObject.wrap(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      JSONObject.wrap(bufferedInputStream0);
      try { 
        jSONObject1.getInt("getbyteValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000021] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("{", true);
      JSONObject.testValidity("{");
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockFileWriter0);
      jSONObject0.optFloat("AdVIV", 0.0F);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.increment("l@r;U9/&");
      Object object0 = JSONObject.NULL;
      jSONObject0.optString("] could not convert to BigInteger.");
      jSONObject0.toMap();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("l@r;U9/&");
      jSONObject0.similar("l@r;U9/&");
      jSONObject1.optString("l@r;U9/&");
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "CGTAtG]8&`}U}0Rsa)";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      PipedReader pipedReader0 = new PipedReader(57);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      jSONObject2.write((Writer) pipedWriter0);
      jSONObject1.optString("");
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3076);
      JSONObject.testValidity(jSONObject0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String string0 = "Null pointer";
      jSONObject1.optLong("Null pointer");
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.optLong("7?)>>fWa2", 1872L);
      JSONObject jSONObject3 = jSONObject0.append("\"\"", "Null pointer");
      JSONObject jSONObject4 = new JSONObject(jSONObject0);
      jSONObject3.optBoolean("7?)>>fWa2", false);
      try { 
        jSONObject2.getBoolean("GdY&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HashMap<Object, FilterOutputStream> hashMap0 = new HashMap<Object, FilterOutputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "X";
      JSONObject jSONObject1 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader(3583);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONObject.numberToString(bigDecimal0);
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JSONObject.getNames((Object) sequenceInputStream0);
      jSONObject1.optNumber(":dIe_(h5A");
      try { 
        jSONObject1.getJSONArray("dou");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = "{F0VJ+c80V$?E#.d{/";
      JSONObject jSONObject1 = jSONObject0.increment("{F0VJ+c80V$?E#.d{/");
      jSONObject1.remove("{F0VJ+c80V$?E#.d{/");
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.put("{F0VJ+c80V$?E#.d{/", 69);
      JSONObject.getNames((Object) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{F0VJ+c80V$?E#.d{/");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{F0VJ+c80V$?E#.d{/");
      String string1 = "av3r*>";
      Locale locale0 = Locale.JAPAN;
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject("av3r*>", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name av3r*>, locale ja_JP
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject.getNames((Object) jSONArray0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Double double0 = new Double((-56.48095));
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JSONObject.testValidity(double0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject jSONObject0 = new JSONObject(pipedOutputStream0);
      JSONObject jSONObject1 = jSONObject0.increment(";!_Xl");
      jSONObject1.remove("int");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(objectOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream1, charset0);
      JSONObject.quote((String) null, (Writer) outputStreamWriter0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      try { 
        jSONObject0.getEnum(class0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("Unableto write JSONArray value at index: ", "Unableto write JSONArray value at index: ");
      try { 
        jSONObject0.getFloat("istoCharArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject.stringToValue("[");
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject.stringToValue("00");
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HashMap<DataInputStream, Short> hashMap0 = new HashMap<DataInputStream, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject.stringToValue("-0");
      jSONObject0.put("-0", false);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject.stringToValue("-0");
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3076);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "NbEsy{8VUV{kOt:&8";
      stringArray0[1] = "v-`$7E/TPfvQ|7RO";
      stringArray0[2] = "Y =";
      JSONObject jSONObject1 = jSONObject0.increment("O?9r(`!Nkq");
      JSONObject.stringToValue("NbEsy{8VUV{kOt:&8");
      jSONObject1.put("Y =", (double) 3076);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[9];
      stringArray0[8] = "CGTAtG]8&`}U}0Rsa)";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.remove("].");
      jSONObject0.optBigDecimal("islongValue", (BigDecimal) null);
      Float float0 = new Float((float) (short)0);
      JSONObject.wrap(float0);
      try { 
        jSONObject0.getInt("Duplicate key \"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000012] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3076);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "NbEsy{8VUV{kOt:&8";
      HashMap<Double, BufferedReader> hashMap0 = new HashMap<Double, BufferedReader>();
      jSONObject0.put("NbEsy{8VUV{kOt:&8", (Map<?, ?>) hashMap0);
      stringArray0[3] = "ishashCode";
      stringArray0[4] = "Null key.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optDouble("NbEsy{8VUV{kOt:&8");
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Proxy.Type, ByteArrayInputStream> hashMap0 = new HashMap<Proxy.Type, ByteArrayInputStream>();
      JSONObject jSONObject1 = jSONObject0.put("org.json.JSONException", (Map<?, ?>) hashMap0);
      jSONObject0.optInt("org.json.JSONException", 108);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject1.optDouble("org.json.JSONException", (double) (-1700));
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Double double0 = new Double(1150.78902580706);
      JSONObject.testValidity(double0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optLong("");
      jSONObject0.optLong("", (-3019L));
      jSONObject0.append("", double0);
      JSONObject jSONObject1 = jSONObject0.put("{5I1", true);
      jSONObject1.optBoolean("Null key.");
      Object object0 = new Object();
      JSONObject.wrap(object0);
      try { 
        jSONObject1.getInt("aMA0+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000026] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream1, charset0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, true);
      JSONObject.quote("RKWZk8bzTPdab7\"Z_", (Writer) outputStreamWriter0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3076);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "NbEsy{8VUV{kOt:&8";
      stringArray0[1] = "v-`$7E/TPfvQ|7RO";
      stringArray0[2] = "Y =";
      stringArray0[3] = "ishashCode";
      stringArray0[4] = "Null key.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optDouble("NbEsy{8VUV{kOt:&8");
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = "getfloatValue";
      JSONObject.quote("getfloatValue");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("getfloatValue", "aaj{rIb]7+F%LW");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // aaj{rIb]7+F%LW
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3474);
      HashMap<ProcessBuilder.Redirect.Type, PipedReader> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, PipedReader>();
      jSONObject0.put("GL9MP(~FeM(ZG: ", (Map<?, ?>) hashMap0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject.doubleToString((byte)0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject.doubleToString(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)63;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.doubleToString((byte)0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "0");
      int int0 = (-990);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) charBuffer0, 14, (-990));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Double double0 = new Double((-1638.427));
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JSONObject.testValidity(sequenceInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      HashMap<DataInputStream, Short> hashMap0 = new HashMap<DataInputStream, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject0.remove("{F0VJ+c80V$?E#.d{/");
      jSONObject1.optBigDecimal("{F0VJ+c80V$?E#.d{/", (BigDecimal) null);
      JSONObject.wrap((Object) null);
      try { 
        jSONObject0.getInt("Missing value");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject.testValidity((Object) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject jSONObject0 = new JSONObject(pipedWriter0);
      jSONObject0.optLong("");
      jSONObject0.optLong("", (-1962L));
      Integer integer0 = new Integer((short)277);
      JSONObject jSONObject1 = jSONObject0.append("getbyteValue", integer0);
      jSONObject1.put("", true);
      try { 
        jSONObject1.getBoolean("-DSPCc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.optBoolean("dou");
      JSONObject.stringToValue("dou");
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = "{F0VJ+c80V$?E#.d{/";
      JSONObject jSONObject1 = jSONObject0.increment("{F0VJ+c80V$?E#.d{/");
      BigDecimal bigDecimal0 = null;
      jSONObject1.remove("{F0VJ+c80V$?E#.d{/");
      jSONObject1.optBigDecimal("{F0VJ+c80V$?E#.d{/", (BigDecimal) null);
      Float float0 = new Float(0.0);
      String string1 = "\"sMI0y}TxWP^";
      jSONObject0.putOnce("\"sMI0y}TxWP^", jSONObject1);
      try { 
        jSONObject1.getBoolean("ishashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000003063] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Double double0 = new Double(1150.78902580706);
      JSONObject.testValidity(double0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = "";
      jSONObject0.optLong("");
      jSONObject0.optLong("", (-3019L));
      jSONObject0.append("", double0);
      JSONObject jSONObject1 = jSONObject0.put("{5I1", true);
      jSONObject1.optBoolean("Null key.");
      Float float0 = new Float(3699.5424176);
      try { 
        jSONObject1.putOnce("{5I1", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"{5I1\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      HashMap<Object, FilterOutputStream> hashMap0 = new HashMap<Object, FilterOutputStream>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject jSONObject2 = jSONObject1.putOpt("doubleValue", jSONObject0);
      try { 
        jSONObject2.putOnce("doubleValue", jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"doubleValue\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)63;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      dataInputStream0.mark((byte)22);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject1 = new JSONObject(dataInputStream0);
      String string0 = null;
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-52);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1333), 2382);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      JSONObject jSONObject0 = new JSONObject(dataInputStream0);
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (double) (byte) (-52));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject.testValidity(double0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString();
      jSONObject0.optLong("");
      jSONObject0.increment("int");
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      HashMap<DataInputStream, Short> hashMap0 = new HashMap<DataInputStream, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.has("\f");
      jSONObject0.keys();
      jSONObject0.increment("\f");
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("l@r;U9/&");
      jSONObject0.optLong("isnames");
      jSONObject1.optLong("w1?YT0elYe4(?J4r;p", 9L);
      jSONObject0.append("w1?YT0elYe4(?J4r;p", "isnames");
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject1.getJSONObject("isnames");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000017] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject.doubleToString(5617.41);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("5/ I");
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      jSONObject1.put(".", (Object) locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-52);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1333), 2382);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      JSONObject jSONObject0 = new JSONObject(dataInputStream0);
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      JSONObject jSONObject1 = jSONObject0.put("0000", (float) (byte) (-52));
      JSONObject.getNames(jSONObject1);
      Class<Component.BaselineResizeBehavior> class0 = Component.BaselineResizeBehavior.class;
      jSONObject1.optEnum(class0, "0000");
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONObject.valueToString("7q]");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_ABSENT;
      hashMap0.put((Integer) null, cardTerminals_State0);
      int int0 = 4088;
      JSONObject.valueToString(cardTerminals_State0);
      HashMap<Integer, CardTerminals.State> hashMap1 = new HashMap<Integer, CardTerminals.State>();
      Integer integer0 = new Integer(4088);
      CardTerminals.State cardTerminals_State1 = CardTerminals.State.CARD_REMOVAL;
      hashMap1.put(integer0, cardTerminals_State1);
      Integer integer1 = new Integer(4088);
      CardTerminals.State cardTerminals_State2 = CardTerminals.State.CARD_REMOVAL;
      hashMap0.put(integer1, cardTerminals_State2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.io.StringWriter@0000000002");
      CardTerminals.State cardTerminals_State3 = CardTerminals.State.CARD_INSERTION;
      hashMap1.put((Integer) null, cardTerminals_State3);
      hashMap0.putAll(hashMap1);
      CardTerminals.State cardTerminals_State4 = CardTerminals.State.CARD_INSERTION;
      hashMap0.put((Integer) null, cardTerminals_State4);
      jSONObject0.remove("kzY3?.hT@CGlJ8DwJ");
      try { 
        jSONObject0.getString("K_Q2HL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject.testValidity(double0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject.wrap("] could not convert to BigInteger.");
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject1.putOnce("] not a string.", jSONObject0);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject0.length();
      jSONObject0.put("kQ", (long) 0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject.testValidity(double0);
      String[] stringArray0 = new String[2];
      String string0 = "?,D";
      stringArray0[0] = "?,D";
      stringArray0[1] = "KE;dF";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      String string1 = "] not a string.";
      jSONObject0.put("] not a string.", (-1L));
      JSONObject.getNames((Object) "?,D");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-52);
      HashMap<BigInteger, Character.UnicodeScript> hashMap0 = new HashMap<BigInteger, Character.UnicodeScript>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "%s is not an array index";
      try { 
        jSONObject0.put("%s is not an array index", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "CGTAtG]8&`}U}0Rsa)";
      stringArray0[1] = "w&V:qY61o<]5";
      stringArray0[2] = "~1";
      stringArray0[3] = "' and instead saw '";
      stringArray0[8] = "";
      stringArray0[5] = "";
      stringArray0[6] = "X";
      stringArray0[7] = "`JL2m=";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charset0);
      String string0 = "\\u";
      JSONObject.quote(string0, (Writer) outputStreamWriter0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("{F0VJ+c80V$?E#.d{/");
      jSONObject1.remove("{F0VJ+c80V$?E#.d{/");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream1, charset0);
      JSONObject.quote("5V<k6;/^N1d]C5(:^v", (Writer) outputStreamWriter0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      HashMap<Object, FilterOutputStream> hashMap0 = new HashMap<Object, FilterOutputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "X";
      stringArray0[1] = "X";
      JSONObject jSONObject1 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.putOpt("flo", "' and instead saw '");
      // Undeclared exception!
      try { 
        jSONObject0.query("' and instead saw '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = "] could not convert to BigDecimal.";
      jSONObject0.append("] could not convert to BigDecimal.", (Object) null);
      try { 
        jSONObject0.getBigInteger("#=i__RW40K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.doubleToString((byte) (-3));
      CharBuffer.wrap((CharSequence) "-3");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        JSONObject.stringToNumber("-K7Vg!Rz+4Na0O#Im");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject.testValidity(double0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optLong("");
      jSONObject0.optLong("", (-3019L));
      jSONObject0.append("", double0);
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      jSONObject0.put("", (Collection<?>) linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("s`", 0.0F);
      try { 
        jSONObject1.getNumber("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000036] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.append("0@Q$*7'a,SzMSB", "0@Q$*7'a,SzMSB");
      Integer integer0 = new Integer((-1700));
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject1.optDouble("0@Q$*7'a,SzMSB", 0.0);
      try { 
        jSONObject0.getNumber("0@Q$*7'a,SzMSB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("@] ':y[#7#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [@] ':y[#7#] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "eTqo";
      stringArray0[1] = "] is not a long.";
      stringArray0[2] = "";
      stringArray0[3] = "eTqo";
      stringArray0[4] = "pointer cannot be null";
      stringArray0[5] = "] is not a long.";
      stringArray0[6] = "";
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      PipedReader pipedReader0 = new PipedReader(57);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      jSONObject0.write((Writer) pipedWriter0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONObject.numberToString(bigDecimal0);
      jSONObject0.optNumber("eTqo");
      Class<Window.Type> class0 = Window.Type.class;
      jSONObject0.optEnum(class0, "eTqo");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONObject.numberToString(bigDecimal0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONObject jSONObject0 = new JSONObject(charArrayWriter0);
      PipedReader pipedReader0 = new PipedReader();
      JSONObject jSONObject1 = jSONObject0.append("java.math.BigDecimal@0000000001", pipedReader0);
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONObject1.optJSONArray("java.math.BigDecimal@0000000001");
      Locale locale0 = Locale.ITALIAN;
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Double double0 = new Double(1150.78902580706);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optLong("getshortValue");
      jSONObject0.put(".", 0.0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale.getISOLanguages();
      JSONObject.getNames((Object) "org.json.JSONExcption");
      JSONObject.testValidity("org.json.JSONExcption");
      jSONObject0.optJSONArray("org.json.JSONTokener");
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "] is not a long.";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[1] = "eTqo";
      stringArray0[2] = "pointer cannot be null";
      stringArray0[3] = "pointer cannot be null";
      stringArray0[4] = "";
      String[] stringArray1 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray1);
      jSONObject0.put(";H", 0.0);
      jSONObject0.optJSONArray("");
      JSONObject jSONObject1 = jSONObject0.increment("longValue");
      jSONObject0.append("pointer cannot be null", "] is not a long.");
      jSONObject1.append("2[&8U{Xk ", ";F-HG#s:POY!");
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("eTqo");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "] is not a long.";
      stringArray0[1] = "eTqo";
      stringArray0[2] = "eTqo";
      stringArray0[3] = "pointer cannot be null";
      stringArray0[4] = "";
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      PipedReader pipedReader0 = new PipedReader(57);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      jSONObject0.write((Writer) pipedWriter0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONObject.numberToString(bigDecimal0);
      jSONObject0.optNumber("dou");
      try { 
        jSONObject0.getJSONArray("in");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = "org.json.JSONException";
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.json.JSONException", true);
      JSONObject.getNames((Object) mockFileWriter0);
      float float0 = 2630.619F;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      BigDecimal bigDecimal0 = new BigDecimal(14L);
      jSONObject0.optBigDecimal(".Ny?B4ZpU4!>xr8\"", bigDecimal0);
      JSONObject jSONObject1 = jSONObject0.increment("l@r;U9/&");
      try { 
        jSONObject1.getJSONArray("l@r;U9/&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("{F0VJ+c80V$?E#.d{/");
      jSONObject1.remove("{F0VJ+c80V$?E#.d{/");
      JSONObject.stringToValue("<a~<Y2:boQ@");
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Desktop.Action, MultipleGradientPaint.CycleMethod> hashMap0 = new HashMap<Desktop.Action, MultipleGradientPaint.CycleMethod>();
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      JSONObject jSONObject2 = jSONObject1.increment("isduplicate");
      JSONObject.wrap(jSONObject0);
      jSONObject1.optString("du");
      jSONObject2.toMap();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      jSONObject2.putOpt("doubleValue", (Object) null);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      jSONObject1.putOnce("doubleValue", locale_Category0);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject0.length();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "OtgY*0m&Q_yCYgg{";
      jSONObject1.putOpt((String) null, (Object) null);
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[2] = "~1";
      stringArray0[4] = "";
      stringArray0[5] = "";
      HashMap<Object, FilterOutputStream> hashMap0 = new HashMap<Object, FilterOutputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.putOpt((String) null, stringWriter0);
      // Undeclared exception!
      try { 
        jSONObject1.query("X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<GraphicsDevice.WindowTranslucency> class0 = GraphicsDevice.WindowTranslucency.class;
      jSONObject0.putOnce("ziH=wxb' !'at", class0);
      jSONObject0.optLong("ziH=wxb' !'at");
      jSONObject0.toMap();
      try { 
        jSONObject0.getEnum(class0, "ziH=wxb' !'at");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an enum of type java.io.StringWriter@0000000008.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<GraphicsDevice.WindowTranslucency> class0 = GraphicsDevice.WindowTranslucency.class;
      try { 
        jSONObject0.getEnum(class0, "ziH=wxb' !'at");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-52);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1333), 2382);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      JSONObject jSONObject0 = new JSONObject(dataInputStream0);
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      JSONObject jSONObject1 = jSONObject0.put("0000", (float) (byte) (-52));
      assertEquals(1, jSONObject0.length());
      
      Class<Component.BaselineResizeBehavior> class0 = Component.BaselineResizeBehavior.class;
      jSONObject1.optEnum(class0, "0000");
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.WARNING;
      linkedList0.add(trayIcon_MessageType0);
      JSONObject jSONObject1 = jSONObject0.put("LBE|FD}:8/8j\"'", (Collection<?>) linkedList0);
      jSONObject1.optBoolean("LBE|FD}:8/8j\"'");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(55);
      JSONObject.wrap(byteArrayOutputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      JSONObject.wrap(pushbackInputStream0);
      jSONObject1.optLong("java.io.ByteArrayOutputStream@0000000017");
      try { 
        jSONObject0.getInt("getbyteValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000019] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = "~1";
      stringArray0[2] = "~1";
      JSONObject.wrap("~1");
      JSONObject jSONObject0 = new JSONObject((Object) "~1");
      jSONObject0.optLong("getbyteValue");
      jSONObject0.optLong("##=}^LX{).&NC?j5 |", 2258L);
      String string1 = "Missing value";
      jSONObject0.append("Missing value", "~1");
      JSONObject jSONObject1 = jSONObject0.put("~1", true);
      jSONObject1.put("] is not a number.", 2258L);
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000041] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.optLong("readShort", 5104L);
      jSONObject0.increment("l@r;U9/&");
      Object object0 = new Object();
      try { 
        jSONObject0.getInt("] could not convert to BigInteger.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      jSONObject0.put("7q]", 0.0F);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      jSONObject0.put("LBE|FD}:8/8j\"'", (Collection<?>) linkedList0);
      jSONObject0.names();
      try { 
        jSONObject0.get("getintValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2269);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@L%Cu9p`s";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      jSONObject0.query("");
      jSONObject0.names();
      try { 
        jSONObject0.get("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      jSONObject0.query("");
      String string1 = "org.json.JSONException";
      JSONObject.getNames(jSONObject0);
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Double double0 = new Double(1150.78902580706);
      JSONObject.testValidity(double0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = "";
      jSONObject0.optLong("");
      jSONObject0.optLong("", (-3019L));
      jSONObject0.append("", double0);
      JSONObject jSONObject1 = jSONObject0.put("{5I1", true);
      try { 
        jSONObject1.getBoolean("ishashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000025] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.query("Value out of sequence.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "CGTAtG]8&`}U}0Rsa)";
      stringArray0[1] = "w&V:qY61o<]5";
      stringArray0[2] = "~1";
      String string0 = "' and instead saw '";
      stringArray0[3] = "' and instead saw '";
      stringArray0[4] = "";
      HashMap<MockFileInputStream, Long> hashMap0 = new HashMap<MockFileInputStream, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.query("w&V:qY61o<]5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONObject.getNames((Object) "org.json.JSONException");
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) "org.json.JSONException");
      try { 
        jSONObject0.getDouble("org.json.JSONException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Double double0 = new Double(1150.78902580706);
      JSONObject.testValidity(double0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = "";
      long long0 = (-3019L);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 8, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Short short0 = new Short((short)33);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "CGTAtG]8&`}U}0Rsa)";
      String string0 = "w&V:qY61o<\\]5";
      stringArray0[1] = "CGTAtG]8&`}U}0Rsa)";
      stringArray0[2] = "~1";
      stringArray0[3] = "~1";
      stringArray0[4] = "";
      stringArray0[6] = "X";
      stringArray0[7] = "`JL2m=";
      stringArray0[8] = "p(@KUIr";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      jSONObject0.optBoolean("p(@KUIr", true);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject0.getJSONObject(stringArray0[5]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      HashMap<DataInputStream, Short> hashMap0 = new HashMap<DataInputStream, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<ByteArrayOutputStream> linkedList0 = new LinkedList<ByteArrayOutputStream>();
      JSONObject jSONObject1 = jSONObject0.put("is", (Collection<?>) linkedList0);
      jSONObject1.names();
      String string0 = null;
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "wPmGBP]S2f.l<X+Y";
      JSONObject jSONObject1 = jSONObject0.increment("wPmGBP]S2f.l<X+Y");
      try { 
        jSONObject1.getBigInteger("LBE|FD}:8/8j\"'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)123;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[4] = (byte) (-52);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1333), 2382);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      JSONObject jSONObject0 = new JSONObject(dataInputStream0);
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      JSONObject jSONObject1 = new JSONObject(pushbackInputStream0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.spliterator();
      JSONObject jSONObject0 = new JSONObject((Object) ":Pc");
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.getJSONArray(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2269);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@L%Cu9p`s";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String string0 = "";
      stringArray0[3] = "";
      stringArray0[4] = "\"";
      stringArray0[5] = "org.json.JSONObject";
      stringArray0[6] = "";
      stringArray0[7] = "";
      String string1 = "^^P.p7Z";
      try { 
        jSONObject0.getJSONArray("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.names();
      try { 
        jSONObject0.getString("Bad value from toJSONString: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      HashMap<Integer, CardTerminals.State> hashMap0 = new HashMap<Integer, CardTerminals.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_ABSENT;
      hashMap0.put((Integer) null, cardTerminals_State0);
      int int0 = 4088;
      jSONObject0.toString(4088);
      HashMap<Integer, CardTerminals.State> hashMap1 = new HashMap<Integer, CardTerminals.State>();
      Integer integer0 = new Integer(4088);
      CardTerminals.State cardTerminals_State1 = CardTerminals.State.CARD_REMOVAL;
      hashMap1.put(integer0, cardTerminals_State1);
      CardTerminals.State cardTerminals_State2 = CardTerminals.State.CARD_INSERTION;
      hashMap1.put((Integer) null, cardTerminals_State2);
      hashMap0.putAll(hashMap1);
      CardTerminals.State cardTerminals_State3 = CardTerminals.State.CARD_INSERTION;
      hashMap0.put((Integer) null, cardTerminals_State3);
      try { 
        jSONObject0.getString("K_Q2HL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = "qN6!Fq[n&Y.";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qN6!Fq[n&Y.");
      String string1 = "<T.L4#Us[Ei{Fo";
      JSONObject jSONObject0 = new JSONObject((Object) "<T.L4#Us[Ei{Fo");
      try { 
        jSONObject0.getDouble("*RC)Hn7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000018] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("a JSON pointer s%ould start with '/' or '#/'", false);
      Float float0 = new Float((float) (short)277);
      JSONObject jSONObject1 = new JSONObject(float0);
      HashMap<DayOfWeek, Locale.FilteringMode> hashMap0 = new HashMap<DayOfWeek, Locale.FilteringMode>();
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject3 = jSONObject2.put("a JSON pointer s%ould start with '/' or '#/'", true);
      jSONObject3.optBoolean("a JSON pointer s%ould start with '/' or '#/'");
      Character character0 = new Character('l');
      hashMap0.remove((Object) character0);
      JSONObject.wrap("available");
      PipedInputStream pipedInputStream0 = new PipedInputStream(39);
      JSONObject.isDecimalNotation("Misplaced array.");
      LinkedList<DayOfWeek> linkedList0 = new LinkedList<DayOfWeek>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject.wrap(jSONArray0);
      jSONObject2.names();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("LBE|FD}:8/8j\"'");
      jSONObject1.optLong("LBE|FD}:8/8j\"'");
      jSONObject0.optLong("<a~<Y2:boQ@", 0L);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("LBE|FD}:8/8j\"'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("l@r;U9/&");
      jSONObject1.optLong("<a~<Y2:boQ@");
      jSONObject1.optLong("<a~<Y2:boQ@", 0L);
      String string0 = "] is not a JSONObject.";
      jSONObject0.append("] is not a JSONObject.", jSONObject1);
      jSONObject0.getJSONObject(string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      Object object0 = JSONObject.NULL;
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("7?)>>fWa2", (long) 3076);
      assertEquals(3076L, long0);
      
      Object object0 = JSONObject.stringToValue("\"\"");
      assertEquals("\"\"", object0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Double double0 = new Double(1150.78902580706);
      JSONObject.testValidity(double0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optLong("");
      jSONObject0.optLong("", (-3019L));
      JSONObject jSONObject1 = jSONObject0.append("", double0);
      jSONObject0.put("{5I1", true);
      try { 
        jSONObject1.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000027] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      try { 
        jSONObject0.get("getintValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      String string0 = "Error reading value at index position ";
      try { 
        jSONObject0.get("Error reading value at index position ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Short short0 = new Short((short)277);
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = "getreadUnsignedShort";
      Locale locale0 = Locale.KOREAN;
      JSONTokener jSONTokener0 = new JSONTokener("l@r;U9/&");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = "uECg?";
      JSONTokener jSONTokener0 = new JSONTokener("uECg?");
      jSONTokener0.nextClean();
      jSONTokener0.nextClean();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 3 [character 4 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("Duplicate key \"", (Map<?, ?>) null);
      jSONObject0.put("Duplicate key \"", 734.9225145068);
      jSONObject0.optString("Duplicate key \"");
      jSONObject1.toMap();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Duplicate key \"");
      jSONObject0.optLong("length", 0L);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, locale_FilteringMode0, (-2478), 395);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("{", true);
      Writer writer0 = JSONObject.writeValue(mockFileWriter0, "{", 2014, 1260);
      assertSame(mockFileWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3076);
      MockFileWriter mockFileWriter0 = new MockFileWriter(",:]}/\"[{;=#", false);
      Writer writer0 = JSONObject.writeValue(mockFileWriter0, (Object) null, 116, 3076);
      assertSame(mockFileWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      int int0 = 693;
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, (Object) null, 693, 693);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = "71{L3Jb,";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("71{L3Jb,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = "getreadUnsignedShort";
      Locale locale0 = Locale.KOREAN;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("getreadUnsignedShort", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name getreadUnsignedShort, locale ko
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Short short0 = new Short((short)277);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getNumber("r$l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject.testValidity(double0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString();
      jSONObject0.optLong("");
      jSONObject0.optLong("", (-3019L));
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject1.getNumber("785<YB=fPNTIkx6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(4033.8594566);
      MockFileWriter mockFileWriter0 = new MockFileWriter("d.?zTY}zc8U$#d 0.~l");
      jSONObject0.write((Writer) mockFileWriter0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("d.?zTY}zc8U$#d 0.~l");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "] is not a long.";
      stringArray0[1] = "eTqo";
      stringArray0[2] = "pointer cannot be null";
      stringArray0[3] = "pointer cannot be null";
      stringArray0[4] = "";
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      PipedReader pipedReader0 = new PipedReader(57);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      jSONObject0.write((Writer) pipedWriter0);
      try { 
        jSONObject0.getNumber("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Locale.lookup(linkedList0, list0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONObject.numberToString(bigDecimal0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "java.math.BigDecimal@0000000001";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) "org.json.JSONException");
      try { 
        jSONObject0.getInt("org.json.JSONException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      float float0 = jSONObject0.optFloat("org.json.JSONException", 2630.619F);
      assertEquals(2630.619F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONObject.numberToString(bigDecimal0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2375, 16);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      JSONObject jSONObject0 = new JSONObject(charArrayWriter0);
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.markSupported();
      jSONObject0.append("java.math.BigDecimal@0000000001", pipedReader0);
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        jSONObject0.increment("java.math.BigDecimal@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000010].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = "do";
      jSONObject0.append("0@Q$*7'a,SzM(SB", "0@Q$*7'a,SzM(SB");
      JSONObject jSONObject1 = jSONObject0.put("do", 69);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "do");
      jSONObject1.append("0", (Object) null);
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONObject0.increment("do");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("Null key.", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.increment("l@r;U9/&");
      JSONObject.wrap((Object) null);
      try { 
        jSONObject0.getInt("] could not convert to BigInteger.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("{F0VJ+c80V$?E#.d{/");
      jSONObject1.remove("{F0VJ+c80V$?E#.d{/");
      jSONObject1.optBigDecimal("{F0VJ+c80V$?E#.d{/", (BigDecimal) null);
      JSONObject.wrap(jSONObject1);
      try { 
        jSONObject0.getInt("index %d is out of bounds - the array has %d elements");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = "l@r;U9/&";
      jSONObject0.increment("l@r;U9/&");
      boolean boolean0 = true;
      String string1 = "] could not convert to BigInteger.";
      JSONObject.wrap((Object) null);
      try { 
        jSONObject0.getInt("] could not convert to BigInteger.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      JSONObject.testValidity(locale0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("getreadUnsignedShort", false);
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      JSONObject jSONObject1 = jSONObject0.put("{5I1", true);
      jSONObject1.optBoolean("available");
      JSONObject.wrap(jSONObject0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(39);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      byte byte0 = (byte)63;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.doubleToString((byte)0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "0");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Integer integer0 = new Integer((byte)63);
      JSONObject jSONObject0 = new JSONObject(charBuffer0);
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      jSONObject0.append("0", charBuffer0);
      LineNumberReader lineNumberReader0 = null;
      try {
        lineNumberReader0 = new LineNumberReader((Reader) null, 1132);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONObject.numberToString(bigDecimal0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "java.math.BigDecimal@0000000001");
      charArrayWriter0.flush();
      JSONObject jSONObject0 = new JSONObject(charArrayWriter1);
      try { 
        jSONObject0.getFloat("java.math.BigDecimal@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.spliterator();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-52);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1333), 2382);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      JSONObject jSONObject0 = new JSONObject(dataInputStream0);
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      jSONObject0.append("0000", roundingMode0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "LBE|FD}:8/8j\"'";
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      JSONObject jSONObject1 = jSONObject0.put("LBE|FD}:8/8j\"'", (Collection<?>) linkedList0);
      jSONObject1.append("LBE|FD}:8/8j\"'", hashMap0);
      jSONObject1.put("qSd!Er`D", 69);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LBE|FD}:8/8j\"'");
      try { 
        jSONObject1.getBigDecimal("qSd!Er`D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000023] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "CGTAtG]8&`}U}0Rsa)";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      PipedReader pipedReader0 = new PipedReader(57);
      jSONObject0.put("q", (double) 57);
      jSONObject1.optJSONArray((String) null);
      JSONObject jSONObject3 = jSONObject1.increment("longValue");
      jSONObject3.append("(P| {h-jQxO{", jSONObject0);
      jSONObject1.append("toString", (Object) null);
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("gw}`cAU!0,5l$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      HashMap<PushbackReader, Dialog.ModalExclusionType> hashMap0 = new HashMap<PushbackReader, Dialog.ModalExclusionType>();
      JSONObject jSONObject0 = new JSONObject(3714);
      HashMap<JavaFileObject.Kind, JTable.PrintMode> hashMap1 = new HashMap<JavaFileObject.Kind, JTable.PrintMode>();
      jSONObject0.put("getintValue", (Map<?, ?>) hashMap1);
      jSONObject0.put("getintValue", false);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(110);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = "";
      linkedList0.add("");
      jSONObject0.put("", true);
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      try { 
        jSONPointer0.queryFrom(linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value [[]] is not an array or object therefore its key  cannot be resolved
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\f");
      jSONObject0.put("\f", true);
      jSONObject0.getBoolean("\f");
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.increment("l@r;U9/&");
      try { 
        jSONObject1.getJSONArray("l@r;U9/&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[9];
      String string0 = "CGTAtG]8&`}U}0Rsa)";
      stringArray0[0] = "CGTAtG]8&`}U}0Rsa)";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      PipedReader pipedReader0 = new PipedReader(57);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      jSONObject2.write((Writer) pipedWriter0);
      JSONObject jSONObject3 = new JSONObject(jSONObject1, stringArray0);
      try { 
        jSONObject3.getBigInteger("CGTAtG]8&`}U}0Rsa)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000032] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "NbEsy{8VUV{kOt:&8";
      stringArray0[3] = "NbEsy{8VUV{kOt:&8";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optDouble("NbEsy{8VUV{kOt:&8");
      try { 
        jSONObject1.getLong("NbEsy{8VUV{kOt:&8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("7q]", true);
      String[] stringArray0 = new String[3];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject1, stringArray0);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("7q]", false);
      String[] stringArray0 = new String[3];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject();
      assertEquals(0, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1730);
      boolean boolean0 = jSONObject0.optBoolean("x17YQK1", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "CGTAtG]8&`}U}0Rsa)";
      String string0 = "w&V:qY61o<\\]5";
      stringArray0[1] = "w&V:qY61o<]5";
      stringArray0[2] = "~1";
      stringArray0[3] = "' and instead saw '";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "X";
      stringArray0[7] = "`JL2m=";
      stringArray0[8] = "p(@KUIr";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      jSONObject0.optBoolean("p(@KUIr", true);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000012] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "8e,#=w/q2Zb&\\1[5b$6";
      int int0 = 60;
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      charArray0[1] = 'q';
      charArray0[2] = 'X';
      charArray0[3] = 'v';
      charArray0[4] = '=';
      charArray0[5] = '.';
      charArray0[6] = 'i';
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader(charArray0, 0, (-5348));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-4205));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -4205
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getFloat("istoCharArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1316);
      try { 
        jSONObject0.getJSONObject("org.json.JSONPointerException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      String string0 = "getClass";
      try { 
        jSONObject0.getFloat("getClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBigDecimal("shortValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      String string0 = "\\u";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = "' and instead saw '";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("' and instead saw '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }
}
