/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 17:45:33 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.GraphicsDevice;
import java.awt.MultipleGradientPaint;
import java.awt.Window;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.StandardProtocolFamily;
import java.security.CryptoPrimitive;
import java.sql.PseudoColumnUsage;
import java.text.Normalizer;
import java.time.Month;
import java.util.Collection;
import java.util.Formatter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.swing.GroupLayout;
import javax.swing.JTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("$DoY/qB'QI");
      assertEquals("$DoY/qB'QI", object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("9)jDdqWgIHE");
      assertEquals("9)jDdqWgIHE", object0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0");
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("9;W\"keKhEg]E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("0.0");
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = JSONObject.quote("2PR#]k9`(yw'? /Y]O#");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~x6n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(39);
      JSONObject.indent(charArrayWriter0, (-3043));
      assertEquals(0, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Normalizer.Form, Integer> hashMap0 = new HashMap<Normalizer.Form, Integer>();
      JSONObject.writeValue(stringWriter0, hashMap0, (-3208), (-3208));
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Locale locale0 = new Locale("null");
      JSONObject jSONObject0 = new JSONObject(locale0);
      assertEquals(13, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Ir7xr", 230);
      try { 
        jSONObject1.getBigInteger("Ir7xr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(323);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("tr");
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0);
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Map<String, Object> map0 = jSONObject0.toMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-1504.95451327522");
      assertEquals((short) (-1504), number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query(jSONPointer0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query("");
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("!kUfV2Mp=3Mh+z*", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.optQuery("#/");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<CharArrayReader, String> hashMap0 = new HashMap<CharArrayReader, String>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = jSONObject0.optQuery("");
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Number number0 = jSONObject0.optNumber("87|/$Cbf'\t/4tb5x4", (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal((-714L));
      Number number0 = jSONObject0.optNumber("+(zT:_zjP#o5xf*D", (Number) bigDecimal0);
      assertEquals((byte)54, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-74);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Number number0 = jSONObject0.optNumber("0000", (Number) bigInteger0);
      assertEquals((byte) (-74), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(55);
      long long0 = jSONObject0.optLong(" line ", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2342);
      long long0 = jSONObject0.optLong("javax.org.evosuite.runtime.mock.java.io", (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("~oQ2)0'", (-2378));
      long long0 = jSONObject0.optLong("~oQ2)0'");
      assertEquals(1, jSONObject0.length());
      assertEquals((-2378L), long0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      int int0 = jSONObject0.optInt("", (-2290));
      assertEquals((-2290), int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat("isposition", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject(bigInteger0, stringArray0);
      float float0 = jSONObject0.optFloat("java.lang.Float@00000000080", (-1744.0F));
      assertEquals((-1744.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2342);
      double double0 = jSONObject0.optDouble("pO8)azH7Jtn,aTj#>)", (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((int) (short)790);
      boolean boolean0 = jSONObject0.optBoolean("Null pointer", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2342);
      BigInteger bigInteger0 = jSONObject0.optBigInteger("?Vf", (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal("gettoString", (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal((-3703));
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("P/H%jX", bigDecimal0);
      assertEquals((short) (-3703), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject1 = jSONObject0.put("istoUpperCase", (Collection<?>) linkedList0);
      JSONArray jSONArray0 = (JSONArray)jSONObject1.opt("istoUpperCase");
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2342);
      JSONObject jSONObject1 = jSONObject0.put("pO8)azH7Jtn,aTj#>)", true);
      int int0 = jSONObject1.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<StandardProtocolFamily, Long> hashMap0 = new HashMap<StandardProtocolFamily, Long>();
      JSONObject jSONObject1 = jSONObject0.put("] could not be converted to BigDecimal.", (Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject1.isNull("] could not be converted to BigDecimal.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("!A,NXQRPh|MSZ,8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("/", 56);
      long long0 = jSONObject1.getLong("/");
      assertEquals(56L, long0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<StandardProtocolFamily, Long> hashMap0 = new HashMap<StandardProtocolFamily, Long>();
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET6;
      Long long0 = new Long(0L);
      hashMap0.put(standardProtocolFamily0, long0);
      jSONObject0.put("] could not be converted to BigDecimal.", (Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("] could not be converted to BigDecimal.");
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "gYA^KYp");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("gYA^KYp", (Collection<?>) linkedList0);
      jSONObject1.getJSONArray("gYA^KYp");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "396.595223191967");
      JSONObject jSONObject1 = jSONObject0.put("396.595223191967", 0.0F);
      jSONObject1.getFloat("396.595223191967");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<CharArrayReader, String> hashMap0 = new HashMap<CharArrayReader, String>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("B&+7hr6z:s4le'{", 0L);
      double double0 = jSONObject0.getDouble("B&+7hr6z:s4le'{");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Window.Type, Locale.Category> hashMap0 = new HashMap<Window.Type, Locale.Category>();
      HashMap<CharArrayReader, String> hashMap1 = new HashMap<CharArrayReader, String>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap1);
      JSONObject jSONObject1 = jSONObject0.putOnce("Dr3X", hashMap0);
      HashMap hashMap2 = (HashMap)jSONObject1.get("Dr3X");
      assertEquals(0, hashMap2.size());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<StandardProtocolFamily, Long> hashMap0 = new HashMap<StandardProtocolFamily, Long>();
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, hashMap0, (-3678), 578);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, (-769), (-769));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "396.595223191967");
      try { 
        jSONObject0.toString(1098);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("size", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote("hR;*sw5X660Z[", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query("qMcz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, Thread.State> hashMap0 = new HashMap<Long, Thread.State>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2342);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 1920L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-899));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 225.6350258826726);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(12);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 3260);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<GraphicsDevice.WindowTranslucency, MockFileOutputStream> hashMap0 = new HashMap<GraphicsDevice.WindowTranslucency, MockFileOutputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Short short0 = new Short((short)1302);
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, short0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("O9q/>'y6_'*");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-39), 32);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("size", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name size, locale it
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<JTable.PrintMode, DataInputStream> hashMap0 = new HashMap<JTable.PrintMode, DataInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("w>Y9$ :GCB@q6W3G", true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      jSONObject0.putOnce("1063.0200431773610", pipedInputStream0);
      StringWriter stringWriter0 = new StringWriter(3125);
      Writer writer0 = jSONObject0.write((Writer) stringWriter0, 3125, 69);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<JTable.PrintMode, DataInputStream> hashMap0 = new HashMap<JTable.PrintMode, DataInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      StringWriter stringWriter0 = new StringWriter(3125);
      jSONObject0.write((Writer) stringWriter0, 3125, 3125);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("396.595223191967", 0.0F);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3479);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0, (-1994397183), (-4513));
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[9];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("misplaced endarray.", charArrayWriter0);
      JSONObject jSONObject2 = jSONObject1.append("java.io.StringWriter@0000000001", charArrayReader0);
      jSONObject2.write((Writer) charArrayWriter0, (-3694), 2658);
      assertEquals(2, jSONObject1.length());
      assertEquals(2799, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("396.595223191967", 0.0F);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(87);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Writer writer0 = jSONObject1.write((Writer) mockPrintWriter0, 87, 87);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(fileSystemHandling0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object object0 = JSONObject.wrap(charArrayWriter0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      JSONArray jSONArray0 = (JSONArray)JSONObject.wrap(set0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Character character0 = new Character('A');
      Object object0 = JSONObject.wrap(character0);
      assertEquals('A', object0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Integer integer0 = new Integer(2342);
      Object object0 = JSONObject.wrap(integer0);
      assertEquals(2342, object0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object object0 = JSONObject.wrap("&");
      assertEquals("&", object0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Object object0 = JSONObject.wrap(locale_Category0);
      assertSame(locale_Category0, object0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put(Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject.testValidity(".");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2946, 1002.03265145);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put(612, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("size");
      assertEquals("size", object0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3402);
      JSONObject.quote("B/0 qL!6!0#~)am4;", (Writer) charArrayWriter0);
      assertEquals("\"B/0 qL!6!0#~)am4;\"", charArrayWriter0.toString());
      assertEquals(19, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2326);
      JSONObject.quote("", (Writer) charArrayWriter0);
      assertEquals("\"\"", charArrayWriter0.toString());
      assertEquals(2, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(9);
      JSONObject.quote("\"diK<{Hol~,OvT", (Writer) charArrayWriter0);
      assertEquals(17, charArrayWriter0.size());
      assertEquals("\"\\\"diK<{Hol~,OvT\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(50);
      JSONObject.quote((String) null, (Writer) charArrayWriter0);
      assertEquals(2, charArrayWriter0.size());
      assertEquals("\"\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOnce("java.lang.Float@0000000003.", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2342);
      JSONObject jSONObject1 = jSONObject0.put("2650.184233", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2213);
      JSONObject jSONObject1 = jSONObject0.put("f@6%f?_!x", (Object) "java.io.StringWriter@0000000003");
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<StandardProtocolFamily, Long> hashMap0 = new HashMap<StandardProtocolFamily, Long>();
      jSONObject0.put("P/H%jX", (Map<?, ?>) hashMap0);
      String string0 = jSONObject0.optString("P/H%jX", "] is not an enum of type ");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = jSONObject0.optNumber("1cB_c}qq[{4UME", (Number) bigInteger0);
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("QAN!z)9", 5429.837382499267);
      long long0 = jSONObject0.optLong("QAN!z)9", 1295L);
      assertEquals(5429L, long0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, Thread.State> hashMap0 = new HashMap<Long, Thread.State>();
      jSONObject0.put("QAN!z)9", (Map<?, ?>) hashMap0);
      long long0 = jSONObject0.optLong("QAN!z)9", 1295L);
      assertEquals(1295L, long0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<MultipleGradientPaint.ColorSpaceType, Integer> hashMap0 = new HashMap<MultipleGradientPaint.ColorSpaceType, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      int int0 = jSONObject0.optInt(")6hAZ*{M4W<Kh[J", 943);
      assertEquals(943, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat(".", 308.4F);
      assertEquals(308.4F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(55);
      double double0 = jSONObject0.optDouble("getBytes", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("stripTrailingZeros", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, CryptoPrimitive> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, CryptoPrimitive>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("] could ot be converted to BigInteger.", false);
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.MODELESS;
      Dialog.ModalityType dialog_ModalityType1 = jSONObject1.optEnum(class0, "] could ot be converted to BigInteger.", dialog_ModalityType0);
      assertSame(dialog_ModalityType0, dialog_ModalityType1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2342);
      Class<PseudoColumnUsage> class0 = PseudoColumnUsage.class;
      PseudoColumnUsage pseudoColumnUsage0 = PseudoColumnUsage.WHERE_CLAUSE_ONLY;
      PseudoColumnUsage pseudoColumnUsage1 = jSONObject0.optEnum(class0, "2650.184233", pseudoColumnUsage0);
      assertEquals(PseudoColumnUsage.WHERE_CLAUSE_ONLY, pseudoColumnUsage1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("istoUpperCase");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2342);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Short short0 = new Short((short)790);
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      String string0 = JSONObject.numberToString(bigInteger0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{C6^CzF2*'");
      boolean boolean0 = jSONObject0.isEmpty();
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Dialog.ModalExclusionType, PipedWriter> hashMap0 = new HashMap<Dialog.ModalExclusionType, PipedWriter>();
      jSONObject0.put("P/H%jX", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getBoolean("P/H%jX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("-NigFTKy-Hw$;fX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2342);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2342);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, Thread.State> hashMap0 = new HashMap<Long, Thread.State>();
      JSONObject jSONObject1 = jSONObject0.put("QAN!z)9", (Map<?, ?>) hashMap0);
      Map<String, Object> map0 = jSONObject1.toMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "P/H%jX");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<StandardProtocolFamily, Long> hashMap0 = new HashMap<StandardProtocolFamily, Long>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<StandardProtocolFamily, Long> hashMap0 = new HashMap<StandardProtocolFamily, Long>();
      JSONObject jSONObject1 = jSONObject0.put("toLowerCase", (Map<?, ?>) hashMap0);
      jSONObject0.put(" o/IIfU)I", (Map<?, ?>) hashMap0);
      String string0 = jSONObject1.toString(6);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<StandardProtocolFamily, Long> hashMap0 = new HashMap<StandardProtocolFamily, Long>();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.writeValue(pipedWriter0, hashMap0, (-1), 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      try { 
        JSONObject.writeValue(pipedWriter0, locale_FilteringMode0, (-1415), 100);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object object0 = JSONObject.NULL;
      JSONObject.writeValue(charArrayWriter0, object0, 128, (-5991));
      assertEquals(4, charArrayWriter0.size());
      assertEquals("null", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(123);
      JSONObject.writeValue(charArrayWriter0, (Object) null, 121, 34);
      assertEquals(4, charArrayWriter0.size());
      assertEquals("null", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Object object0 = JSONObject.wrap(bigDecimal0);
      assertSame(bigDecimal0, object0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Object object0 = JSONObject.wrap(bigInteger0);
      assertSame(object0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Double double0 = new Double((-569.138075));
      Object object0 = JSONObject.wrap(double0);
      assertEquals((-569.138075), object0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Long long0 = new Long((-2915L));
      Object object0 = JSONObject.wrap(long0);
      assertEquals((-2915L), object0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Short short0 = new Short((short)32);
      Object object0 = JSONObject.wrap(short0);
      assertEquals((short)32, object0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(3463.6204F);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<Short, Double> hashMap0 = new HashMap<Short, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("WwpP=S13QCy", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-2877.0687522");
      assertEquals((-2877.0687522), object0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("null");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("false");
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("true");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-1");
      assertEquals((-1), number0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("396.595223191967");
      assertEquals((short)396, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("#ss_VlU");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [#ss_VlU] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("-0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<StandardProtocolFamily, Long> hashMap0 = new HashMap<StandardProtocolFamily, Long>();
      JSONObject jSONObject1 = jSONObject0.put("] could not be converted to BigDecimal.", (Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.similar(jSONObject1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<StandardProtocolFamily, Long> hashMap0 = new HashMap<StandardProtocolFamily, Long>();
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      boolean boolean0 = jSONObject0.similar(jSONObject1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.similar("1cB_c}qq[{4UME");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("\b", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<StandardProtocolFamily, Long> hashMap0 = new HashMap<StandardProtocolFamily, Long>();
      jSONObject0.put("] could not be converted to BigDecimal.", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.putOnce("] could not be converted to BigDecimal.", "] could not be converted to BigDecimal.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"] could not be converted to BigDecimal.\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "getChannel";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("java.lang.Long@00000000080", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("R1#4t;HG(*R8+Pj");
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<GraphicsDevice.WindowTranslucency> class0 = GraphicsDevice.WindowTranslucency.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      assertEquals(35, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("^,V79`T", (-260.6223937));
      String string0 = jSONObject1.optString("^,V79`T");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(55);
      jSONObject0.put(" line ", (-923));
      BigInteger bigInteger0 = BigInteger.ONE;
      Number number0 = jSONObject0.optNumber(" line ", (Number) bigInteger0);
      assertEquals((-923), number0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<StandardProtocolFamily, Long> hashMap0 = new HashMap<StandardProtocolFamily, Long>();
      JSONObject jSONObject1 = jSONObject0.put("8m0F8N#lF}D;!oP}", (Map<?, ?>) hashMap0);
      Integer integer0 = Integer.valueOf(60);
      Number number0 = jSONObject1.optNumber("8m0F8N#lF}D;!oP}", (Number) integer0);
      assertEquals(60, number0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] could not be converted to BigDecimal.", 1.0);
      long long0 = jSONObject0.optLong("] could not be converted to BigDecimal.");
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<StandardProtocolFamily, Long> hashMap0 = new HashMap<StandardProtocolFamily, Long>();
      JSONObject jSONObject1 = jSONObject0.put("] could not be converted to BigDecimal.", (Map<?, ?>) hashMap0);
      long long0 = jSONObject1.optLong("] could not be converted to BigDecimal.");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<StandardProtocolFamily, Long> hashMap0 = new HashMap<StandardProtocolFamily, Long>();
      JSONObject jSONObject1 = jSONObject0.put("] could not be converted to BigDecimal.", (Map<?, ?>) hashMap0);
      JSONObject jSONObject2 = jSONObject0.optJSONObject("] could not be converted to BigDecimal.");
      assertNotSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optJSONObject("#");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("Misplaced object.", (Object) null);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("Misplaced object.");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("null");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("lQp", true);
      int int0 = jSONObject1.optInt("lQp", 48);
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<StandardProtocolFamily, Long> hashMap0 = new HashMap<StandardProtocolFamily, Long>();
      JSONObject jSONObject1 = jSONObject0.put("] could not be converted to BigDecimal.", (Map<?, ?>) hashMap0);
      float float0 = jSONObject1.optFloat("] could not be converted to BigDecimal.", 1167.4066F);
      assertEquals(1167.4066F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HashMap<MultipleGradientPaint.ColorSpaceType, Integer> hashMap0 = new HashMap<MultipleGradientPaint.ColorSpaceType, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("5*da?<=(zI", "S");
      float float0 = jSONObject1.optFloat("5*da?<=(zI");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("] is not a number.", "3");
      double double0 = jSONObject0.optDouble("] is not a number.");
      assertEquals(1, jSONObject0.length());
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("P/H%jX");
      double double0 = jSONObject1.optDouble("P/H%jX", (-1449.659706562));
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<StandardProtocolFamily, Long> hashMap0 = new HashMap<StandardProtocolFamily, Long>();
      jSONObject0.put("] could not be converted to BigDecimal.", (Map<?, ?>) hashMap0);
      double double0 = jSONObject0.optDouble("] could not be converted to BigDecimal.", (double) 795L);
      assertEquals(795.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.put("] could not be converted to BigDecimal.", (-2031));
      BigInteger bigInteger1 = jSONObject0.optBigInteger("] could not be converted to BigDecimal.", bigInteger0);
      assertEquals((byte)17, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("java.io.StringWriter@0000000002", (double) 181);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("java.io.StringWriter@0000000002", bigInteger0);
      assertEquals((byte) (-75), bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("!qAzVHcFb", bigInteger0);
      assertEquals((byte)0, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(")[`48As", false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject0.optBigInteger(")[`48As", bigInteger0);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("trim", 2L);
      BigDecimal bigDecimal0 = new BigDecimal(2L);
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("trim", bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)2, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<StandardProtocolFamily, Long> hashMap0 = new HashMap<StandardProtocolFamily, Long>();
      jSONObject0.put("] could not be converted to BigDecimal.", (Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("] could not be converted to BigDecimal.", bigDecimal0);
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("A*s)zHj+-Q7A]?=", true);
      boolean boolean0 = jSONObject0.optBoolean("A*s)zHj+-Q7A]?=");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("P/H%jX");
      Class<StandardProtocolFamily> class0 = StandardProtocolFamily.class;
      jSONObject1.optEnum(class0, "P/H%jX");
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Float float0 = new Float(1117.2794127977);
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<CharArrayWriter, MultipleGradientPaint.CycleMethod> hashMap0 = new HashMap<CharArrayWriter, MultipleGradientPaint.CycleMethod>();
      JSONObject jSONObject1 = jSONObject0.put("9`{\"P<x~i)8:u 4l\"", (Map<?, ?>) hashMap0);
      JSONArray jSONArray0 = jSONObject1.names();
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<StandardProtocolFamily, Long> hashMap0 = new HashMap<StandardProtocolFamily, Long>();
      jSONObject0.put("] could not be converted to BigDecimal.", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.increment("] could not be converted to BigDecimal.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000008].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("P/H%jX");
      boolean boolean0 = jSONObject0.has("P/H%jX");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<StandardProtocolFamily, Long> hashMap0 = new HashMap<StandardProtocolFamily, Long>();
      JSONObject jSONObject1 = jSONObject0.put("] could not be converted to BigDecimal.", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.getString("] could not be converted to BigDecimal.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      HashMap<Dialog.ModalExclusionType, PipedWriter> hashMap0 = new HashMap<Dialog.ModalExclusionType, PipedWriter>();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("-1..", (-1075307805));
      long long0 = jSONObject0.getLong("-1..");
      assertEquals((-1075307805L), long0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<StandardProtocolFamily, Long> hashMap0 = new HashMap<StandardProtocolFamily, Long>();
      jSONObject0.put("] could not be converted to BigDecimal.", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getLong("] could not be converted to BigDecimal.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<StandardProtocolFamily, Long> hashMap0 = new HashMap<StandardProtocolFamily, Long>();
      jSONObject0.put("] could not be converted to BigDecimal.", (Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("] could not be converted to BigDecimal.");
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("{", true);
      try { 
        jSONObject0.getJSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONObject jSONObject0 = new JSONObject(charArrayReader0);
      jSONObject0.append("Null key.", (Object) null);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("Null key.");
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<StandardProtocolFamily, Long> hashMap0 = new HashMap<StandardProtocolFamily, Long>();
      JSONObject jSONObject1 = jSONObject0.put("] could not be converted o BigDecimal.", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.getJSONArray("] could not be converted o BigDecimal.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("toLowerCase", 2448L);
      int int0 = jSONObject0.getInt("toLowerCase");
      assertEquals(2448, int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<StandardProtocolFamily, Long> hashMap0 = new HashMap<StandardProtocolFamily, Long>();
      jSONObject0.put("toLowerCase", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getInt("toLowerCase");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, Component.BaselineResizeBehavior>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.increment("pointer cannot be null");
      Number number0 = jSONObject0.getNumber("pointer cannot be null");
      assertEquals(1, number0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Month, MockPrintWriter> hashMap0 = new HashMap<Month, MockPrintWriter>();
      JSONObject jSONObject1 = jSONObject0.put("P/H%jX", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.getNumber("P/H%jX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("#XQ", (-1935271530));
      float float0 = jSONObject1.getFloat("#XQ");
      assertEquals((-1.93527155E9F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      JSONObject jSONObject1 = jSONObject0.putOnce("*~^(4ov7<o/9", locale_FilteringMode0);
      try { 
        jSONObject1.getFloat("*~^(4ov7<o/9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject jSONObject1 = jSONObject0.putOpt("\f", bigInteger0);
      double double0 = jSONObject1.getDouble("\f");
      assertEquals(10.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<StandardProtocolFamily, Long> hashMap0 = new HashMap<StandardProtocolFamily, Long>();
      JSONObject jSONObject1 = jSONObject0.put("] could not be converted to BigDecimal.", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.getDouble("] could not be converted to BigDecimal.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<StandardProtocolFamily, Long> hashMap0 = new HashMap<StandardProtocolFamily, Long>();
      JSONObject jSONObject1 = jSONObject0.put("] could not be converted to BigDecimal.", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.getBigDecimal("] could not be converted to BigDecimal.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<StandardProtocolFamily, Long> hashMap0 = new HashMap<StandardProtocolFamily, Long>();
      jSONObject0.put("P/H%jX", (Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("P/H%jX", true);
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Locale.Category> class0 = Locale.Category.class;
      try { 
        jSONObject0.getEnum(class0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1063.020043177361);
      assertEquals("1063.020043177361", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1));
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      jSONObject0.putOnce("qmX&79", charArrayReader0);
      jSONObject0.accumulate("qmX&79", charArrayReader0);
      jSONObject0.append("qmX&79", "qmX&79");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<StandardProtocolFamily, Long> hashMap0 = new HashMap<StandardProtocolFamily, Long>();
      JSONObject jSONObject1 = jSONObject0.put("] could not be converted o BigDecimal.", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.append("] could not be converted o BigDecimal.", "] could not be converted o BigDecimal.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] could not be converted o BigDecimal.] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<StandardProtocolFamily, Long> hashMap0 = new HashMap<StandardProtocolFamily, Long>();
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET;
      hashMap0.put(standardProtocolFamily0, (Long) null);
      jSONObject0.put("] could not be converted to BigDecimal.", (Map<?, ?>) hashMap0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      HashMap<StandardProtocolFamily, Character> hashMap0 = new HashMap<StandardProtocolFamily, Character>();
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET;
      Character character0 = new Character('k');
      hashMap0.put(standardProtocolFamily0, character0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{C6^CzF2*'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 10 [character 11 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[2];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("size");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("toLowerCase");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("^,V79`T");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(11);
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("[TYV[W");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.put("1063.020043177361", 0.0F);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("] could not be converted to BigDecimal.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("QAN!z)9", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<String> set0 = jSONObject0.keySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Number number0 = jSONObject0.optNumber("isposition");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }
}
