/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 22:25:07 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.MultipleGradientPaint;
import java.awt.TrayIcon;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PipedInputStream;
import java.io.PipedWriter;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.net.Proxy;
import java.net.StandardProtocolFamily;
import java.nio.charset.Charset;
import java.sql.JDBCType;
import java.sql.PseudoColumnUsage;
import java.sql.RowIdLifetime;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import java.util.Spliterator;
import javax.smartcardio.CardTerminals;
import javax.swing.DropMode;
import javax.swing.GroupLayout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      File file0 = MockFile.createTempFile("getDeclaringClass", (String) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      JSONObject.indent(mockFileWriter0, (-1723085226));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("9null");
      assertEquals("9null", object0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("2AV}.@aQ<<WnM(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("%.s");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [%.s] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("90svZ*rIVwIc\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"90sv\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("0.0");
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get(" oxviZ eT^w./");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("%zaM{Ms[Ecb=#fcj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~0");
      JSONObject.indent(mockPrintWriter0, 0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockFileWriter mockFileWriter0 = new MockFileWriter("gettoList");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 110);
      bufferedWriter0.close();
      try { 
        jSONObject0.write((Writer) bufferedWriter0, 110, 110);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stream closed
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      jSONObject0.put("7F yi;9>Vx:  %smC", (Collection<?>) linkedList0);
      try { 
        jSONObject0.getBigInteger("7F yi;9>Vx:  %smC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Integer, Thread.State> hashMap0 = new HashMap<Integer, Thread.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<CardTerminals.State> linkedList0 = new LinkedList<CardTerminals.State>();
      JSONObject jSONObject1 = jSONObject0.put("j>j+zb[", (Collection<?>) linkedList0);
      JSONArray jSONArray0 = (JSONArray)jSONObject1.remove("j>j+zb[");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(stringWriter0, stringArray0);
      JSONPointer jSONPointer0 = new JSONPointer("");
      Object object0 = jSONObject0.query(jSONPointer0);
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(105);
      String string0 = jSONObject0.optString("", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(105);
      String string0 = jSONObject0.optString(" n9v1oe'f}o9bTmy", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONPointer jSONPointer0 = new JSONPointer("#/");
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery(jSONPointer0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = jSONObject0.optQuery("#/");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery("");
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      Number number0 = jSONObject0.optNumber("java.io.StringWriter@0000000001", (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Number number0 = jSONObject0.optNumber("kXO", (Number) bigDecimal0);
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-20);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Number number0 = jSONObject0.optNumber(" oxviZ eT^w./", (Number) bigDecimal0);
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      long long0 = jSONObject0.optLong("java.io.StringWriter@0000000001", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<Long, StandardProtocolFamily> hashMap0 = new HashMap<Long, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      long long0 = jSONObject0.optLong("3", (-959L));
      assertEquals((-959L), long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = jSONObject0.put("7F yi;9>Vx:  %smC", (-433));
      long long0 = jSONObject1.optLong("7F yi;9>Vx:  %smC");
      assertEquals((-433L), long0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<PseudoColumnUsage, CharArrayWriter> hashMap0 = new HashMap<PseudoColumnUsage, CharArrayWriter>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal(874L);
      HashMap<BigDecimal, PseudoColumnUsage> hashMap1 = new HashMap<BigDecimal, PseudoColumnUsage>();
      PseudoColumnUsage pseudoColumnUsage0 = PseudoColumnUsage.SELECT_LIST_ONLY;
      hashMap1.put(bigDecimal0, pseudoColumnUsage0);
      JSONObject jSONObject1 = jSONObject0.put("isspliterator", (Map<?, ?>) hashMap1);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("isspliterator");
      assertNotNull(jSONObject2);
      assertFalse(jSONObject2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      int int0 = jSONObject0.optInt("length", (-878));
      assertEquals((-878), int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<PseudoColumnUsage, CharArrayWriter> hashMap0 = new HashMap<PseudoColumnUsage, CharArrayWriter>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.increment("!(+w");
      int int0 = jSONObject1.optInt("!(+w");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat("0", (float) 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      double double0 = jSONObject0.optDouble("x  R", 146.56);
      assertEquals(146.56, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      double double0 = jSONObject0.optDouble("bp$=tmUN\"Ev?", (-1259.0));
      assertEquals((-1259.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("java.io.StringWriter@0000000003", (double) 2641L);
      double double0 = jSONObject1.optDouble("java.io.StringWriter@0000000003");
      assertEquals(2641.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = jSONObject0.optBigInteger("to", (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3);
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte) (-99);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONObject0.optBigInteger("wK", bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3);
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte) (-89);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONObject0.optBigInteger("wK", bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal("].", (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject("java.io.StringWriter@0000000001", stringArray0);
      BigDecimal bigDecimal0 = new BigDecimal((-4851.68));
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("qeWKY}", bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONObject jSONObject0 = new JSONObject(charArrayReader0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal(":;/O]A", bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      HashMap<BigDecimal, PseudoColumnUsage> hashMap0 = new HashMap<BigDecimal, PseudoColumnUsage>();
      JSONObject jSONObject1 = jSONObject0.put("bp$=tmUN\"Ev?", (Map<?, ?>) hashMap0);
      Object object0 = jSONObject1.opt("bp$=tmUN\"Ev?");
      assertNotSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject1 = jSONObject0.put("j>j+zb[", (Collection<?>) linkedList0);
      boolean boolean0 = jSONObject1.isNull("j>j+zb[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("\"\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.put("7F yi;9>Vx:  %smC", (float) 0);
      long long0 = jSONObject0.getLong("7F yi;9>Vx:  %smC");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      HashMap<BigDecimal, PseudoColumnUsage> hashMap0 = new HashMap<BigDecimal, PseudoColumnUsage>();
      BigDecimal bigDecimal0 = new BigDecimal((-1073.808));
      PseudoColumnUsage pseudoColumnUsage0 = PseudoColumnUsage.USAGE_UNKNOWN;
      hashMap0.put(bigDecimal0, pseudoColumnUsage0);
      jSONObject0.put("7F yi;9>Vx:  %smC", (Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("7F yi;9>Vx:  %smC");
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      GroupLayout.Alignment groupLayout_Alignment0 = GroupLayout.Alignment.LEADING;
      linkedList0.add(groupLayout_Alignment0);
      jSONObject0.put("j>j+zb[", (Collection<?>) linkedList0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("j>j+zb[");
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.put("7F yi;9>Vx:  %smC", (double) 0L);
      float float0 = jSONObject0.getFloat("7F yi;9>Vx:  %smC");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Float float0 = new Float(1238.78F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("has", (double) 1238.78F);
      float float1 = jSONObject1.getFloat("has");
      assertEquals(3, jSONObject0.length());
      assertEquals(1238.78F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qJCb\"(O@:m0>Her");
      JSONObject jSONObject0 = new JSONObject((Object) "qJCb");
      jSONObject0.accumulate("qJCb", stringReader0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.writeValue(pipedWriter0, "4714D?1#Ul>G8k$}wG", 1, 14);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      JSONObject jSONObject0 = new JSONObject(locale0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 125, 125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Float float0 = new Float(676.2897F);
      JSONObject jSONObject0 = new JSONObject(float0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "7F yi;9>Vx:  %smC");
      try { 
        jSONObject0.toString(2419);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType>();
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.NONE;
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.NO_CYCLE;
      hashMap0.put(multipleGradientPaint_CycleMethod0, trayIcon_MessageType0);
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod1 = MultipleGradientPaint.CycleMethod.REPEAT;
      hashMap0.put(multipleGradientPaint_CycleMethod1, trayIcon_MessageType0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      jSONObject0.toString(8192);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.NO_CYCLE;
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.NONE;
      hashMap0.put(multipleGradientPaint_CycleMethod0, trayIcon_MessageType0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      Short short0 = new Short((short) (-605));
      jSONArray0.put((Object) short0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote("istoLowerCase", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "qJCb");
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Proxy.Type, RoundingMode> hashMap0 = new HashMap<Proxy.Type, RoundingMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<InputStreamReader> linkedList0 = new LinkedList<InputStreamReader>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Locale.Category, GroupLayout.Alignment> hashMap0 = new HashMap<Locale.Category, GroupLayout.Alignment>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 5394);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.indent(pipedWriter0, 3963);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getFloat("removeFirst");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      Character character0 = Character.valueOf('Z');
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-28746850), 1000000);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("\b", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name \b, locale de
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("\b", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("\u0006;", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JSONObject jSONObject0 = new JSONObject(sequenceInputStream0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write((Writer) stringWriter0, 4218, 190);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("removeLast", 0);
      MockFile mockFile0 = new MockFile("/[fBBN\"KSFk^g");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0, (-1949), 554);
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, 0);
      Object object0 = JSONObject.wrap(charArrayReader0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("3");
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockFileOutputStream0);
      assertNotNull(jSONObject0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Object object0 = JSONObject.wrap(boolean0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Integer integer0 = new Integer((-1404));
      Object object0 = JSONObject.wrap(integer0);
      assertEquals((-1404), object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object object0 = JSONObject.wrap("0");
      assertEquals("0", object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      Object object0 = JSONObject.wrap(roundingMode0);
      assertSame(object0, roundingMode0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put(0.0F);
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject.testValidity(double0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("is");
      Writer writer0 = JSONObject.quote("\b", (Writer) mockFileWriter0);
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("DokV_o/ya%.T=\"");
      Writer writer0 = JSONObject.quote("DokV_o/ya%.T=\"", (Writer) mockFileWriter0);
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("] not found.", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(302);
      Writer writer0 = JSONObject.quote((String) null, (Writer) stringWriter0);
      assertEquals("\"\"", writer0.toString());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      HashMap<BigDecimal, PseudoColumnUsage> hashMap0 = new HashMap<BigDecimal, PseudoColumnUsage>();
      jSONObject0.put("7F yi;9>Vx:  %smC", (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        jSONObject0.putOnce("7F yi;9>Vx:  %smC", bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"7F yi;9>Vx:  %smC\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("AP3oE>", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<BufferedReader, Byte> hashMap0 = new HashMap<BufferedReader, Byte>(32);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Float float0 = new Float(0.0);
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, float0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      JSONObject jSONObject1 = jSONObject0.put("getnames", (Object) locale_Category0);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) "java.io.StringWriter@0000000004");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(657);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject1 = jSONObject0.put("7F yi;9>Vx:  %smC", (Collection<?>) linkedList0);
      String string0 = jSONObject1.optString("7F yi;9>Vx:  %smC", "7F yi;9>Vx:  %smC");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal(1.0);
      Number number0 = jSONObject0.optNumber("hashCode", (Number) bigDecimal0);
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment(".");
      long long0 = jSONObject0.optLong(".", 0L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONObject jSONObject1 = jSONObject0.put("ksJk0s&i#gx", (Collection<?>) linkedList0);
      int int0 = jSONObject1.optInt("ksJk0s&i#gx", 45);
      assertEquals(45, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.increment("N\"wi2_F");
      float float0 = jSONObject0.optFloat("N\"wi2_F", (float) 0L);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject("java.lang.Short@0000000001", stringArray0);
      jSONObject0.append("java.lang.Short@0000000001", "java.lang.Short@0000000001");
      float float0 = jSONObject0.optFloat("java.lang.Short@0000000001", (float) (short)346);
      assertEquals(346.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Short> hashMap0 = new HashMap<Authenticator.RequestorType, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      float float0 = jSONObject0.optFloat("] is not a JSONArray.", (-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(14);
      double double0 = jSONObject0.optDouble("[r", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("utf-8");
      Class<DropMode> class0 = DropMode.class;
      DropMode dropMode0 = DropMode.INSERT_ROWS;
      DropMode dropMode1 = jSONObject1.optEnum(class0, "utf-8", dropMode0);
      assertSame(dropMode1, dropMode0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<StandardProtocolFamily> class0 = StandardProtocolFamily.class;
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET6;
      StandardProtocolFamily standardProtocolFamily1 = jSONObject0.optEnum(class0, "Nw\".Xq]&&uLD^LK", standardProtocolFamily0);
      assertSame(standardProtocolFamily1, standardProtocolFamily0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<Long, StandardProtocolFamily> hashMap0 = new HashMap<Long, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = jSONObject0.opt("%s is not an array index");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(32);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      
      jSONObject0.increment("utf-8");
      boolean boolean0 = jSONObject0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("javax.", 637L);
      try { 
        jSONObject0.getBoolean("javax.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType>();
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.ERROR;
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("Missing value", trayIcon_MessageType0);
      JSONArray jSONArray0 = (JSONArray)jSONObject0.get("Missing value");
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<PseudoColumnUsage, CharArrayWriter> hashMap0 = new HashMap<PseudoColumnUsage, CharArrayWriter>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(44);
      Class<Locale.Category> class0 = Locale.Category.class;
      jSONObject0.optEnum(class0, "(");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(15);
      String string0 = jSONObject0.toString(2);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 70);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<BufferedReader, Byte> hashMap0 = new HashMap<BufferedReader, Byte>(32);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("*y2]hbQ.vW6t>_i", (Map<?, ?>) hashMap0);
      Map<String, Object> map0 = jSONObject1.toMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ">T`y#");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Map<String, Object> map0 = jSONObject0.toMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ">T`y#");
      StringWriter stringWriter0 = new StringWriter(57);
      jSONObject0.write((Writer) stringWriter0, 57, 125);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject.writeValue(charArrayWriter0, linkedList0, 9, 9);
      assertEquals(2, charArrayWriter0.size());
      assertEquals("[]", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MockFileWriter mockFileWriter0 = new MockFileWriter("bp$=tmUN\"E_(");
      Writer writer0 = JSONObject.writeValue(mockFileWriter0, hashMap0, (-3405), 0);
      assertSame(mockFileWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.NO_CYCLE;
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.NONE;
      hashMap0.put(multipleGradientPaint_CycleMethod0, trayIcon_MessageType0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      StringWriter stringWriter0 = new StringWriter(57);
      jSONObject0.write((Writer) stringWriter0, 57, 57);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ">T`y#");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, (Object) null, 10, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = (BigDecimal)JSONObject.wrap(bigDecimal0);
      assertEquals((short)1, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = (BigInteger)JSONObject.wrap(bigInteger0);
      assertEquals((byte)0, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Double double0 = new Double(0);
      Object object0 = JSONObject.wrap(double0);
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Float float0 = new Float((-2407.32F));
      Object object0 = JSONObject.wrap(float0);
      assertEquals((-2407.32F), object0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Long long0 = new Long(0L);
      Object object0 = JSONObject.wrap(long0);
      assertEquals(0L, object0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Short> hashMap0 = new HashMap<Authenticator.RequestorType, Short>();
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.SERVER;
      Short short0 = new Short((short)3892);
      hashMap0.put(authenticator_RequestorType0, short0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Character character0 = new Character('$');
      Object object0 = JSONObject.wrap(character0);
      assertEquals('$', object0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = JSONObject.wrap(jSONArray0);
      assertSame(object0, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.NO_CYCLE;
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.ERROR;
      hashMap0.put(multipleGradientPaint_CycleMethod0, trayIcon_MessageType0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<StringWriter> linkedList0 = new LinkedList<StringWriter>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("] is not an enum of type ", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0");
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-j=[-~AU5C'jrN0~");
      assertEquals("-j=[-~AU5C'jrN0~", object0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("toA");
      assertEquals("toA", object0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("+^ 5&h;4R(E");
      assertEquals("+^ 5&h;4R(E", object0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("null");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("true");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("3");
      assertEquals(3, number0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("2AVE}&.w@aQ<<WnM(B");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-0");
      assertEquals(-0.0, number0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation(":o?l<}xuzEsO&Aab:1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("6q*_:ae^,\"5:Nrk'");
      assertEquals("6q*_:ae^,\"5:Nrk'", object0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      boolean boolean0 = jSONObject0.similar(jSONObject1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Short> hashMap0 = new HashMap<Authenticator.RequestorType, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.similar((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.similar(jSONObject0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("?/F7KMKc,_/nU</_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONObject jSONObject0 = new JSONObject(charArrayReader0);
      try { 
        jSONObject0.getBoolean("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.quote("", (Writer) charArrayWriter0);
      assertEquals("\"\"", charArrayWriter0.toString());
      assertEquals(2, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(100);
      JSONObject jSONObject0 = new JSONObject(charArrayWriter0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("' and instead saw ''", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      Spliterator<GroupLayout.Alignment> spliterator0 = linkedList0.spliterator();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, spliterator0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.lang.Short@0000000001";
      stringArray0[1] = "java.lang.Short@0000000001";
      JSONObject jSONObject0 = new JSONObject("java.lang.Short@0000000001", stringArray0);
      jSONObject0.append("java.lang.Short@0000000001", "java.lang.Short@0000000001");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(32);
      jSONObject0.putOnce("", "");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("tSu)c~XMc.ivE'QTF%%", true);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("*y2]hbq.vw6t>_i", (-784L));
      String string0 = jSONObject0.optString("*y2]hbq.vw6t>_i");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.put("7F yi;9>Vx:  %smC", (double) 0L);
      Number number0 = jSONObject0.optNumber("7F yi;9>Vx:  %smC");
      assertEquals(0.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      jSONObject0.put("j>j+zb[", (Collection<?>) linkedList0);
      Integer integer0 = new Integer(0);
      Number number0 = jSONObject0.optNumber("j>j+zb[", (Number) integer0);
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("javax.", 645L);
      long long0 = jSONObject0.optLong("javax.");
      assertEquals(645L, long0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3936);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      jSONObject0.put("\u0006;", (Collection<?>) linkedList0);
      long long0 = jSONObject0.optLong("\u0006;", (long) 3936);
      assertEquals(3936L, long0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HashMap<PseudoColumnUsage, CharArrayWriter> hashMap0 = new HashMap<PseudoColumnUsage, CharArrayWriter>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      HashMap<BigDecimal, PseudoColumnUsage> hashMap1 = new HashMap<BigDecimal, PseudoColumnUsage>();
      JSONObject jSONObject1 = jSONObject0.put("isspliterator", (Map<?, ?>) hashMap1);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("isspliterator");
      assertFalse(jSONObject2.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JSONObject jSONObject0 = new JSONObject(pipedInputStream0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject(".");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject1 = jSONObject0.put("7F yi;9>Vx:  %smC", (Collection<?>) linkedList0);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("7F yi;9>Vx:  %smC");
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      Integer integer0 = new Integer(2);
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("H|X|6CcBA+Mye}");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.put("int", (float) 0);
      int int0 = jSONObject0.optInt("int", 45);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("Y!P\"#HO]$", "Y!P\"#HO]$");
      int int0 = jSONObject0.optInt("Y!P\"#HO]$");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject("7F yi;9>Vx:  %smC", stringArray0);
      jSONObject0.put("7F yi;9>Vx:  %smC", (-1L));
      float float0 = jSONObject0.optFloat("7F yi;9>Vx:  %smC");
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.put("int", (float) 0);
      double double0 = jSONObject0.optDouble("int");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = jSONObject0.put("int", (float) 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject1.optBigInteger("int", bigInteger0);
      assertEquals((byte)0, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.put("7F yi;9>Vx:  %smC", (double) 0L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("7F yi;9>Vx:  %smC", bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("istrim", bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      HashMap<BufferedReader, Byte> hashMap0 = new HashMap<BufferedReader, Byte>(32);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("*y2]hbQ.vW6t>_i", (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = jSONObject1.optBigInteger("*y2]hbQ.vW6t>_i", bigInteger0);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = jSONObject0.increment("N\"wi2_F");
      BigDecimal bigDecimal0 = jSONObject1.optBigDecimal("N\"wi2_F", (BigDecimal) null);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject('2');
      jSONObject0.put("java.io.StringWriter@0000000002", (double) 1238.78F);
      BigDecimal bigDecimal0 = new BigDecimal(16);
      jSONObject0.optBigDecimal("java.io.StringWriter@0000000002", bigDecimal0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject1 = jSONObject0.put("j>j+zb[", (Collection<?>) linkedList0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("j>j+zb[", bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("utf-8");
      Class<RowIdLifetime> class0 = RowIdLifetime.class;
      try { 
        jSONObject1.getEnum(class0, "utf-8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not an enum of type java.io.StringWriter@0000000010.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject.quote("7FM yi;9>V:  %smC");
      JSONObject jSONObject0 = new JSONObject(0);
      HashMap<BigDecimal, PseudoColumnUsage> hashMap0 = new HashMap<BigDecimal, PseudoColumnUsage>();
      jSONObject0.put("7FM yi;9>V:  %smC", (Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      String string0 = JSONObject.numberToString(bigDecimal0);
      jSONObject0.put("java.math.BigDecimal@0000000008", (float) 0);
      String string1 = jSONObject0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Short short0 = new Short((short)346);
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = jSONObject0.put("7F yi;9>Vx:  %smC", (double) 0L);
      JSONObject jSONObject2 = jSONObject1.increment("7F yi;9>Vx:  %smC");
      assertSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      jSONObject0.put("int", (Collection<?>) linkedList0);
      try { 
        jSONObject0.increment("int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000008].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(76);
      JSONObject jSONObject1 = jSONObject0.increment("y,b13SpTYR7d} ");
      JSONObject jSONObject2 = jSONObject1.increment("y,b13SpTYR7d} ");
      assertSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject1 = jSONObject0.put("7F yi;9>Vx:  %smC", (Collection<?>) linkedList0);
      boolean boolean0 = jSONObject1.has("7F yi;9>Vx:  %smC");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      JSONObject jSONObject0 = new JSONObject(locale0);
      jSONObject0.putOpt(">T`y#", ">T`y#");
      jSONObject0.getString(">T`y#");
      assertEquals(15, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      JSONObject jSONObject0 = new JSONObject(locale0);
      LinkedList<MultipleGradientPaint.ColorSpaceType> linkedList0 = new LinkedList<MultipleGradientPaint.ColorSpaceType>();
      JSONObject jSONObject1 = jSONObject0.put(">T`y#", (Collection<?>) linkedList0);
      try { 
        jSONObject1.getString(">T`y#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000048] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      String[] stringArray0 = JSONObject.getNames((Object) bigInteger0);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<DropMode> class0 = DropMode.class;
      String[] stringArray0 = JSONObject.getNames((Object) class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3932);
      assertTrue(jSONObject0.isEmpty());
      
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject1 = jSONObject0.put("SH", (Collection<?>) linkedList0);
      JSONObject.getNames(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("java.io.StringWriter@0000000003", (double) 2641L);
      long long0 = jSONObject1.getLong("java.io.StringWriter@0000000003");
      assertEquals(2641L, long0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      jSONObject0.put("j>j+zb[", (Collection<?>) linkedList0);
      try { 
        jSONObject0.getLong("j>j+zb[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      HashMap<BigDecimal, PseudoColumnUsage> hashMap0 = new HashMap<BigDecimal, PseudoColumnUsage>();
      jSONObject0.put("7F yi;9>Vx:  %smC", (Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("7F yi;9>Vx:  %smC");
      int int0 = jSONObject1.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JDBCType> linkedList0 = new LinkedList<JDBCType>();
      JSONObject jSONObject1 = jSONObject0.put("getin}tern", (Collection<?>) linkedList0);
      try { 
        jSONObject1.getJSONObject("getin}tern");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject1 = jSONObject0.put("int", (Collection<?>) linkedList0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("int");
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("utf-8");
      try { 
        jSONObject0.getJSONArray("utf-8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("utf-8");
      int int0 = jSONObject1.getInt("utf-8");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      jSONObject0.put(",:]}/\"[{;=#", (Collection<?>) linkedList0);
      try { 
        jSONObject0.getInt(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = jSONObject0.increment("N\"wi2_F");
      Number number0 = jSONObject1.getNumber("N\"wi2_F");
      assertEquals(1, number0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3950);
      HashMap<BigDecimal, PseudoColumnUsage> hashMap0 = new HashMap<BigDecimal, PseudoColumnUsage>();
      jSONObject0.put("\u0006iX';", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getDouble("\u0006iX';");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("utf-8");
      boolean boolean0 = jSONObject1.optBoolean("utf-8", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("java.io.StringWriter@0000000004", false);
      boolean boolean0 = jSONObject0.getBoolean("java.io.StringWriter@0000000004");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(47);
      JSONObject jSONObject1 = jSONObject0.increment("N\"wi2_F");
      try { 
        jSONObject1.getBigDecimal("N\"wi2_F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = JSONObject.doubleToString(906.31);
      assertEquals("906.31", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = JSONObject.doubleToString(57);
      assertEquals("57", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject1 = jSONObject0.put("false", (Collection<?>) linkedList0);
      MockFile mockFile0 = new MockFile("false", "false");
      JSONObject jSONObject2 = jSONObject1.append("false", mockFile0);
      assertFalse(jSONObject2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, "s[utf-8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      HashMap<BigDecimal, PseudoColumnUsage> hashMap0 = new HashMap<BigDecimal, PseudoColumnUsage>();
      jSONObject0.put("7F yi;9>Vx:  %smC", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.append("7F yi;9>Vx:  %smC", "7F yi;9>Vx:  %smC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[7F yi;9>Vx:  %smC] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(44);
      JSONObject jSONObject1 = jSONObject0.accumulate("#/", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Short> hashMap0 = new HashMap<Authenticator.RequestorType, Short>();
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      hashMap0.put(authenticator_RequestorType0, (Short) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      HashMap<BigDecimal, PseudoColumnUsage> hashMap0 = new HashMap<BigDecimal, PseudoColumnUsage>();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      PseudoColumnUsage pseudoColumnUsage0 = PseudoColumnUsage.SELECT_LIST_ONLY;
      PseudoColumnUsage pseudoColumnUsage1 = hashMap0.put(bigDecimal0, pseudoColumnUsage0);
      hashMap0.put((BigDecimal) null, pseudoColumnUsage1);
      // Undeclared exception!
      try { 
        jSONObject0.put("7F yi;9>Vx:  %smC", (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("4:NWDV-5", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(464);
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write((Writer) stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "7F yi;9>Vx:  %smC");
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("] is not an enum of type ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "(|");
      jSONObject0.optString("(|");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      HashMap<BigDecimal, PseudoColumnUsage> hashMap0 = new HashMap<BigDecimal, PseudoColumnUsage>();
      jSONObject0.put("bp$=tmUN\"E_(", (Map<?, ?>) hashMap0);
      double double0 = jSONObject0.optDouble("bp$=tmUN\"E_(", (double) 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3950);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject1 = jSONObject0.put("\u0006;", (Collection<?>) linkedList0);
      try { 
        jSONObject1.getNumber("\u0006;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(14);
      boolean boolean0 = jSONObject0.has("4714D?1#Ul>G8k$}wG");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "java.io.StringWriter@0000000002");
      jSONObject0.keys();
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query(",:]}/\"[{;=#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("q8-;)vfa6yJb7.[(i");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("0.0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      HashMap<Locale.FilteringMode, PipedWriter> hashMap0 = new HashMap<Locale.FilteringMode, PipedWriter>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 1064.88F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull(" at ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Short> hashMap0 = new HashMap<Authenticator.RequestorType, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("\"\"", (double) (-5.83568F));
      assertFalse(jSONObject0.isEmpty());
      
      float float0 = jSONObject0.getFloat("\"\"");
      assertEquals((-5.83568F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<String> set0 = jSONObject0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Number number0 = jSONObject0.optNumber("\r");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      HashMap<PseudoColumnUsage, CharArrayWriter> hashMap0 = new HashMap<PseudoColumnUsage, CharArrayWriter>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("DokV_o/ya%.T=\"");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Class<DropMode> class0 = DropMode.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      int int0 = jSONObject0.optInt("Nqey");
      assertEquals(34, jSONObject0.length());
      assertEquals(0, int0);
  }
}
