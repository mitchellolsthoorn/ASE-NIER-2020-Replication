/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 17:41:50 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.LocalDate;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.TimeZone;
import java.util.UUID;
import java.util.Vector;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull((byte)116, (byte) (-10));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-463), 2, 2);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("MIIN:%&fkr", serializeConfig0, parserConfig0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("fastjson.parser.autoTypeAccept", "nio");
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, sQLNonTransientException0, "nio");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("G2Ex<!j}ik|sB+~uXEc");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1000000, 0, 41);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "G2Ex<!j}ik|sB+~uXEc";
      stringArray0[1] = "G2Ex<!j}ik|sB+~uXEc";
      stringArray0[2] = "G2Ex<!j}ik|sB+~uXEc";
      stringArray0[3] = "jsonpath can not be null";
      stringArray0[4] = "G2Ex<!j}ik|sB+~uXEc";
      stringArray0[5] = "G2Ex<!j}ik|sB+~uXEc";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_SizeSegment0, jSONPath_MultiPropertySegment0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -24389
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!`^H^Ja!H%3ZnU\"M9'");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("&:");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"&\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but '-'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<K+$>Km),Nv?Fr3");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" c%7]_`py");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=0>,=$m8)~mw8y#;l");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("0fv6h");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(0L, object0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("~{p");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$~e`P6q#ioM");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!`^H^Ja!QH%3ZnU\"M9'");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("~{p");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("mS.wego,hUej' xY", (-2145), jSONPath_Operator0);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_DoubleOpSegement0);
      assertSame(jSONPath_DoubleOpSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("m", "java.nio.file.Paths", "-2147483648", (String[]) null, false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$VALUES");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_MatchSegement0);
      assertSame(jSONPath_Filter0, jSONPath_MatchSegement0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$x");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSONPath.extract("H.\"q,", "H.\"q,", parserConfig0, 40, (Feature[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("hg\u0002 nnr/B");
      String string0 = jSONPath_JSONPathParser0.readName();
      assertEquals("hg\u0002", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Lkj`1:-+");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$VALUES");
      jSONPath_JSONPathParser0.next();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("hg\u0002 nnr/B");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('&');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '&, but 'h'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = JSONPath.compile("OKQ{bTWV");
      Short short0 = new Short((short) (-1016));
      Float float0 = new Float((double) (short) (-1016));
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, short0, float0);
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 0, 82);
      JSONPath jSONPath0 = JSONPath.compile("L2");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(4481, 4481);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer", hashMap0, mockThrowable0);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, "L2", sQLClientInfoException0);
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "\\.";
      JSONPath jSONPath0 = new JSONPath(".");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Short short0 = new Short((short)1566);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement(string0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(string0);
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, jSONPath_WildCardSegment0, mockGregorianCalendar0, sQLFeatureNotSupportedException0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment(string0, boolean0);
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, short0, jSONPath_SizeSegment0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("2bFSmY:Hs06S,>4");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue((-4270347329889690746L));
      assertEquals((-4.2703473298896906E18), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Long long0 = new Long((-3851359326990528739L));
      Set<?> set0 = JSONPath.keySet((Object) long0, "Dep");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("", 1035L, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("size");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("size", "size", 14);
      // Undeclared exception!
      try { 
        jSONPath_IntOpSegement0.apply(jSONPath0, sQLTimeoutException0, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("H.3\"q,");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      int int0 = JSONPath.size((Object) jSONPath_FilterSegment0, "fastjson.parser.safeMode");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      Double double0 = new Double(3968.7064698);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Map<String, Object> map0 = JSONPath.paths((Object) double0, serializeConfig0);
      Class<Calendar> class0 = Calendar.class;
      boolean boolean0 = jSONPath0.setPropertyValue(map0, "fastjson.parser.deny.internal", 115L, class0);
      assertEquals(2, map0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = JSONPath.compile("]1rn{QcT3vC~1n[N/");
      Byte byte0 = new Byte((byte)26);
      boolean boolean0 = jSONPath0.setPropertyValue(parserConfig0, "(FZ)V", (-619L), byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = JSONPath.set((Object) null, "DDmLje6 'y:ncajg", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("-", serializeConfig0, parserConfig0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) sQLSyntaxErrorException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object object0 = JSONPath.reserveToObject((Object) null, (String[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask");
      boolean boolean0 = jSONPath0.removePropertyValue("com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask", "scanFloat", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object object0 = JSONPath.read((String) null, "com.alibaba.fastjson.JSONPath$StringOpSegement");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null, (SerializeConfig) null);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<SQLTransientException> class0 = SQLTransientException.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("evalKeySet error : ", serializeConfig0, parserConfig0);
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      Collection<Object> collection0 = jSONPath0.getPropertyValues(throwableDeserializer0);
      assertFalse(collection0.contains("evalKeySet error : "));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath jSONPath0 = new JSONPath("nin");
      Object object0 = jSONPath0.getPropertyValue(jSONPath_Operator0, "0fv6h", 0L);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      Class<Calendar> class0 = Calendar.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$IntBetweenSegement", serializeConfig0, parserConfig0);
      Class<BigInteger> class0 = BigInteger.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("FcczyJbOm");
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[6 NhM{0=aJzN]qkt");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{Mbd1.1O\"a");
      DefaultJSONParser defaultJSONParser1 = (DefaultJSONParser)jSONPath0.getArrayItem(defaultJSONParser0, 0);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("G2Ex<!j}ik|sB+~uXEc");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      int int0 = jSONPath0.evalSize(jSONPath_SizeSegment0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(":)lj**");
      int int0 = jSONPath0.evalSize(":)lj**");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      JSONPath jSONPath0 = new JSONPath("java.nio.file.Paths");
      int int0 = jSONPath0.evalSize(mockGregorianCalendar0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("I5H/hqa+Yg'T~Oe");
      Long[] longArray0 = new Long[2];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("I5H/hqa+Yg'T~Oe", longArray0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntObjInSegement0);
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_FilterSegment0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("_30lsoI| #eIyP");
      Set<?> set0 = jSONPath0.evalKeySet("_30lsoI| #eIyP");
      assertFalse(set0.contains("_30lsoI| #eIyP"));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(48);
      Object object0 = JSONPath.eval((Object) jSONPath_ArrayAccessSegment0, "/");
      assertSame(jSONPath_ArrayAccessSegment0, object0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = JSONPath.compare("like", "([C)F");
      assertEquals(68, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1481), (-1481), 102, (-1481), 105, (-1481));
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = JSONPath.compare(mockGregorianCalendar0, calendar0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(16, 0, 16);
      JSONPath.size((Object) jSONPath_RangeSegment0, "");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("H.3\"q,");
      JSONPath jSONPath0 = JSONPath.compile("H.3\"q,");
      int int0 = jSONPath0.size((Object) jSONPath_NotNullSegement0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny.internal");
      int int0 = jSONPath0.size((Object) classLoader0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("DDmLje6 'y:ncajg");
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/");
      LocalDate localDate0 = MockLocalDate.ofYearDay(64, 64);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(localDate0, "/", 64, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.time.ZonedDateTime");
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, "com.alibaba.fastjson.JSONPath$MultiPropertySegment", 1720L, "java.time.ZonedDateTime");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("java.nio.file.Paths");
      Byte byte0 = new Byte((byte)85);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, (Object) null, 10, byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1466);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath.paths((Object) parserConfig0, serializeConfig0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) parserConfig0, "nUY/EL", (Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.parser.ParserConfig
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("B");
      boolean boolean0 = JSONPath.set((Object) sQLNonTransientException0, "getFieldValue error.", (Object) sQLNonTransientException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("$~e`P6q#ioM");
      JSONPath jSONPath1 = new JSONPath("charAt");
      // Undeclared exception!
      jSONPath1.set((Object) jSONPath0, (Object) null, true);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("DDmLje6 'y:ncajg");
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      jSONPath0.set((Object) throwableDeserializer0, (Object) null, false);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.time.ZonedDateTime");
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) class0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("bH/)}q7r.X_J.RB#");
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath1 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      // Undeclared exception!
      jSONPath1.set((Object) jSONPath0, (Object) jSONPath0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("LBp_", "pQ");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$KeySetSegment", serializeConfig0, parserConfig0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLNonTransientConnectionException0, (Object) sQLDataException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("evalKeySet error : ", serializeConfig0, parserConfig0);
      Class<Short> class0 = Short.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) javaBeanSerializer0, (Object) jSONPath_Operator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : evalKeySet error : 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "java.time.ZoneOffset";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(class0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.alibaba.fastjson.JSONPath$Context", "fastjson.parser.deny.internal");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.deny.internal", sQLInvalidAuthorizationSpecException0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$Context";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(sQLTimeoutException0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "fastjson.parser.safeMode";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(class0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath0, stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "not";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("not", stringArray0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(classLoader0, "fastjson.parser.deny.internal", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("nin");
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      jSONPath0.removePropertyValue(locale0, "y", true);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("@type");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      boolean boolean0 = jSONPath0.removePropertyValue(sQLRecoverableException0, "1.2.68", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("v");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem((JSONPath) null, (Object) null, 1693);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath_WildCardSegment0, "true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      JSONPath.remove((Object) bigDecimal0, "in");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      boolean boolean0 = JSONPath.remove((Object) "&s5o|~", "alibaba");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = JSONPath.remove((Object) "fastjson.parser.deny", "fastjson.parser.deny");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("DDmLje6 'y:ncajg");
      // Undeclared exception!
      JSONPath.remove((Object) jSONPath0, "DDmLje6 'y:ncajg");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("object");
      Class<Float> class0 = Float.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      jSONPath0.remove((Object) javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      boolean boolean0 = jSONPath0.remove((Object) parserConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("s/81S%#.\"@Uo/RXk[", "s/81S%#.\"@Uo/RXk[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2s/81S%#.\"@Uo/RXk[
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("-", "-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) jSONPath0, "-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(127, 127, 127, (-88), 64, (-1530));
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) mockGregorianCalendar0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath jSONPath0 = JSONPath.compile("not");
      Set<?> set0 = jSONPath0.keySet((Object) jSONPath_Operator0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("getFieldValue error.");
      jSONPath0.keySet((Object) "getFieldValue error.");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{D3A9WG5_P!9f[n#[x");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {D3A9WG5_P!9f[n#[x
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stack-trace/4");
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("e[d3vt1");
      MockPrintStream mockPrintStream0 = new MockPrintStream("</O&_k3$V");
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(mockPrintStream0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      Class<Calendar> class0 = Calendar.class;
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue(class0, "not support type :", 3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("bH/)}q7r.X_J.RB#");
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem("-", (-1979));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSONPath.extract("T", "[char", parserConfig0, 126, featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ident
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "fastjson.parser.deny", parserConfig0, (int) (byte)121, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[2];
      // Undeclared exception!
      try { 
        JSONPath.extract("5=1E0rji7S+}u", "-", parserConfig0, 126, featureArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -3
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(2363);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("error", serializeConfig0, parserConfig0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("K6wh9QL,,B");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("-");
      JSONPath jSONPath0 = new JSONPath("-");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -3
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("nin");
      Double double0 = new Double(0.0);
      Set<?> set0 = jSONPath0.evalKeySet(double0);
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Object object0 = JSONPath.eval((Object) "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer", "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONPath.eval((Object) "_30lsoI| #eIyP", "_30lsoI| #eIyP");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("-");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) jSONPath_WildCardSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("bH/)}q7r.X_J.RB#");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      DataTruncation dataTruncation0 = new DataTruncation(558, false, false, 558, 558, sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) dataTruncation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. bH/)}q7r.X_J.RB#
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("qqH");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(jSONPath_WildCardSegment0, "qqH", 2076L, "qqH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Pattern pattern0 = Pattern.compile("<;v");
      JSONPath jSONPath0 = new JSONPath("Ident");
      // Undeclared exception!
      jSONPath0.deepSet(bigDecimal0, "!`^H^Ja!H%3ZnU\"M9'", 4647432019745535567L, pattern0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2117, 2117, Integer.MIN_VALUE);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("R.L[tgrY.", serializeConfig0, (ParserConfig) null);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(jSONPath_SizeSegment0, "support", 803L, jSONPath_RangeSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      JSONPath jSONPath0 = JSONPath.compile("GyzqNbl2w0rcUE");
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(mockGregorianCalendar0, "`q;6}61obD|", (-1700L), mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path GyzqNbl2w0rcUE, segement `q;6}61obD|
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("bH/bzq7r.X_J.RB#");
      String[] stringArray0 = new String[5];
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(stringArray0[0], vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("with");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      DataTruncation dataTruncation0 = new DataTruncation(1486, true, true, 19, 1740, batchUpdateException0);
      boolean boolean0 = JSONPath.containsValue((Object) jSONPath0, "rlike", (Object) dataTruncation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("IY/U]", "[1SY9", 2191);
      JSONPath.containsValue((Object) "IY/U]", "K", (Object) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      DataTruncation dataTruncation0 = new DataTruncation(554, true, true, 478, 554);
      boolean boolean0 = jSONPath0.containsValue((Object) jSONPath_WildCardSegment0, (Object) dataTruncation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Jrt4#wy@b[Gsmo");
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) "Jrt4#wy@b[Gsmo", (Object) "Jrt4#wy@b[Gsmo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : Jrt4#wy@b[Gsmo
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask", "-", (-1));
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) sQLTimeoutException0, "-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) class0, "fastjson.parser.deny");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      JSONPath.contains((Object) mockGregorianCalendar0, "cOO)#zR< 7");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Ky'f");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) "Ky'f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : Ky'f
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compare((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "-", objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(492);
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) jSONPath_ArrayAccessSegment0, "com.alibaba.fastjson.JSONPath$NullSegement", (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path com.alibaba.fastjson.JSONPath$NullSegement
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) "2+6Qp&(',be$Ho.&~", "stackTrace", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path stackTrace
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null, serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(sQLClientInfoException0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("like", serializeConfig0, parserConfig0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLNonTransientException0);
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(sQLClientInfoException0, "0XH|x%<q/?Y'AnUL", stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path like, segement 0XH|x%<q/?Y'AnUL
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = '6';
      charArray0[4] = '6';
      charArray0[5] = '6';
      BigDecimal bigDecimal0 = new BigDecimal(charArray0);
      Float float0 = new Float(916.5F);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("d,XD]Y4");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, "d,XD]Y4", 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("'9,)HW\"", false);
      // Undeclared exception!
      jSONPath_PropertySegment0.setValue(jSONPath0, jSONPath0, "pQ");
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("? .aEZQBtm^");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("? .aEZQBtm^", false);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, "7G/O", "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("1.2.68");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(1, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Et*J4+x");
      jSONPath0.init();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" T'T4_Ts mXS YO");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("");
      assertEquals("", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("~{p");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("~{p");
      JSONPath jSONPath0 = JSONPath.compile("/StackTrace/7");
      boolean boolean0 = jSONPath0.set((Object) "I", (Object) jSONPath_Segment0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.time.ZonedDateTime");
      int[] intArray0 = new int[8];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("java.time.ZonedDateTime");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("V", intArray0, sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) batchUpdateException0, (Object) batchUpdateException0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("k2Xgyr", serializeConfig0, parserConfig0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) bigInteger0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$1");
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("DDmLje6 'y:ncajg");
      String[] stringArray0 = new String[0];
      Object object0 = new Object();
      jSONPath0.arrayAdd(object0, (Object[]) stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer");
      boolean boolean0 = jSONPath0.containsValue((Object) jSONPath0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("v");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      boolean boolean0 = jSONPath0.contains((Object) jSONPath_WildCardSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("7");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("7");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) sQLTimeoutException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask");
      Object object0 = jSONPath0.eval((Object) "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("60DHMg]XmNM");
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int[] intArray0 = new int[3];
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("8#u jQQlp0mSK65K", serializeConfig0, parserConfig0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.alibaba.fastjson.parser.JSONScanner", "", 3179, intArray0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.BatchUpdateException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(">uWnF$~>_%`j>JE ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("%PHV;=)7\"d-:.\":Xj");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-162));
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, jSONReaderScanner0.matchStat, "WriteTabAsSpecial");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "AutoCloseSource";
      stringArray0[1] = "/stackTrace/1";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject((Object) null, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(104, 104, 104);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "scanFieldInt";
      stringArray0[1] = "scanFieldInt";
      stringArray0[2] = "bH/bzq7r.X_J.RB#";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject(jSONPath_RangeSegment0, stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToObject("-", stringArray0);
      assertEquals("-", object0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1466);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      MockDate mockDate0 = new MockDate(326L);
      Set<?> set0 = jSONPath0.evalKeySet(mockDate0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.time.ZonedDateTime");
      int[] intArray0 = new int[2];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, "java.time.ZonedDateTime", (Object) null);
      jSONPath0.evalKeySet(jSONArray0);
      assertEquals(2, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Object object0 = JSONPath.reserveToArray(parserConfig0, (String[]) null);
      JSONPath jSONPath0 = new JSONPath("k5ksVZgicD&9*<");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      SQLWarning sQLWarning0 = new SQLWarning("in", "parser");
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, sQLWarning0, object0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("like");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("like", true);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("writeNull", "writeNull", 2614);
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, sQLFeatureNotSupportedException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("evalKeySet errr  ", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(jSONPath_Operator0, "fastjson.parser.deny.internal", false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      JSONPath jSONPath0 = JSONPath.compile("bH");
      jSONPath0.deepSet(vector0, "com.alibaba.fastjson.JSONPath$MatchSegement", 57, "java");
      assertFalse(vector0.contains("com.alibaba.fastjson.JSONPath$MatchSegement"));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("org.hibernate.proxy.HibernateProxy");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.hibernate.proxy.HibernateProxy");
      jSONPath0.deepSet((Object) null, "<=r.c9lKFH8r", 7658177784286215602L, sQLTimeoutException0);
      assertEquals("org.hibernate.proxy.HibernateProxy", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("like");
      Class<UUID> class0 = UUID.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1));
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues(jSONPath_ArrayAccessSegment0);
      int[] intArray0 = new int[3];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      Object object0 = jSONPath_MultiIndexSegment0.eval(jSONPath0, (Object) null, (Object) null);
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(object0, "like", list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(19);
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      JSONPath jSONPath0 = new JSONPath("C)Ljava/lang/Enum;", serializeConfig0, parserConfig0);
      Vector<Object> vector0 = new Vector<Object>();
      jSONPath0.deepScan(vector0, "fastjson.parser.deny.internal", vector0);
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-47));
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      Map<String, Object> map0 = JSONPath.paths((Object) byte0, serializeConfig0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask");
      boolean boolean0 = jSONPath0.set((Object) map0, (Object) serializeConfig0, false);
      assertEquals(2, map0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.valueOf((-4837536971810737970L), 34);
      Float float0 = Float.valueOf((float) 34);
      boolean boolean0 = JSONPath.eqNotNull(float0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Float float0 = new Float((double) 2);
      boolean boolean0 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, (byte)0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull(989, 3089);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((byte)0, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(2605.464);
      Short short0 = new Short((short)198);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Short short0 = new Short((short)720);
      boolean boolean0 = JSONPath.eqNotNull(short0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-10));
      boolean boolean0 = JSONPath.eq(byte0, "writeDirec");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      boolean boolean0 = JSONPath.eq(jSONPath_SizeSegment0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Short short0 = new Short((short)0);
      boolean boolean0 = JSONPath.eq(short0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.nio.file.Paths");
      LinkedList<JSONPath> linkedList0 = new LinkedList<JSONPath>();
      Vector<Object> vector0 = new Vector<Object>(linkedList0);
      jSONPath0.deepGetPropertyValues(linkedList0, vector0);
      assertEquals("[]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("bH/)}q7r.X_J.RB#");
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>();
      Vector<Object> vector0 = new Vector<Object>(arrayDeque0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLClientInfoException0, vector0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("bH/bzq7r.X_J.RB#");
      LinkedList<JSONPath> linkedList0 = new LinkedList<JSONPath>();
      Vector<Object> vector0 = new Vector<Object>(linkedList0);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("bH/bzq7r.X_J.RB#", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("nin", serializeConfig0, parserConfig0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath0, "nin");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, "aL@<@C", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("2+6Qp&(',be$Ho.&~");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, "2+6Qp&(',be$Ho.&~", 109, jSONPath0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("G2Ex<!j}ik|sB+~uXEc");
      int[] intArray0 = new int[6];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "G2Ex<!j}ik|sB+~uXEc";
      stringArray0[1] = "G2Ex<!j}ik|sB+~uXEc";
      stringArray0[2] = "G2Ex<!j}ik|sB+~uXEc";
      stringArray0[3] = "G2Ex<!j}ik|sB+~uXEc";
      stringArray0[4] = "G2Ex<!j}ik|sB+~uXEc";
      stringArray0[5] = "G2Ex<!j}ik|sB+~uXEc";
      stringArray0[6] = "G2Ex<!j}ik|sB+~uXEc";
      stringArray0[7] = "G2Ex<!j}ik|sB+~uXEc";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, "G2Ex<!j}ik|sB+~uXEc", "G2Ex<!j}ik|sB+~uXEc");
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, intArray0[4], arrayList0);
      assertEquals(8, arrayList0.size());
      assertEquals(6, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(")|KS{+s98&&{<mqT|V");
      Object object0 = jSONPath0.getArrayItem((Object) null, 3089);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      long[] longArray0 = new long[9];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("{\"$ref\":\"", longArray0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntInSegement0);
      JSONPath jSONPath0 = new JSONPath("in");
      Short short0 = new Short((short)33);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("{\"$ref\":\"", "}`^;O!*=/4(3", (-20700637));
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, short0, sQLRecoverableException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.time.ZonedDateTime");
      Stack<Object> stack0 = new Stack<Object>();
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("f=-X#XBEfeyn'.A$o");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(42, 42, 42);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, mockGregorianCalendar0, stack0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(48, 63, 512);
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("1.2.68", jSONPath_RangeSegment0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      boolean boolean0 = jSONPath_FilterSegment0.remove((JSONPath) null, jSONPath_FilterSegment0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("_30lsoI| #eIyP");
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("/", jSONPath_MinSegment0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_SizeSegment0, jSONPath_MinSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(378, false);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("fastjson.parser.autoTypeAccept");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.deny");
      Integer integer0 = new Integer(378);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, sQLTimeoutException0, integer0);
      assertEquals(378, object0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("unterminated");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("unterminated", stringArray0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("33E](%g<O'~.J,c", "zurOCH^{Y{RCszdBvy9", 10, (Throwable) null);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_FilterSegment0, sQLFeatureNotSupportedException0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      JSONPath jSONPath0 = new JSONPath("Gp\"i,_V awob|", serializeConfig0, parserConfig0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("writeReference");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("e[d3vt1", pattern0, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("e[d3vt1");
      BigInteger bigInteger0 = BigInteger.ZERO;
      SQLTransientException sQLTransientException0 = new SQLTransientException("");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTransientException0);
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, bigInteger0, sQLTransactionRollbackException0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToArray("F|ifxNx{cdQ", stringArray0);
      JSONPath jSONPath0 = new JSONPath(")|KS{+s98&&{<mqT|V");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("nio", "Q&v2ssf", jSONPath_Operator0);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, ((JSON) object0).defaultLocale, "F|ifxNx{cdQ", object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToArray("F|ifxNx{cdQ", stringArray0);
      JSONPath jSONPath0 = new JSONPath(")|KS{+s98&&{<mqT|V");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("F|ifxNx{cdQ", "yyyy-MM-dd HH:mm:ss", jSONPath_Operator0);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, ((JSON) object0).defaultLocale, "F|ifxNx{cdQ", object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("-", "-", jSONPath_Operator0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, "-", jSONPath_WildCardSegment0, jSONPath_SizeSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("-", "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask", false);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RlikeSegement0);
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, jSONPath_Operator0, "like", jSONPath_FilterSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(713);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("in", serializeConfig0, parserConfig0);
      Integer integer0 = new Integer(713);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.autoTypeAccept", false);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.autoTypeAccept", "in", (String) null, (String[]) null, false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("SqlDateDeserializer", "", 743);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("fastjson.parser.autoTypeAccept", "SqlDateDeserializer", (int) integer0, (Map<String, ClientInfoStatus>) null, sQLTimeoutException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.alibaba.fastjson.JSONPath$NullSegement", "SqlDateDeserializer", sQLTimeoutException0);
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, jSONPath_PropertySegment0, sQLClientInfoException0, sQLNonTransientException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "com";
      stringArray0[1] = "com";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("VT}l", "VT}l", "com", stringArray0, true);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("/StackTrace/12", (String) null, "KB^TU", stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("v");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("v", (String) null, 42);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("A j-d", (-1466.025221188), jSONPath_Operator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("7P>S`7! EThO?i,jh", "v", 42);
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, sQLInvalidAuthorizationSpecException0, jSONPath0, sQLIntegrityConstraintViolationException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("fastjson.parser.deny.internal", (-1386L), jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("r5?05EWn5");
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, ")|KS{+s98&&{<mqT|V", jSONPath0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("java.nio.file.Paths");
      String[] stringArray0 = new String[16];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("java.nio.file.Paths", stringArray0, true);
      Double double0 = new Double((-1.0));
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "java.nio.file.Paths", "s_!?2ZKBmd", double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("DDmLje6 'y:ncajg");
      String[] stringArray0 = new String[1];
      Object object0 = new Object();
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("1nq*2zB(3_p)Rn,;-", stringArray0, false);
      Double double0 = new Double(100.0);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, object0, double0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1466);
      Long[] longArray0 = new Long[9];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("\"-9223372036854775808\"", longArray0, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntObjInSegement0, jSONPath_IntObjInSegement0, false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fastjson.parser.safeMode", "fastjson.parser.autoTypeAccept", 1776);
      SQLWarning sQLWarning0 = new SQLWarning("fastjson.parser.autoTypeSupport", "3v,* \"E+_KND00%2:k", 1776, sQLIntegrityConstraintViolationException0);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, classLoader0, jSONPath0, sQLWarning0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-2086L));
      longArray0[0] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("com.alibaba.fastjson.JSONPath$MinSegment", longArray0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntObjInSegement0, jSONPath_IntObjInSegement0, true);
      SerializeConfig serializeConfig0 = new SerializeConfig(1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, aSMDeserializerFactory0, classLoader0, long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-2086L));
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("com.alibaba.fastjson.JSONPath$MinSegment", longArray0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntObjInSegement0, jSONPath_IntObjInSegement0, true);
      SerializeConfig serializeConfig0 = new SerializeConfig(1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, aSMDeserializerFactory0, classLoader0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("bH/)}q7r.X_J.RB#");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("bH/)}q7r.X_J.RB#", (-4270347329889690746L), (-4270347329889690746L), false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      Locale locale0 = Locale.CHINA;
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, jSONPath_FilterSegment0, jSONPath0, locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      long[] longArray0 = new long[1];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("can not cast to double, value : ", longArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("can not cast to double, value : ");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("can not cast to double, value : ", (Throwable) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("can not cast to double, value : ", "can not cast to double, value : ", sQLTransactionRollbackException0);
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, sQLTransactionRollbackException0, "can not cast to double, value : ", sQLNonTransientException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.time.ZonedDateTime");
      Long long0 = new Long((-4270347329889690746L));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("createCollection", "P");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("NOT_LIKE", sQLInvalidAuthorizationSpecException0, true);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLInvalidAuthorizationSpecException0);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, "java.time.ZonedDateTime", long0, sQLSyntaxErrorException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment((String) null, (Object) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("ZJW~+m$,");
      JSONPath jSONPath0 = JSONPath.compile("ZJW~+m$,");
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, bigInteger0, jSONPath0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("like");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(316, (-1), 119);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("like");
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, "3d&^&SMn\b\"vGpX<", sQLRecoverableException0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-847), (-847), 102);
      JSONPath jSONPath0 = JSONPath.compile("j\r3");
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, parserConfig0, parserConfig0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-3142), 45, 45);
      JSONPath jSONPath0 = new JSONPath("GyzqNbl2w0rcUE");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("GyzqNbl2w0rcUE", true);
      jSONPath_PropertySegment0.setValue(jSONPath0, "GyzqNbl2w0rcUE", jSONPath_RangeSegment0);
      assertEquals("GyzqNbl2w0rcUE", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSONPath.extract("[|jsl", "n", parserConfig0, (-1234), featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json : pos 2, line 1, column 3[|jsl
         //
         verifyException("com.alibaba.fastjson.JSONPath$PropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Double double0 = new Double(3700);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(720, (-1081938325), 39, 720, 3700, 720);
      // Undeclared exception!
      try { 
        JSONPath.compare(double0, mockGregorianCalendar0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockGregorianCalendar cannot be cast to java.lang.Double
         //
         verifyException("java.lang.Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      int int0 = JSONPath.compare("((koE", "((koE");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.alibaba.fastjson.JSONPath$1", "com.alibaba.fastjson.JSONPath$1", 4475);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(4475, (-1833), (-1833));
      // Undeclared exception!
      try { 
        JSONPath.compare(sQLTransientConnectionException0, jSONPath_RangeSegment0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLTransientConnectionException cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      JSONPath jSONPath0 = new JSONPath("tru=");
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      Object object0 = jSONPath_MinSegment0.eval(jSONPath0, "uCo9M\"T'r_&O(H ?>_L", vector0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, jSONPath0, jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Long long0 = new Long(6);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath jSONPath0 = new JSONPath("Go;;]c66V@f");
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, long0, long0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("a@<@C");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement(":4W@aea[*v");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"4W@aea[*v\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("in");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("'9,)HW\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"'9\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stack-trace/6");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("stack-trace", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("bH/bzq7r.X_J.RB#");
      jSONPath0.init();
      assertEquals("bH/bzq7r.X_J.RB#", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("between");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("in");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("rlike");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("like");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("can not cast to double, value : ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("8>z@Kg;chgU;");
      jSONPath_JSONPathParser0.readValue();
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<;v");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!`^H^Ja!H%3ZnU\"M9'");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but '`'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'Ge%H");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '', but 'H'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("n9C+HH'g ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(8963398325558730460L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("s41.$^+");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(1153L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("0fv6h");
      long long0 = jSONPath_JSONPathParser0.readLongValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("+LfoHt-L4U8j/0+");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("kN[&*", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_WildCardSegment0, (Object) "GyzqNbl2w0rcUE", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[6 NhM{0=aJzN]qkt");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{Mbd1.1O\"a");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : [6 NhM{0=aJzN]qkt
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'s*,s*'");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("veX.R[R&IKiu|!'/rK");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nM5GXo=Jq9V]");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("@type");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '., but 't'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("?_bqB778(2");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '(, but '_'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(")Ljava/lang/Enum;");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("unzip bytes error.");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : unzip bytes error.
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("[C", "[C");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // illegal json : pos 2, line 1, column 3[C
         //
         verifyException("com.alibaba.fastjson.JSONPath$PropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$VALUES");
      jSONPath_JSONPathParser0.explain();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(1153L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(10);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("e", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("");
      boolean boolean0 = jSONPath0.contains((Object) "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) serializeConfig0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      Map<String, Object> map0 = JSONPath.paths((Object) locale0);
      assertEquals(13, map0.size());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "B");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/StackTrace/7");
      boolean boolean0 = jSONPath0.set((Object) " T'T4_Ts mXS YO", (Object) "/StackTrace/7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.time.ZonedDateTime");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) propertyNamingStrategy0, (Object) jSONPath_WildCardSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      boolean boolean0 = jSONPath0.set((Object) jSONPath_SizeSegment0, (Object) mockGregorianCalendar0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("(C)Ljava/lang/String;");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTransientException0);
      boolean boolean0 = JSONPath.remove((Object) sQLTransactionRollbackException0, "writeRference");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      JSONPath jSONPath0 = new JSONPath("java.nio.file.Paths");
      boolean boolean0 = jSONPath0.remove((Object) mockGregorianCalendar0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("bH/bzq7r.X_J.RB#");
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "bH/bzq7r.X_J.RB#", (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path bH/bzq7r.X_J.RB#
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("nin");
      Object[] objectArray0 = new Object[1];
      jSONPath0.arrayAdd((Object) null, objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("G2x");
      jSONPath0.arrayAdd((Object) null, (Object[]) null);
      assertEquals("G2x", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      Set<?> set0 = jSONPath0.keySet((Object) "aL@<@C");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("B");
      Float float0 = new Float(0.0F);
      int int0 = jSONPath0.size((Object) float0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.time.ZonedDateTime");
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      Double double0 = new Double(2822.0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) double0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String[] stringArray0 = new String[6];
      Vector<Object> vector0 = new Vector<Object>();
      JSONPath jSONPath0 = new JSONPath("tru=");
      boolean boolean0 = jSONPath0.containsValue((Object) vector0, (Object) stringArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      int[] intArray0 = new int[5];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      boolean boolean0 = JSONPath.containsValue((Object) "/", "/", (Object) jSONPath_MultiIndexSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      boolean boolean0 = JSONPath.containsValue((Object) "/", "/", (Object) "/");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("bH/bzq7r.X_J.RB#");
      boolean boolean0 = jSONPath0.containsValue((Object) "bH/bzq7r.X_J.RB#", (Object) "x'efvWzB7CS_S?l1R\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("bH/)}q7r.X_J.RB#");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.time.ZonedDateTime");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      char[] charArray0 = new char[4];
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 43);
      Object object0 = jSONPath0.extract(defaultJSONParser0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Object object0 = JSONPath.extract("{", "min");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("`", "`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2`
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("nin");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "fastjson.parser.autoTypeSupport";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray((Object) null, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.isRef();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/StackTrace/10");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("*");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) parserConfig0, (Object) "writeReference", false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("E");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(3869, 3869, 1915);
      HashSet hashSet0 = (HashSet)jSONPath_KeySetSegment0.eval(jSONPath0, jSONPath_RangeSegment0, "E");
      assertFalse(hashSet0.isEmpty());
      assertNotNull(hashSet0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("^A)S~g gb&6*URZ", "^A)S~g gb&6*URZ", jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringOpSegement0, jSONPath_StringOpSegement0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      JSONPath jSONPath0 = new JSONPath("^A)S~g gb&6*URZ");
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "^A)S~g gb&6*URZ", jSONPath_FilterGroup0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("-", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -3
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("deserialze");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('e', char0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/StackTrace/7");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLSyntaxErrorException0, (Object) "S#6() ?Y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(10);
      JSONPath jSONPath0 = JSONPath.compile("vc");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.eval(jSONPath0, "vc", jSONPath_SizeSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("bH/)}q7r.X_J.RB#", (-4270347329889690746L), (-4270347329889690746L), false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) jSONPath_FilterSegment0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 0, 82);
      JSONPath jSONPath0 = JSONPath.compile("L2");
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, "L2", jSONPath0);
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Class<SQLTransientException> class0 = SQLTransientException.class;
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) class0, "autoTypeSupport", (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("':dt1OSc'A1r", "cuAlNh)Tj}wL");
      int int0 = JSONPath.size((Object) sQLTransientException0, "com.alibaba.fastjson.util.IdentityHashMap$Entry");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("SI*q0zNs3#$nt");
      String string0 = jSONPath0.getPath();
      assertEquals("SI*q0zNs3#$nt", string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("DDmLje6 'y:ncajg");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      boolean boolean0 = JSONPath.remove((Object) jSONPath_SizeSegment0, "/stackTrace/0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Object object0 = JSONPath.eval((Object) "com.alibaba.fastjson.JSONPath$MinSegment", "com.alibaba.fastjson.JSONPath$MinSegment");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.arrayAdd((Object) "SI*q0zNs3#$nt", "PrettyFormat", (Object[]) stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("-", "Path deserialize erorr");
      Map<String, Object> map0 = JSONPath.paths((Object) sQLInvalidAuthorizationSpecException0);
      //  // Unstable assertion: assertEquals(90, map0.size());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("2'Wme-%BL1IR]xS5)Hn", jSONPath_MinSegment0, jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("evalKeySet error : ", serializeConfig0, parserConfig0);
      Integer integer0 = new Integer(13);
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, integer0, serializeConfig0, "2'Wme-%BL1IR]xS5)Hn");
      assertFalse(boolean0);
  }
}
