/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 15:18:54 GMT 2020
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.ExclusionStrategy;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.LongSerializationPolicy;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.Excluder;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.time.chrono.ChronoLocalDate;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicLongArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Gson_ESTest extends Gson_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(typeToken0);
      gson0.toJson((Object) typeAdapter0);
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) typeToken0, (Type) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.lang.Object. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      Boolean boolean0 = new Boolean(false);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JsonWriter jsonWriter0 = new JsonWriter(charArrayWriter0);
      gson0.toJson((JsonElement) jsonPrimitive0, jsonWriter0);
      // Undeclared exception!
      try { 
        gson0.fromJson("B8r}4]uh~=Gr7", (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("");
      JsonPrimitive jsonPrimitive1 = jsonPrimitive0.deepCopy();
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive1, (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      gson0.getAdapter(typeToken0);
      Class<Object> class1 = Object.class;
      TypeToken<Object> typeToken1 = TypeToken.get(class1);
      gson0.getAdapter(typeToken1);
      StringReader stringReader0 = new StringReader("com.google.gson.Gson$4");
      Class<Double> class2 = Double.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) stringReader0, class2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Excluder> class0 = Excluder.class;
      gson0.getAdapter(class0);
      Class<Object> class1 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class1);
      gson0.getAdapter(typeToken0);
      Double double0 = new Double((-1.0));
      gson0.toJsonTree((Object) double0);
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) typeToken0, (Type) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      Class<Float> class0 = Float.class;
      excluder0.excludeClass(class0, true);
      Class<String> class1 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class1);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.deepCopy();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]rS7zIb?|bO%", false);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(outputStreamWriter0, 828);
      JsonWriter jsonWriter0 = gson0.newJsonWriter(bufferedWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.jsonValue("com.google.gson.internal.bind.TypeAdapters$17");
      gson0.toJson((JsonElement) jsonObject1, jsonWriter1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicLong atomicLong0 = new AtomicLong(0L);
      atomicLong0.lazySet((-3744L));
      gson0.toJsonTree((Object) atomicLong0);
      PipedWriter pipedWriter0 = new PipedWriter();
      int int0 = 3070;
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 3070);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = '\\';
      charArray0[2] = 'a';
      charArray0[3] = 'H';
      charArray0[4] = 'Q';
      charArray0[5] = '!';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      pipedWriter0.append((CharSequence) charBuffer0);
      // Undeclared exception!
      try { 
        gson0.fromJson(jsonReader0, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        gson0.fromJson("[<wOiZ>dPJ_c<ve", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.EOFException: End of input at line 1 column 16 path $[1]
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        gson0.fromJson("[<wOiZ>dPJ_c<ve", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"<wOiZ>dPJ_c<ve\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      PipedReader pipedReader0 = new PipedReader();
      try { 
        gson0.fromJson("[<wOiZ>dPJ_c<ve", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"<wOiZ>dPJ_c<ve\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Gson.checkValidFloatingPoint(2203.2413007542);
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("");
      Class<Long> class0 = Long.class;
      gson0.fromJson((Reader) stringReader0, class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonReader jsonReader0 = gson0.newJsonReader(stringReader0);
      gson0.fromJson(jsonReader0, (Type) class0);
      stringReader0.reset();
      jsonReader0.toString();
      Class<Character> class1 = Character.TYPE;
      gson0.fromJson(jsonReader0, (Type) class1);
      short short0 = (short)3091;
      Short short1 = new Short((short)3091);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) short1);
      System.setCurrentTimeMillis((short)3091);
      gson0.fromJson(jsonReader0, (Type) class1);
      gson0.toJsonTree((Object) "JsonReader at line 1 column 1 path $");
      gson0.toJson((Object) null, (Type) class1);
      StringWriter stringWriter0 = new StringWriter((short)3091);
      gson0.toJson(jsonElement0, (Appendable) stringWriter0);
      gson0.toString();
      gson0.toJson(jsonElement0);
      int int0 = (-343);
      int int1 = 3089;
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter1.beginObject();
      // Undeclared exception!
      try { 
        jsonWriter2.nullValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      TypeToken.get(class0);
      Gson gson1 = new Gson();
      Class<Object> class1 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class1);
      gson1.getAdapter(typeToken0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('d');
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter1);
      gson1.toJson((Object) null, (Type) class1, jsonWriter0);
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, (Type) class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      gson0.fromJson("com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl", class0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Gson gson0 = new Gson();
      boolean boolean0 = gson0.serializeNulls();
      assertTrue(gson0.htmlSafe());
      assertFalse(boolean0);
      
      Class<Byte> class0 = Byte.TYPE;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      gson0.fromJson(jsonElement0, class0);
      Gson.FutureTypeAdapter<String> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<String>();
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.read((JsonReader) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      gson0.toJson((Object) null, (Type) class0);
      Excluder excluder0 = Excluder.DEFAULT;
      excluder0.disableInnerClassSerialization();
      Class<String> class1 = String.class;
      TypeToken.get(class1);
      try { 
        gson0.fromJson("JSON document was not fully consumed.", (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 7 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      Float float0 = new Float(0.0);
      StringReader stringReader0 = new StringReader("GSON cannot serialize ");
      Class<Float> class0 = Float.TYPE;
      Gson gson0 = new Gson();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      gson0.toJsonTree((Object) pipedReader0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      // Undeclared exception!
      try { 
        gson0.newJsonWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // out == null
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toJsonTree((Object) "END_ARAY");
      StringReader stringReader0 = new StringReader("END_ARAY");
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      TypeToken<AtomicLongArray> typeToken0 = TypeToken.get(class0);
      gson0.getAdapter(typeToken0);
      Excluder excluder0 = Excluder.DEFAULT;
      excluder0.withVersion(687.98);
      gson0.toJson((Object) "com.google.gson.Gson$5");
      StringReader stringReader0 = new StringReader("#TUFN!8");
      gson0.fromJson((Reader) stringReader0, (Type) class0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Gson.FutureTypeAdapter<String> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<String>();
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<String> class0 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class0);
      TypeAdapter<String> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) null, typeToken0);
      gson_FutureTypeAdapter0.setDelegate(typeAdapter0);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.read((JsonReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Type> class0 = Type.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("GSON (2.8.6) cannot handle ", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.lang.reflect.Type. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
      Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<Object>> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<Object>>();
      gson0.toJson((Object) null);
      Class<Double> class1 = Double.class;
      gson0.fromJson("null", class1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      excluder0.disableInnerClassSerialization();
      Class<String> class0 = String.class;
      excluder0.disableInnerClassSerialization();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("a? M)\"=V$ZN/MSw]t");
      gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      Class<Float> class0 = Float.TYPE;
      Class<Float> class1 = Float.TYPE;
      PipedReader pipedReader0 = new PipedReader();
      Gson gson1 = new Gson();
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      TypeToken<ChronoLocalDate> typeToken0 = TypeToken.get(class2);
      Class<? super ChronoLocalDate> class3 = typeToken0.getRawType();
      // Undeclared exception!
      try { 
        gson1.fromJson("V{t1@cTIpW>2N", (Type) class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.time.chrono.ChronoLocalDate. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("P)");
      jsonPrimitive0.getAsString();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.time.chrono.ChronoLocalDate. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Gson gson0 = new Gson();
      Short short0 = new Short((short)8);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(short0);
      Class<Type> class0 = Type.class;
      TypeToken<Type> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.lang.reflect.Type. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      TypeToken<AtomicLongArray> typeToken0 = TypeToken.get(class0);
      TypeToken.get((Type) class0);
      gson0.getAdapter(typeToken0);
      Excluder excluder0 = Excluder.DEFAULT;
      excluder0.withVersion(0.0);
      gson0.toJson((Object) excluder0);
      StringReader stringReader0 = new StringReader("GSON cannot serialize ");
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.fromJson("&>", (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Gson.FutureTypeAdapter<Excluder> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Excluder>();
      Gson gson0 = new Gson();
      Class<Excluder> class0 = Excluder.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "e;0{");
      TypeToken<Excluder> typeToken0 = TypeToken.get(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedReader pipedReader0 = new PipedReader();
      gson0.newJsonReader(pipedReader0);
      TypeAdapter<Excluder> typeAdapter0 = gson0.getAdapter(typeToken0);
      gson_FutureTypeAdapter0.setDelegate(typeAdapter0);
      Gson.checkValidFloatingPoint(0.0);
      MockFile mockFile0 = new MockFile("Ls1!YN?x6aXy6");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0, (Type) class0, (Appendable) mockPrintWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      String string0 = " Sp";
      jsonObject0.getAsJsonObject(" Sp");
      gson0.toJson((JsonElement) null);
      Excluder excluder0 = new Excluder();
      gson0.toJson((Object) excluder0);
      gson0.toJson((Object) excluder0);
      long[] longArray0 = new long[2];
      longArray0[0] = 1090L;
      longArray0[1] = 1090L;
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(longArray0);
      gson0.toJson((Object) null);
      Class<Boolean> class0 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) "", (Type) class0, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Gson gson0 = new Gson();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer(1);
      Class<Double> class0 = Double.TYPE;
      MockFileWriter mockFileWriter0 = new MockFileWriter("yL]bc8");
      mockFileWriter0.flush();
      gson0.toJson((Object) integer0, (Type) class0, (Appendable) mockFileWriter0);
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.getAsJsonObject("");
      gson0.fromJson((JsonElement) null, (Type) class0);
      System.setCurrentTimeMillis(0L);
      String string0 = gson0.toString();
      gson0.toJson((Object) string0);
      gson0.toJson((JsonElement) null);
      Class<Excluder> class1 = Excluder.class;
      TypeToken<Excluder> typeToken0 = TypeToken.get(class1);
      gson0.getAdapter(typeToken0);
      Excluder excluder0 = Excluder.DEFAULT;
      Excluder excluder1 = excluder0.excludeFieldsWithoutExposeAnnotation();
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = (-5114);
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      intArray0[8] = 1;
      Excluder excluder2 = excluder1.withModifiers(intArray0);
      Excluder excluder3 = excluder2.withVersion(1);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) excluder3, (Type) class0, (Appendable) mockFileWriter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.internal.Excluder cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.Gson$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) ")]}'\n", (Type) null, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("4Q.]", class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      Class<Integer> class0 = Integer.TYPE;
      gson0.fromJson((String) null, (Type) class0);
      Excluder excluder0 = new Excluder();
      Class<AtomicLongArray> class1 = AtomicLongArray.class;
      TypeToken<AtomicLongArray> typeToken0 = TypeToken.get(class1);
      gson0.getAdapter(typeToken0);
      Class<Double> class2 = Double.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("com.google.gson.Gson$FutureTypeAdapter", class2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      TypeToken<AtomicLongArray> typeToken0 = TypeToken.get(class0);
      gson0.getAdapter(typeToken0);
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.remove("");
      gson0.fromJson((JsonElement) null, (Type) class0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Gson gson0 = new Gson();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<AtomicLong> class0 = AtomicLong.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      gson0.fromJson("", class0);
      Gson.checkValidFloatingPoint(0.0);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("");
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: float. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Gson gson0 = new Gson();
      Byte byte0 = new Byte((byte)16);
      Class<Byte> class0 = Byte.class;
      TypeToken<Byte> typeToken0 = TypeToken.get(class0);
      Class<? super Byte> class1 = typeToken0.getRawType();
      CharBuffer charBuffer0 = CharBuffer.allocate((byte)16);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) byte0, (Type) class1, (Appendable) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      gson0.toJson((Object) excluder0);
      PipedReader pipedReader0 = new PipedReader();
      boolean boolean0 = Gson.DEFAULT_LENIENT;
      Class<Object> class0 = Object.class;
      TypeToken.get(class0);
      excluder0.excludeClass(class0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{\"requireExpose\":false,\"serializeInnerClasses\":true,\"version\":java.lang.Double@0000000079,\"modifiers\":java.lang.Integer@0000000084,\"deserializationStrategies\":[],\"serializationStrategies\":[]}");
      gson0.toJson((Object) excluder0, (Appendable) mockPrintWriter0);
      // Undeclared exception!
      gson0.toJson((Object) mockPrintWriter0, (Type) class0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.serializeNulls();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("I");
      Class<BigInteger> class0 = BigInteger.class;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"I\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$18", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(3);
      JsonArray jsonArray0 = (JsonArray)gson0.toJsonTree((Object) atomicLongArray0);
      assertTrue(gson0.htmlSafe());
      assertEquals(3, jsonArray0.size());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.serializeNulls();
      Class<AtomicLong> class0 = AtomicLong.class;
      TypeToken.get(class0);
      Float float0 = new Float((-944.3F));
      Long long0 = new Long((-2766L));
      long[] longArray0 = new long[9];
      longArray0[0] = (-2766L);
      longArray0[1] = (-2766L);
      longArray0[2] = (-2766L);
      longArray0[3] = 973L;
      longArray0[4] = (-2766L);
      longArray0[5] = (-2766L);
      longArray0[6] = (-2766L);
      longArray0[7] = (-2766L);
      longArray0[8] = (-2766L);
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(longArray0);
      gson0.toJsonTree((Object) atomicLongArray0);
      gson0.toJson((Object) long0);
      try { 
        gson0.fromJson("java.lang.Long@0000000052", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"java.lang.Long@0000000052\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.TYPE;
      MockFileWriter mockFileWriter0 = new MockFileWriter("K");
      gson0.toJson((Object) null, (Appendable) mockFileWriter0);
      Class<Integer> class1 = Integer.TYPE;
      try { 
        gson0.fromJson("K", (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"K\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$7", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      Excluder excluder1 = excluder0.disableInnerClassSerialization();
      Class<String> class0 = String.class;
      Class<Float> class1 = Float.class;
      TypeToken<Float> typeToken0 = TypeToken.get(class1);
      excluder1.create(gson0, typeToken0);
      StringWriter stringWriter0 = new StringWriter();
      Excluder excluder2 = Excluder.DEFAULT;
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) mockDate0, (Type) class0, (Appendable) stringWriter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockDate cannot be cast to java.lang.String
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$16", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      gson0.toJson((Object) excluder0);
      Class<Float> class0 = Float.TYPE;
      boolean boolean0 = Gson.DEFAULT_LENIENT;
      Class<Object> class1 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class1);
      gson0.getAdapter(typeToken0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":");
      Class<Short> class2 = Short.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class2, (Appendable) mockPrintWriter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: short. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) null, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      gson0.toJson((Object) excluder0);
      PipedReader pipedReader0 = new PipedReader();
      Class<Object> class0 = Object.class;
      gson0.fromJson((JsonElement) null, class0);
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) null, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      gson0.toJson((Object) excluder0);
      PipedReader pipedReader0 = new PipedReader();
      Class<Object> class0 = Object.class;
      gson0.fromJson((JsonElement) null, class0);
      Float float0 = new Float(0.0);
      Gson.checkValidFloatingPoint(0.0);
      gson0.toJson((Object) float0);
      TypeToken.get(class0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) null, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLong> class0 = AtomicLong.class;
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) double0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      Class<Object> class0 = Object.class;
      gson0.fromJson((JsonElement) null, class0);
      Byte byte0 = new Byte((byte) (-1));
      gson0.toJson((Object) byte0);
      Class<Object> class1 = Object.class;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeToken<Object> typeToken0 = TypeToken.get(class1);
      gson0.getAdapter(typeToken0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("java.lang.Byte@0000000026");
      gson0.toJson((Object) byte0, (Appendable) mockPrintWriter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(3112);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) atomicLongArray0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) jsonElement0, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Gson gson0 = new Gson();
      int int0 = 3112;
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLong> class0 = AtomicLong.class;
      try { 
        gson0.fromJson("END_ARRAY", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"END_ARRAY\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      gson0.toJson((Object) excluder0);
      Class<Float> class0 = Float.TYPE;
      Excluder excluder1 = new Excluder();
      Class<AtomicLong> class1 = AtomicLong.class;
      TypeToken.get(class1);
      StringReader stringReader0 = new StringReader("\t");
      char[] charArray0 = new char[7];
      charArray0[0] = '=';
      charArray0[1] = 'J';
      charArray0[2] = 't';
      charArray0[3] = '>';
      charArray0[4] = 'U';
      charArray0[5] = 'H';
      charArray0[6] = '!';
      stringReader0.read(charArray0);
      gson0.newJsonReader(stringReader0);
      Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<Object>> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<Object>>();
      Float float0 = new Float(3429.0F);
      gson0.toJson((Object) excluder1);
      try { 
        gson0.fromJson("{\"requireExpose\":false,\"serializeInnerClasses\":true,\"version\":java.lang.Double@0000000100,\"modifiers\":java.lang.Integer@0000000103,\"deserializationStrategies\":[],\"serializationStrategies\":[]}", (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a long but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.excluder();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = gson0.newJsonReader(pipedReader0);
      assertFalse(jsonReader0.isLenient());
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      TypeToken<AtomicLongArray> typeToken0 = TypeToken.get(class0);
      Class<Double> class1 = Double.class;
      TypeToken.get(class1);
      gson0.getAdapter(typeToken0);
      gson0.excluder();
      MockDate mockDate0 = new MockDate(846, 846, 846);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) mockDate0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockDate cannot be cast to java.util.concurrent.atomic.AtomicLongArray
         //
         verifyException("com.google.gson.Gson$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      int[] intArray0 = new int[0];
      Excluder excluder1 = excluder0.withModifiers(intArray0);
      Excluder excluder2 = excluder1.disableInnerClassSerialization();
      Class<BigDecimal> class0 = BigDecimal.class;
      TypeToken<BigDecimal> typeToken0 = TypeToken.get(class0);
      TypeAdapter<BigDecimal> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder2, typeToken0);
      assertNotNull(typeAdapter0);
      
      gson0.toString();
      gson0.toJsonTree((Object) excluder0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Gson gson0 = new Gson();
      Long long0 = new Long(3059L);
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.get("");
      Class<Object> class0 = Object.class;
      gson0.fromJson((JsonElement) jsonObject0, class0);
      gson0.toJson((Object) long0);
      Class<Object> class1 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class1);
      gson0.getAdapter(typeToken0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Gson gson0 = new Gson();
      Float float0 = new Float(0.0);
      gson0.toJson((Object) float0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      gson0.toJson((Object) excluder0);
      Class<Float> class0 = Float.TYPE;
      PipedReader pipedReader0 = new PipedReader();
      Excluder excluder1 = new Excluder();
      excluder0.disableInnerClassSerialization();
      Excluder excluder2 = new Excluder();
      Class<AtomicLong> class1 = AtomicLong.class;
      TypeToken<AtomicLong> typeToken0 = TypeToken.get(class1);
      gson0.getAdapter(typeToken0);
      StringReader stringReader0 = new StringReader("{\"requireExpose\":false,\"serializeInnerClasses\":true,\"version\":java.lang.Double@0000000079,\"modifiers\":java.lang.Integer@0000000084,\"deserializationStrategies\":[],\"serializationStrategies\":[]}");
      gson0.newJsonReader(pipedReader0);
      Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<Object>> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<Object>>();
      Float float0 = new Float(3429.0F);
      gson0.toJson((Object) float0);
      gson0.fromJson("", (Type) class0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicLong atomicLong0 = new AtomicLong(0L);
      Class<Short> class0 = Short.TYPE;
      gson0.toJson((Object) atomicLong0, (Type) class0);
      gson0.serializeNulls();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) atomicLong0, (Type) class0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Gson gson0 = new Gson();
      Long long0 = new Long(3059L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.addProperty("", "");
      JsonElement jsonElement0 = jsonObject0.get("");
      Class<Object> class0 = Object.class;
      gson0.fromJson(jsonElement0, class0);
      gson0.toString();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      gson0.toJson((JsonElement) null);
      PipedReader pipedReader0 = new PipedReader();
      Class<String> class1 = String.class;
      StringReader stringReader0 = new StringReader("null");
      Class<String> class2 = String.class;
      gson0.fromJson((Reader) stringReader0, class2);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.lang.String. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      try { 
        gson0.fromJson("5; ]", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      gson0.toJson((JsonElement) null);
      try { 
        gson0.fromJson("e),", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 4 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      try { 
        gson0.fromJson(": ", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("com.google.gson.internal.bind.TypeAdapters$14", (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      gson0.toJson((Object) pipedReader0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      Excluder excluder1 = excluder0.withExclusionStrategy((ExclusionStrategy) null, false, false);
      excluder1.disableInnerClassSerialization();
      Class<String> class0 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder1, typeToken0);
      StringWriter stringWriter0 = new StringWriter();
      int int0 = (-1828);
      stringWriter0.write((-1828));
      JsonWriter jsonWriter0 = gson0.newJsonWriter(stringWriter0);
      Class<String> class1 = String.class;
      Class<String> class2 = String.class;
      TypeToken.get(class2);
      TypeToken<String> typeToken1 = TypeToken.get(class2);
      typeToken1.getType();
      Byte byte0 = new Byte((byte)1);
      gson0.toJson((Object) null, (Type) class1);
      Gson.checkValidFloatingPoint(0.0);
      gson0.htmlSafe();
      gson0.toString();
      gson0.serializeNulls();
      Gson.FutureTypeAdapter<BigDecimal> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<BigDecimal>();
      JsonWriter jsonWriter1 = new JsonWriter(stringWriter0);
      String string0 = "NN";
      JsonWriter jsonWriter2 = jsonWriter0.value("NN");
      // Undeclared exception!
      try { 
        jsonWriter2.value(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Gson gson0 = new Gson();
      int int0 = (-1067);
      Double double0 = new Double((-1067));
      Class<Integer> class0 = Integer.TYPE;
      gson0.toJsonTree((Object) double0, (Type) class0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      JsonWriter jsonWriter0 = new JsonWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        jsonWriter0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson("END_ARRAY", (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      gson0.toJson((Object) excluder0);
      Class<Float> class0 = Float.TYPE;
      PipedReader pipedReader0 = new PipedReader();
      try { 
        gson0.fromJson("{\"requireExpose\":false,\"serializeInnerClasses\":true,\"version\":java.lang.Double@0000000079,\"modifiers\":java.lang.Integer@0000000084,\"deserializationStrategies\":[],\"serializationStrategies\":[]}", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a double but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.getAdapter((TypeToken<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      gson0.toJson((Object) excluder0);
      Class<Float> class0 = Float.TYPE;
      Class<Object> class1 = Object.class;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      JsonNull jsonNull1 = jsonNull0.deepCopy();
      gson0.fromJson((JsonElement) jsonNull1, class1);
      PipedWriter pipedWriter0 = new PipedWriter();
      gson0.toJson((Object) jsonNull0);
      Gson.checkValidFloatingPoint((-2763.87101575));
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(11);
      AtomicLong atomicLong0 = new AtomicLong((-875L));
      assertEquals((-875L), atomicLong0.longValue());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      Class<Integer> class0 = Integer.TYPE;
      try { 
        gson0.fromJson((JsonElement) jsonArray0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected NUMBER but was BEGIN_ARRAY at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
      try { 
        gson0.fromJson("[:69Jc!Z[=F]UaFvU", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected an int but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      JsonElement jsonElement0 = null;
      gson0.toJson((JsonElement) null);
      String string0 = null;
      gson0.fromJson((String) null, (Type) class0);
      try { 
        gson0.fromJson("0 Q(,+jL6h.=I", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a boolean but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonReader) null, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader(2);
      Class<Byte> class0 = Byte.TYPE;
      try { 
        gson0.fromJson((Reader) pipedReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      TypeToken.getParameterized(class0, typeArray0);
      gson0.getAdapter(typeToken0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) typeArray0[1], typeArray0[0]);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.lang.Object. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicLong atomicLong0 = new AtomicLong(518L);
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) atomicLong0);
      assertFalse(gson0.serializeNulls());
      assertTrue(jsonPrimitive0.isNumber());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      BigInteger bigInteger0 = BigInteger.ZERO;
      gson0.toJson((Object) bigInteger0);
      Class<Float> class0 = Float.TYPE;
      AtomicLong atomicLong0 = new AtomicLong(1182L);
      gson0.toJson((Object) atomicLong0);
      Class<BigDecimal> class1 = BigDecimal.class;
      Class<BigDecimal> class2 = BigDecimal.class;
      TypeToken<BigDecimal> typeToken0 = TypeToken.get(class2);
      TypeToken.get((Type) class1);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      Class<Integer> class3 = Integer.class;
      TypeToken<Integer> typeToken1 = TypeToken.get(class3);
      gson0.getAdapter(typeToken1);
      Class<BigInteger> class4 = BigInteger.class;
      gson0.getAdapter(class4);
      gson0.fieldNamingStrategy();
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-1009));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1009
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLong> class0 = AtomicLong.class;
      gson0.fromJson((String) null, (Type) class0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Gson gson0 = new Gson();
      Class<BigDecimal> class0 = BigDecimal.class;
      gson0.getAdapter(class0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Gson gson0 = new Gson();
      boolean boolean0 = gson0.serializeNulls();
      assertFalse(boolean0);
      
      Class<BigDecimal> class0 = BigDecimal.class;
      TypeToken<BigDecimal> typeToken0 = TypeToken.get(class0);
      TypeToken.get((Type) class0);
      TypeAdapter<BigDecimal> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) null, typeToken0);
      assertNotNull(typeAdapter0);
      
      Class<Integer> class1 = Integer.class;
      TypeToken<Integer> typeToken1 = TypeToken.get(class1);
      gson0.getAdapter(typeToken1);
      Class<BigInteger> class2 = BigInteger.class;
      gson0.getAdapter(class2);
      gson0.fieldNamingStrategy();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2);
      gson0.newJsonWriter(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      
      Class<AtomicLong> class3 = AtomicLong.class;
      TypeToken<AtomicLong> typeToken2 = TypeToken.get(class3);
      gson0.getAdapter(typeToken2);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.fieldNamingStrategy();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      Class<Float> class0 = Float.TYPE;
      PipedReader pipedReader0 = new PipedReader();
      gson0.toString();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      gson0.toJson((JsonElement) null);
      gson0.fromJson("", (Type) class0);
      Class<Integer> class1 = Integer.TYPE;
      gson0.fromJson("", class1);
      gson0.toString();
      PipedReader pipedReader0 = new PipedReader(1269);
      JsonReader jsonReader0 = gson0.newJsonReader(pipedReader0);
      Class<String> class2 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class2);
      typeToken0.getType();
      try { 
        gson0.fromJson(jsonReader0, (Type) class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      excluder0.disableInnerClassSerialization();
      Class<String> class0 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write((-1828));
      gson0.newJsonWriter(stringWriter0);
      JsonElement jsonElement0 = null;
      JsonArray jsonArray0 = null;
      try {
        jsonArray0 = new JsonArray((-3072));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -3072
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      Class<String> class0 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class0);
      TypeAdapter<String> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      assertNotNull(typeAdapter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      Excluder excluder0 = Excluder.DEFAULT;
      Excluder excluder1 = excluder0.excludeFieldsWithoutExposeAnnotation();
      int[] intArray0 = new int[5];
      ExclusionStrategy exclusionStrategy0 = mock(ExclusionStrategy.class, new ViolatedAssumptionAnswer());
      excluder1.withExclusionStrategy(exclusionStrategy0, false, true);
      intArray0[0] = (-1370);
      intArray0[1] = 2656;
      intArray0[2] = 246;
      intArray0[3] = (-433);
      intArray0[4] = (-1607);
      Excluder excluder2 = excluder1.withModifiers(intArray0);
      Class<Float> class0 = Float.class;
      TypeToken<Float> typeToken0 = TypeToken.get(class0);
      TypeToken.get((Type) class0);
      TypeAdapter<Float> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder2, typeToken0);
      gson_FutureTypeAdapter0.setDelegate(typeAdapter0);
      JsonArray jsonArray0 = new JsonArray();
      jsonArray0.iterator();
      // Undeclared exception!
      try { 
        jsonArray0.getAsJsonPrimitive();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not a JSON Primitive: []
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Gson.FutureTypeAdapter<String> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<String>();
      Gson gson0 = new Gson();
      gson0.toJson((Object) null);
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.deepCopy();
      jsonObject1.remove("null");
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) null, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      boolean boolean0 = gson0.htmlSafe();
      assertFalse(gson0.serializeNulls());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.htmlSafe();
      LongSerializationPolicy longSerializationPolicy0 = LongSerializationPolicy.STRING;
      Long long0 = new Long(1L);
      JsonElement jsonElement0 = longSerializationPolicy0.serialize(long0);
      gson0.toJson(jsonElement0);
      // Undeclared exception!
      try { 
        gson0.toJson(jsonElement0, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class0);
      TypeAdapter<String> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) null, typeToken0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(typeAdapter0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      int[] intArray0 = new int[0];
      Excluder excluder1 = excluder0.withModifiers(intArray0);
      Excluder excluder2 = excluder1.disableInnerClassSerialization();
      Class<BigDecimal> class0 = BigDecimal.class;
      TypeToken<BigDecimal> typeToken0 = TypeToken.get(class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder2, typeToken0);
      String string0 = "";
      try { 
        Short.valueOf("", 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 0 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, (TypeToken<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, (Type) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.serializeNulls();
      PipedReader pipedReader0 = new PipedReader();
      Class<String> class0 = String.class;
      try { 
        gson0.fromJson((Reader) pipedReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      gson0.toJson((JsonElement) null);
      gson0.fromJson("", (Type) class0);
      Class<Integer> class1 = Integer.class;
      gson0.fromJson("", class1);
      gson0.toString();
      PipedReader pipedReader0 = new PipedReader(1263);
      gson0.newJsonReader(pipedReader0);
      Class<Integer> class2 = Integer.class;
      try { 
        gson0.fromJson((Reader) pipedReader0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Gson gson0 = new Gson();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Integer> class0 = Integer.TYPE;
      Class<String> class1 = String.class;
      gson0.fromJson("com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl", class1);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: int. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.TYPE;
      gson0.toJsonTree((Object) null);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      gson0.toJson((JsonElement) null);
      gson0.fromJson((String) null, (Type) class0);
      Class<Integer> class1 = Integer.class;
      gson0.fromJson("null", class1);
      gson0.toString();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-1847));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.class;
      gson0.fromJson("", class0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = "";
      Type type0 = null;
      gson0.fromJson("", (Type) null);
      gson0.toJsonTree((Object) null);
      int int0 = 8;
      JsonArray jsonArray0 = new JsonArray(8);
      JsonArray jsonArray1 = jsonArray0.deepCopy();
      // Undeclared exception!
      try { 
        jsonArray1.remove((-2125));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = (-4497.0);
      Gson.checkValidFloatingPoint((-4497.0));
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      String string0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Gson.FutureTypeAdapter<String> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<String>();
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.toJsonTree("-h");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.FutureTypeAdapter<BigDecimal> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<BigDecimal>();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.toJsonTree(bigDecimal0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.TYPE;
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      JsonWriter jsonWriter0 = new JsonWriter(mockPrintWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter1.value(0.0);
      JsonWriter jsonWriter3 = jsonWriter2.jsonValue("x5?!`r;sF*e&|YMw|*v");
      Byte byte0 = new Byte((byte)0);
      JsonWriter jsonWriter4 = jsonWriter3.value((Number) byte0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0, (Type) class0, jsonWriter4);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.Gson$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Gson gson0 = new Gson();
      Object object0 = new Object();
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJsonTree(object0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.Gson$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(3012);
      Class<Boolean> class0 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) atomicLongArray0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.concurrent.atomic.AtomicLongArray cannot be cast to java.lang.Boolean
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: int. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
      Class<AtomicLong> class1 = AtomicLong.class;
      TypeToken<AtomicLong> typeToken0 = TypeToken.get(class1);
      gson0.getAdapter(typeToken0);
      Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<Object>> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<Object>>();
      String string0 = gson0.toJson((Object) null);
      assertEquals("null", string0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      gson0.toJson((Object) excluder0);
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: float. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Gson.checkValidFloatingPoint(0.0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) null);
      assertTrue(gson0.htmlSafe());
      assertEquals("null", string0);
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.getAsJsonObject();
      MockPrintStream mockPrintStream0 = new MockPrintStream("LOWER_CASE_WITH_UNDERSCORES");
      gson0.toJson((JsonElement) jsonObject0, (Appendable) mockPrintStream0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader(1409);
      JsonReader jsonReader0 = gson0.newJsonReader(pipedReader0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      gson1.toJsonTree((Object) gson0);
      assertTrue(gson1.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Gson gson0 = new Gson();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      gson0.toJsonTree((Object) bigDecimal0);
      JsonWriter jsonWriter0 = null;
      try {
        jsonWriter0 = new JsonWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // out == null
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.newJsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Gson.FutureTypeAdapter<String> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<String>();
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Gson.FutureTypeAdapter<String> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<String>();
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.read((JsonReader) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
      gson0.fromJson((JsonElement) null, (Type) class0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLong> class0 = AtomicLong.class;
      Class<BigInteger> class1 = BigInteger.class;
      gson0.fromJson((JsonElement) null, class1);
      try { 
        gson0.fromJson("o!1-Ao^Wk", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"o!1-Ao^Wk\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      gson0.newBuilder();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.newBuilder();
      Class<Object> class0 = Object.class;
      gson0.fromJson((JsonElement) null, class0);
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonWriter jsonWriter0 = gson0.newJsonWriter(pipedWriter0);
      // Undeclared exception!
      try { 
        jsonWriter0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<BigDecimal> class0 = BigDecimal.class;
      TypeToken<BigDecimal> typeToken0 = TypeToken.get(class0);
      gson0.getAdapter(typeToken0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[1];
      charArray0[0] = 'g';
      CharBuffer.wrap(charArray0);
      int int0 = (-2114);
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        charArrayWriter0.writeTo((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Gson gson0 = new Gson();
      Long long0 = new Long(3059L);
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.get("");
      Class<Object> class0 = Object.class;
      gson0.fromJson((JsonElement) null, class0);
      gson0.toJson((Object) "");
      Gson.checkValidFloatingPoint((-2763.87101575));
      // Undeclared exception!
      try { 
        gson0.getAdapter((TypeToken<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.serializeNulls();
      Gson.FutureTypeAdapter<String> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<String>();
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) gson_FutureTypeAdapter0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.Gson$FutureTypeAdapter cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.Gson$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = gson0.newJsonReader(pipedReader0);
      // Undeclared exception!
      gson0.toJson((Object) jsonReader0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<Object>> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<Object>>();
      String string0 = gson0.toJson((Object) gson_FutureTypeAdapter0);
      assertEquals("{}", string0);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Gson gson0 = new Gson();
      Long long0 = new Long(3059L);
      Class<Character> class0 = Character.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) long0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
