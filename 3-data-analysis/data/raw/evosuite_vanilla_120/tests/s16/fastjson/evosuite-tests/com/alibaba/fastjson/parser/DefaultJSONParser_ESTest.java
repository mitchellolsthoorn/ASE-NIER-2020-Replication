/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 21:20:33 GMT 2020
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.lang.annotation.Annotation;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.StringCharacterIterator;
import java.time.Month;
import java.time.temporal.ChronoField;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TreeMap;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 22);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Properties properties0 = new Properties();
      defaultJSONParser0.setContext((Object) jSONReaderScanner0, (Object) properties0);
      defaultJSONParser0.popContext();
      defaultJSONParser0.resolveReference("sR=G5");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";s$UQ)V_,6");
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : ;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0, 987);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1[C)[[F");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual int
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", actual ");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Class<Time> class0 = Time.class;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 15, (-886), 0, 2875, (-2297));
      defaultJSONParser0.setContext((Object) mockGregorianCalendar0, (Object) class0);
      PageAttributes pageAttributes0 = new PageAttributes();
      defaultJSONParser0.setContext((ParseContext) null, (Object) pageAttributes0, (Object) pageAttributes0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray(";Ljava/lang/reflect/Type;Ljava/lang/Object;)V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ;, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IdentityHashMap<MockDateFormat, JSONReaderScanner> identityHashMap0 = new IdentityHashMap<MockDateFormat, JSONReaderScanner>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}XZ$4%:/DOQ");
      LinkedHashMap<StringCharacterIterator, JSONObject> linkedHashMap0 = new LinkedHashMap<StringCharacterIterator, JSONObject>();
      defaultJSONParser0.setContext((ParseContext) null, (Object) "}XZ$4%:/DOQ", (Object) linkedHashMap0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 2493, (-2147483647), 14, (-2297), 0);
      defaultJSONParser0.setContext((Object) identityHashMap0, (Object) mockGregorianCalendar0);
      defaultJSONParser0.getObject("H:.9d=2");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")?:8s2S64", parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseArrayWithType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 698);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Type[] typeArray0 = new Type[9];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", actual ");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Type[] typeArray0 = new Type[2];
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".Vf$XSsB?s7XxGk&/z`", parserConfig0, (-2927));
      Class<BigDecimal> class0 = BigDecimal.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but ., pos 1, line 1, column 2.Vf$XSsB?s7XxGk&/z`
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Month month0 = Month.FEBRUARY;
      JSONScanner jSONScanner0 = new JSONScanner("(C)Ljava/util/UUID;");
      jSONScanner0.bp = 279;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(month0, jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // String index out of range: 19
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("getDeserializer", parserConfig0);
      defaultJSONParser0.accept(1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.parseObject((Type) null, (Object) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.parseObject((Type) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      Class<Boolean> class0 = Boolean.class;
      defaultJSONParser0.parseObject(class0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.parseKey();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 3774);
      Feature feature0 = Feature.SortFeidFastMatch;
      defaultJSONParser0.isEnabled(feature0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.getLastResolveTask();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      char[] charArray0 = new char[0];
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 0);
      defaultJSONParser0.getInput();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", actual ");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Class<Time> class0 = Time.class;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 15, (-886), 0, 2875, (-2297));
      defaultJSONParser0.setContext((Object) mockGregorianCalendar0, (Object) class0);
      defaultJSONParser0.getContext();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 698);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.setConfig((ParserConfig) null);
      defaultJSONParser0.getConfig();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 669);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 698);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.setConfig((ParserConfig) null);
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("#D578kE4");
      Timestamp timestamp0 = new Timestamp((-1758L));
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra(timestamp0, "#D578kE4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - D, info : pos 1, line 1, column 2#D578kE4
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")?:8s2S64", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[a}@kr-}B |0", parserConfig0, (-2904));
      Class<BigDecimal> class0 = BigDecimal.class;
      // Undeclared exception!
      defaultJSONParser0.parseArray(class0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[52iV[/ 0d,D9I_", (-1777));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      jSONReaderScanner0.bp = (-889275714);
      Object object0 = defaultJSONParser0.resolveReference("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("-", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = new char[1];
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 698, '(');
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(parserConfig0, jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.setContext((Object) jSONReaderScanner0, (Object) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";s$UQ)V_,6", parserConfig0, 24180);
      defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", ctual ");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getInput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(charArray0, 1, parserConfig0, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[1];
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(charArray0, 40, parserConfig0, 40);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.autoTypeSupport", parserConfig0, (-2927));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("create instance error", (ParserConfig) null, 508);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.deny", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("", (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.deny.internal");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.deny", 17);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((Object) null, jSONReaderScanner0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((Object) null, (JSONLexer) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((JSONLexer) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((JSONLexer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[a}@kr-}B |0");
      jSONReaderScanner0.bp = (-1899);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[1];
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 698, '\u0014');
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(parserConfig0, jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("3p!~0I", parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(parserConfig0, defaultJSONParser0.lexer, parserConfig0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 33p!~0I
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TreeSet", parserConfig0);
      ChronoField chronoField0 = ChronoField.MICRO_OF_SECOND;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) chronoField0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 7, fieldName MicroOfSecond
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 698, '(');
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(parserConfig0, jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")?:8!s2S64");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) ")?:8!s2S64");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2)?:8!s2S64
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("T2GV");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("\"PBA3*O?'nfqKyJw;");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) choiceFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 4, line 1, column 5T2GV
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 39, 117);
      Insets insets0 = new Insets(0, 5, 39, 203);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints(117, 0, (-1400), 39, 1.0, 157.7, 19, (-3126), insets0, 5, 22);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(gridBagConstraints0, jSONReaderScanner0, parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("0", parserConfig0, 2);
      defaultJSONParser1.parse((Object) defaultJSONParser0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 3774);
      defaultJSONParser0.setContext((Object) parserConfig0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[a}@kr-}B |0");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.setContext((Object) "[a}@kr-}B |0", (Object) defaultJSONParser0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "[a}@kr-}B |0", 0, 0, 0, 1, 0, 0, 0, 0, 1);
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) list0, (Object) simpleTimeZone0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")?:8!s2S64");
      Stack<ParameterizedTypeImpl> stack0 = new Stack<ParameterizedTypeImpl>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) stack0, (Object) stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ), pos 0, fieldName []
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("T2GV");
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.checkListResolve(list0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[52iV[/ 0d,D9I_", 29);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      HashSet<Point> hashSet0 = new HashSet<Point>();
      Class<Boolean> class0 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) hashSet0, (Object) "[52iV[/ 0d,D9I_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseBoolean error, field : 1
         //
         verifyException("com.alibaba.fastjson.serializer.BooleanCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      char[] charArray0 = new char[10];
      charArray0[0] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 698);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) null, (Collection) jSONArray0, (Object) jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")?:8s2S64");
      ParserConfig parserConfig0 = new ParserConfig();
      Class<Boolean> class0 = Boolean.class;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")?:8s2S64", jSONScanner0, parserConfig0);
      HashSet<Annotation> hashSet0 = new HashSet<Annotation>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) hashSet0, (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but ), pos 1, line 1, column 2)?:8s2S64
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TreeSet", parserConfig0);
      Class<Boolean> class0 = Boolean.TYPE;
      Stack<Month> stack0 = new Stack<Month>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) stack0, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but EOF, pos 7, line 1, column 8TreeSet
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Time> class0 = Time.class;
      JSONScanner jSONScanner0 = new JSONScanner("", (-1847));
      ParserConfig parserConfig0 = new ParserConfig();
      Class<?> class1 = parserConfig0.checkAutoType(class0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class1, (Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("QD^v", (-2203));
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null, (Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2QD^v
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      TreeMap<MockGregorianCalendar, PageAttributes> treeMap0 = new TreeMap<MockGregorianCalendar, PageAttributes>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) treeMap0, (Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, line 1, column 1
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("a}@kr-}B|0");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      ParserConfig parserConfig0 = defaultJSONParser0.getConfig();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(parserConfig0, jSONReaderScanner0, parserConfig0);
      HashMap<BigInteger, MockGregorianCalendar> hashMap0 = new HashMap<BigInteger, MockGregorianCalendar>();
      Insets insets0 = new Insets((-1), 999, 166, (-314));
      defaultJSONParser1.parseObject((Map) hashMap0, (Object) insets0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("3@7$2\"9@VD~ o", parserConfig0);
      Stack<Long> stack0 = new Stack<Long>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) null, (Collection) stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but int, pos 1, line 1, column 23@7$2\"9@VD~ o
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("k");
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect error, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int, pos 1, line 1, column 20
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      char[] charArray0 = new char[0];
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.GERMANY;
      BreakIterator breakIterator0 = BreakIterator.getWordInstance(locale0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) breakIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName [checksum=0x10e2585c]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("a=(-9Ond", parserConfig0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "a=(-9Ond");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName a=(-9Ond
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0");
      defaultJSONParser0.handleResovleTask("0");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("~0BBy.XUv}GpMd", parserConfig0, 545);
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.handleResovleTask(list0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TreeMap<Point, Annotation> treeMap0 = new TreeMap<Point, Annotation>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")?:8s}2S64", parserConfig0);
      defaultJSONParser0.setContext((Object) parserConfig0, (Object) treeMap0);
      defaultJSONParser0.resolveReference("fastjson.parser.deny");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("#D578kE4");
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.close();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 18);
      defaultJSONParser0.close();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("([C)[[F");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(115);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual (
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.parse((Object) "");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";s$UQ)V_,6", parserConfig0, 24180);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2;s$UQ)V_,6
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TreeSet", parserConfig0);
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseBoolean error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.BooleanCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")?:8!2mS6");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(defaultJSONParser1.lexer, parserConfig0);
      Dimension dimension0 = new Dimension(2, 0);
      // Undeclared exception!
      try { 
        defaultJSONParser2.parse((Object) dimension0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, line 1, column 4)?:8!2mS6
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TreeMap<Point, Annotation> treeMap0 = new TreeMap<Point, Annotation>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", actual ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2, actual 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}Z>#4ga;<Cj");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, expect {, actual ", jSONScanner0, parserConfig0);
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) mapDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2}Z>#4ga;<Cj
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("([C)[[F");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2([C)[[F
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("currency", 102);
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      defaultJSONParser0.accept(1, 1);
      defaultJSONParser0.parseKey();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[52iV[/ 0d,D9I_", 2192);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      defaultJSONParser0.setContext((ParseContext) null, (Object) null, (Object) decimalFormat0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TreeMap<Point, Annotation> treeMap0 = new TreeMap<Point, Annotation>();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")?:8s2S64", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) parserConfig0, (Object) treeMap0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      defaultJSONParser1.setContext(parseContext0);
      defaultJSONParser1.popContext();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";s$UQ)V_,6", parserConfig0, 24180);
      defaultJSONParser0.popContext();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("z}DAUOI[!");
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[52iV[/ 0d,D9I_", 2192);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      HashSet<Point> hashSet0 = new HashSet<Point>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) hashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("~0BBy.XUv}GpMd", parserConfig0, 545);
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.getExtraTypeProviders();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[52iV[/ 0d,D9I_", parserConfig0);
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.getExtraProcessors();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[1];
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 698, '\u0014');
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(parserConfig0, jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.getResolveTaskList();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "fastjson.parser.autoTypeSupport");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      char[] charArray0 = new char[2];
      charArray0[1] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '[');
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '[';
      charArray0[4] = 'u';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 736);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      ChronoField chronoField0 = ChronoField.MICRO_OF_SECOND;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) chronoField0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 46);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      Type[] typeArray0 = new Type[2];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // array level > 512
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[a}@kr-}B |0");
      ArrayDeque<HttpCookie> arrayDeque0 = new ArrayDeque<HttpCookie>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) arrayDeque0, (Object) "SnakeCase");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3[a}@kr-}B |0
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      JSONObject jSONObject0 = new JSONObject(2);
      defaultJSONParser0.checkMapResolve(jSONObject0, (Object) null);
      assertEquals(0, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")?:8s2S64", parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      // Undeclared exception!
      try { 
        defaultJSONParser1.acceptType("fastjson.parser.safeMode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")?:8!s2S64");
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", actual ");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      LinkedHashMap<StringCharacterIterator, JSONObject> linkedHashMap0 = new LinkedHashMap<StringCharacterIterator, JSONObject>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", actual ");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "[a}@kr-}B |0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TreeMap<Point, Annotation> treeMap0 = new TreeMap<Point, Annotation>();
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{'Z>%P;^RwZ", parserConfig0, (-32));
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Float float0 = new Float((float) 0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("IfV:DkO4k0d", parserConfig0);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[52iV[/ 0d,D9I_", 29);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Type[] typeArray0 = new Type[3];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error :error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[a}@kr-}B |0");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Class<String> class0 = String.class;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      char[] charArray0 = new char[10];
      charArray0[0] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 698);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Type[] typeArray0 = new Type[7];
      Class<Integer> class0 = Integer.TYPE;
      typeArray0[0] = (Type) class0;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[52iV[/ 0d,D9I_", 29);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[52iV[/ 0d,D9I_", 29);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Type[] typeArray0 = new Type[1];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error :error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[52iV[/ 0d,D9I_", 29);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[a}@kr-}B |0");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Class<String> class0 = String.class;
      Vector<DateFormatSymbols> vector0 = new Vector<DateFormatSymbols>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[a}@kr-}B |0");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Class<Integer> class0 = Integer.TYPE;
      ArrayList<BufferCapabilities> arrayList0 = new ArrayList<BufferCapabilities>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseInt error
         //
         verifyException("com.alibaba.fastjson.serializer.IntegerCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[a}@kr-}B |0");
      LinkedHashSet<ImageCapabilities> linkedHashSet0 = new LinkedHashSet<ImageCapabilities>();
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      // Undeclared exception!
      defaultJSONParser0.parseArray((Class<?>) class0, (Collection) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[a}@r-}B |0");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual [, pos 0, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", name ", parserConfig0, 48);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", actual ");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      TreeMap<Double, JobAttributes> treeMap0 = new TreeMap<Double, JobAttributes>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) treeMap0, (Object) "[a}@kr-}B |0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{Vq_u6fE_\"~zuwB");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("a}@kr-}B|0");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      ParserConfig parserConfig0 = defaultJSONParser0.getConfig();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(parserConfig0, jSONReaderScanner0, parserConfig0);
      assertEquals(13, jSONReaderScanner0.token());
      
      defaultJSONParser0.parseObject();
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      char[] charArray0 = new char[6];
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 2, parserConfig0, 1004);
      defaultJSONParser0.getInput();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, position at ");
      defaultJSONParser0.getDateFormat();
      DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNotNull(dateFormat0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[a}@kr-}B |0");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "[a}@kr-}B |0", (Object) defaultJSONParser0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "[a}@kr-}B |0");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.getResolveTaskList();
      assertEquals(14, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TreeSet", parserConfig0);
      DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
      assertNotNull(dateFormat0);
      
      defaultJSONParser0.setDateFomrat(dateFormat0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[a}!@kr-}B |'");
      defaultJSONParser0.getSymbolTable();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("#D578kE4");
      defaultJSONParser0.getContext();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0");
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((char[]) null, 2, parserConfig0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")?:8!2mS6");
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with )
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Feature feature0 = Feature.OrderedField;
      defaultJSONParser0.isEnabled(feature0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      defaultJSONParser0.config(feature0, true);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0");
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("NaN", 698);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      assertEquals(18, jSONScanner0.token());
      
      defaultJSONParser0.parse();
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("+");
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(25, 25);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect ., actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0");
      defaultJSONParser0.getFieldTypeResolver();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.setResolveStatus(16);
      assertEquals(16, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")?:8!s2S64");
      defaultJSONParser0.getDateFomartPattern();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("9ar25KewL(_8h]");
      JSONLexer jSONLexer0 = defaultJSONParser0.getLexer();
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNotNull(jSONLexer0);
      assertEquals(2, jSONLexer0.token());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("T2GV");
      defaultJSONParser0.setDateFormat("T2GV");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }
}
