/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 19:01:48 GMT 2020
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.text.BreakIterator;
import java.text.Collator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.SimpleDateFormat;
import java.util.ArrayDeque;
import java.util.BitSet;
import java.util.Collection;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.awt.SunHints;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) "0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual int, pos 0, fieldName 0
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, expect {, actual ", parserConfig0, 79);
      HttpCookie httpCookie0 = new HttpCookie("fastjson.parser.autoTypeSupport", "fastjson.parser.autoTypeSupport");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeSupport");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) httpCookie0, (Object) jSONReaderScanner0);
      defaultJSONParser0.setContext(parseContext0, (Object) httpCookie0, (Object) parseContext0);
      Object object0 = defaultJSONParser0.resolveReference("com.alibaba.fastjson.parser.JSONReaderScanner");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse("1.2.68");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("NaN");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(1, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect error, actual ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[R(yk");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual [
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$VALUES", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect string, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, expect {, actual ", parserConfig0, 79);
      HttpCookie httpCookie0 = new HttpCookie("fastjson.parser.autoTypeSupport", ", actual ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeSupport");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) httpCookie0, (Object) jSONReaderScanner0);
      ParseContext parseContext1 = new ParseContext(parseContext0, parserConfig0, ", actual ");
      ParseContext parseContext2 = defaultJSONParser0.setContext(parseContext1, (Object) httpCookie0, (Object) parseContext1);
      assertEquals(2, parseContext2.level);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, expect {, actual ", parserConfig0, 79);
      HttpCookie httpCookie0 = new HttpCookie("fastjson.parser.autoTypeSupport", "fastjson.parser.autoTypeSupport");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeSupport");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) httpCookie0, (Object) jSONReaderScanner0);
      defaultJSONParser0.setContext(parseContext0, (Object) httpCookie0, (Object) parseContext0);
      defaultJSONParser0.popContext();
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.null");
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.accept(1, 125);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(2708.258379897, 2021.84589, 565.33, 0.0);
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) list0, (Object) rectangle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ., pos 1, fieldName java.awt.Rectangle[x=2708,y=2021,width=566,height=1]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0);
      JSONObject jSONObject0 = defaultJSONParser0.parseObject();
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 15);
      defaultJSONParser0.setResolveStatus(120);
      Stack<MockDate> stack0 = new Stack<MockDate>();
      defaultJSONParser0.checkListResolve(stack0);
      assertEquals(120, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5~2bf/Y*}3Q");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Rectangle> class0 = Rectangle.class;
      Class<?> class1 = parserConfig0.checkAutoType(class0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(class1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("R[N:d!E");
      defaultJSONParser0.accept(1, 1);
      Type[] typeArray0 = new Type[1];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, line 1, column 4R[N:d!E
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Type[] typeArray0 = new Type[3];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error :");
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.com.alibaba.fastjson.parser.DefaultJSONParser@2");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      HashSet<TimeZone> hashSet0 = new HashSet<TimeZone>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) hashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but ., pos 2, line 1, column 3$.com.alibaba.fastjson.parser.DefaultJSONParser@2
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[1];
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 0);
      Class<MockDateFormat> class0 = MockDateFormat.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SQtK");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ident, pos 4, line 1, column 5SQtK
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5~2bf/Y*}3Q");
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getDateInstance();
      defaultJSONParser0.handleResovleTask(simpleDateFormat0);
      assertEquals("MMM d, yyyy", simpleDateFormat0.toPattern());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[6]k");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("[6]k");
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONArray jSONArray0 = (JSONArray)defaultJSONParser1.parse((Object) bigInteger0);
      defaultJSONParser0.parseArray((Collection) jSONArray0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      LinkedList<MockDate> linkedList0 = defaultJSONParser0.parseObject((Type) parameterizedTypeImpl0);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5~2bf/Y*}3Q");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      defaultJSONParser0.setConfig(parserConfig0);
      Class<BigInteger> class0 = BigInteger.class;
      BigInteger bigInteger0 = defaultJSONParser0.parseObject(class0);
      assertEquals((byte)5, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[6]k");
      List<Double> list0 = defaultJSONParser0.parseArray((Class<Double>) null);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Object object0 = defaultJSONParser0.parse();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      Feature feature0 = Feature.AllowSingleQuotes;
      boolean boolean0 = defaultJSONParser0.isEnabled(feature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, expect {, actual ", parserConfig0, 79);
      HttpCookie httpCookie0 = new HttpCookie("fastjson.parser.autoTypeSupport", ", actual ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeSupport");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) httpCookie0, (Object) jSONReaderScanner0);
      defaultJSONParser0.setContext((Object) parseContext0, (Object) defaultJSONParser0);
      Object object0 = defaultJSONParser0.getObject("$.com.alibaba.fastjson.parser.DefaultJSONParser@2");
      assertSame(object0, parseContext0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, expect {, actual ", parserConfig0, 79);
      Object object0 = new Object();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 6, 3218, 53, 79);
      ParseContext parseContext0 = defaultJSONParser0.setContext(object0, (Object) mockGregorianCalendar0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "fastjson.parser.autoTypeSupport");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask1 = defaultJSONParser0.getLastResolveTask();
      assertSame(defaultJSONParser_ResolveTask1, defaultJSONParser_ResolveTask0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("NaN");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Object object0 = new Object();
      defaultJSONParser0.setContext((Object) null, object0);
      ParseContext parseContext0 = defaultJSONParser0.getContext();
      assertEquals(0, parseContext0.level);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<JSONScanner> class0 = JSONScanner.class;
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      defaultJSONParser0.parseObject((Type) class0, (Object) aSMDeserializerFactory0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1FLaUHRoAm5\"1:~B+y8");
      defaultJSONParser0.setConfig((ParserConfig) null);
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("B=kv8zgaa`I");
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      defaultJSONParser0.parseObject((Object) bigInteger0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[k");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[6]k");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual [, pos 0, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SQtK");
      Class<BigInteger> class0 = BigInteger.class;
      // Undeclared exception!
      defaultJSONParser0.parseObject(class0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("U+g:0U9yx4&[+{", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra("U+g:0U9yx4&[+{", "U+g:0U9yx4&[+{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - +, info : pos 1, line 1, column 2U+g:0U9yx4&[+{
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", actul ");
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but ,, pos 1, line 1, column 2, actul 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", actual ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("'95=co='(]~!c");
      LinkedList<SimpleTimeZone> linkedList0 = new LinkedList<SimpleTimeZone>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual string, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0");
      Double double0 = new Double(1.0E9);
      defaultJSONParser0.setContext((Object) double0, (Object) "0");
      // Undeclared exception!
      try { 
        defaultJSONParser0.getObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error :");
      defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getInput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0);
      defaultJSONParser0.setDateFormat("null");
      // Undeclared exception!
      try { 
        defaultJSONParser0.getDateFormat();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'n'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, line 1, column 1
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(charArray0, 1, parserConfig0, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((char[]) null, (-1613), (ParserConfig) null, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("\"", parserConfig0, 1511);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("*72axt&9}r/g,z\"0j", (ParserConfig) null, (-2367));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.autoTypeSupport", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("[R^k", (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.autoTypeSupport");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser(parserConfig0, defaultJSONParser0.lexer, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("NaN");
      Class<BigInteger> class0 = BigInteger.class;
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(class0, jSONReaderScanner0, (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeSupport");
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((JSONLexer) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((JSONLexer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("NaN");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Object object0 = defaultJSONParser0.parse((Object) "GMT+00:00");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.co].aBibabafastjson.pars)r.DefaultJSOParser2");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      Locale locale0 = Locale.forLanguageTag("Q3}jLL");
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse((Object) decimalFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3$.co].aBibabafastjson.pars)r.DefaultJSOParser2
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[R^k");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse((Object) defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3[R^k
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      Insets insets0 = new Insets(0, 0, 86, 0);
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, insets0);
      Object object0 = defaultJSONParser0.parse((Object) renderingHints0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1FLaUHRoAm5\"1:~B+y8");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Object object0 = defaultJSONParser0.parse((Object) bigDecimal0);
      assertEquals(1.0F, object0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Na@N");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "GMT+00:00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("4{+&B|u-f");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0, defaultJSONParser0.lexer, parserConfig0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4{+&B|u-f");
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse((Object) jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : +pos 2, line 1, column 34{+&B|u-f
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5~2bf/Y*}3Q");
      Object object0 = defaultJSONParser0.parse((Object) null);
      assertEquals(5, object0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", actual ");
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2, actual 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      char[] charArray0 = new char[2];
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 0);
      Object object0 = defaultJSONParser0.parse((Object) ", ");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, expect {, actual ", parserConfig0, 79);
      HttpCookie httpCookie0 = new HttpCookie("fastjson.parser.autoTypeSupport", ", actual ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeSupport");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) httpCookie0, (Object) jSONReaderScanner0);
      ParseContext parseContext1 = defaultJSONParser0.setContext(parseContext0, (Object) httpCookie0, (Object) parseContext0);
      ParseContext parseContext2 = defaultJSONParser0.setContext(parseContext1, (Object) httpCookie0, (Object) parseContext1);
      assertNotSame(parseContext0, parseContext2);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, expect {, actual ", parserConfig0, 79);
      HttpCookie httpCookie0 = new HttpCookie("fastjson.parser.autoTypeSupport", ", actual ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeSupport");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) httpCookie0, (Object) jSONReaderScanner0);
      defaultJSONParser0.setContext(parseContext0);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("R[N:d!E");
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.accept(1, 1);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) list0, (Object) rectangle2D_Float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, line 1, column 4R[N:d!E
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[6]k");
      ArrayDeque<JavaBeanDeserializer> arrayDeque0 = new ArrayDeque<JavaBeanDeserializer>();
      defaultJSONParser0.parseArray((Collection) arrayDeque0, (Object) arrayDeque0);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[R(yk");
      LinkedHashSet<BitSet> linkedHashSet0 = new LinkedHashSet<BitSet>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) linkedHashSet0, (Object) linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3[R(yk
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[6]k");
      TreeSet<Byte> treeSet0 = new TreeSet<Byte>();
      defaultJSONParser0.parseArray((Type) null, (Collection) treeSet0, (Object) treeSet0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("R[N:d!E");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      Class<Double> class0 = Double.TYPE;
      LinkedList<JobAttributes> linkedList0 = new LinkedList<JobAttributes>();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) linkedList0, (Object) decimalFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ident, pos 2, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5~2bf/Y*}3Q");
      Stack<ExtraTypeProvider> stack0 = new Stack<ExtraTypeProvider>();
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) stack0, (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but int, pos 1, line 1, column 25~2bf/Y*}3Q
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[R^k");
      Long long0 = new Long(1);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null, (Object) long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3[R^k
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1FLaUHRoAm5\"1:~B+y8");
      LinkedHashMap<Dimension, MockDate> linkedHashMap0 = new LinkedHashMap<Dimension, MockDate>();
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual float, pos 2, line 1, column 31FLaUHRoAm5\"1:~B+y8
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("4{+&B|u-f");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0, defaultJSONParser0.lexer, parserConfig0);
      LinkedHashMap<Dimension, MockDate> linkedHashMap0 = new LinkedHashMap<Dimension, MockDate>();
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject((Map) linkedHashMap0, (Object) "4{+&B|u-f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : +pos 2, line 1, column 34{+&B|u-f
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0);
      LinkedHashMap<Dimension, MockDate> linkedHashMap0 = new LinkedHashMap<Dimension, MockDate>();
      Object object0 = defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) "yyyy-MM-dd HH:mm:ss");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("C3DVkN]Y9]l)'h#0\"");
      ParseContext parseContext0 = defaultJSONParser0.getContext();
      assertNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", actual ");
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      Class<Long> class0 = Long.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but ,, pos 1, line 1, column 2, actual 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unclosed str", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException(4301);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("R[N:d!E");
      ParserConfig parserConfig0 = defaultJSONParser0.getConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[6]k");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "[6]k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual [, fieldName [6]k, pos 1, line 1, column 2[6]k
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[R^k");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3[R^k
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("4{+&B|u-f");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0, defaultJSONParser0.lexer, parserConfig0);
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.autoTypeAccept", 0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) jSONScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : +pos 2, line 1, column 34{+&B|u-f
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseObject("5~bf/Y*}3Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("wa]\f--Kb=(F@L%56");
      defaultJSONParser0.setContext((Object) "wa]\f--Kb=(F@L%56", (Object) "wa]\f--Kb=(F@L%56");
      Object object0 = defaultJSONParser0.resolveReference("$");
      assertEquals("wa]\f--Kb=(F@L%56", object0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Object object0 = defaultJSONParser0.resolveReference("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      defaultJSONParser0.close();
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("T7rrw~LcpcE=JA/:'t");
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\u0001u:q?=+", 2344);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.close();
      assertEquals(':', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("R[N:d!E");
      defaultJSONParser0.accept(1, 1);
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[R^k");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      defaultJSONParser1.accept(1);
      assertFalse(defaultJSONParser1.equals((Object)defaultJSONParser0));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[6]k");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual [
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 1, line 1, column 20
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Object object0 = defaultJSONParser0.parseKey();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", actual ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2, actual 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[6]k");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(defaultJSONParser0.lexer);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, line 1, column 4[6]k
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("`}jx9r!I`Pt >3xEZ");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3`}jx9r!I`Pt >3xEZ
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("'95=co='(]~!c");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(parserConfig0, defaultJSONParser0.lexer, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 9, line 1, column 10'95=co='(]~!c
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("'95=co='(]~!c");
      Byte byte0 = new Byte((byte)108);
      Object object0 = defaultJSONParser0.parse((Object) byte0);
      assertEquals("95=co=", object0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("u;_c|\"}jy#35YlsIMh");
      Object object0 = defaultJSONParser0.parseKey();
      assertEquals("u", object0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unclosed jsonArray", parserConfig0, (-1342));
      DecimalFormat decimalFormat0 = new DecimalFormat("unclosed jsonArray");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) defaultJSONParser0.resolveStatus, (Object) decimalFormat0);
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = line2D_Double0.getBounds();
      ParseContext parseContext1 = defaultJSONParser0.setContext(parseContext0, (Object) "fastjson.parser.autoTypeSupport", (Object) rectangle0);
      assertNull(parseContext1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("ull", parserConfig0);
      defaultJSONParser0.setContext((Object) parserConfig0.AUTO_SUPPORT, (Object) parserConfig0);
      defaultJSONParser0.popContext();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e0~;_k[@]#PF", 999999999);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.popContext();
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[R(yk");
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("WWU~\"", parserConfig0, (-1));
      defaultJSONParser0.setContext((ParseContext) null);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[R^`");
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      List<ExtraTypeProvider> list1 = defaultJSONParser0.getExtraTypeProviders();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error :");
      defaultJSONParser0.getExtraProcessors();
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TODO : ", 115);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.getResolveTaskList();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "NE5p:mi0J5=");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      assertEquals(18, jSONScanner0.token());
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("R[N:d!E");
      defaultJSONParser0.getResolveTaskList();
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[R^k", parserConfig0, 26);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3[R^k
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[R^k");
      defaultJSONParser0.setContext((Object) defaultJSONParser0, (Object) defaultJSONParser0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3[R^k
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1FLaUNHRoAm5\"1:~B+y8");
      Hashtable<com.alibaba.fastjson.util.ParameterizedTypeImpl, PageAttributes> hashtable0 = new Hashtable<com.alibaba.fastjson.util.ParameterizedTypeImpl, PageAttributes>();
      Collator collator0 = Collator.getInstance();
      defaultJSONParser0.checkMapResolve(hashtable0, collator0);
      assertEquals(0, hashtable0.size());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[6]k");
      assertEquals(0, defaultJSONParser0.resolveStatus);
      
      defaultJSONParser0.parseKey();
      JSONScanner jSONScanner0 = (JSONScanner)defaultJSONParser0.getLexer();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("R^");
      Double double0 = new Double(1);
      defaultJSONParser0.setContext((Object) double0, (Object) double0);
      Object object0 = defaultJSONParser0.getObject("$");
      assertEquals(1.0, object0);
      assertNotNull(object0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0");
      Double double0 = new Double(1.0E9);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) double0, (Object) "0");
      assertNotNull(parseContext0);
      
      Object object0 = defaultJSONParser0.getObject("l2?v&Ec");
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("4{+&B|u-f");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0, defaultJSONParser0.lexer, parserConfig0);
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject((Object) timeZone0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : +pos 2, line 1, column 34{+&B|u-f
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", actul ");
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) timeZone0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 8, line 1, column 9, actul 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      IdentityHashMap<String, Field> identityHashMap0 = new IdentityHashMap<String, Field>();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("q_", parserConfig0, 66);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Type[] typeArray0 = new Type[8];
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[6]k");
      Object[] objectArray0 = defaultJSONParser0.parseArray(typeArray0);
      assertNotNull(objectArray0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[R^");
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0);
      Type[] typeArray0 = new Type[0];
      defaultJSONParser0.parseArray(typeArray0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("R[N:d!E");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0, defaultJSONParser0.lexer, parserConfig0);
      Class<BreakIterator> class0 = BreakIterator.class;
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ident, pos 2, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[6]k");
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[R^k");
      Class<Byte> class0 = Byte.TYPE;
      Long long0 = new Long(1);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0, (Object) long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual [, pos 0, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("'95=co='(]~c");
      Class<Byte> class0 = Byte.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0, (Object) "'95=co='(]~c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with string
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0);
      LinkedHashMap<Dimension, MockDate> linkedHashMap0 = new LinkedHashMap<Dimension, MockDate>();
      Class<Long> class0 = Long.TYPE;
      defaultJSONParser0.parseObject((Type) class0, (Object) linkedHashMap0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      IdentityHashMap<String, Field> identityHashMap0 = new IdentityHashMap<String, Field>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", actual ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0, (Object) identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("'95co='(]~c");
      IdentityHashMap<DefaultJSONParser.ResolveTask, com.alibaba.fastjson.util.ParameterizedTypeImpl> identityHashMap0 = new IdentityHashMap<DefaultJSONParser.ResolveTask, com.alibaba.fastjson.util.ParameterizedTypeImpl>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string, pos 7, line 1, column 8'95co='(]~c
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[6]k");
      defaultJSONParser0.getInput();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[R(yk");
      DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
      assertNotNull(dateFormat0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5~2bf/Y*}3Q");
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      defaultJSONParser0.setDateFomrat(dateFormat0);
      defaultJSONParser0.getDateFormat();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5+F<52;");
      defaultJSONParser0.getSymbolTable();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", actul ");
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((char[]) null, 1, parserConfig0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.java.text.DecimalFormatSymbols@1073a.$.$.java.text.DecimalFormatSymbols@1073a");
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but error, pos 1, line 1, column 2$.java.text.DecimalFormatSymbols@1073a.$.$.java.text.DecimalFormatSymbols@1073a
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("NaN");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Class<Long> class0 = Long.class;
      defaultJSONParser0.parseObject(class0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("-_cw{)En|J5", parserConfig0, 2119);
      Feature feature0 = Feature.AllowISO8601DateFormat;
      defaultJSONParser0.isEnabled(feature0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[6]k");
      Feature feature0 = Feature.UseObjectArray;
      defaultJSONParser0.config(feature0, false);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", actual ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("^A^xg", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(112, 112);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[R(yk");
      defaultJSONParser0.getFieldTypeResolver();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[R^k");
      defaultJSONParser0.getDateFomartPattern();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[6]k");
      JSONLexer jSONLexer0 = defaultJSONParser0.getLexer();
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNotNull(jSONLexer0);
      assertEquals(14, jSONLexer0.token());
  }
}
