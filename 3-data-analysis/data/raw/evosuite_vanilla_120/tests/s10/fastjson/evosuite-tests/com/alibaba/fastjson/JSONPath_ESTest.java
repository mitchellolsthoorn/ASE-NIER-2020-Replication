/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 19:13:27 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.util.FieldInfo;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.Clock;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.HijrahDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.UUID;
import java.util.Vector;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, (byte) (-56));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((byte)32, (-7005), 338);
      SerializeConfig serializeConfig0 = new SerializeConfig(1843);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("C0^2", serializeConfig0, parserConfig0);
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, ")%-I7oO!", long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -19
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'f, but 'y'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" br9=C=Iwc%#`gW&M");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('R');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("safeMode");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("#rC!jL^");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(">S~ =*");
      jSONPath_JSONPathParser0.next();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(2430);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("}b]PGCzVYUGvSV3;Z");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("#QCSZ2`G4zf`{oYf4n`");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.parser.deny.internal", (-2711), 116, false);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntBetweenSegement0);
      assertSame(jSONPath_Filter0, jSONPath_IntBetweenSegement0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$VALUES");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("^EpO0FK");
      jSONPath_JSONPathParser0.parseArrayAccess(false);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("l#T{t=F+;L");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : l#T{t=F+;L
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.parser.autoTypeAccept", "/B", parserConfig0, (-751), (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9aRG>i");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(9L, object0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/9");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("/stackTrace/9");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$ValueSegment");
      jSONPath0.init();
      assertEquals("com.alibaba.fastjson.JSONPath$ValueSegment", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      Long long0 = new Long(4051324105176669827L);
      Vector<Object> vector0 = new Vector<Object>();
      jSONPath0.deepGetPropertyValues(long0, vector0);
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("b7i");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "b7i";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("/stackTrace/5", (String) null, (String) null, stringArray0, true);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, sQLNonTransientConnectionException0);
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, sQLTimeoutException0, jSONPath_MatchSegement0, jSONPath_MatchSegement0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" >6:Mtm=u");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax.  >6:Mtm=u
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("]R__s|:7QrT=N");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but ']'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("CnFmPE!}(FZv");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('2');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '2, but 'C'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny");
      long[] longArray0 = new long[9];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("common", longArray0, true);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, jSONPath_Operator0, ", column ", "type not match error");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("f%Q3EkZd", "/cause/cause/stackTrace/11");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLNonTransientException0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("/cause/cause/stackTrace/11", (-1.0), jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile(",wB]?'O;GfP~SUnx");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(",wB]?'O;GfP~SUnx", ", column ", sQLTimeoutException0);
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, ",wB]?'O;GfP~SUnx", sQLSyntaxErrorException0, jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(867, (-588), (-751));
      JSONPath jSONPath0 = JSONPath.compile(">b\"dwEe:\"tY|+g#");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-751));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Qp|[m|zt[bud)", "!g3vg\"tUA3z%v9jp]", 66);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.eval(jSONPath0, sQLSyntaxErrorException0, jSONPath_RangeSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("EQ", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 0, (-1550));
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, "EQ", parserConfig0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("2I2a");
      long long0 = jSONPath_JSONPathParser0.readLongValue();
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "", (Object) hijrahDate0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("5[pBpU]dlnu6#B");
      Class<Object> class0 = Object.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      JSONPath.arrayAdd((Object) javaBeanDeserializer0, "/stackTrace/4", (Object[]) null);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("}upIp+;)s_@nG%H", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      int int0 = JSONPath.size((Object) jSONPath_MinSegment0, "*");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("CQ=qww");
      int int0 = JSONPath.size((Object) sQLSyntaxErrorException0, "/stackTrace/6");
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("^");
      Short short0 = new Short((short)7713);
      int int0 = jSONPath0.size((Object) short0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/9");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      int int0 = jSONPath0.size((Object) sQLNonTransientConnectionException0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/9");
      boolean boolean0 = jSONPath0.setPropertyValue("/stackTrace/9", "pW)", 6607618197526598121L, "/stackTrace/9");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("MH[\"X", "WriteNullBooleanAsFalse", sQLIntegrityConstraintViolationException0);
      boolean boolean0 = JSONPath.set((Object) sQLTransientConnectionException0, "WriteNullBooleanAsFalse", (Object) "/*-qR");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object object0 = JSONPath.read((String) null, "HkHW{KRrF}J");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      JSONPath jSONPath0 = JSONPath.compile("/cause/stackTrace/8");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("f|g8oJ=C*[kb", (String) null, sQLIntegrityConstraintViolationException0);
      Set<?> set0 = jSONPath0.keySet((Object) sQLNonTransientConnectionException0);
      assertEquals(5, set0.size());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<JSONPath> class0 = JSONPath.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("at");
      Long long0 = Long.valueOf(1749L);
      Collection<Object> collection0 = jSONPath0.getPropertyValues(long0);
      assertFalse(collection0.contains("at"));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("^cQW6o#4B");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Object object0 = jSONPath0.getPropertyValue(hashMap0, "b7X", 4647432019745535567L);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      Class<Integer> class0 = Integer.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny.internal");
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$FilterSegment");
      Object object0 = jSONPath0.getArrayItem((Object) null, 86);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object object0 = JSONPath.extract("", "Ro.-");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("xY[f\"&Y,_FNk/o,f O|");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny.internal");
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_JSONPathParser0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("5[pBpU]dlnu6#B");
      int[] intArray0 = new int[8];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Z9$v'", intArray0);
      Set<?> set0 = jSONPath0.evalKeySet(batchUpdateException0);
      assertEquals(6, set0.size());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[!HJ?{/9vCSJL", (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[!HJ?{/9vCSJL", "/-Lc%~C!a", 2430, sQLFeatureNotSupportedException0);
      ArrayList arrayList0 = (ArrayList)JSONPath.eval((Object) sQLSyntaxErrorException0, "*");
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/11");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("/stackTrace/11", "/stackTrace/11");
      Object object0 = jSONPath0.eval((Object) sQLIntegrityConstraintViolationException0);
      assertNotNull(object0);
      assertEquals("java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)", object0.toString());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = JSONPath.compare("com.alibaba.fastjson.JSONPath$MultiPropertySegment", "rr)#");
      assertEquals((-15), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(classLoader0, "fastjson.parser.deny", 5614464919154503228L, "m{7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("9");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(propertyNamingStrategy0, "9", 1289L, sQLWarning0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("tW]NG>I`-vH");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "tW]NG>I`-vH";
      stringArray0[1] = "tW]NG>I`-vH";
      stringArray0[2] = "tW]NG>I`-vH";
      stringArray0[3] = "tW]NG>I`-vH";
      stringArray0[4] = "tW]NG>I`-vH";
      stringArray0[5] = "tW]NG>I`-vH";
      stringArray0[6] = "tW]NG>I`-vH";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, "tW]NG>I`-vH", (byte) (-94), jSONPath_MultiPropertySegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("-Lc%~C!a");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, (Object) null, 8, jSONPath0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$ValueSegment");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("2^2_XlPL", "D");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("EQ", "/stackTrace/7", sQLTransientConnectionException0);
      // Undeclared exception!
      JSONPath.set((Object) jSONPath0, "EQ", (Object) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Double double0 = new Double((-1.0));
      // Undeclared exception!
      try { 
        JSONPath.set((Object) double0, "/cause/cause/stackTrace/11", (Object) "f.Q3EkZd");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<Long> class0 = Long.class;
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      Type type0 = FieldInfo.getFieldType((Class<?>) class1, (Type) class0, (Type) class0);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) type0, (Object) serializeConfig0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$ValueSegment");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      jSONPath0.set((Object) jSONPath0, (Object) bigDecimal0, true);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[*XBcP\" &._xs;\"y");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_Operator0, (Object) "[*XBcP\" &._xs;\"y", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '], but '.'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$ValueSegment");
      Class<UUID> class0 = UUID.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      // Undeclared exception!
      jSONPath0.set((Object) javaBeanDeserializer0, (Object) jSONPath_MultiIndexSegment0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath jSONPath0 = JSONPath.compile("`uVslzw:Ic$");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_MaxSegment0, (Object) "`uVslzw:Ic$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "(";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject((Object) null, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath0, stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "xY";
      stringArray0[1] = "MH";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath_FilterSegment0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$ValueSegment");
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("T", serializeConfig0, parserConfig0);
      Integer integer0 = new Integer(110);
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(integer0, "not", false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("^cQW6o#4B", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, "fastjson.parser.deny", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("`uVslzw:Ic$");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, (Object) null, (-2579));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<BigInteger> class0 = BigInteger.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      // Undeclared exception!
      JSONPath.remove((Object) javaBeanSerializer0, "between");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      boolean boolean0 = JSONPath.remove((Object) jSONPath_Operator0, "/asmFactory/classLoader/parent/classLoader/parent/packages/sun.util.resources.zh");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      DataTruncation dataTruncation0 = new DataTruncation(105, true, true, 105, 105, sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) dataTruncation0, "&");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(454, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("WriteNullBooleanAsFalse", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("OKPZ&", serializeConfig0, parserConfig0);
      UUID uUID0 = MockUUID.fromString("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) uUID0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read((String) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<SQLTransientException> class0 = SQLTransientException.class;
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Float float0 = new Float(0.0F);
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) float0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("time");
      Long long0 = new Long(564L);
      Set<?> set0 = jSONPath0.keySet((Object) long0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[J");
      jSONPath0.isRef();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[*XBcP\" &._xs;\"y");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '], but '.'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("@type");
      int[] intArray0 = new int[6];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("x", "vIg[es?2l#YPNj;", (-1192), intArray0, (Throwable) null);
      Object object0 = jSONPath0.getPropertyValue(batchUpdateException0, ", line ", (byte)83);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("null", (SerializeConfig) null, parserConfig0);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("==fzivY_k");
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.reflect.Method
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("(D)Ljava/lang/Double;");
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("6NhTwyrcV.s5@E", serializeConfig0, (ParserConfig) null);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(10);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("I", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem(serializeConfig0, 10);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      Feature[] featureArray0 = new Feature[2];
      // Undeclared exception!
      try { 
        JSONPath.extract("s", "s", parserConfig0, 119, featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSONPath.extract("AtH[[", "+6L", (ParserConfig) null, 545, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      Feature[] featureArray0 = new Feature[9];
      // Undeclared exception!
      try { 
        JSONPath.extract("b.'NB&7$oq+xE63p%t5", "vIg[s?2l#4YPNj;", parserConfig0, 1311, featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("fuFn_", "fastjson.parser.safeMode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("write", "in");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("java.time.OffsetDateTime", "/~wYrq9.1:_[pUWb.>-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2java.time.OffsetDateTime
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(".y[OGXI:Q*Bc VY");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("p>Vd|YB0BR", parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2p>Vd|YB0BR
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Double double0 = new Double((-1096.40674));
      JSONPath jSONPath0 = JSONPath.compile("[*XBcP\" &._xs;\"y");
      Set<?> set0 = jSONPath0.evalKeySet(double0);
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Short short0 = new Short((short)47);
      Object object0 = JSONPath.eval((Object) short0, "writeReference");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) "com.alibaba.fastjson.JSONPath$ValueSegment", stringArray0[1]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      JSONPath jSONPath0 = new JSONPath("Ro.-");
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("-", (String) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.deny", "fastjson.parser.safeMode", (-705), sQLTimeoutException0);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) sQLTransactionRollbackException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("(D)Ljava/lang/Double;");
      jSONPath0.eval((Object) "(D)Ljava/lang/Double;");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/9");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/stackTrace/9", "`#m{n&aut.m\"bO-~%`", 681);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(class0, "/stackTrace/9", 682, sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("ha[", serializeConfig0, parserConfig0);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      // Undeclared exception!
      jSONPath0.deepSet(jSONPath0, "fastjson.parser.deny", (-1L), localDate0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("9");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("\\-", sQLInvalidAuthorizationSpecException0);
      jSONPath0.deepSet("|R~]w", "(I)Ljava/lang/reflect/Type;", 1289L, sQLTimeoutException0);
      assertEquals("9", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("-");
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan("-", "-", stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path -, segement -
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("`gt");
      ArrayList<Object> arrayList0 = new ArrayList<Object>(47);
      // Undeclared exception!
      try { 
        jSONPath0.deepScan("*", "*", arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path `gt, segement *
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("xY[f\"&Y,_FNk/o,f O|");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("xY[f\"&Y,_FNk/o,f O|", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("s");
      SQLDataException sQLDataException0 = new SQLDataException();
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLDataException0, vector0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{OfSZ{62;K");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues((Object) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Long> class0 = Long.class;
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) class0, "fastjson.parser.deny", (Object) "2c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("java.nio.ByteBuffer", "java.nio.ByteBuffer");
      JSONPath.containsValue((Object) sQLFeatureNotSupportedException0, "MtEH[\"X", (Object) ";Rnqf@yC=Sq>");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("com.alibaba.fastjson.JSONPath$MatchSegement", (-6586085717218287427L), jSONPath_Operator0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("@type");
      boolean boolean0 = JSONPath.containsValue((Object) jSONPath_IntOpSegement0, "com.alibaba.fastjson.JSONPath$MatchSegement", (Object) jSONPath_JSONPathParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MatchSegement", serializeConfig0, parserConfig0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      SQLDataException sQLDataException0 = new SQLDataException();
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) javaBeanSerializer0, (Object) sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath jSONPath0 = new JSONPath("*");
      Double double0 = new Double((-915.0));
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      boolean boolean0 = jSONPath0.containsValue((Object) double0, (Object) jSONPath_SizeSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/SgYrq9.1:_[pUlV.>-");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("create instance error, ", "/SgYrq9.1:_[pUlV.>-", (-1952257876));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) "/SgYrq9.1:_[pUlV.>-", (Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"_[pUlV\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      String[] stringArray0 = new String[8];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) javaBeanSerializer0, "net.sf.json.JSONNull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) "]>x*7O", "MH[\"X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = JSONPath.compile("NE");
      boolean boolean0 = jSONPath0.contains((Object) serializeConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        JSONPath.compare(mockGregorianCalendar0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$MatchSegement");
      Float float0 = new Float((double) (-6586085717218287427L));
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) float0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path com.alibaba.fastjson.JSONPath$MatchSegement
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("evalKeySet error : ", (int[]) null, (Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("evalKeySet error : ", "/cause/stackTrace", 1169, batchUpdateException0);
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) sQLTransactionRollbackException0, ".", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.sql.SQLTransactionRollbackException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/-Lc%~C!a";
      stringArray0[1] = "/-Lc%~C!a";
      stringArray0[2] = "/-Lc%~C!a";
      stringArray0[3] = "/-Lc%~C!a";
      stringArray0[4] = "/-Lc%~C!a";
      stringArray0[5] = "HibernateProxy";
      stringArray0[6] = "/-Lc%~C!a";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject("/-Lc%~C!a", stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("b7i");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("b7i", true);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(",  end ", "V1&4Lm# m#\u0001js$z|", (-2346));
      jSONPath_PropertySegment0.setValue(jSONPath0, jSONPath_Operator0, sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: ,  end ", sQLFeatureNotSupportedException0.toString());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("b7X");
      jSONPath0.deepSet((Object) null, "com.alibaba.fastjson.util.IOUtils", 2923L, (Object) null);
      assertEquals("b7X", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("/oCvg", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, "/oCvg", 65279);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".q'e<E?\n, 2z/\"");
      SerializeConfig serializeConfig0 = new SerializeConfig(75, true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, serializeConfig0, Integer.MIN_VALUE, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.serializer.SerializeConfig
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("^cQW6o#4B", serializeConfig0, parserConfig0);
      DataTruncation dataTruncation0 = new DataTruncation((-270), true, true, 125, (-270));
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("/*-qR", "/*-qR", 125, (Map<String, ClientInfoStatus>) null);
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.remove(jSONPath0, sQLClientInfoException0, dataTruncation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$FilterSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com.albaba.fastjson.JSONPath$ValueSegment", false);
      JSONPath jSONPath0 = JSONPath.compile("com.albaba.fastjson.JSONPath$ValueSegment");
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, batchUpdateException0);
      jSONPath_PropertySegment0.setValue(jSONPath0, sQLClientInfoException0, (Object) null);
      assertEquals("com.albaba.fastjson.JSONPath$ValueSegment", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause");
      MathContext mathContext0 = MathContext.DECIMAL32;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("JSONPath$DoubleOpSegement", false);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, mathContext0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/cause/cause/stackTrace/11");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(4, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int[] intArray0 = new int[4];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("/-Lc%~C!a", intArray0, (Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("i$Y-LP~O&-U=/", batchUpdateException0);
      SQLWarning sQLWarning0 = new SQLWarning("[!HJ?{/9vCSJL", "[!HJ?{/9vCSJL", sQLFeatureNotSupportedException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[!HJ?{/9vCSJL", "[!HJ?{/9vCSJL", 1843, sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[!HJ?{/9vCSJL", "[!HJ?{/9vCSJL", sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) sQLInvalidAuthorizationSpecException0, "[!HJ?{/9vCSJL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '], but '/'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" >6:Mtm=u");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)83;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONPath jSONPath0 = JSONPath.compile("vIg[s?2l#4YPNj;");
      int int0 = jSONPath0.evalSize("vIg[s?2l#4YPNj;");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/9");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "/stackTrace/9";
      stringArray0[1] = "/stackTrace/9";
      stringArray0[2] = "/stackTrace/9";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/stackTrace/9", true);
      boolean boolean0 = jSONPath0.set((Object) jSONPath_PropertySegment0, (Object) jSONPath_MultiPropertySegment0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/1", serializeConfig0, parserConfig0);
      Double double0 = new Double((-843.876212205));
      UUID uUID0 = MockUUID.fromString("2c");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) double0, (Object) uUID0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/cause/cause/stackTrace/11", true);
      SerializeConfig serializeConfig0 = new SerializeConfig(2);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("/cause/cause/stackTrace/11", serializeConfig0, parserConfig0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_PropertySegment0, (Object) bigInteger0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("i");
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = jSONPath0.set((Object) null, (Object) bigInteger0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/8");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("f {nIeoq:4(5; ,h\"g1");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.albaba.fastjson.JSONPath$ValueSegment");
      boolean boolean0 = jSONPath0.remove((Object) "com.albaba.fastjson.JSONPath$ValueSegment");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("i", serializeConfig0, (ParserConfig) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) aSMDeserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("l%kW]t<");
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("i");
      Object[] objectArray0 = new Object[4];
      jSONPath0.arrayAdd((Object) null, objectArray0);
      assertEquals("i", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(")");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      boolean boolean0 = jSONPath0.containsValue((Object) jSONPath_SizeSegment0, (Object) "-2147483648");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny.internal");
      boolean boolean0 = jSONPath0.containsValue((Object) jSONPath0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, parserConfig0);
      DataTruncation dataTruncation0 = new DataTruncation((-2711), false, false, 0, 4226);
      boolean boolean0 = jSONPath0.contains((Object) dataTruncation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, (-2), (-300));
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("yMQvg] uQO", dataTruncation0);
      boolean boolean0 = jSONPath0.contains((Object) sQLTransactionRollbackException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/cause/cause/stackTrace/11");
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("", serializeConfig0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "/stackTrace/9";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/stackTrace/9");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("NOT_LIKE", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(sQLSyntaxErrorException0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToObject((Object) null, stringArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Object object0 = JSONPath.reserveToObject("^", (String[]) null);
      assertEquals("^", object0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/9");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_Operator0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$ValueSegment");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("C[NsLn\"E`_V~R", "yyyy-MM-dd HH:mm:ss", 989);
      Map<String, Object> map0 = JSONPath.paths((Object) sQLTimeoutException0, serializeConfig0);
      Set<?> set0 = jSONPath0.evalKeySet(map0);
      assertEquals(83, set0.size());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/>8T15f=S,19(\"wRx");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      int int0 = jSONPath0.evalSize(jSONPath_Operator0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("vIg[es?2l#YPNj;", "javi.util.OptionalDouble", (byte)83);
      hashMap0.put("vIg[es?2l#YPNj;", sQLTimeoutException0);
      JSONPath jSONPath0 = JSONPath.compile("vIg[es?2l#YPNj;");
      int int0 = jSONPath0.evalSize(hashMap0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONPath jSONPath0 = new JSONPath("vIg[es?2l#YbPNj;");
      int int0 = jSONPath0.evalSize(hashMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(")");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      Set<?> set0 = jSONPath0.keySet((Object) jSONPath_SizeSegment0);
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, set0, set0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Long long0 = new Long(101);
      boolean boolean0 = JSONPath.remove((Object) long0, "i");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MatchSegement");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("NOT_BETWEEN", "NOT_BETWEEN", 0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("yyyy-MM-dd HH:mm:ss,SSS", "yyyy-MM-dd HH:mm:ss,SSS", sQLNonTransientException0);
      boolean boolean0 = jSONPath0.removePropertyValue(sQLInvalidAuthorizationSpecException0, (String) null, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("/*Tx3m&tJuY", hashMap0);
      JSONPath jSONPath0 = JSONPath.compile("/.tackQrace/9");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(sQLClientInfoException0, "stackTrace", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // set property error, java.sql.SQLClientInfoException#stackTrace
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.FieldDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("]>x*7O");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("]>x*7O", true);
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, "?dn<I`z+T'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("b7i");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "b7i";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      SQLDataException sQLDataException0 = new SQLDataException("not", (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("b7i", "not", (-453), sQLDataException0);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, sQLNonTransientConnectionException0, (Object) null);
      boolean boolean0 = jSONPath0.setPropertyValue(arrayList0, "b7i", (-1608L), jSONPath_MultiPropertySegment0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny.internal");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Short short0 = new Short((short)45);
      linkedList0.add((Object) short0);
      jSONPath0.deepScan(linkedList0, "fastjson.parser.safeMode", linkedList0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONPath jSONPath0 = new JSONPath("vIK[cs?2l'YPAj;");
      ArrayList<Object> arrayList0 = new ArrayList<Object>(47);
      jSONPath0.deepScan(hashMap0, "vIK[cs?2l'YPAj;", arrayList0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      jSONPath0.deepScan(serializeConfig0, "#Gi6#.l:m", linkedList0);
      assertEquals("fastjson.parser.deny", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$ValueSegment");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$ValueSegment";
      stringArray0[1] = "com.alibaba.fastjson.JSONPath$ValueSegment";
      stringArray0[2] = "com.alibaba.fastjson.JSONPath$ValueSegment";
      Object object0 = JSONPath.reserveToArray(jSONPath0, stringArray0);
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(object0, stringArray0);
      assertEquals(3, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/9");
      int int0 = jSONPath0.size((Object) hashMap0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Double double0 = new Double((-1096.40674));
      BigDecimal bigDecimal0 = new BigDecimal(44);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Float float0 = new Float(0.0);
      boolean boolean0 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Short short0 = new Short((short)68);
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Double double0 = new Double(0.0);
      boolean boolean0 = JSONPath.eqNotNull(double0, (byte)0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Short short0 = new Short((short)68);
      Float float0 = new Float(0.0);
      boolean boolean0 = JSONPath.eqNotNull(short0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Short short0 = new Short((short)181);
      boolean boolean0 = JSONPath.eqNotNull(short0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Short short0 = new Short((short)72);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(short0, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Short cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Integer integer0 = new Integer(107);
      boolean boolean0 = JSONPath.eqNotNull((-1580386065683472715L), integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Short short0 = new Short((short)88);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Double double0 = new Double((-1096.40674));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      boolean boolean0 = JSONPath.containsValue((Object) double0, "^", (Object) bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Double double0 = new Double((-1096.40674));
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, parserConfig0);
      Class<SQLException> class0 = SQLException.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      boolean boolean0 = JSONPath.eq(double0, javaBeanSerializer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      boolean boolean0 = JSONPath.containsValue((Object) "2c", ",", (Object) "evalKeySet error : ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      boolean boolean0 = JSONPath.eq(parserConfig0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("B;Y[,6WC]#'bE[");
      boolean boolean0 = JSONPath.eq((Object) null, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      boolean boolean0 = JSONPath.eq((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("xY[f\"&Y,_FNk/o,f O|");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, linkedList0, linkedList0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("/*Tx3m&JuY", hashMap0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLClientInfoException0);
      JSONPath jSONPath0 = JSONPath.compile("CzX>");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("YD[M;qM_Hd`tu\"", "typeName", sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, sQLClientInfoException0, sQLTransientConnectionException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("l%kW]t<");
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("^(8zV");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("C&mVa!htj9", false);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(102);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath_PropertySegment0, jSONPath_PropertySegment0);
      boolean boolean0 = jSONPath_ArrayAccessSegment0.remove(jSONPath0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("xY[f\"&Y,_FNk/o,f O|");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = jSONPath0.removeArrayItem(jSONPath0, linkedList0, (-3819));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/9");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = jSONPath0.set((Object) mockGregorianCalendar0, (Object) bigInteger0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      Object object0 = JSONPath.reserveToArray("", (String[]) null);
      boolean boolean0 = JSONPath.containsValue(object0, "/cause/stackTrace/6", (Object) serializeConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("evalKeySet error : ", "evalKeySet error : ", true);
      JSONPath jSONPath0 = JSONPath.compile("xY[f\"&Y,_FNk/o,f O|");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("]Pp;~P[=RA;c");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_ValueSegment0, true);
      int[] intArray0 = new int[6];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_MultiIndexSegment0, "xY[f\"&Y,_FNk/o,f O|", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(102, false, false, 7, (-1214));
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      JSONPath jSONPath0 = JSONPath.compile("dHE20yk*';iW)s");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, dataTruncation0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement(".", "nin", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      JSONPath jSONPath0 = JSONPath.compile("/-Lc%~C!a");
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Integer> class0 = Integer.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, throwableDeserializer0, "nin");
      assertEquals("nin", object0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("vIg[es?2l#YPNj;", "javi.util.OptionalDouble", (byte)83);
      JSONPath jSONPath0 = JSONPath.compile("javi.util.OptionalDouble");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("javi.util.OptionalDouble", "javi.util.OptionalDouble", false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      DataTruncation dataTruncation0 = new DataTruncation(113, false, true, 113, 36);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, dataTruncation0, sQLTimeoutException0);
      assertNotNull(jSONArray0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("l%kW]t<", 2931L, 2931L, false);
      JSONPath jSONPath0 = new JSONPath("l%kW]t<");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, jSONPath0, sQLSyntaxErrorException0);
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[!HJ?{/9vCSJL");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("not support class : ");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      JSONPath jSONPath0 = JSONPath.compile("not support class : ");
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_JSONPathParser0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("C`\"+iilNF", 37);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("C`\"+iilNF", pattern0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("C`\"+iilNF");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("C`\"+iilNF");
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.LT;
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, sQLTimeoutException0, jSONPath_Operator1, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("X", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("\\-", "syntax error, ", jSONPath_Operator0);
      Class<SQLDataException> class0 = SQLDataException.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, "\\-", javaBeanSerializer0, sQLNonTransientConnectionException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement(";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Z", " br9=C=Iwc%#`gW&M", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/3");
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, linkedList0, jSONPath_StringOpSegement0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(" br9=C=Iwc%#`gW&M");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement(" br9=C=Iwc%#`gW&M", " br9=C=Iwc%#`gW&M", false);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(101, 101, (-422));
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, jSONPath_RangeSegment0, jSONPath_RangeSegment0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/asmFactory/classLoader/parent/classLoader/packages/com.thoughtworks.xstream.io.path");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("com.alibaba.fastjson.serializer.AppendableSerializer", 2163L, jSONPath_Operator0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_WildCardSegment0, jSONPath_Operator0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("<Ryms", stringArray0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringInSegement0, jSONPath_StringInSegement0, false);
      JSONPath jSONPath0 = new JSONPath("org.hibernate.proxy.HibernateProxy");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("_asm", "<Ryms", 3375);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3375, 2880, 2753);
      Long long0 = new Long(2880);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, sQLRecoverableException0, long0, mockGregorianCalendar0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("5[pBpU]dlnu6#B");
      String[] stringArray0 = new String[9];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("<Ryms", stringArray0, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringInSegement0, jSONPath_StringInSegement0, false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("stackTrace");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2753, 955, 2753);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, (Object) null, sQLTransientConnectionException0, mockGregorianCalendar0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "{(c;HdG8h5vXD*sCU(";
      stringArray0[1] = "fastjson.parser.deny";
      stringArray0[2] = "fastjson.parser.deny";
      stringArray0[3] = "fastjson.parser.deny";
      stringArray0[4] = "fastjson.parser.deny";
      stringArray0[5] = "fastjson.parser.deny";
      stringArray0[6] = "fastjson.parser.deny";
      stringArray0[7] = "fastjson.parser.deny";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("fastjson.parser.deny", stringArray0, true);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("{(c;HdG8h5vXD*sCU(", "scanFieldFloat");
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, sQLTransactionRollbackException0, "fastjson.parser.deny", "{(c;HdG8h5vXD*sCU(");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Zjq;kT?G5S4A");
      Long[] longArray0 = new Long[7];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("", longArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("hP:,&9FEnJO-R@S");
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, (Object) null, jSONPath_JSONPathParser0, jSONPath_MultiIndexSegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("5[pBpU]dlnu6#B");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("5[pBpU]dlnu6#B");
      long long0 = 0L;
      Long[] longArray0 = new Long[2];
      Long long1 = new Long(0L);
      longArray0[0] = long1;
      longArray0[1] = long1;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("", longArray0, true);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, jSONPath_JSONPathParser0, "", long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("5[pBpU]dlnu6#B");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("5[pBpU]dlnu6#B");
      long long0 = 0L;
      Long[] longArray0 = new Long[2];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("", longArray0, true);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, jSONPath_JSONPathParser0, "", long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("not support class : ", (-2870L), 1459860845934817624L, true);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("not support class : ", serializeConfig0, parserConfig0);
      DataTruncation dataTruncation0 = new DataTruncation(3774, true, false, 3774, 1612);
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, parserConfig0, dataTruncation0, dataTruncation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("l%kW]t<");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("l%kW]t<", (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("631fA0ja(76OI(", "l%kW]t<", 1900, sQLTransientConnectionException0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("l%kW]t<", sQLSyntaxErrorException0, false);
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, mockGregorianCalendar0, (Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("l%kW]t<", (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("41");
      JSONPath jSONPath0 = new JSONPath("RLIKE");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("/.tackQrace/9", sQLIntegrityConstraintViolationException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("41", sQLIntegrityConstraintViolationException0);
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, sQLSyntaxErrorException0, sQLTransactionRollbackException0, "/cause/stackTrace/8");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("^>aZ;My+Q>9u$c");
      JSONPath jSONPath0 = new JSONPath("^>aZ;My+Q>9u$c");
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, jSONPath0, jSONPath0, "port is not int");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/9");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(110, 11, 39);
      Short short0 = new Short((short)67);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, short0, "/stackTrace/9");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$ValueSegment");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, (-4178), (-2928));
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("W>>#", (String) null, (-308));
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, "W>>#", sQLTransactionRollbackException0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      SerializeConfig serializeConfig0 = new SerializeConfig(120, false);
      JSONPath jSONPath0 = new JSONPath("getLastResolveTask", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(54, 120, 120);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.safeMode", false);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_PropertySegment0, (Object) null);
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/9");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-540), 393216, 393216);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, "u3yf[I#F=", "u3yf[I#F=");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      int[] intArray0 = new int[4];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[!HJ?{/9vCSJL", (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[!HJ?{/9vCSJL", "/-Lc%~C!a", 2431, sQLFeatureNotSupportedException0);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = new JSONPath("unsupported array put operation. ");
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, sQLSyntaxErrorException0, "/-Lc%~C!a");
      assertEquals(4, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, parserConfig0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1$\"*Q7OtynM", parserConfig0, 110);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.JSONPath$WildCardSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/cause/cause/stackTrace/11", true);
      SerializeConfig serializeConfig0 = new SerializeConfig(2);
      JSONPath jSONPath0 = new JSONPath("V1&4Lm# m#\u0001js$z|");
      jSONPath_PropertySegment0.setValue(jSONPath0, "V1&4Lm# m#\u0001js$z|", serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/cause/cause/stackTrace/11", true);
      JSONPath jSONPath0 = new JSONPath(" :bLd\"F7\"=W@J<N8[v");
      UUID uUID0 = MockUUID.randomUUID();
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, "/cause/cause/stackTrace/11", uUID0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Long long0 = new Long((-811277319855450459L));
      // Undeclared exception!
      try { 
        JSONPath.compare(long0, "/stackTrace/9");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Long
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      int int0 = JSONPath.compare("[!HJ?{/9vCSJL", "[!HJ?{/9vCSJL");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        JSONPath.compare(jSONPath_JSONPathParser0, "fastjson.parser.autoTypeSupport");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath$JSONPathParser cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath jSONPath0 = JSONPath.compile(" br9=C=Iwc%#`gW&M");
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, jSONPath0, jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(":");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$Operator");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("ENsQQp]S4X\" *Mz,");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ENsQQp]S4X\" *Mz\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/cause/cause/stackTrace/11");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("cause", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("between");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("LIKE");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('+');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'l6MH*k0V,9y");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '', but 'y'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("18CdLElZao");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue((-1637L));
      assertEquals((-1619.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Y$.Cb(tc &h{_");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(4647432019745535567L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/*Tx3m&tJuY");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[!HJ?{/9vCSJL");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readSegement();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '], but '/'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("l%kW]t<");
      jSONPath_JSONPathParser0.next();
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("5[pBpU]dlnu6#B");
      jSONPath_JSONPathParser0.readDoubleValue((-2L));
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '), but 'd'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("lDhnMa_<e>izVL4O'C\"");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("@type");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '., but 't'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$-R^!<~|;");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. $-R^!<~|;
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("'", serializeConfig0, parserConfig0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1$\"*Q7OtynM", parserConfig0, 110);
      Object object0 = jSONPath0.extract(defaultJSONParser0);
      assertEquals(1, object0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) parserConfig0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "ha[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_SizeSegment0, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(")");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      boolean boolean0 = jSONPath0.set((Object) batchUpdateException0, (Object) "writeAfter");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("fastjson.parser.safeMode");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "**q77VoJ*8P!0P1FVi", (Object) sQLRecoverableException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/9");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("/cause/stackTrace/12");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLRecoverableException0, (Object) "com.alibaba.fastjson.JSONReader");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1265, true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("ident", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.set((Object) parserConfig0, (Object) "ident", false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) sQLIntegrityConstraintViolationException0, "/stackTrace/9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      boolean boolean0 = JSONPath.remove((Object) jSONPath_WildCardSegment0, "fastjson.parser.deny");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONPath jSONPath0 = new JSONPath("*");
      Byte byte0 = new Byte((byte)5);
      jSONPath0.arrayAdd((Object) byte0, (Object[]) stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(")");
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) ")", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String[] stringArray0 = new String[16];
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "**q77VoJ*8P!0P1FVi", (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path fastjson.parser.safeMode
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.deny.internal", false);
      Object[] objectArray0 = new Object[0];
      jSONPath0.arrayAdd((Object) jSONPath_PropertySegment0, objectArray0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      jSONPath0.arrayAdd((Object) serializeConfig0, (Object[]) null);
      assertEquals("fastjson.parser.deny", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("wxtN");
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("_asm_deser__");
      Float float0 = new Float((-1.0));
      int int0 = jSONPath0.size((Object) float0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(",wB]?'O;GfP~SUnx");
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(",wB]?'O;GfP~SUnx");
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) ",wB]?'O;GfP~SUnx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ,wB]?'O;GfP~SUnx
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("]", "*", (-1952257876));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLSyntaxErrorException0);
      boolean boolean0 = jSONPath0.containsValue((Object) "*", (Object) sQLFeatureNotSupportedException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      boolean boolean0 = JSONPath.containsValue((Object) null, "f%Q3EkZd", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("/*Tx3m&tJuY", hashMap0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLClientInfoException0);
      boolean boolean0 = JSONPath.contains((Object) sQLFeatureNotSupportedException0, "stackTrace");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("m>;b\fPm");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) "m>;b\fPm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : m>;b\fPm
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/8");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5=[,$&1,^wX6WnC5`G", (-566));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$ValueSegment");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      int int0 = JSONPath.size((Object) null, "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/cause/cause/stackTrace/11");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.isRef();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath jSONPath0 = JSONPath.compile("`uVslzw:Ic$");
      Byte byte0 = new Byte((byte)110);
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, byte0, byte0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("^SjBywRT(");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("And", false);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SQLException> class0 = SQLException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      Object object0 = JSONPath.reserveToArray(javaBeanDeserializer0, (String[]) null);
      Object object1 = jSONPath_KeySetSegment0.eval(jSONPath0, jSONPath_PropertySegment0, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("org.joda.time.UTCDateTimeZone", "org.joda.time.UTCDateTimeZone", true);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("org.joda.time.UTCDateTimeZone", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("fastjson.parser.autoTypeAccept", "", jSONPath_Operator0);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, "org.joda.time.UTCDateTimeZone", parserConfig0, jSONPath_RlikeSegement0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("M+fF1(0zMlF~tl", "M+fF1(0zMlF~tl", "M+fF1(0zMlF~tl", (String[]) null, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_MatchSegement0, jSONPath_MatchSegement0, false);
      JSONPath jSONPath0 = new JSONPath("l#T{t=F+;L");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("T/&ERVpU\"b3gu-", "T/&ERVpU\"b3gu-", 955);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("TODO");
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, sQLRecoverableException0, sQLTransientConnectionException0, sQLTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      JSONPath jSONPath0 = JSONPath.compile("/cause/cause/stackTrace/11");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      Object object0 = jSONPath0.extract(defaultJSONParser0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("**q77VoJ*8P!0P1FVi");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('*', char0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(2300);
      JSONPath jSONPath0 = JSONPath.compile("syntax error,except start with { or [,but actually start with ");
      UUID uUID0 = MockUUID.fromString("Vw");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("syntax error,except start with { or [,but actually start with ", "syntax error,except start with { or [,but actually start with ");
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, uUID0, sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.util.UUID
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/cause/cause/stackTrace/11");
      Set<?> set0 = jSONPath0.keySet((Object) "/cause/cause/stackTrace/11");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("l%kW]t<", 2923L, 2923L, false);
      JSONPath jSONPath0 = new JSONPath("l%kW]t<");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("l%kW]t<", "expect string");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath0, sQLInvalidAuthorizationSpecException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) jSONPath_SizeSegment0, "com.alibaba.fastjson.JSONPath$MatchSegement", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path com.alibaba.fastjson.JSONPath$MatchSegement
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read(".000000000", "oracle.sql.TIMESTAMP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2.000000000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("like", serializeConfig0, parserConfig0);
      String string0 = jSONPath0.getPath();
      assertEquals("like", string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("-9N_v|-#?GK{vHP?", serializeConfig0, parserConfig0);
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("RU2Z$f{[miv6w|wb5");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("java.time.OffsetDateTime", "/SwYrq9.1:_[pUWV.>-");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2java.time.OffsetDateTime
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Object object0 = JSONPath.eval((Object) "com.alibaba.fastjson.JSONPath$ValueSegment", "com.alibaba.fastjson.JSONPath$ValueSegment");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Short short0 = new Short((short)82);
      Set<?> set0 = JSONPath.keySet((Object) short0, "/asmFactory/classLoader/parent/classLoader");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1951));
      boolean boolean0 = JSONPath.set((Object) null, "O", (Object) jSONPath_ArrayAccessSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("com.alibaba.fastjson.JSONPath$MatchSegement", (-6586085717218287427L), jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MatchSegement");
      Double double0 = new Double((-6586085717218287427L));
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToArray(double0, stringArray0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(989);
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, jSONPath_Operator0, jSONPath_ArrayAccessSegment0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Cbject", "/-Lc%~C!a");
      boolean boolean0 = JSONPath.remove((Object) sQLTransientConnectionException0, "/-Lc%~C!a");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$Operator");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("ENsQQp]S4X\" *Mz,", jSONPath_Segment0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("-Mu&A-#");
      SQLDataException sQLDataException0 = new SQLDataException();
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, (Object) null, jSONPath_Segment0, sQLDataException0);
      assertFalse(boolean0);
  }
}
