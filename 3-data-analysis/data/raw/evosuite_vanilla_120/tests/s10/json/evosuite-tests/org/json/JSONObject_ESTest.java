/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 18:57:53 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.TrayIcon;
import java.awt.Window;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.net.Proxy;
import java.net.StandardProtocolFamily;
import java.nio.charset.Charset;
import java.security.CryptoPrimitive;
import java.security.KeyRep;
import java.text.Normalizer;
import java.time.DayOfWeek;
import java.time.Month;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import java.util.function.BiConsumer;
import javax.swing.DropMode;
import javax.swing.GroupLayout;
import javax.swing.JTable;
import javax.tools.JavaFileObject;
import jdk.net.SocketFlow;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      
      String string0 = "] could not be converted to BigInteger.";
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      JSONObject jSONObject1 = jSONObject0.put(";IO.K5;D=Bm%+\"b", (Object) ";IO.K5;D=Bm%+\"b");
      JSONObject jSONObject2 = jSONObject1.putOpt("] could not be converted to BigInteger.", ";IO.K5;D=Bm%+\"b");
      JSONPointer.builder();
      int int0 = (-3468);
      String string1 = "no";
      jSONObject1.optFloat(";IO.K5;D=Bm%+\"b", (float) (-3468));
      jSONObject2.put("\"P{eOh?1", (-3468));
      jSONObject0.toString((-3468));
      try { 
        jSONObject2.getBigInteger("RT{Xy<2^a?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000026] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/mitchell/generation-scripts/projects/json");
      JSONObject jSONObject1 = jSONObject0.increment("|E1y");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      jSONObject0.putOnce("Null key.", (Object) null);
      Long long0 = new Long((-1L));
      JSONObject jSONObject2 = jSONObject1.put(".", 2685L);
      jSONObject0.toMap();
      jSONObject1.optJSONObject("");
      jSONObject0.optLong("A JSONObect 9xt must ed with '}'", 0L);
      boolean boolean0 = jSONObject2.optBoolean(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject("Duplcate key \"", stringArray0);
      jSONObject0.optLong("Duplcate key \"", 1611L);
      Double double0 = new Double(1611L);
      JSONObject.wrap(double0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        jSONObject0.getBigDecimal("A JSONObject text must begin with '{'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      String string0 = ";IO.K5;D=Bm%+\"b";
      JSONObject jSONObject1 = jSONObject0.put(";IO.K5;D=Bm%+\"b", (Object) ";IO.K5;D=Bm%+\"b");
      JSONObject jSONObject2 = jSONObject1.putOpt("] could not be converted to BigInteger.", ";IO.K5;D=Bm%+\"b");
      JSONPointer.builder();
      String string1 = "\"P{eOh?1";
      jSONObject1.optFloat(";IO.K5;D=Bm%+\"b", (float) (-3468));
      JSONObject jSONObject3 = jSONObject2.put("\"P{eOh?1", (-3468));
      jSONObject0.toString((-3468));
      DropMode dropMode0 = DropMode.ON_OR_INSERT_ROWS;
      Class<DropMode> class0 = DropMode.class;
      jSONObject0.optEnum(class0, "no", dropMode0);
      jSONObject1.isNull("] could not be converted to BigInteger.");
      jSONObject1.optBoolean("no", false);
      JSONObject.doubleToString((-3468));
      JSONObject jSONObject4 = jSONObject3.put("\"P{eOh?1", (-457L));
      HashMap<Long, ByteArrayOutputStream> hashMap0 = new HashMap<Long, ByteArrayOutputStream>();
      JSONObject jSONObject5 = jSONObject4.put("-3468", (Map<?, ?>) hashMap0);
      jSONObject5.put("ab", (-3185L));
      Map<String, Object> map0 = jSONObject5.toMap();
      JSONObject jSONObject6 = new JSONObject(1789);
      jSONObject6.put("java.io.StringWriter@0000000024", map0);
      jSONObject5.optNumber("-3468");
      // Undeclared exception!
      try { 
        jSONObject2.optQuery("org.json.JSONPointer$Builder");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] could not be converted to BigInteger.";
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      JSONObject jSONObject1 = jSONObject0.put(";IO.K5;D=Bm%+\"b", (Object) ";IO.K5;D=Bm%+\"b");
      JSONObject jSONObject2 = jSONObject1.putOpt("] could not be converted to BigInteger.", ";IO.K5;D=Bm%+\"b");
      JSONPointer.builder();
      String string1 = "\"P{eOh?1";
      jSONObject1.optFloat(";IO.K5;D=Bm%+\"b", (float) (-3468));
      JSONObject jSONObject3 = jSONObject2.put("\"P{eOh?1", (-3468));
      jSONObject0.toString((-3468));
      DropMode dropMode0 = DropMode.ON_OR_INSERT_ROWS;
      Class<DropMode> class0 = DropMode.class;
      jSONObject0.optEnum(class0, "no", dropMode0);
      jSONObject1.isNull("] could not be converted to BigInteger.");
      jSONObject1.optBoolean("no", false);
      JSONObject.doubleToString((-3468));
      JSONObject jSONObject4 = jSONObject3.put("\"P{eOh?1", (-457L));
      HashMap<Long, ByteArrayOutputStream> hashMap0 = new HashMap<Long, ByteArrayOutputStream>();
      JSONObject jSONObject5 = jSONObject4.put("-3468", (Map<?, ?>) hashMap0);
      jSONObject5.put("ab", (-3185L));
      Map<String, Object> map0 = jSONObject5.toMap();
      JSONObject jSONObject6 = new JSONObject(1789);
      jSONObject6.put("java.io.StringWriter@0000000024", map0);
      jSONObject5.optNumber("-3468");
      // Undeclared exception!
      try { 
        jSONObject2.optQuery("org.json.JSONPointer$Builder");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      JSONObject jSONObject1 = jSONObject0.put(";IO.K5;D=Bm%+\"b", (Object) ";IO.K5;D=Bm%+\"b");
      jSONObject1.putOpt("] could not be converted to BigInteger.", ";IO.K5;D=Bm%+\"b");
      JSONPointer.builder();
      DropMode dropMode0 = DropMode.ON_OR_INSERT_ROWS;
      Class<DropMode> class0 = DropMode.class;
      jSONObject0.optEnum(class0, "no", dropMode0);
      HashMap<Long, ByteArrayOutputStream> hashMap0 = new HashMap<Long, ByteArrayOutputStream>();
      JSONObject jSONObject2 = new JSONObject(1789);
      boolean boolean0 = jSONObject1.optBoolean(";IO.K5;D=Bm%+\"b");
      assertEquals(2, jSONObject1.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "8";
      JSONObject jSONObject1 = jSONObject0.put("8", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      JSONObject.indent(mockPrintWriter0, 39);
      jSONObject0.toMap();
      jSONObject0.keySet();
      jSONObject1.optString("8");
      jSONObject1.names();
      String string1 = "bb1l0K|D tOc8p";
      String string2 = "u";
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("8", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      JSONObject.indent(mockPrintWriter0, 39);
      jSONObject0.toMap();
      jSONObject0.keySet();
      jSONObject1.optString("8");
      jSONObject1.names();
      String string0 = "bb1l0K|D tOc8p";
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "JSONArray[";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JSONArray[");
      Double double0 = new Double(2922.670429394);
      JSONObject.testValidity(double0);
      String string1 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote((String) null, (Writer) stringWriter0);
      String string0 = JSONObject.quote("(sL'p$EKd'BB");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote("QzED@:/[h=(A_b", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      JSONObject jSONObject0 = new JSONObject(960);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[1] = (byte)19;
      byteArray0[1] = (byte)2;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte)20;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      jSONObject0.optBigInteger("gettoString", bigInteger1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<Short, TrayIcon.MessageType> hashMap0 = new HashMap<Short, TrayIcon.MessageType>();
      Short short0 = new Short((short)3116);
      String string0 = JSONObject.numberToString((byte)69);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote("+>5SsKAd^[", (Writer) stringWriter0);
      JSONObject.wrap(stringWriter0);
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        jSONObject0.getDouble("+>5SsKAd^[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optFloat("|E1y", 0.0F);
      jSONObject0.optString("|E1y");
      JSONObject jSONObject1 = jSONObject0.increment("ab");
      jSONObject1.isEmpty();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|E1y");
      String string0 = jSONObject0.toString(290);
      String string1 = JSONObject.quote("\\");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HashMap<Object, DayOfWeek> hashMap0 = new HashMap<Object, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "<+/3";
      jSONObject0.optBoolean("<+/3", true);
      jSONObject0.names();
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(74);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("", 3941.48F);
      Locale.getISOCountries();
      jSONObject2.getLong("");
      HashMap<CharArrayReader, SocketFlow.Status> hashMap0 = new HashMap<CharArrayReader, SocketFlow.Status>();
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("I*9E<]", (Object) null);
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      Object object0 = JSONObject.stringToValue("4");
      jSONObject2.accumulate("4", object0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONObject1.remove("?d");
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject2.getJSONObject("sK#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append(" [charcter ", " [charcter ");
      jSONObject0.optInt(" [charcter ", 1050);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = JSONObject.quote(" [charcter ");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("|E1y");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONObject0.optLong("|E1y");
      String string0 = JSONObject.quote("|E1y");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      JSONObject jSONObject1 = jSONObject0.put(";IO.K5;D=Bm%+\"b", (Object) ";IO.K5;D=Bm%+\"b");
      JSONObject jSONObject2 = jSONObject1.putOpt("] could not be converted to BigInteger.", ";IO.K5;D=Bm%+\"b");
      JSONPointer.builder();
      int int0 = (-3468);
      jSONObject0.optFloat("no", (float) (-3468));
      JSONObject jSONObject3 = jSONObject0.put("\"P{eOh?1", (-3468));
      jSONObject3.toString((-3468));
      jSONObject0.isNull("\"P{eOh?1");
      jSONObject3.optBoolean("\"P{eOh?1", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONObject.doubleToString((-3468.0F));
      jSONObject3.remove(";IO.K5;D=Bm%+\"b");
      String string0 = "P";
      JSONObject jSONObject4 = jSONObject3.accumulate("P", ";IO.K5;D=Bm%+\"b");
      jSONObject4.optLong("Null key.", (-1L));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[19];
      stringArray0[0] = "java.io.StringWriter@0000000024";
      stringArray0[2] = ";IO.K5;D=Bm%+\"b";
      stringArray0[3] = "] could not be converted to BigInteger.";
      stringArray0[4] = "no";
      JSONObject.stringToValue("-3468");
      Class<JavaFileObject.Kind> class0 = JavaFileObject.Kind.class;
      jSONObject3.optEnum(class0, "org.json.JSONException");
      jSONObject2.has("s@7-:df@X,v6o)2<M^");
      jSONObject3.optLong("] could not be converted to BigInteger.");
      String string1 = "D:]GNpuk{({)T";
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-3468));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      int int0 = (-537);
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, (Object) null, 17, 17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<Window.Type> linkedList0 = new LinkedList<Window.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.optJSONObject(1);
      String[] stringArray0 = new String[1];
      String string0 = "g6(m{fn6q";
      stringArray0[0] = "g6(m{fn6q";
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      JSONObject.doubleToString(Double.NaN);
      // Undeclared exception!
      try { 
        charArrayWriter0.append((CharSequence) "null", 97, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      JSONObject jSONObject1 = jSONObject0.put(";IO.K5;D=Bm%+\"b", (Object) ";IO.K5;D=Bm%+\"b");
      JSONObject jSONObject2 = jSONObject1.putOpt("] could not be converted to BigInteger.", ";IO.K5;D=Bm%+\"b");
      JSONPointer.builder();
      jSONObject1.optFloat(";IO.K5;D=Bm%+\"b", (float) (-3468));
      JSONObject jSONObject3 = jSONObject2.put("\"P{eOh?1", (-3468));
      jSONObject0.toString((-3468));
      DropMode dropMode0 = DropMode.ON_OR_INSERT_ROWS;
      Class<DropMode> class0 = DropMode.class;
      jSONObject0.optEnum(class0, "no", dropMode0);
      jSONObject1.isNull("] could not be converted to BigInteger.");
      jSONObject1.optBoolean("no", false);
      JSONObject.doubleToString((-3468));
      JSONObject jSONObject4 = jSONObject3.put("\"P{eOh?1", (-457L));
      HashMap<Long, ByteArrayOutputStream> hashMap0 = new HashMap<Long, ByteArrayOutputStream>();
      JSONObject jSONObject5 = jSONObject4.put("-3468", (Map<?, ?>) hashMap0);
      jSONObject5.put("ab", (-3185L));
      jSONObject5.toMap();
      jSONObject4.remove("buL2k N!");
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject.stringToValue("\"P{eOh?1");
      jSONObject1.toMap();
      jSONObject5.optJSONObject("");
      jSONObject5.optString(";IO.K5;D=Bm%+\"b", ";IO.K5;D=Bm%+\"b");
      assertEquals(5, jSONObject2.length());
      assertEquals(5, jSONObject5.length());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Character character0 = Character.valueOf('@');
      jSONObject0.append("Z-EHj:a3ikf<8sx#", character0);
      jSONObject0.optLong("Z-EHj:a3ikf<8sx#");
      jSONObject0.optString((String) null);
      Byte byte0 = new Byte((byte)76);
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Short short0 = new Short((byte)76);
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject.stringToValue("(2KS~5k{V){B");
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      JSONObject jSONObject1 = jSONObject0.put(";IO.K5;D=Bm%+\"b", (Object) ";IO.K5;D=Bm%+\"b");
      JSONObject jSONObject2 = jSONObject1.putOpt("] could not be converted to BigInteger.", ";IO.K5;D=Bm%+\"b");
      JSONPointer.builder();
      jSONObject1.optFloat(";IO.K5;D=Bm%+\"b", (float) (-3468));
      JSONObject jSONObject3 = jSONObject2.put("\"P{eOh?1", (-3468));
      jSONObject0.toString((-3468));
      DropMode dropMode0 = DropMode.ON_OR_INSERT_ROWS;
      Class<DropMode> class0 = DropMode.class;
      jSONObject0.optEnum(class0, "no", dropMode0);
      jSONObject1.isNull("] could not be converted to BigInteger.");
      jSONObject1.optBoolean("no", false);
      String string0 = JSONObject.doubleToString((-3468));
      JSONObject jSONObject4 = jSONObject3.put("\"P{eOh?1", (-457L));
      HashMap<Long, ByteArrayOutputStream> hashMap0 = new HashMap<Long, ByteArrayOutputStream>();
      JSONObject jSONObject5 = jSONObject4.put("-3468", (Map<?, ?>) hashMap0);
      jSONObject5.put("ab", (-3185L));
      jSONObject5.toMap();
      jSONObject5.optJSONObject("+:BN@=G]Sw");
      jSONObject3.optLong("C_", (-1L));
      jSONObject4.optBoolean("W*Ypgf.)rj");
      float float0 = new Long((-3185L));
      jSONObject2.optJSONArray("lTdm9l1C+");
      String string1 = jSONObject3.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("|E1y");
      HashMap<BigDecimal, Dialog.ModalityType> hashMap0 = new HashMap<BigDecimal, Dialog.ModalityType>();
      jSONObject1.put("len", (Map<?, ?>) hashMap0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONObject jSONObject2 = new JSONObject();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(57);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('t');
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) "|E1y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter2);
      jSONObject1.write((Writer) mockPrintWriter0);
      assertEquals(104, charArrayWriter2.size());
      assertEquals(104, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("|E1y");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Short short0 = new Short((short) (-576));
      PipedWriter pipedWriter0 = new PipedWriter();
      Object object0 = JSONObject.stringToValue("|E1y");
      assertEquals("|E1y", object0);
      
      boolean boolean0 = jSONObject1.has("|E1y");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append(" [charcter ", " [charcter ");
      long long0 = jSONObject0.optLong(" [charcter ");
      assertEquals(0L, long0);
      
      jSONObject0.optString(" [charcter ");
      Byte byte0 = new Byte((byte) (-9));
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Short short0 = new Short((short) (-1301));
      Short short1 = new Short((short)10);
      JSONObject.numberToString(short0);
      Class<JavaFileObject.Kind> class0 = JavaFileObject.Kind.class;
      jSONObject1.optEnum(class0, "nex");
      boolean boolean0 = jSONObject1.has("DE#Kt8BLu.;*z2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3608);
      jSONObject0.optNumber("longValueExact");
      Object object0 = JSONObject.NULL;
      BigDecimal bigDecimal0 = new BigDecimal((double) 3608);
      JSONObject jSONObject1 = jSONObject0.put("] is not a valid number.", (Object) bigDecimal0);
      JSONObject.getNames((Object) "longValueExact");
      jSONObject1.optBigDecimal("] is not a valid number.", bigDecimal0);
      Short short0 = new Short((short)3262);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.toJSONArray(jSONArray0);
      JSONObject.numberToString(short0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject2 = new JSONObject(bigInteger0);
      long long0 = jSONObject0.optLong("java.lang.Short@0000000006", (long) 3608);
      assertEquals(3608L, long0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames((Object) jSONArray0);
      StringWriter stringWriter0 = new StringWriter(107);
      JSONObject.stringToValue("\n");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.optLong("g*./", (long) 107);
      try { 
        jSONObject0.getBigDecimal("g*./");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)98;
      byteArray0[2] = (byte)98;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      byteArray0[4] = (byte)47;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HashMap<Byte, StandardProtocolFamily> hashMap0 = new HashMap<Byte, StandardProtocolFamily>();
      double double0 = jSONObject0.optDouble((String) null, 126.5185);
      assertEquals(126.5185, double0, 0.01);
      
      double double1 = jSONObject0.optDouble("isintValue");
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      JSONPointer.builder();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('4');
      JSONObject.quote(";IO.K5;D=Bm%+\"b", (Writer) stringWriter1);
      jSONObject0.write((Writer) stringWriter1, (-537), 621);
      String string0 = JSONObject.quote("m");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      jSONObject0.putOnce(":ByJ4@GlLfsjz%", ":ByJ4@GlLfsjz%");
      StringWriter stringWriter0 = new StringWriter(21);
      JSONObject.stringToValue("l");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Short short0 = new Short((short)350);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject.numberToString(short0);
      JSONObject jSONObject1 = new JSONObject(short0);
      jSONObject0.optLong("k+kVOE0:@GrOlR", (-3468L));
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-11);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONObject0.optString("^JGe@#,FH<_XB>>G@");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Byte byte0 = new Byte((byte) (-11));
      String string0 = null;
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put(Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Integer integer0 = new Integer(1360);
      JSONObject jSONObject0 = new JSONObject(integer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONObject0.optLong("in");
      String string0 = jSONObject0.optString(" line ");
      Byte byte0 = new Byte((byte) (-11));
      JSONObject jSONObject1 = jSONObject0.accumulate("Unable to increment [", (Object) null);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.optBoolean("");
      jSONArray0.put(0.0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONObject1.optBigDecimal("getDeclaringClass", bigDecimal0);
      String string1 = JSONObject.quote("\n");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      JSONObject jSONObject1 = jSONObject0.put(";IO.K5;D=Bm%+\"b", (Object) ";IO.K5;D=Bm%+\"b");
      jSONObject1.putOpt("] could not be converted to BigInteger.", ";IO.K5;D=Bm%+\"b");
      JSONPointer.builder();
      jSONObject0.optFloat("no", (float) (-3468));
      JSONObject jSONObject2 = jSONObject0.put("\"P{eOh?1", (-3468));
      jSONObject2.toString((-3468));
      jSONObject0.isNull("\"P{eOh?1");
      jSONObject2.optBoolean("\"P{eOh?1", false);
      String string0 = JSONObject.doubleToString((-3468.0F));
      assertEquals("-3468", string0);
      
      jSONObject2.remove(";IO.K5;D=Bm%+\"b");
      JSONObject jSONObject3 = jSONObject2.accumulate("P", ";IO.K5;D=Bm%+\"b");
      long long0 = jSONObject3.optLong("Null key.", (-1L));
      assertEquals((-1L), long0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String[] stringArray0 = new String[19];
      stringArray0[0] = "java.io.StringWriter@0000000024";
      stringArray0[1] = "P";
      stringArray0[2] = ";IO.K5;D=Bm%+\"b";
      stringArray0[3] = "] could not be converted to BigInteger.";
      stringArray0[4] = "no";
      Object object0 = JSONObject.stringToValue("-3468");
      assertEquals((-3468), object0);
      
      String string1 = jSONObject0.optString("no");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("I*9E<]", (Object) null);
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      Object object0 = JSONObject.stringToValue("4");
      JSONObject jSONObject3 = jSONObject2.accumulate("4", object0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "I*9E<]");
      jSONObject1.remove("?d");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject4 = new JSONObject(jSONObject3);
      jSONObject1.optLong("U_JD7S?1QY6S");
      jSONObject4.optJSONArray("c0Wwp<@5n)zrr|!#_");
      assertEquals(2, jSONObject2.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/mitchell/generation-scripts/projects/json");
      jSONObject0.increment("|E1y");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Object object0 = JSONObject.stringToValue("9(Fzhxn 'y\\ybJWb");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Short short0 = new Short((short)101);
      String string0 = JSONObject.numberToString(short0);
      assertFalse(string0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("|E1y");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      try { 
        jSONObject0.getBoolean("|E1y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-11);
      BigInteger bigInteger1 = BigInteger.TEN;
      JSONObject.wrap(bigInteger1);
      try { 
        jSONObject0.getBoolean("&Ss!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "k(>i:15SFJ");
      JSONObject.stringToValue("k(>i:15SFJ");
      HashMap<Thread.State, BufferedReader> hashMap0 = new HashMap<Thread.State, BufferedReader>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optFloat("isclone", (-1.0F));
      jSONObject0.optString("value [%s] is not an array or object therefore its key %s cannot be resolved");
      jSONObject0.increment("k(>i:15SFJ");
      jSONObject0.isEmpty();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "isclone");
      jSONObject0.toString(290);
      jSONObject0.put("java.io.StringWriter@0000000010", (-1.0F));
      Object object0 = null;
      Thread.State thread_State0 = Thread.State.TIMED_WAITING;
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("gS;#j]jFi:}(!7g8");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
      
      StringWriter stringWriter0 = new StringWriter(107);
      Object object0 = JSONObject.stringToValue("\n");
      assertEquals("\n", object0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Short short0 = new Short((short)350);
      JSONObject.numberToString(short0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      long long0 = jSONObject0.optLong("g*./", (long) 107);
      assertEquals(107L, long0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/mitchell/generation-scripts/projects/json");
      JSONObject jSONObject0 = new JSONObject(evoSuiteFile0);
      Short short0 = new Short((short)14);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Set<String> set0 = jSONObject0.keySet();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      JSONObject jSONObject1 = jSONObject0.put(";IO.K5;D=Bm%+\"b", (Object) ";IO.K5;D=Bm%+\"b");
      JSONObject jSONObject2 = jSONObject1.putOpt("] could not be converted to BigInteger.", ";IO.K5;D=Bm%+\"b");
      JSONPointer.builder();
      jSONObject1.optFloat(";IO.K5;D=Bm%+\"b", (float) (-3468));
      JSONObject jSONObject3 = jSONObject2.put("\"P{eOh?1", (-3468));
      jSONObject0.toString((-3468));
      DropMode dropMode0 = DropMode.ON_OR_INSERT_ROWS;
      Class<DropMode> class0 = DropMode.class;
      jSONObject0.optEnum(class0, "no", dropMode0);
      jSONObject1.isNull("] could not be converted to BigInteger.");
      jSONObject1.optBoolean("no", false);
      JSONObject.doubleToString((-3468));
      JSONObject jSONObject4 = jSONObject3.put("\"P{eOh?1", (-457L));
      HashMap<Long, ByteArrayOutputStream> hashMap0 = new HashMap<Long, ByteArrayOutputStream>();
      JSONObject jSONObject5 = jSONObject4.put("-3468", (Map<?, ?>) hashMap0);
      jSONObject5.put("ab", (-3185L));
      jSONObject5.toMap();
      jSONObject5.optJSONObject("+:BN@=G]Sw");
      jSONObject3.optLong("", (-1L));
      jSONObject4.optBoolean("W*+pYf.)rj");
      jSONObject3.optFloat("no", (float) (-457L));
      jSONObject2.optJSONArray("lTdm9l1C+");
      assertEquals(5, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1984);
      JSONObject.getNames((Object) null);
      StringWriter stringWriter0 = new StringWriter(14);
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject.stringToValue("] is not an enum of type ");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      MockFile mockFile0 = new MockFile("getnot", "9\"e|En{Zi");
      String string0 = "\"ANb9U`T01#iH>HeS";
      MockFile mockFile1 = new MockFile(mockFile0, "\"ANb9U`T01#iH>HeS");
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      jSONObject0.optNumber("longValueExact");
      Object object0 = JSONObject.NULL;
      jSONObject0.put("4upCyhwMD>y]7X", object0);
      JSONObject.getNames((Object) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      Object object1 = JSONObject.stringToValue("C");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Short short0 = new Short((short)92);
      String string0 = JSONObject.numberToString(bigInteger0);
      assertFalse(string0.equals((Object)object1));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale locale0 = Locale.ITALIAN;
      HashMap<BufferedOutputStream, Character.UnicodeScript> hashMap0 = new HashMap<BufferedOutputStream, Character.UnicodeScript>();
      JSONObject jSONObject1 = new JSONObject();
      MockFile mockFile0 = new MockFile("Ez/Z1Utu3Gn/?%Y2", "fK$L/!9jX");
      MockFile mockFile1 = new MockFile(mockFile0, "6R^1|6hbrsz");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject.quote("9T=Q)}SK/SZF7");
      jSONObject1.put("9T=Q)}SK/SZF7", true);
      boolean boolean0 = JSONObject.isDecimalNotation("fK$L/!9jX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] could not be converted to BigInteger.";
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      jSONObject0.put("IO.K5;D=Bm%+\"b", (Object) null);
      JSONObject.getNames((Object) "] could not be converted to BigInteger.");
      StringWriter stringWriter0 = new StringWriter(107);
      PipedWriter pipedWriter0 = new PipedWriter();
      String string1 = "\\n";
      JSONObject.stringToValue("getnot");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1);
      Locale locale0 = Locale.GERMAN;
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("shortValueExact", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name shortValueExact, locale de
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/mitchell/generation-scripts/projects/json");
      JSONObject jSONObject1 = jSONObject0.increment("|E1y");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("] could not be converted to BigInteger.");
      Long long0 = new Long((-1L));
      JSONObject jSONObject2 = jSONObject1.put("toString", 0L);
      HashMap<Long, ByteArrayOutputStream> hashMap0 = new HashMap<Long, ByteArrayOutputStream>();
      JSONObject jSONObject3 = jSONObject1.put(".", (Map<?, ?>) hashMap0);
      jSONObject2.toMap();
      jSONObject1.optJSONObject("]LB]-Y");
      jSONObject2.optLong("]LB]-Y", 0L);
      boolean boolean0 = jSONObject3.optBoolean("] could not be converted to BigInteger.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append(" [charcter ", " [charcter ");
      JSONObject.wrap(jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        jSONObject0.getDouble(" [charcter ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000012] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2561, true);
      StringWriter stringWriter0 = new StringWriter(92);
      PipedWriter pipedWriter0 = new PipedWriter();
      HashMap<DataOutputStream, Dialog.ModalityType> hashMap0 = new HashMap<DataOutputStream, Dialog.ModalityType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("iAY", (-1.0));
      Object object0 = jSONObject0.get("iAY");
      assertEquals((-1.0), object0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)98;
      jSONObject0.write((Writer) stringWriter0, (-908), (-71));
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)60;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONObject1.optBigDecimal((String) null, bigDecimal0);
      Writer writer0 = jSONObject1.write((Writer) stringWriter0, 1789, (int) (byte) (-57));
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      PipedWriter pipedWriter0 = new PipedWriter();
      Short.valueOf((short)502);
      Long long0 = new Long((short)502);
      JSONObject jSONObject2 = jSONObject1.put("8y:!(#?Cm+]Q,&lA", 0L);
      jSONObject2.toMap();
      jSONObject2.optNumber("[");
      jSONObject0.optQuery("#/");
      jSONObject1.keys();
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = JSONObject.quote("kyqD}?boz4f:G", (Writer) stringWriter0);
      jSONObject0.write(writer0, 3, (-537));
      jSONObject0.put("to", (float) (-537));
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.getDouble("istoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(48);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.put("'x;6ki<UYRN", 1653.0F);
      MockFile mockFile0 = new MockFile("", "'x;6ki<UYRN");
      JSONObject.getNames(jSONObject0);
      String string0 = "DWh";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "DWh", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)98;
      byteArray0[2] = (byte)98;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      jSONObject0.optBigDecimal((String) null, bigDecimal0);
      byteArray0[4] = (byte)47;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(mockFileInputStream0, charset0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(inputStreamReader0, 1291);
      JSONObject jSONObject1 = jSONObject0.append("", lineNumberReader0);
      HashMap<Byte, StandardProtocolFamily> hashMap0 = new HashMap<Byte, StandardProtocolFamily>();
      // Undeclared exception!
      try { 
        jSONObject1.put((String) null, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/mitchell/generation-scripts/projects/json");
      JSONObject jSONObject0 = new JSONObject(evoSuiteFile0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Rb!%\"Xj1E w";
      stringArray0[1] = "Duplicate key \"";
      stringArray0[2] = "kH$hFn+";
      stringArray0[3] = "|7#vfzMo`8]f0+N";
      stringArray0[4] = "@^kYdnWGoXU=F$[J";
      stringArray0[5] = "2_V*5?to";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.increment("m>tULp7F$l}w");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("|7#vfzMo`8]f0+N");
      Long long0 = new Long((-1L));
      JSONObject jSONObject2 = jSONObject1.put("\"~u2@f7/B.G;;", 0L);
      jSONObject1.toMap();
      jSONObject2.optJSONObject("\"~u2@f7/B.G;;");
      long long1 = jSONObject0.optLong("A JSONObject text must begin with '{'", (-1L));
      assertEquals((-1L), long1);
      
      boolean boolean0 = jSONObject2.optBoolean("org.json.JSONObject");
      assertFalse(boolean0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/mitchell/generation-scripts/projects/json");
      jSONObject0.increment("le");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String string0 = "L9^_xh_P*I&sto<@5%I";
      MockFileWriter mockFileWriter0 = new MockFileWriter("L9^_xh_P*I&sto<@5%I");
      Byte byte0 = new Byte((byte)87);
      JSONObject.wrap(byte0);
      try { 
        jSONObject0.getJSONObject("] not a string.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000014] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      byte[] byteArray0 = new byte[8];
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.optInt("P0", 707);
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      JSONObject jSONObject2 = jSONObject0.putOnce("*UYD=+Z0$|<QLN", dataInputStream0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "P0";
      stringArray0[1] = "*UYD=+Z0$|<QLN";
      stringArray0[2] = "*UYD=+Z0$|<QLN";
      stringArray0[3] = "P0";
      stringArray0[4] = "*UYD=+Z0$|<QLN";
      stringArray0[5] = "*UYD=+Z0$|<QLN";
      stringArray0[6] = "*UYD=+Z0$|<QLN";
      stringArray0[7] = "*UYD=+Z0$|<QLN";
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray0);
      jSONObject0.put("*UYD=+Z0$|<QLN", false);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append(" [charcter ", " [charcter ");
      String[] stringArray0 = new String[3];
      stringArray0[0] = " [charcter ";
      stringArray0[1] = " [charcter ";
      stringArray0[2] = " [charcter ";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 3941.48F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      JSONObject jSONObject1 = jSONObject0.put(";IO.K5;D=Bm%+\"b", (Object) ";IO.K5;D=Bm%+\"b");
      JSONObject jSONObject2 = jSONObject1.putOpt("] could not be converted to BigInteger.", ";IO.K5;D=Bm%+\"b");
      JSONPointer.builder();
      jSONObject1.optFloat(";IO.K5;D=Bm%+\"b", (float) (-3468));
      jSONObject2.put("\"P{eOh?1", (-3468));
      jSONObject0.toString((-3468));
      DropMode dropMode0 = DropMode.ON_OR_INSERT_ROWS;
      Class<DropMode> class0 = DropMode.class;
      jSONObject0.optEnum(class0, "no", dropMode0);
      jSONObject1.isNull("] could not be converted to BigInteger.");
      jSONObject1.optBoolean("no", false);
      JSONObject.doubleToString((-3468));
      jSONObject1.remove("6$,g1Gf'4C<Lg");
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1511));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      JSONObject jSONObject1 = jSONObject0.put(";IO.K5;D=Bm%+\"b", (Object) ";IO.K5;D=Bm%+\"b");
      jSONObject1.putOpt("] could not be converted to BigInteger.", ";IO.K5;D=Bm%+\"b");
      JSONPointer.builder();
      String string0 = "\"P{eOh?1";
      jSONObject1.optFloat(";IO.K5;D=Bm%+\"b", (float) (-3468));
      Long long0 = new Long((-3468));
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((-3468));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -3468
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      JSONPointer.builder();
      jSONObject0.optFloat("no", (-2614.5F));
      JSONObject jSONObject1 = jSONObject0.put("\"P{eOh?1", (-3468));
      jSONObject1.toString((-3468));
      Class<DropMode> class0 = DropMode.class;
      DropMode dropMode0 = DropMode.ON_OR_INSERT_ROWS;
      jSONObject0.optEnum(class0, "\"P{eOh?1", dropMode0);
      jSONObject0.isNull("\"P{eOh?1");
      jSONObject1.optBoolean("\"P{eOh?1", false);
      JSONObject.doubleToString((-2614.5F));
      jSONObject1.remove(";IO.K5;D=Bm%+\"b");
      JSONObject jSONObject2 = jSONObject1.accumulate("P", ";IO.K5;D=Bm%+\"b");
      Class<GroupLayout.Alignment> class1 = GroupLayout.Alignment.class;
      GroupLayout.Alignment groupLayout_Alignment0 = GroupLayout.Alignment.CENTER;
      jSONObject1.optEnum(class1, "-2614.5", groupLayout_Alignment0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      JSONObject jSONObject3 = jSONObject1.append(";IO.K5;D=Bm%+\"b", mockPrintStream0);
      mockPrintStream0.checkError();
      String[] stringArray0 = new String[19];
      jSONObject2.increment("-2614.5");
      stringArray0[0] = "java.io.StringWriter@0000000009";
      stringArray0[1] = "P";
      stringArray0[2] = ";IO.K5;D=Bm%+\"b";
      stringArray0[3] = "] could not be converted to BigInteger.";
      stringArray0[4] = "no";
      JSONObject jSONObject4 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.toMap();
      jSONObject3.getJSONArray(";IO.K5;D=Bm%+\"b");
      try { 
        jSONObject3.put("no", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale locale0 = Locale.ITALIAN;
      HashMap<BufferedOutputStream, Character.UnicodeScript> hashMap0 = new HashMap<BufferedOutputStream, Character.UnicodeScript>();
      JSONObject jSONObject1 = jSONObject0.append("9T=Q)}SK/SZF7", locale0);
      jSONObject0.put("abs", (Map<?, ?>) hashMap0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)122;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject1.similar(bigInteger0);
      jSONObject0.optLong("9T=Q)}SK/SZF7");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "9T=Q)}SK/SZF7";
      stringArray0[1] = "abs";
      JSONObject jSONObject2 = new JSONObject("abs", stringArray0);
      try { 
        jSONObject2.getString("] not a string.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000017] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append(" [charcter ", " [charcter ");
      jSONObject0.optInt(" [charcter ", 1050);
      jSONObject0.optLong(" [charcter ");
      try { 
        jSONObject1.getLong(" _v'Nt&Q)(\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append(" [charcter ", " [charcter ");
      long long0 = jSONObject0.optLong(" [charcter ");
      assertEquals(0L, long0);
      
      String string0 = jSONObject0.optString((String) null);
      assertNotNull(string0);
      
      Byte byte0 = new Byte((byte) (-9));
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Short short0 = new Short((short) (-1301));
      PipedWriter pipedWriter0 = new PipedWriter();
      Short short1 = new Short((short)34);
      String string1 = JSONObject.numberToString(short1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = new JSONArray();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      jSONObject0.append("NJu", pipedOutputStream0);
      mockPrintStream0.checkError();
      Short short0 = new Short((short) (-1));
      mockPrintStream0.printf("NJu", (Object[]) null);
      Short short1 = new Short((short) (-1));
      JSONObject.numberToString(short1);
      JSONObject jSONObject1 = jSONObject0.accumulate("ne", mockPrintStream0);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)98;
      byteArray0[2] = (byte)98;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      jSONObject0.optBigDecimal((String) null, bigDecimal0);
      byteArray0[4] = (byte)47;
      byteArray0[4] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONObject jSONObject1 = new JSONObject();
      JSONPointer jSONPointer0 = new JSONPointer("");
      JSONPointer.builder();
      JSONPointer.builder();
      jSONPointer0.toURIFragment();
      jSONObject1.query("");
      JSONObject.testValidity(bigDecimal0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      jSONObject0.optBigDecimal("~d!fQyUpB?H%l*Du", bigDecimal1);
      try { 
        jSONObject1.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/mitchell/generation-scripts/projects/json");
      JSONObject jSONObject1 = jSONObject0.increment("|E1y");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("A JSONObect 9xt must ed with '}'");
      Long long0 = new Long((-1L));
      JSONObject jSONObject2 = jSONObject1.put(".", 2685L);
      jSONObject0.toMap();
      jSONObject1.optJSONObject("");
      jSONObject0.optLong("A JSONObect 9xt must ed with '}'", 0L);
      boolean boolean0 = jSONObject2.optBoolean(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject1 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      String string0 = null;
      // Undeclared exception!
      try { 
        jSONObject1.append((String) null, "NJu");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      JSONObject jSONObject1 = jSONObject0.put(";IO.K5;D=Bm%+\"b", (Object) ";IO.K5;D=Bm%+\"b");
      jSONObject1.putOpt("] could not be converted to BigInteger.", ";IO.K5;D=Bm%+\"b");
      JSONObject jSONObject2 = new JSONObject();
      MockFile mockFile0 = new MockFile("", "9T=Q)}SK/SZF7");
      MockFile mockFile1 = new MockFile(mockFile0, "getnextProbablePrime");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = JSONObject.quote("] could not be converted to BigInteger.");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      JSONObject jSONObject1 = jSONObject0.put(";IO.K5;D=Bm%+\"b", (Object) ";IO.K5;D=Bm%+\"b");
      jSONObject1.putOpt("] could not be converted to BigInteger.", ";IO.K5;D=Bm%+\"b");
      JSONPointer.builder();
      jSONObject0.optFloat("no", (-2614.5F));
      JSONObject jSONObject2 = jSONObject0.put("\"P{eOh?1", (-3468));
      jSONObject2.toString((-3468));
      Class<DropMode> class0 = DropMode.class;
      DropMode dropMode0 = DropMode.ON_OR_INSERT_ROWS;
      jSONObject0.optEnum(class0, "\"P{eOh?1", dropMode0);
      jSONObject0.isNull("\"P{eOh?1");
      jSONObject2.optBoolean("\"P{eOh?1", false);
      JSONObject.doubleToString((-2614.5F));
      jSONObject2.remove(";IO.K5;D=Bm%+\"b");
      jSONObject2.accumulate("P", ";IO.K5;D=Bm%+\"b");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      jSONObject2.append(";IO.K5;D=Bm%+\"b", mockPrintStream0);
      assertEquals(4, jSONObject2.length());
      
      mockPrintStream0.checkError();
      String[] stringArray0 = new String[19];
      stringArray0[0] = "java.io.StringWriter@0000000024";
      stringArray0[1] = "P";
      stringArray0[2] = ";IO.K5;D=Bm%+\"b";
      stringArray0[3] = "] could not be converted to BigInteger.";
      stringArray0[4] = "no";
      Object object0 = JSONObject.stringToValue("-2614.5");
      assertEquals((-2614.5), object0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-11);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONObject0.optLong("abs");
      String string0 = jSONObject0.optString("in");
      Byte byte0 = new Byte((byte) (-11));
      JSONObject jSONObject1 = jSONObject0.accumulate("", byte0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0.0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONObject1.optBigDecimal("", bigDecimal0);
      String string1 = JSONObject.quote("abs");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      hashMap0.put("X8O\":Kf", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal((-3590.752457749));
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optBigDecimal((String) null, bigDecimal0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)47;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONObject jSONObject2 = new JSONObject();
      JSONPointer jSONPointer0 = new JSONPointer("");
      jSONPointer0.toURIFragment();
      jSONObject2.optQuery(jSONPointer0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-11);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONObject0.optLong("abs");
      jSONObject0.optString("in");
      Byte byte0 = new Byte((byte) (-11));
      JSONObject jSONObject1 = jSONObject0.accumulate("", byte0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0.0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONObject1.optBigDecimal("", bigDecimal0);
      try { 
        jSONObject0.getLong("gettrim");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      HashMap<BufferedOutputStream, Character.UnicodeScript> hashMap0 = new HashMap<BufferedOutputStream, Character.UnicodeScript>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append(" [charcter ", hashMap0);
      jSONObject0.put("Expectd a ':' after a ke", (Map<?, ?>) hashMap0);
      jSONObject0.optString("Expectd a ':' after a ke");
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("ha");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<CharArrayReader> linkedList0 = new LinkedList<CharArrayReader>();
      LinkedList<CryptoPrimitive> linkedList1 = new LinkedList<CryptoPrimitive>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList1);
      Short short0 = new Short((short)116);
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject.stringToValue(" [charcter ");
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      JSONPointer.builder();
      jSONObject0.optFloat("no", (-2614.5F));
      JSONObject jSONObject1 = jSONObject0.put("\"P{eOh?1", (-3468));
      jSONObject1.toString((-3468));
      jSONObject0.isNull("\"P{eOh?1");
      JSONObject.doubleToString((-2614.5F));
      jSONObject1.remove(";IO.K5;D=Bm%+\"b");
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject.stringToValue("-2614.5");
      Map<String, Object> map0 = jSONObject1.toMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      JSONPointer.builder();
      float float0 = jSONObject0.optFloat("no", (-2614.5F));
      assertEquals((-2614.5F), float0, 0.01F);
      
      JSONObject jSONObject1 = jSONObject0.put("\"P{eOh?1", (-3468));
      jSONObject1.toString((-3468));
      Class<DropMode> class0 = DropMode.class;
      DropMode dropMode0 = DropMode.ON_OR_INSERT_ROWS;
      jSONObject0.optEnum(class0, "\"P{eOh?1", dropMode0);
      boolean boolean0 = jSONObject0.isNull("\"P{eOh?1");
      boolean boolean1 = jSONObject1.optBoolean("\"P{eOh?1", false);
      assertTrue(boolean1 == boolean0);
      
      String string0 = JSONObject.doubleToString((-2614.5F));
      assertEquals("-2614.5", string0);
      
      jSONObject1.remove(";IO.K5;D=Bm%+\"b");
      jSONObject1.accumulate("P", ";IO.K5;D=Bm%+\"b");
      Class<GroupLayout.Alignment> class1 = GroupLayout.Alignment.class;
      GroupLayout.Alignment groupLayout_Alignment0 = GroupLayout.Alignment.CENTER;
      jSONObject1.optEnum(class1, "-2614.5", groupLayout_Alignment0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      jSONObject1.append(";IO.K5;D=Bm%+\"b", mockPrintStream0);
      mockPrintStream0.checkError();
      String[] stringArray0 = new String[19];
      stringArray0[0] = "java.io.StringWriter@0000000009";
      stringArray0[1] = "P";
      stringArray0[2] = ";IO.K5;D=Bm%+\"b";
      stringArray0[3] = "] could not be converted to BigInteger.";
      stringArray0[4] = "no";
      Object object0 = JSONObject.stringToValue("-2614.5");
      assertEquals((-2614.5), object0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toMap();
      jSONObject1.optNumber("o4FRNCZ6E?*R", (Number) null);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write((Writer) stringWriter0);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(5585);
      String[] stringArray0 = new String[6];
      String string0 = "] is not a JSONObject.";
      stringArray0[0] = "] is not a JSONObject.";
      stringArray0[1] = "";
      stringArray0[2] = "get";
      stringArray0[3] = "";
      stringArray0[4] = "Illegal escape.";
      stringArray0[5] = "2RT$[RC*8`Z#=AVp2";
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      HashMap<BufferedOutputStream, Character.UnicodeScript> hashMap0 = new HashMap<BufferedOutputStream, Character.UnicodeScript>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append(" [charcter ", hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('`');
      jSONObject0.write((Writer) stringWriter1, 92, 92);
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        jSONObject0.getDouble(" [charcter ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000017] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      Boolean boolean0 = new Boolean("");
      String string0 = JSONObject.quote((String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(427);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONArray0.optJSONObject(427);
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optBoolean("");
      jSONObject0.toMap();
      jSONObject0.opt((String) null);
      String string0 = JSONObject.quote((String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      JSONPointer.builder();
      jSONObject0.optFloat("no", (-2614.5F));
      JSONObject jSONObject1 = jSONObject0.put("\"P{eOh?1", (-3468));
      jSONObject1.put("no", 1.0);
      jSONObject1.toString((-3468));
      Class<DropMode> class0 = DropMode.class;
      DropMode dropMode0 = DropMode.ON_OR_INSERT_ROWS;
      jSONObject0.optEnum(class0, "\"P{eOh?1", dropMode0);
      jSONObject0.isNull("\"P{eOh?1");
      MockFile mockFile0 = new MockFile("no", "5");
      MockFile mockFile1 = new MockFile(mockFile0, "5");
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      PipedWriter pipedWriter0 = new PipedWriter();
      Short.valueOf((short) (byte) (-11));
      Long long0 = new Long(3401L);
      String string0 = "8y:!(#?Cm+]Q,&lA";
      JSONObject jSONObject1 = jSONObject0.put("8y:!(#?Cm+]Q,&lA", (-1L));
      // Undeclared exception!
      try { 
        jSONObject1.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[6];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[0] = "] is not a JSONObject.";
      String string0 = "Duplicate key \"";
      JSONObject jSONObject0 = new JSONObject("Duplicate key \"", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("]", (double) 0L);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Stepping back two steps is not supported");
      LinkedList<DropMode> linkedList0 = new LinkedList<DropMode>();
      jSONObject0.put("]", (Collection<?>) linkedList0);
      mockPrintStream0.checkError();
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject2.toMap();
      try { 
        jSONObject0.getJSONArray("length");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000020] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-11);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-11);
      PipedWriter pipedWriter0 = new PipedWriter();
      Short.valueOf((short) (byte) (-11));
      Long long0 = new Long(3401L);
      JSONObject jSONObject1 = jSONObject0.put("8y:!(#?Cm+]Q,&lA", (-1L));
      jSONObject1.toMap();
      jSONObject0.optNumber("8y:!(#?Cm+]Q,&lA");
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("8y:!(#?Cm+]Q,&lA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("|E1y");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Short short0 = new Short((short) (-576));
      PipedWriter pipedWriter0 = new PipedWriter();
      Number number0 = jSONObject1.optNumber("|E1y", (Number) short0);
      assertEquals(1, number0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote("\"", (Writer) stringWriter0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append((CharSequence) "\"");
      StringWriter stringWriter1 = new StringWriter(69);
      PipedWriter pipedWriter0 = new PipedWriter();
      Class<Component.BaselineResizeBehavior> class0 = Component.BaselineResizeBehavior.class;
      try { 
        jSONObject0.getEnum(class0, "\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale locale0 = Locale.ITALIAN;
      HashMap<BufferedOutputStream, Character.UnicodeScript> hashMap0 = new HashMap<BufferedOutputStream, Character.UnicodeScript>();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject0.append("9T=Q)}SK/SZF7", locale0);
      jSONObject1.put("abs", (Map<?, ?>) hashMap0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)122;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject2.similar(bigInteger0);
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      try { 
        jSONObject1.getEnum(class0, "9T=Q)}SK/SZF7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000014] is not an enum of type java.io.StringWriter@0000000015.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "] is not a JSONObject.";
      String string0 = "Duplicate key \"";
      double double0 = (-2233.6972966496023);
      JSONObject jSONObject0 = new JSONObject("Duplicate key \"", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("]", (double) 0L);
      LinkedList<StandardProtocolFamily> linkedList0 = new LinkedList<StandardProtocolFamily>();
      // Undeclared exception!
      try { 
        jSONObject1.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      jSONObject0.put(".+f7[G/Xk@OxI", (Collection<?>) linkedList0);
      jSONObject0.append("',o:m:h.C", "',o:m:h.C");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedWriter pipedWriter0 = new PipedWriter();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      byte[] byteArray0 = new byte[8];
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.optInt("P0", 707);
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      jSONObject0.putOnce("*UYD=+Z0$|<QLN", dataInputStream0);
      BigInteger bigInteger1 = BigInteger.TEN;
      String string0 = JSONObject.numberToString(bigInteger1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.isDecimalNotation("Null key.");
      JSONObject.getNames((Object) jSONArray0);
      StringWriter stringWriter0 = new StringWriter(107);
      PipedWriter pipedWriter0 = new PipedWriter();
      Double double0 = new Double(Double.NaN);
      int int0 = (-619);
      try { 
        JSONObject.writeValue(stringWriter0, double0, 706, (-619));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject.isDecimalNotation("3Y");
      MockFile mockFile0 = new MockFile("Ez/Z1Utu3Gn/?%Y2", "g)cz/ws/gbOHwCH[Pab");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile1);
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = JSONObject.quote("g)cz/ws/gbOHwCH[Pab");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter(5585);
      Integer integer0 = new Integer(5585);
      Writer writer0 = JSONObject.writeValue(stringWriter0, integer0, 5585, (-1213));
      JSONObject.numberToString(integer0);
      Writer writer1 = JSONObject.writeValue(writer0, stringWriter0, 5585, (-1213));
      assertSame(stringWriter0, writer1);
      
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      float float0 = jSONObject0.optFloat("1b:");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)98;
      byteArray0[2] = (byte) (-56);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      jSONObject0.optBigDecimal((String) null, bigDecimal0);
      byteArray0[3] = (byte)47;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[4] = (byte)95;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONObject0.optQuery("");
      JSONPointer jSONPointer0 = new JSONPointer("");
      jSONPointer0.toURIFragment();
      jSONObject0.optQuery(jSONPointer0);
      JSONObject jSONObject1 = jSONObject0.put("] not a string.", false);
      float float0 = jSONObject1.optFloat("a JSON pointer should start with '/' or '#/'");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(427);
      byte byte0 = (byte) (-56);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      jSONObject0.optBigDecimal((String) null, bigDecimal0);
      byte byte1 = (byte)95;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)47;
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (double) (byte)68);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-11);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)0;
      String string0 = "in";
      String string1 = "abs";
      jSONObject0.optLong("abs");
      JSONObject jSONObject1 = jSONObject0.increment("getgetBytes");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject.wrap("getgetBytes");
      try { 
        jSONObject1.getJSONObject("in");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal((double) 3639);
      String string0 = "e:;]";
      jSONObject0.optBigDecimal("e:;]", bigDecimal0);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)95;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONObject.wrap(bigDecimal0);
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames((Object) jSONArray0);
      Short.valueOf((short) (-546));
      Long long0 = new Long((short) (-546));
      JSONObject jSONObject0 = new JSONObject(830);
      JSONObject.numberToString(long0);
      Class<JavaFileObject.Kind> class0 = JavaFileObject.Kind.class;
      jSONObject0.optEnum(class0, "nex");
      jSONObject0.has("java.lang.Long@0000000003");
      JSONObject.testValidity((Object) null);
      try { 
        jSONObject0.getString("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("I*9E<]", (Object) null);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
      assertTrue(jSONObject0.isEmpty());
      
      Locale.getISOLanguages();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONObject jSONObject2 = new JSONObject((Object) "I*9E<]");
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.length();
      String string0 = "islongValue";
      int int0 = (-4177974);
      try { 
        jSONArray0.getJSONObject((-4177974));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-4177974] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-293));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -293
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-11);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)0;
      jSONObject0.optLong("abs");
      jSONObject0.optString("in");
      Byte byte0 = new Byte((byte) (-11));
      jSONObject0.accumulate("", byte0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0.0);
      Class<GroupLayout.Alignment> class0 = GroupLayout.Alignment.class;
      GroupLayout.Alignment groupLayout_Alignment0 = GroupLayout.Alignment.BASELINE;
      jSONObject0.optEnum(class0, "in", groupLayout_Alignment0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Short short0 = new Short((short)28);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      JSONObject.valueToString(byteArrayOutputStream1);
      jSONObject0.getNumber("");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/mitchell/generation-scripts/projects/json");
      jSONObject0.increment("|E1y");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("|E1y");
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(mockFileWriter0);
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Short short0 = new Short((short)590);
      JSONObject.valueToString((Object) null);
      Integer integer0 = (Integer)jSONObject0.getNumber("|E1y");
      assertEquals(1, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONObject0.toString();
      jSONObject0.length();
      try { 
        jSONObject0.getFloat("islongValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      // Undeclared exception!
      try { 
        jSONObject1.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0);
      jSONObject0.remove("");
      Short short0 = new Short((short) (-576));
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject.stringToValue("");
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-11);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)0;
      jSONObject0.optLong("abs");
      String string0 = jSONObject0.optString("in");
      Byte byte0 = new Byte((byte) (-11));
      jSONObject0.accumulate("", byte0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0.0);
      Class<GroupLayout.Alignment> class0 = GroupLayout.Alignment.class;
      GroupLayout.Alignment groupLayout_Alignment0 = GroupLayout.Alignment.BASELINE;
      jSONObject0.optEnum(class0, "in", groupLayout_Alignment0);
      assertEquals(2, jSONObject0.length());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedWriter pipedWriter0 = new PipedWriter();
      Object object0 = JSONObject.stringToValue("");
      assertTrue(object0.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Locale.getISOLanguages();
      Short short0 = new Short((short)2314);
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      HashMap<BufferedOutputStream, Character.UnicodeScript> hashMap0 = new HashMap<BufferedOutputStream, Character.UnicodeScript>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append(" [charcter ", hashMap0);
      jSONObject1.optBoolean("Missing value", true);
      Short short0 = new Short((short)1252);
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<CharArrayReader> linkedList0 = new LinkedList<CharArrayReader>();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Character, KeyRep.Type> hashMap0 = new HashMap<Character, KeyRep.Type>();
      JSONObject jSONObject1 = jSONObject0.put("Expected a ':' after a key", (Map<?, ?>) hashMap0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 1817);
      boolean boolean0 = jSONObject1.similar(bufferedOutputStream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = JSONObject.quote("kyqD}?boz4f:G", (Writer) stringWriter0);
      JSONObject jSONObject1 = jSONObject0.append("Wd]1-N&WTRwXg>!3", writer0);
      jSONObject0.put("false", (Map<?, ?>) null);
      boolean boolean0 = jSONObject1.similar("kyqD}?boz4f:G");
      assertEquals("\"kyqD}?boz4f:G\"", stringWriter0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.shortValueExact();
      bigInteger0.intValueExact();
      JSONObject.valueToString(bigInteger0);
      bigInteger0.doubleValue();
      BigInteger.valueOf(1L);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toMap();
      jSONObject0.optNumber((String) null);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("s~<Fj,43MjpP_T5/");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      PipedWriter pipedWriter0 = new PipedWriter();
      Short.valueOf((short) (byte) (-11));
      Long long0 = new Long(3401L);
      JSONObject jSONObject1 = jSONObject0.put("8y:!(#?Cm+]Q,&lA", (-1L));
      jSONObject1.toMap();
      jSONObject1.optJSONObject("8y:!(#?Cm+]Q,&lA");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream1, 42);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
      JSONObject jSONObject0 = new JSONObject(sequenceInputStream1);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optBoolean(";1/R#QbJ.nf_&#PK");
      jSONObject0.toMap();
      Object object0 = jSONObject1.opt("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.optInt("Error reading value at index position ", 707);
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      jSONObject0.putOnce("", roundingMode0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.toMap();
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      JSONPointer.builder();
      jSONObject0.optFloat("no", (-2614.5F));
      JSONObject jSONObject1 = jSONObject0.put("\"P{eOh?1", (-3468));
      jSONObject1.toString((-3468));
      Class<DropMode> class0 = DropMode.class;
      DropMode dropMode0 = DropMode.ON_OR_INSERT_ROWS;
      jSONObject0.optEnum(class0, "\"P{eOh?1", dropMode0);
      jSONObject0.isNull("\"P{eOh?1");
      jSONObject1.optBoolean("\"P{eOh?1", false);
      JSONObject.doubleToString(1137.43093801767);
      jSONObject1.remove(";IO.K5;D=Bm%+\"b");
      JSONObject jSONObject2 = jSONObject1.accumulate("P", ";IO.K5;D=Bm%+\"b");
      Class<GroupLayout.Alignment> class1 = GroupLayout.Alignment.class;
      GroupLayout.Alignment groupLayout_Alignment0 = GroupLayout.Alignment.CENTER;
      jSONObject1.optEnum(class1, "1137.43093801767", groupLayout_Alignment0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      JSONObject jSONObject3 = jSONObject1.append(";IO.K5;D=Bm%+\"b", mockPrintStream0);
      mockPrintStream0.checkError();
      String[] stringArray0 = new String[19];
      jSONObject3.put("trim", (Object) "] could not be converted to BigInteger.");
      stringArray0[0] = "java.io.StringWriter@0000000009";
      stringArray0[1] = "P";
      stringArray0[2] = ";IO.K5;D=Bm%+\"b";
      stringArray0[3] = "] could not be converted to BigInteger.";
      stringArray0[4] = "no";
      JSONObject jSONObject4 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.toMap();
      jSONObject3.getJSONArray(";IO.K5;D=Bm%+\"b");
      assertEquals(4, jSONObject1.length());
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)98;
      byteArray0[2] = (byte) (-56);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      jSONObject0.optBigDecimal((String) null, bigDecimal0);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)95;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object object0 = jSONObject0.optQuery("");
      JSONPointer jSONPointer0 = new JSONPointer("");
      jSONPointer0.toURIFragment();
      jSONObject0.optQuery(jSONPointer0);
      JSONObject jSONObject1 = jSONObject0.put("] not a string.", false);
      assertSame(jSONObject1, object0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale locale0 = Locale.ITALIAN;
      HashMap<BufferedOutputStream, Character.UnicodeScript> hashMap0 = new HashMap<BufferedOutputStream, Character.UnicodeScript>();
      JSONObject jSONObject1 = new JSONObject();
      MockFile mockFile0 = new MockFile("Ez/Z1Utu3Gn/?%Y2", "fK$L/!9jX");
      MockFile mockFile1 = new MockFile(mockFile0, "6R^1|6hbrsz");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "fK$L/!9jX";
      stringArray0[1] = "6R^1|6hbrsz";
      stringArray0[2] = "Ez/Z1Utu3Gn/?%Y2";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject0.put("Expected a ',' or '}'", true);
      JSONObject jSONObject3 = jSONObject2.optJSONObject("Expected a ',' or '}'");
      assertNull(jSONObject3);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = " [charcter ";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(" [charcter ", false);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(" [charcter ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 2 [character 3 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = " [charcter ";
      BigInteger bigInteger0 = BigInteger.TEN;
      Map<FilterOutputStream, Integer> map0 = null;
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("u78wXQ !2'm\"?op");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getlongValue", (-1197L));
      String string0 = "] not found.";
      jSONObject0.remove("] not found.");
      jSONObject0.getLong("getlongValue");
      // Undeclared exception!
      try { 
        jSONObject1.optQuery("0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote(":ck>0", (Writer) stringWriter0);
      JSONObject.quote(":ck>0");
      try { 
        jSONObject0.getInt("java.io.StringWriter@0000000002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(3608);
      JSONObject jSONObject1 = jSONObject0.accumulate("longValue", fileSystemHandling0);
      String string0 = "I#;-*yo~u[(3";
      jSONObject1.accumulate("I#;-*yo~u[(3", "I#;-*yo~u[(3");
      jSONObject0.remove("I*9E<]");
      try { 
        jSONObject0.getInt("QF(gu'ci^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000014] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      HashMap<BufferedOutputStream, Character.UnicodeScript> hashMap0 = new HashMap<BufferedOutputStream, Character.UnicodeScript>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("java.lang.Long@0000000012.", hashMap0);
      JSONObject jSONObject2 = jSONObject0.put("java.lang.Long@0000000012.", (Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject1.similar(jSONObject2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      HashMap<BufferedOutputStream, Character.UnicodeScript> hashMap0 = new HashMap<BufferedOutputStream, Character.UnicodeScript>();
      byte[] byteArray0 = new byte[0];
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append(" [charcter ", hashMap0);
      jSONObject0.put("Expected a ':' after a key", (Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject1.similar(jSONObject0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("|E1y");
      BigDecimal bigDecimal0 = new BigDecimal((-1397L));
      jSONObject1.optBigDecimal("|E1y", bigDecimal0);
      jSONObject0.optLong("|E1y");
      try { 
        jSONObject1.getString("|E1y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<JTable.PrintMode> class0 = JTable.PrintMode.class;
      JTable.PrintMode jTable_PrintMode0 = JTable.PrintMode.NORMAL;
      jSONArray0.optEnum(class0, 100, jTable_PrintMode0);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = new JSONArray();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.quote("v5HZH");
      JSONObject.testValidity(jSONArray0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("v5HZH", bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)98;
      byteArray1[1] = (byte) (-97);
      byteArray1[2] = (byte) (-56);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      jSONObject0.optBigDecimal((String) null, bigDecimal0);
      byteArray1[3] = (byte)47;
      byteArray1[4] = (byte)95;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      jSONObject0.optBigInteger((String) null, bigInteger0);
      byteArray0[1] = (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<Short, TrayIcon.MessageType> hashMap0 = new HashMap<Short, TrayIcon.MessageType>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = null;
      try { 
        jSONObject1.getBigInteger((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "|E1y";
      jSONObject0.increment("|E1y");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        jSONObject0.getJSONObject("|E1y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "A JSONObect 9xt must ed with '}'";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/mitchell/generation-scripts/projects/json");
      jSONObject0.increment("|E1y");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("A JSONObect 9xt must ed with '}'");
      JSONObject.wrap(mockFileWriter0);
      try { 
        jSONObject0.getJSONObject("|E1y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONObject0.toString();
      Short short0 = new Short((short) (-1335));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.valueToString(jSONObject0);
      try { 
        jSONObject0.getNumber("java.io.StringWriter@0000000002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.e");
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Short short0 = new Short((short)0);
      JSONObject.numberToString(short0);
      try { 
        jSONObject0.getNumber("G;f%+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("|E1y");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Short short0 = new Short((short) (-576));
      jSONObject0.getDouble("|E1y");
      Number number0 = jSONObject1.optNumber("Substring bounds error", (Number) short0);
      assertEquals((short) (-576), number0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      hashMap0.put("X8O\":Kf", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-64);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      byteArray0[1] = (byte)0;
      LinkedList<RoundingMode> linkedList0 = new LinkedList<RoundingMode>();
      MockFile mockFile0 = new MockFile("X8O\":Kf", "X8O\":Kf");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      jSONObject0.write((Writer) mockFileWriter0, 20, 97);
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        jSONObject0.getDouble("X8O\":Kf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put(965, false);
      jSONArray1.optJSONObject(5585);
      StringWriter stringWriter0 = new StringWriter(5585);
      PipedWriter pipedWriter0 = new PipedWriter();
      Short.valueOf((short)2187);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      Float float0 = new Float((-686.6111));
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject1 = new JSONObject();
      String string0 = "|E1y";
      MockFileWriter mockFileWriter0 = new MockFileWriter("|E1y");
      JSONObject.wrap(bigInteger0);
      try { 
        jSONObject0.getJSONObject("A JSONObect 9xt must ed with '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(74);
      JSONObject.wrap(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Double double0 = new Double(2689.49023);
      JSONObject jSONObject0 = new JSONObject();
      double double1 = jSONObject0.optDouble("!p#/|VwUS]RlYNIqn.");
      assertEquals(Double.NaN, double1, 0.01);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      HashMap<BufferedOutputStream, Character.UnicodeScript> hashMap0 = new HashMap<BufferedOutputStream, Character.UnicodeScript>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("java.lang.Long@0000000012.", 0.0F);
      Locale.getISOCountries();
      try { 
        jSONObject0.getLong("not");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject(pushbackInputStream0, stringArray0);
      String string0 = "HiG6,eHv";
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.optBigInteger("HiG6,eHv", bigInteger0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<Short, TrayIcon.MessageType> hashMap0 = new HashMap<Short, TrayIcon.MessageType>();
      HashMap<Normalizer.Form, BigInteger> hashMap1 = new HashMap<Normalizer.Form, BigInteger>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap1);
      try { 
        jSONObject0.getBigInteger((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "0#&->H}";
      stringArray0[1] = "";
      stringArray0[2] = null;
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.toMap();
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(128);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertFalse(jSONObject1.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.isDecimalNotation("Null key.");
      JSONObject.getNames((Object) jSONArray0);
      StringWriter stringWriter0 = new StringWriter(107);
      Object object0 = JSONObject.stringToValue("\n");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Short short0 = new Short((short)350);
      String string0 = JSONObject.numberToString(short0);
      assertFalse(string0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      JSONPointer.builder();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jSONObject0.optFloat("no", (-2614.5F));
      JSONObject jSONObject1 = jSONObject0.put("", (-3468));
      jSONObject1.toString((-3468));
      Class<DropMode> class0 = DropMode.class;
      DropMode dropMode0 = DropMode.ON_OR_INSERT_ROWS;
      jSONObject0.optEnum(class0, "", dropMode0);
      jSONObject0.isNull("");
      jSONObject1.optBoolean("", false);
      JSONObject.doubleToString(1137.43093801767);
      jSONObject1.remove(";IO.K5;D=Bm%+\"b");
      jSONObject1.accumulate("P", ";IO.K5;D=Bm%+\"b");
      Class<GroupLayout.Alignment> class1 = GroupLayout.Alignment.class;
      GroupLayout.Alignment groupLayout_Alignment0 = GroupLayout.Alignment.CENTER;
      jSONObject1.optEnum(class1, "1137.43093801767", groupLayout_Alignment0);
      assertEquals(2, jSONObject1.length());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      boolean boolean0 = JSONObject.isDecimalNotation("] could not be converted to BigInteger.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getlongValue", (-1197L));
      jSONObject0.remove("] not found.");
      jSONObject0.getLong("getlongValue");
      Short short0 = new Short((short) (-506));
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getlongValue", (-1197L));
      jSONObject0.remove("] not found.");
      jSONObject0.getLong("getlongValue");
      String string0 = jSONObject0.toString((-495));
      jSONObject1.append("isnot", "java.io.StringWriter@0000000008");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      String string1 = JSONObject.numberToString(bigDecimal0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "|E1y";
      String string1 = null;
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = (-1877);
      Integer integer0 = new Integer((-1877));
      JSONObject jSONObject0 = new JSONObject(integer0);
      String string0 = null;
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = " [charcter ";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(" [charcter ", (-1L));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(384);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) jSONObject1;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) jSONObject0;
      objectArray0[3] = (Object) byteArrayOutputStream0;
      objectArray0[4] = (Object) " [charcter ";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "FU", objectArray0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(printWriter0);
      JSONObject.indent(bufferedWriter0, 384);
      try { 
        jSONObject0.getJSONArray(" [charcter ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      JSONPointer.builder();
      jSONObject0.optFloat("no", (-2614.5F));
      JSONObject jSONObject1 = jSONObject0.put("\"P{eOh?1", (-3468));
      jSONObject1.toString((-3468));
      Class<DropMode> class0 = DropMode.class;
      DropMode dropMode0 = DropMode.ON_OR_INSERT_ROWS;
      jSONObject0.optEnum(class0, "\"P{eOh?1", dropMode0);
      jSONObject0.isNull("\"P{eOh?1");
      JSONObject.doubleToString((-2614.5F));
      jSONObject1.remove(";IO.K5;D=Bm%+\"b");
      JSONObject jSONObject2 = jSONObject1.accumulate("P", ";IO.K5;D=Bm%+\"b");
      Class<GroupLayout.Alignment> class1 = GroupLayout.Alignment.class;
      GroupLayout.Alignment groupLayout_Alignment0 = GroupLayout.Alignment.CENTER;
      jSONObject1.optEnum(class1, "-2614.5", groupLayout_Alignment0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      JSONObject jSONObject3 = jSONObject1.append(";IO.K5;D=Bm%+\"b", mockPrintStream0);
      mockPrintStream0.checkError();
      String[] stringArray0 = new String[19];
      stringArray0[0] = "java.io.StringWriter@0000000009";
      stringArray0[1] = "P";
      stringArray0[2] = ";IO.K5;D=Bm%+\"b";
      stringArray0[4] = "no";
      JSONObject jSONObject4 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.toMap();
      JSONArray jSONArray0 = jSONObject3.getJSONArray(";IO.K5;D=Bm%+\"b");
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      JSONPointer.builder();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jSONObject0.optFloat("no", (-2614.5F));
      JSONObject jSONObject1 = jSONObject0.put("", (-3468));
      jSONObject1.toString((-3468));
      Class<DropMode> class0 = DropMode.class;
      DropMode dropMode0 = DropMode.ON_OR_INSERT_ROWS;
      jSONObject0.optEnum(class0, "", dropMode0);
      jSONObject0.isNull("");
      jSONObject1.optBoolean("", false);
      JSONObject.doubleToString(1137.43093801767);
      jSONObject1.remove(";IO.K5;D=Bm%+\"b");
      JSONObject jSONObject2 = jSONObject1.accumulate("P", ";IO.K5;D=Bm%+\"b");
      Class<GroupLayout.Alignment> class1 = GroupLayout.Alignment.class;
      GroupLayout.Alignment groupLayout_Alignment0 = GroupLayout.Alignment.CENTER;
      jSONObject1.optEnum(class1, "1137.43093801767", groupLayout_Alignment0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      JSONObject jSONObject3 = jSONObject1.append(";IO.K5;D=Bm%+\"b", mockPrintStream0);
      mockPrintStream0.checkError();
      String[] stringArray0 = new String[19];
      stringArray0[0] = "java.io.StringWriter@0000000009";
      stringArray0[1] = "P";
      stringArray0[2] = ";IO.K5;D=Bm%+\"b";
      stringArray0[3] = "] could not be converted to BigInteger.";
      stringArray0[4] = "no";
      JSONObject jSONObject4 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.toMap();
      JSONArray jSONArray0 = jSONObject3.getJSONArray(";IO.K5;D=Bm%+\"b");
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append(" [charcter ", " [charcter ");
      int int0 = jSONObject0.optInt(" [charcter ", 1050);
      assertEquals(1050, int0);
      
      Object object0 = JSONObject.wrap(jSONObject0);
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = jSONObject0.has("JSON does not allow non-finite numbers.");
      assertFalse(boolean0);
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger");
      jSONObject0.optInt(";6X", (-2513));
      JSONPointer.builder();
      jSONObject0.optLong(";IO.K5;D=Bm%+\"b");
      try { 
        jSONObject0.getString(";IO.K5;D=Bm%+\"b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      JSONPointer.builder();
      jSONObject0.optFloat("no", (-2614.5F));
      JSONObject jSONObject1 = jSONObject0.put("", (-3468));
      jSONObject1.toString((-3468));
      Class<DropMode> class0 = DropMode.class;
      DropMode dropMode0 = DropMode.ON_OR_INSERT_ROWS;
      DropMode dropMode1 = jSONObject0.optEnum(class0, "", dropMode0);
      boolean boolean0 = new Boolean("");
      jSONObject1.optBoolean("", false);
      JSONObject.doubleToString(1137.43093801767);
      jSONObject1.remove(";IO.K5;D=Bm%+\"b");
      jSONObject1.accumulate("x", ";IO.K5;D=Bm%+\"b");
      Short short0 = new Short((short)116);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(',');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "");
      Writer writer0 = JSONObject.writeValue(stringWriter2, dropMode1, 114, (-1667));
      assertSame(stringWriter2, writer0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-11);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)0;
      String string0 = "in";
      String string1 = "abs";
      jSONObject0.optLong("abs");
      jSONObject0.optString("in");
      Byte byte0 = new Byte((byte) (-11));
      JSONObject jSONObject1 = jSONObject0.accumulate("", byte0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0.0);
      Class<GroupLayout.Alignment> class0 = GroupLayout.Alignment.class;
      GroupLayout.Alignment groupLayout_Alignment0 = GroupLayout.Alignment.BASELINE;
      jSONObject0.optEnum(class0, "in", groupLayout_Alignment0);
      String string2 = "^cQW6o#4B\\";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      try { 
        jSONObject1.append("", bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte byte0 = (byte)0;
      PipedWriter pipedWriter0 = new PipedWriter();
      Short.valueOf((short)93);
      Long long0 = new Long((-2820L));
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 62L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      JSONPointer.builder();
      jSONObject0.optFloat("no", (-2614.5F));
      JSONObject jSONObject1 = jSONObject0.put("", (-3468));
      jSONObject1.toString((-3468));
      Class<DropMode> class0 = DropMode.class;
      DropMode dropMode0 = DropMode.ON_OR_INSERT_ROWS;
      jSONObject0.optEnum(class0, "", dropMode0);
      jSONObject0.isNull("");
      jSONObject1.optBoolean("", false);
      JSONObject.doubleToString(1137.43093801767);
      jSONObject1.remove(";IO.K5;D=Bm%+\"b");
      JSONObject jSONObject2 = jSONObject1.accumulate("x", ";IO.K5;D=Bm%+\"b");
      Class<GroupLayout.Alignment> class1 = GroupLayout.Alignment.class;
      GroupLayout.Alignment groupLayout_Alignment0 = GroupLayout.Alignment.CENTER;
      jSONObject1.optEnum(class1, "1137.43093801767", groupLayout_Alignment0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      JSONObject jSONObject3 = jSONObject1.append("^cQW6o#4B", mockPrintStream0);
      mockPrintStream0.checkError();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "java.io.StringWriter@0000000009";
      stringArray0[1] = "x";
      stringArray0[2] = ";IO.K5;D=Bm%+\"b";
      stringArray0[3] = "] could not be converted to BigInteger.";
      stringArray0[4] = "no";
      JSONObject jSONObject4 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.toMap();
      try { 
        jSONObject3.getJSONArray(";IO.K5;D=Bm%+\"b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000042] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      HashMap<BufferedOutputStream, Character.UnicodeScript> hashMap0 = new HashMap<BufferedOutputStream, Character.UnicodeScript>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("java.lang.Long@0000000012.", hashMap0);
      jSONObject1.toMap();
      JSONObject.wrap(hashMap0);
      jSONObject0.put("java.lang.Long@0000000012.", (Map<?, ?>) hashMap0);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("java.lang.Long@0000000012.", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name java.lang.Long@0000000012., locale it
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/mitchell/generation-scripts/projects/json");
      JSONObject jSONObject1 = jSONObject0.increment("|E1y");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("A JSONObect 9xt must ed with '}'");
      Long long0 = new Long((-1L));
      JSONObject jSONObject2 = jSONObject1.put(".", 2685L);
      HashMap<Long, ByteArrayOutputStream> hashMap0 = new HashMap<Long, ByteArrayOutputStream>();
      jSONObject0.put("A JSONObect 9xt must ed with '}'", (Map<?, ?>) hashMap0);
      jSONObject0.toMap();
      jSONObject1.optJSONObject("");
      jSONObject0.optLong("A JSONObect 9xt must ed with '}'", 0L);
      boolean boolean0 = jSONObject2.optBoolean(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.optInt("Error reading value at index position ", 707);
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      jSONObject0.putOnce("", roundingMode0);
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = JSONObject.numberToString(bigInteger0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      hashMap0.put("X8O\":Kf", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-64);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.compareTo(bigInteger1);
      bigDecimal0.intValue();
      Short.valueOf((short) (byte) (-24));
      Long long0 = new Long((byte) (-1));
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(34);
      Object object0 = JSONObject.wrap(charArrayWriter0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote(">5SsKAd'^[", (Writer) stringWriter0);
      JSONObject.wrap(stringWriter0);
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        jSONObject0.getDouble(">5SsKAd'^[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-11);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)0;
      String string0 = "in";
      jSONObject0.optLong("abs");
      jSONObject0.optString("in");
      Byte byte0 = new Byte((byte) (-11));
      jSONObject0.accumulate("", byte0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0.0);
      String string1 = "getlongValue";
      JSONObject jSONObject1 = jSONObject0.put("getlongValue", (-1197L));
      jSONObject1.remove("shortValueExact");
      try { 
        jSONObject1.getLong("isnot");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000020] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      PipedWriter pipedWriter0 = new PipedWriter();
      Short.valueOf((short) (byte) (-11));
      try { 
        jSONObject0.write((Writer) pipedWriter0, (int) (byte)0, 1695);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames((Object) jSONArray0);
      StringWriter stringWriter0 = new StringWriter(107);
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject.stringToValue("Null key.");
      String string0 = "p";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list0 = new LinkedList<Locale>();
      List<Locale> list1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, list1);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("p", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] could not be converted to BigInteger.";
      MockFileWriter mockFileWriter0 = new MockFileWriter("] could not be converted to BigInteger.");
      JSONObject.wrap(mockFileWriter0);
      try { 
        jSONObject0.getJSONObject("] could not be converted to BigInteger.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000006] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-11);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)0;
      long long0 = jSONObject0.optLong("abs");
      assertEquals(0L, long0);
      
      String string0 = jSONObject0.optString("in");
      assertEquals("", string0);
      assertEquals(1, jSONObject0.length());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      Short.valueOf((short)32);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      Boolean boolean1 = Boolean.valueOf("D)x&y1i/m< jlN8h");
      Object object0 = JSONObject.wrap(boolean1);
      assertTrue(object0.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString((String) null, "DQ4HX\"51yln?PWV");
      String string0 = "iAY";
      try { 
        jSONObject0.get("iAY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1551);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)14;
      byteArrayOutputStream0.write(byteArray0);
      JSONObject.testValidity(byteArrayOutputStream0);
      assertEquals("VE\u000F\u000E", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getlongValue", (-1197L));
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.put("getlongValue", (double) (-1197L));
      JSONObject.indent(stringWriter0, 151);
      jSONObject0.remove("] not found.");
      jSONObject0.getLong("getlongValue");
      jSONObject1.write((Writer) stringWriter0);
      jSONObject0.toString((-495));
      JSONObject jSONObject2 = jSONObject1.append("isnot", "java.io.StringWriter@0000000014");
      assertSame(jSONObject2, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<CharArrayReader> linkedList0 = new LinkedList<CharArrayReader>();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject.quote("get");
      JSONObject.indent(pipedWriter0, (-2558));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(8192);
      jSONObject0.optInt("java.io.StringWriter@0000000002");
      HashMap<BufferedOutputStream, Character.UnicodeScript> hashMap0 = new HashMap<BufferedOutputStream, Character.UnicodeScript>();
      assertEquals(0, hashMap0.size());
      
      jSONObject0.put("yOkmm@", (long) 8192);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      PipedWriter pipedWriter0 = new PipedWriter();
      Short.valueOf((short) (-149));
      Long long0 = new Long((-228L));
      JSONObject jSONObject1 = jSONObject0.put("1?", (long) (byte)0);
      jSONObject0.toString((int) (byte)0);
      try { 
        jSONObject0.append("1?", jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[1?] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      PipedWriter pipedWriter0 = new PipedWriter();
      Short.valueOf((short) (byte) (-11));
      Long long0 = new Long(3401L);
      JSONObject jSONObject1 = jSONObject0.put("8y:!(#?Cm+]Q,&lA", (-1L));
      jSONObject0.toString((int) (byte)0);
      jSONObject1.append("java.io.StringWriter@0000000012", long0);
      assertEquals(3, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = "getDeclaringClass";
      JSONObject.isDecimalNotation("getDeclaringClass");
      JSONObject.getNames((Object) "getDeclaringClass");
      LinkedList<Dialog.ModalExclusionType> linkedList0 = new LinkedList<Dialog.ModalExclusionType>();
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.APPLICATION_EXCLUDE;
      linkedList0.offerFirst(dialog_ModalExclusionType0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      String string1 = "abs";
      MockFile.createTempFile("abs", "abs", (File) null);
      MockFile mockFile0 = new MockFile("getDeclaringClass", "org.json.JSONPointer");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "getDeclaringClass");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // getDeclaringClass
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      MockFileWriter mockFileWriter0 = new MockFileWriter("A JSONObject text must end with '}'");
      JSONObject.wrap(mockFileWriter0);
      try { 
        jSONObject0.getJSONObject(":q$Eko:|%c|.I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000006] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      LinkedList<CharArrayReader> linkedList0 = new LinkedList<CharArrayReader>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.toJSONObject(jSONArray0);
      Short short0 = new Short((short)9);
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject.stringToValue("get");
      try { 
        JSONObject.writeValue(pipedWriter0, "", (short)0, 99);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/mitchell/generation-scripts/projects/json");
      jSONObject0.increment("|E1y");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Object object0 = JSONObject.stringToValue("9(Fzhxn 'y\\ybJWb");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Short short0 = new Short((short)101);
      String string0 = JSONObject.numberToString(short0);
      assertFalse(string0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      LinkedList<CharArrayReader> linkedList0 = new LinkedList<CharArrayReader>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Short short0 = new Short((short)9);
      PipedWriter pipedWriter0 = new PipedWriter();
      Object object0 = JSONObject.stringToValue("] not found.");
      assertEquals("] not found.", object0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(5585);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "] is not a JSONObject.";
      stringArray0[1] = "";
      stringArray0[2] = "get";
      Short short0 = new Short((short)0);
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject.stringToValue("get");
      try { 
        JSONObject.writeValue(pipedWriter0, "get", (short)0, (short)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("java.lang.Float@0000000005.", (double) (-246));
      BigDecimal bigDecimal0 = new BigDecimal((-246));
      jSONObject0.optBigDecimal("java.lang.Float@0000000005.", bigDecimal0);
      String string0 = null;
      try { 
        jSONObject0.getFloat((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      try { 
        jSONObject0.getJSONArray("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] could not be converted to BigInteger.";
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      JSONPointer.builder();
      String string1 = ":";
      jSONObject0.optFloat("no", (-2614.5F));
      JSONObject jSONObject1 = jSONObject0.put(":", (-3468));
      jSONObject1.toString((-3468));
      DropMode dropMode0 = DropMode.ON_OR_INSERT_ROWS;
      jSONObject0.isNull(":");
      jSONObject1.optBoolean(":", false);
      String string2 = "ZNzqqO['";
      try { 
        jSONObject0.getJSONArray("nex");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000012] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = " [charcter ";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append(" [charcter ", " [charcter ");
      JSONObject.wrap(jSONObject0);
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        jSONObject0.getDouble(" [charcter ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000012] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(427);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      MockFile mockFile0 = new MockFile("", "-*Fb");
      MockFile mockFile1 = new MockFile(mockFile0, "-*Fb");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile1);
      jSONObject1.write((Writer) mockFileWriter0, 427, 92);
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        jSONObject1.getDouble("-*Fb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = "{";
      JSONObject.isDecimalNotation("{");
      JSONObject.getNames((Object) "{");
      LinkedList<Dialog.ModalExclusionType> linkedList0 = new LinkedList<Dialog.ModalExclusionType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      String string1 = "].";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("].", "getnegate", (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.shortValueExact();
      bigInteger0.intValueExact();
      BigInteger.valueOf(2370L);
      JSONObject.valueToString(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject();
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      jSONObject0.optEnum(class0, "zS#e;J7KzKlq[)P|bMF1", locale_FilteringMode0);
      JSONObject.quote("java.io.StringWriter@0000000002");
      jSONObject0.optDouble("java.io.StringWriter@0000000004");
      jSONObject0.optBoolean("zS#e;J7KzKlq[)P|bMF1");
      StringWriter stringWriter0 = new StringWriter();
      bigInteger0.shiftLeft((short)0);
      stringWriter0.append('>');
      // Undeclared exception!
      try { 
        stringWriter0.write("OV\"h", (-702), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOnce((String) null, (Object) null);
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      Locale locale0 = Locale.forLanguageTag("(C7{ExQp=]i&|bZ7J");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      jSONPointer0.toURIFragment();
      JSONObject jSONObject0 = new JSONObject(47);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query(jSONPointer0);
      jSONObject1.optFloat((String) null, 4009.5F);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      HashMap<BufferedOutputStream, Character.UnicodeScript> hashMap0 = new HashMap<BufferedOutputStream, Character.UnicodeScript>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Expected a ':' after a key", (Map<?, ?>) hashMap0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.push(";IO.K5;D=Bm%+\"b");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)121;
      HashMap<BufferedOutputStream, Character.UnicodeScript> hashMap0 = new HashMap<BufferedOutputStream, Character.UnicodeScript>();
      jSONObject0.put("] is not a long.", (Map<?, ?>) hashMap0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(12);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-732));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(5585);
      StringWriter stringWriter0 = new StringWriter(5585);
      Integer integer0 = new Integer(5585);
      JSONObject.writeValue(stringWriter0, integer0, 5585, (-1213));
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      JSONObject jSONObject0 = new JSONObject(271);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.optBigInteger((String) null, bigInteger0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<Short, TrayIcon.MessageType> hashMap0 = new HashMap<Short, TrayIcon.MessageType>();
      Short short0 = new Short((short)0);
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      byte[] byteArray0 = new byte[8];
      jSONObject0.optBigInteger((String) null, bigInteger0);
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      jSONObject0.optString("t");
      MockFile mockFile0 = new MockFile("markSupported", "t");
      File file0 = MockFile.createTempFile("markSupported", (String) null, (File) mockFile0);
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      jSONObject0.accumulate("t", mockFileReader0);
      jSONObject0.isNull("0.0");
      double double0 = (-699.3);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      HashMap<BufferedOutputStream, Character.UnicodeScript> hashMap0 = new HashMap<BufferedOutputStream, Character.UnicodeScript>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("java.lang.Long@0000000012.", hashMap0);
      JSONObject.wrap(hashMap0);
      JSONObject jSONObject2 = jSONObject0.put("java.lang.Long@0000000012.", (Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject1.similar(jSONObject2);
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      PipedWriter pipedWriter0 = new PipedWriter();
      Short.valueOf((short) (byte) (-11));
      Long long0 = new Long(3401L);
      Object object0 = JSONObject.wrap(long0);
      assertEquals(3401L, object0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.push(";IO.K5;D=Bm%+\"b");
      jSONObject0.optNumber("] could not be converted to BigInteger.", (Number) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "] is not a JSONObject.";
      stringArray0[1] = "get";
      stringArray0[2] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      JSONObject jSONObject1 = jSONObject0.put(";IO.K5;D=Bm%+\"b", (Object) ";IO.K5;D=Bm%+\"b");
      JSONObject jSONObject2 = jSONObject1.putOpt("] could not be converted to BigInteger.", ";IO.K5;D=Bm%+\"b");
      JSONPointer.builder();
      jSONObject1.optFloat(";IO.K5;D=Bm%+\"b", (float) (-3468));
      JSONObject jSONObject3 = jSONObject2.put("\"P{eOh?1", (-3468));
      jSONObject0.toString((-3468));
      DropMode dropMode0 = DropMode.ON_OR_INSERT_ROWS;
      Class<DropMode> class0 = DropMode.class;
      jSONObject0.optEnum(class0, "no", dropMode0);
      jSONObject1.isNull("] could not be converted to BigInteger.");
      jSONObject1.optBoolean("no", false);
      JSONObject.doubleToString((-3468));
      JSONObject jSONObject4 = jSONObject3.put("\"P{eOh?1", (-457L));
      HashMap<Long, ByteArrayOutputStream> hashMap0 = new HashMap<Long, ByteArrayOutputStream>();
      JSONObject jSONObject5 = jSONObject4.put("-3468", (Map<?, ?>) hashMap0);
      jSONObject5.put("ab", (-3185L));
      jSONObject5.toMap();
      JSONObject jSONObject6 = new JSONObject(1789);
      jSONObject6.optDouble("JSONObject[");
      jSONObject1.optBoolean(";IO.K5;D=Bm%+\"b");
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedWriter pipedWriter0 = new PipedWriter();
      Short short0 = Short.valueOf((short) (-149));
      Long long0 = new Long((short) (-149));
      JSONObject jSONObject1 = jSONObject0.put(" [charcter ", 0L);
      jSONObject1.toString(78);
      jSONObject0.append("java.io.StringWriter@0000000008", short0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("|E1y");
      jSONObject0.optLong("|E1y");
      try { 
        jSONObject1.getString("|E1y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("^>CV-UJPMS7", "^>CV-UJPMS7");
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = jSONObject1.optBoolean("^>CV-UJPMS7", true);
      assertFalse(jSONObject0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getlongValue", (-1197L));
      jSONObject0.remove("] not found.");
      long long0 = new Long((-1197L));
      try { 
        jSONObject1.getBigDecimal("getlongValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote("\"", (Writer) stringWriter0);
      jSONObject0.optFloat("\"", (-2614.5F));
      JSONObject jSONObject1 = jSONObject0.put("\"", (-307));
      jSONObject0.toString((-307));
      jSONObject1.isNull("islongValue");
      JSONObject.doubleToString((-2614.5F));
      jSONObject1.remove("org.json.JSONObject");
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject.stringToValue("islongValue");
      jSONObject0.toMap();
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(74);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("", 3941.48F);
      jSONObject2.append("34i[RX-Q1L", "");
      Locale.getISOCountries();
      jSONObject2.getLong("");
      Class<Component.BaselineResizeBehavior> class0 = Component.BaselineResizeBehavior.class;
      try { 
        jSONObject1.getEnum(class0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000016] is not an enum of type java.io.StringWriter@0000000017.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getlongValue", (-1197L));
      jSONObject0.remove("] not found.");
      jSONObject0.getLong("getlongValue");
      jSONObject0.toString((-495));
      jSONObject1.append("isnot", "java.io.StringWriter@0000000008");
      try { 
        jSONObject1.getBigDecimal("getlongValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000017] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      HashMap<BufferedOutputStream, Character.UnicodeScript> hashMap0 = new HashMap<BufferedOutputStream, Character.UnicodeScript>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append(" [charcter ", hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('`');
      jSONObject0.write((Writer) stringWriter1, 92, 92);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.append(" [charcter ", " [charcter ");
      try { 
        jSONObject0.getDouble(" [charcter ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000026] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      JSONPointer.builder();
      jSONObject0.optFloat("no", (-2614.5F));
      JSONObject jSONObject1 = jSONObject0.put("", (-3468));
      jSONObject1.toString((-3468));
      Class<DropMode> class0 = DropMode.class;
      DropMode dropMode0 = DropMode.ON_OR_INSERT_ROWS;
      jSONObject0.optEnum(class0, "", dropMode0);
      jSONObject0.isNull("");
      jSONObject1.optBoolean("", false);
      JSONObject.doubleToString(1137.43093801767);
      jSONObject1.remove(";IO.K5;D=Bm%+\"b");
      String string0 = "x";
      JSONObject jSONObject2 = jSONObject1.accumulate("x", ";IO.K5;D=Bm%+\"b");
      Class<GroupLayout.Alignment> class1 = GroupLayout.Alignment.class;
      GroupLayout.Alignment groupLayout_Alignment0 = GroupLayout.Alignment.CENTER;
      jSONObject1.optEnum(class1, "1137.43093801767", groupLayout_Alignment0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      jSONObject1.append("^cQW6o#4B", mockPrintStream0);
      mockPrintStream0.checkError();
      try { 
        jSONObject2.getBigDecimal(";IO.K5;D=Bm%+\"b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000029] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String[] stringArray0 = new String[4];
      HashMap<SocketFlow.Status, Month> hashMap0 = new HashMap<SocketFlow.Status, Month>(129, 129);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getBigDecimal("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      String string0 = JSONObject.quote("");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      String string0 = JSONObject.quote("R).\"pWv&-/");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      Locale locale0 = Locale.forLanguageTag("(C7{ExQp=]i&|bZ7J");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      jSONPointer0.toURIFragment();
      JSONObject jSONObject0 = new JSONObject(47);
      jSONObject0.query(jSONPointer0);
      try { 
        jSONObject0.getFloat("\"O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(5585);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "] is not a JSONObject.";
      stringArray0[1] = "";
      stringArray0[2] = "get";
      stringArray0[3] = "";
      StringWriter stringWriter0 = new StringWriter(5585);
      Writer writer0 = JSONObject.writeValue(stringWriter0, stringWriter0, (-1790548937), (-1790548937));
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(5585);
      StringWriter stringWriter0 = new StringWriter(5585);
      Short short0 = new Short((short)132);
      Writer writer0 = JSONObject.writeValue(stringWriter0, short0, (short)132, (short)132);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.getFloat((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getFloat((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      JSONPointer.builder();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Class<DropMode> class0 = DropMode.class;
      DropMode dropMode0 = DropMode.ON_OR_INSERT_ROWS;
      jSONObject0.optEnum(class0, "\"P{eOh?1", dropMode0);
      jSONObject0.isNull("\"P{eOh?1");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.optString("Null key.");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      int int0 = 3608;
      JSONObject jSONObject0 = new JSONObject(3608);
      String string0 = "longValue";
      HashMap<DataInputStream, Double> hashMap0 = new HashMap<DataInputStream, Double>();
      jSONObject0.put("longValue", (Map<?, ?>) hashMap0);
      String string1 = "I#;-*yo~u[(3";
      jSONObject0.accumulate("I#;-*yo~u[(3", "I#;-*yo~u[(3");
      jSONObject0.remove("I*9E<]");
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.getJSONObject("I*9E<]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      jSONObject0.optString("t");
      MockFile mockFile0 = new MockFile("markSupported", "t");
      File file0 = MockFile.createTempFile("markSupported", (String) null, (File) mockFile0);
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      jSONObject0.accumulate("t", mockFileReader0);
      String string0 = "0.0";
      jSONObject0.isNull("0.0");
      double double0 = (-699.3);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-11);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)0;
      String string0 = "in";
      jSONObject0.optLong("abs");
      jSONObject0.optString("in");
      Byte byte0 = new Byte((byte) (-11));
      JSONObject jSONObject1 = jSONObject0.accumulate("", byte0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0.0);
      try { 
        jSONObject1.get("\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      JSONPointer.builder();
      jSONObject0.optFloat("no", (-2614.5F));
      JSONObject jSONObject1 = jSONObject0.put("\"P{eOh?1", (-3468));
      jSONObject1.toString((-3468));
      Class<DropMode> class0 = DropMode.class;
      DropMode dropMode0 = DropMode.ON_OR_INSERT_ROWS;
      jSONObject0.optEnum(class0, "\"P{eOh?1", dropMode0);
      jSONObject0.isNull("\"P{eOh?1");
      JSONObject.doubleToString((-2614.5F));
      jSONObject1.remove(";IO.K5;D=Bm%+\"b");
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject.stringToValue("-2614.5");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Short short0 = new Short((short) (-506));
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      HashMap<BufferedOutputStream, Character.UnicodeScript> hashMap0 = new HashMap<BufferedOutputStream, Character.UnicodeScript>();
      Short short0 = new Short((short) (-2498));
      BigInteger bigInteger0 = BigInteger.ZERO;
      String string0 = JSONObject.numberToString(bigInteger0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONObject0.optLong("in");
      String string0 = jSONObject0.optString("in");
      Byte byte0 = new Byte((byte) (-101));
      JSONObject jSONObject1 = jSONObject0.accumulate("isiterator", (Object) null);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0.0);
      Class<GroupLayout.Alignment> class0 = GroupLayout.Alignment.class;
      GroupLayout.Alignment groupLayout_Alignment0 = GroupLayout.Alignment.BASELINE;
      jSONObject0.optEnum(class0, (String) null, groupLayout_Alignment0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      jSONObject1.append("", byte0);
      mockPrintStream0.checkError();
      String string1 = JSONObject.quote("token cannot be null");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      JSONObject.numberToString(bigDecimal0);
      Class<ProcessBuilder.Redirect.Type> class0 = ProcessBuilder.Redirect.Type.class;
      jSONObject0.optEnum(class0, "java.math.BigDecimal@0000000002");
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject("Duplicate key \"", stringArray0);
      long long0 = jSONObject0.optLong("Duplicate key \"", 1611L);
      assertEquals(1611L, long0);
      
      boolean boolean0 = jSONObject0.optBoolean("4kBw|vld5zd");
      assertFalse(boolean0);
      
      long long1 = jSONObject0.optLong("Expected a ':' after a key");
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONObject.doubleToString(Double.NaN);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.shortValueExact();
      bigInteger0.intValueExact();
      JSONObject.valueToString(bigInteger0);
      bigInteger0.doubleValue();
      BigInteger.valueOf(1L);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString((short)0);
      jSONObject0.optLong("0");
      try { 
        jSONObject0.getString("Unable to write JSONObject value for key: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      HashMap<BufferedOutputStream, Character.UnicodeScript> hashMap0 = new HashMap<BufferedOutputStream, Character.UnicodeScript>();
      Short short0 = new Short((short)9);
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.GERMANY;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("java.lang.Short@0000000001", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name java.lang.Short@0000000001, locale de_DE
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.shortValueExact();
      bigInteger0.intValueExact();
      BigInteger.valueOf(2370L);
      JSONObject.valueToString(bigInteger0);
      BigInteger.valueOf(1L);
      JSONObject jSONObject0 = new JSONObject();
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      jSONObject0.optEnum(class0, "zS#eJ7KzKlq[)P|bMF1", locale_FilteringMode0);
      JSONObject.doubleToString((short)0);
      jSONObject0.optDouble("0");
      jSONObject0.optBoolean("zS#eJ7KzKlq[)P|bMF1");
      StringWriter stringWriter0 = new StringWriter();
      bigInteger0.shiftLeft((short)0);
      stringWriter0.append('>');
      // Undeclared exception!
      try { 
        stringWriter0.write("OV\"h", (-702), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short) (-988));
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category.values();
      jSONArray0.put((Object) locale_Category0);
      JSONObject.stringToValue("get");
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("3Y");
      assertFalse(boolean0);
      
      String[] stringArray0 = JSONObject.getNames((Object) "3Y");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      StringWriter stringWriter0 = new StringWriter(107);
      PipedWriter pipedWriter0 = new PipedWriter();
      Object object0 = JSONObject.stringToValue("Bw`5L.k[3k");
      assertEquals("Bw`5L.k[3k", object0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("getDeclaringClass");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONObject.isDecimalNotation("false");
      JSONObject.getNames((Object) "false");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("+[!HJ?{/9vCSJL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      JSONPointer.builder();
      try { 
        jSONObject0.getBigInteger(";IO.K5;D=Bm%+\"b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optNumber("] could not be converted to BigInteger.");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = ";IO.K5;D=Bm%+\"b";
      linkedList0.push(";IO.K5;D=Bm%+\"b");
      // Undeclared exception!
      try { 
        linkedList0.set((-150), ";IO.K5;D=Bm%+\"b");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -150, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.optNumber("o4FRNCZ6E?*R", (Number) null);
      assertEquals(1, jSONObject1.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      HashMap<ByteArrayOutputStream, Integer> hashMap0 = new HashMap<ByteArrayOutputStream, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "aQI9";
      try { 
        JSONObject.stringToNumber("Md");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [Md] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Locale.getISOLanguages();
      jSONArray0.toList();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      jSONArray0.toJSONObject(jSONArray0);
      try { 
        JSONObject.stringToNumber("JSONArray[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [JSONArray[] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 8192;
      jSONObject0.toString(8192);
      jSONObject0.optInt("java.io.StringWriter@0000000002");
      String string0 = "#nYTXn c3Q}ck<5%TE";
      HashMap<BufferedOutputStream, Character.UnicodeScript> hashMap0 = new HashMap<BufferedOutputStream, Character.UnicodeScript>();
      File file0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null, ">");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2561, true);
      StringWriter stringWriter0 = new StringWriter(92);
      PipedWriter pipedWriter0 = new PipedWriter();
      Long long0 = new Long(2561);
      stringWriter0.write((String) null);
      JSONObject.wrap(stringWriter0);
      JSONObject jSONObject0 = new JSONObject((Object) "java.io.StringWriter@0000000002");
      JSONObject jSONObject1 = jSONObject0.put("UL._?fo,Yt+V(n", 471L);
      jSONObject1.toString(92);
      try { 
        jSONArray0.getJSONObject(92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[92] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[5];
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.push("%s is not an array index");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.toMap();
      try { 
        jSONObject1.getBigDecimal((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "=->g6UjJ";
      try { 
        jSONObject0.getBigInteger("=->g6UjJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.toString();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 427;
      JSONObject jSONObject0 = new JSONObject(427);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("", (-4519.32F));
      MockFile mockFile0 = new MockFile("", "-*Fb");
      JSONObject.getNames(jSONObject0);
      MockFile mockFile1 = new MockFile(mockFile0, "-*Fb");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile1);
      jSONObject1.write((Writer) mockFileWriter0, 427, 92);
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        jSONObject1.getDouble("-*Fb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3906);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "%s is not an array index";
      stringArray0[1] = "";
      stringArray0[2] = "8>PEP?m<=g~j&<7";
      stringArray0[3] = "] is not an int.";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "Cs)LzOPqrF";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      MockFile mockFile0 = new MockFile("", "] is not an int.");
      MockFile mockFile1 = new MockFile(mockFile0, "%s is not an array index");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile1);
      jSONObject1.write((Writer) mockFileWriter0, 3906, 3906);
      try { 
        jSONObject1.getBigInteger("Pc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "P[]");
      JSONObject.quote("P[]", (Writer) charArrayWriter1);
      assertEquals(8, charArrayWriter1.size());
      assertEquals(8, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(13);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-85);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 93, 47);
      InputStreamReader inputStreamReader0 = null;
      try {
        inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      try { 
        jSONObject0.get("org.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "~0";
      try { 
        jSONObject0.get("~0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = "|3Oo*EIyV";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|3Oo*EIyV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      String[] stringArray0 = new String[6];
      String string0 = "";
      stringArray0[0] = "";
      stringArray0[1] = "].";
      stringArray0[2] = "YvqX1u|L4}5{=";
      stringArray0[3] = "S}|";
      stringArray0[4] = "\"";
      stringArray0[5] = "ZNzqqO['";
      JSONObject jSONObject0 = new JSONObject(pushbackInputStream0, stringArray0);
      try { 
        jSONObject0.getJSONObject("Expected a ',' or ']'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = "]";
      Locale locale0 = new Locale("]");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("z", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name z, locale ]
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject jSONObject0 = new JSONObject(pipedOutputStream0);
      // Undeclared exception!
      try { 
        jSONObject0.query("] is not a valid number.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query("] is not a JSONArray.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.optLong("not");
      String string0 = JSONObject.quote("");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("^>CV-UJPMS7", "^>CV-UJPMS7");
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "}Z<Ome4SL";
      try { 
        jSONObject0.getLong("}Z<Ome4SL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-34);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.add(bigInteger1);
      float float0 = jSONObject0.optFloat((String) null, (-2284.8699F));
      assertEquals((-2284.8699F), float0, 0.01F);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject("Duplicate key \"", stringArray0);
      jSONObject0.optLong("Duplicate key \"", 1611L);
      jSONObject0.optBoolean("4kBw|vld5zd");
      jSONObject0.optFloat("eG#:q.}]", (float) 1611L);
      JSONArray jSONArray1 = jSONObject0.optJSONArray("W*+pYf.)rj");
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Locale.getISOLanguages();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = "getDeclaringClass";
      JSONObject.isDecimalNotation("getDeclaringClass");
      LinkedList<Dialog.ModalExclusionType> linkedList0 = new LinkedList<Dialog.ModalExclusionType>();
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.APPLICATION_EXCLUDE;
      linkedList0.offerFirst(dialog_ModalExclusionType0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Locale locale0 = Locale.JAPANESE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("getDeclaringClass", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name getDeclaringClass, locale ja
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Object object0 = JSONObject.wrap("I*9E<]");
      assertEquals("I*9E<]", object0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      JSONObject jSONObject0 = new JSONObject((Object) "java.io.StringWriter@0000000002");
      try { 
        jSONObject0.getJSONObject("java.io.StringWriter@0000000002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000037] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      hashMap0.put("X8O\":Kf", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-64);
      byteArray0[0] = (byte) (-64);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      StringWriter stringWriter0 = new StringWriter(2);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(mockFileReader0);
      PushbackReader pushbackReader0 = null;
      try {
        pushbackReader0 = new PushbackReader(lineNumberReader0, (byte) (-64));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(74);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.append("", bigInteger0);
      Map<String, Object> map0 = jSONObject1.toMap();
      JSONObject.wrap(map0);
      jSONObject0.put("", map0);
      Locale locale0 = Locale.JAPANESE;
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("?pu4x:", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name ?pu4x:, locale ja
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      HashMap<Normalizer.Form, JSONObject> hashMap0 = new HashMap<Normalizer.Form, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Locale.getISOLanguages();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      String string0 = "X8O\":Kf";
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      hashMap0.put("X8O\":Kf", proxy_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string1 = "";
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-64);
      byteArray0[0] = (byte) (-64);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-24);
      byte byte1 = (byte)0;
      byteArray0[4] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.compareTo(bigInteger1);
      BigDecimal bigDecimal1 = null;
      bigDecimal0.intValue();
      MathContext mathContext0 = null;
      try {
        mathContext0 = new MathContext("LPcd0Cp/qMMAkDJ3N(-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad string format
         //
         verifyException("java.math.MathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "";
      stringArray0[2] = stringArray0[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject("Duplicate key \"", stringArray0);
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("Duplicate key \"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(5585);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "] is not a JSONObject.";
      stringArray0[1] = "";
      stringArray0[2] = "get";
      stringArray0[3] = "";
      stringArray0[4] = "Illegal escape.";
      stringArray0[5] = "2RT$[RC*8`Z#=AVp2";
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toMap();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong((String) null);
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong((String) null);
      try { 
        jSONObject0.getString("fpW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBigDecimal(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = "\"x";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("\"x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JSONObject.writeValue(stringWriter0, (Object) null, 790, 0);
      assertEquals("null", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("[%B3!Xv6bo");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("^>CVUJPMS7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'w';
      charArray0[1] = '0';
      charArray0[2] = ';';
      charArray0[3] = 'o';
      charArray0[4] = 'k';
      charArray0[5] = ']';
      charArray0[6] = '\"';
      charArray0[7] = '|';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONTokener jSONTokener0 = new JSONTokener(charArrayReader0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }
}
