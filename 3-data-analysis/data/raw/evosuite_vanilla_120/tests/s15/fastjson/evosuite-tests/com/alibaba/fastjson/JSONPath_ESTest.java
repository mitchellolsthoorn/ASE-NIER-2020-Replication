/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 21:10:22 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import java.io.File;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/8");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("/stackTrace/8");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("rlike", "\"@3Dz(tr:nk>", 2608, hashMap0);
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, (Object) null, sQLClientInfoException0, hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull((byte)17, (byte)107);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "qzFJ0}]4|24Sv*";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("qzFJ0}]4|24Sv*", "", "E", stringArray0, true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("null");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1442, 0, 292);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, "I", "I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[k[gCVn;j:+ +bxkLxR");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 108, (-1371));
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("RLIKE", "fastjson.parser.deny", "d!z5&C~9n", (String[]) null, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, serializeConfig0, jSONPath_FilterSegment0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$FilterGroup");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'c, but 'p'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("T>QCHv[");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" :O%O>!0rymM8z!");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax.  :O%O>!0rymM8z!
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("tl=#v)z");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("scanFieldString");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!hqg_K6|0?YB9");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Yrbo9.^yw49nSU(V");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-2485L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9}g (Vz/3F(- REB~\"");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(9L, object0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("00e^");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(0L, object0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("(FZ)V");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("16'Jf?AV~m>|TJ|z*", (-1223L), 9007199254740991L, true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Q@1v|5':,");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntBetweenSegement0);
      assertSame(jSONPath_IntBetweenSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!hqg_K6|0?YB9");
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement(":N", (long[]) null, true);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntInSegement0);
      assertSame(jSONPath_Filter0, jSONPath_IntInSegement0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$K|{U:}0E1$ng2");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. $K|{U:}0E1$ng2
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Feature[] featureArray0 = new Feature[4];
      // Undeclared exception!
      try { 
        JSONPath.extract("com.alibaba.fastjson.JSONPath$1", "com.alibaba.fastjson.JSONPath$1", (ParserConfig) null, (-1436), featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("parent");
      jSONPath0.init();
      assertEquals("parent", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("com.alibaba.fastjson.serializer.IntegerCodec", (Pattern) null, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("ir$c");
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, "ir$c", "ir$c", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("6'Ef?AVm>|)@|z*", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, aSMDeserializerFactory0, serializeConfig0.propertyNamingStrategy, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("()I");
      jSONPath_JSONPathParser0.next();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("E.qx9U)!aJEvOgW&W");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('X');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"k!mh07{STe2^-z");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('k', char0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("(FZ)V");
      long[] longArray0 = new long[6];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("\fWB>G1OPFy]Dpq qp", longArray0, false);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1970), 54, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(97, 3222, 52, 97, 0, (-2813));
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, jSONPath_RangeSegment0, mockGregorianCalendar0, jSONPath_RangeSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("", 0L, 0L, false);
      JSONPath jSONPath0 = new JSONPath("f");
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, "", "", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-3068));
      JSONPath jSONPath0 = new JSONPath("u'F4F");
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.eval(jSONPath0, "u'F4F", jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("v", true);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, (Object) null, jSONPath_Operator0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("1.2.68");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue(160L);
      assertEquals(161.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      File file0 = MockFile.createTempFile("com.alibaba.fastjson.serializer.JSONSerializableSerializer", (String) null);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) file0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath.arrayAdd((Object) serializeConfig0, "U%]8pdLUP:\\S", (Object[]) null);
      assertEquals("@type", serializeConfig0.getTypeKey());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("safeMode");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("X", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.setPropertyValue(parserConfig0, "A0@-", 1987357061180671321L, serializeConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object object0 = JSONPath.read((String) null, "<%pteI?");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLException sQLException0 = new SQLException((String) null);
      DataTruncation dataTruncation0 = new DataTruncation(63, false, false, 99999, 3309, sQLException0);
      Set<?> set0 = JSONPath.keySet((Object) dataTruncation0, "@");
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("(");
      Set<?> set0 = jSONPath0.keySet((Object) "6e9pM]n");
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("X");
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("z>xq5!u6$^][\"");
      Collection<Object> collection0 = jSONPath0.getPropertyValues("z>xq5!u6$^][\"");
      assertFalse(collection0.contains("z>xq5!u6$^][\""));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("!hqg_K6|0?YB9");
      Object object0 = jSONPath0.getPropertyValue((Object) null, "U =Y", 264L);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("null");
      Class<Integer> class0 = Integer.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("max", (SerializeConfig) null, parserConfig0);
      Class<Long> class0 = Long.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      Class<JSONPath> class0 = JSONPath.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[k[gCVn;j:+ +bxkLJR");
      Object object0 = jSONPath0.getArrayItem((Object) null, 36);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("safeMode");
      Object object0 = jSONPath0.getArrayItem(jSONPath0, 0);
      assertSame(object0, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("B BG");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("scanFieldDecimal", (-921.920833), jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      int int0 = jSONPath0.evalSize(jSONPath_FilterSegment0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("zj2@J");
      int int0 = jSONPath0.evalSize("zj2@J");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      Set<?> set0 = jSONPath0.evalKeySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Jd[^ 'f!b6 Op:7T-p^");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("parent");
      Set<?> set0 = jSONPath0.evalKeySet(sQLTransactionRollbackException0);
      assertEquals(4, set0.size());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      Object object0 = jSONPath0.eval((Object) jSONPath_SizeSegment0);
      assertSame(jSONPath_SizeSegment0, object0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = JSONPath.compare("m", "RLmz&Uw-0d#2");
      assertEquals(27, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.size((Object) "", "TNa5K1~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      int int0 = JSONPath.size((Object) sQLIntegrityConstraintViolationException0, "");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.util.List");
      Class<JSONPath> class0 = JSONPath.class;
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("a[d", serializeConfig0, (ParserConfig) null);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) serializeConfig0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("null");
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) "null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[k[gVn;j:+ +bxkLJR");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[k[gVn;j:+ +bxkLJR");
      int int0 = jSONPath0.size((Object) sQLTransactionRollbackException0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("X");
      BigDecimal bigDecimal0 = new BigDecimal((-1849.2853406744));
      Double double0 = new Double(1000.0);
      // Undeclared exception!
      jSONPath0.setPropertyValue(bigDecimal0, "X", 1L, double0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("/");
      JSONPath jSONPath0 = JSONPath.compile("/");
      ParserConfig parserConfig0 = new ParserConfig(false);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath1 = new JSONPath("me|+c`", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath1.setPropertyValue(jSONPath0, "buildMethod not found.", 1987357061180671321L, jSONPath_NotNullSegement0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("fastjson", serializeConfig0, (ParserConfig) null);
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, "rlike", 5614464919154503228L, mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("rlike");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem((JSONPath) null, (Object) null, (-54), "rlike");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Class<Method> class0 = Method.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) javaBeanSerializer0, "com.alibaba.fastjson.JSONPath$MaxSegment", (Object) jSONPath_WildCardSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("max");
      // Undeclared exception!
      JSONPath.set((Object) jSONPath0, "REG_MATCH", (Object) jSONPath0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("!hqg_6|\"(H0?YB9", "!hqg_6|\"(H0?YB9");
      Float float0 = new Float((double) 989);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) sQLRecoverableException0, "/stackTrace/1", (Object) float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("\\.", "\\.");
      JSONPath.set((Object) "2bd", "2bd", (Object) sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      int[] intArray0 = new int[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("F7tOT2 \"VWv2`7iC", "fastjson.parser.autoTypeSupport");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("fastjson.parser.safeMode", "4f6RL", intArray0, sQLSyntaxErrorException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("W@<:biofSh2av/", batchUpdateException0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "=Rr!qNh5jh", (-2), mockThrowable0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_WildCardSegment0, (Object) sQLDataException0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("safeMode");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_WildCardSegment0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("16'Jf?AV~m>|TJ|z*", "16'Jf?AV~m>|TJ|z*");
      JSONPath jSONPath1 = JSONPath.compile("ffJ");
      // Undeclared exception!
      jSONPath1.set((Object) jSONPath0, (Object) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.autoTypeAccept", false);
      JSONPath jSONPath0 = JSONPath.compile("1*rFBc");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.parser.safeMode", (-920L), (-920L), false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_FilterSegment0, (Object) jSONPath_PropertySegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 1*rFBc
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "BETWEEN";
      stringArray0[1] = "laqnBolNan";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(javaBeanSerializer0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "scanBoolean";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject("", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject("P}4i'T-+Pl", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("o");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(jSONPath_WildCardSegment0, "%IJ;T 7dO_yApn-rO", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("X");
      // Undeclared exception!
      jSONPath0.removePropertyValue(jSONPath0, "fastjson.parser.autoTypeSupport", false);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("X");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, "X", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, (Object) null, 180);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<JSONPath> class0 = JSONPath.class;
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) class0, "R0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      // Undeclared exception!
      JSONPath.remove((Object) jSONPath0, "writeEnum");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        JSONPath.remove(object0, "/");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 532);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) sQLFeatureNotSupportedException0, "");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("\"");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "\"");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("~2");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "QO/{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ~2
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("/stackTrace/0", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("6'Ef?AVm>|)@|z*");
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) jSONPath0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".(v");
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) jSONPath0, "[S");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("X");
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("U]#Yl");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : U]#Yl
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Jd[^ 'f!b6 Op:7T-p^");
      jSONPath0.init();
      assertEquals("Jd[^ 'f!b6 Op:7T-p^", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("1.2.68");
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("not");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("LIT,}");
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path not
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("?S9US5'<DR19nej:y", serializeConfig0, parserConfig0);
      Class<MockCalendar> class0 = MockCalendar.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue(javaBeanSerializer0, (String) null, 5614464919154503228L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("!hqg_K6|0?YB9");
      Class<JSONPath> class0 = JSONPath.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(":AmO.W");
      Byte byte0 = new Byte((byte) (-20));
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem(byte0, (byte) (-20));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSONPath.extract("/f", ".vyeNH", parserConfig0, 3089, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      Feature[] featureArray0 = new Feature[7];
      // Undeclared exception!
      try { 
        JSONPath.extract("null", "null", parserConfig0, (-268435456), featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // null
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Feature[] featureArray0 = new Feature[4];
      // Undeclared exception!
      try { 
        JSONPath.extract("5:qb'/Mtz]Y23K[5;", "5:qb'/Mtz]Y23K[5;", parserConfig0, 26, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 5:qb'/Mtz]Y23K[5;
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("/cause/stackTrace/12", "/cause/stackTrace/12");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "X");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("16'Jf?AV~m>|TJ|z*");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 16'Jf?AV~m>|TJ|z*
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("scanBoolean");
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) sQLIntegrityConstraintViolationException0, "-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) "null", "between");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Object object0 = JSONPath.eval((Object) serializeConfig0, "[k[gVn;j:+ +bxkLJR");
      assertSame(serializeConfig0, object0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("9");
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) " etween");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("x");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      int[] intArray0 = new int[4];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(jSONPath_WildCardSegment0, "x", 1, jSONPath_MultiIndexSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("v");
      // Undeclared exception!
      jSONPath0.deepSet(jSONPath0, "y^rFBc", 122, (Object) null);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(".");
      Class<Integer> class0 = Integer.class;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(class0, ".", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("v");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("v", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(locale0, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) sQLFeatureNotSupportedException0, "[X@LU;UgNLvD$Ni(", (Object) sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. [X@LU;UgNLvD$Ni(
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-2616));
      JSONPath jSONPath0 = new JSONPath(";_{(");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) jSONPath_SizeSegment0, (Object) jSONPath_ArrayAccessSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ;_{(
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Jd[^ 'f!b6 Op:7T-p^");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("v");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("invalid escape character x", "!hqg_K6|0?YB9", Integer.MAX_VALUE, sQLTransactionRollbackException0);
      jSONPath0.contains((Object) sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      // Undeclared exception!
      try { 
        JSONPath.compare((Object) null, jSONPath0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("scanBoolean");
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null, serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("!hqg_K6|0?YB9", true);
      JSONPath jSONPath0 = new JSONPath("P}4i'T-+Pl");
      DataTruncation dataTruncation0 = new DataTruncation(65, true, false, 2139, 2139);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(dataTruncation0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLInvalidAuthorizationSpecException0);
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, sQLTransactionRollbackException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("keySet", serializeConfig0, parserConfig0);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONPath0.deepSet(bigInteger0, "LIKE", 9007199254740991L, "LIKE");
      assertEquals("keySet", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      jSONPath0.deepSet(hashMap0, "alibaba", (-3197L), jSONPath0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/stackTrace/12", true);
      jSONPath_PropertySegment0.setValue(jSONPath0, (Object) null, aSMDeserializerFactory0);
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(3);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.autoTypeAccept");
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MatchSegement");
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(sQLTimeoutException0, "*Kz:[Ql&i{Tz1K9^Z>q", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path com.alibaba.fastjson.JSONPath$MatchSegement, segement *Kz:[Ql&i{Tz1K9^Z>q
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(3);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("*Kz:[Ql&i{Tz1K9^Z>q", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, serializeConfig0, (-1385));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.serializer.SerializeConfig
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".(v");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, arrayList0, 18, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("null");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0, serializeConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("null", 0.0, jSONPath_Operator0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("7e5TO", false);
      jSONPath_PropertySegment0.setValue(jSONPath0, map0, jSONPath_DoubleOpSegement0);
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("Hdhcg{D`V&", false);
      JSONPath jSONPath0 = new JSONPath("m\"rYV?m$^B,0-Fz");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("m\"rYV?m$^B,0-Fz", "f=tkB", sQLSyntaxErrorException0);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, sQLInvalidAuthorizationSpecException0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/10");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(2, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'F8xK%'nH=TpIOgYh");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 'F8xK%'nH=TpIOgYh
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("q<");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = JSONPath.containsValue((Object) "NE", "[1G'pA#Kg4A`F6p2", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("error parse true");
      jSONPath_JSONPathParser0.readSegement();
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("16'Jf?A~m>|TJz*", "16'Jf?A~m>|TJz*");
      JSONPath jSONPath0 = new JSONPath(">");
      MockThrowable mockThrowable0 = new MockThrowable(sQLTimeoutException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(">", ">", 166, mockThrowable0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(166, 1, 3);
      boolean boolean0 = jSONPath0.set((Object) jSONPath_RangeSegment0, (Object) sQLInvalidAuthorizationSpecException0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/8");
      int[] intArray0 = new int[8];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      boolean boolean0 = jSONPath0.set((Object) "yC?z]],2`x", (Object) jSONPath_MultiIndexSegment0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "sL7j}eOmBQ", (Object) "JSONValidator$UTF16Validator", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("=Rr!qNh5jh");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("/stackTrace/9", "fastjson.parser.safeMode", (-672));
      SQLWarning sQLWarning0 = new SQLWarning("=Rr!qNh5jh", sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_NullSegement0, (Object) sQLWarning0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToArray("/", stringArray0);
      JSONPath jSONPath0 = JSONPath.compile("1.2.68");
      boolean boolean0 = jSONPath0.set((Object) null, object0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("q<");
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      jSONPath0.remove((Object) bigInteger0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("sq[pJk}^M-_6D^()");
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("!hqg_K6|0?YB9");
      boolean boolean0 = jSONPath0.containsValue((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("\\.");
      boolean boolean0 = jSONPath0.contains((Object) "\\.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("MM/dd/yyyy");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(*_ul'>3`}`g", 39);
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/2");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("QO/{");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("safeMode");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Object object0 = jSONPath0.extract(defaultJSONParser0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("parent");
      Object object0 = jSONPath0.eval((Object) "parent");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("!hqg_K6|0?YB9", true);
      JSONPath jSONPath0 = new JSONPath("!hqg_K6|0?YB9");
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) jSONPath_PropertySegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. !hqg_K6|0?YB9
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, parserConfig0);
      int[] intArray0 = new int[9];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "44VLhj;_A(Z=^%vohe", (Object) jSONPath_MultiIndexSegment0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("]Q92cB4E,;;Uu:D-");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(351);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("N", (String) null);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, jSONPath_SizeSegment0, sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath$SizeSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/5");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/stackTrace/5";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(jSONPath0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/");
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToObject(sQLTimeoutException0, stringArray0);
      assertSame(sQLTimeoutException0, object0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Object object0 = JSONPath.reserveToObject((Object) null, (String[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "X";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("X", stringArray0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("XEZ9");
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(sQLTimeoutException0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("com.alibaba.fastjson.JSONPath$NullSegement", (String[]) null);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("not");
      Set<?> set0 = JSONPath.keySet((Object) jSONPath_NullSegement0, "(");
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Properties properties0 = new Properties();
      JSONPath jSONPath0 = new JSONPath("keySet");
      Set<?> set0 = jSONPath0.evalKeySet(properties0);
      assertFalse(set0.contains("keySet"));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("=");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      int int0 = jSONPath0.evalSize(propertyNamingStrategy0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("scanBoolean");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      int int0 = jSONPath0.size((Object) arrayList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath jSONPath0 = JSONPath.compile("(d-gYW<c");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(jSONPath_Operator0, "o\"5C6d|wS#QZQF", false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("groovy.lang.MetaClass");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      boolean boolean0 = jSONPath0.removePropertyValue(sQLClientInfoException0, "M/stackTrace/8", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath jSONPath0 = JSONPath.compile("and");
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.put("!hqg_K6|0?YB9", clientInfoStatus0);
      boolean boolean0 = jSONPath0.removePropertyValue(hashMap0, "16'Jf?AV~>|TJ|z*", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath jSONPath0 = JSONPath.compile("and");
      boolean boolean0 = jSONPath0.removePropertyValue(hashMap0, "16'Jf?AV~>|TJ|z*", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("X");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Map<String, Object> map0 = JSONPath.paths((Object) sQLClientInfoException0, serializeConfig0);
      boolean boolean0 = jSONPath0.removePropertyValue(map0, "vLy}(%*'n#E", false);
      assertEquals(87, map0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?A~m>|TJz*");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("16'Jf?A~m>|TJz*", "16'Jf?A~m>|TJz*");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("16'Jf?A~m>|TJz*", sQLTimeoutException0);
      linkedList0.add((Object) sQLTransientConnectionException0);
      boolean boolean0 = jSONPath0.setPropertyValue(linkedList0, "*", 2935L, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("v");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("v");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLNonTransientException0);
      jSONPath0.set((Object) hashMap0, (Object) sQLTransactionRollbackException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("parnt", "v", hashMap0);
      Long long0 = new Long((-1191L));
      jSONPath0.deepSet(sQLClientInfoException0, "y^FBc", (-1191L), long0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Qs");
      Double double0 = new Double((-1751.6));
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath0, double0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      jSONPath0.deepScan(arrayList0, "Qs", arrayList1);
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONPath.compile("scanBoolean");
      Class<Integer> class0 = Integer.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "BETWEEN";
      stringArray0[1] = "scanBoolean";
      stringArray0[2] = "scanBoolean";
      stringArray0[3] = "scanBoolean";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(javaBeanSerializer0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("X");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(serializeConfig0, "e^Fnl%\"D]Mu:", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path X, segement e^Fnl%\"D]Mu:
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(16);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/1", serializeConfig0, parserConfig0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(16, 16, (-11));
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.deny");
      boolean boolean0 = jSONPath0.containsValue((Object) mockGregorianCalendar0, (Object) sQLDataException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("16'Jf?A~mG[>|TJz*", "16'Jf?A~mG[>|TJz*");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MockThrowable mockThrowable0 = new MockThrowable(sQLTimeoutException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("16'Jf?A~mG[>|TJz*", "16'Jf?A~mG[>|TJz*", 166, mockThrowable0);
      linkedList0.add((Object) sQLInvalidAuthorizationSpecException0);
      Set<?> set0 = JSONPath.keySet((Object) linkedList0, "Zjyyf");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Short short0 = new Short((short)1488);
      boolean boolean0 = JSONPath.eqNotNull(short0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Float float0 = new Float(3228.0427F);
      Double double0 = new Double(821.69682772787);
      boolean boolean0 = JSONPath.eqNotNull(float0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Float float0 = new Float(256.3297F);
      BigDecimal bigDecimal0 = new BigDecimal((double) 503);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Float float0 = new Float(0.0F);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      boolean boolean0 = JSONPath.eqNotNull(float0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Float float0 = new Float(0.0F);
      boolean boolean0 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, 3089);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Float float0 = new Float((float) (byte)92);
      boolean boolean0 = JSONPath.eqNotNull(float0, (byte)92);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(5614464919154503228L, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Float float0 = new Float((float) 3089);
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Short short0 = new Short((short)10);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("yyyy-MM-dd HH:mm:ss", sQLClientInfoException0);
      boolean boolean0 = JSONPath.eq(short0, sQLInvalidAuthorizationSpecException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      Long long0 = new Long((-2117L));
      boolean boolean0 = JSONPath.eq(byte0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = JSONPath.eq("", "SZTG~m2_/x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      boolean boolean0 = JSONPath.eq(")0$na^Ia?ffgc&c", bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      boolean boolean0 = JSONPath.eq((Object) null, "WriteMapNullValue");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("WEy$dAJA0VB`g[>", "listContext", (-743));
      boolean boolean0 = JSONPath.eq(sQLDataException0, sQLDataException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("6'Ef?AVm>|)@|z*");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Ffk(d>o R");
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLTimeoutException0, stack0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      JSONPath jSONPath0 = JSONPath.compile("<Jk=Y98R");
      jSONPath0.deepGetPropertyValues(arrayList0, arrayList0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1586), 3089, 2326);
      JSONPath jSONPath0 = JSONPath.compile("ir$c");
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_RangeSegment0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      jSONPath0.deepGetPropertyValues(map0, arrayList0);
      assertEquals(1, map0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/8");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, serializeConfig0, (-1105294343), "/stackTrace/8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.serializer.SerializeConfig
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "16'Jf?AV~m>|TJ|z*";
      stringArray0[1] = "16'Jf?AV~m>|TJ|z*";
      stringArray0[2] = "/stackTrace";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      int[] intArray0 = new int[5];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      Object object0 = jSONPath_MultiPropertySegment0.eval(jSONPath0, "16'Jf?AV~m>|TJ|z*", jSONPath_MultiIndexSegment0);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, object0, (-87), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = JSONPath.compile("`.Hq?fo");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath_WildCardSegment0, hashMap0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      int[] intArray0 = new int[7];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = JSONPath.compile("parseShort error, field : ");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("o<IK{|#'*[WZ!RSgew");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, false);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath0, jSONPath_NullSegement0, jSONPath_MultiIndexSegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("()I");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("()I", serializeConfig0, parserConfig0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, true);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("wpu6vWfz", "@type");
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, (Object) null, sQLTransactionRollbackException0, serializeConfig0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Short short0 = new Short((short)10);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("q<", short0, false);
      JSONPath jSONPath0 = JSONPath.compile("q<");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.remove(jSONPath0, jSONPath0, sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.SQLException$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("P}4i'Ti-+l", 2069.041243900186, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      Integer integer0 = new Integer((-242));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, integer0, sQLIntegrityConstraintViolationException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".(v");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("*}8qfldi?$t@3h-w]8", (-4753211795663173871L), 0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("=", 2139, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("=");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath0, jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("X");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("00e^");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "X", serializeConfig0);
      assertSame(serializeConfig0, object0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny.internal");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.autoTypeSupport", "G\"+Rh*So", 519);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("fastjson.parser.safeMode", 519, 516L, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      DataTruncation dataTruncation0 = new DataTruncation((-1), false, true, (-1), 519, sQLFeatureNotSupportedException0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, jSONPath0, dataTruncation0);
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("between", 2250984853177152882L, 466L, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, parserConfig0, jSONPath_IntBetweenSegement0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("()I");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("()I", serializeConfig0, parserConfig0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("max");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      Pattern pattern0 = Pattern.compile(".$!D,()B-7d>n6J>+", 503);
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("parser", pattern0, jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_RegMatchSegement0, jSONPath_RegMatchSegement0, true);
      SQLWarning sQLWarning0 = new SQLWarning("max", "com.alibaba.fastjson.JSONArray", 503);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_RegMatchSegement0, jSONPath0, sQLWarning0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("16'Jf?AV~m>|TJ|z*", "Ffk(d>o R", jSONPath_Operator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("16'Jf?AV~m>|TJ|z*", "16'Jf?AV~m>|TJ|z*", 47);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, sQLInvalidAuthorizationSpecException0, jSONPath_Operator0, "Ffk(d>o R");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("()I");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("()I", serializeConfig0, parserConfig0);
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement(">(q0", "`sKz\"vRN>RWdZg%t4c", jSONPath_Operator0);
      Integer integer0 = new Integer((-106));
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, object0, jSONPath_JSONPathParser0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("<Jk=Y98R");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("org.joda.time.Duration", "org.joda.time.Duration", false);
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, bigDecimal0, "<Jk=Y98R", "<Jk=Y98R");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("w{6ix[mj8", "nin", (String) null, (String[]) null, true);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("com.alibaba.fastjson.JSONPath$Operator", "in", "/stackTrace/8", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/8");
      Byte byte0 = new Byte((byte)111);
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, "in", byte0, "com.alibaba.fastjson.JSONPath$Operator");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("(I)V", (String) null, "P}4i'T-+Pl", stringArray0, false);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(d-gYW<c";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("(d-gYW<c", jSONPath_MultiPropertySegment0, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("(d-gYW<c");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("(d-gYW<c", "(d-gYW<c", Integer.MAX_VALUE, (Throwable) null);
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, jSONPath_MultiPropertySegment0, "(d-gYW<c", sQLIntegrityConstraintViolationException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".(v");
      Double double0 = new Double((-1751.6));
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath0, double0);
      assertNotNull(object0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("/stackTrace/10", jSONPath_WildCardSegment0, jSONPath_Operator0);
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, object0, jSONPath_Operator0, arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("/stackTrace/4", 10.0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/4");
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, jSONPath_Operator0, jSONPath0, jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      String[] stringArray0 = new String[17];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("not support jsonpath : ", stringArray0, false);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "16'Jf?AV~m>|TJ|z*", jSONPath0, "16'Jf?AV~m>|TJ|z*");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?AV~m>|TJ|z*");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "16'Jf?AV~m>|TJ|z*";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("not support jsonpath : ", stringArray0, false);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "16'Jf?AV~m>|TJ|z*", jSONPath0, "16'Jf?AV~m>|TJ|z*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((-2047L));
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = longArray0[1];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("eyx-v$8_", longArray0, false);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("TQ0mrJ%,d'*etoO[,", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, longArray0[0], longArray0[0], long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((-2047L));
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("eyx-v$8_", longArray0, false);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("TQ0mrJ%,d'*etoO[,", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, longArray0[0], longArray0[0], long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("QO/{", (-5808540380479486455L), 8963398325558730460L, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntBetweenSegement0, jSONPath_IntBetweenSegement0, false);
      JSONPath jSONPath0 = JSONPath.compile("le");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, "le", jSONPath0, jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("max");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("max", batchUpdateException0, false);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, "", "max", batchUpdateException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("~i%[.5#GYa{GzkbI", "~i%[.5#GYa{GzkbI", true);
      JSONPath jSONPath0 = new JSONPath("~i%[.5#GYa{GzkbI");
      SQLDataException sQLDataException0 = new SQLDataException("}hD0+NXq0DNe=^'6a", "}hD0+NXq0DNe=^'6a", 2026);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("n\"C", "}hD0+NXq0DNe=^'6a", 2026);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, sQLDataException0, sQLSyntaxErrorException0, "n\"C");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment(".(v", (Object) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2293, (-2044), 2293);
      JSONPath jSONPath0 = JSONPath.compile("zj`vXP/p");
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, "f%,^;;>N`(iUQ");
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(40, 1315, 1315);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/4");
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, "", "/stackTrace/4");
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-892), (-892), 2930);
      JSONPath jSONPath0 = new JSONPath("parent");
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, "parent", "parent");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("B BG");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("scanFieldDecimal", (-921.920833), jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Short short0 = new Short((short)48);
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath_FilterSegment0, short0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Float float0 = new Float(471.1F);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        JSONPath.compare(float0, jSONPath_WildCardSegment0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath$WildCardSegment cannot be cast to java.lang.Float
         //
         verifyException("java.lang.Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      int[] intArray0 = new int[9];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("(d-gYW<c", "(dMJYmXnp", intArray0);
      // Undeclared exception!
      try { 
        JSONPath.compare(intArray0[6], batchUpdateException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.BatchUpdateException cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-112));
      int int0 = JSONPath.compare(byte0, byte0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("U");
      Byte byte0 = Byte.valueOf((byte) (-112));
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, jSONPath0, byte0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("NhNNTNA");
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("NOT_LIKE");
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, "NOT_LIKE", jSONPath_JSONPathParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(":");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"LDl1");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("T\"y:");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("#xgw>`5BJ,A|k6*86mw");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"#xgw>`5BJ\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'F8xK%'nH=TpIOgYh");
      jSONPath_JSONPathParser0.parseArrayAccess(false);
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(0, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/3");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("stackTrace", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("BETWEEN");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("in");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!hqg_K6|0?YB9");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but 'h'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=Rr!qNh5jh");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not suppor jsonpath : ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not suppor jsonpath : 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("';j}G/33C4");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '', but '4'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("E1OyX9~J?08i");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-5225L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("8 7L");
      long long0 = jSONPath_JSONPathParser0.readLongValue();
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("X", "size", jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringOpSegement0, jSONPath_StringOpSegement0, true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("&(mx ,yG3jOJGD/l");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_FilterGroup0);
      assertSame(jSONPath_Filter0, jSONPath_FilterGroup0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/8");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(".Nun&f2LJU&sjLf*K");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("s1C>$)eh+");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. s1C>$)eh+
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("q<4Ae^qZj[");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("pI<TrIX;'");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("?pem|&~W`Dx@5");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '(, but 'p'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\fWB>G1OPFy]Dpq qp");
      String string0 = jSONPath_JSONPathParser0.readName();
      assertEquals("WB", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(44, true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("step must greater than zero : ", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : step must greater than zero : 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("U");
      Set<?> set0 = jSONPath0.keySet((Object) jSONPath_MinSegment0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) "gX_[#e8");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("00e^");
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny.internal");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("00e^", "_cu#*$WxAiQ,Gz%%", (Throwable) null);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, sQLTimeoutException0);
      Map<String, Object> map0 = JSONPath.paths(object0);
      //  // Unstable assertion: assertEquals(91, map0.size());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("v");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      jSONPath0.set((Object) hashMap0, (Object) "parent", true);
      SerializeConfig serializeConfig0 = new SerializeConfig(60);
      JSONPath.paths((Object) hashMap0, serializeConfig0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("!hqg_6|\"(H0?YB9", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      Map<String, Object> map0 = JSONPath.paths((Object) sQLClientInfoException0, serializeConfig0);
      //  // Unstable assertion: assertEquals(89, map0.size());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Map<String, Object> map0 = JSONPath.paths((Object) locale0, serializeConfig0);
      assertEquals(13, map0.size());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("I|8", "I|8");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2I|8
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "16'Jf?AV~m>|TJ|z*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      boolean boolean0 = JSONPath.set((Object) "=", "=", (Object) "=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("BuXl8clkC'k", (String) null, 86, (Throwable) null);
      Double double0 = new Double(0.0F);
      boolean boolean0 = JSONPath.set((Object) double0, "/stackTrace/1", (Object) sQLTransactionRollbackException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("fastjson.parser.safeMode", "fastjson.parser.autoTypeSupport");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("NOT_IN", sQLTransientException0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) sQLNonTransientConnectionException0, "fastjson.parser.deny.internal", (Object) "2bd");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("r\"%A8K");
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath_JSONPathParser0, "*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/0/stack_trace/5");
      boolean boolean0 = jSONPath0.remove((Object) jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      long[] longArray0 = new long[1];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("java.util.OptDonalong", longArray0, false);
      boolean boolean0 = JSONPath.remove((Object) jSONPath_IntInSegement0, "/stackTrace/10");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/0/stack_trace/5");
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("/0/stack_trace/5", "/0/stack_trace/5", mockThrowable0);
      Object[] objectArray0 = new Object[10];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) sQLSyntaxErrorException0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.lang.StackTraceElement
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("TNP@~vLl6Y");
      Object[] objectArray0 = new Object[1];
      jSONPath0.arrayAdd((Object) null, objectArray0);
      assertEquals("TNP@~vLl6Y", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONPath.Operator[] jSONPath_OperatorArray0 = JSONPath.Operator.values();
      JSONPath jSONPath0 = JSONPath.compile("org.joda.time.LocalTime");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) sQLFeatureNotSupportedException0, (Object[]) jSONPath_OperatorArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path org.joda.time.LocalTime
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("/", stringArray0);
      JSONPath jSONPath0 = JSONPath.compile("1.2.68");
      jSONPath0.arrayAdd((Object) jSONArray0, (Object[]) stringArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(",");
      jSONPath0.arrayAdd((Object) "=Rr!qNh5jh", (Object[]) null);
      assertEquals(",", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("!hqg_K6|0?YB9");
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("5EbGpRZ{Q");
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("t");
      int int0 = jSONPath0.size((Object) jSONPath0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath(";", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.containsValue((Object) ";", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("fastjson.parser.deny.internal", "rlike");
      boolean boolean0 = JSONPath.contains((Object) sQLTransientException0, "rlike");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      int[] intArray0 = new int[9];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      boolean boolean0 = JSONPath.contains((Object) jSONPath_MultiIndexSegment0, "?");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("m\"rYV?m$^B,0-Fz");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("]Q92cB4E,;;Uu:D-", "/stackTrace/9");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Object object0 = JSONPath.extract("", "fastjson.parser.autoTypeAccept");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2.
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'-f?An~#>|TJ|z*_");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/3");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("BuXl8clkC'k", (String) null, 69, (Throwable) null);
      Double double0 = new Double(0.0F);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) double0, "*", (Object) sQLTransactionRollbackException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("16'Jf?A~m>|TJz*");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, "vz~<e3z", mockGregorianCalendar0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("not");
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer");
      boolean boolean0 = jSONPath0.remove((Object) jSONPath_NullSegement0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      Pattern pattern0 = Pattern.compile(".$!D,()B-7d>n6J>+", 503);
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("parser", pattern0, jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_RegMatchSegement0, jSONPath_RegMatchSegement0, true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("|fN?77");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_FilterGroup0);
      assertSame(jSONPath_FilterGroup0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/8");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.springframework.security.web.authentication.WebAuthenticationDetails", "/stackTrace/8");
      DataTruncation dataTruncation0 = new DataTruncation((-3713), false, false, (-355), 546, sQLFeatureNotSupportedException0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) dataTruncation0, (Object) jSONPath_Operator0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(497);
      JSONPath jSONPath0 = new JSONPath("!@H<!podQUF ~R");
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("QO/{", (-5808540380479486455L), (-3714900953609113456L), false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntBetweenSegement0, jSONPath_IntBetweenSegement0, false);
      // Undeclared exception!
      try { 
        JSONPath.compare("QO/{", jSONPath_FilterGroup0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny.internal");
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, serializeConfig0, serializeConfig0);
      assertEquals(2, (int)integer0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("]o7", "]o7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2]o7
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "^bakj$9&*ulgitX", (-1));
      SQLDataException sQLDataException0 = new SQLDataException("(S)Ljava/lang/Short;", "kFWVbMn5", sQLFeatureNotSupportedException0);
      boolean boolean0 = JSONPath.containsValue((Object) null, "^bakj$9&*ulgitX", (Object) sQLDataException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      int int0 = JSONPath.size((Object) null, "*Kz:[Ql&i{Tz1K9^Z>q");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("scanBoolean");
      String string0 = jSONPath0.getPath();
      assertEquals("scanBoolean", string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/3");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("]o7", "[-9/4T+v))nX");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2]o7
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1322));
      Object object0 = JSONPath.eval((Object) jSONPath_ArrayAccessSegment0, "n/awWXE/5");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("(Ljava/lang/String;Z)V", (-1067L), jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("(Ljava/lang/String;Z)V");
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, "(Ljava/lang/String;Z)V", jSONPath0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONPath.remove((Object) "*", "like");
  }
}
